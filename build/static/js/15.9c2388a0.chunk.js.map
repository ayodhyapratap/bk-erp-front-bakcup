{"version":3,"sources":["app/components/settings/options/practice-detail/PracticeDetails.js","app/components/settings/options/practice-staff/DoctorTiming.js","app/components/settings/options/practice-staff/PracticeStaff.js","app/components/settings/options/practice-staff/AddEditDoctor.js","app/components/settings/options/practice-staff/AddEditStaff.js","app/components/settings/options/practice-detail/AddPracticeDetails.js","app/components/settings/options/communication-settings/WishSMS.js","app/components/settings/options/communication-settings/AppointmentSMS.js","app/components/settings/options/communication-settings/Emails.js","app/components/settings/options/communication-settings/CommunicationSettings.js","app/components/settings/options/procedure-catalog/EditProcedure.js","app/components/settings/options/procedure-catalog/AddProcedure.js","app/components/settings/options/procedure-catalog/AddorEditProcedure.js","app/components/settings/options/procedure-catalog/RecentProcedure.js","app/components/settings/options/billing/PaymentModes.js","app/components/settings/options/billing/TaxCatalog.js","app/components/settings/options/billing/CancelledInvoice.js","app/components/settings/options/billing/BillingSettings.js","app/components/settings/options/emr/TableData.js","app/components/settings/options/emr/VitalSigns.js","app/components/settings/options/emr/EMRSettings.js","app/components/settings/options/practice-detail/EditPracticeDetail.js","app/components/settings/options/prescriptions/AddorEditPrescriptionForm.js","app/components/settings/options/prescriptions/AddPrescription.js","app/components/settings/options/prescriptions/Prescriptions.js","app/components/settings/options/expenses-types/ExpensesTypes.js","app/components/settings/options/medical-history/MedicalHistory.js","app/components/settings/options/calendar/PracticeTimings.js","app/components/settings/options/calendar/AppointmentCategories.js","app/components/settings/options/calendar/CalendarSettings.js","app/components/settings/SettingSider.js","../node_modules/antd/es/collapse/CollapsePanel.js","../node_modules/antd/es/collapse/Collapse.js","../node_modules/antd/es/collapse/index.js","app/components/settings/options/mlm/MLMGenerate.js","app/components/settings/options/mlm/MlmBase.js","app/components/settings/options/printout/PrintSettings.js","app/components/settings/options/printout/Printout.js","app/components/settings/options/integration/IntegrationHome.js","app/components/settings/options/mailPDF/MailPDFSettings.js","app/components/settings/options/bed-packages/AddorEditBedPackages.js","app/components/settings/options/bed-packages/BedPackages.js","app/components/settings/options/roomtypes/RoomTypes.js","app/components/settings/options/loyalty/AddOffer.js","app/components/settings/options/loyalty/Offers.js","app/components/settings/options/loyalty/AddMembership.js","app/components/settings/options/loyalty/Membership.js","app/components/settings/options/loyalty/promo-code/AddOrEdiPromoCode.js","app/components/settings/options/loyalty/promo-code/PromoCode.js","app/components/settings/options/loyalty/LoyaltySettings.js","app/components/settings/options/labs/AddorEditLab.js","app/components/settings/options/labs/LabTest.js","app/components/settings/options/labs/AddorEditLabPanel.js","app/components/settings/options/labs/LabPanel.js","app/components/settings/options/labs/LabTracking.js","app/components/settings/options/medicine-packages/AddorEditMedicinePackages.js","app/components/settings/options/medicine-packages/MedicinePackages.js","app/components/settings/options/disease-list/DiseaseList.js","app/components/settings/options/agent-roles/AgentRoles.js","app/components/settings/options/agents/AddOrEditAgent.js","app/components/settings/options/agents/AgentList.js","app/components/settings/options/zoom-user/AddOrEditZoomUser.js","app/components/settings/options/zoom-user/ZoomUser.js","app/components/settings/SettingsDash.js","../node_modules/antd/es/switch/style/index.js","../node_modules/antd/es/switch/index.js","app/components/patients/wallet-ledger/PatientWalletLedger.js"],"names":["PracticeDetails","Meta","props","showModal","item","setState","visible","practice","handleCancel","state","practiceList","specialisations","loading","deletePractice","bind","this","admin_practiceData","that","getAPI","ALL_PRACTICE","data","forEach","speciality","id","console","log","value","postAPI","interpolate","PRACTICE_DELETE","refreshClinicData","columns","title","dataIndex","key","render","text","record","href","onClick","to","type","length","onConfirm","okText","cancelText","style","float","pagination","dataSource","closable","width","onCancel","footer","icon","shape","position","top","right","paddingBottom","span","offset","logo","size","src","makeFileURL","ProfileTables","label","name","tagline","email","contact","website","gstin","specialisation","address","locality","React","Component","gutter","DoctorTiming","loadData","DOCTOR_VISIT_TIMING_API","active_practiceId","visting_hour_same_week","openPracticeDays","twoSessions","dataObject","DAY_KEYS","dayKey","timings","displayMessage","WARNING_MSG_TYPE","doctor","doctorId","handleSubmit","e","preventDefault","form","validateFieldsAndScroll","err","values","reqData","first_start_time","moment","format","first_end_time","second_start_time","second_end_time","history","goBack","SUCCESS_MSG_TYPE","changeVistingHourSameWeek","target","checked","changeOpenPracticeDays","prevState","changePracticeTwoSessions","match","params","docId","formItemLayout","formLayout","labelCol","wrapperCol","getFieldDecorator","onSubmit","Item","valuePropName","initialValue","rules","message","REQUIRED_FIELD_MESSAGE","onChange","margin","is_two_sessions","required","map","replace","c","toUpperCase","htmlType","create","Column","TabPane","ColumnGroup","confirm","momentTime","timeStr","getAllPermissions","ALL_PERMISSIONS","allPermissions","practice_permissions","allGlobalPermissions","global_permissions","handleClick","current","loadDoctorsTiming","doctorList","practice_doctors","timingObject","dataObj","doctorsTiming","join","changeTab","defaultActiveTab","push","toggleEnableStaffPractice","staff","ENABLE_STAFF_IN_PRACTICE","is_active","admin_StaffData","toggleAllPermissions","permissionsArray","permission","permObject","codename","currentUser","editPermissions","successFn","bulkEditLoading","errorFn","onOk","UPDATE_BULK_PERMISSIONS","permissions","practice_staff","roles","permissionEditModal","location","hash","setPermission","staffRoles","sendPractice","SET_USER_PERMISSION","patchAPI","SET_SPECIFIC_USER_PERMISSION","undefined","user","USER_PRACTICE_PERMISSIONS","putAPI","SINGLE_PRACTICE_STAFF_API","STAFF_ROLES","PRACTICESTAFF","usersdata","role","DOCTORS_ROLE","all","loggedInUserPractices","Object","keys","doctorColumns","is_superuser","color","defaultChecked","last_login","fromNow","disabled","in_practice","deleteStaff","staffColumns","notification_doctor_columns","confirmation_sms","schedule_sms","confirmation_email","online_appointment_sms","notification_staff_columns","path","route","defaultActiveKey","tab","marginRight","CustomizedTable","visitObj","visitTime","spinning","reduce","a","b","display","AddEditDoctor","redirect","editStaff","changeRedirect","loadEditPracticeStaff","doctorid","redirectVar","editformProp","fields","placeholder","first_name","INPUT_FIELD","mobile","EMAIL_FIELD","registration_number","calendar_colour","COLOR_PICKER","SINGLE_CHECKBOX_FIELD","formProp","action","ALL_PRACTICE_STAFF","method","defaultValues","TestFormLayout","DynamicFieldsForm","exact","AddEditStaff","staffid","SELECT_FIELD","options","ROLES","AddPracticeDetails","countries","SMS_LANGUAGE_CONFIG_PARAM","EXTRA_DATA","country","loadConfigParameters","specialisationsOptions","SINGLE_IMAGE_UPLOAD_FIELD","allowWebcam","activePracticeData","language","WishSMS","loadWishSMS","COMMUNICATONS_API","wishsmsData","birthday_wish_sms","extra","follow","birthday_wish_text","minRows","SMS_FIELD","APPOINTMENT_CONFIRMATION_SMS_TAG_OPTIONS","anniversary_wish_sms","anniversary_wish_text","online_appointment_text","AppointmentSMS","handleChangeLanguage","contact_number","sms_clinic_name","appointment_confirmation_sms","appointment_confirmation_text","appointment_cancellation_sms","appointment_cancellation_text","appointment_reminder_sms","appointment_reminder_text","send_on_day_of_appointment","send_on_day_of_appointment_time","isValid","TIME_PICKER","follow_up_reminder_sms","follow_up_reminder_sms_text","send_follow_up_reminder_time","payment_sms","payment_sms_text","promo_code_text","LABEL_FIELD","PROMO_CODE_SMS_TAG_OPTIONS","lab_order_confirmation_sms","lab_order_confirmation_text","lab_order_due_on_sms","lab_order_result_sms","lab_order_reminder_sms","defaultValue","sms_language","option","Option","Emails","EMAIL_COMMUNICATONS_API","email_clinic_name","appointment_confirmation_email","appointment_confirmation_email_text","MAIL_TEMPLATE_FIELD","DIVIDER_FIELD","appointment_cancellation_email","appointment_cancellation_email_text","appointment_reminder_email","send_before_day_of_appointment","followup_reminder_email","appointment_reminder_email_text","birthday_wish_email","birthday_wish_email_text","lab_order_confirmation_email","lab_order_confirmation_email_text","lab_order_due_date_email","lab_order_due_date_email_text","lab_order_result_email","alab_order_result_email_text","anniversary_wish_email","anniversary_wish_email_text","CommunicationSettings","AddorEditProcedure","changeNetPrice","getFieldsValue","setFields","setTimeout","cost_with_tax","totalTaxAmount","taxes","taxid","taxObj","tax_value","retailPrice","retail_price","toFixed","validateFields","cost","editingProcedureData","PROCEDURE_CATEGORY","procedure_category","productMargin","loadTaxes","loadProcedures","loadProductMargin","search","pairValueArray","substr","split","urlInitialValue","setFieldsValue","keyValue","isNaN","toString","indexOf","parseInt","parseFloat","PRODUCT_MARGIN","TAXES","className","Group","tax","under","default_notes","RecentProcedure","changeSearchValue","searchString","page","results","next","url","editProcedure","deleteObject","activePracticePermissions","SettingsProcedureCatalog","allowAllPermissions","PermissionDenied","InfiniteFeedLoaderButton","hidden","loaderFunction","PaymentModes","modes","PAYMENT_MODES","editingId","editingmode","mode","editingType","payment_type","editingFee","fee","editPayment","PAYMENT_TYPES","NUMBER_FIELD","min","editfields","editFormDefaultValues","TaxCatalog","editingName","editingValue","max","CancelledInvoice","practiceDetail","PRACTICE","hide_cancelled_invoice","hide_cancelled_return","hide_cancelled_payment","BillingSettings","TableData","editFunction","VitalSigns","vitalSign","loadVitalSign","EMR_VITAL_SIGNS","temperature_unit","DEFAULT_TEMPERATURE_IN","Temp_in","temperature_method","DEFAULT_TEMPERATURE_METHOD","TempMethod","blood_pressure_method","DEFAULT_BP_METHOD","BPMETHOD","EMRSettings","EMR_COMPLAINTS","EMR_OBSERVATIONS","EMR_DIAGNOSES","EMR_INVESTIGATIONS","EMR_TREATMENTNOTES","EMR_MEDICATION","EMR_FILETAGS","EditPracticeDetail","practiceId","City","pincode","invoice_prefix","payment_prefix","return_prefix","AddorEditPrescriptionForm","setFormParams","maintain_inventory","item_type","DRUG","editPrescreption","INVENTORY_ITEM_API","drugTypeList","drugUnitList","editCatalog","loadDrugType","loadDrugUnit","DRUG_TYPE_API","DRUG_UNIT_API","drugType","drug_type_extra","drug_type","strength","drugUnit","unit_type_extra","stength_unit","instructions","Prescriptions","catalog","loadMorePrescriptions","loadInitialData","ExpensesTypes","showDeletedExpenses","showDeleted","deletedLoading","expenses","deletedExpenses","deleted","EXPENSE_TYPE","editTax","MedicalHistory","showDeletedMedicalHistory","deletedHistory","MEDICAL_HISTORY","dayKeys","PracticeTimings","CALENDER_SETTINGS","today_first_day","calendar_slot","allowClear","AppointmentCategories","appointmentCategories","loadAppointmentCategories","APPOINTMENT_CATEGORIES","obj","intToRGB","hashCode","editCategory","CalendarSettings","Sider","SettingSider","trigger","collapsible","overflow","minHeight","background","defaultSelectedKeys","ItemGroup","SettingsPracticeDetail","SettingsCommunincations","SettingsCalendar","SettingsPracticeStaff","ZoomUser","SettingsAgents","SettingsAgentRoles","SettingsBilling","SettingsLoyalty","SettingsMLMSettings","SettingsEMR","SettingsPrescriptions","SettingsLabs","SettingsPrintouts","SettingsMedicalHistory","SettingsExpenseTypes","SettingsRoomTypes","SettingsBedPackages","SettingsMedicinePackages","SettingsDiseaseList","_typeof","Symbol","iterator","constructor","prototype","_extends","assign","i","arguments","source","hasOwnProperty","call","apply","_defineProperties","descriptor","enumerable","configurable","writable","defineProperty","_possibleConstructorReturn","self","ReferenceError","_assertThisInitialized","_getPrototypeOf","o","setPrototypeOf","getPrototypeOf","__proto__","_setPrototypeOf","p","_React$Component","CollapsePanel","_this","instance","Constructor","TypeError","_classCallCheck","renderCollapsePanel","_ref","getPrefixCls","_this$props","customizePrefixCls","prefixCls","_this$props$className","_this$props$showArrow","showArrow","collapsePanelClassName","concat","Panel","protoProps","staticProps","subClass","superClass","_inherits","Collapse","renderExpandIcon","panelProps","expandIcon","rotate","isActive","renderCollapse","_classNames","bordered","expandIconPosition","collapseClassName","defaultProps","openAnimation","appear","MLMGenerate","comissions","margin_name","level_count","level","commision_percent","editId","changePassLoading","GENERATE_MLM_COMMISSON","details","add","level_name","nextKeys","getFieldValue","setLevelCount","editRecord","editRecordMargins","loadRoles","roleId","loadMlmData","AGENT_ROLES","xs","sm","validateTrigger","MlmBase","mlmItems","SINGLE_PRODUCT_MARGIN","rolesdata","datasource","roledata","accordion","marginType","index","header","editObject","marginTop","rowKey","TextArea","radioTabList","CUSTOMIZE_PAPER_TYPE","radioTab","Button","PrintSettings","changeFormType","selectedFormType","formData","file","response","image_path","print_setting","logo_path","save_for_all","sub_type","SAVE_ALL_PRINT_SETTINGS","PRACTICE_PRINT_SETTING_API","handleFormEditSettings","editedPrintSettings","loadPDF","report","window","open","BACKEND_BASE_URL","onchangeHandle","is_patient_not","resetFields","md","lg","pageSizeOptionList","PAPER_SIZE","pageSize","headerInclude","HEADER_INCLUDE","header_include","logoType","LOGO_TYPE","logo_type","logoAlignment","LOGO_ALIGMENT","logo_alignment","logoInclude","LOGO_INCLUDE","logo_include","singleUploadprops","makeURL","FILE_UPLOAD_API","headers","authorization","info","status","fileList","success","error","pageOrientation","PATIENT_DETAILS_LIST","patient_details","PAGE_ORIENTATION","printer_type","PRINTER_TYPE","printerType","PreviewParamsURL","editedObject","encodeURIComponent","textAlign","buttonStyle","page_size","page_orientation","page_print_type","page_margin_top","page_margin_left","page_margin_bottom","page_margin_right","header_text","header_left_text","header_right_text","EXCLUDE_PATIENT_DOB","footer_margin_top","footer_text","rows","footer_left_text","footer_right_text","PRINT_PREVIEW_RENDER","backgroundColor","padding","height","boxShadow","Printout","setRandomKey","randomKey","Math","random","activeKey","EMR_TYPE","EMR_SUB_TYPE","BILLING_TYPE","BILLING_SUB_TYPE","IntegrationHome","integrateData","SAVE_CREDENTIALS","taskIntegrateFormFields","login","PASSWORD_FIELD","password","taskIntegrateFormProp","Form","MailPDFSettings","AddorEditBedPackages","loadRequiredData","ROOM_TYPE","roomTypes","editPackage","BedPackageForm","no_of_days","normal_price","normal_tax_value","tatkal_price","tatkal_tax_value","image","room","MULTI_SELECT_FIELD","formProps","BED_PACKAGES","BedPackages","packages","alt","maxWidth","maxHeight","RoomTypes","rooms","deletedRooms","editObj","normal_seats","tatkal_seats","AddOffer","OFFERS","beforeSubmit","Offers","offers","AddMembership","MEMBERSHIP_API","formDefaultValues","AddForm","Membership","membership","benefit","AddOrEdiPromoCode","loadPatient","SEARCH_PATIENT","patientList","PROMO_CODE","editPromoCode","CURRENCY_TYPE","showSearch","onSearch","filterOption","custom_id","PromoCode","promoCode","nextPage","SINGLE_PROMO_CODE","expiry_date","LoyaltySettings","AddorEditLab","editFields","editTest","instruction","TEXT_FIELD","LABTEST_API","LabTest","tests","editLabs","deleteTest","product_margin","onChangeHandler","panelCost","onChangeSelect","selectedTest","testObject","removeLabPanel","LABPANEL_API","loadTests","JSON","stringify","testKeys","TotalCost","testOption","test","paddingLeft","LabPanel","labPanel","loadLabPanel","editPanels","deleteLabPanel","subColumns","AddorEditLabPanel","expandedRowRender","LabTracking","AddorEditMedicinePackages","MedicinePackageForm","final_price","MEDICINE_PACKAGES","MedicinePackages","DiseaseList","diseases","DISEASE_LIST","AgentRoles","FormItem","AddOrEditAgent","saving","referal","is_agent","aadhar_upload","is_approved","editAgentData","userDetails","PATIENT_PROFILE","PATIENTS_LIST","handlePatientSelect","event","userListData","agentRoles","getPatient","searchPatient","loadAgentRoles","formPatients","avatar","charAt","description","PatientPhoneNumber","hideMobile","defaultActiveFirstOption","onSelect","referer","showWallet","showAgentData","payAgentModal","payAgentData","approveAgent","approvalLoading","agentList","agent","approved","total","count","apiParams","export","referer_data","patient","role_data","hideExport","PayAgentForm","layout","minWidth","centered","PatientWalletLedger","currentPatient","closeIcon","WALLET_LEDGER","confirmText","DATE_PICKER","AddOrEditZoomUser","MEETING_USER","editZoomData","username","API_Key","API_Secret","zoomUser","Content","SettingsDash","collapsed","PracticeStaff","SettingsEmailPDFSettings","component","Error404","_defineProperty","Switch","saveSwitch","node","rcSwitch","renderSwitch","classes","loadingIcon","insertExtraNode","ref","focus","blur","__ANT_SWITCH","propTypes","Text","loadPatientWallet","AGENT_WALLET","walletAmount","pendingAmount","ledger","start","selectedStartDate","startOf","end","selectedEndDate","endOf","agents","selectedAgents","loadSumData","ledgerDetails","WALLET_LEDGER_SUM","changeExpenseFilters","subtract","loadAgents","MY_AGENTS","is_cancelled","delete","marginBottom","prefix","non_refundable","precision","hideReport","credit","debit"],"mappings":"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","file":"static/js/15.9c2388a0.chunk.js","sourcesContent":["import React from \"react\";\nimport {Avatar, Button, Card, Col, Divider, Icon, Modal, Popconfirm, Row, Table} from \"antd\";\nimport {Link} from \"react-router-dom\";\nimport {ALL_PRACTICE, PRACTICE_DELETE} from \"../../../../constants/api\";\nimport {getAPI, interpolate, makeFileURL, postAPI} from \"../../../../utils/common\";\n\nconst {Meta} = Card;\n\nclass PracticeDetails extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            practiceList: [],\n            specialisations: null,\n            loading: true,\n            visible: false,\n            practice: {}\n\n        };\n        this.deletePractice = this.deletePractice.bind(this);\n    }\n\n    componentDidMount() {\n        // this.props.refreshClinicData();\n        this.admin_practiceData();\n    }\n\n    admin_practiceData() {\n        var that = this;\n        let successFn = function (data) {\n            let specialisations = {};\n            data[0].specialisations.forEach(function (speciality) {\n                specialisations[speciality.id] = speciality\n            });\n            console.log(specialisations);\n\n            that.setState({\n                practiceList: data,\n                specialisations: specialisations,\n                loading: false\n            })\n        };\n        let errorFn = function () {\n            that.setState({\n                loading: false\n            })\n        };\n        getAPI(ALL_PRACTICE, successFn, errorFn);\n\n    }\n\n    // clinicData(){\n    //   let  practice=loggedInUserPractices();\n    //   console.log(practice);\n    //   var practiceKeys = Object.keys(practice);\n    //   let practiceArray = [];\n    //   practiceKeys.forEach(function(key){\n    //     let successFn = function (data) {\n    //       practiceArray.push(data)\n    //       console.log(practiceArray);\n    //     }\n    //     let errorFn = function () {\n    //     };\n    //     getAPI(interpolate(PRACTICE,[key]), successFn, errorFn);\n    //\n    //   });\n    //   this.setState({\n    //     practiceList:practiceArray\n    //   })\n    //\n    // }\n\n    deletePractice(value) {\n        let that = this;\n        let successFn = function (data) {\n            console.log(\"data\");\n            that.admin_practiceData();\n            if (that.props.refreshClinicData)\n                that.props.refreshClinicData();\n        };\n        let errorFn = function () {\n        };\n        postAPI(interpolate(PRACTICE_DELETE, [value]), {}, successFn, errorFn);\n\n    }\n\n    showModal = (item) => {\n        this.setState(function () {\n            return {visible: true, practice: item}\n        });\n    };\n    handleCancel = () => {\n        this.setState({visible: false});\n    };\n\n    render() {\n        let that = this;\n        const columns = [{\n            title: 'Name',\n            dataIndex: 'name',\n            key: 'name',\n            render: (text, record) => <a href=\"#\" onClick={() => this.showModal(record)}>{text}</a>,\n        }, {\n            title: 'Tagline',\n            dataIndex: 'tagline',\n            key: 'tagline',\n        }, {\n            title: 'Address',\n            dataIndex: 'address',\n            key: 'address',\n        }, {\n            title: 'Specialisation',\n            key: 'specialisation',\n            dataIndex: 'specialisation',\n        },{\n            title:'SMS Language',\n            dataIndex:'language',\n            key:'language',\n            // render:(item,record)=>\n        }, {\n            title: 'Action',\n            key: 'action',\n            render: (text, record) => (\n                <span>\n                <Link to={'/settings/clinics/' + record.id + '/edit'}>Edit</Link>\n                <Divider type=\"vertical\"/>\n                    {that.props.practiceList.length > 1 ? <Popconfirm title=\"Are you sure delete this Practice?\"\n                                                                      onConfirm={() => this.deletePractice(record.id)}\n                                                                      okText=\"Yes\" cancelText=\"No\">\n                        <a>Delete</a></Popconfirm> : null}\n              </span>\n            ),\n        }];\n\n        return <Row>\n            <h2>Practice Details\n                <Link to=\"/settings/clinics/add\">\n                    <Button type=\"primary\" style={{float: 'right'}}>\n                        <Icon type=\"plus\"/>&nbsp;Add\n                    </Button>\n                </Link>\n            </h2>\n            <Card loading={this.state.loading}>\n                <Table pagination={false} columns={columns} dataSource={this.state.practiceList}/>\n            </Card>\n            <Modal\n                visible={this.state.visible}\n                closable={false}\n                width={600}\n                onCancel={this.handleCancel}\n                footer={null}>\n                <Button icon=\"close\" type=\"danger\" shape=\"circle\" style={{position: 'absolute', top: '-50px', right: 0}}\n                        onClick={this.handleCancel}/>\n                {/* <Card > */}\n                <Row style={{paddingBottom: \"25px\"}}>\n                    <Col span={12} offset={10}>\n                        {this.state.practice.logo ?\n                            <Avatar shape=\"square\" size=\"large\" src={makeFileURL(this.state.practice.logo)}/>\n\n                            : null}\n\n                    </Col>\n                </Row>\n\n\n                <ProfileTables label={\"Practice Name : \"} value={this.state.practice.name}/>\n                <ProfileTables label={\"Tagline : \"} value={this.state.practice.tagline}/>\n                <ProfileTables label={\"Email Id: \"} value={this.state.practice.email}/>\n                <ProfileTables label={\"Contact Number : \"} value={this.state.practice.contact}/>\n                <ProfileTables label={\"Website : \"} value={this.state.practice.website}/>\n                <ProfileTables label={\"GSTIN : \"} value={this.state.practice.gstin}/>\n                <ProfileTables label={\"Specialisation\"} value={this.state.practice.specialisation}/>\n                {ProfileTables({\n                    label: 'Address',\n                    value: this.state.practice.address ? this.state.practice.address : '' + ' ' + this.state.practice.locality ? this.state.practice.locality : '' + ' ' + this.state.practice.city ? this.state.practice.city : ''\n                    + ' ' + this.state.practice.state ? this.state.practice.state : '' + ' ' + this.state.practice.country ? this.state.practice.country : '' + ' ' + this.state.practice.pincode ? this.state.practice.pincode : ''\n                })}\n\n\n                {/* </Card> */}\n\n\n            </Modal>\n        </Row>\n    }\n}\n\nexport default PracticeDetails;\n\nfunction ProfileTables(props) {\n    return <Row gutter={16}>\n        <Col span={8}>\n            <p><b>{props.label}</b></p>\n        </Col>\n        <Col span={16}>{props.value}</Col>\n    </Row>\n\n}\n","import React from \"react\";\nimport {Form, Card, Divider, Checkbox, Row, Col, TimePicker, Button} from \"antd\";\nimport {Redirect} from \"react-router-dom\";\nimport moment from \"moment/moment\";\nimport {REQUIRED_FIELD_MESSAGE} from \"../../../../constants/messages\";\nimport {displayMessage, getAPI, interpolate, postAPI} from \"../../../../utils/common\";\nimport {CALENDER_SETTINGS, DOCTOR_VISIT_TIMING_API} from \"../../../../constants/api\";\nimport {SUCCESS_MSG_TYPE, WARNING_MSG_TYPE} from \"../../../../constants/dataKeys\";\nimport {DAY_KEYS} from \"../../../../constants/hardData\";\n\nclass DoctorTiming extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            doctorId: this.props.match.params.docId,\n            timings: null,\n            openPracticeDays: {},\n            visting_hour_same_week: true,\n            twoSessions: {},\n            loading:true,\n        }\n\n    }\n\n    componentDidMount() {\n        if (this.state.doctorId) {\n            this.loadData();\n        }\n    }\n\n    loadData = () => {\n        let that = this;\n        let successFn = function (data) {\n            let visting_hour_same_week = true;\n            let openPracticeDays = {};\n            let twoSessions = {};\n            if (data.length && data[0]) {\n                let dataObject = data[0]\n                DAY_KEYS.forEach(function (dayKey) {\n                    openPracticeDays[dayKey] = dataObject[dayKey];\n                    twoSessions[`is_two_sessions_${dayKey}`] = dataObject[`is_two_sessions_${dayKey}`];\n                });\n                visting_hour_same_week = dataObject[\"visting_hour_same_week\"];\n                twoSessions[`is_two_sessions`] = dataObject[`is_two_sessions`];\n            }\n            if (data.length) {\n                that.setState({\n                    timings: data[0],\n                    visting_hour_same_week: visting_hour_same_week,\n                    openPracticeDays: openPracticeDays,\n                    twoSessions: twoSessions,\n                    loading:false,\n                })\n            } else {\n                that.setState({\n                    timings: {},\n                    visting_hour_same_week: visting_hour_same_week,\n                    openPracticeDays: openPracticeDays,\n                    twoSessions: twoSessions,\n                    loading:false,\n                })\n                displayMessage(WARNING_MSG_TYPE, \"Doctors visit timing is empty\");\n            }\n        }\n        let errorFn = function () {\n\n        }\n        getAPI(interpolate(DOCTOR_VISIT_TIMING_API, [this.props.active_practiceId]), successFn, errorFn, {\n            doctor: this.state.doctorId\n        });\n    }\n    handleSubmit = (e) => {\n        let that = this;\n        e.preventDefault();\n        this.props.form.validateFieldsAndScroll((err, values) => {\n                if (!err) {\n                    console.log(values);\n                    let reqData = {...values};\n                    if (reqData.first_start_time) {\n                        reqData.first_start_time = moment(reqData.first_start_time).format('HH:mm');\n                    }\n                    if (reqData.first_end_time) {\n                        reqData.first_end_time = moment(reqData.first_end_time).format('HH:mm');\n                    }\n                    if (reqData.second_start_time) {\n                        reqData.second_start_time = moment(reqData.second_start_time).format('HH:mm');\n                    }\n                    if (reqData.second_end_time) {\n                        reqData.second_end_time = moment(reqData.second_end_time).format('HH:mm');\n                    }\n                    reqData.doctor = that.state.doctorId;\n                    DAY_KEYS.forEach(function (dayKey) {\n                        if (reqData[`first_start_time_${dayKey}`]) {\n                            reqData[`first_start_time_${dayKey}`] = moment(reqData[`first_start_time_${dayKey}`]).format('HH:mm');\n                        }\n                        if (reqData[`first_end_time_${dayKey}`]) {\n                            reqData[`first_end_time_${dayKey}`] = moment(reqData[`first_end_time_${dayKey}`]).format('HH:mm');\n                        }\n                        if (reqData[`second_start_time_${dayKey}`]) {\n                            reqData[`second_start_time_${dayKey}`] = moment(reqData[`second_start_time_${dayKey}`]).format('HH:mm');\n                        }\n                        if (reqData[`second_end_time_${dayKey}`]) {\n                            reqData[`second_end_time_${dayKey}`] = moment(reqData[`second_end_time_${dayKey}`]).format('HH:mm');\n                        }\n                    });\n                    if (that.state.timings) {\n                        reqData.id = that.state.timings.id\n                    }\n                    let successFn = function (data) {\n                        that.setState({\n                            loading:true,\n                        });\n                        that.props.history.goBack();\n                        if (that.props.loadData)\n                            that.props.loadData();\n                        displayMessage(SUCCESS_MSG_TYPE, \"Doctor Timings Saved successfully!!\");\n                    };\n                    let errorFn = function () {\n\n                    };\n                    postAPI(interpolate(DOCTOR_VISIT_TIMING_API, [this.props.active_practiceId]), reqData, successFn, errorFn);\n                }\n            }\n        )\n    }\n    changeVistingHourSameWeek = (e) => {\n        console.log(e.target)\n        this.setState({\n            [e.target.id]: e.target.checked\n        })\n    }\n    changeOpenPracticeDays = (type, value) => {\n        this.setState(function (prevState) {\n            return {openPracticeDays: {...prevState.openPracticeDays, [type]: value}}\n        })\n    }\n    changePracticeTwoSessions = (type, value) => {\n        this.setState(function (prevState) {\n            return {twoSessions: {...prevState.twoSessions, [type]: value}}\n        })\n    }\n\n    render() {\n        if (!this.state.doctorId) {\n            return <Redirect to={\"/settings/clinics-staff\"}/>\n        } else if (!this.state.timings) {\n            return <Card loading={true}/>\n        } else {\n\n            const that = this;\n            const formItemLayout = (this.props.formLayout ? this.props.formLayout : {\n                labelCol: {span: 12},\n                wrapperCol: {span: 12},\n            });\n            const {getFieldDecorator} = this.props.form;\n            return <div>\n                <Card loading={this.state.loading}>\n                    <Form onSubmit={this.handleSubmit}>\n                        <Form.Item key={\"visting_hour_same_week\"}  {...formItemLayout}>\n                            {getFieldDecorator(\"visting_hour_same_week\", {\n                                valuePropName: 'checked',\n                                initialValue: that.state.timings ? that.state.visting_hour_same_week : false\n                            }, {\n                                rules: [{message: REQUIRED_FIELD_MESSAGE}],\n                            })(\n                                <Checkbox onChange={this.changeVistingHourSameWeek}>\n                                    {\"Visiting hours are  same for all working days in a week\"}\n                                </Checkbox>\n                            )}\n                        </Form.Item>\n                        <Divider style={{margin: 4}}/>\n                        {this.state.visting_hour_same_week ?\n                            <div>\n                                <Row>\n                                    <Col span={4}>\n\n                                    </Col>\n                                    <Col span={18}>\n                                        <Form.Item key={\"is_two_sessions\"}  {...formItemLayout}>\n                                            {getFieldDecorator(\"is_two_sessions\", {\n                                                valuePropName: 'checked',\n                                                initialValue: that.state.timings ? that.state.timings.is_two_sessions || that.state.twoSessions[\"is_two_sessions\"] : false\n                                            }, {\n                                                rules: [{message: REQUIRED_FIELD_MESSAGE}],\n                                            })(\n                                                <Checkbox\n                                                    onChange={(e) => this.changePracticeTwoSessions(\"is_two_sessions\", e.target.checked)}>\n                                                    {\"Practice operates in two sessions.\"}\n                                                </Checkbox>\n                                            )}\n                                        </Form.Item>\n                                        <Row gutter={16}>\n                                            <Col span={12}>\n                                                <Form.Item key={\"first_start_time\"}\n                                                           label={\"Practice Starts At\"} {...formItemLayout}>\n                                                    {getFieldDecorator(\"first_start_time\", {\n                                                        initialValue: that.state.timings && that.state.timings.first_start_time ? moment(that.state.timings.first_start_time, \"HH:mm\") : null,\n                                                        rules: [{required: true, message: REQUIRED_FIELD_MESSAGE}],\n                                                    })(\n                                                        <TimePicker format={\"HH:mm\"}/>\n                                                    )}\n                                                </Form.Item>\n                                            </Col>\n                                            {that.state.twoSessions[\"is_two_sessions\"] ? <div>\n                                                <Col span={12}>\n                                                    <Form.Item key={\"first_end_time\"}\n                                                               label={\"Lunch At\"} {...formItemLayout}>\n                                                        {getFieldDecorator(\"first_end_time\", {\n                                                            initialValue: that.state.timings && that.state.timings.first_end_time ? moment(that.state.timings.first_end_time, \"HH:mm\") : null,\n                                                            rules: [{required: true, message: REQUIRED_FIELD_MESSAGE}],\n                                                        })(\n                                                            <TimePicker format={\"HH:mm\"}/>\n                                                        )}\n                                                    </Form.Item>\n                                                </Col>\n                                                <Col span={12}>\n                                                    <Form.Item key={\"second_start_time\"}\n                                                               label={\"Resume At\"} {...formItemLayout}>\n                                                        {getFieldDecorator(\"second_start_time\", {\n                                                            initialValue: that.state.timings && that.state.timings.second_start_time ? moment(that.state.timings.second_start_time, \"HH:mm\") : null,\n                                                            rules: [{required: true, message: REQUIRED_FIELD_MESSAGE}],\n                                                        })(\n                                                            <TimePicker format={\"HH:mm\"}/>\n                                                        )}\n                                                    </Form.Item>\n                                                </Col>\n                                            </div> : null}\n\n                                            <Col span={12}>\n                                                <Form.Item key={\"second_end_time\"}\n                                                           label={\"Practice Ends At\"} {...formItemLayout}>\n                                                    {getFieldDecorator(\"second_end_time\", {\n                                                        initialValue: that.state.timings && that.state.timings.second_end_time ? moment(that.state.timings.second_end_time, \"HH:mm\") : null,\n                                                        rules: [{required: true, message: REQUIRED_FIELD_MESSAGE}],\n                                                    })(\n                                                        <TimePicker format={\"HH:mm\"}/>\n                                                    )}\n                                                </Form.Item>\n                                            </Col>\n                                        </Row>\n                                    </Col>\n                                </Row>\n                                <Divider style={{margin: 4}}/>\n                            </div> : DAY_KEYS.map(dayKey => <div key={dayKey}>\n                                <Row>\n                                    <Col span={4}>\n                                        <h4>{dayKey.replace(/^\\w/, c => c.toUpperCase())}</h4>\n                                    </Col>\n\n                                    <Col span={18}>\n                                        <Form.Item key={`${dayKey}`}  {...formItemLayout}>\n                                            {getFieldDecorator(`${dayKey}`, {\n                                                valuePropName: 'checked',\n                                                initialValue: that.state.timings ? that.state.timings[`${dayKey}`] || that.state.openPracticeDays[dayKey] : false\n                                            }, {\n                                                rules: [{message: REQUIRED_FIELD_MESSAGE}],\n                                            })(\n                                                <Checkbox\n                                                    onChange={(e) => that.changeOpenPracticeDays(dayKey, e.target.checked)}>\n                                                    {`Practice is open on ${dayKey.replace(/^\\w/, c => c.toUpperCase())}`}\n                                                </Checkbox>\n                                            )}\n                                        </Form.Item>\n                                        {that.state.openPracticeDays[dayKey] ? <div>\n                                                <Form.Item key={`is_two_sessions_${dayKey}`}  {...formItemLayout}>\n                                                    {getFieldDecorator(`is_two_sessions_${dayKey}`, {\n                                                        valuePropName: 'checked',\n                                                        initialValue: that.state.timings ? that.state.timings[`is_two_sessions_${dayKey}`] || that.state.twoSessions[`is_two_sessions_${dayKey}`] : false\n                                                    }, {\n                                                        rules: [{message: REQUIRED_FIELD_MESSAGE}],\n                                                    })(\n                                                        <Checkbox\n                                                            onChange={(e) => this.changePracticeTwoSessions(`is_two_sessions_${dayKey}`, e.target.checked)}\n                                                        >\n                                                            {\"Practice operates in two sessions.\"}\n                                                        </Checkbox>\n                                                    )}\n                                                </Form.Item>\n                                                <Row gutter={16}>\n                                                    <Col span={12}>\n                                                        <Form.Item key={`first_start_time_${dayKey}`}\n                                                                   label={\"Practice Starts At\"} {...formItemLayout}>\n                                                            {getFieldDecorator(`first_start_time_${dayKey}`, {\n                                                                initialValue: that.state.timings && that.state.timings[`first_start_time_${dayKey}`] ? moment(that.state.timings[`first_start_time_${dayKey}`], \"HH:mm\") : null,\n                                                                rules: [{required: true, message: REQUIRED_FIELD_MESSAGE}],\n                                                            })(\n                                                                <TimePicker format={\"HH:mm\"}/>\n                                                            )}\n                                                        </Form.Item>\n                                                    </Col>\n                                                    {that.state.twoSessions[`is_two_sessions_${dayKey}`] ? <div>\n                                                        <Col span={12}>\n                                                            <Form.Item key={`first_end_time_${dayKey}`}\n                                                                       label={\"Lunch At\"} {...formItemLayout}>\n                                                                {getFieldDecorator(`first_end_time_${dayKey}`, {\n                                                                    initialValue: that.state.timings && that.state.timings[`first_end_time_${dayKey}`] ? moment(that.state.timings[`first_end_time_${dayKey}`], \"HH:mm\") : null,\n                                                                    rules: [{\n                                                                        required: true,\n                                                                        message: REQUIRED_FIELD_MESSAGE\n                                                                    }],\n                                                                })(\n                                                                    <TimePicker format={\"HH:mm\"}/>\n                                                                )}\n                                                            </Form.Item>\n                                                        </Col>\n                                                        <Col span={12}>\n                                                            <Form.Item key={`second_start_time_${dayKey}`}\n                                                                       label={\"Resume At\"} {...formItemLayout}>\n                                                                {getFieldDecorator(`second_start_time_${dayKey}`, {\n                                                                    initialValue: that.state.timings && that.state.timings[`second_start_time_${dayKey}`] ? moment(that.state.timings[`second_start_time_${dayKey}`], \"HH:mm\") : null,\n                                                                    rules: [{\n                                                                        required: true,\n                                                                        message: REQUIRED_FIELD_MESSAGE\n                                                                    }],\n                                                                })(\n                                                                    <TimePicker format={\"HH:mm\"}/>\n                                                                )}\n                                                            </Form.Item>\n                                                        </Col>\n                                                    </div> : null}\n                                                    <Col span={12}>\n                                                        <Form.Item key={`second_end_time_${dayKey}`}\n                                                                   label={\"Practice Ends At\"} {...formItemLayout}>\n                                                            {getFieldDecorator(`second_end_time_${dayKey}`, {\n                                                                initialValue: that.state.timings && that.state.timings[`second_end_time_${dayKey}`] ? moment(that.state.timings[`second_end_time_${dayKey}`], \"HH:mm\") : null,\n                                                                rules: [{required: true, message: REQUIRED_FIELD_MESSAGE}],\n                                                            })(\n                                                                <TimePicker format={\"HH:mm\"}/>\n                                                            )}\n                                                        </Form.Item>\n                                                    </Col>\n                                                </Row>\n                                            </div>\n                                            : null}\n                                    </Col>\n                                </Row>\n                                <Divider style={{margin: 4}}/>\n                            </div>)\n                        }\n                        <Form.Item {...formItemLayout}>\n                            <Button loading={that.state.loading} type=\"primary\" htmlType=\"submit\" style={{margin: 5}}>\n                                Submit\n                            </Button>\n                            {that.props.history ?\n                                <Button style={{margin: 5}} onClick={() => that.props.history.goBack()}>\n                                    Cancel\n                                </Button> : null}\n                        </Form.Item>\n                    </Form>\n                </Card>\n            </div>\n        }\n    }\n}\n\nexport default Form.create()(DoctorTiming);\n","import React from \"react\";\nimport DynamicFieldsForm from \"../../../common/DynamicFieldsForm\";\nimport {\n    Button,\n    Checkbox,\n    Card,\n    Form,\n    Icon,\n    Tabs,\n    Divider,\n    Tag,\n    Row,\n    Table,\n    Modal,\n    Popconfirm,\n    Switch as AntSwitch, Spin\n} from \"antd\";\nimport {\n    CHECKBOX_FIELD,\n    DOCTORS_ROLE,\n    INPUT_FIELD,\n    RADIO_FIELD,\n    SELECT_FIELD,\n    SUCCESS_MSG_TYPE\n} from \"../../../../constants/dataKeys\";\nimport {\n    PRACTICESTAFF,\n    STAFF_ROLES,\n    ALL_PRACTICE_STAFF,\n    ALL_PRACTICE_DOCTORS,\n    SINGLE_PRACTICE_STAFF_API,\n    USER_PRACTICE_PERMISSIONS,\n    SET_USER_PERMISSION,\n    SET_SPECIFIC_USER_PERMISSION,\n    DOCTOR_VISIT_TIMING_API, ENABLE_STAFF_IN_PRACTICE, ALL_PERMISSIONS, UPDATE_BULK_PERMISSIONS\n} from \"../../../../constants/api\"\nimport {Link, Route, Switch} from \"react-router-dom\";\nimport {deleteAPI, displayMessage, getAPI, interpolate, patchAPI, postAPI, putAPI} from \"../../../../utils/common\";\nimport {getAllPermissions, loggedInUserPractices} from \"../../../../utils/auth\";\nimport moment from \"moment\";\nimport DoctorTiming from \"./DoctorTiming\";\nimport {DAY_KEYS} from \"../../../../constants/hardData\";\nimport CustomizedTable from \"../../../common/CustomizedTable\";\n\nconst {Column, ColumnGroup} = Table;\nconst TabPane = Tabs.TabPane;\nconst {confirm} = Modal;\n\nclass PracticeDetails extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            current: 'staff',\n            practice_staff: [],\n            practice_doctors: [],\n            roles: null,\n            permissionEditModal: false,\n            editPermissions: {},\n            allPermissions: [],\n            allGlobalPermissions: [],\n            loading: true,\n            defaultActiveTab: this.props.location.hash,\n            doctorsTiming: {},\n            bulkEditLoading: false\n        }\n        this.setPermission = this.setPermission.bind(this);\n        this.staffRoles()\n        this.loadData = this.loadData.bind(this);\n    }\n\n    componentDidMount() {\n        this.getAllPermissions();\n        this.loadData();\n    }\n\n    setPermission(codename, name, e, sendPractice) {\n        let that = this;\n        let value = e.target.checked;\n        this.setState(function (prevState) {\n            let permission = {...prevState.editPermissions[codename]}\n            permission.loading = true;\n            return {editPermissions: {...prevState.editPermissions, [codename]: permission}}\n        });\n        if (value) {\n            let reqData = {\n                \"name\": name,\n                \"codename\": codename,\n                \"is_active\": true,\n                \"practice\": sendPractice ? that.props.active_practiceId : null,\n                \"staff\": that.state.currentUser\n            }\n            let successFn = function (data) {\n                that.setState(function (prevState) {\n                    return {editPermissions: {...prevState.editPermissions, [codename]: data}}\n                })\n            }\n            let errorFn = function () {\n            }\n            postAPI(SET_USER_PERMISSION, reqData, successFn, errorFn);\n        } else {\n            if (that.state.editPermissions[codename].id) {\n                let reqData = {\n                    // \"name\": null,\n                    // \"codename\": codename,\n                    \"is_active\": false,\n                    // \"practice\": that.props.active_practiceId,\n                    // \"user\": that.state.currentUser\n                }\n                let successFn = function (data) {\n                    that.setState(function (prevState) {\n                        return {editPermissions: {...prevState.editPermissions, [data.codename]: undefined}}\n                    })\n                }\n                let errorFn = function () {\n\n                }\n                patchAPI(interpolate(SET_SPECIFIC_USER_PERMISSION, [that.state.editPermissions[codename].id]), reqData, successFn, errorFn);\n            } else {\n\n            }\n        }\n    }\n\n    getAllPermissions = () => {\n        let that = this;\n        let successFn = function (data) {\n            that.setState({\n                allPermissions: data.practice_permissions,\n                allGlobalPermissions: data.global_permissions\n            })\n        }\n        let errorFn = function () {\n        }\n        getAPI(ALL_PERMISSIONS, successFn, errorFn);\n    }\n\n    editPermissions(user) {\n        let that = this;\n        if (!user) {\n            that.setState({\n                permissionEditModal: false,\n            });\n            return true\n        }\n\n        that.setState({\n            permissionEditModal: true,\n            editPermissions: [],\n            currentUser: user\n        });\n        let successFn = function (data) {\n            let permissions = {}\n            data.forEach(function (item) {\n                permissions[item.codename] = item\n            })\n            that.setState({\n                editPermissions: permissions\n            })\n        }\n        let errorFn = function () {\n        }\n        getAPI(interpolate(USER_PRACTICE_PERMISSIONS, [user, that.props.active_practiceId]), successFn, errorFn);\n    }\n\n    loadData() {\n        this.admin_StaffData();\n    }\n\n    deleteStaff(value) {\n        var that = this;\n        let reqData = {\n            is_active: false,\n        }\n        let successFn = function (data) {\n\n            that.loadData();\n        };\n        let errorFn = function () {\n        };\n        putAPI(interpolate(SINGLE_PRACTICE_STAFF_API, [value]), reqData, successFn, errorFn);\n    }\n\n    staffRoles() {\n        let that = this;\n        let successFn = function (data) {\n            that.setState({\n                roles: data,\n            })\n        }\n        let errorFn = function () {\n        }\n        getAPI(STAFF_ROLES, successFn, errorFn)\n    }\n\n    admin_StaffData() {\n        var that = this;\n        let successFn = function (data) {\n            let doctor = [];\n            let staff = [];\n            data.staff.forEach(function (usersdata) {\n                if (usersdata.role == DOCTORS_ROLE) {\n                    doctor.push({...usersdata.user,...usersdata});\n                } else {\n                    staff.push({...usersdata.user,...usersdata});\n                }\n            })\n            that.setState({\n                practice_doctors: doctor,\n                practice_staff: staff,\n                loading: false\n            }, function () {\n                that.loadDoctorsTiming();\n            })\n        };\n        let errorFn = function () {\n            that.setState({\n                loading: false\n            })\n        };\n        getAPI(interpolate(PRACTICESTAFF, [this.props.active_practiceId]), successFn, errorFn, {all: true});\n    }\n\n\n    clinicData() {\n        let practice = loggedInUserPractices();\n        var practiceKeys = Object.keys(practice);\n        var that = this;\n        let successFn = function (data) {\n            let doctor = [];\n            let staff = [];\n            data.staff.forEach(function (usersdata) {\n                if (usersdata.role == DOCTORS_ROLE) {\n                    doctor.push({...usersdata.user,...usersdata});\n                } else {\n                    staff.push({...usersdata.user,...usersdata});\n                }\n            })\n            that.setState({\n                practice_doctors: doctor,\n                practice_staff: staff,\n            }, function () {\n                that.loadDoctorsTiming();\n            })\n        }\n        let errorFn = function () {\n        };\n        getAPI(interpolate(PRACTICESTAFF, [this.props.active_practiceId]), successFn, errorFn);\n\n    }\n\n    handleClick = (e) => {\n        this.setState({\n            current: e.key,\n        });\n    }\n\n    loadDoctorsTiming = () => {\n        let that = this;\n        let doctorList = that.state.practice_doctors.map(doctor => doctor.id);\n        let successFn = function (data) {\n            that.setState(function (prevState) {\n                let timingObject = {}\n                data.forEach(function (dataObj) {\n                    timingObject[dataObj.doctor.id] = dataObj\n                })\n                return {doctorsTiming: timingObject}\n            })\n        }\n        let errorFn = function () {\n\n        }\n        getAPI(interpolate(DOCTOR_VISIT_TIMING_API, [this.props.active_practiceId]), successFn, errorFn, {\n            doctor: doctorList.join(',')\n        });\n    }\n    changeTab = (key) => {\n        this.setState({\n            defaultActiveTab: key\n        });\n        this.props.history.push('/settings/clinics-staff' + key);\n    }\n    toggleEnableStaffPractice = (staff, e) => {\n        let that = this;\n        let successFn = function (data) {\n            if (e)\n                displayMessage(SUCCESS_MSG_TYPE, \"Staff enabled for this practice successfully!!\")\n            else\n                displayMessage(SUCCESS_MSG_TYPE, \"Staff disabled for this practice successfully!!\")\n            that.admin_StaffData();\n        }\n        let errorFn = function () {\n\n        }\n        postAPI(interpolate(ENABLE_STAFF_IN_PRACTICE, [staff]), {\n            practice: that.props.active_practiceId,\n            is_active: !!e\n        }, successFn, errorFn)\n    }\n    toggleAllPermissions = (type, value) => {\n        let that = this;\n        let permissionsArray = [];\n\n        if (type == 'LOCAL') {\n            that.state.allPermissions.forEach(function (permission) {\n                let permObject = {\n                    \"name\": permission.name,\n                    \"codename\": permission.codename,\n                    \"is_active\": !!value,\n                    \"practice\": that.props.active_practiceId,\n                    \"staff\": that.state.currentUser\n                };\n                if (that.state.editPermissions[permission.codename]) {\n                    permObject.id = that.state.editPermissions[permission.codename].id;\n                }\n                permissionsArray.push(permObject);\n            });\n        }\n        if (type == 'GLOBAL') {\n            that.state.allGlobalPermissions.forEach(function (permission) {\n                let permObject = {\n                    \"name\": permission.name,\n                    \"codename\": permission.codename,\n                    \"is_active\": !!value,\n                    // \"practice\": that.props.active_practiceId,\n                    \"staff\": that.state.currentUser\n                };\n                if (that.state.editPermissions[permission.codename]) {\n                    permObject.id = that.state.editPermissions[permission.codename].id;\n                }\n                permissionsArray.push(permObject);\n            });\n        }\n        let successFn = function (data) {\n            that.editPermissions(that.state.currentUser);\n            that.setState({\n                bulkEditLoading: false\n            });\n        }\n        let errorFn = function () {\n            that.setState({\n                bulkEditLoading: false\n            });\n        }\n        confirm({\n            title: 'Are you sure to select all permissions for this user?',\n            onOk() {\n                that.setState({\n                    bulkEditLoading: type\n                });\n                postAPI(UPDATE_BULK_PERMISSIONS, {permissions: permissionsArray}, successFn, errorFn);\n            },\n            onCancel() {\n                return false;\n            },\n        })\n\n    }\n\n    render() {\n        let that = this;\n        const doctorColumns = [{\n            title: \"Name\",\n            dataIndex: 'first_name',\n            key: \"first_name\",\n        }, {\n            title: \"Email\",\n            dataIndex: \"email\",\n            key: \"email\",\n            render: (value, record) => (record.user && record.user.is_active ? record.user.email : value)\n        }, {\n            title: \"Mobile\",\n            dataIndex: \"mobile\",\n            key: \"mobile\",\n        }, {\n            title: \"Registration Number\",\n            dataIndex: \"registration_number\",\n            key: \"registration_number\",\n        }, {\n            title: \"Enable Staff\",\n            dataIndex: \"in_practice\",\n            key: \"enable_staff\",\n            render: (item, record) => (record.user && record.user.is_superuser ?\n                <Tag color=\"red\">Not Allowed</Tag> :\n                <AntSwitch defaultChecked={!!item} onChange={(e) => that.toggleEnableStaffPractice(record.id, e)}/>)\n        }, {\n            title: \"Last Login\",\n            key: \"user\",\n            render: (text, record) => (record.user && record.user.is_active ? (record.user.last_login ? moment(record.user.last_login).fromNow() : '--') :\n                <Tag color=\"#f50\">Activation Pending</Tag>),\n        }, {\n            title: \"Action\",\n            key: \"action\",\n            render: function (text, record) {\n                return <span>\n            <Link to={\"/settings/clinics-staff/\" + record.id + \"/edit\"}>\n              <a>Edit</a>\n            </Link>\n                     <Divider type=\"vertical\"/>\n                    {record.user && record.user.is_superuser ?\n                        <Tag color=\"red\">SuperUser</Tag> :\n                        <>\n                            <a onClick={() => that.editPermissions(record.id)}\n                               disabled={!record.in_practice}>Permissions</a>\n                            <Divider type=\"vertical\"/>\n                            <Popconfirm title=\"Are you sure delete this staff?\"\n                                        onConfirm={() => that.deleteStaff(record.id)} okText=\"Yes\" cancelText=\"No\">\n                                <a>Delete</a>\n                            </Popconfirm>\n                        </>}\n            </span>\n            }\n        }];\n\n        const staffColumns = [{\n            title: \"Name\",\n            dataIndex: \"first_name\",\n            key: \"name\",\n        }, {\n            title: \"Email\",\n            dataIndex: \"email\",\n            key: \"email\",\n            render: (value, record) => (record.user && record.user.is_active ? record.user.email : value)\n        }, {\n            title: \"Mobile\",\n            dataIndex: \"mobile\",\n            key: \"mobile\",\n        }, {\n            title: \"Enable Staff\",\n            dataIndex: \"in_practice\",\n            key: \"enable_staff\",\n            render: (item, record) => (record.user && record.user.is_superuser ?\n                <Tag color=\"red\">Not Allowed</Tag> :\n                <AntSwitch defaultChecked={!!item} onChange={(e) => that.toggleEnableStaffPractice(record.id, e)}/>)\n        }, {\n            title: \"Last Login\",\n            key: \"user\",\n            render: (text, record) => (record.user && record.user.is_active ? (record.user.last_login ? moment(record.user.last_login).fromNow() : '--') :\n                <Tag color=\"#f50\">Activation Pending</Tag>),\n        }, {\n            title: \"Action\",\n            key: \"action\",\n            render: function (text, record) {\n                return <span>\n            <Link to={\"/settings/clinics-staff/staff/\" + record.id + \"/edit\"}>\n              <a>Edit</a>\n            </Link>\n                     <Divider type=\"vertical\"/>\n                    {record.user && record.user.is_superuser ?\n                        <Tag color=\"red\">SuperUser</Tag> :\n                        <>\n                            <a onClick={() => that.editPermissions(record.id)}\n                               disabled={!record.in_practice}>Permissions</a>\n                            <Divider type=\"vertical\"/>\n                            <Popconfirm title=\"Are you sure delete this staff?\"\n                                        onConfirm={() => that.deleteStaff(record.id)} okText=\"Yes\" cancelText=\"No\">\n                                <a>Delete</a>\n                            </Popconfirm></>}\n            </span>\n            }\n        }];\n\n        const notification_doctor_columns = [{\n            title: \"Name\",\n            dataIndex: \"user.first_name\",\n            key: \"name\",\n        }, {\n            title: \"Confirmation SMS\",\n            dataIndex: \"confirmation_sms\",\n            key: \"confirmation_sms\",\n            render: confirmation_sms => (\n                <span>\n            <Checkbox\n                checked={confirmation_sms}/>\n            </span>),\n        }, {\n            title: \"Schedule SMS\",\n            dataIndex: \"schedule_sms\",\n            key: \"schedule_sms\",\n            render: schedule_sms => (\n                <span>\n            <Checkbox checked={schedule_sms}/>\n            </span>)\n        }, {\n            title: \"Confirmation EMAIL\",\n            dataIndex: \"confirmation_email\",\n            key: \"confirmation_email\",\n            render: confirmation_email => (\n                <span>\n            <Checkbox checked={confirmation_email}/>\n            </span>)\n        }, {\n            title: \"Online Appointment SMS\",\n            dataIndex: \"online_appointment_sms\",\n            key: \"online_appointment_sms\",\n            render: online_appointment_sms => (\n                <Checkbox checked={online_appointment_sms}/>\n            )\n        }, {\n            title: \"Action\",\n            key: \"action\",\n            render: function (text, record) {\n                return <span>\n            <Link to={\"/settings/clinics-staff/\" + record.id + \"/edit\"}>\n              <a>Edit</a>\n            </Link>\n            </span>\n            }\n        }];\n\n        const notification_staff_columns = [{\n            title: \"Name\",\n            dataIndex: \"user.first_name\",\n            key: \"name\",\n        }, {\n            title: \"Confirmation SMS\",\n            dataIndex: \"confirmation_sms\",\n            key: \"confirmation_sms\",\n            render: confirmation_sms => (\n                <span>\n            <Checkbox\n                checked={confirmation_sms}/>\n            </span>),\n        }, {\n            title: \"Schedule SMS\",\n            dataIndex: \"schedule_sms\",\n            key: \"schedule_sms\",\n            render: schedule_sms => (\n                <span>\n            <Checkbox checked={schedule_sms}/>\n            </span>)\n        }, {\n            title: \"Confirmation EMAIL\",\n            dataIndex: \"confirmation_email\",\n            key: \"confirmation_email\",\n            render: confirmation_email => (\n                <span>\n            <Checkbox checked={confirmation_email}/>\n            </span>)\n        }, {\n            title: \"Online Appointment SMS\",\n            dataIndex: \"online_appointment_sms\",\n            key: \"online_appointment_sms\",\n            render: online_appointment_sms => (\n                <Checkbox checked={online_appointment_sms}/>\n            )\n        }, {\n            title: \"Action\",\n            key: \"action\",\n            render: function (text, record) {\n                return (record.user && record.is_superuser ?\n                    <Tag> Not Allowed</Tag> :\n                    <span>\n            <Link to={\"/settings/clinics-staff/staff/\" + record.id + \"/edit\"}>\n              <a>Edit</a>\n            </Link>\n            </span>)\n            }\n        }];\n        return <Row>\n            <h2>Practice Staff</h2>\n            <Switch>\n                <Route path={\"/settings/clinics-staff/:docId/edit-timing\"}\n                       render={(route) => <DoctorTiming {...this.props} {...route} loadData={that.loadData}/>}/>\n                <Route>\n                    <Card>\n                        <Tabs defaultActiveKey={this.state.defaultActiveTab} onChange={this.changeTab}>\n                            <TabPane tab={<span><Icon type=\"user-add\"/>Manage Staff</span>} key=\"#staff\">\n                                <h2>Doctors\n                                    <Link to=\"/settings/clinics-staff/adddoctor\">\n                                        <Button type=\"primary\" style={{float: 'right'}}>\n                                            <Icon type=\"plus\"/>&nbsp;Add Doctor\n                                        </Button>\n                                    </Link>\n                                    <Link to=\"/settings/clinics-staff/addstaff\">\n                                        <Button type=\"primary\" style={{float: 'right', marginRight: '5px'}}>\n                                            <Icon type=\"plus\"/>&nbsp;Add Staff\n                                        </Button>\n                                    </Link>\n                                </h2>\n\n                                <CustomizedTable loading={this.state.loading} pagination={false} columns={doctorColumns}\n                                       dataSource={this.state.practice_doctors}/>\n                                <Divider/>\n                                <h2>Staff </h2>\n                                <CustomizedTable loading={this.state.loading} pagination={false} columns={staffColumns}\n                                       dataSource={this.state.practice_staff}/>\n                            </TabPane>\n                            <TabPane tab={<span><Icon type=\"team\"/>Staff Notification</span>} key=\"#notification\">\n                                <h2>Doctors</h2>\n                                <Table loading={this.state.loading} pagination={false}\n                                       columns={notification_doctor_columns}\n                                       dataSource={this.state.practice_doctors}/>\n                                <Divider/>\n                                <h2>Staff</h2>\n                                <Table loading={this.state.loading} pagination={false}\n                                       columns={notification_staff_columns}\n                                       dataSource={this.state.practice_staff}/>\n                            </TabPane>\n                            <TabPane tab={<span><Icon type=\"schedule\"/>Doctors visit Timing</span>} key=\"#timing\">\n                                <Table loading={this.state.loading} dataSource={this.state.practice_doctors}>\n                                    <Column title=\"Name\"\n                                            dataIndex=\"user.first_name\"\n                                            key=\"name\"\n                                    />\n                                    <Column title=\"Visit Timing\"\n                                            dataIndex=\"loginstatus\"\n                                            key=\"VisitTiming\"\n                                            render={(text, record) => visitTime(that.state.doctorsTiming[record.id])}\n                                    />\n                                    <Column title=\"Action\"\n                                            key=\"action\"\n                                            render={(text, record) => (\n                                                <Link to={\"/settings/clinics-staff/\" + record.id + \"/edit-timing\"}>\n                                                    <a>Edit Timing</a>\n                                                </Link>\n                                            )}/>\n                                </Table>\n                            </TabPane>\n                        </Tabs>\n                        <Modal title=\"Edit Permissions\"\n                               visible={this.state.permissionEditModal}\n                               onCancel={() => this.editPermissions()}\n                               footer={null}>\n                            <Spin spinning={this.state.bulkEditLoading == 'LOCAL'}>\n                                <Row>\n                                    <h3>\n                                        <Checkbox\n                                            checked={that.state.allPermissions.length && that.state.allPermissions.reduce((a, b) => a && b && that.state.editPermissions[a.codename] && that.state.editPermissions[b.codename])}\n                                            onClick={(e) => this.toggleAllPermissions('LOCAL', e.target.checked)}>Select\n                                            All\n                                            Permissions</Checkbox>\n                                    </h3>\n                                </Row>\n                                {that.state.allPermissions.map(item => <Row>\n                                    <Checkbox value={item.codename}\n                                              checked={that.state.editPermissions[item.codename]}\n                                              disabled={that.state.editPermissions[item.codename] && that.state.editPermissions[item.codename].loading}\n                                              onClick={(e) => this.setPermission(item.codename, item.name, e, true)}>{item.id} {item.name}</Checkbox>\n                                </Row>)}\n                            </Spin>\n                            <Divider>Global Permissions</Divider>\n                            <Spin spinning={this.state.bulkEditLoading == 'GLOBAL'}>\n                                <Row>\n                                    <h3>\n                                        <Checkbox\n                                            checked={that.state.allGlobalPermissions.length && that.state.allGlobalPermissions.reduce((a, b) => a && b && that.state.editPermissions[a.codename] && that.state.editPermissions[b.codename])}\n                                            onClick={(e) => this.toggleAllPermissions('GLOBAL', e.target.checked)}>Select\n                                            All\n                                            Permissions</Checkbox>\n                                    </h3>\n                                </Row>\n                                {that.state.allGlobalPermissions.map(item => <Row>\n                                    <Checkbox value={item.codename}\n                                              checked={that.state.editPermissions[item.codename]}\n                                              disabled={that.state.editPermissions[item.codename] && that.state.editPermissions[item.codename].loading}\n                                              onClick={(e) => this.setPermission(item.codename, item.name, e, false)}\n                                              style={{display: 'list-item'}}>{item.id} {item.name}</Checkbox></Row>)}\n                            </Spin>\n                        </Modal>\n                    </Card>\n                </Route>\n            </Switch>\n\n        </Row>\n    }\n}\n\nfunction visitTime(visitObj) {\n    if (visitObj) {\n        return (visitObj.visting_hour_same_week ?\n            <span>\n                <b>Mon-Sun : </b>{momentTime(visitObj.first_start_time)}\n                {visitObj.is_two_sessions ? \"-\" + momentTime(visitObj.first_end_time) + \" ||LUNCH|| \" + momentTime(visitObj.second_start_time) : null}\n                -{momentTime(visitObj.second_end_time)}\n                </span>\n            : DAY_KEYS.map(dayKey =>\n                visitObj[dayKey] ? <span>\n                        <b>{dayKey} : </b>\n                    {momentTime(visitObj[`first_start_time_${dayKey}`])}\n                    {visitObj[`is_two_sessions_${dayKey}`] ? \"-\" + momentTime(visitObj[`first_end_time_${dayKey}`]) + \"||LUNCH||\" + momentTime(visitObj[`second_start_time_${dayKey}`]) : null}\n                    -{momentTime(visitObj[`second_end_time_${dayKey}`])}\n                    <br/></span> : null\n            ))\n    }\n    return null\n}\n\n\nfunction momentTime(timeStr) {\n    return moment(timeStr, \"HH:mm\").format(\"HH:mm\")\n}\n\nexport default PracticeDetails;\n","import React from \"react\";\nimport DynamicFieldsForm from \"../../../common/DynamicFieldsForm\";\nimport {Button, Card, Form, Icon, Row} from \"antd\";\nimport {\n    CHECKBOX_FIELD,\n    SUCCESS_MSG_TYPE,\n    INPUT_FIELD,\n    RADIO_FIELD,\n    SELECT_FIELD,\n    SINGLE_CHECKBOX_FIELD,\n    COLOR_PICKER,\n    EMAIL_FIELD\n} from \"../../../../constants/dataKeys\";\nimport {ALL_PRACTICE_STAFF, DRUG_CATALOG, SINGLE_PRACTICE_STAFF_API, STAFF_ROLES} from \"../../../../constants/api\";\nimport {getAPI, displayMessage, interpolate} from \"../../../../utils/common\";\nimport {Redirect} from 'react-router-dom'\nimport {Route} from \"react-router\";\n\nclass AddEditDoctor extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            redirect: false,\n            editStaff: null,\n            roles: [],\n\n\n        }\n        this.changeRedirect = this.changeRedirect.bind(this);\n        this.loadEditPracticeStaff = this.loadEditPracticeStaff.bind(this);\n        if (this.props.match.params.doctorid) {\n            this.loadEditPracticeStaff();\n        }\n        this.staffRoles();\n    }\n\n    staffRoles() {\n        let that = this;\n        let successFn = function (data) {\n            that.setState({\n                roles: data\n            })\n        }\n        let errorFn = function () {\n        }\n        getAPI(STAFF_ROLES, successFn, errorFn)\n    }\n\n    loadEditPracticeStaff() {\n        let doctorid = this.props.match.params.doctorid;\n        console.log(doctorid)\n        let that = this;\n        let successFn = function (data) {\n            that.setState({\n                editStaff: data,\n            })\n        };\n        let errorFn = function () {\n            that.setState({\n            })\n        }\n        getAPI(interpolate(SINGLE_PRACTICE_STAFF_API, [doctorid]), successFn, errorFn)\n\n    }\n\n    changeRedirect() {\n        var redirectVar = this.state.redirect;\n        this.setState({\n            redirect: !redirectVar,\n        });\n    }\n\n    render() {\n        let that = this;\n\n        const fields = [\n            {\n                label: \"Doctor\",\n                key: \"user.first_name\",\n                required: true,\n                placeholder:\"Doctor Name\",\n                initialValue: this.state.editStaff ? this.state.editStaff.user.first_name : null,\n                type: INPUT_FIELD\n            }, {\n                label: \"Mobile Number\",\n                key: \"user.mobile\",\n                placeholder:\"Mobile Number\",\n                required: true,\n                initialValue: this.state.editStaff ? this.state.editStaff.user.mobile : null,\n                type: INPUT_FIELD,\n                disabled: !!this.state.editStaff\n            }, {\n                label: \"Email Id\",\n                key: \"user.email\",\n                placeholder:\"Email Id\",\n                required: true,\n                disabled: !!this.state.editStaff,\n                initialValue: this.state.editStaff ? this.state.editStaff.user.email : null,\n                type: EMAIL_FIELD\n            }, {\n                label: \"Registration Number\",\n                key: \"registration_number\",\n                placeholder:\"Registration Number\",\n                initialValue: this.state.editStaff ? this.state.editStaff.registration_number : null,\n                type: INPUT_FIELD\n            },\n            // {\n            //     label: \"Role\",\n            //     key: \"role\",\n            //     required: true,\n            //     initialValue: this.state.editStaff ? this.state.editStaff.role : null,\n            //     type: SELECT_FIELD,\n            //     options: this.state.roles.map(role => ({label: role.name, value: [role.id]}))\n            // },\n            {\n                label: \"Calendar Colour\",\n                key: \"calendar_colour\",\n                initialValue: this.state.editStaff ? this.state.editStaff.calendar_colour : null,\n                type: COLOR_PICKER,\n                required:true\n\n            }, {\n                label: \"Schedule SMS\",\n                key: \"schedule_sms\",\n                initialValue: this.state.editStaff ? this.state.editStaff.schedule_sms : false,\n                type: SINGLE_CHECKBOX_FIELD,\n            }, {\n                label: \"Confirmation SMS\",\n                key: \"confirmation_sms\",\n                initialValue: this.state.editStaff ? this.state.editStaff.confirmation_sms : false,\n                type: SINGLE_CHECKBOX_FIELD,\n            }, {\n                label: \"Confirmation Email\",\n                key: \"confirmation_email\",\n                initialValue: this.state.editStaff ? this.state.editStaff.confirmation_email : false,\n                type: SINGLE_CHECKBOX_FIELD,\n            }, {\n                label: \"Online Appointment SMS\",\n                key: \"online_appointment_sms\",\n                initialValue: this.state.editStaff ? this.state.editStaff.online_appointment_sms : false,\n                type: SINGLE_CHECKBOX_FIELD,\n            },]\n        const formProp = {\n            successFn: function (data) {\n                displayMessage(SUCCESS_MSG_TYPE, \"success\");\n                that.setState({\n                    redirect: true\n\n                });\n                that.props.loadData();\n                if (that.props.history){\n                    that.props.history.replace(\"/settings/clinics-staff\");\n                }\n            },\n            errorFn: function () {\n\n            },\n            action: ALL_PRACTICE_STAFF,\n            method: \"post\",\n        }\n        let editformProp;\n        if (this.state.editStaff) {\n\n            editformProp = {\n                successFn: function (data) {\n                    displayMessage(SUCCESS_MSG_TYPE, \"success\");\n                    that.setState({\n                        redirect: true,\n                    });\n                    that.props.loadData();\n                    if (that.props.history){\n                        that.props.history.replace(\"/settings/clinics-staff\");\n                    }\n                },\n                errorFn: function () {\n\n                },\n                action: interpolate(SINGLE_PRACTICE_STAFF_API, [that.props.match.params.doctorid]),\n                method: \"put\",\n            }\n        }\n        const defaultValues = [{key:'role',value:[3]}];\n\n        const TestFormLayout = Form.create()(DynamicFieldsForm);\n        return <Row>\n            <Card>\n                <Route exact path='/settings/clinics-staff/:doctorid/edit'\n                       render={(route) => (this.props.match.params.doctorid ?\n                           <TestFormLayout defaultValues={defaultValues} title=\"Edit Doctor\"\n                                           changeRedirect={this.changeRedirect} formProp={editformProp}\n                                           fields={fields} {...route}/> : <Redirect to={'/settings/clinics-staff'}/>)}/>\n\n                <Route exact path='/settings/clinics-staff/adddoctor'\n                       render={(route) => <TestFormLayout defaultValues={defaultValues} changeRedirect={this.changeRedirect}\n                                                     title=\"Add Doctor \" formProp={formProp} fields={fields} {...route}/>}/>\n            </Card>\n            {this.state.redirect && <Redirect to='/settings/clinics-staff'/>}\n\n        </Row>\n    }\n}\n\nexport default AddEditDoctor;\n","import React from \"react\";\nimport DynamicFieldsForm from \"../../../common/DynamicFieldsForm\";\nimport {Button, Card, Form, Icon, Row} from \"antd\";\nimport {\n    CHECKBOX_FIELD,\n    SUCCESS_MSG_TYPE,\n    INPUT_FIELD,\n    RADIO_FIELD,\n    SELECT_FIELD,\n    SINGLE_CHECKBOX_FIELD,\n    COLOR_PICKER,\n    EMAIL_FIELD\n} from \"../../../../constants/dataKeys\";\nimport {ALL_PRACTICE_STAFF, DRUG_CATALOG, SINGLE_PRACTICE_STAFF_API, STAFF_ROLES} from \"../../../../constants/api\";\nimport {getAPI, displayMessage, interpolate} from \"../../../../utils/common\";\nimport {Redirect} from 'react-router-dom'\nimport {Route} from \"react-router\";\nimport {ROLES} from \"../../../../constants/hardData\";\n\nclass AddEditStaff extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            redirect: false,\n            editStaff: null,\n            // roles: [],\n\n\n        }\n        this.changeRedirect = this.changeRedirect.bind(this);\n        this.loadEditPracticeStaff = this.loadEditPracticeStaff.bind(this);\n        if (this.props.match.params.staffid) {\n            this.loadEditPracticeStaff();\n        }\n        // this.staffRoles();\n    }\n\n    // staffRoles() {\n    //     let that = this;\n    //     let successFn = function (data) {\n    //         that.setState({\n    //             roles: data,\n    //         })\n    //     }\n    //     let errorFn = function () {\n    //     }\n    //     getAPI(STAFF_ROLES, successFn, errorFn)\n    // }\n\n    loadEditPracticeStaff() {\n        let staffid = this.props.match.params.staffid;\n        console.log(staffid)\n        let that = this;\n        let successFn = function (data) {\n            that.setState({\n                editStaff: data,\n            })\n        };\n        let errorFn = function () {\n            that.setState({\n            })\n        }\n        getAPI(interpolate(SINGLE_PRACTICE_STAFF_API, [staffid]), successFn, errorFn)\n\n    }\n\n    changeRedirect() {\n        var redirectVar = this.state.redirect;\n        this.setState({\n            redirect: !redirectVar,\n        });\n    }\n\n    render() {\n        let that = this;\n        const fields = [\n            {\n                label: \"Staff Name\",\n                key: \"user.first_name\",\n                required: true,\n                placeholder:\"Staff Name\",\n                initialValue: this.state.editStaff ? this.state.editStaff.user.first_name : null,\n                type: INPUT_FIELD\n            }, {\n                label: \"Mobile Number\",\n                key: \"user.mobile\",\n                placeholder:\"Mobile Number\",\n                required: true,\n                initialValue: this.state.editStaff ? this.state.editStaff.user.mobile : null,\n                type: INPUT_FIELD,\n                disabled: !!this.state.editStaff\n            }, {\n                label: \"Email Id\",\n                key: \"user.email\",\n                placeholder:\"Email Id\",\n                required: true,\n                disabled: !!this.state.editStaff,\n                initialValue: this.state.editStaff ? this.state.editStaff.user.email : null,\n                type: EMAIL_FIELD\n            },{\n                label: \"Role\",\n                key: \"role\",\n                required: true,\n                initialValue: this.state.editStaff ? this.state.editStaff.role : null,\n                type: SELECT_FIELD,\n                options: ROLES.map(role => ({label: role.label, value: [role.value]}))\n            }, {\n                label: \"Schedule SMS\",\n                key: \"schedule_sms\",\n                initialValue: this.state.editStaff ? this.state.editStaff.schedule_sms : false,\n                type: SINGLE_CHECKBOX_FIELD,\n            }, {\n                label: \"Confirmation SMS\",\n                key: \"confirmation_sms\",\n                initialValue: this.state.editStaff ? this.state.editStaff.confirmation_sms : false,\n                type: SINGLE_CHECKBOX_FIELD,\n            }, {\n                label: \"Confirmation Email\",\n                key: \"confirmation_email\",\n                initialValue: this.state.editStaff ? this.state.editStaff.confirmation_email : false,\n                type: SINGLE_CHECKBOX_FIELD,\n            }, {\n                label: \"Online Appointment SMS\",\n                key: \"online_appointment_sms\",\n                initialValue: this.state.editStaff ? this.state.editStaff.online_appointment_sms : false,\n                type: SINGLE_CHECKBOX_FIELD,\n            },]\n        const formProp = {\n            successFn: function (data) {\n                displayMessage(SUCCESS_MSG_TYPE, \"success\");\n                that.setState({\n                    redirect: true\n\n                });\n                that.props.loadData();\n                if (that.props.history){\n                    that.props.history.replace(\"/settings/clinics-staff\");\n                }\n            },\n            errorFn: function () {\n\n            },\n            action: ALL_PRACTICE_STAFF,\n            method: \"post\",\n        }\n        let editformProp;\n        if (this.state.editStaff) {\n\n            editformProp = {\n                successFn: function (data) {\n                    displayMessage(SUCCESS_MSG_TYPE, \"success\");\n                    that.setState({\n                        redirect: true,\n                    });\n                    that.props.loadData();\n                    if (that.props.history){\n                        that.props.history.replace(\"/settings/clinics-staff\");\n                    }\n                },\n                errorFn: function () {\n\n                },\n                action: interpolate(SINGLE_PRACTICE_STAFF_API, [that.props.match.params.staffid]),\n                method: \"put\",\n            }\n        }\n        const defaultValues = [];\n\n        const TestFormLayout = Form.create()(DynamicFieldsForm);\n        return <Row>\n            <Card>\n                <Route exact path='/settings/clinics-staff/staff/:staffid/edit'\n                       render={(route) => (this.props.match.params.staffid ?\n                           <TestFormLayout defaultValues={defaultValues} title=\"Edit Staff\"\n                                           changeRedirect={this.changeRedirect} formProp={editformProp}\n                                           fields={fields} {...route}/> : <Redirect to={'/settings/clinics-staff'}/>)}/>\n\n                <Route exact path='/settings/clinics-staff/addstaff'\n                       render={(route) => <TestFormLayout defaultValues={defaultValues} changeRedirect={this.changeRedirect}\n                                                     title=\"Add Staff \" formProp={formProp} fields={fields} {...route}/>}/>\n            </Card>\n            {this.state.redirect && <Redirect to='/settings/clinics-staff'/>}\n\n        </Row>\n    }\n}\n\nexport default AddEditStaff;\n","import React from \"react\";\nimport DynamicFieldsForm from \"../../../common/DynamicFieldsForm\";\nimport {Card, Form, Row} from \"antd\";\nimport {\n    EMAIL_FIELD,\n    INPUT_FIELD,\n    SELECT_FIELD,\n    SINGLE_IMAGE_UPLOAD_FIELD,\n    SUCCESS_MSG_TYPE\n} from \"../../../../constants/dataKeys\";\nimport {ALL_PRACTICE, EXTRA_DATA} from \"../../../../constants/api\";\nimport {displayMessage, getAPI} from \"../../../../utils/common\";\nimport {Redirect} from 'react-router-dom'\nimport {LANGUAGE, SMS_LANGUAGE_CONFIG_PARAM} from \"../../../../constants/hardData\";\nimport {loadConfigParameters} from \"../../../../utils/clinicUtils\";\n\n\nclass AddPracticeDetails extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            redirect: false,\n            specialisations: null,\n            countries: null,\n            [SMS_LANGUAGE_CONFIG_PARAM]: []\n        }\n        this.changeRedirect = this.changeRedirect.bind(this);\n    }\n\n    componentDidMount() {\n        var that = this;\n        let successFn = function (data) {\n            let specialisations = {};\n            data.specialisation.forEach(function (speciality) {\n                specialisations[speciality.id] = speciality\n            });\n            console.log(specialisations);\n\n            that.setState({\n                specialisations: data.specialisation,\n                countries: data.country,\n            })\n        };\n        let errorFn = function () {\n        };\n        getAPI(EXTRA_DATA, successFn, errorFn);\n        loadConfigParameters(this, [SMS_LANGUAGE_CONFIG_PARAM]);\n    }\n\n    changeRedirect() {\n        var redirectVar = this.state.redirect;\n        this.setState({\n            redirect: !redirectVar,\n        });\n    }\n\n    render() {\n\n        let specialisationsOptions = []\n        if (this.state.specialisations) {\n            this.state.specialisations.forEach(function (specialisation) {\n                specialisationsOptions.push({label: (specialisation.name), value: specialisation.id});\n            })\n        }\n        const fields = [{\n            label: \"Practice Logo\",\n            key: \"logo\",\n            type: SINGLE_IMAGE_UPLOAD_FIELD,\n            allowWebcam: false\n        }, {\n            label: \"Practice Name\",\n            key: \"name\",\n            placeholder: \"Practice Name\",\n            required: true,\n            type: INPUT_FIELD\n        }, {\n            label: \"Practice Tagline\",\n            key: \"tagline\",\n            placeholder: \"Practice Tagline\",\n            required: true,\n            type: INPUT_FIELD\n        }, {\n            label: \"Practice Specialisation\",\n            key: \"specialisation\",\n            placeholder: \"Practice Specialisation\",\n            type: INPUT_FIELD,\n            // options: specialisationsOptions,\n        }, {\n            label: \"Practice Street Address\",\n            key: \"address\",\n            placeholder: \"Practice Street Address\",\n            type: INPUT_FIELD\n        }, {\n            label: \"Practice Locality\",\n            key: \"locality\",\n            placeholder: \"Practice Locality\",\n            type: INPUT_FIELD\n        }, {\n            label: \"Practice Country\",\n            key: \"country\",\n            placeholder: \"Practice Country\",\n            type: INPUT_FIELD,\n        }, {\n            label: \"Practice State\",\n            key: \"state\",\n            placeholder: \"Practice State\",\n            type: INPUT_FIELD,\n        }, {\n            label: \"Practice City\",\n            key: \"city\",\n            placeholder: \"Practice City\",\n            type: INPUT_FIELD,\n        }, {\n            label: \"Practice PINCODE\",\n            key: \"pincode\",\n            placeholder: \"Practice PINCODE\",\n            type: INPUT_FIELD\n        }, {\n            label: \"Practice Contact Number\",\n            key: \"contact\",\n            placeholder: \"Practice Contact Number\",\n            type: INPUT_FIELD\n        }, {\n            label: \"Practice Email\",\n            key: \"email\",\n            placeholder: \"Practice Email\",\n            type: EMAIL_FIELD\n        }, {\n            label: \"SMS Language\",\n            key: \"language\",\n            placeholder: 'SMS Language',\n            initialValue: this.props.activePracticeData.language ? this.props.activePracticeData.language : [],\n            type: SELECT_FIELD,\n            options: this.state[SMS_LANGUAGE_CONFIG_PARAM].map(item => {\n                return {label: item, value: item}\n            }),\n        }, {\n            label: \"Practice Website\",\n            key: \"website\",\n            placeholder: \"Practice Website\",\n            type: INPUT_FIELD\n        }, {\n            label: \"GSTIN\",\n            key: \"gstin\",\n            placeholder: \"GSTIN\",\n            type: INPUT_FIELD\n        }, {\n            label: \"Invoice Prefix\",\n            placeholder: \"DEL/INV/\",\n            key: \"invoice_prefix\",\n            type: INPUT_FIELD,\n            required: true\n        }, {\n            label: \"Payment Prefix\",\n            placeholder: \"DEL/RCPT/\",\n            key: \"payment_prefix\",\n            type: INPUT_FIELD,\n            required: true\n        },\n            {\n                label: \"Return Prefix\",\n                placeholder: \"DEL/RET/\",\n                key: \"return_prefix\",\n                type: INPUT_FIELD,\n                required: true\n            }];\n\n        const formProp = {\n            successFn: function (data) {\n                displayMessage(SUCCESS_MSG_TYPE, \"success\")\n                if (this.props.history){\n                    this.props.history.replace('/settings/clinics')\n                }\n            },\n            errorFn: function () {\n\n            },\n            action: ALL_PRACTICE,\n            method: \"post\",\n        }\n\n        const TestFormLayout = Form.create()(DynamicFieldsForm);\n        return <Row>\n            <Card>\n                <TestFormLayout title=\"Practice Details\" changeRedirect={this.changeRedirect} formProp={formProp}\n                                fields={fields} {...this.props}/>\n            </Card>\n            {this.state.redirect && <Redirect to='/settings/clinics'/>}\n        </Row>\n    }\n}\n\nexport default AddPracticeDetails;\n","import React from \"react\";\nimport DynamicFieldsForm from \"../../../common/DynamicFieldsForm\";\nimport {Form} from \"antd\";\nimport {SMS_FIELD, SUCCESS_MSG_TYPE, SINGLE_CHECKBOX_FIELD} from \"../../../../constants/dataKeys\";\nimport {APPOINTMENT_CONFIRMATION_SMS_TAG_OPTIONS} from \"../../../../constants/hardData\";\nimport {displayMessage, interpolate, getAPI} from \"../../../../utils/common\";\nimport {COMMUNICATONS_API} from \"../../../../constants/api\";\n\n\nclass WishSMS extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n\n        }\n        this.loadWishSMS =this.loadWishSMS.bind(this);\n    }\n    componentDidMount() {\n        this.loadWishSMS();\n    }\n\n    loadWishSMS(){\n        let that=this;\n        let successFn =function(data){\n            that.setState({\n                wishsmsData:data[data.length-1]\n            })\n        }\n        let errorFn= function() {\n            \n        }\n        getAPI(interpolate(COMMUNICATONS_API, [this.props.active_practiceId]), successFn, errorFn);\n\n    }\n\n    render() {\n        console.log(\"wishSMS\",this.state.wishsmsData)\n        let that = this;\n        const fields = [{\n            key: \"birthday_wish_sms\",\n            initialValue: this.state.wishsmsData ? this.state.wishsmsData.birthday_wish_sms : false,\n            type: SINGLE_CHECKBOX_FIELD,\n            extra: \"This SMS is sent to the Patient on the morning of their birthday\",\n            follow: <b>BIRTHDAY WISH SMS</b>\n        }, {\n            key: \"birthday_wish_text\",\n            placeholder: \"{clinic}{patient}}\",\n            initialValue: this.state.wishsmsData ? this.state.wishsmsData.birthday_wish_text : ' ',\n            minRows: 4,\n            type: SMS_FIELD,\n            options: APPOINTMENT_CONFIRMATION_SMS_TAG_OPTIONS,\n\n        }, {\n            key: \"anniversary_wish_sms\",\n            initialValue: this.state.wishsmsData ? this.state.wishsmsData.anniversary_wish_sms : false,\n            type: SINGLE_CHECKBOX_FIELD,\n            extra: \"This SMS is sent to the Patient on the morning of their anniversary\",\n            follow: <b>ANNIVERSARY WISH SMS</b>\n        }, {\n            key: \"anniversary_wish_text\",\n            placeholder: \"{anniversary}\",\n            initialValue:this.state.wishsmsData ? this.state.wishsmsData.anniversary_wish_text :' ',\n            minRows: 4,\n            type: SMS_FIELD,\n            options: APPOINTMENT_CONFIRMATION_SMS_TAG_OPTIONS\n        }, {\n            key: \"online_appointment_sms\",\n            type: SINGLE_CHECKBOX_FIELD,\n            initialValue:this.state.wishsmsData ? this.state.wishsmsData.online_appointment_sms:false,\n            extra: \"This SMS is sent to the Patient when they request an appointment on your practice marketing page\",\n            follow: <b>ONLINE APPOINTMENT SMS</b>\n        }, {\n            key: \"online_appointment_text\",\n            placeholder: \"{online appointment}\",\n            initialValue:this.state.wishsmsData ? this.state.wishsmsData.online_appointment_text :' ',\n            minRows: 4,\n            type: SMS_FIELD,\n            options: APPOINTMENT_CONFIRMATION_SMS_TAG_OPTIONS\n        }];\n        const formProp = {\n            successFn: function (data) {\n                displayMessage(SUCCESS_MSG_TYPE, \"success\");\n            },\n            errorFn: function () {\n\n            },\n            action: interpolate(COMMUNICATONS_API, [that.props.active_practiceId]),\n            method: \"post\",\n        };\n        const defaultValues = [{\"key\": \"practice\", \"value\": this.props.active_practiceId},\n            {\"key\": \"id\",\"value\": this.state.wishsmsData ? this.state.wishsmsData.id : null,}\n        ];\n\n        const TestFormLayout = Form.create()(DynamicFieldsForm);\n        return <div>\n            <TestFormLayout formProp={formProp} defaultValues={defaultValues}\n                            fields={fields}/>\n        </div>\n    }\n}\n\nexport default WishSMS;\n","import React from \"react\";\nimport DynamicFieldsForm from \"../../../common/DynamicFieldsForm\";\nimport {Col, Form, Row, Select} from \"antd\";\nimport {\n    SUCCESS_MSG_TYPE,\n    INPUT_FIELD, SMS_FIELD, SINGLE_CHECKBOX_FIELD, TIME_PICKER, SELECT_FIELD, LABEL_FIELD\n} from \"../../../../constants/dataKeys\";\nimport {COMMUNICATONS_API} from \"../../../../constants/api\"\nimport {getAPI, displayMessage, interpolate} from \"../../../../utils/common\";\nimport {\n    APPOINTMENT_CONFIRMATION_SMS_TAG_OPTIONS, LANGUAGE, PROMO_CODE_SMS_TAG_OPTIONS, SMS_LANGUAGE_CONFIG_PARAM\n} from \"../../../../constants/hardData\";\nimport moment from \"moment\";\nimport {loadConfigParameters} from \"../../../../utils/clinicUtils\";\n\n\nclass AppointmentSMS extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            redirect: false,\n            data: null,\n            language: this.props.activePracticeData && this.props.activePracticeData.language ? this.props.activePracticeData.language : '',\n            [SMS_LANGUAGE_CONFIG_PARAM]:[]\n        };\n        this.loadData = this.loadData.bind(this);\n    }\n\n    componentDidMount() {\n        this.loadData();\n        loadConfigParameters(this, [SMS_LANGUAGE_CONFIG_PARAM]);\n    }\n\n    loadData() {\n        var that = this;\n        let reqData = {};\n        let successFn = function (data) {\n            console.log(\"length\", data.length - 1);\n            that.setState({\n                data: data[data.length - 1],\n            })\n        };\n        let errorFn = function () {\n        };\n        if (that.state.language) {\n            reqData.language = that.state.language;\n        }\n        getAPI(interpolate(COMMUNICATONS_API, [this.props.active_practiceId]), successFn, errorFn, reqData);\n    }\n\n    changeRedirect() {\n        var redirectVar = this.state.redirect;\n        this.setState({\n            redirect: !redirectVar,\n        });\n    }\n\n    handleChangeLanguage = (type, value) => {\n        let that = this;\n        that.setState({\n            [type]: value,\n        }, function () {\n            that.loadData();\n        })\n    };\n\n    render() {\n        let that = this;\n        const fields = [\n            //     {\n            //     label: \"SMS Language\",\n            //     key: \"sms_language\",\n            //     placeholder:\"SMS Language\",\n            //     initialValue: this.state.data && this.state.data.sms_language? this.state.data.sms_language : this.props.activePracticeData.language,\n            //     extra: \"SMS to Patients will be sent in this language\",\n            //     type: SELECT_FIELD,\n            //     options:LANGUAGE,\n            //     // onchange:()\n            // },\n            {\n                label: \"Contact Number\",\n                key: \"contact_number\",\n                placeholder: \"Contact Number\",\n                initialValue: this.state.data ? this.state.data.contact_number : ' ',\n                extra: \"Maximum 15 characters & represented as {{CLINICCONTACTNUMBER}}\",\n                type: INPUT_FIELD\n            }, {\n                label: \"Email\",\n                key: \"email\",\n                placeholder: \"Email Address\",\n                initialValue: this.state.data ? this.state.data.email : ' ',\n                extra: \"All replies by Patients for emails will be sent to this address\",\n                type: INPUT_FIELD\n            }, {\n                label: \"SMS clinic Name\",\n                key: \"sms_clinic_name\",\n                placeholder: \"Clinic Name\",\n                initialValue: this.state.data ? this.state.data.sms_clinic_name : ' ',\n                extra: \"{{CLINIC}} will use this name.\",\n                type: INPUT_FIELD,\n            }, {\n                key: \"appointment_confirmation_sms\",\n                placeholder: \"Appointment Confirmation SMS Text\",\n                initialValue: this.state.data ? this.state.data.appointment_confirmation_sms : false,\n                type: SINGLE_CHECKBOX_FIELD,\n                extra: \"SMS is sent to the Patient on successfully adding an appointment\",\n                follow: <b>APPOINTMENT CONFIRMATION SMS</b>\n            }, {\n                key: \"appointment_confirmation_text\",\n                placeholder: \"Appointment Cancellation SMS Text\",\n                initialValue: this.state.data ? this.state.data.appointment_confirmation_text : null,\n                minRows: 4,\n                type: SMS_FIELD,\n                options: APPOINTMENT_CONFIRMATION_SMS_TAG_OPTIONS\n            }, {\n                key: \"appointment_cancellation_sms\",\n                initialValue: this.state.data ? this.state.data.appointment_cancellation_sms : false,\n                type: SINGLE_CHECKBOX_FIELD,\n                extra: \"SMS is sent to the Patient when the appointment is cancelled\",\n                follow: <b>APPOINTMENT CANCELLATION SMS</b>\n            }, {\n                key: \"appointment_cancellation_text\",\n                placeholder: \"Appointment Cancellation SMS Text\",\n                initialValue: this.state.data ? this.state.data.appointment_cancellation_text : null,\n                minRows: 4,\n                type: SMS_FIELD,\n                options: APPOINTMENT_CONFIRMATION_SMS_TAG_OPTIONS\n            }, {\n                key: \"appointment_reminder_sms\",\n                placeholder: \"Appointment Reminder SMS Text\",\n                initialValue: this.state.data ? this.state.data.appointment_reminder_sms : false,\n                type: SINGLE_CHECKBOX_FIELD,\n                extra: \"This SMS is automatically sent to the Patient at selected time & date before the appointment.\",\n                follow: <b>APPOINTMENT REMINDER SMS</b>\n            }, {\n                key: \"appointment_reminder_text\",\n                placeholder: \"Appointment Reminder SMS Text\",\n                initialValue: this.state.data ? this.state.data.appointment_reminder_text : null,\n                minRows: 4,\n                type: SMS_FIELD,\n                options: APPOINTMENT_CONFIRMATION_SMS_TAG_OPTIONS\n            }, {\n                key: \"send_on_day_of_appointment\",\n                initialValue: this.state.data ? this.state.data.send_on_day_of_appointment : false,\n                type: SINGLE_CHECKBOX_FIELD,\n                follow: \"Send reminder SMS on the day of appointment at 7:30 AM\",\n            }, {\n                key: \"send_on_day_of_appointment\",\n                initialValue: this.state.data ? this.state.data.send_on_day_of_appointment : false,\n                follow: \"Send reminder SMS on the day before the appointment at\",\n                type: SINGLE_CHECKBOX_FIELD,\n            }, {\n                key: \"send_on_day_of_appointment_time\",\n                initialValue: this.state.data && moment(this.state.data.send_on_day_of_appointment_time).isValid() ? moment(this.state.data.send_on_day_of_appointment_time) : null,\n                type: TIME_PICKER\n            }, {\n                key: \"follow_up_reminder_sms\",\n                initialValue: this.state.data ? this.state.data.follow_up_reminder_sms : false,\n                type: SINGLE_CHECKBOX_FIELD,\n                extra: \"This SMS is sent to the Patient on the morning of the followup sms.\",\n                follow: <b>FOLLOW UP REMINDER SMS</b>\n            }, {\n                key: \"follow_up_reminder_sms_text\",\n                placeholder: \"Follow-up Reminder SMS Text\",\n                initialValue: this.state.data ? this.state.data.follow_up_reminder_sms_text : null,\n                minRows: 4,\n                type: SMS_FIELD,\n                options: APPOINTMENT_CONFIRMATION_SMS_TAG_OPTIONS\n            }, {\n                key: \"send_follow_up_reminder_time\",\n                initialValue: this.state.data ? this.state.data.send_follow_up_reminder_time : null,\n                extra: \"Time to Send follow-up SMS after the last appointment.\",\n                type: SELECT_FIELD,\n                options: [{label: '1 Month', value: 1}, {label: '3 Month', value: 3}, {label: '6 Month', value: 6}]\n            }, {\n                key: \"payment_sms\",\n                initialValue: this.state.data ? this.state.data.payment_sms : false,\n                type: SINGLE_CHECKBOX_FIELD,\n                extra: \"This SMS is sent to the Patient when payment is received.\",\n                follow: <b>PAYMENT SMS</b>\n            }, {\n                key: \"payment_sms_text\",\n                placeholder: \"Payment SMS Text\",\n                initialValue: this.state.data ? this.state.data.payment_sms_text : null,\n                minRows: 4,\n                type: SMS_FIELD,\n                options: APPOINTMENT_CONFIRMATION_SMS_TAG_OPTIONS\n            }, {\n                key: \"promo_code_text\",\n                initialValue: this.state.data ? this.state.data.promo_code_text : false,\n                type: LABEL_FIELD,\n                extra: \"This SMS is sent to the Patient when payment is received.\",\n                follow: <b>PROMO CODE SMS TEXT</b>\n            }, {\n                key: \"promo_code_text\",\n                placeholder: \"Promo Code  SMS Text\",\n                initialValue: this.state.data ? this.state.data.payment_sms_text : null,\n                minRows: 4,\n                type: SMS_FIELD,\n                options: PROMO_CODE_SMS_TAG_OPTIONS\n            },\n            {\n                key: \"lab_order_confirmation_sms\",\n                initialValue: this.state.data ? this.state.data.lab_order_confirmation_sms : false,\n                type: SINGLE_CHECKBOX_FIELD,\n                extra: \"This SMS is sent to the Patient when he is prescribed a lab order.\",\n                follow: <b>LAB ORDER CONFIRMATION SMS</b>\n            }, {\n                key: \"lab_order_confirmation_text\",\n                placeholder: \"Lab Order Confirmation SMS Text\",\n                initialValue: this.state.data ? this.state.data.lab_order_confirmation_text : null,\n                minRows: 4,\n                type: SMS_FIELD,\n                options: APPOINTMENT_CONFIRMATION_SMS_TAG_OPTIONS\n            }, {\n                key: \"lab_order_due_on_sms\",\n                placeholder: \"Lab Order Due On SMS Text\",\n                initialValue: this.state.data ? this.state.data.lab_order_due_on_sms : false,\n                extra: \"This SMS is sent to the Patient informing lab order due date\",\n                type: SINGLE_CHECKBOX_FIELD,\n                follow: <b>LAB ORDER DUE ON SMS</b>\n            }, {\n                key: \"lab_order_result_sms\",\n                initialValue: this.state.data ? this.state.data.lab_order_result_sms : false,\n                extra: \"This SMS is sent to the Patient when lab order results are ready\",\n                type: SINGLE_CHECKBOX_FIELD,\n                follow: <b>LAB ORDER RESULT SMS</b>\n            }, {\n                key: \"lab_order_reminder_sms\",\n                initialValue: this.state.data ? this.state.data.lab_order_reminder_sms : false,\n                type: SINGLE_CHECKBOX_FIELD,\n                extra: \"This reminder SMS is sent to the Patient\",\n                follow: <b>LAB ORDER REMINDER SMS</b>\n            },];\n        const formProp = {\n            successFn: function (data) {\n                displayMessage(SUCCESS_MSG_TYPE, \"success\");\n                that.loadData();\n            },\n            errorFn: function () {\n\n            },\n            action: interpolate(COMMUNICATONS_API, [that.props.active_practiceId]),\n            method: \"post\",\n        };\n        const defaultValues = [\n            {\"key\": \"practice\", \"value\": this.props.active_practiceId},\n            {\"key\": \"id\", \"value\": this.state.data ? this.state.data.id : null},\n            {\"key\": \"sms_language\", \"value\": this.state.language}\n        ];\n\n        const TestFormLayout = Form.create()(DynamicFieldsForm);\n        return <div>\n            <Row>\n                <Col span={8}>\n                    <span style={{float: 'right', color: 'rgba(0, 0, 0, 0.85)'}}>SMS Language : &nbsp;</span>\n                </Col>\n                <Col span={8}>\n                    <Select\n                        defaultValue={this.data && this.data.sms_language ? this.data.sms_language : that.state.language}\n                        style={{width: 220}} onChange={(value) => this.handleChangeLanguage('language', value)}>\n                        {this.state[SMS_LANGUAGE_CONFIG_PARAM].map((option) => <Select.Option value={option}>\n                            {option}\n                        </Select.Option>)}\n                    </Select>\n                    <br/>\n                    <span>SMS to Patients will be sent in this language</span>\n                </Col>\n\n            </Row>\n\n            <TestFormLayout formProp={formProp} defaultValues={defaultValues}\n                            fields={fields} {...this.props}/>\n        </div>\n    }\n}\n\nexport default AppointmentSMS;\n","import React from \"react\";\nimport DynamicFieldsForm from \"../../../common/DynamicFieldsForm\";\nimport {Form} from \"antd\";\nimport {\n    DIVIDER_FIELD,\n    SUCCESS_MSG_TYPE,\n    SINGLE_CHECKBOX_FIELD, TIME_PICKER, MAIL_TEMPLATE_FIELD, INPUT_FIELD, SINGLE_IMAGE_UPLOAD_FIELD\n} from \"../../../../constants/dataKeys\";\nimport {EMAIL_COMMUNICATONS_API} from \"../../../../constants/api\"\nimport {getAPI, displayMessage, interpolate} from \"../../../../utils/common\";\nimport moment from \"moment/moment\";\nimport {APPOINTMENT_CONFIRMATION_SMS_TAG_OPTIONS} from \"../../../../constants/hardData\";\n\n\nclass Emails extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {};\n        this.loadData = this.loadData.bind(this);\n    }\n\n    componentDidMount() {\n        this.loadData();\n    }\n\n    loadData() {\n        var that = this;\n        let successFn = function (data) {\n            that.setState({\n                data: data[0],\n            })\n        };\n        let errorFn = function () {\n        };\n        getAPI(interpolate(EMAIL_COMMUNICATONS_API, [this.props.active_practiceId]), successFn, errorFn);\n    }\n\n    render() {\n        let that = this;\n        const fields = [{\n            label: \"Contact Number\",\n            key: \"contact_number\",\n            placeholder: \"Contact Number\",\n            initialValue: this.state.data ? this.state.data.contact_number : ' ',\n            extra: \"Maximum 15 characters & represented as {{CLINICCONTACTNUMBER}}\",\n            type: INPUT_FIELD\n        }, {\n            label: \"Email\",\n            key: \"email\",\n            placeholder: \"Email Address\",\n            initialValue: this.state.data ? this.state.data.email : ' ',\n            extra: \"All replies by Patients for emails will be sent to this address\",\n            type: INPUT_FIELD\n        },{\n            label: \"SMS clinic Name\",\n            key: \"email_clinic_name\",\n            placeholder: \"Clinic Name\",\n            initialValue: this.state.data ? this.state.data.email_clinic_name : ' ',\n            extra: \"{{CLINIC}} will use this name.\",\n            type: INPUT_FIELD,\n        },{\n            label:'Clinic Logo',\n            key:'clinic_logo',\n            // initialValue: this.state.data ? this.state.data.clinic_logo : ' ',\n            type:SINGLE_IMAGE_UPLOAD_FIELD\n        },{\n            key: \"appointment_confirmation_email\",\n            initialValue: this.state.data ? this.state.data.appointment_confirmation_email : false,\n            type: SINGLE_CHECKBOX_FIELD,\n            follow: <b>APPOINTMENT CONFIRMATION EMAIL</b>,\n            options: [],\n            extra: \"Email is sent to the Patient on successfully adding an appointment\"\n        }, {\n            key: \"appointment_confirmation_email_text\",\n            initialValue: this.state.data ? this.state.data.appointment_confirmation_email_text : '',\n            type: MAIL_TEMPLATE_FIELD,\n            options: APPOINTMENT_CONFIRMATION_SMS_TAG_OPTIONS,\n        }, {\n            type: DIVIDER_FIELD\n        }, {\n            key: \"appointment_cancellation_email\",\n            initialValue: this.state.data ? this.state.data.appointment_cancellation_email : false,\n            type: SINGLE_CHECKBOX_FIELD,\n            follow: <b>APPOINTMENT CANCELLATION EMAIL</b>,\n            extra: \"Email is sent to the Patient when the appointment is cancelled\"\n        }, {\n            key: \"appointment_cancellation_email_text\",\n            initialValue: this.state.data ? this.state.data.appointment_cancellation_email_text : '',\n            type: MAIL_TEMPLATE_FIELD,\n            options: APPOINTMENT_CONFIRMATION_SMS_TAG_OPTIONS,\n        }, {\n            type: DIVIDER_FIELD\n        }, {\n            key: \"appointment_reminder_email\",\n            initialValue: this.state.data ? this.state.data.appointment_reminder_email : false,\n            type: SINGLE_CHECKBOX_FIELD,\n            follow: <b>APPOINTMENT REMINDER EMAIL</b>,\n            extra: \"Email is sent to the Patient on the morning of the appointment date\"\n        }, {\n            key: \"send_on_day_of_appointment\",\n            initialValue: this.state.data ? this.state.data.send_on_day_of_appointment : false,\n            type: SINGLE_CHECKBOX_FIELD,\n            follow: \"Send reminder SMS on the day of appointment at 7:30 AM\",\n        }, {\n            key: \"send_before_day_of_appointment\",\n            initialValue: this.state.data ? this.state.data.send_before_day_of_appointment : false,\n            follow: \"Send reminder SMS on the day before the appointment at\",\n            type: SINGLE_CHECKBOX_FIELD,\n        }, {\n            key: \"send_on_day_of_appointment_time\",\n            initialValue: this.state.data && moment(this.state.data.send_on_day_of_appointment_time).isValid() ? moment(this.state.data.send_on_day_of_appointment_time) : null,\n            type: TIME_PICKER\n        },\n        //     {\n        //     key: \"appointment_cancellation_email_text\",\n        //     initialValue: this.state.data ? this.state.data.appointment_cancellation_email_text : '',\n        //     type: MAIL_TEMPLATE_FIELD,\n        //     options: APPOINTMENT_CONFIRMATION_SMS_TAG_OPTIONS,\n        // },\n            {\n            type: DIVIDER_FIELD\n        }, {\n            key: \"followup_reminder_email\",\n            initialValue: this.state.data ? this.state.data.followup_reminder_email : false,\n            type: SINGLE_CHECKBOX_FIELD,\n            follow: <b>FOLLOW-UP REMINDER EMAIL</b>,\n            extra: \"Email is sent to the Patient on the morning of their planned follow-up date\"\n        }, {\n            key: \"appointment_reminder_email_text\",\n            initialValue: this.state.data ? this.state.data.appointment_reminder_email_text : '',\n            type: MAIL_TEMPLATE_FIELD,\n            options: APPOINTMENT_CONFIRMATION_SMS_TAG_OPTIONS,\n        }, {\n            type: DIVIDER_FIELD\n        }, {\n            key: \"birthday_wish_email\",\n            initialValue: this.state.data ? this.state.data.birthday_wish_email : false,\n            type: SINGLE_CHECKBOX_FIELD,\n            follow: <b>BIRTHDAY WISH EMAIL</b>,\n            extra: \"Email is sent to the Patient on the morning of their birthday\"\n        }, {\n            key: \"birthday_wish_email_text\",\n            initialValue: this.state.data ? this.state.data.birthday_wish_email_text : '',\n            type: MAIL_TEMPLATE_FIELD,\n            options: APPOINTMENT_CONFIRMATION_SMS_TAG_OPTIONS,\n        }, {\n            type: DIVIDER_FIELD\n        }, {\n            key: \"lab_order_confirmation_email\",\n            initialValue: this.state.data ? this.state.data.lab_order_confirmation_email : false,\n            type: SINGLE_CHECKBOX_FIELD,\n            follow: <b>LAB ORDER CONFIRMATION EMAIL</b>,\n            extra: \"Email is sent to the Patient when he is prescribed a Lab Order\"\n        }, {\n            key: \"lab_order_confirmation_email_text\",\n            initialValue: this.state.data ? this.state.data.lab_order_confirmation_email_text : '',\n            type: MAIL_TEMPLATE_FIELD,\n            options: APPOINTMENT_CONFIRMATION_SMS_TAG_OPTIONS,\n        }, {\n            type: DIVIDER_FIELD\n        }, {\n            key: \"lab_order_due_date_email\",\n            initialValue: this.state.data ? this.state.data.lab_order_due_date_email : false,\n            type: SINGLE_CHECKBOX_FIELD,\n            follow: <b>LAB ORDER DUE DATE EMAIL</b>,\n            extra: \"Email is sent to the Patient when due date is entered for a Lab Order\"\n        }, {\n            key: \"lab_order_due_date_email_text\",\n            initialValue: this.state.data ? this.state.data.lab_order_due_date_email_text : '',\n            type: MAIL_TEMPLATE_FIELD,\n            options: APPOINTMENT_CONFIRMATION_SMS_TAG_OPTIONS,\n        }, {\n            type: DIVIDER_FIELD\n        }, {\n            key: \"lab_order_result_email\",\n            initialValue: this.state.data ? this.state.data.lab_order_result_email : false,\n            type: SINGLE_CHECKBOX_FIELD,\n            follow: <b>LAB ORDER RESULT EMAIL</b>,\n            extra: \"Email is sent to the Patient when result for a Lab Order is ready\"\n        }, {\n            key: \"alab_order_result_email_text\",\n            initialValue: this.state.data ? this.state.data.alab_order_result_email_text : '',\n            type: MAIL_TEMPLATE_FIELD,\n            options: APPOINTMENT_CONFIRMATION_SMS_TAG_OPTIONS,\n        }, {\n            type: DIVIDER_FIELD\n        }, {\n            key: \"anniversary_wish_email\",\n            initialValue: this.state.data ? this.state.data.anniversary_wish_email : false,\n            type: SINGLE_CHECKBOX_FIELD,\n            follow: <b>ANNIVERSARY WISH EMAIL</b>,\n            extra: \"Email is sent to the Patient on the morning of their anniversary\"\n        }, {\n            key: \"anniversary_wish_email_text\",\n            initialValue: this.state.data ? this.state.data.anniversary_wish_email_text : '',\n            type: MAIL_TEMPLATE_FIELD,\n            options: APPOINTMENT_CONFIRMATION_SMS_TAG_OPTIONS,\n        }];\n\n        const formProp = {\n            successFn: function (data) {\n                displayMessage(SUCCESS_MSG_TYPE, \"Communication Settings Saved Successfully!!\");\n                console.log(\"form\",data);\n            },\n            errorFn: function () {\n\n            },\n            action: interpolate(EMAIL_COMMUNICATONS_API, [that.props.active_practiceId]),\n            method: \"post\",\n        };\n\n        const defaultValues = [{\"key\": \"practice\", \"value\": this.props.active_practiceId, \"is_active\": false}, {\n            \"key\": \"id\",\n            \"value\": this.state.data ? this.state.data.id : null,\n        }];\n\n        const TestFormLayout = Form.create()(DynamicFieldsForm);\n        return <div>\n            <TestFormLayout formProp={formProp} defaultValues={defaultValues}\n                            fields={fields} {...this.props}/>\n        </div>\n    }\n}\n\nexport default Emails;\n","import React from \"react\";\nimport {Form, Button, Card, Icon, Tabs, Divider, Tag, Row, Table} from \"antd\";\nimport WishSMS from \"./WishSMS\";\nimport AppointmentSMS from \"./AppointmentSMS\";\nimport Emails from \"./Emails\";\n\n\nconst TabPane = Tabs.TabPane;\n\n\nclass CommunicationSettings extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            // loading:false\n        }\n    }\n\n    render() {\n        return <div>\n            <Row>\n                <h2>Communication Settings</h2>\n                <Card>\n                    <Tabs defaultActiveKey=\"appointmentsms\">\n                        <TabPane tab={<span><Icon type=\"schedule\"/>Appointment & FollowUp SMS</span>}\n                                 key=\"appointmentsms\">\n                            <AppointmentSMS {...this.props}/>\n                        </TabPane>\n                        <TabPane tab={<span><Icon type=\"mail\"/>Emails</span>} key=\"emails\">\n                            <Emails {...this.props}/>\n                        </TabPane>\n                        <TabPane tab={<span><Icon type=\"android\"/>Wish SMS</span>} key=\"wishsms\">\n                            <WishSMS {...this.props}/>\n                        </TabPane>\n                    </Tabs>\n                </Card>\n            </Row>\n        </div>\n    }\n}\n\nexport default CommunicationSettings;\n","import React from \"react\";\nimport DynamicFieldsForm from \"../../../common/DynamicFieldsForm\";\nimport {Form, Card, message} from \"antd\";\nimport {\n    CHECKBOX_FIELD,\n    SUCCESS_MSG_TYPE,\n    INPUT_FIELD,\n    RADIO_FIELD,\n    SELECT_FIELD,\n    NUMBER_FIELD\n} from \"../../../../constants/dataKeys\";\nimport {PROCEDURE_CATEGORY, PRODUCT_MARGIN, TAXES} from \"../../../../constants/api\"\nimport {getAPI, displayMessage, interpolate} from \"../../../../utils/common\";\nimport {Redirect} from \"react-router-dom\";\n\nclass EditProcedure extends React.Component {\n    constructor(props) {\n\n        super(props);\n        this.state = {\n            taxes: [],\n            procedure_category: [],\n            redirect: false,\n            productMargin: [],\n            editingProcedureData: this.props.editingProcedureData,\n            loading: true\n        }\n        this.loadTaxes = this.loadTaxes.bind(this);\n        this.loadProcedures = this.loadProcedures.bind(this)\n        this.loadTaxes();\n        this.loadProductMargin();\n    }\n\n    loadProductMargin() {\n        let that = this;\n        let successFn = function (data) {\n            that.setState({\n                productMargin: data,\n                loading: false\n            })\n        }\n        let errorFn = function () {\n\n        }\n        getAPI(PRODUCT_MARGIN, successFn, errorFn);\n    }\n\n    changeRedirect() {\n        var redirectVar = this.state.redirect;\n        this.setState({\n            redirect: !redirectVar,\n        });\n    }\n\n    componentDidMount() {\n        this.setState({\n            procedure_category: this.props.procedure_category,\n\n        })\n        if (this.props.match.params.id != null) {\n\n\n            //     this.loadProcedures(this.props.match.params.id);\n\n        }\n    }\n\n    loadProcedures(id) {\n        var that = this;\n        var url = `${interpolate(PROCEDURE_CATEGORY, [this.props.active_practiceId])}`;\n\n        let successFn = function (data) {\n            console.log(\"get table\", data);\n            that.setState({\n                procedure_category: data,\n                loading: false\n            })\n        };\n        let errorFn = function () {\n            this.setState({\n                loading: false\n            })\n        };\n\n        getAPI(url, successFn, errorFn);\n    }\n\n    loadTaxes() {\n        let that = this;\n        let successFn = function (data) {\n            console.log(data.map(tax => Object.create({\n                    label: tax.name + (tax.tax_value ? \"(\" + tax.tax_value + \"%)\" : ''),\n                    value: tax.id\n                })\n            ));\n            that.setState({\n                taxes: data\n            })\n        }\n        let errorFn = function () {\n        }\n        getAPI(interpolate(TAXES, [this.props.active_practiceId]), successFn, errorFn);\n    }\n\n    render() {\n        let that = this;\n        const formFields = [{\n            label: \"Procedure Name\",\n            key: \"name\",\n            required: true,\n            initialValue: this.state.editingProcedureData ? this.state.editingProcedureData.name : null,\n            type: INPUT_FIELD\n        }, {\n            label: \"Procedure Cost\",\n            key: \"cost\",\n            follow: \"INR\",\n            initialValue: this.state.editingProcedureData ? this.state.editingProcedureData.cost : null,\n            required: true,\n            type: NUMBER_FIELD,\n        }, {\n            label: \"Applicable Taxes\",\n            key: \"taxes\",\n            initialValue: this.state.editingProcedureData ? this.state.editingProcedureData.taxes : null,\n            type: CHECKBOX_FIELD,\n            options: this.state.taxes.map(tax => Object.create({\n                    label: tax.name + (tax.tax_value ? \"(\" + tax.tax_value + \"%)\" : ''),\n                    value: tax.id\n                })\n            )\n        },\n        //     {\n        //     label: 'MLM Margin Type',\n        //     type: SELECT_FIELD,\n        //     initialValue: (this.state.editFields ? this.state.editFields.margin : null),\n        //     key: 'margin',\n        //     required: true,\n        //     options: that.state.productMargin.map(margin => ({label: margin.name, value: margin.id}))\n        // },\n            {\n            label: \"Add Under\",\n            key: \"under\",\n            type: SELECT_FIELD,\n            options: [{\n                label: \"None\",\n                value: null\n            }].concat(this.state.procedure_category.map(procedure => Object.create({\n                label: procedure.name,\n                value: procedure.id\n            }))),\n            initialValue: this.state.editingProcedureData ? this.state.editingProcedureData.under : null,\n        }, {\n            label: \"Default Note\",\n            key: \"default_notes\",\n            initialValue: this.state.editingProcedureData ? this.state.editingProcedureData.default_notes : null,\n            type: INPUT_FIELD\n        },];\n        const formProp = {\n            successFn: function (data) {\n                displayMessage(SUCCESS_MSG_TYPE, 'success');\n                that.changeRedirect();\n                that.props.loadProcedures();\n                if (that.props.history){\n                    that.props.history.replace(\"/settings/procedures\");\n                }\n            },\n            errorFn: function () {\n\n            },\n            action: interpolate(PROCEDURE_CATEGORY, [this.props.active_practiceId]),\n            method: \"post\",\n        }\n        let defaultValues;\n        if (this.props.editingProcedureData) {\n            defaultValues = [{\"key\": \"id\", \"value\": this.props.editingProcedureData.id}];\n        }\n        const TestFormLayout = Form.create()(DynamicFieldsForm);\n        return <div>{that.props.editingProcedureData ? <Card loading={that.state.loading}>\n            <TestFormLayout {...this.props} title=\"Edit Procedure\" defaultValues={defaultValues}\n                            changeRedirect={this.changeRedirect} formProp={formProp} fields={formFields}/>\n            {this.state.redirect && <Redirect to='/settings/procedures'/>}\n        </Card> : <Redirect to='/settings/procedures'/>}\n        </div>\n    }\n}\n\nexport default EditProcedure;\n","import React from \"react\";\nimport DynamicFieldsForm from \"../../../common/DynamicFieldsForm\";\nimport {Form, Card, message} from \"antd\";\nimport {\n    CHECKBOX_FIELD,\n    SUCCESS_MSG_TYPE,\n    INPUT_FIELD,\n    RADIO_FIELD,\n    SELECT_FIELD,\n    NUMBER_FIELD\n} from \"../../../../constants/dataKeys\";\nimport {PROCEDURE_CATEGORY, PRODUCT_MARGIN, TAXES} from \"../../../../constants/api\"\nimport {getAPI, displayMessage, interpolate} from \"../../../../utils/common\";\nimport {Redirect} from \"react-router-dom\";\n\nclass AddProcedure extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            taxes: [],\n            procedure_category: [],\n            redirect: false,\n            productMargin: []\n        }\n        this.loadTaxes = this.loadTaxes.bind(this);\n        this.loadProcedures = this.loadProcedures.bind(this)\n\n    }\n    componentDidMount(){\n        this.loadTaxes();\n        this.loadProcedures();\n        this.loadProductMargin();\n    }\n\n    changeRedirect() {\n        var redirectVar = this.state.redirect;\n        this.setState({\n            redirect: !redirectVar,\n        });\n    }\n\n    loadProductMargin() {\n        let that = this;\n        let successFn = function (data) {\n            that.setState({\n                productMargin: data\n            })\n        }\n        let errorFn = function () {\n\n        }\n        getAPI(PRODUCT_MARGIN, successFn, errorFn);\n    }\n\n    loadProcedures() {\n        var that = this;\n        let successFn = function (data) {\n            console.log(\"get table\");\n            that.setState({\n                procedure_category: data,\n            })\n        };\n        let errorFn = function () {\n        };\n        getAPI(interpolate(PROCEDURE_CATEGORY, [this.props.active_practiceId]), successFn, errorFn);\n    }\n\n    loadTaxes() {\n        let that = this;\n        let successFn = function (data) {\n            console.log(data.map(tax => Object.create({\n                    label: tax.name,\n                    value: tax.id\n                })\n            ));\n            that.setState({\n                taxes: data\n            })\n        }\n        let errorFn = function () {\n        }\n        getAPI(interpolate(TAXES, [this.props.active_practiceId]), successFn, errorFn);\n    }\n\n    render() {\n        let that = this;\n        const formFields = [{\n            label: \"Procedure Name\",\n            key: \"name\",\n            placeholder:\"Procedure Name\",\n            required: true,\n            type: INPUT_FIELD\n        }, {\n            label: \"Procedure Cost\",\n            key: \"cost\",\n            follow: \"INR\",\n            required: true,\n            type: NUMBER_FIELD,\n        }, {\n            label: \"Applicable Taxes\",\n            key: \"taxes\",\n            type: CHECKBOX_FIELD,\n            options: this.state.taxes.map(tax => Object.create({\n                    label: tax.name + (tax.tax_value ? \"(\" + tax.tax_value + \"%)\" : ''),\n                    value: tax.id\n                })\n            )\n        },\n        //     {\n        //     label: 'MLM Margin Type',\n        //     type: SELECT_FIELD,\n        //     initialValue: (this.state.editFields ? this.state.editFields.margin : null),\n        //     key: 'margin',\n        //     required: true,\n        //     options: that.state.productMargin.map(margin => ({label: margin.name, value: margin.id}))\n        // },\n            {\n            label: \"Add Under\",\n            key: \"under\",\n            type: SELECT_FIELD,\n            options: [{\n                label: \"None\",\n                value: null\n            }].concat(this.state.procedure_category.map(procedure => Object.create({\n                label: procedure.name,\n                value: procedure.id\n            }))),\n            initialValue: null\n        }, {\n            label: \"Default Note\",\n            key: \"default_notes\",\n            type: INPUT_FIELD\n        },];\n        const formProp = {\n            successFn: function (data) {\n                displayMessage(SUCCESS_MSG_TYPE, 'success');\n                that.changeRedirect();\n                if (that.props.history){\n                    that.props.history.replace(\"/settings/procedures\");\n                }\n            },\n            errorFn: function () {\n\n            },\n            action: interpolate(PROCEDURE_CATEGORY, [this.props.active_practiceId]),\n            method: \"post\",\n        }\n\n        const TestFormLayout = Form.create()(DynamicFieldsForm);\n        return <div>\n            <Card>\n                <TestFormLayout title=\"Add Procedure\" changeRedirect={this.changeRedirect} formProp={formProp}\n                                {...this.props}\n                                fields={formFields}/>\n                {this.state.redirect && <Redirect to='/settings/procedures'/>}\n            </Card>\n        </div>\n    }\n}\n\nexport default AddProcedure;\n","import React from 'react';\nimport {Button, Card, Checkbox, Form, Input, InputNumber, Select} from \"antd\";\nimport {displayMessage, getAPI, interpolate, postAPI} from \"../../../../utils/common\";\nimport {PROCEDURE_CATEGORY, PRODUCT_MARGIN, TAXES} from \"../../../../constants/api\";\nimport {REQUIRED_FIELD_MESSAGE} from \"../../../../constants/messages\";\nimport {INPUT_FIELD, SUCCESS_MSG_TYPE} from \"../../../../constants/dataKeys\";\n\nclass AddorEditProcedure extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            editingProcedureData: this.props.editingProcedureData ? this.props.editingProcedureData : null,\n            taxes: [],\n            procedure_category: [],\n            redirect: false,\n            productMargin: [],\n            retail_price : 0\n        }\n        this.loadTaxes = this.loadTaxes.bind(this);\n        this.loadProcedures = this.loadProcedures.bind(this)\n    }\n\n    componentDidMount() {\n        this.loadTaxes();\n        this.loadProcedures();\n        this.loadProductMargin();\n        if(this.props.editingProcedureData){\n            this.setState({\n                retail_price : this.props.editingProcedureData.cost\n            });\n        }\n        if (this.props.history && this.props.history.location.search) {\n            let pairValueArray = this.props.history.location.search.substr(1).split('&');\n            if (pairValueArray.length) {\n                let urlInitialValue = {};\n                let {setFieldsValue} = this.props.form;\n                pairValueArray.forEach(function (item) {\n                    let keyValue = item.split('=');\n                    if (keyValue && keyValue.length == 2) {\n                        if (!isNaN(keyValue[1]) && keyValue[1].toString().indexOf('.') != -1) {\n                            urlInitialValue[keyValue[0]] = parseFloat(keyValue[1]);\n                            setFieldsValue({\n                                [keyValue[0]]: parseFloat(keyValue[1])\n                            })\n                        } else if (!isNaN(keyValue[1])) {\n                            urlInitialValue[keyValue[0]] = parseInt(keyValue[1]);\n                            setFieldsValue({\n                                [keyValue[0]]: parseInt(keyValue[1])\n                            })\n                        } else {\n                            urlInitialValue[keyValue[0]] = keyValue[1];\n                            setFieldsValue({\n                                [keyValue[0]]: keyValue[1]\n                            })\n                        }\n                    }\n                });\n            }\n        }\n    }\n\n    loadProductMargin() {\n        let that = this;\n        let successFn = function (data) {\n            that.setState({\n                productMargin: data\n            })\n        }\n        let errorFn = function () {\n\n        }\n        getAPI(PRODUCT_MARGIN, successFn, errorFn);\n    }\n\n\n    loadProcedures() {\n        let that = this;\n        let successFn = function (data) {\n            that.setState({\n                procedure_category: data,\n            })\n        };\n        let errorFn = function () {\n        };\n        getAPI(interpolate(PROCEDURE_CATEGORY, [this.props.active_practiceId]), successFn, errorFn,{pagination:false});\n    }\n\n    loadTaxes() {\n        let that = this;\n        let successFn = function (data) {\n            that.setState({\n                taxes: data\n            })\n        }\n        let errorFn = function () {\n        }\n        getAPI(interpolate(TAXES, [this.props.active_practiceId]), successFn, errorFn);\n    }\n\n    changeNetPrice = (value) => {\n        let that = this;\n        const {getFieldsValue, setFields} = this.props.form;\n        setTimeout(function () {\n            let values = getFieldsValue();\n            if (values.cost_with_tax) {\n                let totalTaxAmount = 0;\n                values.taxes.forEach(function (taxid) {\n                    that.state.taxes.forEach(function (taxObj) {\n                        if (taxObj.id == taxid)\n                            totalTaxAmount += taxObj.tax_value;\n                    })\n                });\n                let retailPrice = values.cost_with_tax / (1 + totalTaxAmount * 0.01);\n                that.setState({\n                    retail_price: retailPrice.toFixed(2)\n                })\n            } else {\n                that.setState({\n                    retail_price: 0\n                })\n            }\n        }, 1000);\n\n    }\n\n    handleSubmit = (e) => {\n        let that = this;\n        e.preventDefault();\n        this.props.form.validateFields((err, values) => {\n            if (!err) {\n                let reqData = {\n                    ...values,\n                    cost: that.state.retail_price\n                }\n                let successFn = function (data) {\n                    displayMessage(SUCCESS_MSG_TYPE, 'Procedure Updated Successfully!!');\n                    if (that.props.loadData)\n                        that.props.loadData();\n                    that.props.history.replace(\"settings/procedures\");\n                }\n                let errorFn = function () {\n\n                }\n                if(this.state.editingProcedureData){\n                    reqData.id = this.state.editingProcedureData.id\n                }\n                postAPI(interpolate(PROCEDURE_CATEGORY, [this.props.active_practiceId]), reqData, successFn, errorFn)\n            }\n        })\n    }\n\n    render() {\n        let that = this;\n        const formItemLayout = ({\n            labelCol: {span: 8},\n            wrapperCol: {span: 14},\n        });\n        const {getFieldDecorator} = this.props.form;\n        return <div>\n            <Card>\n                <Form onSubmit={this.handleSubmit}>\n                    <h2>{this.state.editingProcedureData ? \"Edit Procedures\" : \"Add Procedures\"}</h2>\n                    <Form.Item label=\"Procedure Name\" {...formItemLayout}>\n                        {getFieldDecorator('name', {\n                            initialValue: this.state.editingProcedureData ? this.state.editingProcedureData.name : null,\n                            rules: [{required: true, message: REQUIRED_FIELD_MESSAGE}]\n                        })\n                        (<Input placeholder=\"Procedure Name\"/>)\n                        }\n                    </Form.Item>\n                    <Form.Item label=\"Procedure Net Price\" {...formItemLayout}>\n                        {getFieldDecorator('cost_with_tax', {\n                            initialValue: this.state.editingProcedureData ? this.state.editingProcedureData.cost_with_tax : null,\n                            rules: [{\n                                required: true,\n                                message: REQUIRED_FIELD_MESSAGE\n                            }]\n                        })\n                        (<InputNumber onChange={this.changeNetPrice}/>)\n                        }<span className=\"ant-form-text\">INR</span>\n                    </Form.Item>\n                    <Form.Item label=\"Tax\" {...formItemLayout}>\n                        {getFieldDecorator('taxes', {initialValue: this.state.editingProcedureData && this.state.editingProcedureData.taxes? this.state.editingProcedureData.taxes.map(item => item.id) : []})\n                        (<Checkbox.Group onChange={this.changeNetPrice}>\n                            {this.state.taxes.map((tax) => <Checkbox\n                                value={tax.id}>{tax.name + (tax.tax_value ? \"(\" + tax.tax_value + \"%)\" : '')}\n                            </Checkbox>)}\n                        </Checkbox.Group>)\n                        }\n                    </Form.Item>\n                    <Form.Item label=\"Procedure Retail Price\" {...formItemLayout}>\n                        <span className=\"ant-form-text\"><b>{that.state.retail_price}</b>&nbsp;INR</span>\n                    </Form.Item>\n                    <Form.Item key={\"margin\"} {...formItemLayout} label={\"MLM Margin\"}>\n                        {getFieldDecorator(\"margin\", {\n                            initialValue: this.state.editingProcedureData && this.state.editingProcedureData.margin ? this.state.editingProcedureData.margin.id : null,\n                        })(\n                            <Select>\n                                {this.state.productMargin.map((option) => <Select.Option\n                                    value={option.id}>{option.name}</Select.Option>)}\n                            </Select>\n                        )}\n                    </Form.Item>\n                    <Form.Item key={\"under\"} {...formItemLayout} label={\"Add Under\"}>\n                        {getFieldDecorator(\"under\", {\n                            initialValue: this.state.editingProcedureData ? this.state.editingProcedureData.under : null,\n                        })(\n                            <Select>\n                                {this.state.procedure_category.map((option) => <Select.Option\n                                    value={option.id}>{option.name}</Select.Option>)}\n                            </Select>\n                        )}\n                    </Form.Item>\n                    <Form.Item label=\"Default Note\" {...formItemLayout}>\n                        {getFieldDecorator('default_notes', {\n                            initialValue: this.state.editingProcedureData ? this.state.editingProcedureData.default_notes : null,\n                            rules: [{required: true, message: REQUIRED_FIELD_MESSAGE}]\n                        })\n                        (<Input placeholder=\"Default Note\"/>)\n                        }\n                    </Form.Item>\n                    <Form.Item>\n                        <Button style={{margin: 5}} type=\"primary\" htmlType=\"submit\">\n                            Submit\n                        </Button>\n                        {that.props.history ?\n                            <Button style={{margin: 5}} onClick={() => that.props.history.goBack()}>\n                                Cancel\n                            </Button> : null}\n                    </Form.Item>\n                </Form>\n            </Card>\n        </div>\n    }\n}\n\nexport default Form.create()(AddorEditProcedure);\n","import React from \"react\";\nimport {Button, Card, Icon, Tabs, Divider, Tag, Row, Table, Popconfirm, Input} from \"antd\";\nimport {PROCEDURE_CATEGORY} from \"../../../../constants/api\"\nimport {Route, Link, Switch} from \"react-router-dom\";\nimport {getAPI, interpolate, postAPI} from \"../../../../utils/common\";\nimport EditProcedure from \"./EditProcedure\";\nimport PermissionDenied from \"../../../common/errors/PermissionDenied\";\nimport CustomizedTable from \"../../../common/CustomizedTable\";\nimport AddProcedure from \"./AddProcedure\";\nimport AddorEditProcedure from \"./AddorEditProcedure\";\nimport {Redirect} from \"react-router\";\nimport InfiniteFeedLoaderButton from \"../../../common/InfiniteFeedLoaderButton\";\n\n\nconst {Column, ColumnGroup} = Table;\nconst TabPane = Tabs.TabPane;\n\nclass RecentProcedure extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            current: 'staff',\n            procedure_category: null,\n            editingProcedureData: null,\n            loading: true\n        };\n        this.loadProcedures = this.loadProcedures.bind(this);\n    }\n\n    componentDidMount() {\n        this.loadProcedures();\n    }\n\n    loadProcedures(page = 1) {\n        var that = this;\n        let params = {\n            page\n        }\n        if (this.state.searchString) {\n            params.name = this.state.searchString\n        }\n        let successFn = function (data) {\n            if (data.current == 1 && that.state.searchString == params.name)\n                that.setState({\n                    procedure_category: data.results,\n                    next: data.next,\n                    loading: false\n                })\n            else\n                that.setState(function (prevState) {\n                    return {\n                        procedure_category: [...prevState.procedure_category, ...data.results],\n                        next: data.next,\n                        loading: false\n                    }\n                })\n        };\n        let errorFn = function () {\n        };\n\n        getAPI(interpolate(PROCEDURE_CATEGORY, [this.props.active_practiceId]), successFn, errorFn, params);\n    }\n\n\n    handleClick = (e) => {\n        this.setState({\n            current: e.key,\n        });\n    }\n\n    deleteObject(record) {\n        let that = this;\n        let reqData = {\n            id: record.id,\n            is_active: false\n        };\n        reqData.is_active = false;\n        let successFn = function (data) {\n            that.loadProcedures();\n        }\n        let errorFn = function () {\n        };\n        postAPI(interpolate(PROCEDURE_CATEGORY, [this.props.active_practiceId]), reqData, successFn, errorFn)\n    }\n\n    editProcedure(record) {\n        this.setState({\n            editingProcedureData: record,\n            loading: false\n        });\n        let url = '/settings/procedures/' + record.id + '/editprocedure';\n        this.props.history.push(url);\n\n    }\n\n    changeSearchValue = (value) => {\n        this.setState({\n            searchString: value\n        }, function () {\n            this.loadProcedures();\n        })\n    }\n\n    render() {\n        let that = this;\n        let columns = [{\n            title: \"Procedure Name\",\n            dataIndex: \"name\",\n            key: \"name\",\n        }, {\n            title: \"Procedure Unit Cost\",\n            dataIndex: \"cost_with_tax\",\n            key: \"cost\"\n        }, {\n            title: \"MLM Margin\",\n            dataIndex: \"margin\",\n            key: \"margin\",\n            render: (taxes) => (\n                <span>{taxes ? taxes.name : null}\n                </span>)\n        }, {\n            title: \"Applicable Taxes\",\n            dataIndex: \"taxes\",\n            key: \"taxes\",\n            render: (taxes) => (\n                <span>\n                                    {taxes && taxes.length ? taxes.map(tax =>\n                                        <Tag> {tax.name}|<b>{tax.tax_value}%</b></Tag>) : null}\n                                    </span>\n            )\n        }, {\n            title: \"Standard Notes\",\n            dataIndex: \"default_notes\",\n            key: \"default_notes\"\n        }, {\n            title: \"Action\",\n            key: \"action\",\n            render: (text, record) => (\n                <span>\n                    <Link\n                        to={\"/settings/procedures/addprocedure?under=\" + record.id}>Add SubCategory</Link>\n                        <Divider type=\"vertical\"/>\n                        <a onClick={() => this.editProcedure(record)}>Edit</a>\n                        <Divider type=\"vertical\"/>\n                        <Popconfirm title=\"Are you sure delete this?\"\n                                    onConfirm={() => that.deleteObject(record)} okText=\"Yes\"\n                                    cancelText=\"No\">\n                        <a>Delete</a>\n                        </Popconfirm>\n                </span>)\n        }];\n        return <Switch>\n            <Route path=\"/settings/procedures/addprocedure\"\n                   render={(route) => (this.props.activePracticePermissions.SettingsProcedureCatalog || this.props.allowAllPermissions ?\n                           <AddorEditProcedure  {...this.props} {...route} loadData={this.loadProcedures}/> :\n                           <PermissionDenied/>\n                   )}/>\n            <Route exact path=\"/settings/procedures/:id/editprocedure\"\n                   render={(route) => (that.props.activePracticePermissions.SettingsProcedureCatalog || that.props.allowAllPermissions ?\n                           (that.state.editingProcedureData ?\n                               <AddorEditProcedure  {...this.state} {...this.props} {...route}\n                                                    loadData={this.loadProcedures}/> :\n                               <Redirect to={\"/settings/procedures\"}/>) : <PermissionDenied/>\n                   )}/>\n            <Route>\n                <Row>\n                    <h2>Procedures Catalog\n                        <Link to=\"/settings/procedures/addprocedure\">\n                            <Button type=\"primary\" style={{float: 'right'}}>\n                                <Icon type=\"plus\"/>&nbsp;Add Procedure\n                            </Button>\n                        </Link>\n                    </h2>\n                    <Card>\n                        <div className=\"row mar-b-10\">\n                            <div className=\"col-md-12\">\n                                <Input onChange={(e) => this.changeSearchValue(e.target.value)}\n                                       value={this.state.searchString} style={{width: 200}}\n                                       placeholder=\"Search Procedure...\"/>\n                            </div>\n                        </div>\n                        <Table columns={columns}\n                               pagination={false}\n                               dataSource={this.state.procedure_category}/>\n                        <InfiniteFeedLoaderButton loading={this.state.loading} hidden={!this.state.next}\n                                                  loaderFunction={() => this.loadProcedures(this.state.next)}/>\n\n                    </Card>\n                </Row>\n            </Route>\n        </Switch>\n    }\n}\n\nexport default RecentProcedure;\n","import React from \"react\";\nimport DynamicFieldsForm from \"../../../common/DynamicFieldsForm\";\nimport {Button, Modal, Form, Table, Divider, Popconfirm} from \"antd\";\nimport {\n    SUCCESS_MSG_TYPE,\n    INPUT_FIELD,\n    NUMBER_FIELD,\n    SELECT_FIELD\n} from \"../../../../constants/dataKeys\";\nimport {PAYMENT_MODES} from \"../../../../constants/api\"\nimport {getAPI, displayMessage, interpolate, postAPI} from \"../../../../utils/common\";\nimport {PAYMENT_TYPES} from \"../../../../constants/hardData\";\nimport CustomizedTable from \"../../../common/CustomizedTable\";\n\nclass PaymentModes extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            redirect: false,\n            visible: false,\n            modes: null,\n        }\n        this.loadData = this.loadData.bind(this);\n    }\n\n    componentDidMount() {\n        this.loadData();\n    }\n\n    loadData() {\n        var that = this;\n        let successFn = function (data) {\n            console.log(\"get table\");\n            that.setState({\n                modes: data,\n            })\n        };\n        let errorFn = function () {\n        };\n        getAPI(interpolate(PAYMENT_MODES, [this.props.active_practiceId]), successFn, errorFn);\n    }\n\n    changeRedirect() {\n        var redirectVar = this.state.redirect;\n        this.setState({\n            redirect: !redirectVar,\n        });\n    }\n\n    editPayment(value) {\n        this.setState({\n            editingId: value.id,\n            editingmode: value.mode,\n            editingType: value.payment_type,\n            editingFee: value.fee,\n            visible: true,\n        })\n    }\n\n    handleCancel = () => {\n        this.setState({visible: false});\n    }\n\n    deleteObject(record) {\n        let that = this;\n        let reqData = record;\n        reqData.is_active = false;\n        let successFn = function (data) {\n            that.loadData();\n        }\n        let errorFn = function () {\n        };\n        postAPI(interpolate(PAYMENT_MODES, [this.props.active_practiceId]), reqData, successFn, errorFn)\n    }\n\n    render() {\n        let that = this;\n        const columns = [{\n            title: 'Mode of Payment',\n            placeholder:\"\",\n            dataIndex: 'mode',\n            key: 'mode',\n        }, {\n            title: 'Payment Type',\n            dataIndex: 'payment_type',\n            key: 'payment_type',\n        }, {\n            title: 'Fees',\n            dataIndex: 'fee',\n            key: 'fee',\n            render: (text, record) => (<span>{text} %</span>)\n        }, {\n            title: 'Action',\n            key: 'action',\n            render: (text, record) => (\n                <span>\n              <a onClick={() => this.editPayment(record)}>Edit</a>\n                    <Divider type=\"vertical\"/>\n                    <Popconfirm title=\"Are you sure delete this payment mode?\"\n                                onConfirm={() => that.deleteObject(record)} okText=\"Yes\" cancelText=\"No\">\n                      <a>Delete</a>\n                  </Popconfirm>\n              </span>\n            ),\n        }];\n        const fields = [{\n            label: \"Mode of payment\",\n            key: \"mode\",\n            required: true,\n            type: INPUT_FIELD\n        }, {\n            label: \"Payment Type\",\n            key: \"payment_type\",\n            required: true,\n            type: SELECT_FIELD,\n            options: PAYMENT_TYPES\n        }, {\n            label: \"Vendor Fee\",\n            key: \"fee\",\n            required: true,\n            type: NUMBER_FIELD,\n            min: 0,\n            follow: '%'\n        },];\n        const editfields = [{\n            label: \"Mode of payment\",\n            key: \"mode\",\n            required: true,\n            initialValue: this.state.editingmode,\n            type: INPUT_FIELD\n        }, {\n            label: \"Payment Type\",\n            key: \"payment_type\",\n            required: true,\n            initialValue: this.state.editingType,\n            type: SELECT_FIELD,\n            options: PAYMENT_TYPES\n        }, {\n            label: \"Vendor Fee\",\n            key: \"fee\",\n            required: true,\n            initialValue: this.state.editingFee,\n            type: NUMBER_FIELD,\n            min: 0,\n            follow: '%'\n        },];\n        const formProp = {\n            successFn: function (data) {\n                that.handleCancel();\n                that.loadData();\n                console.log(data);\n                console.log(\"sucess\");\n                displayMessage(SUCCESS_MSG_TYPE, \"sucess\")\n            },\n            errorFn: function () {\n\n            },\n            action: interpolate(PAYMENT_MODES, [this.props.active_practiceId]),\n            method: \"post\",\n        }\n        const defaultValues = [{\"key\": \"practice\", \"value\": this.props.active_practiceId}];\n        const editFormDefaultValues = [{\"key\": \"practice\", \"value\": this.props.active_practiceId}, {\n            \"key\": \"id\",\n            \"value\": this.state.editingId\n        }];\n\n        const TestFormLayout = Form.create()(DynamicFieldsForm);\n        return <div>\n            <TestFormLayout defaultValues={defaultValues} formProp={formProp} fields={fields} {...this.props}/>\n            <Divider/>\n            <CustomizedTable columns={columns} dataSource={this.state.modes}/>\n            <Modal\n                title=\"Edit Payment Mode\"\n                visible={this.state.visible}\n                footer={null}\n                onCancel={this.handleCancel}\n            >\n                <TestFormLayout defaultValues={editFormDefaultValues} formProp={formProp} fields={editfields}/>\n                <Button key=\"back\" onClick={this.handleCancel}>Return</Button>\n            </Modal>\n        </div>\n    }\n}\n\nexport default PaymentModes;\n","import React from \"react\";\nimport DynamicFieldsForm from \"../../../common/DynamicFieldsForm\";\nimport {Button, Modal, Card, Form, Icon, Row, Table, Divider, Popconfirm} from \"antd\";\nimport {\n    SUCCESS_MSG_TYPE,\n    CHECKBOX_FIELD,\n    INPUT_FIELD,\n    RADIO_FIELD,\n    NUMBER_FIELD,\n    SELECT_FIELD\n} from \"../../../../constants/dataKeys\";\nimport {PAYMENT_MODES, TAXES} from \"../../../../constants/api\"\nimport {Link} from \"react-router-dom\";\nimport {getAPI, displayMessage, interpolate, postAPI} from \"../../../../utils/common\";\nimport CustomizedTable from \"../../../common/CustomizedTable\";\n\nclass TaxCatalog extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            redirect: false,\n            visible: false,\n            taxes: null,\n            loading:true\n        };\n        this.loadData = this.loadData.bind(this);\n        this.deleteObject = this.deleteObject.bind(this);\n\n    }\n\n    componentDidMount() {\n        this.loadData();\n    }\n\n    loadData() {\n        var that = this;\n        let successFn = function (data) {\n            console.log(\"get table\");\n            that.setState({\n                taxes: data,\n                loading:false\n            })\n        };\n        let errorFn = function () {\n            that.setState({\n                loading:false\n            })\n        };\n        getAPI(interpolate(TAXES, [this.props.active_practiceId]), successFn, errorFn);\n    }\n\n    changeRedirect() {\n        var redirectVar = this.state.redirect;\n        this.setState({\n            redirect: !redirectVar,\n        });\n    }\n\n    editTax(value) {\n        this.setState({\n            editingId: value.id,\n            editingName: value.name,\n            editingValue: value.tax_value,\n\n            visible: true,\n        })\n    }\n\n    handleCancel = () => {\n        this.setState({visible: false});\n    }\n\n    deleteObject(record) {\n        let that = this;\n        let reqData = record;\n        reqData.is_active = false;\n        let successFn = function (data) {\n            that.loadData();\n        }\n        let errorFn = function () {\n        };\n        postAPI(interpolate(TAXES, [this.props.active_practiceId]), reqData, successFn, errorFn)\n    }\n\n    render() {\n        let that = this;\n        const columns = [{\n            title: 'Name',\n            dataIndex: 'name',\n            key: 'name',\n        }, {\n            title: 'Tax Value',\n            dataIndex: 'tax_value',\n            key: 'tax_value',\n            render: (text, record) => (<span>{text} %</span>)\n        }, {\n            title: 'Actions',\n            key: 'action',\n            render: (text, record) => (\n                <span>\n              {/*<a onClick={() => this.editTax(record)}>  Edit</a>*/}\n                {/* <Divider type=\"vertical\"/> */}\n                    <Popconfirm title=\"Are you sure delete this?\"\n                                onConfirm={() => that.deleteObject(record)} okText=\"Yes\" cancelText=\"No\">\n                      <a>Delete</a>\n                  </Popconfirm>\n              </span>\n            ),\n        }];\n        const fields = [{\n            label: \"Tax name\",\n            key: \"name\",\n            placeholder:\"Tax Name\",\n            required: true,\n            type: INPUT_FIELD\n        }, {\n            label: \"Tax Value\",\n            key: \"tax_value\",\n            follow: \"%\",\n            max: 100,\n            min: 0,\n            required: true,\n            type: NUMBER_FIELD\n        },];\n        const editfields = [{\n            label: \"Tax name\",\n            key: \"name\",\n            required: true,\n            initialValue: this.state.editingName,\n            type: INPUT_FIELD\n        }, {\n            label: \"Tax Value\",\n            key: \"tax_value\",\n            follow: \"%\",\n            max: 100,\n            min: 0,\n            required: true,\n            initialValue: this.state.editingValue,\n\n            type: NUMBER_FIELD\n        },];\n        const formProp = {\n            successFn: function (data) {\n                that.handleCancel();\n                that.loadData();\n                console.log(data);\n                console.log(\"sucess\");\n                displayMessage(SUCCESS_MSG_TYPE, \"success\")\n            },\n            errorFn: function () {\n\n            },\n            action: interpolate(TAXES, [this.props.active_practiceId]),\n            method: \"post\",\n        }\n        const defaultValues = [{\"key\": \"practice\", \"value\": this.props.active_practiceId}];\n        const editFormDefaultValues = [{\"key\": \"practice\", \"value\": this.props.active_practiceId}, {\n            \"key\": \"id\",\n            \"value\": this.state.editingId\n        }];\n        const TestFormLayout = Form.create()(DynamicFieldsForm);\n        return <div>\n            <TestFormLayout defaultValues={defaultValues} formProp={formProp} fields={fields} {...this.props}/>\n            <Divider/>\n            <CustomizedTable loading={this.state.loading} columns={columns} dataSource={this.state.taxes}/>\n            <Modal\n                title=\"Edit Tax\"\n                visible={this.state.visible}\n                footer={null}\n                onCancel={this.handleCancel}\n            >\n                <TestFormLayout defaultValues={editFormDefaultValues} formProp={formProp} fields={editfields}/>\n                <Button key=\"back\" onClick={this.handleCancel}>Return</Button>,\n\n            </Modal>\n        </div>\n    }\n}\n\nexport default TaxCatalog;\n","import React from \"react\";\nimport DynamicFieldsForm from \"../../../common/DynamicFieldsForm\";\nimport {Form} from \"antd\";\nimport {\n    CHECKBOX_FIELD,\n    INPUT_FIELD,\n    RADIO_FIELD,\n    SELECT_FIELD,\n    SINGLE_CHECKBOX_FIELD, SUCCESS_MSG_TYPE\n} from \"../../../../constants/dataKeys\";\nimport {displayMessage, getAPI, interpolate} from \"../../../../utils/common\";\nimport {PRACTICE} from \"../../../../constants/api\";\n\nclass CancelledInvoice extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            practiceDetail: {}\n        }\n    }\n\n    componentDidMount() {\n        var that = this;\n        let successFn = function (data) {\n            let countries = data.countries;\n            that.setState({\n                countries: countries,\n                practiceDetail: data,\n            })\n        };\n        let errorFn = function () {\n        };\n        getAPI(interpolate(PRACTICE, [this.props.active_practiceId]), successFn, errorFn);\n\n    }\n\n    render() {\n        const fields = [{\n            key: \"hide_cancelled_invoice\",\n            type: SINGLE_CHECKBOX_FIELD,\n            follow:<b>Hide Cancelled Invoice</b>,\n            initialValue: this.state.practiceDetail ? this.state.practiceDetail.hide_cancelled_invoice : false,\n        },{\n            key: \"hide_cancelled_return\",\n            type: SINGLE_CHECKBOX_FIELD,\n            follow:<b>Hide Cancelled Return Invoice</b>,\n            initialValue: this.state.practiceDetail ? this.state.practiceDetail.hide_cancelled_return : false,\n        }, {\n            key: \"hide_cancelled_payment\",\n            type: SINGLE_CHECKBOX_FIELD,\n            follow:<b>Hide Cancelled Payments</b>,\n            initialValue: this.state.practiceDetail ? this.state.practiceDetail.hide_cancelled_payment : false\n        }];\n        const formProp = {\n            successFn: function (data) {\n                displayMessage(SUCCESS_MSG_TYPE, \"Settings Saved Successfuly!!\");\n            },\n            errorFn: function () {\n\n            },\n            action: interpolate(PRACTICE, [this.props.active_practiceId]),\n            method: \"put\",\n        };\n        const TestFormLayout = Form.create()(DynamicFieldsForm);\n        const defaultValue = [{key: 'id', value: this.props.active_practiceId}];\n        return <div>\n            <TestFormLayout formProp={formProp} fields={fields} {...this.props} defaultValues={defaultValue}/>\n        </div>\n    }\n}\n\nexport default CancelledInvoice;\n","import React from \"react\";\nimport {Form, Button, Card, Icon, Tabs, Divider, Tag, Row, Table} from \"antd\";\nimport PaymentModes from \"./PaymentModes\";\nimport TaxCatalog from \"./TaxCatalog\";\nimport CancelledInvoice from \"./CancelledInvoice\";\n\nconst TabPane = Tabs.TabPane;\n\n\nclass BillingSettings extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            defaultActiveKey: this.props.location.hash\n        }\n    }\n\n\n    render() {\n        return <div>\n            <Row>\n                <h2>Billing</h2>\n                <Card>\n                    <Tabs defaultActiveKey={this.state.defaultActiveKey}>\n                        <TabPane tab={<span><Icon type=\"cluster\"/>Tax Catalog</span>} key=\"#taxcatalog\">\n                            <TaxCatalog {...this.state} {...this.props}/>\n                        </TabPane>\n                        <TabPane tab={<span><Icon type=\"dollar\"/>Accepted Modes of payment </span>} key=\"#paymentmodes\">\n                            <PaymentModes {...this.props}/>\n                        </TabPane>\n                        <TabPane tab={<span><Icon type=\"block\"/>Cancelled Invoice</span>} key=\"cancelledinvoice\">\n                            <CancelledInvoice {...this.state} {...this.props}/>\n                        </TabPane>\n                    </Tabs>\n\n                </Card>\n            </Row>\n        </div>\n    }\n}\n\nexport default BillingSettings;\n","import React from \"react\";\nimport DynamicFieldsForm from \"../../../common/DynamicFieldsForm\";\nimport {Button, Modal, Card, Form, Icon, Row, Table, Divider, Popconfirm} from \"antd\";\nimport {\n    CHECKBOX_FIELD,\n    SUCCESS_MSG_TYPE,\n    INPUT_FIELD,\n    RADIO_FIELD,\n    NUMBER_FIELD,\n    SELECT_FIELD\n} from \"../../../../constants/dataKeys\";\nimport {TAXES} from \"../../../../constants/api\"\nimport {Link} from \"react-router-dom\";\nimport {getAPI, displayMessage, interpolate, postAPI} from \"../../../../utils/common\";\nimport CustomizedTable from \"../../../common/CustomizedTable\";\n\nclass TableData extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            redirect: false,\n            visible: false,\n            data: null,\n            loading:true\n        }\n        this.loadData = this.loadData.bind(this);\n        this.deleteObject = this.deleteObject.bind(this);\n    }\n\n    componentDidMount() {\n        this.loadData();\n    }\n\n    loadData() {\n        var that = this;\n        let successFn = function (data) {\n            that.setState({\n                data: data,\n                loading:false\n            })\n        };\n        let errorFn = function () {\n            that.setState({\n                loading:false\n            })\n        };\n        getAPI(interpolate(this.props.id, [this.props.active_practiceId]), successFn, errorFn);\n    }\n\n    changeRedirect() {\n        var redirectVar = this.state.redirect;\n        this.setState({\n            redirect: !redirectVar,\n        });\n    }\n\n    editFunction(value) {\n        this.setState({\n            editingId: value.id,\n            editingName: value.name,\n            visible: true,\n            loading:false\n        })\n    }\n\n    handleCancel = () => {\n        this.setState({visible: false});\n    }\n\n    deleteObject(record) {\n        let that = this;\n        let reqData = record;\n        reqData.is_active = false;\n        let successFn = function (data) {\n            that.loadData();\n        }\n        let errorFn = function () {\n        };\n        postAPI(interpolate(this.props.id, [this.props.active_practiceId]), reqData, successFn, errorFn)\n    }\n\n    render() {\n        let that = this;\n        const columns = [{\n            title: 'Name',\n            dataIndex: 'name',\n            key: 'name',\n        }, {\n            title: 'Action',\n            key: 'action',\n            render: (text, record) => (\n                <span>\n              <a onClick={() => this.editFunction(record)}>  Edit</a>\n                <Divider type=\"vertical\"/>\n                    <Popconfirm title=\"Are you sure delete this item?\"\n                                onConfirm={() => that.deleteObject(record)} okText=\"Yes\" cancelText=\"No\">\n                      <a>Delete</a>\n                  </Popconfirm>\n              </span>\n            ),\n        }];\n        const fields = [{\n            label: this.props.name,\n            key: \"name\",\n            required: true,\n            type: INPUT_FIELD\n        },];\n        const editfields = [\n\n            {\n                label: this.props.name,\n                key: \"name\",\n                required: true,\n                initialValue: this.state.editingName,\n                type: INPUT_FIELD\n            },];\n        const formProp = {\n            successFn: function (data) {\n                that.handleCancel();\n                that.loadData();\n                console.log(data);\n                console.log(\"sucess\");\n                displayMessage(SUCCESS_MSG_TYPE, \"success\")\n\n            },\n            errorFn: function () {\n\n            },\n            action: interpolate(this.props.id, [this.props.active_practiceId]),\n            method: \"post\",\n        };\n        const defaultValues = [{\"key\": \"practice\", \"value\": this.props.active_practiceId}]\n        const editFormDefaultValues = [{\"key\": \"practice\", \"value\": this.props.active_practiceId}, {\n            \"key\": \"id\",\n            \"value\": this.state.editingId\n        }]\n\n        const TestFormLayout = Form.create()(DynamicFieldsForm);\n        return <div>\n            <TestFormLayout defaultValues={defaultValues} formProp={formProp} fields={fields}/>\n            <Divider/>\n            <CustomizedTable loading={this.state.loading} columns={columns} dataSource={this.state.data}/>\n            <Modal\n                title={\"Edit \" + this.props.name}\n                visible={this.state.visible}\n                footer={null}\n                onCancel={this.handleCancel}\n            >\n                <TestFormLayout defaultValues={editFormDefaultValues} formProp={formProp} fields={editfields}/>\n                <Button key=\"back\" onClick={this.handleCancel}>Return</Button>,\n\n            </Modal>\n        </div>\n    }\n}\n\nexport default TableData;\n","import React from \"react\";\nimport DynamicFieldsForm from \"../../../common/DynamicFieldsForm\";\nimport {Card, Form, Divider, Row,Popconfirm,Table} from \"antd\";\nimport {SUCCESS_MSG_TYPE,SELECT_FIELD} from \"../../../../constants/dataKeys\";\nimport {VITAL_SIGNS_API, EMR_VITAL_SIGNS} from \"../../../../constants/api\"\nimport {getAPI, interpolate, displayMessage} from \"../../../../utils/common\";\n// import CustomizedTable from \"../../../common/CustomizedTable\";\nimport {DEFAULT_TEMPERATURE_IN,DEFAULT_BP_METHOD,DEFAULT_TEMPERATURE_METHOD} from \"../../../../constants/hardData\";\n\nclass VitalSigns extends React.Component {  \n    constructor(props) {\n        super(props);\n\n        this.state = {\n            redirect: false,\n            vitalSign: null,\n        }\n        this.changeRedirect = this.changeRedirect.bind(this);\n        this.loadVitalSign =this.loadVitalSign.bind(this);\n\n    }\n    componentDidMount() {\n        this.loadVitalSign();\n    }\n\n    changeRedirect() {\n        var redirectVar = this.state.redirect;\n        this.setState({\n            redirect: !redirectVar,\n        });\n    }\n\n    loadVitalSign(){\n        let that=this;\n        let successFn =function (data){\n            that.setState({\n                vitalSign:data[data.length-1]\n            })\n        }\n        let errorFn = function(){\n            that.setState({\n\n            })\n        }\n        getAPI(interpolate(EMR_VITAL_SIGNS, [that.props.active_practiceId]), successFn, errorFn);\n    }\n\n    render() {\n        const fields = [{\n            label: \"Default temperature measurement in\",\n            key: \"temperature_unit\",\n            type: SELECT_FIELD,\n            initialValue:this.state.vitalSign ? this.state.vitalSign.temperature_unit:null,\n            options: DEFAULT_TEMPERATURE_IN.map(Temp_in => ({label: Temp_in.label, value: Temp_in.value}))\n        }, {\n            label: \"Default temperature measurement method\",\n            key: \"temperature_method\",\n            type: SELECT_FIELD,\n            initialValue:this.state.vitalSign ? this.state.vitalSign.temperature_method:null,\n            options: DEFAULT_TEMPERATURE_METHOD.map(TempMethod =>({label:TempMethod.label ,value:TempMethod.value}))\n        },{\n            label: \"Default blood pressure measurement method\",\n            key: \"blood_pressure_method\",\n            initialValue:this.state.vitalSign ? this.state.vitalSign.blood_pressure_method:null,\n            type: SELECT_FIELD,\n            options:DEFAULT_BP_METHOD.map(BPMETHOD =>({label:BPMETHOD.label , value:BPMETHOD.value}))\n        }];\n\n        let defaultValues = [{ key: 'practice', value: this.props.active_practiceId}, {\n            \"key\": \"id\",\n            \"value\": this.state.vitalSign ? this.state.vitalSign.id : null,\n        }];\n\n        const TestFormLayout = Form.create()(DynamicFieldsForm);\n    \n        const formProp = {\n            successFn: function (data) {\n                displayMessage(SUCCESS_MSG_TYPE, \"success\")\n            },\n            errorFn: function () {\n\n            },\n            action: interpolate(EMR_VITAL_SIGNS, [this.props.active_practiceId]),\n            method: \"post\",\n        }\n\n        return <Row>\n                <TestFormLayout defaultValues={defaultValues} formProp={formProp} fields={fields}/>\n        </Row>\n\n    }\n}\n\nexport default VitalSigns;\n","import React from \"react\";\nimport DynamicFieldsForm from \"../../../common/DynamicFieldsForm\";\nimport {Form, Button, Card, Icon, Tabs, Divider, Tag, Row, Table} from \"antd\";\nimport {CHECKBOX_FIELD, INPUT_FIELD, RADIO_FIELD, SELECT_FIELD} from \"../../../../constants/dataKeys\";\nimport TableData from \"./TableData\";\nimport {\n    EMR_DIAGNOSES,\n    EMR_FILETAGS,\n    EMR_COMPLAINTS,\n    EMR_OBSERVATIONS,\n    EMR_INVESTIGATIONS,\n    EMR_TREATMENTNOTES,\n    EMR_VITAL_SIGNS, EMR_MEDICATION\n} from \"../../../../constants/api\"\nimport VITALSINGS from \"../emr/VitalSigns\";\nconst TabPane = Tabs.TabPane;\n\n\nclass EMRSettings extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            defaultActiveKey: this.props.location.hash\n        }\n    }\n\n    render() {\n        console.log(\"propss\",this.props)\n        return <div>\n            <Row>\n                <h2>EMR Settings</h2>\n                <Card>\n                    <Tabs defaultActiveKey={this.state.defaultActiveKey}>\n                        <TabPane tab={<span><Icon type=\"sound\"/>Complaints</span>} key=\"#complaints\">\n                            <TableData {...this.props} id={EMR_COMPLAINTS} name=\"Complaints\"/>\n                        </TabPane>\n                        <TabPane tab={<span><Icon type=\"eye\"/>Observations</span>} key=\"#observations\">\n                            <TableData {...this.props} id={EMR_OBSERVATIONS} name=\"Observations\"/>\n                        </TabPane>\n                        <TabPane tab={<span><Icon type=\"plus-square\"/>Diagnoses</span>} key=\"#diagnoses\">\n                            <TableData {...this.props} id={EMR_DIAGNOSES} name=\"Diagnoses\"/>\n                        </TabPane>\n                        <TabPane tab={<span><Icon type=\"laptop\"/>Investigations</span>} key=\"#investigations\">\n                            <TableData {...this.props} id={EMR_INVESTIGATIONS} name=\"Investigations\"/>\n                        </TabPane>\n                        <TabPane tab={<span><Icon type=\"solution\"/>Notes</span>} key=\"#treatmentnotes\">\n                            <TableData {...this.props} id={EMR_TREATMENTNOTES} name=\"Treatment Notes\"/>\n                        </TabPane>\n                        <TabPane tab={<span><Icon type=\"medicine-box\"/>Medication</span>} key=\"#medication\">\n                            <TableData {...this.props} id={EMR_MEDICATION} name=\"Medication\"/>\n                        </TabPane>\n                        <TabPane tab={<span><Icon type=\"file\"/>File Labels</span>} key=\"#filetags\">\n                            <TableData {...this.props} id={EMR_FILETAGS} name=\"File Labels\"/>\n                        </TabPane>\n                        <TabPane tab={<span><Icon type=\"heart\"/>Vital Signs</span>} key=\"#vitalsigns\">\n                            <VITALSINGS {...this.props}/>\n                        </TabPane>\n                    </Tabs>\n\n                </Card>\n            </Row>\n        </div>\n    }\n}\n\nexport default EMRSettings;\n","import React from \"react\";\nimport DynamicFieldsForm from \"../../../common/DynamicFieldsForm\";\nimport {Button, Card, Form, Icon, Row} from \"antd\";\nimport {\n    CHECKBOX_FIELD,\n    EMAIL_FIELD,\n    SUCCESS_MSG_TYPE,\n    INPUT_FIELD,\n    RADIO_FIELD,\n    SELECT_FIELD,\n    SINGLE_IMAGE_UPLOAD_FIELD, NUMBER_FIELD\n} from \"../../../../constants/dataKeys\";\nimport {PRACTICE} from \"../../../../constants/api\";\nimport {getAPI, displayMessage, interpolate} from \"../../../../utils/common\";\nimport {Redirect} from 'react-router-dom'\nimport {LANGUAGE, SMS_LANGUAGE_CONFIG_PARAM} from \"../../../../constants/hardData\";\nimport {loadConfigParameters} from \"../../../../utils/clinicUtils\";\n\n\nclass EditPracticeDetail extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            practiceDetail: null,\n            countries: null,\n            [SMS_LANGUAGE_CONFIG_PARAM]: []\n        };\n        this.changeRedirect = this.changeRedirect.bind(this);\n\n    }\n\n    changeRedirect() {\n        var redirectVar = this.state.redirect;\n        this.setState({\n            redirect: !redirectVar,\n        });\n    }\n\n    componentDidMount() {\n        var that = this;\n        let successFn = function (data) {\n            let countries = data.countries;\n            that.setState({\n                countries: countries,\n                practiceDetail: data,\n            })\n        };\n        let errorFn = function () {\n        };\n        getAPI(interpolate(PRACTICE, [this.props.practiceId]), successFn, errorFn);\n        loadConfigParameters(this, [SMS_LANGUAGE_CONFIG_PARAM])\n    }\n\n\n    render() {\n        let specialisationsOptions = [];\n        if (this.state.practiceDetail) {\n            this.state.practiceDetail.specialisations.forEach(function (specialisation) {\n                specialisationsOptions.push({label: (specialisation.name), value: specialisation.id});\n            })\n        }\n\n\n        if (this.state.practiceDetail) {\n            const fields = [{\n                label: \"Practice Logo\",\n                key: \"logo\",\n                type: SINGLE_IMAGE_UPLOAD_FIELD,\n                initialValue: this.state.practiceDetail.logo,\n                allowWebcam: false\n            }, {\n                label: \"Practice Name\",\n                key: \"name\",\n                required: true,\n                placeholder: \"Practice Name\",\n                initialValue: this.state.practiceDetail.name,\n                type: INPUT_FIELD\n            }, {\n                label: \"Practice Tagline\",\n                key: \"tagline\",\n                placeholder: \"Practice Tagline\",\n                required: true,\n                initialValue: this.state.practiceDetail.tagline,\n                type: INPUT_FIELD\n            }, {\n                label: \"Practice Specialisation\",\n                key: \"specialisation\",\n                placeholder: \"Practice Specialisation\",\n                initialValue: this.state.practiceDetail.specialisation,\n                type: INPUT_FIELD,\n                // options: specialisationsOptions\n            }, {\n                label: \"Practice Street Address\",\n                key: \"address\",\n                placeholder: \"Practice Street Address\",\n                initialValue: this.state.practiceDetail.address,\n                type: INPUT_FIELD\n            }, {\n                label: \"Practice locality\",\n                initialValue: this.state.practiceDetail.locality,\n                key: \"locality\",\n                placeholder: \"Practice Locality\",\n                type: INPUT_FIELD\n            }, {\n                label: \"Practice City\",\n                initialValue: this.state.practiceDetail.City,\n                placeholder: \"Practice City\",\n                key: \"city\",\n                type: INPUT_FIELD,\n                //     options: [{label: \"Hello\", value: \"1\"}, {label: \"New\", value: \"13\"}, {label: \"World\", value: \"14\"}]\n            }, {\n                label: \"Practice state\",\n                key: \"state\",\n                placeholder: \"Practice State\",\n                initialValue: this.state.practiceDetail.state,\n                type: INPUT_FIELD,\n                // options: [{label: \"Hello\", value: \"1\"}, {label: \"New\", value: \"13\"}, {label: \"World\", value: \"14\"}]\n            }, {\n                label: \"Practice Country\",\n                key: \"country\",\n                placeholder: \"Practice Country\",\n                initialValue: this.state.practiceDetail.country,\n                type: INPUT_FIELD,\n            }, {\n                label: \"Practice PINCODE\",\n                key: \"pincode\",\n                placeholder: \"Practice PINCODE\",\n                initialValue: this.state.practiceDetail.pincode,\n                type: INPUT_FIELD\n            }, {\n                label: \"Practice Contact Number\",\n                key: \"contact\",\n                placeholder: \"Practice Contact Number\",\n                initialValue: this.state.practiceDetail.contact,\n                type: INPUT_FIELD\n            }, {\n                label: \"Practice Email\",\n                key: \"email\",\n                placeholder: \"Practice Email\",\n                initialValue: this.state.practiceDetail.email,\n                type: EMAIL_FIELD\n            }, {\n                label: \"SMS Language\",\n                key: \"language\",\n                placeholder: 'SMS Language',\n                initialValue: this.state.practiceDetail && this.state.practiceDetail.language ? this.state.practiceDetail.language : this.props.activePracticeData.language,\n                type: SELECT_FIELD,\n                options: this.state[SMS_LANGUAGE_CONFIG_PARAM].map(item => {\n                    return {label: item, value: item}\n                }),\n            }, {\n                label: \"Practice website\",\n                key: \"website\",\n                placeholder: \"Practice Website\",\n                initialValue: this.state.practiceDetail.website,\n                type: INPUT_FIELD\n            }, {\n                label: \"GSTIN\",\n                initialValue: this.state.practiceDetail.gstin,\n                placeholder: \"GSTIN\",\n                key: \"gstin\",\n                type: INPUT_FIELD\n            }, {\n                label: \"Invoice Prefix\",\n                initialValue: this.state.practiceDetail.invoice_prefix,\n                placeholder: \"DEL/INV/\",\n                key: \"invoice_prefix\",\n                type: INPUT_FIELD,\n                required: true\n            }, {\n                label: \"Payment Prefix\",\n                initialValue: this.state.practiceDetail.payment_prefix,\n                placeholder: \"DEL/RCPT/\",\n                key: \"payment_prefix\",\n                type: INPUT_FIELD,\n                required: true\n            }, {\n                label: \"Return Prefix\",\n                placeholder: \"DEL/RET/\",\n                initialValue: this.state.practiceDetail.return_prefix,\n                key: \"return_prefix\",\n                type: INPUT_FIELD,\n                required: true\n            }];\n            const TestFormLayout = Form.create()(DynamicFieldsForm);\n            const formProp = {\n                successFn: function (data) {\n                    displayMessage(SUCCESS_MSG_TYPE, \"success\");\n                    if (this.props.history){\n                        this.props.history.replace('/settings/clinics')\n                    }\n                },\n                errorFn: function () {\n\n                },\n                action: interpolate(PRACTICE, [this.props.practiceId]),\n                method: \"put\",\n            };\n\n\n            return <Row>\n                <Card>\n                    <TestFormLayout title=\"Edit Practice Details\" changeRedirect={this.changeRedirect}\n                                    formProp={formProp} fields={fields} {...this.props}/>\n                    {this.state.redirect && <Redirect to='/settings/clinics'/>}\n                </Card>\n            </Row>\n        } else return <Card loading={true}/>\n    }\n}\n\nexport default EditPracticeDetail;\n","import React from \"react\";\nimport {Form, Input, Select, InputNumber, Button, Card} from \"antd\";\nimport {REQUIRED_FIELD_MESSAGE} from \"../../../../constants/messages\";\nimport {displayMessage, getAPI, interpolate, postAPI} from \"../../../../utils/common\";\nimport {DRUG_TYPE_API, DRUG_UNIT_API, INVENTORY_ITEM_API} from \"../../../../constants/api\";\nimport {\n    DATE_PICKER,\n    INPUT_FIELD, MULTI_IMAGE_UPLOAD_FIELD,\n    NUMBER_FIELD,\n    SELECT_FIELD,\n    SINGLE_IMAGE_UPLOAD_FIELD, SUCCESS_MSG_TYPE, TIME_PICKER,\n} from \"../../../../constants/dataKeys\";\nimport moment from \"moment/moment\";\nimport {DRUG} from \"../../../../constants/hardData\";\n\nclass AddorEditPrescriptionForm extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            drugTypeList: [],\n            drugUnitList: [],\n            editPrescreption: this.props.editCatalog ? this.props.editCatalog : null\n        }\n    }\n\n    componentWillMount() {\n        this.loadDrugType();\n        this.loadDrugUnit();\n    }\n\n    loadDrugType() {\n        let that = this;\n        let successFn = function (data) {\n            that.setState({\n                drugTypeList: data\n            })\n        }\n        let errorFn = function () {\n        }\n        getAPI(interpolate(DRUG_TYPE_API, [this.props.active_practiceId]), successFn, errorFn);\n    }\n\n    loadDrugUnit() {\n        let that = this;\n        let successFn = function (data) {\n            that.setState({\n                drugUnitList: data\n            })\n        }\n        let errorFn = function () {\n        }\n        getAPI(interpolate(DRUG_UNIT_API, [this.props.active_practiceId]), successFn, errorFn);\n    }\n\n    setFormParams = (type, value) => {\n        this.setState({\n            [type]: value\n        })\n    }\n    handleSubmit = (option) => {\n        let that = this;\n        this.props.form.validateFieldsAndScroll((err, values) => {\n            if (!err) {\n                // console.log(values);\n            }\n            let reqData = {\n                ...values,\n                practice: that.props.active_practiceId,\n                maintain_inventory: option,\n                item_type: DRUG\n            }\n            if (that.state.editPrescreption) {\n                reqData.id = that.state.editPrescreption.id;\n            }\n            let successFn = function (data) {\n\n                displayMessage(SUCCESS_MSG_TYPE, \"success\")\n                that.props.loadData();\n                let url = '/settings/prescriptions';\n                that.props.history.replace(url);\n            }\n            let errorFn = function () {\n\n            }\n\n            postAPI(INVENTORY_ITEM_API, reqData, successFn, errorFn)\n        });\n    }\n\n    render() {\n        const that = this;\n        const formItemLayout = (this.props.formLayout ? this.props.formLayout : {\n            labelCol: {span: 6},\n            wrapperCol: {span: 14},\n        });\n        const {getFieldDecorator} = this.props.form;\n        return <Card>\n            <Form>\n                <h2>{this.props.title}</h2>\n                <Form.Item key={'name'} label={'Name'}  {...formItemLayout}>\n                    {getFieldDecorator('name', {\n                        initialValue: that.state.editPrescreption ? that.state.editPrescreption.name : null,\n                        rules: [{\n                            required: true,\n                            message: REQUIRED_FIELD_MESSAGE\n                        }]\n                    })(\n                        <Input placeholder={'Medicine Name'}/>\n                    )}\n                </Form.Item>\n                {this.state.drugType && this.state.drugType == INPUT_FIELD ?\n                    <Form.Item key={'drug_type_extra'} label={\"Medicine Type\"}  {...formItemLayout}>\n                        {getFieldDecorator(\"drug_type_extra\", {\n                            initialValue: that.state.editPrescreption ? that.state.editPrescreption.drug_type_extra : null,\n                            rules: [{\n                                required: true,\n                                message: REQUIRED_FIELD_MESSAGE\n                            }]\n                        })(\n                            <Input/>\n                        )}\n                        <a onClick={() => that.setFormParams('drugType', SELECT_FIELD)}>Choose Medicine Type</a>\n                    </Form.Item>\n                    : <Form.Item key={\"drug_type\"} {...formItemLayout} label={\"Medicine Type\"}>\n                        {getFieldDecorator(\"drug_type\", {\n                            initialValue: this.state.editPrescreption ? this.state.editPrescreption.drug_type : null,\n                            rules: [{\n                                required: true,\n                                message: REQUIRED_FIELD_MESSAGE\n                            }]\n                        })(\n                            <Select>\n                                {that.state.drugTypeList.map((option) => <Select.Option\n                                    value={option.id}>{option.name}</Select.Option>)}\n                            </Select>\n                        )}\n                        <a onClick={() => that.setFormParams('drugType', INPUT_FIELD)}>Add New Medicine Type</a>\n                    </Form.Item>}\n                <Form.Item key={\"strength\"}{...formItemLayout}\n                           label={\"Dosage\"}>\n                    {getFieldDecorator(\"strength\", {\n                        initialValue: that.state.editPrescreption ? that.state.editPrescreption.strength : null,\n                        rules: [{\n                            required: true,\n                            message: REQUIRED_FIELD_MESSAGE\n                        }]\n                    })(\n                        <InputNumber min={0}/>\n                    )}\n                </Form.Item>\n                {this.state.drugUnit && this.state.drugUnit == INPUT_FIELD ?\n                    <Form.Item key={'unit_type_extra'} label={\"Medicine Unit\"}  {...formItemLayout}>\n                        {getFieldDecorator(\"unit_type_extra\", {\n                            initialValue: that.state.editPrescreption ? that.state.editPrescreption.unit_type_extra : null,\n                            rules: [{\n                                required: true,\n                                message: REQUIRED_FIELD_MESSAGE\n                            }]\n                        })(\n                            <Input/>\n                        )}\n                        <a onClick={() => that.setFormParams('drugUnit', SELECT_FIELD)}>Choose Medicine Unit</a>\n                    </Form.Item>\n                    : <Form.Item key={\"stength_unit\"} {...formItemLayout} label={\"Medicine Unit\"}>\n                        {getFieldDecorator(\"stength_unit\", {\n                            initialValue: this.state.editPrescreption ? this.state.editPrescreption.stength_unit : null,\n                            rules: [{\n                                required: true,\n                                message: REQUIRED_FIELD_MESSAGE\n                            }]\n                        })(\n                            <Select>\n                                {that.state.drugUnitList.map((option) => <Select.Option\n                                    value={option.id}>{option.name}</Select.Option>)}\n                            </Select>\n                        )}\n                        <a onClick={() => that.setFormParams('drugUnit', INPUT_FIELD)}>Add New Medicine Unit</a>\n                    </Form.Item>}\n                <Form.Item key={\"instructions\"} {...formItemLayout} label={\"Instructions\"}>\n                    {getFieldDecorator(\"instructions\", {\n                        initialValue: that.state.editPrescreption ? that.state.editPrescreption.instructions : null\n                    })(\n                        <Input/>\n                    )}\n                </Form.Item>\n                <Form.Item {...formItemLayout} >\n                    <Button onClick={() => this.handleSubmit(false)}>Save Medicine</Button>\n                    &nbsp;&nbsp;&nbsp;\n                    <Button onClick={() => this.handleSubmit(true)} type={'primary'}>Save & Add to Inventory</Button>\n                    &nbsp;&nbsp;&nbsp;\n                    {that.props.history ?\n                        <Button onClick={() => that.props.history.goBack()}>\n                            Cancel\n                        </Button> : null}\n                </Form.Item>\n            </Form>\n        </Card>\n    }\n}\n\nexport default Form.create()(AddorEditPrescriptionForm);\n","import React from \"react\";\nimport DynamicFieldsForm from \"../../../common/DynamicFieldsForm\";\nimport {Form, Card, message} from \"antd\";\nimport {\n    CHECKBOX_FIELD,\n    SUCCESS_MSG_TYPE,\n    INPUT_FIELD,\n    RADIO_FIELD,\n    NUMBER_FIELD,\n    SELECT_FIELD\n} from \"../../../../constants/dataKeys\";\nimport {DRUG_CATALOG, DRUG_TYPE_API, INVENTORY_ITEM_API, OFFERS, SINGLE_DRUG_CATALOG} from \"../../../../constants/api\";\nimport {getAPI, displayMessage, deleteAPI, interpolate} from \"../../../../utils/common\";\nimport {Redirect, Route} from 'react-router-dom'\nimport {DRUG} from \"../../../../constants/hardData\";\nimport AddorEditPrescriptionForm from \"./AddorEditPrescriptionForm\";\n\n\nclass AddPrescription extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            redirect: false,\n            editPrescreption: this.props.editCatalog ? this.props.editCatalog : null,\n            drugTypeList: []\n\n        }\n        this.changeRedirect = this.changeRedirect.bind(this);\n        this.setFormParams = this.setFormParams.bind(this);\n        this.loadDrugType = this.loadDrugType.bind(this);\n    }\n\n    componentWillMount() {\n        this.loadDrugType();\n        let that = this;\n        if (this.props.match.params.drugId) {\n            let successFn = function (data) {\n                that.setState({\n                    editPrescreption: data\n                })\n            };\n            let errorFn = function () {\n            };\n            getAPI(interpolate(SINGLE_DRUG_CATALOG, [this.props.active_practiceId, this.props.match.params.drugId]), successFn, errorFn);\n        }\n    }\n\n    changeRedirect() {\n        var redirectVar = this.state.redirect;\n        this.setState({\n            redirect: !redirectVar,\n        });\n    }\n\n    loadDrugType() {\n        let that = this;\n        let successFn = function (data) {\n            that.setState({\n                drugTypeList: data\n            })\n        }\n        let errorFn = function () {\n        }\n        getAPI(DRUG_TYPE_API, successFn, errorFn);\n    }\n\n    setFormParams(type, value) {\n        this.setState({\n            [type]: value\n        })\n    }\n\n    render() {\n        const drugTypeOptions = []\n        if (this.state.drugType) {\n            this.state.drugType.forEach(function (drug) {\n                drugTypeOptions.push({label: (drug.name), value: drug.id});\n            })\n        }\n        let that = this;\n        let drugTypeField = (this.state.drugType && this.state.drugType == INPUT_FIELD ?\n            {\n                label: \"Drug Type\",\n                key: \"drug_type_extra\",\n                required: true,\n                initialValue: this.state.editPrescreption ? this.state.editPrescreption.drug_type_extra : null,\n                type: INPUT_FIELD,\n                follow: <a onClick={() => that.setFormParams('drugType', SELECT_FIELD)}>Choose Drug Type</a>\n            } : {\n                label: \"Drug Type\",\n                key: \"drug_type\",\n                required: true,\n                initialValue: this.state.editPrescreption ? this.state.editPrescreption.drug_type : null,\n                type: SELECT_FIELD,\n                options: that.state.drugTypeList.map(drug => ({label: drug.name, value: drug.id})),\n                follow: <a onClick={() => that.setFormParams('drugType', INPUT_FIELD)}>Add New Drug Type</a>\n            });\n        let drugUnitField = (this.state.drugUnit && this.state.drugUnit == INPUT_FIELD ?\n            {\n                label: \"Dosage Unit\",\n                key: \"unit_type_extra\",\n                required: true,\n                initialValue: this.state.editPrescreption ? this.state.editPrescreption.unit_type_extra : null,\n                type: INPUT_FIELD,\n                follow: <a onClick={() => that.setFormParams('drugUnit', SELECT_FIELD)}>Choose Drug Type</a>\n            } : {\n                label: \"Dosage Unit\",\n                key: \"stength_unit\",\n                required: true,\n                initialValue: this.state.editPrescreption ? this.state.editPrescreption.stength_unit : null,\n                type: SELECT_FIELD,\n                options: that.state.drugTypeList.map(drug => ({label: drug.name, value: drug.id})),\n                follow: <a onClick={() => that.setFormParams('drugUnit', INPUT_FIELD)}>Add New Drug Unit</a>\n            });\n        const fields = [{\n            label: \"Name\",\n            key: \"name\",\n            initialValue: this.state.editPrescreption ? this.state.editPrescreption.name : null,\n            required: true,\n            type: INPUT_FIELD\n        }, drugTypeField, {\n            label: \"Dosage\",\n            key: \"strength\",\n            required: true,\n            initialValue: this.state.editPrescreption ? this.state.editPrescreption.strength : null,\n            type: NUMBER_FIELD\n        }, drugUnitField, {\n            label: \"Instructions \",\n            key: \"instructions\",\n            required: true,\n            initialValue: this.state.editPrescreption ? this.state.editPrescreption.instructions : null,\n            type: INPUT_FIELD\n        },];\n        // const formProp={\n        //   successFn:function(data){\n        //     console.log(data);\n        //     displayMessage(SUCCESS_MSG_TYPE, \"success\")\n        //\n        //   },\n        //   errorFn:function(){\n        //\n        //   },\n        //   action: interpolate(OFFERS,[this.props.active_practiceId]),\n        //   method: \"post\",\n        // }\n        const formProp = {\n            successFn: function (data) {\n                // console.log(data);\n                displayMessage(SUCCESS_MSG_TYPE, \"success\")\n                that.props.loadData();\n                if (that.props.history){\n                    that.props.history.replace(\"/settings/prescriptions\");\n                }\n            },\n            errorFn: function () {\n\n            },\n            // onFieldsDataChange:\n            // },\n            action: INVENTORY_ITEM_API,\n            method: \"post\",\n        }\n        const TestFormLayout = Form.create({\n            onValuesChange: function (props, changedValues, allValues) {\n                // console.log(changedValues, allValues);\n                that.setState(function (prevState) {\n                    return {editPrescreption: {...prevState.editPrescreption, ...changedValues}}\n                });\n            }\n        })(DynamicFieldsForm);\n        let defaultValues = [{key: 'practice', value: this.props.active_practiceId}, {key: 'item_type', value: DRUG}];\n        if (this.state.editPrescreption) {\n            defaultValues.push({key: 'id', value: this.state.editPrescreption.id})\n        }\n        return <div>\n            <Card>\n                <Route exact path=\"/settings/prescriptions/add\"\n                       render={() => <AddorEditPrescriptionForm key={\"Add Prescriptions\"}\n                                                     title=\"Add Prescriptions\"\n                                                     formProp={formProp}\n                                                     changeRedirect={this.changeRedirect}\n                                                     fields={fields}/>}/>\n                <Route exact path=\"/settings/prescriptions/edit\"\n                       render={(route) => this.state.editPrescreption && this.state.editPrescreption.id ?\n                           <TestFormLayout key={\"Edit Prescriptions\"}\n                                           title=\"Edit Prescriptions\"\n                                           defaultValues={defaultValues} formProp={formProp}\n                                           changeRedirect={this.changeRedirect}\n                                           fields={fields}/> : null}/>\n\n                {this.state.redirect && <Redirect to='/settings/prescriptions'/>}\n\n            </Card>\n        </div>\n    }\n}\n\nexport default AddPrescription;\n","import React from \"react\";\nimport {Button, Card, Divider, Form, Icon, Popconfirm, Row, Table} from \"antd\";\nimport {Link, Redirect, Route, Switch} from \"react-router-dom\";\nimport {DRUG_CATALOG, INVENTORY_ITEM_API,} from \"../../../../constants/api\";\nimport {getAPI, interpolate, postAPI} from \"../../../../utils/common\";\nimport AddPrescription from \"./AddPrescription\";\nimport {DRUG} from \"../../../../constants/hardData\";\nimport AddorEditPrescriptionForm from \"./AddorEditPrescriptionForm\";\nimport InfiniteFeedLoaderButton from \"../../../common/InfiniteFeedLoaderButton\";\nimport CustomizedTable from \"../../../common/CustomizedTable\";\n\nclass Prescriptions extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            catalog: null,\n            editCatalog: {},\n            loading: true,\n            loadMorePrescriptions: null,\n        }\n        this.loadData = this.loadData.bind(this);\n        this.deleteObject = this.deleteObject.bind(this);\n        this.loadInitialData = this.loadInitialData.bind(this);\n    }\n\n    componentDidMount() {\n        this.loadData();\n    }\n\n    loadData() {\n        var that = this;\n        let successFn = function (data) {\n            console.log(\"get table\");\n            that.setState({\n                catalog: data.results,\n                loadMorePrescriptions: data.next,\n                loading: false\n            })\n        };\n        let errorFn = function () {\n            that.setState({\n                loading: false\n            })\n        };\n        getAPI(INVENTORY_ITEM_API, successFn, errorFn, {\n            practice: this.props.active_practiceId,\n            item_type: DRUG,\n            maintain_inventory: false,\n            page: that.state.loadMorePrescriptions || 1\n        });\n    }\n\n    loadInitialData() {\n        let that = this;\n        this.setState({\n            loadMorePrescriptions: null\n        }, function () {\n            that.loadData();\n        })\n    }\n\n    deleteObject(record) {\n        let that = this;\n        let reqData = record;\n        reqData.is_active = false;\n        let successFn = function (data) {\n            that.loadData();\n        }\n        let errorFn = function () {\n        }\n        postAPI(INVENTORY_ITEM_API, reqData, successFn, errorFn);\n    }\n\n    editCatalog(record) {\n        this.setState({\n            editCatalog: record,\n            loading: false\n        });\n        this.props.history.push('/settings/prescriptions/edit')\n    }\n\n    render() {\n        let that = this;\n        const columns = [{\n            title: 'Name',\n            dataIndex: 'name',\n            key: 'code',\n        }, {\n            title: 'Dosage',\n            dataIndex: 'strength',\n            key: 'strength',\n            render: (strength, record) => <span>{strength}&nbsp;{record.stength_unit}</span>\n        }, {\n            title: 'Medicine Instructions',\n            dataIndex: 'instructions',\n            key: 'instructions',\n        }, {\n            title: 'Action',\n            key: 'action',\n            render: (text, record) => (\n                <span>\n                    <a onClick={() => this.editCatalog(record)}>\n                Edit</a>\n                <Divider type=\"vertical\"/>\n                  <Popconfirm title=\"Are you sure delete this prescription?\" onConfirm={() => that.deleteObject(record)}\n                              okText=\"Yes\" cancelText=\"No\">\n                      <a>Delete</a>\n                  </Popconfirm>\n              </span>\n            ),\n        }];\n        return <Row>\n            <Switch>\n                <Route exact path=\"/settings/prescriptions/add\"\n                       render={() => <AddorEditPrescriptionForm  {...this.props} loadData={this.loadInitialData} title={\"Add Prescription\"}/>}/>\n                <Route exact path=\"/settings/prescriptions/edit\"\n                       render={(route) => (this.state.editCatalog.id ? <AddorEditPrescriptionForm  {...this.state}\n                                                                                                   title={\"Edit Prescription\"}\n                                                                                                   loadData={this.loadInitialData} {...this.props} {...route}/> :\n                           <Redirect to={\"/settings/prescriptions/\"}/>)}/>\n                <Route>\n                    <div>\n                        <h2>All presciptions\n                            <Link to=\"/settings/prescriptions/add\">\n                                <Button type=\"primary\" style={{float: 'right'}}>\n                                    <Icon type=\"plus\"/>&nbsp;Add\n                                </Button>\n                            </Link>\n                        </h2>\n                        <Card>\n                            <CustomizedTable loading={this.state.loading} columns={columns}\n                                             dataSource={this.state.catalog}\n                                             pagination={false}/>\n                        </Card>\n                        <InfiniteFeedLoaderButton loaderFunction={this.loadData}\n                                                  loading={this.state.loading}\n                                                  hidden={!this.state.loadMorePrescriptions}/>\n                    </div>\n                </Route>\n            </Switch>\n        </Row>\n    }\n}\n\nexport default Prescriptions;\n","import React from \"react\";\nimport DynamicFieldsForm from \"../../../common/DynamicFieldsForm\";\nimport {Button, Modal, Card, Form, Icon, Row, Table, Divider, Popconfirm} from \"antd\";\nimport {\n    SUCCESS_MSG_TYPE,\n    CHECKBOX_FIELD,\n    INPUT_FIELD,\n    RADIO_FIELD,\n    NUMBER_FIELD,\n    SELECT_FIELD\n} from \"../../../../constants/dataKeys\";\nimport {EXPENSE_TYPE} from \"../../../../constants/api\"\nimport {Link} from \"react-router-dom\";\nimport {getAPI, displayMessage, interpolate, postAPI} from \"../../../../utils/common\";\nimport CustomizedTable from \"../../../common/CustomizedTable\";\n\nclass ExpensesTypes extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            redirect: false,\n            visible: false,\n            expenses: null,\n            loading: true,\n            showDeleted: false,\n            deletedLoading: false,\n            deletedExpenses: []\n        };\n        this.loadData = this.loadData.bind(this);\n        this.deleteObject = this.deleteObject.bind(this);\n\n    }\n\n    componentDidMount() {\n        this.loadData();\n    }\n\n    loadData(deleted = false) {\n        var that = this;\n        let successFn = function (data) {\n            console.log(\"get table\");\n            if (deleted) {\n                that.setState({\n                    deletedExpenses: data,\n                    deletedLoading: false\n                })\n            } else {\n                that.setState({\n                    expenses: data,\n                    loading: false\n                })\n            }\n        };\n        let errorFn = function () {\n        };\n        if (deleted) {\n            getAPI(interpolate(EXPENSE_TYPE, [this.props.active_practiceId]), successFn, errorFn, {deleted: true});\n        } else {\n            getAPI(interpolate(EXPENSE_TYPE, [this.props.active_practiceId]), successFn, errorFn);\n        }\n    }\n\n    changeRedirect() {\n        var redirectVar = this.state.redirect;\n        this.setState({\n            redirect: !redirectVar,\n        });\n    }\n\n    editTax(value) {\n        this.setState({\n            editingId: value.id,\n            editingName: value.name,\n            editingValue: value.tax_value,\n            loading: false,\n            visible: true,\n        })\n    }\n\n    handleCancel = () => {\n        this.setState({visible: false});\n    }\n\n    deleteObject(record, type) {\n        let that = this;\n        let reqData = record;\n        reqData.is_active = type;\n        let successFn = function (data) {\n            that.loadData();\n            if (that.state.showDeleted) {\n                that.loadData(true);\n            }\n        }\n        let errorFn = function () {\n        };\n        postAPI(interpolate(EXPENSE_TYPE, [this.props.active_practiceId]), reqData, successFn, errorFn)\n    }\n\n    showDeletedExpenses = () => {\n        this.setState({\n            showDeleted: true,\n            deletedLoading: true\n        });\n        this.loadData(true)\n    }\n\n    render() {\n        let that = this;\n        const columns = [{\n            title: 'Expense Type',\n            dataIndex: 'name',\n            key: 'name',\n        }, {\n            title: 'Action',\n            key: 'action',\n            render: (text, record) => (\n                record.is_active ? <span>\n\n              <a onClick={() => this.editTax(record)}>  Edit</a>\n                <Divider type=\"vertical\"/>\n                <Popconfirm title=\"Are you sure to delete this?\"\n                            onConfirm={() => that.deleteObject(record, false)} okText=\"Yes\" cancelText=\"No\">\n                  <a>Delete</a>\n              </Popconfirm>\n              </span> : <span>\n                    <Popconfirm title=\"Are you sure to show this?\"\n                                onConfirm={() => that.deleteObject(record, true)} okText=\"Yes\" cancelText=\"No\">\n                  <a>Show</a>\n              </Popconfirm>\n                </span>\n            ),\n        }];\n        const fields = [{\n            label: \"Expense Type\",\n            key: \"name\",\n            placeholder: 'Expense Type',\n            required: true,\n            type: INPUT_FIELD\n        },];\n        const editfields = [{\n            label: \"Expense Type\",\n            key: \"name\",\n            required: true,\n            initialValue: this.state.editingName,\n            type: INPUT_FIELD\n        },];\n        const formProp = {\n            successFn: function (data) {\n                that.handleCancel();\n                that.loadData();\n                displayMessage(SUCCESS_MSG_TYPE, \"success\")\n            },\n            errorFn: function () {\n\n            },\n            action: interpolate(EXPENSE_TYPE, [this.props.active_practiceId]),\n            method: \"post\",\n        }\n        const defaultValues = [{\"key\": \"practice\", \"value\": this.props.active_practiceId}];\n        const editFormDefaultValues = [{\"key\": \"practice\", \"value\": this.props.active_practiceId}, {\n            \"key\": \"id\",\n            \"value\": this.state.editingId\n        }];\n        const TestFormLayout = Form.create()(DynamicFieldsForm);\n        return <div>\n            <h2>Expense Types</h2>\n            <Card>\n                <TestFormLayout defaultValues={defaultValues} formProp={formProp} fields={fields}/>\n                <Divider/>\n                <CustomizedTable loading={this.state.loading} columns={columns} dataSource={this.state.expenses}/>\n                {this.state.showDeleted ?\n                    <div>\n                        <CustomizedTable loading={this.state.deletedLoading} columns={columns}\n                                         dataSource={this.state.deletedExpenses}/>\n                    </div> :\n                    <h4><a onClick={() => this.showDeletedExpenses()}>Show Deleted Expense Types</a></h4>}\n            </Card>\n            <Modal\n                title=\"Edit Expense Type\"\n                visible={this.state.visible}\n                footer={null}\n                onCancel={this.handleCancel}>\n                <TestFormLayout defaultValues={editFormDefaultValues} formProp={formProp}\n                                fields={editfields}/>\n                <Button key=\"back\" onClick={this.handleCancel}>Return</Button>\n            </Modal>\n        </div>\n    }\n}\n\nexport default ExpensesTypes;\n","import React from \"react\";\nimport DynamicFieldsForm from \"../../../common/DynamicFieldsForm\";\nimport {Button, Modal, Card, Form, Icon, Row, Table, Divider, Popconfirm} from \"antd\";\nimport {\n    SUCCESS_MSG_TYPE,\n    CHECKBOX_FIELD,\n    INPUT_FIELD,\n    RADIO_FIELD,\n    NUMBER_FIELD,\n    SELECT_FIELD\n} from \"../../../../constants/dataKeys\";\nimport {MEDICAL_HISTORY} from \"../../../../constants/api\"\nimport {Link} from \"react-router-dom\";\nimport {getAPI, displayMessage, interpolate, postAPI} from \"../../../../utils/common\";\nimport CustomizedTable from \"../../../common/CustomizedTable\";\n\nclass MedicalHistory extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            redirect: false,\n            visible: false,\n            history: null,\n            loading: true,\n            deletedHistory: [],\n            showDeleted: false,\n            deletedLoading: false\n        };\n        this.loadData = this.loadData.bind(this);\n        this.deleteObject = this.deleteObject.bind(this);\n\n    }\n\n    componentDidMount() {\n        this.loadData();\n    }\n\n    loadData(deleted = false) {\n        var that = this;\n        let successFn = function (data) {\n            console.log(\"get table\");\n            if (deleted) {\n                that.setState({\n                    deletedHistory: data,\n                    deletedLoading: false\n                })\n            } else {\n                that.setState({\n                    history: data,\n                    loading: false\n                })\n            }\n        };\n        let errorFn = function () {\n            that.setState({\n                loading: false\n            })\n        };\n        if (deleted) {\n            getAPI(interpolate(MEDICAL_HISTORY, [this.props.active_practiceId]), successFn, errorFn, {deleted: true});\n        } else {\n            getAPI(interpolate(MEDICAL_HISTORY, [this.props.active_practiceId]), successFn, errorFn);\n        }\n    }\n\n    changeRedirect() {\n        var redirectVar = this.state.redirect;\n        this.setState({\n            redirect: !redirectVar,\n        });\n    }\n\n    editTax(value) {\n        this.setState({\n            editingId: value.id,\n            editingName: value.name,\n            visible: true,\n            loading: false\n        })\n    }\n\n    handleCancel = () => {\n        this.setState({visible: false});\n    }\n\n    deleteObject(record,type) {\n        let that = this;\n        let reqData = record;\n        reqData.is_active = type;\n        let successFn = function (data) {\n            that.loadData();\n            if (that.state.showDeleted) {\n                that.loadData(true);\n            }\n        }\n        let errorFn = function () {\n        };\n        postAPI(interpolate(MEDICAL_HISTORY, [this.props.active_practiceId]), reqData, successFn, errorFn)\n    }\n\n    showDeletedMedicalHistory = () => {\n        this.setState({\n            showDeleted: true,\n            deletedLoading: true\n        });\n        this.loadData(true)\n    }\n\n    render() {\n        let that = this;\n        const columns = [{\n            title: 'Medical History',\n            dataIndex: 'name',\n            key: 'name',\n        }, {\n            title: 'Action',\n            key: 'action',\n            render: (text, record) => (\n                record.is_active?<span>\n\n              <a onClick={() => this.editTax(record)}>  Edit</a>\n                <Divider type=\"vertical\"/>\n                <Popconfirm title=\"Are you sure to delete this?\"\n                            onConfirm={() => that.deleteObject(record,false)} okText=\"Yes\" cancelText=\"No\">\n                  <a>Delete</a>\n              </Popconfirm>\n              </span> : <span>\n                    <Popconfirm title=\"Are you sure to show this?\"\n                                onConfirm={() => that.deleteObject(record,true)} okText=\"Yes\" cancelText=\"No\">\n                  <a>Show</a>\n              </Popconfirm>\n                </span>\n            ),\n        }];\n        const fields = [{\n            label: \"Medical History\",\n            key: \"name\",\n            required: true,\n            type: INPUT_FIELD\n        },];\n        const editfields = [{\n            label: \"Medical history \",\n            key: \"name\",\n            required: true,\n            initialValue: this.state.editingName,\n            type: INPUT_FIELD\n        },];\n        const formProp = {\n            successFn: function (data) {\n                that.handleCancel();\n                that.loadData();\n                console.log(data);\n                console.log(\"sucess\");\n                displayMessage(SUCCESS_MSG_TYPE, \"success\")\n            },\n            errorFn: function () {\n\n            },\n            action: interpolate(MEDICAL_HISTORY, [this.props.active_practiceId]),\n            method: \"post\",\n        }\n        const defaultValues = [];\n        const editFormDefaultValues = [{\"key\": \"id\", \"value\": this.state.editingId}];\n        const TestFormLayout = Form.create()(DynamicFieldsForm);\n        return <div>\n            <h2>Medical History</h2>\n            <Card>\n                <TestFormLayout defaultValues={defaultValues} formProp={formProp} fields={fields}/>\n                <Divider/>\n                <CustomizedTable loading={this.state.loading} columns={columns} dataSource={this.state.history}/>\n                {this.state.showDeleted ?\n                    <div>\n                        <CustomizedTable loading={this.state.deletedLoading} columns={columns}\n                                         dataSource={this.state.deletedHistory}/>\n                    </div> :\n                    <h4><a onClick={() => this.showDeletedMedicalHistory()}>Show Deleted Medical History</a></h4>}\n            </Card>\n            <Modal\n                title=\"Basic Modal\"\n                visible={this.state.visible}\n                footer={null}\n            >\n                <TestFormLayout title=\"Change history\" defaultValues={editFormDefaultValues} formProp={formProp}\n                                fields={editfields}/>\n                <Button key=\"back\" onClick={this.handleCancel}>Return</Button>,\n\n            </Modal>\n        </div>\n    }\n}\n\nexport default MedicalHistory;\n","import React from \"react\";\nimport {Button, Modal, Card, Form, Icon, Row, Table, Divider, Checkbox, InputNumber, Col, TimePicker} from \"antd\";\nimport {\n    SUCCESS_MSG_TYPE,\n} from \"../../../../constants/dataKeys\";\nimport {CALENDER_SETTINGS} from \"../../../../constants/api\"\nimport {Link} from \"react-router-dom\";\nimport {getAPI, displayMessage, interpolate, postAPI} from \"../../../../utils/common\";\nimport {REQUIRED_FIELD_MESSAGE} from \"../../../../constants/messages\";\nimport moment from \"moment/moment\";\n\nlet dayKeys = ['monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday', 'sunday'];\n\nclass PracticeTimings extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            redirect: false,\n            visible: false,\n            timings: null,\n            loading: true,\n            visting_hour_same_week: true,\n            openPracticeDays: {},\n            twoSessions: {}\n        };\n        this.loadData = this.loadData.bind(this);\n\n    }\n\n    componentDidMount() {\n        this.loadData();\n    }\n\n    loadData() {\n        var that = this;\n        let successFn = function (data) {\n            let visting_hour_same_week = true;\n            let openPracticeDays = {};\n            let twoSessions = {};\n            if (data.length && data[0]) {\n                let dataObject = data[0]\n                dayKeys.forEach(function (dayKey) {\n                    openPracticeDays[dayKey] = dataObject[dayKey];\n                    twoSessions[`is_two_sessions_${dayKey}`] = dataObject[`is_two_sessions_${dayKey}`];\n                });\n                visting_hour_same_week = dataObject[\"visting_hour_same_week\"];\n                twoSessions[`is_two_sessions`] = dataObject[`is_two_sessions`];\n            }\n            that.setState({\n                timings: data[0],\n                visting_hour_same_week: visting_hour_same_week,\n                openPracticeDays: openPracticeDays,\n                twoSessions: twoSessions,\n                loading: false\n            })\n        };\n        let errorFn = function () {\n            that.setState({\n                timings: {},\n                loading: false\n            })\n        };\n        getAPI(interpolate(CALENDER_SETTINGS, [this.props.active_practiceId]), successFn, errorFn);\n    }\n\n    changeRedirect() {\n        var redirectVar = this.state.redirect;\n        this.setState({\n            redirect: !redirectVar,\n        });\n    }\n\n    changeVistingHourSameWeek = (e) => {\n        console.log(e.target)\n        this.setState({\n            [e.target.id]: e.target.checked\n        })\n    }\n    changeOpenPracticeDays = (type, value) => {\n        this.setState(function (prevState) {\n            return {openPracticeDays: {...prevState.openPracticeDays, [type]: value}}\n        })\n    }\n    changePracticeTwoSessions = (type, value) => {\n        this.setState(function (prevState) {\n            return {twoSessions: {...prevState.twoSessions, [type]: value}}\n        })\n    }\n    handleSubmit = (e) => {\n        let that = this;\n        e.preventDefault();\n        this.props.form.validateFieldsAndScroll((err, values) => {\n                if (!err) {\n                    console.log(values);\n                    let reqData = {...values};\n                    if (reqData.first_start_time) {\n                        reqData.first_start_time = moment(reqData.first_start_time).format('HH:mm');\n                    }\n                    if (reqData.first_end_time) {\n                        reqData.first_end_time = moment(reqData.first_end_time).format('HH:mm');\n                    }\n                    if (reqData.second_start_time) {\n                        reqData.second_start_time = moment(reqData.second_start_time).format('HH:mm');\n                    }\n                    if (reqData.second_end_time) {\n                        reqData.second_end_time = moment(reqData.second_end_time).format('HH:mm');\n                    }\n                    dayKeys.forEach(function (dayKey) {\n                        if (reqData[`first_start_time_${dayKey}`]) {\n                            reqData[`first_start_time_${dayKey}`] = moment(reqData[`first_start_time_${dayKey}`]).format('HH:mm');\n                        }\n                        if (reqData[`first_end_time_${dayKey}`]) {\n                            reqData[`first_end_time_${dayKey}`] = moment(reqData[`first_end_time_${dayKey}`]).format('HH:mm');\n                        }\n                        if (reqData[`second_start_time_${dayKey}`]) {\n                            reqData[`second_start_time_${dayKey}`] = moment(reqData[`second_start_time_${dayKey}`]).format('HH:mm');\n                        }\n                        if (reqData[`second_end_time_${dayKey}`]) {\n                            reqData[`second_end_time_${dayKey}`] = moment(reqData[`second_end_time_${dayKey}`]).format('HH:mm');\n                        }\n                    });\n                    if (that.state.timings) {\n                        reqData.id = that.state.timings.id\n                    }\n                    let successFn = function (data) {\n                        that.loadData();\n                        displayMessage(SUCCESS_MSG_TYPE, \"Calendar Timings Saved successfully!!\");\n                    };\n                    let errorFn = function () {\n\n                    };\n                    postAPI(interpolate(CALENDER_SETTINGS, [this.props.active_practiceId]), reqData, successFn, errorFn);\n                }\n            }\n        )\n    }\n\n    render() {\n\n        const that = this;\n        const formItemLayout = (this.props.formLayout ? this.props.formLayout : {\n            labelCol: {span: 12},\n            wrapperCol: {span: 12},\n        });\n        const {getFieldDecorator} = this.props.form;\n        return <div>\n            <Form onSubmit={this.handleSubmit}>\n                <Form.Item key={\"today_first_day\"}  {...formItemLayout}>\n                    {getFieldDecorator(\"today_first_day\", {\n                        valuePropName: 'checked',\n                        initialValue: that.state.timings ? that.state.timings.today_first_day : false\n                    }, {\n                        rules: [{message: REQUIRED_FIELD_MESSAGE}],\n                    })(\n                        <Checkbox\n                        >{\"Always show today as first day on my calendar\"}</Checkbox>\n                    )}\n                </Form.Item>\n                <Form.Item key={\"calendar_slot\"}\n                           {...formItemLayout}\n                           label={\"Show Calendar Slots of\"}>\n                    {getFieldDecorator(\"calendar_slot\", {\n                        initialValue: that.state.timings ? that.state.timings.calendar_slot : null,\n                        rules: [{\n                            required: true,\n                            message: REQUIRED_FIELD_MESSAGE\n                        }]\n                    })(\n                        <InputNumber min={5}/>\n                    )}\n                    <span className=\"ant-form-text\">mins.</span>\n                </Form.Item>\n                <Form.Item key={\"visting_hour_same_week\"}  {...formItemLayout}>\n                    {getFieldDecorator(\"visting_hour_same_week\", {\n                        valuePropName: 'checked',\n                        initialValue: that.state.timings ? that.state.timings.visting_hour_same_week : false\n                    }, {\n                        rules: [{message: REQUIRED_FIELD_MESSAGE}],\n                    })(\n                        <Checkbox onChange={this.changeVistingHourSameWeek}>\n                            {\"Visiting hours are  same for all working days in a week\"}\n                        </Checkbox>\n                    )}\n                </Form.Item>\n                <Divider style={{margin: 4}}/>\n                {this.state.visting_hour_same_week ?\n                    <div>\n                        <Row>\n                            <Col span={4}>\n\n                            </Col>\n                            <Col span={18}>\n                                <Form.Item key={\"is_two_sessions\"}  {...formItemLayout}>\n                                    {getFieldDecorator(\"is_two_sessions\", {\n                                        valuePropName: 'checked',\n                                        initialValue: that.state.timings ? that.state.timings.is_two_sessions || that.state.twoSessions[\"is_two_sessions\"] : false\n                                    }, {\n                                        rules: [{message: REQUIRED_FIELD_MESSAGE}],\n                                    })(\n                                        <Checkbox\n                                            onChange={(e) => this.changePracticeTwoSessions(\"is_two_sessions\", e.target.checked)}>\n                                            {\"Practice operates in two sessions.\"}\n                                        </Checkbox>\n                                    )}\n                                </Form.Item>\n                                <Row gutter={16}>\n                                    <Col span={12}>\n                                        <Form.Item key={\"first_start_time\"}\n                                                   label={\"Practice Starts At\"} {...formItemLayout}>\n                                            {getFieldDecorator(\"first_start_time\", {\n                                                initialValue: that.state.timings && that.state.timings.first_start_time ? moment(that.state.timings.first_start_time, \"HH:mm\") : null,\n                                                rules: [{required: true, message: REQUIRED_FIELD_MESSAGE}],\n                                            })(\n                                                <TimePicker format={\"HH:mm\"} allowClear={false}/>\n                                            )}\n                                        </Form.Item>\n                                    </Col>\n                                    {that.state.twoSessions[\"is_two_sessions\"] ? <div>\n                                        <Col span={12}>\n                                            <Form.Item key={\"first_end_time\"}\n                                                       label={\"Lunch At\"} {...formItemLayout}>\n                                                {getFieldDecorator(\"first_end_time\", {\n                                                    initialValue: that.state.timings && that.state.timings.first_end_time ? moment(that.state.timings.first_end_time, \"HH:mm\") : null,\n                                                    rules: [{required: true, message: REQUIRED_FIELD_MESSAGE}],\n                                                })(\n                                                    <TimePicker format={\"HH:mm\"} allowClear={false}/>\n                                                )}\n                                            </Form.Item>\n                                        </Col>\n                                        <Col span={12}>\n                                            <Form.Item key={\"second_start_time\"}\n                                                       label={\"Resume At\"} {...formItemLayout}>\n                                                {getFieldDecorator(\"second_start_time\", {\n                                                    initialValue: that.state.timings && that.state.timings.second_start_time ? moment(that.state.timings.second_start_time, \"HH:mm\") : null,\n                                                    rules: [{required: true, message: REQUIRED_FIELD_MESSAGE}],\n                                                })(\n                                                    <TimePicker format={\"HH:mm\"} allowClear={false}/>\n                                                )}\n                                            </Form.Item>\n                                        </Col>\n                                    </div> : null}\n\n                                    <Col span={12}>\n                                        <Form.Item key={\"second_end_time\"}\n                                                   label={\"Practice Ends At\"} {...formItemLayout}>\n                                            {getFieldDecorator(\"second_end_time\", {\n                                                initialValue: that.state.timings && that.state.timings.second_end_time ? moment(that.state.timings.second_end_time, \"HH:mm\") : null,\n                                                rules: [{required: true, message: REQUIRED_FIELD_MESSAGE}],\n                                            })(\n                                                <TimePicker format={\"HH:mm\"} allowClear={false}/>\n                                            )}\n                                        </Form.Item>\n                                    </Col>\n                                </Row>\n                            </Col>\n                        </Row>\n                        <Divider style={{margin: 4}}/>\n                    </div> : dayKeys.map(dayKey => <div key={dayKey}>\n                        <Row>\n                            <Col span={4}>\n                                <h4>{dayKey.replace(/^\\w/, c => c.toUpperCase())}</h4>\n                            </Col>\n\n                            <Col span={18}>\n                                <Form.Item key={`${dayKey}`}  {...formItemLayout}>\n                                    {getFieldDecorator(`${dayKey}`, {\n                                        valuePropName: 'checked',\n                                        initialValue: that.state.timings ? that.state.timings[`${dayKey}`] || that.state.openPracticeDays[dayKey] : false\n                                    }, {\n                                        rules: [{message: REQUIRED_FIELD_MESSAGE}],\n                                    })(\n                                        <Checkbox\n                                            onChange={(e) => that.changeOpenPracticeDays(dayKey, e.target.checked)}>\n                                            {`Practice is open on ${dayKey.replace(/^\\w/, c => c.toUpperCase())}`}\n                                        </Checkbox>\n                                    )}\n                                </Form.Item>\n                                {that.state.openPracticeDays[dayKey] ? <div>\n                                        <Form.Item key={`is_two_sessions_${dayKey}`}  {...formItemLayout}>\n                                            {getFieldDecorator(`is_two_sessions_${dayKey}`, {\n                                                valuePropName: 'checked',\n                                                initialValue: that.state.timings ? that.state.timings[`is_two_sessions_${dayKey}`] || that.state.twoSessions[`is_two_sessions_${dayKey}`] : false\n                                            }, {\n                                                rules: [{message: REQUIRED_FIELD_MESSAGE}],\n                                            })(\n                                                <Checkbox\n                                                    onChange={(e) => this.changePracticeTwoSessions(`is_two_sessions_${dayKey}`, e.target.checked)}\n                                                >\n                                                    {\"Practice operates in two sessions.\"}\n                                                </Checkbox>\n                                            )}\n                                        </Form.Item>\n                                        <Row gutter={16}>\n                                            <Col span={12}>\n                                                <Form.Item key={`first_start_time_${dayKey}`}\n                                                           label={\"Practice Starts At\"} {...formItemLayout}>\n                                                    {getFieldDecorator(`first_start_time_${dayKey}`, {\n                                                        initialValue: that.state.timings && that.state.timings[`first_start_time_${dayKey}`] ? moment(that.state.timings[`first_start_time_${dayKey}`], \"HH:mm\") : null,\n                                                        rules: [{required: true, message: REQUIRED_FIELD_MESSAGE}],\n                                                    })(\n                                                        <TimePicker format={\"HH:mm\"} allowClear={false}/>\n                                                    )}\n                                                </Form.Item>\n                                            </Col>\n                                            {that.state.twoSessions[`is_two_sessions_${dayKey}`] ? <div>\n                                                <Col span={12}>\n                                                    <Form.Item key={`first_end_time_${dayKey}`}\n                                                               label={\"Lunch At\"} {...formItemLayout}>\n                                                        {getFieldDecorator(`first_end_time_${dayKey}`, {\n                                                            initialValue: that.state.timings && that.state.timings[`first_end_time_${dayKey}`] ? moment(that.state.timings[`first_end_time_${dayKey}`], \"HH:mm\") : null,\n                                                            rules: [{required: true, message: REQUIRED_FIELD_MESSAGE}],\n                                                        })(\n                                                            <TimePicker format={\"HH:mm\"} allowClear={false}/>\n                                                        )}\n                                                    </Form.Item>\n                                                </Col>\n                                                <Col span={12}>\n                                                    <Form.Item key={`second_start_time_${dayKey}`}\n                                                               label={\"Resume At\"} {...formItemLayout}>\n                                                        {getFieldDecorator(`second_start_time_${dayKey}`, {\n                                                            initialValue: that.state.timings && that.state.timings[`second_start_time_${dayKey}`] ? moment(that.state.timings[`second_start_time_${dayKey}`], \"HH:mm\") : null,\n                                                            rules: [{required: true, message: REQUIRED_FIELD_MESSAGE}],\n                                                        })(\n                                                            <TimePicker format={\"HH:mm\"} allowClear={false}/>\n                                                        )}\n                                                    </Form.Item>\n                                                </Col>\n                                            </div> : null}\n                                            <Col span={12}>\n                                                <Form.Item key={`second_end_time_${dayKey}`}\n                                                           label={\"Practice Ends At\"} {...formItemLayout}>\n                                                    {getFieldDecorator(`second_end_time_${dayKey}`, {\n                                                        initialValue: that.state.timings && that.state.timings[`second_end_time_${dayKey}`] ? moment(that.state.timings[`second_end_time_${dayKey}`], \"HH:mm\") : null,\n                                                        rules: [{required: true, message: REQUIRED_FIELD_MESSAGE}],\n                                                    })(\n                                                        <TimePicker format={\"HH:mm\"} allowClear={false}/>\n                                                    )}\n                                                </Form.Item>\n                                            </Col>\n                                        </Row>\n                                    </div>\n                                    : null}\n                            </Col>\n                        </Row>\n                        <Divider style={{margin: 4}}/>\n                    </div>)\n                }\n                <Form.Item {...formItemLayout}>\n                    <Button loading={that.state.loading} type=\"primary\" htmlType=\"submit\" style={{margin: 5}}>\n                        Submit\n                    </Button>\n                    {that.props.history ?\n                        <Button style={{margin: 5}} onClick={() => that.props.history.goBack()}>\n                            Cancel\n                        </Button> : null}\n                </Form.Item>\n            </Form>\n        </div>\n    }\n\n}\n\nexport default Form.create()(PracticeTimings);\n","import React from \"react\";\nimport DynamicFieldsForm from \"../../../common/DynamicFieldsForm\";\nimport {Button, Modal, Card, Form, Icon, Row, Table, Divider, Popconfirm, Tag} from \"antd\";\nimport {\n    SUCCESS_MSG_TYPE,\n    CHECKBOX_FIELD,\n    INPUT_FIELD,\n    RADIO_FIELD,\n    NUMBER_FIELD,\n    SELECT_FIELD\n} from \"../../../../constants/dataKeys\";\nimport {APPOINTMENT_CATEGORIES} from \"../../../../constants/api\"\nimport {Link} from \"react-router-dom\";\nimport {getAPI, displayMessage, interpolate, postAPI} from \"../../../../utils/common\";\nimport CustomizedTable from \"../../../common/CustomizedTable\";\nimport {hashCode, intToRGB} from \"../../../../utils/clinicUtils\";\n\nclass AppointmentCategories extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            redirect: false,\n            visible: false,\n            appointmentCategories: null,\n            loading: true\n        };\n        this.loadAppointmentCategories = this.loadAppointmentCategories.bind(this);\n        this.deleteObject = this.deleteObject.bind(this);\n\n    }\n\n    componentDidMount() {\n        this.loadAppointmentCategories();\n    }\n\n    loadAppointmentCategories() {\n        let that = this;\n        let successFn = function (data) {\n            that.setState(function (prevState) {\n                data.forEach(function (obj) {\n                    obj.color = intToRGB(hashCode(obj.name))\n                });\n                return {\n                    appointmentCategories: data,\n                    loading: false\n                }\n            })\n        }\n        let errorFn = function () {\n\n        }\n        getAPI(interpolate(APPOINTMENT_CATEGORIES, [this.props.active_practiceId]), successFn, errorFn)\n    }\n\n    changeRedirect() {\n        var redirectVar = this.state.redirect;\n        this.setState({\n            redirect: !redirectVar,\n        });\n    }\n\n    editCategory(value) {\n        this.setState({\n            editingId: value.id,\n            editingName: value.name,\n            visible: true,\n            loading: false\n        })\n    }\n\n    deleteObject(record) {\n        let that = this;\n        let reqData = record;\n        reqData.is_active = false;\n        let successFn = function (data) {\n            that.loadAppointmentCategories();\n        }\n        let errorFn = function () {\n        };\n        postAPI(interpolate(APPOINTMENT_CATEGORIES, [this.props.active_practiceId]), reqData, successFn, errorFn)\n    }\n\n    handleCancel = () => {\n        this.setState({visible: false});\n    }\n\n\n    render() {\n        let that = this;\n        const columns = [{\n            // title: 'Name',\n            dataIndex: 'color',\n            key: 'color',\n            render: (color) => <Tag color={'#' + color}>#</Tag>\n        }, {\n            title: 'Name',\n            dataIndex: 'name',\n            key: 'name',\n        }, {\n            title: 'Action',\n            key: 'action',\n            render: (text, record) => (\n                <span>\n              <a onClick={() => this.editCategory(record)}>  Edit</a>\n                <Divider type=\"vertical\"/>\n                <Popconfirm title=\"Are you sure delete this?\"\n                            onConfirm={() => that.deleteObject(record)} okText=\"Yes\" cancelText=\"No\">\n                  <a>Delete</a>\n              </Popconfirm>\n              </span>\n            ),\n        }];\n        const fields = [{\n            label: \"Category name\",\n            key: \"name\",\n            placeholder:\"Category Name\",\n            required: true,\n            type: INPUT_FIELD\n        },];\n        const editfields = [{\n            label: \"Category name\",\n            key: \"name\",\n            required: true,\n            initialValue: this.state.editingName,\n            type: INPUT_FIELD\n        },];\n        const formProp = {\n            successFn: function (data) {\n                that.handleCancel();\n                that.loadAppointmentCategories();\n                console.log(data);\n                console.log(\"sucess\");\n                displayMessage(SUCCESS_MSG_TYPE, \"success\")\n            },\n            errorFn: function () {\n\n            },\n            action: interpolate(APPOINTMENT_CATEGORIES, [this.props.active_practiceId]),\n            method: \"post\",\n        }\n        const defaultValues = [];\n        const editFormDefaultValues = [{\"key\": \"id\", \"value\": this.state.editingId}];\n        const TestFormLayout = Form.create()(DynamicFieldsForm);\n        return <div>\n            <TestFormLayout defaultValues={defaultValues} formProp={formProp} fields={fields} {...this.props}/>\n            <Divider/>\n            <CustomizedTable loading={this.state.loading} columns={columns}\n                             dataSource={this.state.appointmentCategories}/>\n            <Modal\n                title=\"Edit Appointment Category\"\n                visible={this.state.visible}\n                footer={null}\n                onCancel={this.handleCancel}\n            >\n                <TestFormLayout defaultValues={editFormDefaultValues} formProp={formProp} fields={editfields}/>\n                <Button key=\"back\" onClick={this.handleCancel}>Return</Button>,\n\n            </Modal>\n        </div>\n    }\n}\n\nexport default AppointmentCategories;\n","import React from \"react\";\nimport DynamicFieldsForm from \"../../../common/DynamicFieldsForm\";\nimport {Form, Button, Card, Icon, Tabs, Divider, Tag, Row, Table} from \"antd\";\nimport {CHECKBOX_FIELD, INPUT_FIELD, RADIO_FIELD, SELECT_FIELD} from \"../../../../constants/dataKeys\";\nimport PracticeTimings from \"./PracticeTimings\";\n//import CancelledInvoice from \"./CancelledInvoice\";\nimport AppointmentCategories from \"./AppointmentCategories\";\nimport {TAXES} from \"../../../../constants/api\"\nimport {Link} from \"react-router-dom\";\nimport {getAPI, interpolate} from \"../../../../utils/common\";\n\nconst TabPane = Tabs.TabPane;\n\n\nclass CalendarSettings extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            loading: true,\n            defaultActiveKey: this.props.location.hash\n        }\n    }\n\n    render() {\n        return <div>\n            <h2>Calendar Settings</h2>\n            <Row>\n                <Card>\n                    <Tabs defaultActiveKey={this.state.defaultActiveKey}>\n                        <TabPane tab={<span><Icon type=\"schedule\"/>Calender Timings Settings</span>} key=\"#timings\">\n                            <PracticeTimings {...this.state} {...this.props}/>\n                        </TabPane>\n                        <TabPane tab={<span><Icon type=\"reconciliation\"/>Appointment Categories</span>}\n                                 key=\"#categories\">\n                            <AppointmentCategories {...this.props}/>\n                        </TabPane>\n                    </Tabs>\n                </Card>\n            </Row>\n        </div>\n    }\n}\n\nexport default CalendarSettings;\n","import React from \"react\";\nimport {Divider, Icon, Layout, Menu} from 'antd';\nimport {Link} from 'react-router-dom';\n\n\nconst Sider = Layout.Sider;\n\nclass SettingSider extends React.Component {\n\n    render() {\n        return <Sider trigger={null}\n                      collapsible\n                      style={{overflow: 'auto', minHeight: '100vh', background: '#fff'}}>\n\n            <Menu mode=\"inline\" defaultSelectedKeys={['5']}>\n                <Menu.ItemGroup key=\"g1\" title={<Divider style={{margin: '0px'}}>Practice Settings</Divider>}>\n                    {this.props.activePracticePermissions.SettingsPracticeDetail ? <Menu.Item key=\"5\">\n                        <Link to=\"/settings/clinics\">\n                            <Icon type=\"shop\"/>Practice Details\n                        </Link>\n                    </Menu.Item> : null}\n\n                    {this.props.activePracticePermissions.SettingsCommunincations ? <Menu.Item key=\"7\">\n                        <Link to=\"/settings/communication-settings\">\n                            <Icon type=\"message\"/>Communication\n                        </Link>\n                    </Menu.Item> : null}\n                    {this.props.activePracticePermissions.SettingsCalendar ? <Menu.Item key=\"17\">\n                        <Link to=\"/settings/calendarsettings#timings\">\n                            <Icon type=\"schedule\"/>Calendar\n                        </Link>\n                    </Menu.Item> : null}\n                    {this.props.activePracticePermissions.SettingsPracticeStaff ? <Menu.Item key=\"6\">\n                        <Link to=\"/settings/clinics-staff\">\n                            <Icon type=\"team\"/>Practice Staff\n                        </Link>\n                    </Menu.Item> : null}\n                    {this.props.activePracticePermissions.ZoomUser?\n                        <Menu.Item key={'35'}>\n                            <Link to=\"/settings/zoom-user\">\n                                <Icon type={\"user\"}/>\n                                <span className=\"nav-text\">Zoom User</span>\n                            </Link>\n                        </Menu.Item>:null}\n\n                    {this.props.activePracticePermissions.SettingsAgents || this.props.allowAllPermissions?\n                    <Menu.Item key=\"32\">\n                        <Link to=\"/settings/agents\">\n                            <Icon type=\"usergroup-add\"/>\n                            <span className=\"nav-text\">Advisor</span>\n                        </Link>\n                    </Menu.Item>:null}\n\n                    {this.props.activePracticePermissions.SettingsAgentRoles || this.props.allowAllPermissions?\n                    <Menu.Item key=\"33\">\n                        <Link to=\"/settings/agent-roles\">\n                            <Icon type=\"apartment\"/>\n                            <span className=\"nav-text\">Advisor Roles</span>\n                        </Link>\n                    </Menu.Item>:null}\n\n                    {this.props.activePracticePermissions.SettingsProcedureCatalog ? <Menu.Item key=\"8\">\n                        <Link to=\"/settings/procedures\">\n                            <Icon type=\"folder-open\"/>Procedure\n                            Catalog</Link>\n                    </Menu.Item> : null}\n                    {this.props.activePracticePermissions.SettingsBilling ? <Menu.Item key=\"9\">\n                        <Link to=\"/settings/billing#taxcatalog\">\n                            <Icon type=\"audit\"/>Billing\n                        </Link>\n                    </Menu.Item> : null}\n                    {this.props.activePracticePermissions.SettingsLoyalty ? <Menu.Item key=\"10\">\n                        <Link to=\"/settings/loyalty\">\n                            <Icon type=\"trophy\"/>Loyalty\n                        </Link>\n                    </Menu.Item> : null}\n\n\n\n                    {this.props.activePracticePermissions.SettingsMLMSettings ? <Menu.Item key=\"30\">\n                        <Link to=\"/settings/mlm\">\n                            <Icon type=\"wallet\"/>\n                            <span className=\"nav-text\">MLM</span>\n                        </Link>\n                    </Menu.Item> : null}\n                    {/*<Menu.Item key=\"11\"><Link to=\"/settings/contacts\"> Contacts</Link></Menu.Item>*/}\n                    {this.props.activePracticePermissions.SettingsEMR ? <Menu.Item key=\"12\">\n                        <Link to=\"/settings/emr#complaints\">\n                            <Icon type=\"file-text\"/> EMR\n                        </Link>\n                    </Menu.Item> : null}\n                    {this.props.activePracticePermissions.SettingsPrescriptions ? <Menu.Item key=\"13\">\n                        <Link to=\"/settings/prescriptions\">\n                            <Icon type=\"file-text\"/> Prescriptions\n                        </Link>\n                    </Menu.Item> : null}\n                    {this.props.activePracticePermissions.SettingsLabs ? <Menu.Item key=\"14\">\n                        <Link to=\"/settings/labs\">\n                            <Icon type=\"experiment\"/>Labs\n                        </Link>\n                    </Menu.Item> : null}\n                    {this.props.activePracticePermissions.SettingsPrintouts ?\n                        <Menu.Item key=\"18\">\n                            <Link to=\"/settings/printout\">\n                                <Icon type=\"printer\"/> Printout\n                            </Link>\n                        </Menu.Item> : null}\n                    {/*{this.props.activePracticePermissions.SettingsEmailPDFSettings ?*/}\n                    {/*    <Menu.Item key=\"21\">*/}\n                    {/*        <Link to=\"/settings/mailpdfsettings\">*/}\n                    {/*            <Icon type=\"mail\"/> Email PDF Settings*/}\n                    {/*        </Link>*/}\n                    {/*    </Menu.Item> : null}*/}\n                    {this.props.activePracticePermissions.SettingsMedicalHistory ? <Menu.Item key=\"15\">\n                        <Link to=\"/settings/medical-history\">\n                            <Icon type=\"medicine-box\"/> Medical History\n                        </Link>\n                    </Menu.Item> : null}\n                    {this.props.activePracticePermissions.SettingsExpenseTypes ? <Menu.Item key=\"16\">\n                        <Link to=\"/settings/expense-types\">\n                            <Icon type=\"dollar\"/> Expense Types\n                        </Link>\n                    </Menu.Item> : null}\n\n                    <Menu.Item key=\"20\">\n                        <Link to=\"/settings/integration\">\n                            <Icon type=\"link\"/> My Integrations\n                        </Link>\n                    </Menu.Item>\n                </Menu.ItemGroup>\n                <Menu.ItemGroup key=\"g2\" title={<Divider style={{margin: '0px'}}>Bed & Medicine</Divider>}>\n                {this.props.activePracticePermissions.SettingsRoomTypes ?\n                    <Menu.Item key=\"22\">\n                        <Link to=\"/settings/roomtypes\">\n                            <Icon type=\"apartment\"/> Room Types\n                        </Link>\n                    </Menu.Item>\n                :null}\n\n                {this.props.activePracticePermissions.SettingsBedPackages ?\n                    <Menu.Item key=\"23\">\n                        <Link to=\"/settings/bed-packages\">\n                            <Icon type=\"box-plot\"/> Bed Packages\n                        </Link>\n                    </Menu.Item>\n                :null}\n\n                {this.props.activePracticePermissions.SettingsMedicinePackages ?\n                    <Menu.Item key=\"24\">\n                        <Link to=\"/settings/medicine-packages\">\n                            <Icon type=\"medicine-box\"/> Medicine Packages\n                        </Link>\n                    </Menu.Item>\n                :null}\n\n                {this.props.activePracticePermissions.SettingsDiseaseList ?\n                    <Menu.Item key=\"25\">\n                        <Link to=\"/settings/diseases\">\n                            <Icon type=\"apartment\"/> Disease List\n                        </Link>\n                    </Menu.Item>\n                :null}\n                </Menu.ItemGroup>\n\n\n            </Menu>\n\n        </Sider>\n    }\n}\n\nexport default SettingSider;\n","function _typeof(obj) {\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nimport * as React from 'react';\nimport RcCollapse from 'rc-collapse';\nimport classNames from 'classnames';\nimport { ConfigConsumer } from '../config-provider';\n\nvar CollapsePanel =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(CollapsePanel, _React$Component);\n\n  function CollapsePanel() {\n    var _this;\n\n    _classCallCheck(this, CollapsePanel);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(CollapsePanel).apply(this, arguments));\n\n    _this.renderCollapsePanel = function (_ref) {\n      var getPrefixCls = _ref.getPrefixCls;\n      var _this$props = _this.props,\n          customizePrefixCls = _this$props.prefixCls,\n          _this$props$className = _this$props.className,\n          className = _this$props$className === void 0 ? '' : _this$props$className,\n          _this$props$showArrow = _this$props.showArrow,\n          showArrow = _this$props$showArrow === void 0 ? true : _this$props$showArrow;\n      var prefixCls = getPrefixCls('collapse', customizePrefixCls);\n      var collapsePanelClassName = classNames(_defineProperty({}, \"\".concat(prefixCls, \"-no-arrow\"), !showArrow), className);\n      return React.createElement(RcCollapse.Panel, _extends({}, _this.props, {\n        prefixCls: prefixCls,\n        className: collapsePanelClassName\n      }));\n    };\n\n    return _this;\n  }\n\n  _createClass(CollapsePanel, [{\n    key: \"render\",\n    value: function render() {\n      return React.createElement(ConfigConsumer, null, this.renderCollapsePanel);\n    }\n  }]);\n\n  return CollapsePanel;\n}(React.Component);\n\nexport { CollapsePanel as default };","function _typeof(obj) {\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nimport * as React from 'react';\nimport RcCollapse from 'rc-collapse';\nimport classNames from 'classnames';\nimport CollapsePanel from './CollapsePanel';\nimport Icon from '../icon';\nimport { ConfigConsumer } from '../config-provider';\nimport animation from '../_util/openAnimation';\n\nvar Collapse =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Collapse, _React$Component);\n\n  function Collapse() {\n    var _this;\n\n    _classCallCheck(this, Collapse);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Collapse).apply(this, arguments));\n\n    _this.renderExpandIcon = function () {\n      var panelProps = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      var prefixCls = arguments.length > 1 ? arguments[1] : undefined;\n      var expandIcon = _this.props.expandIcon;\n      var icon = expandIcon ? expandIcon(panelProps) : React.createElement(Icon, {\n        type: \"right\",\n        rotate: panelProps.isActive ? 90 : undefined\n      });\n      return React.isValidElement(icon) ? React.cloneElement(icon, {\n        className: \"\".concat(prefixCls, \"-arrow\")\n      }) : icon;\n    };\n\n    _this.renderCollapse = function (_ref) {\n      var _classNames;\n\n      var getPrefixCls = _ref.getPrefixCls;\n      var _this$props = _this.props,\n          customizePrefixCls = _this$props.prefixCls,\n          _this$props$className = _this$props.className,\n          className = _this$props$className === void 0 ? '' : _this$props$className,\n          bordered = _this$props.bordered,\n          expandIconPosition = _this$props.expandIconPosition;\n      var prefixCls = getPrefixCls('collapse', customizePrefixCls);\n      var collapseClassName = classNames((_classNames = {}, _defineProperty(_classNames, \"\".concat(prefixCls, \"-borderless\"), !bordered), _defineProperty(_classNames, \"\".concat(prefixCls, \"-icon-position-\").concat(expandIconPosition), true), _classNames), className);\n      return React.createElement(RcCollapse, _extends({}, _this.props, {\n        expandIcon: function expandIcon(panelProps) {\n          return _this.renderExpandIcon(panelProps, prefixCls);\n        },\n        prefixCls: prefixCls,\n        className: collapseClassName\n      }));\n    };\n\n    return _this;\n  }\n\n  _createClass(Collapse, [{\n    key: \"render\",\n    value: function render() {\n      return React.createElement(ConfigConsumer, null, this.renderCollapse);\n    }\n  }]);\n\n  return Collapse;\n}(React.Component);\n\nexport { Collapse as default };\nCollapse.Panel = CollapsePanel;\nCollapse.defaultProps = {\n  bordered: true,\n  openAnimation: _extends(_extends({}, animation), {\n    appear: function appear() {}\n  }),\n  expandIconPosition: 'left'\n};","import Collapse from './Collapse';\nexport default Collapse;","import {\n    Form, Input, Button, Card, Table, InputNumber\n} from 'antd';\nimport React from \"react\";\nimport {\n    AGENT_ROLES,\n    GENERATE_MLM_COMMISSON,\n    SINGLE_PRODUCT_MARGIN\n} from \"../../../../constants/api\"\nimport {displayMessage, getAPI, interpolate, postAPI} from \"../../../../utils/common\";\nimport {SUCCESS_MSG_TYPE} from \"../../../../constants/dataKeys\";\nimport { Redirect } from 'react-router-dom';\n\nclass MLMGenerate extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            redirect: false,\n            level_count: 3,\n            margin: null,\n            editRecord: (this.props.editRecord ? this.props.editRecord : null),\n            editId: (this.props.editId ? this.props.editId : null),\n            loading:true,\n            editRecordMargins:{}\n        }\n        this.changeRedirect= this.changeRedirect.bind(this);\n    }\n\n    componentDidMount() {\n        this.loadRoles();\n        if (this.state.editRecord && this.state.editId) {\n            let editRecordMargins = {}\n            this.state.editRecord.forEach(function(record){\n                editRecordMargins[record.roleId] = record;\n            });\n            this.setState({\n                editRecordMargins\n            })\n            this.loadMlmData();\n\n        }\n        // this.loadProductlevels();\n    }\n\n    loadMlmData() {\n        let that = this;\n        let successFn = function (data) {\n            data.map(function (item) {\n                if (item.id == that.props.editId) {\n                    that.setState({\n                        margin: item,\n                        loading: false\n                    }, function () {\n                        that.setLevelCount(item.level_count)\n                    })\n                }\n            })\n\n        }\n        let errorFn = function () {\n            that.setState({\n                loading:true\n            })\n\n        }\n        getAPI(GENERATE_MLM_COMMISSON,  successFn, errorFn);\n    }\n\n    loadRoles() {\n        let that = this;\n        let successFn = function (data) {\n            that.setState({\n                staffRoles: data,\n                loading:false\n            })\n        }\n        let errorFn = function () {\n            that.setState({\n                loading:false\n            })\n\n        }\n\n        getAPI(AGENT_ROLES, successFn, errorFn);\n    }\n\n    // loadProductlevels() {\n    //     let that = this;\n    //     let successFn = function (data) {\n    //         that.setState({\n    //             productLevels: data\n    //         });\n    //         data.forEach(function (item) {\n    //             that.add(item.name);\n    //         })\n    //     }\n    //     let errorFn = function () {\n    //\n    //     }\n    //     getAPI(PRODUCT_LEVEL, successFn, errorFn);\n    // }\n\n\n    handleSubmit = (e) => {\n        e.preventDefault();\n        let that = this;\n        this.props.form.validateFieldsAndScroll((err, values) => {\n            let reqData = {};\n            reqData={\n                comissions:[],\n                name:values.margin_name,\n                level_count:values.level_count,\n            };\n            for (let i = 1; i <= that.state.level_count; i++) {\n                this.state.staffRoles.forEach(function(role){\n                    reqData.comissions.push({\n                        level:i,\n                        role:role.id,\n                        commision_percent:values[i][role.id]\n                    })\n                });\n            }\n\n            if(that.state.editId) {\n                reqData.id = that.state.editId;\n                // if (that.state.margin.comissions) {\n                //     that.state.margin.comissions.forEach(function (role,key) {\n                //         for (let i = 1; i <= that.state.level_count; i++) {\n                //\n                //             if (role.level ==i){\n                //                 reqData.comissions.push({\n                //                     id:role.id,\n                //                     ...role,\n                //                     commision_percent:values[i][role.role]\n                //                 })\n                //             }\n                //         }\n                //         reqData.comissions.shift();\n                //     });\n                //\n                // }\n            }\n\n            if (!err) {\n                that.setState({changePassLoading: true, redirect:true});\n                let successFn = function (data) {\n                    displayMessage(SUCCESS_MSG_TYPE, data.details);\n                    that.props.loadData();\n                    if (that.props.history){\n                        that.props.history.replace(\"/settings/mlm\");\n                    }\n                };\n                let errorFn = function () {\n                };\n                postAPI(GENERATE_MLM_COMMISSON, reqData, successFn, errorFn);\n            }\n        });\n    };\n\n    changeRedirect(){\n        var redirectVar=this.state.redirect;\n        this.setState({\n            redirect:  !redirectVar,\n        })  ;\n    }\n\n\n    add = (level_name) => {\n        const {form} = this.props;\n        // can use data-binding to get\n        const keys = form.getFieldValue('keys');\n        const nextKeys = keys.concat(level_name);\n        // can use data-binding to set\n        // important! notify form to detect changes\n        form.setFieldsValue({\n            keys: nextKeys,\n        });\n    }\n\n    setLevelCount = (e) => {\n        let that = this;\n        that.setState({\n            level_count: e < 5 ? e : 5\n        })\n    }\n\n    render() {\n        let that = this\n        const {getFieldDecorator, getFieldValue} = this.props.form;\n        const formItemLayout = {\n            labelCol: {\n                xs: {span: 24},\n                sm: {span: 4},\n            },\n            wrapperCol: {\n                xs: {span: 24},\n                sm: {span: 20},\n            },\n        };\n        getFieldDecorator('keys', {initialValue: []});\n        let columns = [{\n            title: 'Roles',\n            dataIndex: 'name',\n            key: 'name'\n        }];\n        if (this.state.level_count)\n            for (let i = 1; i <= this.state.level_count; i++) {\n                let record = {};\n                columns.push({\n                    title: 'Level ' + i,\n                    dataIndex: 'Level ' + i,\n                    key: 'Level ' + i,\n                    render: (item, record) => <Form.Item\n                        {...formItemLayout}\n                        // label={k}\n                        required={true}\n                        key={`${i}[${record.id}]`}>\n                        {getFieldDecorator(`${i}[${record.id}]`, {\n                            validateTrigger: ['onChange', 'onBlur'],\n                            initialValue: (this.state.editRecordMargins && this.state.editRecordMargins[record.id] ? this.state.editRecordMargins[record.id][i] : null)\n                        })(\n                            <InputNumber min={0} placeholder=\"Percent Commission\"/>\n                        )}\n                    </Form.Item>\n                })\n            }\n\n        return (\n            <Card title={\"Manage MLM Commission\"}>\n                <Form onSubmit={this.handleSubmit} className=\"login-form\">\n                    <Form.Item\n                        {...formItemLayout}\n                        label={\"Margin Name\"}\n                        required={true}\n                        key={`margin_name`}>\n                        {getFieldDecorator(`margin_name`, {\n                            validateTrigger: ['onChange', 'onBlur'],\n                            initialValue: (this.state.margin ? this.state.margin.name : null)\n                        })(\n                            <Input placeholder=\"Margin Type Name\"/>\n                        )}\n                    </Form.Item>\n                    <Form.Item\n                        {...formItemLayout}\n                        label={'No of Levels'}\n                        required={false}\n                        key={`level_count`}\n\n                    >\n                        {getFieldDecorator(`level_count`, {\n                            validateTrigger: ['onChange', 'onBlur'],\n                            initialValue: this.state.level_count\n                        })(\n                            <InputNumber min={1} max={5} placeholder=\"Level Count\" onChange={this.setLevelCount}/>\n                        )}\n                    </Form.Item>\n                    <Table loading={this.state.loading} bordered={true} pagination={false} columns={columns} dataSource={this.state.staffRoles}/>\n                    <Form.Item>\n                        <br/>\n                        <Button type=\"primary\" htmlType=\"submit\" className=\"login-form-button\">\n                            Set MLM Commissions\n                        </Button>\n                    </Form.Item>\n                </Form>\n                {this.state.redirect&&    <Redirect to='/settings/mlm' />}\n            </Card>\n\n        );\n    }\n}\n\nexport default Form.create()(MLMGenerate);\n","\nimport React from \"react\";\nimport {Button, Card, Icon, Table, Tabs, Row, Popconfirm,Collapse} from \"antd\";\nimport {getAPI, interpolate, postAPI, patchAPI, deleteAPI, putAPI} from \"../../../../utils/common\";\nimport MLMGenerate from \"./MLMGenerate\"\nimport {Link, Route, Switch} from \"react-router-dom\";\nimport {\n    PRODUCT_MARGIN,\n    ROLE_COMMISION,\n    SINGLE_PRODUCT_MARGIN,\n    AGENT_ROLES,\n    GENERATE_MLM_COMMISSON\n} from \"../../../../constants/api\";\n\nconst TabPane = Tabs.TabPane;\nconst {Panel} = Collapse;\nexport default class MlmBase extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            mlmItems: [],\n            productMargin: [],\n            active_practiceId: this.props.active_practiceId,\n            loading: true\n        };\n        this.loadMlmData = this.loadMlmData.bind(this);\n        this.deleteObject = this.deleteObject.bind(this);\n        this.loadRoles = this.loadRoles.bind(this);\n        this.loadData = this.loadData.bind(this);\n    }\n\n    componentDidMount() {\n        this.loadData();\n    }\n\n    loadData() {\n        this.loadMlmData();\n        this.loadRoles();\n        this.loadProductMargin();\n    }\n\n    loadMlmData() {\n        let that = this;\n        let successFn = function (data) {\n            that.setState({\n                mlmItems: data,\n                loading: false\n            })\n        };\n        let errorFn = function () {\n            that.setState({\n                loading: false\n            })\n\n        };\n        getAPI(GENERATE_MLM_COMMISSON, successFn, errorFn);\n    }\n\n    loadRoles() {\n        let that = this;\n        let successFn = function (data) {\n            that.setState({\n                staffRoles: data,\n                loading: false\n            })\n        };\n        let errorFn = function () {\n            that.setState({\n                loading: false\n            })\n        };\n        getAPI(AGENT_ROLES, successFn, errorFn);\n    }\n\n    loadProductMargin() {\n        let that = this;\n        let successFn = function (data) {\n            that.setState({\n                productMargin: data\n            })\n        };\n        let errorFn = function () {\n\n        };\n        getAPI(PRODUCT_MARGIN, successFn, errorFn);\n    }\n\n    editObject(id, record) {\n        this.setState({\n            editId: id,\n            editRecord: record,\n            loading: false\n        }, function () {\n            this.props.history.push('/settings/mlm/edit');\n        })\n    }\n\n    deleteObject(record) {\n        let that = this;\n        let reqData = {...record, is_active: false};\n        reqData.is_active = false;\n        let successFn = function (data) {\n            that.loadData();\n        };\n        let errorFn = function () {\n        };\n        putAPI(interpolate(SINGLE_PRODUCT_MARGIN, [record.id]), reqData, successFn, errorFn);\n    }\n\n    changeRedirect() {\n        var redirectVar = this.state.redirect;\n        this.setState({\n            redirect: !redirectVar,\n        });\n    }\n\n    render() {\n        let that = this;\n        const rolesdata = {}\n        if (this.state.staffRoles) {\n            this.state.staffRoles.forEach(function (role) {\n                rolesdata[role.id] = role.name;\n            })\n        }\n        let columns = {};\n\n        that.state.productMargin.forEach(function (productMargin) {\n            columns[productMargin.id] = [{\n                title: 'Role',\n                key: 'role',\n                dataIndex: 'role',\n            }];\n            for (let level = 1; level <= productMargin.level_count; level++) {\n                columns[productMargin.id].push({\n                    title: 'Level ' + level,\n                    key: level,\n                    dataIndex: level,\n                    render: (value) => <span>{value}%</span>\n                })\n            }\n        })\n\n\n        let datasource = {};\n\n        that.state.mlmItems.forEach(function (productMargin) {\n            datasource[productMargin.id] = [];\n\n            if (that.state.staffRoles) {\n                that.state.staffRoles.forEach(function (role) {\n                    let roledata = {\"role\": role.name, roleId: role.id};\n                    if (productMargin.level_count) {\n                        for (let level = 1; level <= productMargin.level_count; level++) {\n                            if (productMargin.comissions) {\n                                for (let i = 0; i < productMargin.comissions.length; i++) {\n                                    let item = productMargin.comissions[i];\n                                    if (item.margin == productMargin.id && item.level == level && role.id == item.role) {\n                                        roledata[level] = item.commision_percent;\n                                        break;\n                                    }\n                                }\n                            }\n                        }\n                    }\n\n                    datasource[productMargin.id].push(roledata);\n                })\n            }\n        });\n        return <div>\n            <Switch>\n                <Route exact path=\"/settings/mlm/generate\"\n                       render={(route) => <MLMGenerate {...route}\n                                                       loadData={this.loadData}/>}/>\n                {this.state.editId && this.state.editRecord ?\n                    <Route exact path=\"/settings/mlm/edit\"\n                           render={(route) => <MLMGenerate {...route}\n                                                           key={this.state.editId}\n                                                           loadData={this.loadData} {...this.state}/>}/> : null}\n                <Route>\n                    <div>\n                        <h2>MLM Commissions\n                            <Link to=\"/settings/mlm/generate\">\n                                <Button type=\"primary\" style={{float: 'right'}}>\n                                    <Icon type=\"plus\"/>&nbsp;Add\n                                </Button>\n                            </Link>\n                        </h2>\n                        <Card>\n                            {this.state.productMargin ? <Collapse defaultActiveKey={['0']} accordion>\n                                {this.state.productMargin.map((marginType, index) =>\n                                    <Panel header={marginType.name} key={index}\n                                           extra={[<Button.Group size={\"small\"}>\n                                               <Button type=\"primary\"\n                                                       onClick={() => this.editObject(marginType.id, datasource[marginType.id])}><Icon\n                                                   type=\"edit\"/> Edit</Button>\n\n                                               <Popconfirm title=\"Are you sure delete this item?\"\n                                                           onConfirm={() => that.deleteObject(marginType)} okText=\"Yes\" cancelText=\"No\">\n                                                   <Button type=\"danger\"><Icon type=\"delete\"/> Delete</Button>\n                                               </Popconfirm>\n                                           </Button.Group>]}>\n                                        <Table loading={this.state.loading} pagination={false}\n                                               style={{marginTop: 10}}\n                                               dataSource={datasource[marginType.id]}\n                                               rowKey=\"role\"\n                                               columns={columns[marginType.id]}\n                                               bordered/>\n                                    </Panel>)}\n                            </Collapse> : <h4>No MLM Data</h4>}\n\n\n                            {/* {this.state.productMargin ?\n                                <Tabs type=\"card\">\n                                    {this.state.productMargin.map(marginType =>\n                                        <TabPane tab={marginType.name} key={marginType.id}>\n                                            <Row>\n                                                <br/>\n                                                <h2>\n                                                    {marginType.name}\n                                                    <Button.Group style={{float: 'right'}}>\n                                                        <Button type=\"primary\"\n                                                                onClick={() => this.editObject(marginType.id, datasource[marginType.id])}><Icon\n                                                            type=\"edit\"/> Edit</Button>\n                                                        <Popconfirm title=\"Are you sure delete this item?\"\n                                                                    onConfirm={() => that.deleteObject(marginType)} okText=\"Yes\" cancelText=\"No\">\n                                                            <Button type=\"danger\"><Icon type=\"delete\"/> Delete</Button>\n                                                        </Popconfirm>\n\n                                                    </Button.Group>\n                                                </h2>\n                                            </Row>\n                                            <Table loading={this.state.loading} pagination={false}\n                                                   style={{marginTop: 10}}\n                                                   dataSource={datasource[marginType.id]}\n                                                   rowKey=\"role\"\n                                                   columns={columns[marginType.id]}\n                                                   bordered/>\n                                        </TabPane>)}\n                                </Tabs> : <h4>No MLM Data</h4>} */}\n\n                        </Card>\n                    </div>\n                </Route>\n            </Switch>\n\n        </div>\n    }\n}\n","import React from 'react';\nimport {Row, Form, Col, Radio, Input, Divider, Select, InputNumber, Icon, Button, Upload, Checkbox} from \"antd\";\nimport {\n    CUSTOMIZE_PAPER_TYPE,\n    EXCLUDE_PATIENT_DOB, HEADER_INCLUDE, LOGO_ALIGMENT, LOGO_INCLUDE, LOGO_TYPE,\n    PAGE_ORIENTATION, PAPER_SIZE, PATIENT_DETAILS_LIST,\n    PRINTER_TYPE\n} from \"../../../../constants/hardData\";\nimport {displayMessage, getAPI, interpolate, makeURL, postAPI} from \"../../../../utils/common\";\nimport {\n    CLINIC_NOTES_PDF,\n    FILE_UPLOAD_API,\n    PRACTICE_PRINT_SETTING_API,\n    PRINT_PREVIEW_RENDER,\n    SAVE_ALL_PRINT_SETTINGS\n} from \"../../../../constants/api\";\nimport {message} from \"antd/lib/index\";\nimport {SINGLE_IMAGE_UPLOAD_FIELD, SUCCESS_MSG_TYPE} from \"../../../../constants/dataKeys\";\nimport {BACKEND_BASE_URL} from \"../../../../config/connect\";\n\nconst {TextArea} = Input;\nconst radioTabList = CUSTOMIZE_PAPER_TYPE.map((radioTab) => <Radio.Button value={radioTab}>{radioTab}</Radio.Button>);\n\n\nclass PrintSettings extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            type: this.props.type,\n            sub_type: this.props.sub_type,\n            selectedFormType: 'PAGE',\n            print_setting: {},\n            editedPrintSettings: {},\n        }\n        this.loadData = this.loadData.bind(this);\n    }\n\n    componentDidMount() {\n        this.loadData();\n    }\n\n    changeFormType = (e) => {\n        this.setState({\n            selectedFormType: e.target.value\n        })\n\n    }\n\n    loadData() {\n        var that = this;\n        let successFn = function (data) {\n            if (data.length)\n                that.setState({\n                    print_setting: data[0],\n                });\n        };\n        let errorFn = function () {\n        };\n        getAPI(interpolate(PRACTICE_PRINT_SETTING_API, [this.props.active_practiceId, that.state.type, that.state.sub_type]), successFn, errorFn);\n    }\n\n    handleSubmit = (e) => {\n        console.log(e);\n        e.preventDefault();\n        let that = this;\n\n        this.props.form.validateFields((err, formData) => {\n            console.log(formData);\n            if (!err) {\n                let reqData = {\n                    type: that.state.type,\n                    ...formData\n                }\n\n                let key = \"logo_path\";\n                if (reqData[key] && formData[key].file && formData[key].file.response)\n                    reqData[key] = formData[key].file.response.image_path;\n                else\n                    reqData[key] = that.state.print_setting.logo_path;\n\n                if (!reqData.save_for_all) {\n                    reqData = {\n                        ...reqData,\n                        sub_type: that.state.sub_type,\n                        id: that.state.print_setting.id\n                    }\n                }\n                delete reqData.save_for_all;\n                let successFn = function (data) {\n                    displayMessage(SUCCESS_MSG_TYPE, \"Settings Saved Successfully!!\");\n                };\n                let errorFn = function () {\n                };\n                if (formData.save_for_all) {\n                    postAPI(interpolate(SAVE_ALL_PRINT_SETTINGS, [this.props.active_practiceId]), reqData, successFn, errorFn);\n                } else {\n                    postAPI(interpolate(PRACTICE_PRINT_SETTING_API, [this.props.active_practiceId, that.state.type, that.state.sub_type]), reqData, successFn, errorFn);\n                }\n            }\n        });\n    }\n    handleFormEditSettings = (type, value) => {\n        this.setState(function (prevState) {\n            return {editedPrintSettings: {...prevState.editedPrintSettings, [type]: value}}\n        })\n    }\n    loadPDF = (path) => {\n        let that = this;\n        let successFn = function (data) {\n            if (data.report)\n                window.open(BACKEND_BASE_URL + data.report);\n        }\n        let errorFn = function () {\n\n        }\n        getAPI(path, successFn, errorFn);\n    }\n    onchangeHandle=(type ,value)=>{\n        let that=this;\n        this.setState({\n            [type]:value\n        }\n        ,function(){\n            if(this.state.is_patient_not){\n                this.props.form.resetFields()\n            }\n        }\n        )\n    }\n    render() {\n        console.log(this.state)\n        let that = this;\n        const formItemLayout = {\n            labelCol: {\n                xs: {span: 8},\n                sm: {span: 8},\n                md: {span: 8},\n                lg: {span: 8},\n            },\n            wrapperCol: {\n                xs: {span: 16},\n                sm: {span: 16},\n                md: {span: 16},\n                lg: {span: 16},\n            },\n        };\n        const pageSizeOptionList = PAPER_SIZE.map((pageSize) => <Select.Option\n            value={pageSize}>{pageSize}</Select.Option>)\n        const headerInclude = HEADER_INCLUDE.map((header_include) => <Radio\n            value={header_include.value}>{header_include.title}</Radio>)\n        const logoType = LOGO_TYPE.map((logo_type) => <Radio value={logo_type.value}>{logo_type.value}</Radio>)\n        const logoAlignment = LOGO_ALIGMENT.map((logo_alignment) => <Radio\n            value={logo_alignment.value}>{logo_alignment.value}</Radio>)\n        const logoInclude = LOGO_INCLUDE.map((logo_include) => <Radio\n            value={logo_include.value}>{logo_include.title}</Radio>)\n        const singleUploadprops = {\n            name: 'image',\n            data: {\n                name: 'hello',\n                // logo_path:file.response.image_path,\n            },\n            action: makeURL(FILE_UPLOAD_API),\n            headers: {\n                authorization: 'authorization-text',\n            },\n            onChange(info) {\n                if (info.file.status !== 'uploading') {\n                    console.log(info.file, info.fileList);\n                }\n                if (info.file.status === 'done') {\n                    message.success(`${info.file.name} file uploaded successfully`);\n                } else if (info.file.status === 'error') {\n                    message.error(`${info.file.name} file upload failed.`);\n                }\n            },\n\n        };\n        const patientDetailsList = PATIENT_DETAILS_LIST.map((patient_details) => <li>\n            <Checkbox value={patient_details.value}>{patient_details.value}</Checkbox></li>)\n        const pageOrientation = PAGE_ORIENTATION.map((pageOrientation) => <Radio\n            value={pageOrientation.value}>{pageOrientation.value}</Radio>)\n        const printer_type = PRINTER_TYPE.map((printerType) => <Radio\n            value={printerType.value}>{printerType.value}</Radio>)\n        let PreviewParamsURL = '?preview=true&type=' + this.props.type + '&sub_type=' + this.props.sub_type;\n\n        if (this.state.print_setting) {\n            let editedObject = {...this.state.print_setting, ...this.state.editedPrintSettings};\n            let keys = Object.keys(editedObject);\n            keys.forEach(function (key) {\n                if (editedObject[key])\n                    PreviewParamsURL += '&' + key + '=' + encodeURIComponent(editedObject[key])\n            });\n\n        }\n        const {getFieldDecorator} = this.props.form;\n        return (<Row>\n                <Col span={24}>\n                    <Form onSubmit={this.handleSubmit}>\n\n\n                        <div className=\"div_padding_top\">\n                            <Row gutter={16}>\n                                <Col span={12}>\n                                    <div style={{textAlign: 'center'}}>\n                                        <Radio.Group buttonStyle=\"solid\" size=\"small\" onChange={this.changeFormType}\n                                                     defaultValue={this.state.selectedFormType}>\n                                            {radioTabList}\n                                        </Radio.Group>\n                                        <br/>\n                                    </div>\n                                    <div hidden={this.state.selectedFormType != 'PAGE'}>\n\n                                        <h2>Page Setup</h2>\n                                        <Form.Item key={'page_size'} {...formItemLayout} label={\"Paper Size\"}>\n                                            {getFieldDecorator('page_size', {\n                                                initialValue: this.state.print_setting.page_size\n                                            })(<Select style={{width: '100%'}}\n                                                       onChange={(value) => this.handleFormEditSettings('page_size', value)}>\n                                                {pageSizeOptionList}\n                                            </Select>)\n                                            }\n                                        </Form.Item>\n\n                                        <Form.Item label={\"Orientation\"} {...formItemLayout} >\n                                            {getFieldDecorator('page_orientation', {\n                                                initialValue: this.state.print_setting.page_orientation\n                                            })(<Radio.Group\n                                                    onChange={(e) => this.handleFormEditSettings('orientation', e.target.value)}>\n                                                    {pageOrientation}\n                                                </Radio.Group>\n                                            )\n                                            }\n                                        </Form.Item>\n\n                                        <Form.Item label={(<span>Printer Type&nbsp;</span>)} {...formItemLayout}>\n                                            {getFieldDecorator('page_print_type', {\n                                                initialValue: this.state.print_setting.page_print_type\n                                            })(<Radio.Group\n                                                    onChange={(e) => this.handleFormEditSettings('printerType', e.target.value)}>\n                                                    {printer_type}\n                                                </Radio.Group>\n                                            )}\n\n                                        </Form.Item>\n\n                                        <Form.Item key={'page_margin_top'}\n                                                   label={(<span>Top Margin</span>)} {...formItemLayout}>\n                                            {getFieldDecorator('page_margin_top', {\n                                                initialValue: this.state.print_setting.page_margin_top\n                                            })(\n                                                <InputNumber min={0} max={10}\n                                                             onChange={(value) => this.handleFormEditSettings('page_margin_top', value)}/>\n                                            )}\n                                            <span className=\"ant-form-text\">Inches</span>\n                                        </Form.Item>\n\n                                        <Form.Item key={'page_margin_left'}\n                                                   label={(<span>Left Margin</span>)} {...formItemLayout}>\n                                            {getFieldDecorator('page_margin_left', {\n                                                initialValue: this.state.print_setting.page_margin_left\n                                            })(\n                                                <InputNumber min={0} max={10}\n                                                             onChange={(value) => this.handleFormEditSettings('page_margin_left', value)}/>\n                                            )}\n                                            <span className=\"ant-form-text\">Inches</span>\n                                        </Form.Item>\n\n                                        <Form.Item key={'page_margin_bottom'}\n                                                   label={(<span>Bottom Margin</span>)} {...formItemLayout}>\n                                            {getFieldDecorator('page_margin_bottom', {\n                                                initialValue: this.state.print_setting.page_margin_bottom\n                                            })(\n                                                <InputNumber min={0} max={10}\n                                                             onChange={(value) => this.handleFormEditSettings('page_margin_bottom', value)}/>\n                                            )}\n                                            <span className=\"ant-form-text\">Inches</span>\n                                        </Form.Item>\n\n                                        <Form.Item key={'page_margin_right'}\n                                                   label={(<span>Right Margin</span>)} {...formItemLayout}>\n                                            {getFieldDecorator('page_margin_right', {\n                                                initialValue: this.state.print_setting.page_margin_right\n                                            })(\n                                                <InputNumber min={0} max={10}\n                                                             onChange={(value) => this.handleFormEditSettings('page_margin_right', value)}/>\n                                            )}\n                                            <span className=\"ant-form-text\">Inches</span>\n                                        </Form.Item>\n                                    </div>\n                                    <div hidden={this.state.selectedFormType != 'HEADER'}>\n                                        <h2>Customize Header</h2>\n\n                                        <Form.Item key={'header_include'} {...formItemLayout}\n                                                   label={(<span>Include Header&nbsp;</span>)}>\n                                            {getFieldDecorator('header_include', {initialValue: this.state.print_setting.header_include})\n                                            (\n                                                <Radio.Group\n                                                    onChange={(e) => this.handleFormEditSettings('header_include', e.target.value)}>\n                                                    {headerInclude}\n                                                </Radio.Group>\n                                            )\n                                            }\n                                        </Form.Item>\n\n                                        <Form.Item key={'header_text'} {...formItemLayout}\n                                                   label={(<span>Header&nbsp;</span>)}>\n                                            {getFieldDecorator('header_text', {\n                                                initialValue: this.state.print_setting.header_text\n                                            })(\n                                                <Input\n                                                    onChange={(e) => this.handleFormEditSettings('header_text', e.target.value)}/>\n                                            )}\n                                        </Form.Item>\n                                        <Form.Item key={'header_left_text'} {...formItemLayout}\n                                                   label={(<span>Left Text&nbsp;</span>)}>\n                                            {getFieldDecorator('header_left_text', {\n                                                initialValue: this.state.print_setting.header_left_text\n                                            })(\n                                                <TextArea\n                                                    onChange={(e) => this.handleFormEditSettings('header_left_text', e.target.value)}/>\n                                            )}\n                                        </Form.Item>\n\n                                        <Form.Item key={'header_right_text'} {...formItemLayout}\n                                                   label={(<span>Right Text&nbsp;</span>)}>\n                                            {getFieldDecorator('header_right_text', {initialValue: this.state.print_setting.header_right_text})\n                                            (<TextArea\n                                                onChange={(e) => this.handleFormEditSettings('header_right_text', e.target.value)}/>)\n                                            }\n                                        </Form.Item>\n\n                                        <Form.Item key={'logo_include'} {...formItemLayout}\n                                                   label={(<span>Include Logo&nbsp;</span>)}>\n                                            {getFieldDecorator('logo_include', {initialValue: this.state.print_setting.logo_include})\n                                            (\n                                                <Radio.Group\n                                                    onChange={(e) => this.handleFormEditSettings('logo_include', e.target.value)}>\n                                                    {logoInclude}\n                                                </Radio.Group>\n                                            )\n                                            }\n                                        </Form.Item>\n\n                                        <Form.Item key={'logo_path'} {...formItemLayout}\n                                                   label={(<span>Logo&nbsp;</span>)}>\n                                            {getFieldDecorator('logo_path')\n                                            (<Upload {...singleUploadprops} >\n                                                <Button>\n                                                    <Icon type=\"upload\"/> Click to Upload\n                                                </Button>\n                                            </Upload>)}\n                                            {/*<Avatar style={{backgroundColor: this.state.color}} size=\"large\">*/}\n                                            {/*{this.state.user}*/}\n                                            {/*</Avatar>*/}\n\n                                        </Form.Item>\n\n                                        <Form.Item key={'logo_type'} {...formItemLayout}\n                                                   label={(<span>Type&nbsp;</span>)}>\n                                            {getFieldDecorator('logo_type', {initialValue: this.state.print_setting.logo_type})(\n                                                <Radio.Group\n                                                    onChange={(e) => this.handleFormEditSettings('logo_type', e.target.value)}>\n                                                    {logoType}\n                                                </Radio.Group>\n                                            )}\n                                        </Form.Item>\n\n                                        <Form.Item key={'logo_alignment'} {...formItemLayout}\n                                                   label={(<span>Alignment&nbsp;</span>)}>\n                                            {getFieldDecorator('logo_alignment', {initialValue: this.state.print_setting.logo_alignment})\n                                            (\n                                                <Radio.Group\n                                                    onChange={(e) => this.handleFormEditSettings('logo_alignment', e.target.value)}>\n                                                    {logoAlignment}\n                                                </Radio.Group>\n                                            )\n                                            }\n                                        </Form.Item>\n                                    </div>\n                                    <div hidden={this.state.selectedFormType != 'PATIENT'}>\n                                        <h2>Customize Patient Details</h2>\n                                        <Form.Item>\n                                            {getFieldDecorator('patient_details', {})(\n                                                <Checkbox onChange={(e)=>this.onchangeHandle('is_patient_not',e.target.checked)}>Show Patient Details</Checkbox>)\n                                            }\n                                           \n                                        </Form.Item>\n                                            <ul className=\"subLists\">\n                                                <Form.Item>\n                                                    {getFieldDecorator('exclude_history', {})(\n                                                        <Checkbox >Exclude Mediacal History</Checkbox>)\n                                                    }\n                                                \n                                                </Form.Item>\n\n                                                <Form.Item>\n                                                    {getFieldDecorator('exclude_phone', {})(\n                                                        <Checkbox>Exclude Patient Number</Checkbox>)\n                                                    }\n                                                \n                                                </Form.Item>\n                                                <Form.Item>\n                                                    {getFieldDecorator('exclude_email', {})(\n                                                        <Checkbox>Exclude Patient Email Id</Checkbox>)\n                                                    }\n                                                \n                                                </Form.Item>\n\n                                                <Form.Item>\n                                                    {getFieldDecorator('exclude_address', {})(\n                                                        <Checkbox>Exclude address</Checkbox>)\n                                                    }\n                                                \n                                                </Form.Item>\n                                                <Form.Item>\n                                                    {getFieldDecorator('exclude_blood_group', {})(\n                                                        <Checkbox>Exclude Blood Group</Checkbox>)\n                                                    }\n                                                \n                                                </Form.Item>\n                                                <Form.Item>\n                                                    {getFieldDecorator('exclude_gender_dob', {})(\n                                                        <Checkbox>{EXCLUDE_PATIENT_DOB}</Checkbox>\n                                                    )}\n                                                \n                                                </Form.Item>\n                                            </ul>\n                                       \n                                    </div>\n                                    <div hidden={this.state.selectedFormType != 'FOOTER'}>\n                                        <h2>Footer Setup</h2>\n                                        <Form.Item key={'footer_margin_top'} {...formItemLayout}\n                                                   label={(<span>Top Margin&nbsp;</span>)}>\n                                            {getFieldDecorator('footer_margin_top', {\n                                                initialValue: this.state.print_setting.footer_margin_top\n                                            })(\n                                                <InputNumber min={0} max={10}\n                                                             onChange={(value) => this.handleFormEditSettings('footer_margin_top', value)}/>\n                                            )}\n                                            <span className=\"ant-form-text\">Inches</span>\n                                        </Form.Item>\n                                        <Form.Item key={'footer_text'} {...formItemLayout}\n                                                   label={(<span>Full Width Content&nbsp;</span>)}>\n                                            {getFieldDecorator('footer_text', {\n                                                initialValue: this.state.print_setting.footer_text\n                                            })(\n                                                <TextArea rows={3}\n                                                          onChange={(e) => this.handleFormEditSettings('footer_text', e.target.value)}/>\n                                            )}\n                                        </Form.Item>\n\n                                        <Form.Item key={'footer_left_text'} {...formItemLayout}\n                                                   label={(<span>Left Signature&nbsp;</span>)}>\n                                            {getFieldDecorator('footer_left_text', {\n                                                initialValue: this.state.print_setting.footer_left_text\n                                            })(\n                                                <TextArea\n                                                    onChange={(e) => this.handleFormEditSettings('footer_left_text', e.target.value)}/>\n                                            )}\n                                        </Form.Item>\n\n                                        <Form.Item key={'footer_right_text'} {...formItemLayout}\n                                                   label={(<span>Right Signature&nbsp;</span>)}>\n                                            {getFieldDecorator('footer_right_text', {\n                                                initialValue: this.state.print_setting.footer_right_text\n                                            })(\n                                                <TextArea\n                                                    onChange={(e) => this.handleFormEditSettings('footer_right_text', e.target.value)}/>\n                                            )}\n                                        </Form.Item>\n\n                                    </div>\n                                    <Row>\n                                        <Divider/>\n                                        <Form.Item {...formItemLayout} key={'save_for_all'}>\n                                            {getFieldDecorator('save_for_all', {})(\n                                                <Checkbox>\n                                                    <b> Save for all</b>\n                                                </Checkbox>\n                                            )}\n                                        </Form.Item>\n                                        <Form.Item>\n                                            <Button style={{margin: 5}} type=\"primary\" htmlType=\"submit\"\n                                                    value={\"ALL\"}>Save</Button>\n                                            <Button style={{margin: 5}}\n                                                    onClick={() => this.loadPDF(PRINT_PREVIEW_RENDER + PreviewParamsURL + '&pdf=1')}>Show\n                                                Print Preview</Button>\n                                        </Form.Item>\n                                    </Row>\n                                </Col>\n                                <Col span={12} style={{textAlign: 'center'}}>\n                                    <div style={{\n                                        position: 'absolute',\n                                        backgroundColor: 'black',\n                                        color: 'white',\n                                        padding: 10,\n                                        right: 20,\n                                        top: 50\n                                    }}>\n                                        <b>PREVIEW</b>\n                                    </div>\n                                    <iframe\n                                        src={makeURL(PRINT_PREVIEW_RENDER + PreviewParamsURL)}\n                                        style={{\n                                            width: '100%',\n                                            height: '100%',\n                                            minHeight: '600px',\n                                            boxShadow: '-2px 0px 4px #B8B8B8'\n                                        }}/>\n                                </Col>\n\n                            </Row>\n                        </div>\n                    </Form>\n                </Col>\n            </Row>\n        );\n\n    }\n\n}\n\nexport default Form.create()(PrintSettings);\n","import React from 'react';\nimport {Button, Tabs, Divider, Table, Card, Icon, Radio, Tag} from \"antd\";\nimport PrintSettings from \"./PrintSettings\";\nimport {PRESCRIPTION} from \"../../../../constants/dataKeys\";\nimport {\n    EMR_TYPE,\n    BILLING_TYPE,\n    EMR_SUB_TYPE,\n    BILLING_SUB_TYPE,\n    CUSTOMIZE_PAPER_TYPE\n} from \"../../../../constants/hardData\";\n\nconst TabPane = Tabs.TabPane;\n\nclass Printout extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            randomKey: Math.random(),\n            activeKey: 'a'\n        }\n    }\n\n    setRandomKey = (key) => {\n        console.log(key)\n        this.setState({\n            randomKey: Math.random(),\n            activeKey: key\n        })\n    }\n\n    render() {\n        let that = this;\n        return (<div>\n            <h2>Print Settings</h2>\n            <Tabs defaultActiveKey={EMR_TYPE} size=\"small\" type=\"card\">\n                <TabPane tab={<span><Icon type=\"calculator\"/>{EMR_TYPE}</span>} key={EMR_TYPE}>\n                    <Card>\n                        <h4>\n                            <div>\n                                <Tabs size=\"small\" onChange={this.setRandomKey}>\n                                    {EMR_SUB_TYPE.map((item, i) => {\n                                        return (<TabPane tab={item.title} key={i}>\n                                            <PrintSettings\n                                                key={(i.toString() == that.state.activeKey.toString() ? item.title + that.state.randomKey : item.title)}\n                                                sub_type={item.title}\n                                                active_practiceId={this.props.active_practiceId}\n                                                type={\"EMR\"}/>\n                                        </TabPane>)\n                                    })}\n                                </Tabs>\n                            </div>\n                        </h4>\n                    </Card>\n                </TabPane>\n                <TabPane tab={<span><Icon type=\"audit\"/>{BILLING_TYPE}</span>} key={BILLING_TYPE}>\n                    <Card>\n                        <h4>\n                            <div>\n                                <Tabs size=\"small\" onChange={this.setRandomKey}>\n                                    {BILLING_SUB_TYPE.map((item, i) => {\n                                        return (<TabPane tab={item.title} key={i}>\n                                            <PrintSettings\n                                                key={(i.toString() == that.state.activeKey.toString() ? item.title + that.state.randomKey : item.title)}\n                                                sub_type={item.title}\n                                                active_practiceId={this.props.active_practiceId}\n                                                type={\"BILLING\"}/>\n                                        </TabPane>)\n                                    })}\n                                </Tabs>\n\n                            </div>\n                        </h4>\n                    </Card>\n                </TabPane>\n            </Tabs>\n        </div>);\n    }\n}\n\nexport default Printout;\n","import React from \"react\";\nimport {Card, Icon, Row, Tabs} from \"antd\";\nimport {INPUT_FIELD, PASSWORD_FIELD} from \"../../../../constants/dataKeys\";\nimport {Form} from \"antd/lib/index\";\nimport DynamicFieldsForm from \"../../../common/DynamicFieldsForm\";\nimport {getAPI, interpolate} from \"../../../../utils/common\";\nimport {EXPENSE_TYPE, SAVE_CREDENTIALS} from \"../../../../constants/api\";\n\nconst TabPane = Tabs.TabPane;\nexport default class IntegrationHome extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            integrateData: [],\n            loading: true,\n        }\n        this.loadData = this.loadData.bind(this);\n    }\n    componentWillMount() {\n       let that=this;\n        if (that.props){\n            this.loadData();\n        }\n\n    }\n\n    loadData(){\n        let that=this;\n        let successFn=function (data) {\n            that.setState({\n                integrateData:data,\n                loading:false\n            })\n        }\n        let errorFn=function () {\n            that.setState({\n                loading:false\n            })\n        }\n        getAPI(interpolate(SAVE_CREDENTIALS,[that.props.user.id]),successFn ,errorFn)\n    }\n    render() {\n        let that = this;\n        const taskIntegrateFormFields = [{\n            key: 'login',\n            type: INPUT_FIELD,\n            initialValue: this.state.integrateData.login,\n            required: true,\n            label: \"Email Id\"\n        }, {\n            key: 'password',\n            type: PASSWORD_FIELD,\n            initialValue: this.state.integrateData.password,\n            required: true,\n            label: \"Password\"\n        }];\n        const taskIntegrateFormProp = {\n            method : 'post',\n            successFn : function(data){\n                that.loadData();\n            },\n            errorFn : function (){\n\n            },\n            action: interpolate(SAVE_CREDENTIALS, [this.props.user.id]),\n        };\n        const TestFormLayout = Form.create()(DynamicFieldsForm);\n        return <Row>\n            <Card>\n                <h2>My Integrations</h2>\n                <Tabs>\n                    <TabPane tab={<span><Icon type=\"check-circle\"/>Task Tracker</span>} key=\"Complaints\">\n                        <TestFormLayout fields={taskIntegrateFormFields} formProp={taskIntegrateFormProp}/>\n                    </TabPane>\n                    {/*<TabPane tab={<span><Icon type=\"phone\"/>Calling</span>} key=\"observations\">*/}\n                    {/*    /!*<TableData {...this.props} id={EMR_OBSERVATIONS} name=\"Observations\"/>*!/*/}\n                    {/*</TabPane>*/}\n                </Tabs>\n\n            </Card>\n        </Row>\n    }\n}\n","import React from \"react\";\nimport PrintSettings from \"../printout/PrintSettings\";\nimport {Card} from 'antd';\n\nexport default class MailPDFSettings extends React.Component {\n    constructor(props) {\n        super(props);\n\n    }\n\n    render() {\n        return <div>\n            <h2>Email PDF Settings</h2>\n            <Card>\n                <PrintSettings sub_type={\"INVOICE\"}\n                               active_practiceId={this.props.active_practiceId} type={\"MAIL\"}/>\n            </Card>\n        </div>\n    }\n}\n","import React from \"react\";\nimport DynamicFieldsForm from \"../../../common/DynamicFieldsForm\";\nimport {Card, Form} from \"antd\";\nimport {\n    INPUT_FIELD,\n    MULTI_SELECT_FIELD,\n    NUMBER_FIELD,\n    SELECT_FIELD,\n    SINGLE_IMAGE_UPLOAD_FIELD,\n    SUCCESS_MSG_TYPE\n} from \"../../../../constants/dataKeys\";\nimport {displayMessage, getAPI, interpolate} from \"../../../../utils/common\";\nimport {BED_PACKAGES, ROOM_TYPE, TAXES} from \"../../../../constants/api\";\n\nexport default class AddorEditBedPackages extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            editPackage: this.props.editPackage ? this.props.editPackage : null,\n            roomTypes: [],\n            taxes: []\n        }\n    }\n\n    componentDidMount() {\n        this.loadRequiredData();\n        this.loadTaxes();\n    }\n\n    loadRequiredData = () => {\n        var that = this;\n        let successFn = function (data) {\n            that.setState({\n                roomTypes: data,\n            })\n        };\n        let errorFn = function () {\n        };\n        getAPI(interpolate(ROOM_TYPE, [this.props.active_practiceId]), successFn, errorFn);\n\n    }\n\n    loadTaxes() {\n        var that = this;\n        let successFn = function (data) {\n            that.setState({\n                taxes: data,\n            })\n        };\n        let errorFn = function () {\n        };\n        getAPI(interpolate(TAXES, [this.props.active_practiceId]), successFn, errorFn);\n\n    }\n\n    render() {\n        let that = this;\n        let BedPackageForm = Form.create()(DynamicFieldsForm);\n        let fields = [{\n            label: \"Package Name\",\n            key: 'name',\n            required: true,\n            initialValue: this.props.editPackage ? this.props.editPackage.name : null,\n            type: INPUT_FIELD\n        }, {\n            label: \"Days of Booking\",\n            key: 'no_of_days',\n            required: true,\n            initialValue: this.props.editPackage ? this.props.editPackage.no_of_days : null,\n            type: NUMBER_FIELD,\n            follow: 'INR'\n        }, {\n            label: \"Normal Price\",\n            key: 'normal_price',\n            required: true,\n            initialValue: this.props.editPackage ? (this.props.editPackage.normal_price + this.props.editPackage.normal_tax_value).toFixed(2) : null,\n            type: NUMBER_FIELD,\n            follow: 'INR',\n        }, {\n            label: \"Tatkal Price\",\n            key: 'tatkal_price',\n            required: true,\n            initialValue: this.props.editPackage ? (this.props.editPackage.tatkal_price + this.props.editPackage.tatkal_tax_value).toFixed(2) : null,\n            type: NUMBER_FIELD,\n            follow: 'INR'\n        }, {\n            label: \"Image\",\n            key: 'image',\n            initialValue: this.props.editPackage ? this.props.editPackage.image : null,\n            type: SINGLE_IMAGE_UPLOAD_FIELD,\n        }, {\n            label: \"Room Type\",\n            key: 'room',\n            required: true,\n            initialValue: this.props.editPackage ? this.props.editPackage.room : null,\n            type: SELECT_FIELD,\n            options: this.state.roomTypes.map(room => Object.create({label: room.name, value: room.id}))\n        }, {\n            label: \"Taxes\",\n            key: 'taxes',\n            initialValue: this.props.editPackage && this.props.editPackage.taxes ? this.props.editPackage.taxes.map(item => item.id) : [],\n            type: MULTI_SELECT_FIELD,\n            options: this.state.taxes.map(tax => Object.create({\n                label: tax.name + \"(\" + tax.tax_value + \"%)\",\n                value: tax.id\n            }))\n        }];\n        let formProps = {\n            method: \"post\",\n            action: interpolate(BED_PACKAGES, [this.props.active_practiceId]),\n            successFn: function () {\n                displayMessage(SUCCESS_MSG_TYPE, \"Package Saved Successfully\");\n                if (that.props.loadData)\n                    that.props.loadData();\n                that.props.history.replace('/settings/bed-packages');\n            }, errorFn: function () {\n\n            }\n        }\n        let defaultValues = [];\n        if (this.state.editPackage) {\n            defaultValues.push({key: 'id', value: this.state.editPackage.id})\n        }\n        return <div>\n            <Card>\n                <BedPackageForm fields={fields} formProp={formProps}\n                                defaultValues={defaultValues}\n                                title={this.state.editPackage ? \"Edit Bed Package\" : \"Add Bed Packages\"} {...this.props}/>\n            </Card>\n        </div>\n    }\n}\n","import React from \"react\";\nimport {Button, Card, Divider, Icon, Popconfirm} from 'antd';\nimport {Link, Redirect, Route, Switch} from \"react-router-dom\";\nimport CustomizedTable from \"../../../common/CustomizedTable\";\nimport AddorEditBedPackages from \"./AddorEditBedPackages\";\nimport {getAPI, interpolate, makeFileURL, postAPI} from \"../../../../utils/common\";\nimport {BED_PACKAGES} from \"../../../../constants/api\";\n\nexport default class BedPackages extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            loading: false,\n            packages: []\n        }\n    }\n\n    componentDidMount() {\n        this.loadData();\n    }\n\n    loadData = () => {\n        let that = this;\n        let successFn = function (data) {\n            that.setState({\n                loading: false,\n                packages: data\n            })\n        }\n        let errorFn = function () {\n            that.setState({\n                loading: false,\n            })\n        }\n        getAPI(interpolate(BED_PACKAGES, [this.props.active_practiceId]), successFn, errorFn);\n    }\n\n    deleteObject(record) {\n        let that = this;\n        let reqData = record;\n        reqData.is_active = false;\n        let successFn = function (data) {\n            that.loadData();\n        }\n        let errorFn = function () {\n        }\n        postAPI(interpolate(BED_PACKAGES, [this.props.active_practiceId]), reqData, successFn, errorFn);\n    }\n\n    editObject = (record) => {\n        this.setState({\n            editPackage: record,\n            loading: false\n        });\n        this.props.history.push('/settings/bed-packages/edit')\n    }\n\n    render() {\n        let that = this;\n        let columns = [{\n            dataIndex: 'image',\n            key: 'image',\n            render: (value) => value ?\n                <img src={makeFileURL(value)} alt=\"\" style={{maxWidth: 200, maxHeight: 100}}/> : null\n        }, {\n            title: \"Package Name\",\n            dataIndex: 'name',\n            key: 'name'\n        }, {\n            title: \"Days\",\n            dataIndex: 'no_of_days',\n            key: 'no_of_days'\n        }, {\n            title: \"Normal Price+tax (INR)\",\n            dataIndex: 'normal_price',\n            key: 'normal_price',\n            render: (value, record) => (<p>{(record.normal_price + record.normal_tax_value).toFixed(2)}</p>\n\n            ),\n        }, {\n            title: \"Tatkal Price+tax (INR)\",\n            dataIndex: 'tatkal_price',\n            key: 'tatkal_price',\n            render: (value, record) => (<p>{(record.tatkal_price + record.tatkal_tax_value).toFixed(2)}</p>)\n        }, {\n            title: 'Action',\n            key: 'action',\n            render: (text, record) => (\n                <span>\n                    <a onClick={() => this.editObject(record)}>\n                Edit</a>\n                <Divider type=\"vertical\"/>\n                  <Popconfirm title=\"Are you sure delete this prescription?\" onConfirm={() => that.deleteObject(record)}\n                              okText=\"Yes\" cancelText=\"No\">\n                      <a>Delete</a>\n                  </Popconfirm>\n              </span>\n            ),\n        }]\n        return <Switch>\n            <Route path={\"/settings/bed-packages/add\"}\n                   render={(route) => <AddorEditBedPackages {...this.props} {...route}\n                                                            loadData={this.loadData}/>}/>\n            <Route path={\"/settings/bed-packages/edit\"}\n                   render={(route) => (this.state.editPackage ?\n                       <AddorEditBedPackages {...this.state} {...this.props} {...route} loadData={this.loadData}/> :\n                       <Redirect to={\"/settings/bed-packages\"}/>)\n                   }/>\n            <Route>\n                <Card\n                    title={<h4>Bed Packages <Link to={\"/settings/bed-packages/add\"}><Button style={{float: 'right'}}\n                                                                                            type={\"primary\"}><Icon\n                        type={\"plus\"}/> Add</Button></Link></h4>}>\n                    <CustomizedTable dataSource={this.state.packages} loading={this.state.loading}\n                                     columns={columns}/>\n                </Card>\n            </Route>\n        </Switch>\n    }\n}\n","import React from \"react\";\nimport DynamicFieldsForm from \"../../../common/DynamicFieldsForm\";\nimport {Button, Card, Divider, Form, Modal, Popconfirm} from \"antd\";\nimport {INPUT_FIELD, NUMBER_FIELD, SUCCESS_MSG_TYPE} from \"../../../../constants/dataKeys\";\nimport {ROOM_TYPE} from \"../../../../constants/api\";\nimport {displayMessage, getAPI, interpolate, postAPI} from \"../../../../utils/common\";\nimport CustomizedTable from \"../../../common/CustomizedTable\";\n\nclass RoomTypes extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            redirect: false,\n            visible: false,\n            rooms: null,\n            loading: true,\n            showDeleted: false,\n            deletedLoading: false,\n            deletedRooms: [],\n            editObj: {}\n        };\n        this.loadData = this.loadData.bind(this);\n        this.deleteObject = this.deleteObject.bind(this);\n\n    }\n\n    componentDidMount() {\n        this.loadData();\n    }\n\n    loadData(deleted = false) {\n        var that = this;\n        let successFn = function (data) {\n            console.log(\"get table\");\n            if (deleted) {\n                that.setState({\n                    deletedRooms: data,\n                    deletedLoading: false\n                })\n            } else {\n                that.setState({\n                    rooms: data,\n                    loading: false\n                })\n            }\n        };\n        let errorFn = function () {\n            if (deleted) {\n                that.setState({\n                    deletedLoading: false\n                })\n            } else {\n                that.setState({\n                    loading: false\n                })\n            }\n        };\n        if (deleted) {\n            getAPI(interpolate(ROOM_TYPE, [this.props.active_practiceId]), successFn, errorFn, {\n                deleted: true,\n                practice: this.props.active_practiceId\n            });\n        } else {\n            getAPI(interpolate(ROOM_TYPE, [this.props.active_practiceId]), successFn, errorFn);\n        }\n    }\n\n    changeRedirect() {\n        var redirectVar = this.state.redirect;\n        this.setState({\n            redirect: !redirectVar,\n        });\n    }\n\n    editTax(value) {\n        this.setState({\n            editObj: value,\n            visible: true\n        })\n    }\n\n    handleCancel = () => {\n        this.setState({visible: false});\n    }\n\n    deleteObject(record, type) {\n        let that = this;\n        let reqData = record;\n        reqData.is_active = type;\n        let successFn = function (data) {\n            that.loadData();\n            if (that.state.showDeleted) {\n                that.loadData(true);\n            }\n        }\n        let errorFn = function () {\n        };\n        postAPI(interpolate(ROOM_TYPE, [this.props.active_practiceId]), reqData, successFn, errorFn)\n    }\n\n    showDeletedExpenses = () => {\n        this.setState({\n            showDeleted: true,\n            deletedLoading: true\n        });\n        this.loadData(true)\n    }\n\n    render() {\n        let that = this;\n        const columns = [{\n            title: 'Room Type',\n            dataIndex: 'name',\n            key: 'name',\n        },{\n            title: 'Normal Bed Count',\n            dataIndex: 'normal_seats',\n            key: 'normal_seats',\n        },{\n            title: 'Tatkal Bed Count',\n            dataIndex: 'tatkal_seats',\n            key: 'tatkal_seats',\n        }, {\n            title: 'Action',\n            key: 'action',\n            render: (text, record) => (\n                record.is_active ? <span>\n\n              <a onClick={() => this.editTax(record)}>  Edit</a>\n                <Divider type=\"vertical\"/>\n                <Popconfirm title=\"Are you sure to delete this?\"\n                            onConfirm={() => that.deleteObject(record, false)} okText=\"Yes\" cancelText=\"No\">\n                  <a>Delete</a>\n              </Popconfirm>\n              </span> : <span>\n                    <Popconfirm title=\"Are you sure show this?\"\n                                onConfirm={() => that.deleteObject(record, true)} okText=\"Yes\" cancelText=\"No\">\n                  <a>Show</a>\n              </Popconfirm>\n                </span>\n            ),\n        }];\n        const fields = [{\n            label: \"Room Type\",\n            key: \"name\",\n            required: true,\n            type: INPUT_FIELD\n        }, {\n            label: \"Normal Bed Count\",\n            key: \"normal_seats\",\n            required: true,\n            type: NUMBER_FIELD,\n            min: 0\n        }, {\n            label: \"Tatkal Bed Count\",\n            key: \"tatkal_seats\",\n            required: true,\n            type: NUMBER_FIELD,\n            min: 0\n        },];\n        const editfields = [{\n            label: \"Room Type\",\n            key: \"name\",\n            required: true,\n            initialValue: this.state.editObj.name,\n            type: INPUT_FIELD\n        }, {\n            label: \"Normal Bed Count\",\n            key: \"normal_seats\",\n            required: true,\n            initialValue: this.state.editObj.normal_seats,\n            type: NUMBER_FIELD,\n            min: 0\n        }, {\n            label: \"Tatkal Bed Count\",\n            required: true,\n            initialValue: this.state.editObj.tatkal_seats,\n            key: \"tatkal_seats\",\n            type: NUMBER_FIELD,\n            min: 0\n        },];\n        const formProp = {\n            successFn: function (data) {\n                that.handleCancel();\n                that.loadData();\n                console.log(data);\n                console.log(\"sucess\");\n                displayMessage(SUCCESS_MSG_TYPE, \"success\");\n            },\n            errorFn: function () {\n\n            },\n            action: interpolate(ROOM_TYPE, [this.props.active_practiceId]),\n            method: \"post\",\n        }\n        const defaultValues = [{\"key\": \"practice\", \"value\": this.props.active_practiceId}];\n        const editFormDefaultValues = [{\"key\": \"practice\", \"value\": this.props.active_practiceId}, {\n            \"key\": \"id\",\n            \"value\": this.state.editObj.id\n        }];\n        const TestFormLayout = Form.create()(DynamicFieldsForm);\n        return <div>\n            <h2>Room Types</h2>\n            <Card>\n                <TestFormLayout defaultValues={defaultValues} formProp={formProp} fields={fields}/>\n                <Divider/>\n                <CustomizedTable loading={this.state.loading} columns={columns} dataSource={this.state.rooms}/>\n                {/*{this.state.showDeleted ?*/}\n                {/*<div>*/}\n                {/*<CustomizedTable loading={this.state.deletedLoading} columns={columns}*/}\n                {/*dataSource={this.state.deletedExpenses}/>*/}\n                {/*</div> :*/}\n                {/*<h4><a onClick={() => this.showDeletedExpenses()}>Show Deleted Expenses</a></h4>}*/}\n            </Card>\n            <Modal\n                visible={this.state.visible}\n                footer={null}\n                onCancel={this.handleCancel}\n            >\n\n                <TestFormLayout title=\"Edit Room Type\" defaultValues={editFormDefaultValues} formProp={formProp}\n                                fields={editfields}/>\n                <Button key=\"back\" onClick={this.handleCancel}>Return</Button>,\n\n            </Modal>\n        </div>\n    }\n}\n\nexport default RoomTypes;\n","import React from \"react\";\nimport DynamicFieldsForm from \"../../../common/DynamicFieldsForm\";\nimport {Form, Card, message} from \"antd\";\nimport {\n    CHECKBOX_FIELD,\n    SUCCESS_MSG_TYPE,\n    INPUT_FIELD,\n    RADIO_FIELD,\n    NUMBER_FIELD,\n    SELECT_FIELD\n} from \"../../../../constants/dataKeys\";\nimport {OFFERS} from \"../../../../constants/api\";\nimport {getAPI, displayMessage, deleteAPI, interpolate} from \"../../../../utils/common\";\nimport {Redirect} from 'react-router-dom'\n\n\nclass AddOffer extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            redirect: false,\n            fields: [{\n                label: \"Offer Name \",\n                key: \"code\",\n                placeholder:\"Offer Name\",\n                required: true,\n                type: INPUT_FIELD\n            }, {\n                label: \"Description \",\n                key: \"description\",\n                placeholder:\"E.g. 20% off on all services\",\n                type: INPUT_FIELD\n            }, {\n                label: \"Discount\",\n                key: \"discount\",\n                required: true,\n                type: NUMBER_FIELD,\n                // follow:'%'\n            }, {\n                label: \"Discount Unit\",\n                key: 'unit',\n                required: true,\n                options: [{label: 'Percent', value: '%'}, {label: 'Rupees', value: 'INR'}],\n                type: SELECT_FIELD,\n                initialValue: '%'\n            }]\n        }\n        this.changeRedirect = this.changeRedirect.bind(this);\n\n    }\n\n    changeRedirect() {\n        var redirectVar = this.state.redirect;\n        this.setState({\n            redirect: !redirectVar,\n        });\n    }\n\n    render() {\n        let that = this;\n        const formProp = {\n            successFn: function (data) {\n                displayMessage(SUCCESS_MSG_TYPE, \"success\")\n                if (that.props.loadData)\n                    that.props.loadData();\n                if (that.props.history){\n                    that.props.history.replace(\"/settings/loyalty\");\n                }\n            },\n            errorFn: function () {\n\n            },\n            action: interpolate(OFFERS, [this.props.active_practiceId]),\n            method: \"post\",\n            beforeSubmit: function (data) {\n                console.log(data)\n            }\n        }\n        const TestFormLayout = Form.create()(DynamicFieldsForm);\n        return <div>\n            <TestFormLayout formProp={formProp}\n                            fields={this.state.fields} {...this.props}/>\n            {this.state.redirect && <Redirect to='/settings/loyalty'/>}\n\n        </div>\n    }\n}\n\nexport default AddOffer;\n","import React from \"react\";\nimport {Button, Card, Divider, Icon, Popconfirm, Row,} from \"antd\";\nimport {Link} from \"react-router-dom\";\nimport {OFFERS} from \"../../../../constants/api\";\nimport {getAPI, interpolate, postAPI} from \"../../../../utils/common\";\nimport CustomizedTable from \"../../../common/CustomizedTable\";\nimport AddOffer from \"./AddOffer\";\n\nclass Offers extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            offers: null,\n            loading: true\n        }\n        this.loadData = this.loadData.bind(this);\n        this.deleteObject = this.deleteObject.bind(this);\n    }\n\n    componentWillMount() {\n        this.loadData()\n    }\n\n    loadData() {\n        var that = this;\n        let successFn = function (data) {\n            console.log(\"get table\");\n            that.setState({\n                offers: data,\n                loading: false\n            })\n        };\n        let errorFn = function () {\n            that.setState({\n                loading: true\n            })\n        };\n        getAPI(interpolate(OFFERS, [this.props.active_practiceId]), successFn, errorFn);\n    }\n\n    deleteObject(record) {\n        let that = this;\n        let reqData = record;\n        reqData.is_active = false;\n        let successFn = function (data) {\n            that.loadData();\n        }\n        let errorFn = function () {\n        }\n        postAPI(interpolate(OFFERS, [this.props.active_practiceId]), reqData, successFn, errorFn);\n    }\n\n    render() {\n        let that = this;\n        const columns = [{\n            title: 'Name',\n            dataIndex: 'code',\n            key: 'code',\n        }, {\n            title: 'Description',\n            dataIndex: 'description',\n            key: 'description',\n        }, {\n            title: 'Discount',\n            dataIndex: 'discount',\n            key: 'discount',\n        }, {\n            title: 'Discount Unit',\n            dataIndex: 'unit',\n            key: 'unit'\n        }, {\n            title: 'Action',\n            key: 'action',\n            render: (text, record) => (\n                <Popconfirm title=\"Are you sure delete this Offer?\" onConfirm={() => that.deleteObject(record)}\n                            okText=\"Yes\" cancelText=\"No\">\n                    <a>\n                        Delete\n                    </a>\n                </Popconfirm>\n            ),\n        }];\n        return <Row>\n            {/*<h2>All Offers*/}\n            {/*<Link to=\"/settings/loyalty/add\">*/}\n            {/*<Button type=\"primary\" style={{float: 'right'}}>*/}\n            {/*<Icon type=\"plus\"/>&nbsp;Add*/}\n            {/*</Button>*/}\n            {/*</Link>*/}\n            {/*</h2>*/}\n            <AddOffer {...this.props} loadData={this.loadData}/>\n            <Divider/>\n            <CustomizedTable loading={this.state.loading} columns={columns} dataSource={this.state.offers}/>\n        </Row>\n    }\n}\n\nexport default Offers;\n","import React from \"react\";\nimport {Form, Row} from 'antd';\nimport DynamicFieldsForm from \"../../../common/DynamicFieldsForm\";\nimport {INPUT_FIELD, NUMBER_FIELD, SUCCESS_MSG_TYPE} from \"../../../../constants/dataKeys\";\nimport {MEMBERSHIP_API, OFFERS} from \"../../../../constants/api\";\nimport {displayMessage, interpolate} from \"../../../../utils/common\";\n\nexport default class AddMembership extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {}\n    }\n\n    render() {\n        const fields = [{\n            label: \"Membership Name \",\n            key: \"name\",\n            placeholder:\"Membership Name\",\n            required: true,\n            type: INPUT_FIELD\n        }, {\n            label: \"Fee\",\n            key: \"fee\",\n            required: true,\n            type: NUMBER_FIELD,\n            follow: 'INR'\n        }, {\n            label: \"Benefit\",\n            key: \"benefit\",\n            required: true,\n            type: NUMBER_FIELD,\n            follow: '%'\n        }, {\n            label: \"Validity\",\n            key: 'validity',\n            required: true,\n            type: NUMBER_FIELD,\n            follow: 'Months',\n\n        }];\n        let that = this;\n        const formProp = {\n            successFn: function (data) {\n                displayMessage(SUCCESS_MSG_TYPE, \"success\")\n                if (that.props.loadData)\n                    that.props.loadData();\n                if (that.props.history){\n                    that.props.history.replace(\"/settings/loyalty\");\n                }\n            },\n            errorFn: function () {\n\n            },\n            action: interpolate(MEMBERSHIP_API, [this.props.active_practiceId]),\n            method: \"post\",\n        };\n        const formDefaultValues = [{\"key\": \"practice\", \"value\": this.state.active_practiceId}];\n        const AddForm = Form.create()(DynamicFieldsForm);\n        return <Row>\n            <AddForm fields={fields} formProp={formProp} defaultValues={formDefaultValues} {...this.props}/>\n        </Row>\n    }\n}\n","import React from \"react\";\nimport {Divider, Popconfirm, Row} from 'antd';\nimport CustomizedTable from \"../../../common/CustomizedTable\";\nimport {getAPI, interpolate, postAPI} from \"../../../../utils/common\";\nimport {MEMBERSHIP_API, OFFERS} from \"../../../../constants/api\";\nimport AddMembership from \"./AddMembership\";\n\nexport default class Membership extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            membership: []\n        }\n    }\n\n    componentDidMount() {\n        this.loadData();\n    }\n\n    loadData = () => {\n        let that = this;\n        let successFn = function (data) {\n            that.setState({\n                membership: data\n            })\n        }\n        let errorFn = function () {\n\n        }\n        getAPI(interpolate(MEMBERSHIP_API, [this.props.active_practiceId]), successFn, errorFn);\n    }\n\n    deleteObject(record) {\n        let that = this;\n        let reqData = record;\n        reqData.is_active = false;\n        let successFn = function (data) {\n            that.loadData();\n        }\n        let errorFn = function () {\n        }\n        postAPI(interpolate(MEMBERSHIP_API, [this.props.active_practiceId]), reqData, successFn, errorFn);\n    }\n\n    render() {\n        let that = this;\n        const columns = [{\n            title: 'Name',\n            dataIndex: 'name',\n            key: 'name',\n        }, {\n            title: 'Fee (INR)',\n            dataIndex: 'fee',\n            key: 'fee',\n        }, {\n            title: 'Benefit (%)',\n            dataIndex: 'benefit',\n            key: 'benefit',\n        }, {\n            title: 'Opening Balance (INR)',\n            dataIndex: 'fee',\n            key: 'opening',\n            render: (item, record) => <span>\n                {record.fee + (record.fee * record.benefit / 100)}\n            </span>\n        }, {\n            title: 'Validity (Months)',\n            dataIndex: 'validity',\n            key: 'validity'\n        }, {\n            title: 'Action',\n            key: 'action',\n            render: (text, record) => (\n                <Popconfirm title=\"Are you sure delete this prescription?\" onConfirm={() => that.deleteObject(record)}\n                            okText=\"Yes\" cancelText=\"No\">\n                    <a>\n                        Delete\n                    </a>\n                </Popconfirm>\n            ),\n        }];\n        return <Row>\n            <AddMembership {...this.props} loadData={this.loadData}/>\n            <Divider/>\n            <CustomizedTable loading={this.state.loading} columns={columns} dataSource={this.state.membership}/>\n        </Row>\n    }\n}\n","import React from \"react\";\nimport {Alert, Button, Card, DatePicker, Form, Input, InputNumber, Row, Select} from \"antd\";\nimport {displayMessage, getAPI, interpolate, postAPI} from \"../../../../../utils/common\";\nimport {PROMO_CODE, SEARCH_PATIENT} from \"../../../../../constants/api\";\nimport moment from \"moment\";\nimport {CURRENCY_TYPE} from \"../../../../../constants/hardData\";\nimport {SUCCESS_MSG_TYPE} from \"../../../../../constants/dataKeys\";\n\nclass AddOrEdiPromoCode extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            editPromoCode: [],\n            patientList: [],\n            loading: false,\n        };\n    }\n\n\n    loadPatient = (value) => {\n        let that = this;\n        let successFn = function (data) {\n            if (data.results.length > 0) {\n                that.setState({\n                    patientList: data.results,\n                })\n            }\n        };\n        let errorFn = function () {\n        };\n        if (value) {\n            getAPI(interpolate(SEARCH_PATIENT, [value]), successFn, errorFn);\n        }\n\n    };\n\n    handleSubmit = (e) => {\n        let that = this;\n        that.setState({\n            loading: true\n        });\n        e.preventDefault();\n        this.props.form.validateFields((err, values) => {\n            if (!err) {\n                let reqData = values;\n                reqData.practice = that.props.active_practiceId;\n                let successFn = function (data) {\n                    that.setState({\n                        loading: false,\n                    });\n                    displayMessage(SUCCESS_MSG_TYPE, \"Successfully Created!\")\n                    that.props.form.resetFields();\n                    that.props.loadData();\n                    if (that.props.history){\n                        that.props.history.replace(\"/settings/loyalty\");\n                    }\n                };\n                let errorFn = function () {\n\n                };\n\n                postAPI(PROMO_CODE, reqData, successFn, errorFn)\n\n            }\n        })\n    };\n\n    render() {\n        const {patientList} = this.state;\n\n        const formItemLayout = {\n            labelCol: {span: 8},\n            wrapperCol: {span: 14},\n        };\n        const {getFieldDecorator} = this.props.form;\n\n\n        return (<div>\n                <Form onSubmit={this.handleSubmit}>\n                    <Form.Item label={\"Promo Code\"} {...formItemLayout} key={'promo_code'}>\n                        {getFieldDecorator('promo_code', {initialValue: ''})\n                        (<Input placeholder={\"Promo Code\"}/>)\n                        }\n                    </Form.Item>\n\n                    <Form.Item label={\"Promo Code Value\"} {...formItemLayout} key={'code_value'}>\n                        {getFieldDecorator('code_value', {initialValue: ''})\n                        (<InputNumber placeholder={\"Promo Code Value\"}/>)\n                        }\n                    </Form.Item>\n\n                    <Form.Item label={\"Code Type\"} {...formItemLayout} key={'code_type'}>\n                        {getFieldDecorator('code_type', {initialValue: ''})\n                        (<Select placeholder={\"Code Type\"} style={{width: '100%'}}>\n\n                            {CURRENCY_TYPE.map(option => (\n                                <Select.Option\n                                    value={option.value}>{option.label} ({option.value})</Select.Option>))}\n                        </Select>)\n                        }\n                    </Form.Item>\n\n                    <Form.Item label={\"Min Order\"} {...formItemLayout} key={'minimum_order'}>\n                        {getFieldDecorator('minimum_order', {initialValue: ''})\n                        (<InputNumber placeholder={\"Min Order\"}/>)\n                        }\n                    </Form.Item>\n\n                    <Form.Item label={\"Max Discount\"} {...formItemLayout} key={'maximum_discount'}>\n                        {getFieldDecorator('maximum_discount', {initialValue: ''})\n                        (<InputNumber placeholder={\"Min Order\"}/>)\n                        }\n                    </Form.Item>\n\n                    <Form.Item label={\"Expiry Date\"} {...formItemLayout} key={'expiry_date'}>\n\n                        {getFieldDecorator('expiry_date', {initialValue: moment()})\n                        (<DatePicker format=\"YYYY/MM/DD\" allowClear={false}/>)\n                        }\n                    </Form.Item>\n\n\n                    <Form.Item label={\"Patients\"} {...formItemLayout} key={'patient'}>\n                        {getFieldDecorator('patients', {initialValue: []})\n                        (<Select mode={\"multiple\"}\n                                 placeholder=\"Select Patient\" style={{width: '100%'}}\n                                 showSearch onSearch={this.loadPatient} filterOption={false}>\n                            {patientList.map(option => (\n                                <Select.Option\n                                    value={option.id}>{option.user.first_name} ({option.custom_id})</Select.Option>))}\n                        </Select>)\n                        }\n                        <span className=\"ant-form-text\">If no patient is selected, promo code will be available to all patients.</span>\n                    </Form.Item>\n\n                    <Form.Item {...formItemLayout}>\n                        <Button type=\"primary\" htmlType=\"submit\" style={{margin: 5}}>\n                            Submit\n                        </Button>\n                        {this.props.history ?\n                            <Button style={{margin: 5}} onClick={() => this.props.history.goBack()}>\n                                Cancel\n                            </Button> : null}\n                    </Form.Item>\n\n                </Form>\n            </div>\n        )\n    }\n}\n\nexport default Form.create()(AddOrEdiPromoCode);\n","import React from \"react\";\nimport {Divider, Popconfirm, Row, Table} from \"antd\";\nimport moment from \"moment\";\nimport AddOrEdiPromoCode from \"./AddOrEdiPromoCode\";\nimport {getAPI, interpolate, postAPI, putAPI} from \"../../../../../utils/common\";\nimport {PROMO_CODE, SINGLE_PROMO_CODE} from \"../../../../../constants/api\";\nimport InfiniteFeedLoaderButton from \"../../../../common/InfiniteFeedLoaderButton\";\n\n\nexport default class PromoCode extends React.Component{\n    constructor(props){\n        super(props);\n        this.state={\n            loading:false,\n            promoCode:[],\n        };\n\n    }\n    componentWillMount() {\n            this.loadData();\n    }\n\n    loadData =(page=1) =>{\n        let that =this;\n        this.setState({\n            loading:true,\n        });\n\n        let successFn =function (data) {\n            that.setState({\n                promoCode:data.results,\n                nextPage : data.next,\n                loading:false,\n            })\n        };\n        let errorFn =function () {\n            that.setState({\n                loading:false,\n            })\n        };\n\n        getAPI(interpolate(PROMO_CODE ,[this.props.active_practiceId] ),successFn ,errorFn,{page:page,practice:this.props.active_practiceId});\n    };\n\n    deleteObject =(record) =>{\n        let that = this;\n        let reqData ={\n            // id:record.id,\n            is_active:false\n        };\n        let successFn = function (data) {\n            that.loadData();\n        };\n\n        let errorFn = function () {\n\n        };\n        putAPI(interpolate(SINGLE_PROMO_CODE,[record.id]), reqData, successFn, errorFn);\n    };\n\n\n    render() {\n        const {promoCode ,loading } =this.state;\n\n        const columns =[\n            {\n                title:'Code Name',\n                dataIndex:'promo_code',\n                key:'promo_code',\n            },{\n                title:'Promo Code Value',\n                dataIndex:'promo_code',\n                key:'promo_code',\n            },{\n                title:'Type',\n                dataIndex:'code_type',\n                key:'code_type',\n            },{\n                title:'Min Order',\n                dataIndex:'minimum_order',\n                key:'minimum_order',\n\n            },{\n                title:'Max Discount',\n                dataIndex:'maximum_discount',\n                key:'maximum_discount',\n\n            },{\n                title:'Expiry Date',\n                dataIndex:'expiry_date',\n                render:(item,record)=>(moment(record.expiry_date).format('YYYY-MM-DD'))\n            },{\n                title:'Action',\n                render: (text, record) => (\n                    <Popconfirm title=\"Are you sure delete this promo code?\" onConfirm={() => this.deleteObject(record)}\n                                okText=\"Yes\" cancelText=\"No\">\n                        <a>\n                            Delete\n                        </a>\n                    </Popconfirm>\n                ),\n            }\n\n        ];\n        return(\n            <Row>\n                <AddOrEdiPromoCode {...this.props} loadData={this.loadData}/>\n                <Divider/>\n                <Table loading={loading} columns={columns} dataSource={promoCode} pagination={false}/>\n                <InfiniteFeedLoaderButton loading={this.state.loading} hidden={!this.state.nextPage} loaderFunction={()=>this.loadData(this.state.nextPage)}/>\n            </Row>\n        )\n    }\n}\n\n","import React from \"react\";\nimport {Card, Tabs, Row, Icon} from 'antd';\nimport Offers from \"./Offers\";\nimport Membership from \"./Membership\";\nimport PromoCode from \"./promo-code/PromoCode\";\n\nconst TabPane = Tabs.TabPane;\n\nexport default class LoyaltySettings extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {}\n    }\n\n    render() {\n        return <Row>\n            <h2>Loyalty Settings</h2>\n            <Card>\n                <Tabs>\n                    <TabPane tab={<span><Icon type=\"percentage\" />Offers</span>} key={\"#offers\"}>\n                        <Offers {...this.props}/>\n                    </TabPane>\n\n                    <TabPane tab={<span><Icon type=\"pound\" />Membership</span>} key={\"#membership\"}>\n                        <Membership {...this.props}/>\n                    </TabPane>\n\n                    <TabPane tab={<span><Icon type=\"pound\" />Promo Code</span>} key={\"#promocode\"}>\n                        <PromoCode {...this.props}/>\n                    </TabPane>\n                </Tabs>\n            </Card>\n        </Row>\n    }\n}\n","import React from \"react\";\nimport {Card, Divider, Row} from \"antd\";\nimport {Redirect, Route} from \"react-router-dom\";\nimport DynamicFieldsForm from \"../../../common/DynamicFieldsForm\";\nimport {Form} from \"antd/lib/index\";\nimport {\n    INPUT_FIELD,\n    NUMBER_FIELD,\n    SELECT_FIELD,\n    SUCCESS_MSG_TYPE, TEXT_FIELD\n} from \"../../../../constants/dataKeys\";\nimport {displayMessage, getAPI, interpolate} from \"../../../../utils/common\";\nimport {LABTEST_API, PRODUCT_MARGIN} from \"../../../../constants/api\";\n\nexport default class AddorEditLab extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            redirect: false,\n            editFields: (this.props.editTest ? this.props.editTest : null),\n            productMargin: []\n        }\n        this.changeRedirect = this.changeRedirect.bind(this);\n        this.loadProductMargin();\n    }\n\n    changeRedirect() {\n        var redirectVar = this.state.redirect;\n        this.setState({\n            redirect: !redirectVar,\n            editFields: {},\n        });\n    }\n\n    loadProductMargin() {\n        let that = this;\n        let successFn = function (data) {\n            that.setState({\n                productMargin: data\n            })\n        }\n        let errorFn = function () {\n\n        }\n        getAPI(PRODUCT_MARGIN, successFn, errorFn);\n    }\n\n    render() {\n        let that = this;\n        const TestFormLayout = Form.create()(DynamicFieldsForm);\n        const fields = [{\n            label: \"Test Name\",\n            key: \"name\",\n            placeholder:\"Test Name\",\n            type: INPUT_FIELD,\n            initialValue: (this.state.editFields ? this.state.editFields.name : null),\n            required: true\n        }, {\n            label: \"Cost\",\n            key: \"cost\",\n            type: NUMBER_FIELD,\n            initialValue: (this.state.editFields ? this.state.editFields.cost : null),\n            required: true,\n            follow: 'INR',\n            min: 1\n        }, {\n            label: 'MLM Margin Type',\n            type: SELECT_FIELD,\n            initialValue: (this.state.editFields ? this.state.editFields.margin : null),\n            key: 'margin',\n            required: true,\n            options: that.state.productMargin.map(margin => ({label: margin.name, value: margin.id}))\n        }, {\n            label: \"Instructions\",\n            key: \"instruction\",\n            placeholder:\"Test Instructions\",\n            initialValue: (this.state.editFields ? this.state.editFields.instruction : null),\n            type: TEXT_FIELD,\n        }];\n        const formProp = {\n            successFn: function (data) {\n                displayMessage(SUCCESS_MSG_TYPE, \"success\")\n                that.props.loadData();\n                if (that.props.history){\n                    that.props.history.replace(\"/settings/labs\");\n                }\n            },\n            errorFn: function () {\n\n            },\n            action: interpolate(LABTEST_API, [that.props.active_practiceId]),\n            method: \"post\",\n        };\n        let defaultValues = [];\n        if (this.state.editFields)\n            defaultValues.push({'key': 'id', 'value': this.state.editFields.id});\n        return <Row>\n            <Route exact path='/settings/labs/add'\n                   render={(route) => <TestFormLayout title=\"Add Lab\" changeRedirect={this.changeRedirect}\n                                                      formProp={formProp} fields={fields} {...route}/>}/>\n            <Route exact path='/settings/labs/edit'\n                   render={(route) => (this.state.editFields ?\n                       <TestFormLayout title=\"Add Lab\" defaultValues={defaultValues}\n                                       changeRedirect={this.changeRedirect}\n                                       {...route}\n                                       formProp={formProp} fields={fields}/> : <Redirect to={'/settings/labs'}/>)}/>\n            <Divider/>\n            {this.state.redirect && <Redirect to={'/settings/labs'}/>}\n        </Row>\n    }\n}\n","import React from \"react\";\nimport DynamicFieldsForm from \"../../../common/DynamicFieldsForm\";\nimport {Button, Card, Divider, Form, Icon, Popconfirm, Row, Table} from \"antd\";\nimport {CHECKBOX_FIELD, INPUT_FIELD, RADIO_FIELD, SELECT_FIELD} from \"../../../../constants/dataKeys\";\nimport {Link, Route, Switch} from \"react-router-dom\";\nimport {LABTEST_API, OFFERS, PRODUCT_MARGIN} from \"../../../../constants/api\";\nimport {getAPI, deleteAPI, interpolate, postAPI} from \"../../../../utils/common\";\nimport AddorEditLab from \"./AddorEditLab\";\nimport CustomizedTable from \"../../../common/CustomizedTable\";\nimport InfiniteFeedLoaderButton from \"../../../common/InfiniteFeedLoaderButton\";\n\nclass LabTest extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            tests: null,\n            editTest: null,\n            loading: true,\n            productMargin: null\n        };\n        this.editLabs = this.editLabs.bind(this);\n        this.loadData = this.loadData.bind(this);\n        this.deleteTest = this.deleteTest.bind(this);\n        this.loadProductMargin = this.loadProductMargin.bind(this);\n    }\n\n    componentDidMount() {\n        this.loadData();\n        this.loadProductMargin();\n    }\n\n    loadData(page=1) {\n        var that = this;\n        let successFn = function (data) {\n            console.log(\"get table\");\n            if(data.current)\n            that.setState({\n                next:data.next,\n                tests: data.results,\n                loading: false\n            })\n            else{\n                that.setState(function(prevState){return {\n                    next: data.next,\n                    tests: [...prevState.tests,...data.results],\n                    loading: false\n                }})\n            }\n        };\n        let errorFn = function () {\n            that.setState({\n                loading: false\n            })\n        };\n        getAPI(interpolate(LABTEST_API, [that.props.active_practiceId]), successFn, errorFn);\n    }\n\n    editLabs(record) {\n        let that = this;\n        this.setState({\n            editTest: record,\n            loading: false\n        }, function () {\n            that.props.history.push('/settings/labs/edit');\n        })\n\n\n    }\n\n    deleteTest(record) {\n        let that = this;\n        let reqData = record;\n        reqData.is_active = false;\n        let successFn = function (data) {\n            that.loadData();\n        }\n        let errorFn = function () {\n        }\n        postAPI(interpolate(LABTEST_API, [this.props.active_practiceId]), reqData, successFn, errorFn);\n    }\n\n    loadProductMargin() {\n        let that = this;\n        let successFn = function (data) {\n            that.setState({\n                productMargin: data\n            })\n        }\n        let errorFn = function () {\n\n        }\n        getAPI(PRODUCT_MARGIN, successFn, errorFn);\n    }\n\n    render() {\n        let that = this;\n        const product_margin = {}\n        if (this.state.productMargin) {\n            this.state.productMargin.forEach(function (margin) {\n                product_margin[margin.id] = (margin.name)\n            })\n        }\n        const columns = [{\n            title: 'Name',\n            dataIndex: 'name',\n            key: 'code',\n        }, {\n            title: 'Cost',\n            dataIndex: 'cost',\n            key: 'cost',\n        }, {\n            title: ' Test Instructions',\n            dataIndex: 'instruction',\n            key: 'instruction',\n        }, {\n            title: ' MLM Margin',\n            key: 'margin',\n            render: (text, record) => (\n                <span> {product_margin[record.margin]}</span>\n            )\n        }, {\n            title: 'Action',\n            key: 'action',\n            render: (text, record) => (\n                <span><a onClick={() => that.editLabs(record)}>\n                Edit</a>\n                <Divider type=\"vertical\"/>\n                    <Popconfirm title=\"Are you sure delete this test?\" onConfirm={() => that.deleteTest(record)}\n                                okText=\"Yes\" cancelText=\"No\">\n                        <a>Delete</a>\n                    </Popconfirm>\n              </span>\n            ),\n        }];\n        return <Row>\n            <Route exact path={'/settings/labs/add'}\n                   render={(route) => <AddorEditLab {...that.state}\n                                                    loadData={this.loadData}{...this.props} {...route}/>}/>\n            <Route exact path={'/settings/labs/edit'}\n                   render={(route) => <AddorEditLab {...that.state}\n                                                    loadData={this.loadData} {...this.props} {...route}/>}/>\n            <Route exact path={'/settings/labs'}>\n                <div>\n                    <Row>\n                        <h2>\n                            <Link to=\"/settings/labs/add\">\n                                <Button type=\"primary\" style={{float: 'right'}}>\n                                    <Icon type=\"plus\"/>&nbsp;Add\n                                </Button>\n                            </Link>\n                        </h2>\n                    </Row>\n                    <CustomizedTable columns={columns} dataSource={this.state.tests} pagination={false}/>\n                    <InfiniteFeedLoaderButton loading={this.state.loading} hidden={!this.state.next} loaderFunction={()=>this.loadData(this.state.next)}/>\n                </div>\n            </Route>\n\n        </Row>\n    }\n}\n\nexport default LabTest;\n","import React from \"react\";\nimport {Card, Divider, Row, Col, Input,Button,InputNumber,Select} from \"antd\";\nimport {Redirect, Route} from \"react-router-dom\";\nimport DynamicFieldsForm from \"../../../common/DynamicFieldsForm\";\nimport {LABTEST_API,LABPANEL_API} from \"../../../../constants/api\";\nimport {displayMessage, getAPI,postAPI ,interpolate,} from \"../../../../utils/common\";\nimport {Form} from \"antd/lib/index\";\nimport {WARNING_MSG_TYPE} from \"../../../../constants/dataKeys\";\nconst { Option } = Select;\nclass AddorEditLab extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n           panelCost:0,\n           tests:[],\n           selectedTest:{},\n        //    redirect:false,\n        };\n        this.loadTests = this.loadTests.bind(this);\n        this.handleCancel = this.handleCancel.bind(this);\n    }\n    componentDidMount() {\n        this.loadTests();\n    }\n\n    loadTests(){\n        let that = this;\n        let successFn = function (data) {\n            that.setState({\n                tests: data.results,\n                loading: false\n            })\n            console.log(JSON.stringify(that.state.tests));\n        };\n        let errorFn = function () {\n            that.setState({\n                loading: false\n            })\n        };\n        getAPI(interpolate(LABTEST_API, [that.props.active_practiceId]), successFn, errorFn);\n    }\n\n\n    onChangeHandler=(value)=>{\n        this.setState({\n\n            panelCost:value,\n        })\n    }\n    onChangeSelect = (e)=>{\n        this.setState(function(prevState){\n            if(prevState.selectedTest[e]){\n                displayMessage(WARNING_MSG_TYPE, \"Item Already Added\");\n                return {};\n            }\n            let testObject = null;\n            for(let i=0;i<prevState.tests.length;i++){\n                if(prevState.tests[i].id==e){\n                    testObject = prevState.tests[i];\n                    break;\n                }\n            }\n            if(testObject){\n                return {selectedTest:{...prevState.selectedTest,[e]:testObject}}\n            }\n          return {}\n\n\n        })\n\n    }\n    removeLabPanel = (id) => {\n        this.setState(function (prevState) {\n            return {\n\n            }\n        });\n        console.log(\"id\",id)\n    }\n\n    handleSubmit = (e) => {\n        e.preventDefault();\n        let that = this;\n        this.props.form.validateFields((err, formData) => {\n            if (!err) {\n                let reqData = {...formData ,tests:Object.keys(this.state.selectedTest)}\n                console.log(\"test\", reqData);\n                let successFn = function (data) {\n                    if (that.props.history){\n                        that.props.history.replace(\"/settings/labs\");\n                    }\n                };\n                let errorFn = function () {\n                };\n                postAPI(interpolate(LABPANEL_API, [that.props.active_practiceId]), reqData, successFn, errorFn);\n            }\n        });\n    }\n    onChangeCostCalculate(){\n\n    }\n    handleCancel(){\n        this.props.history.push('/settings/labs');\n    }\n    render() {\n        let that = this;\n        const formItemLayout = {\n            labelCol: {\n                xs: {span: 8},\n                sm: {span: 8},\n                md: {span: 8},\n                lg: {span: 8},\n            },\n            wrapperCol: {\n                xs: {span: 16},\n                sm: {span: 16},\n                md: {span: 16},\n                lg: {span: 16},\n            },\n        };\n        let testKeys = Object.keys(this.state.selectedTest);\n        let TotalCost =0;\n         testKeys.forEach(function(key){TotalCost+=parseInt(that.state.selectedTest[key].cost)});\n        const {getFieldDecorator} = this.props.form;\n        const testOption = this.state.tests.map((test) => <Select.Option value={test.id}>{test.name}</Select.Option>)\n        return <Row>\n            <Col span={18}>\n                <Form onSubmit={this.handleSubmit}>\n                    <Form.Item  label={\"Panel Name\"} {...formItemLayout}>\n                        {getFieldDecorator('name', {\n\n                        })(\n                        <Input />\n                        )}\n                    </Form.Item>\n\n                    <Form.Item label={(<span>Test Name</span>)} {...formItemLayout}>\n                        <Select style={{width:'100%'}} onChange={this.onChangeSelect} >\n                            {testOption}\n                        </Select>\n\n                        <div>{testKeys ? testKeys.map((key)=><p key={key}>{that.state.selectedTest[key].name} <span style={{paddingLeft: '50%'}}>{this.state.selectedTest[key].cost}</span>\n                           <Button icon={\"close\"} style={{float:'right'}} onClick={() => this.removeLabPanel(that.state.selectedTest[key].id)} type={\"danger\"} shape=\"circle\"\n                        size=\"small\"/></p>): null}</div>\n                    </Form.Item>\n\n                    <Form.Item  label={(<span>Panel Cost</span>)} {...formItemLayout}>\n                        {getFieldDecorator('cost', {\n                            initialValue:TotalCost,\n                            // onChange:this.onChangeHandler,\n\n                        })(\n                            <InputNumber/>\n\n                        )}\n                         <span className=\"ant-form-text\"> Total : {typeof TotalCost === 'number'  ? TotalCost : 0}</span>\n                    </Form.Item>\n\n                    <Form.Item>\n                        <Button type=\"primary\" htmlType=\"submit\">Submit</Button>\n                        &nbsp;&nbsp;&nbsp;\n                        <Button onClick={this.handleCancel}>Cancel</Button>\n                    </Form.Item>\n                </Form>\n            </Col>\n\n\n        </Row>\n    }\n}\nexport default Form.create()(AddorEditLab);\n","import React from \"react\";\nimport DynamicFieldsForm from \"../../../common/DynamicFieldsForm\";\nimport {Button, Card, Divider, Form, Icon, Popconfirm, Row, Table} from \"antd\";\nimport {CHECKBOX_FIELD, INPUT_FIELD, RADIO_FIELD, SELECT_FIELD} from \"../../../../constants/dataKeys\";\nimport {Link, Route, Switch} from \"react-router-dom\";\nimport {LABPANEL_API} from \"../../../../constants/api\";\nimport {getAPI, postAPI, interpolate,} from \"../../../../utils/common\";\nimport AddorEditLabPanel from \"./AddorEditLabPanel\";\nimport CustomizedTable from \"../../../common/CustomizedTable\";\nexport default class LabPanel extends React.Component{\n    constructor(props){\n        super(props);\n        this.state = {\n            labPanel:null,\n            editTest:null,\n            selectedTest:{},\n        }\n        this.loadLabPanel = this.loadLabPanel.bind(this);\n        this.editPanels = this.editPanels.bind(this);\n    }\n    componentDidMount() {\n        this.loadLabPanel();\n    }\n\n    loadLabPanel(){\n        let that =this;\n        let successFn=function(data){\n            that.setState({\n                labPanel:data,\n                loading:false\n            })\n        };\n        let errorFn = function(){\n            that.setState({\n\n            })\n        };\n        getAPI(interpolate(LABPANEL_API, [that.props.active_practiceId]), successFn, errorFn);\n    }\n\n    editPanels(record) {\n        let that = this;\n        this.setState({\n            editTest: record,\n            loading: false\n        }, function () {\n            that.props.history.push('/settings/labs/edit');\n        })\n\n\n    }\n    deleteLabPanel(record) {\n        let that = this;\n        let reqData = {...record, is_active:false,\n            tests:Object.keys(this.state.selectedTest)\n        }\n        let successFn = function (data) {\n            that.loadLabPanel();\n        }\n        let errorFn = function () {\n        }\n        postAPI(interpolate(LABPANEL_API, [this.props.active_practiceId]), reqData, successFn, errorFn);\n    }\n\n    render() {\n        let that = this;\n        const product_margin = {}\n        if (this.state.productMargin) {\n            this.state.productMargin.forEach(function (margin) {\n                product_margin[margin.id] = (margin.name)\n            })\n        }\n        const columns = [{\n            title: 'Name',\n            dataIndex: 'name',\n            key: 'code',\n        }, {\n            title: 'Cost',\n            dataIndex: 'cost',\n            key: 'cost',\n        }, {\n            title: 'Action',\n            key: 'action',\n            render: (text, record) => (\n                <span><a onClick={() => that.editPanels(record)}>\n                Edit</a>\n                <Divider type=\"vertical\"/>\n                    <Popconfirm title=\"Are you sure delete this test?\" onConfirm={() => that.deleteLabPanel(record)}\n                                okText=\"Yes\" cancelText=\"No\">\n                        <a>Delete</a>\n                    </Popconfirm>\n              </span>\n            ),\n        }];\n\n        const subColumns =[{\n            title: 'Name',\n            dataIndex: 'name',\n            key: 'code',\n        }, {\n            title: 'Cost',\n            dataIndex: 'cost',\n            key: 'cost',\n        }, {\n            title: ' Test Instructions',\n            dataIndex: 'instruction',\n            key: 'instruction',\n        }];\n        return <Row>\n            <Route exact path={'/settings/labs/add'}\n                   render={(route) => <AddorEditLabPanel {...that.state}\n                                                    loadData={this.loadData}{...this.props} {...route}/>}/>\n            <Route exact path={'/settings/labs/edit'}\n                   render={(route) => <AddorEditLabPanel {...that.state}\n                                                    loadData={this.loadData} {...this.props} {...route}/>}/>\n            <Route exact path={'/settings/labs'}>\n                <div>\n                    <Row>\n                        <h2>\n                            <Link to=\"/settings/labs/add\">\n                                <Button type=\"primary\" style={{float: 'right'}}>\n                                    <Icon type=\"plus\"/>&nbsp;Add\n                                </Button>\n                            </Link>\n                        </h2>\n                    </Row>\n                    <CustomizedTable loading={this.state.loading} columns={columns} expandedRowRender={record => <Card><Table pagination={false} columns={subColumns} dataSource={record.tests}/></Card>} dataSource={this.state.labPanel}/>\n                </div>\n            </Route>\n\n        </Row>\n    }\n}\n\n","import React from \"react\";\nimport {Card, Tabs} from 'antd';\nimport LabTest from \"./LabTest\";\nimport LabPanel from \"./LabPanel\";\n\nconst TabPane = Tabs.TabPane;\nexport default class LabTracking extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {}\n    }\n\n    render() {\n        return <div>\n            <h2>Lab Tracking</h2>\n            <Card>\n                <Tabs>\n                    <TabPane key={\"labTests\"} tab={\"Lab Tests\"}>\n                        <LabTest {...this.props}/>\n                    </TabPane>\n                    <TabPane key={\"labPanels\"} tab={\"Lab Panels\"}>\n                        <LabPanel {...this.props}/>\n                    </TabPane>\n                </Tabs>\n            </Card>\n        </div>\n    }\n}\n","import React from \"react\";\nimport DynamicFieldsForm from \"../../../common/DynamicFieldsForm\";\nimport {Form, Card} from \"antd\";\nimport {\n    INPUT_FIELD, MULTI_SELECT_FIELD,\n    NUMBER_FIELD,\n    SELECT_FIELD,\n    SINGLE_IMAGE_UPLOAD_FIELD,\n    SUCCESS_MSG_TYPE\n} from \"../../../../constants/dataKeys\";\nimport {displayMessage, getAPI, interpolate} from \"../../../../utils/common\";\nimport {BED_PACKAGES, MEDICINE_PACKAGES, ROOM_TYPE, TAXES} from \"../../../../constants/api\";\n\nexport default class AddorEditMedicinePackages extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            editPackage: this.props.editPackage ? this.props.editPackage : null,\n            taxes: []\n        }\n    }\n\n    componentDidMount() {\n        this.loadRequiredData();\n    }\n\n    loadRequiredData = () => {\n        var that = this;\n        let successFn = function (data) {\n            that.setState({\n                taxes: data,\n            })\n        };\n        let errorFn = function () {\n        };\n        getAPI(interpolate(TAXES, [this.props.active_practiceId]), successFn, errorFn);\n\n    }\n\n    render() {\n        let that = this;\n        let MedicinePackageForm = Form.create()(DynamicFieldsForm);\n        let fields = [{\n            label: \"Package Name\",\n            key: 'name',\n            required: true,\n            initialValue: this.props.editPackage ? this.props.editPackage.name : null,\n            type: INPUT_FIELD\n        }, {\n            label: \"Image\",\n            key: 'image',\n            initialValue: this.props.editPackage ? this.props.editPackage.image : null,\n            type: SINGLE_IMAGE_UPLOAD_FIELD,\n        }, {\n            label: \"Days of Booking\",\n            key: 'no_of_days',\n            required: true,\n            initialValue: this.props.editPackage ? this.props.editPackage.no_of_days : null,\n            type: NUMBER_FIELD,\n            follow: 'INR'\n        }, {\n            label: \"Price\",\n            key: 'price',\n            required: true,\n            initialValue: this.props.editPackage ? this.props.editPackage.final_price : null,\n            type: NUMBER_FIELD,\n            follow: 'INR'\n        },\n        // {\n        //     label: \"Final Price\",\n        //     key: 'final_price',\n        //     required: true,\n        //     initialValue: this.props.editPackage ? this.props.editPackage.final_price : null,\n        //     type: NUMBER_FIELD,\n        //     follow: 'INR'\n        // },\n         {\n            label: \"Taxes\",\n            key: 'taxes',\n            initialValue: this.props.editPackage && this.props.editPackage.taxes ? this.props.editPackage.taxes.map(item => item.id) : [],\n            type: MULTI_SELECT_FIELD,\n            options: this.state.taxes.map(tax => Object.create({\n                label: tax.name + \"(\" + tax.tax_value + \"%)\",\n                value: tax.id\n            }))\n        }];\n        let formProps = {\n            method: \"post\",\n            action: interpolate(MEDICINE_PACKAGES, [this.props.active_practiceId]),\n            successFn: function () {\n                displayMessage(SUCCESS_MSG_TYPE, \"Package Saved Successfully\");\n                if (that.props.loadData)\n                    that.props.loadData();\n                that.props.history.replace('/settings/medicine-packages');\n            }, errorFn: function () {\n\n            }\n        }\n        let defaultValues = [];\n        if (this.state.editPackage) {\n            defaultValues.push({key: 'id', value: this.state.editPackage.id})\n        }\n        return <div>\n            <Card>\n                <MedicinePackageForm fields={fields} formProp={formProps}\n                                     defaultValues={defaultValues}\n                                     title={this.state.editPackage ? \"Edit Medicine Package\" : \"Add Medicine Packages\"} {...this.props}/>\n            </Card>\n        </div>\n    }\n}\n","import React from \"react\";\nimport {Button, Card, Divider, Icon, Popconfirm} from 'antd';\nimport {Link, Redirect, Route, Switch} from \"react-router-dom\";\nimport CustomizedTable from \"../../../common/CustomizedTable\";\nimport {getAPI, interpolate, makeFileURL, postAPI} from \"../../../../utils/common\";\nimport {MEDICINE_PACKAGES} from \"../../../../constants/api\";\nimport AddorEditMedicinePackages from \"./AddorEditMedicinePackages\";\n\nexport default class MedicinePackages extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            loading: false,\n            packages: []\n        }\n    }\n\n    componentDidMount() {\n        this.loadData();\n    }\n\n    loadData = () => {\n        let that = this;\n        let successFn = function (data) {\n            that.setState({\n                loading: false,\n                packages: data\n            })\n        }\n        let errorFn = function () {\n            that.setState({\n                loading: false,\n            })\n        }\n        getAPI(interpolate(MEDICINE_PACKAGES, [this.props.active_practiceId]), successFn, errorFn);\n    }\n\n    deleteObject(record) {\n        let that = this;\n        let reqData = record;\n        reqData.is_active = false;\n        let successFn = function (data) {\n            that.loadData();\n        }\n        let errorFn = function () {\n        }\n        postAPI(interpolate(MEDICINE_PACKAGES, [this.props.active_practiceId]), reqData, successFn, errorFn);\n    }\n\n    editObject = (record) => {\n        this.setState({\n            editPackage: record,\n            loading: false\n        });\n        this.props.history.push('/settings/medicine-packages/edit')\n    }\n\n    render() {\n        let that = this;\n        let columns = [{\n            dataIndex: 'image',\n            key: 'image',\n            render: (value) => value ?\n                <img src={makeFileURL(value)} alt=\"\" style={{maxWidth: 200, maxHeight: 100}}/> : null\n        },{\n            title: \"Package Name\",\n            dataIndex: 'name',\n            key: 'name'\n        }, {\n            title: \"Days\",\n            dataIndex: 'no_of_days',\n            key: 'no_of_days'\n        }, {\n            title: \"Price (INR) + Tax\",\n            dataIndex: 'final_price',\n            key: 'price'\n        },\n        // {\n        //     title: \"Final Price (INR)\",\n        //     dataIndex: 'final_price',\n        //     key: 'final_price'\n        // },\n         {\n            title: 'Action',\n            key: 'action',\n            render: (text, record) => (\n                <span>\n                    <a onClick={() => this.editObject(record)}>\n                Edit</a>\n                <Divider type=\"vertical\"/>\n                  <Popconfirm title=\"Are you sure delete this item?\" onConfirm={() => that.deleteObject(record)}\n                              okText=\"Yes\" cancelText=\"No\">\n                      <a>Delete</a>\n                  </Popconfirm>\n              </span>\n            ),\n        }]\n        return <Switch>\n            <Route path={\"/settings/medicine-packages/add\"}\n                   render={(route) => <AddorEditMedicinePackages {...this.props} {...route}\n                                                                 loadData={this.loadData}/>}/>\n            <Route path={\"/settings/medicine-packages/edit\"}\n                   render={(route) => (this.state.editPackage ?\n                       <AddorEditMedicinePackages {...this.state} {...this.props} {...route}\n                                                  loadData={this.loadData}/> :\n                       <Redirect to={\"/settings/medicine-packages\"}/>)\n                   }/>\n            <Route>\n                <Card\n                    title={<h4>Medicine Packages <Link to={\"/settings/medicine-packages/add\"}><Button\n                        style={{float: 'right'}}\n                        type={\"primary\"}><Icon\n                        type={\"plus\"}/> Add</Button></Link></h4>}>\n                    <CustomizedTable dataSource={this.state.packages} loading={this.state.loading}\n                                     columns={columns}/>\n                </Card>\n            </Route>\n        </Switch>\n    }\n}\n","import React from \"react\";\nimport DynamicFieldsForm from \"../../../common/DynamicFieldsForm\";\nimport {Button, Card, Divider, Form, Modal, Popconfirm} from \"antd\";\nimport {INPUT_FIELD, NUMBER_FIELD, SUCCESS_MSG_TYPE} from \"../../../../constants/dataKeys\";\nimport {DISEASE_LIST, ROOM_TYPE} from \"../../../../constants/api\";\nimport {displayMessage, getAPI, interpolate, postAPI} from \"../../../../utils/common\";\nimport CustomizedTable from \"../../../common/CustomizedTable\";\n\nclass DiseaseList extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            redirect: false,\n            visible: false,\n            diseases: null,\n            loading: true,\n            showDeleted: false,\n            deletedLoading: false,\n            deletedRooms: [],\n            editObj: {}\n        };\n        this.loadData = this.loadData.bind(this);\n        this.deleteObject = this.deleteObject.bind(this);\n\n    }\n\n    componentDidMount() {\n        this.loadData();\n    }\n\n    loadData(deleted = false) {\n        var that = this;\n        let successFn = function (data) {\n            console.log(\"get table\");\n            if (deleted) {\n                that.setState({\n                    deletedRooms: data,\n                    deletedLoading: false\n                })\n            } else {\n                that.setState({\n                    diseases: data,\n                    loading: false\n                })\n            }\n        };\n        let errorFn = function () {\n            if (deleted) {\n                that.setState({\n                    deletedLoading: false\n                })\n            } else {\n                that.setState({\n                    loading: false\n                })\n            }\n        };\n        if (deleted) {\n            getAPI(interpolate(DISEASE_LIST, [this.props.active_practiceId]), successFn, errorFn, {\n                deleted: true,\n                practice: this.props.active_practiceId\n            });\n        } else {\n            getAPI(interpolate(DISEASE_LIST, [this.props.active_practiceId]), successFn, errorFn);\n        }\n    }\n\n    changeRedirect() {\n        var redirectVar = this.state.redirect;\n        this.setState({\n            redirect: !redirectVar,\n        });\n    }\n\n    editTax(value) {\n        this.setState({\n            editObj: value,\n            visible: true\n        })\n    }\n\n    handleCancel = () => {\n        this.setState({visible: false});\n    }\n\n    deleteObject(record, type) {\n        let that = this;\n        let reqData = record;\n        reqData.is_active = type;\n        let successFn = function (data) {\n            that.loadData();\n            if (that.state.showDeleted) {\n                that.loadData(true);\n            }\n        }\n        let errorFn = function () {\n        };\n        postAPI(interpolate(DISEASE_LIST, [this.props.active_practiceId]), reqData, successFn, errorFn)\n    }\n\n    showDeletedExpenses = () => {\n        this.setState({\n            showDeleted: true,\n            deletedLoading: true\n        });\n        this.loadData(true)\n    }\n\n    render() {\n        let that = this;\n        const columns = [{\n            title: 'Disease',\n            dataIndex: 'name',\n            key: 'name',\n        }, {\n            title: 'Action',\n            key: 'action',\n            render: (text, record) => (\n                record.is_active ? <span>\n\n              <a onClick={() => this.editTax(record)}>  Edit</a>\n                <Divider type=\"vertical\"/>\n                <Popconfirm title=\"Are you sure to delete this?\"\n                            onConfirm={() => that.deleteObject(record, false)} okText=\"Yes\" cancelText=\"No\">\n                  <a>Delete</a>\n              </Popconfirm>\n              </span> : <span>\n                    <Popconfirm title=\"Are you sure show this?\"\n                                onConfirm={() => that.deleteObject(record, true)} okText=\"Yes\" cancelText=\"No\">\n                  <a>Show</a>\n              </Popconfirm>\n                </span>\n            ),\n        }];\n        const fields = [{\n            label: \"Disease\",\n            key: \"name\",\n            required: true,\n            type: INPUT_FIELD\n        },];\n        const editfields = [{\n            label: \"Disease\",\n            key: \"name\",\n            required: true,\n            initialValue: this.state.editObj.name,\n            type: INPUT_FIELD\n        },];\n        const formProp = {\n            successFn: function (data) {\n                that.handleCancel();\n                that.loadData();\n                console.log(data);\n                console.log(\"sucess\");\n                displayMessage(SUCCESS_MSG_TYPE, \"success\");\n            },\n            errorFn: function () {\n\n            },\n            action: interpolate(DISEASE_LIST, [this.props.active_practiceId]),\n            method: \"post\",\n        }\n        const defaultValues = [{\"key\": \"practice\", \"value\": this.props.active_practiceId}];\n        const editFormDefaultValues = [{\"key\": \"practice\", \"value\": this.props.active_practiceId}, {\n            \"key\": \"id\",\n            \"value\": this.state.editObj.id\n        }];\n        const TestFormLayout = Form.create()(DynamicFieldsForm);\n        return <div>\n            <h2>Disease List</h2>\n            <Card>\n                <TestFormLayout defaultValues={defaultValues} formProp={formProp} fields={fields}/>\n                <Divider/>\n                <CustomizedTable loading={this.state.loading} columns={columns} dataSource={this.state.diseases}/>\n                {/*{this.state.showDeleted ?*/}\n                {/*<div>*/}\n                {/*<CustomizedTable loading={this.state.deletedLoading} columns={columns}*/}\n                {/*dataSource={this.state.deletedExpenses}/>*/}\n                {/*</div> :*/}\n                {/*<h4><a onClick={() => this.showDeletedExpenses()}>Show Deleted Expenses</a></h4>}*/}\n            </Card>\n            <Modal\n                visible={this.state.visible}\n                footer={null}\n                onCancel={this.handleCancel}\n            >\n\n                <TestFormLayout title=\"Edit Disease\" defaultValues={editFormDefaultValues} formProp={formProp}\n                                fields={editfields}/>\n                <Button key=\"back\" onClick={this.handleCancel}>Return</Button>,\n\n            </Modal>\n        </div>\n    }\n}\n\nexport default DiseaseList;\n","import React from \"react\";\nimport DynamicFieldsForm from \"../../../common/DynamicFieldsForm\";\nimport {Button, Modal, Card, Form, Icon, Row, Table, Divider, Popconfirm} from \"antd\";\nimport {\n    CHECKBOX_FIELD,\n    SUCCESS_MSG_TYPE,\n    INPUT_FIELD,\n    RADIO_FIELD,\n    NUMBER_FIELD,\n    SELECT_FIELD\n} from \"../../../../constants/dataKeys\";\nimport {AGENT_ROLES} from \"../../../../constants/api\"\nimport {Link} from \"react-router-dom\";\nimport {getAPI, displayMessage, interpolate, postAPI} from \"../../../../utils/common\";\n\nclass AgentRoles extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            redirect: false,\n            visible: false,\n            data: null,\n            loading:true\n        }\n        this.loadData = this.loadData.bind(this);\n        this.deleteObject = this.deleteObject.bind(this);\n    }\n\n    componentDidMount() {\n        this.loadData();\n    }\n\n    loadData() {\n        var that = this;\n        let successFn = function (data) {\n            that.setState({\n                data: data,\n                loading:false\n            })\n        };\n        let errorFn = function () {\n            that.setState({\n                loading:false\n            })\n        };\n        getAPI(interpolate(AGENT_ROLES, [this.props.active_practiceId]), successFn, errorFn);\n    }\n\n    changeRedirect() {\n        var redirectVar = this.state.redirect;\n        this.setState({\n            redirect: !redirectVar,\n        });\n    }\n\n    editFunction(value) {\n        this.setState({\n            editingId: value.id,\n            editingName: value.name,\n            visible: true,\n            loading:false\n        })\n    }\n\n    handleCancel = () => {\n        this.setState({visible: false});\n    }\n\n    deleteObject(record) {\n        let that = this;\n        let reqData = record;\n        reqData.is_active = false;\n        let successFn = function (data) {\n            that.loadData();\n        }\n        let errorFn = function () {\n        };\n        postAPI(interpolate(AGENT_ROLES, [this.props.active_practiceId]), reqData, successFn, errorFn)\n    }\n\n    render() {\n        let that = this;\n        const columns = [{\n            title: 'Name',\n            dataIndex: 'name',\n            key: 'name',\n        }, {\n            title: 'Action',\n            key: 'action',\n            render: (text, record) => (\n                <span>\n              <a onClick={() => this.editFunction(record)}>  Edit</a>\n                {/* <Divider type=\"vertical\"/>\n                    <Popconfirm title=\"Are you sure delete this item?\"\n                                onConfirm={() => that.deleteObject(record)} okText=\"Yes\" cancelText=\"No\">\n                      <a>Delete</a>\n                  </Popconfirm> */}\n              </span>\n            ),\n        }];\n        const fields = [{\n            label:\"Role Name\",\n            key: \"name\",\n            placeholder:\"Advisor roles\",\n            required: true,\n            type: INPUT_FIELD\n        },];\n        const editfields = [{\n            label:\"Role Name\",\n            key: \"name\",\n            required: true,\n            initialValue: this.state.editingName,\n            type: INPUT_FIELD\n        }];\n        const formProp = {\n            successFn: function (data) {\n                that.handleCancel();\n                that.loadData();\n                console.log(\"sucess\");\n                displayMessage(SUCCESS_MSG_TYPE, \"success\")\n\n            },\n            errorFn: function () {\n\n            },\n            action: interpolate(AGENT_ROLES, [this.props.active_practiceId]),\n            method: \"post\",\n        };\n        const defaultValues = [{\"key\": \"practice\", \"value\": this.props.active_practiceId}]\n        const editFormDefaultValues = [{\"key\": \"practice\", \"value\": this.props.active_practiceId}, {\n            \"key\": \"id\",\n            \"value\": this.state.editingId\n        }]\n\n        const TestFormLayout = Form.create()(DynamicFieldsForm);\n        return <Card title='Add Advisor Roles'>\n            <TestFormLayout defaultValues={defaultValues} formProp={formProp} fields={fields}/>\n            <Divider/>\n            <Table loading={this.state.loading} columns={columns} dataSource={this.state.data}/>\n            <Modal\n                title={\"Edit Advisor Roles\"}\n                visible={this.state.visible}\n                footer={null}\n                onCancel={this.handleCancel}>\n                <TestFormLayout defaultValues={editFormDefaultValues} formProp={formProp} fields={editfields} />\n                <Button key=\"back\" onClick={this.handleCancel}>Return</Button>\n            </Modal>\n        </Card>\n    }\n}\n\nexport default AgentRoles;\n","import React from \"react\";\nimport {\n    AutoComplete,\n    Avatar,\n    Button,\n    Card,\n    Icon,\n    Form,\n    Input,\n    Upload,\n    List,\n    Select,\n    Spin, message,\n} from 'antd';\nimport {REQUIRED_FIELD_MESSAGE} from \"../../../../constants/messages\";\nimport {SUCCESS_MSG_TYPE} from \"../../../../constants/dataKeys\";\nimport {\n    PATIENTS_LIST,\n    SEARCH_PATIENT,\n    PATIENT_PROFILE, AGENT_ROLES, FILE_UPLOAD_API,\n} from \"../../../../constants/api\"\nimport {displayMessage, getAPI, interpolate, makeFileURL, makeURL, postAPI, putAPI} from \"../../../../utils/common\";\nimport {hideMobile} from \"../../../../utils/permissionUtils\";\n\nconst FormItem = Form.Item;\nconst {Meta} = Card;\n\nclass AddOrEditAgent extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            redirect: false,\n            saving: false,\n            userListData: [],\n            agentRoles: [],\n\n\n        }\n        this.changeRedirect = this.changeRedirect.bind(this);\n        this.getPatient = this.getPatient.bind(this);\n        this.searchPatient = this.searchPatient.bind(this);\n        this.loadAgentRoles = this.loadAgentRoles.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n    }\n\n    componentDidMount() {\n        this.getPatient();\n        this.loadAgentRoles();\n    }\n\n\n    getPatient() {\n        let that = this;\n\n        let successFn = function (data) {\n            that.setState({\n                userListData: data.results,\n            })\n        };\n        let errorFn = function () {\n\n        };\n        getAPI(PATIENTS_LIST, successFn, errorFn);\n    }\n\n    loadAgentRoles() {\n        let that = this;\n        let successFn = function (data) {\n            that.setState({\n                agentRoles: data,\n                loading: false\n            })\n        };\n        let errorFn = function () {\n            that.setState({\n                loading: false\n            })\n        };\n        getAPI(AGENT_ROLES, successFn, errorFn);\n\n    }\n\n    changeRedirect() {\n        var redirectVar = this.state.redirect;\n        this.setState({\n            redirect: !redirectVar,\n        });\n    }\n\n    searchPatient(value) {\n        let that = this;\n        let successFn = function (data) {\n            if (data) {\n                that.setState({\n                    userListData: data.results\n                })\n\n            }\n        };\n        let errorFn = function () {\n        };\n        if (value){\n            getAPI(interpolate(SEARCH_PATIENT, [value]), successFn, errorFn);\n        }\n\n    }\n\n    handleSubmit = (e) => {\n        let that = this;\n        e.preventDefault();\n        this.props.form.validateFields((err, values) => {\n            if (!err) {\n                that.setState({\n                    saving: true\n                });\n\n                let reqData = {\n                    user: {},\n                    referal: values.referal,\n                    role: values.role,\n                    is_agent: true,\n                    aadhar_upload: values.aadhar_upload && values.aadhar_upload.file && values.aadhar_upload.file.response ? values.aadhar_upload.file.response.image_path : values.aadhar_upload,\n                    is_approved: true,\n                    practice: this.props.active_practiceId\n                };\n                if (this.props.editAgentData || !reqData.referal) {\n                    delete reqData.referal;\n                }\n                if (!this.state.userDetails) {\n                    reqData.user.first_name = values.first_name;\n                    reqData.user.email = values.email;\n                    reqData.user.mobile = values.mobile;\n                } else {\n                    reqData.user = this.state.userDetails.user;\n                }\n                let successFn = function (data) {\n                    that.setState({\n                        saving: false\n                    });\n                    if (that.props.loadData){\n                        that.props.loadData();\n                    }\n\n                    if (that.props.history){\n                        that.props.history.replace(\"/settings/agents\");\n                    }\n                    if (data) {\n                        displayMessage(SUCCESS_MSG_TYPE, \"Agent Created Successfully\");\n                    }\n                };\n                let errorFn = function () {\n                    that.setState({\n                        saving: false\n                    });\n                };\n\n                if (this.state.userDetails) {\n                    putAPI(interpolate(PATIENT_PROFILE, [this.state.userDetails.id]), reqData, successFn, errorFn);\n                } else if (this.props.editAgentData) {\n                    putAPI(interpolate(PATIENT_PROFILE, [this.props.editAgentData.id]), reqData, successFn, errorFn);\n                } else {\n                    postAPI(interpolate(PATIENTS_LIST, [this.props.active_practiceId]), reqData, successFn, errorFn);\n                }\n            }\n        });\n\n    }\n    handlePatientSelect = (event) => {\n        if (event) {\n            let that = this;\n            let successFn = function (data) {\n                that.setState({\n                    userDetails: data\n                });\n            };\n            let errorFn = function () {\n            };\n            getAPI(interpolate(PATIENT_PROFILE, [event]), successFn, errorFn);\n        }\n    }\n\n    handleClick = (e) => {\n\n        this.setState({\n            userDetails: null\n        })\n\n    }\n\n\n    render() {\n        const that = this;\n        const formItemLayout = (this.props.formLayout ? this.props.formLayout : {\n            labelCol: {span: 6},\n            wrapperCol: {span: 14},\n        });\n        const formPatients = (this.props.formLayout ? this.props.formLayout : {\n            wrapperCol: {offset: 6, span: 14},\n        });\n        const {getFieldDecorator} = this.props.form;\n        const singleUploadprops = {\n            name: 'image',\n            data: {\n                name: 'hello'\n            },\n            action: makeURL(FILE_UPLOAD_API),\n            headers: {\n                authorization: 'authorization-text',\n            },\n            onChange(info) {\n                if (info.file.status !== 'uploading') {\n                    console.log(info.file, info.fileList);\n                }\n                if (info.file.status === 'done') {\n                    message.success(`${info.file.name} file uploaded successfully`);\n                } else if (info.file.status === 'error') {\n                    message.error(`${info.file.name} file upload failed.`);\n                }\n            },\n        };\n        return <Card>\n            <Spin spinning={this.state.saving}>\n                <Form onSubmit={this.handleSubmit}>\n                    {this.props.title ? <h2>{this.props.title}</h2> : null}\n\n                    {that.state.userDetails ?\n                        <FormItem key=\"id\" value={this.state.userDetails.id} {...formPatients}>\n                            <Card bordered={false} style={{background: '#ECECEC'}}>\n                                <Meta\n                                    avatar={(this.state.userDetails.image ? <Avatar src={makeFileURL(this.state.userDetails.image)}/> :\n                                        <Avatar style={{backgroundColor: '#87d068'}}>\n                                            {this.state.userDetails.user.first_name ? this.state.userDetails.user.first_name.charAt(0) :\n                                                <Icon type=\"user\"/>}\n                                        </Avatar>)}\n                                    title={this.state.userDetails.user.first_name}\n                                    description={\n                                        <span>{that.props.activePracticePermissions.PatientPhoneNumber ? this.state.userDetails.user.mobile : hideMobile(this.state.userDetails.user.mobile)}<br/>\n                                    <Button type=\"primary\" style={{float: 'right'}} onClick={this.handleClick}>Select Different</Button>\n                                    </span>}\n                                />\n\n\n                            </Card>\n                        </FormItem>\n                        : <div>\n                            <FormItem key=\"name\" label=\"Advisor Name\"  {...formItemLayout}>\n                                {getFieldDecorator(\"first_name\", {\n                                    initialValue: that.props.editAgentData ? that.props.editAgentData.user.first_name : ''\n                                })(\n                                    <AutoComplete placeholder=\"Advisor Name\"\n                                                  showSearch\n                                                  disabled={that.props.editAgentData?true:false}\n                                                  onSearch={this.searchPatient}\n                                                  defaultActiveFirstOption={false}\n                                                  showArrow={false}\n                                                  filterOption={false}\n                                                  onSelect={this.handlePatientSelect}>\n                                        {this.state.userListData.map((option) => <AutoComplete.Option\n                                            value={option.id.toString()}>\n                                            <List.Item style={{padding: 0}}>\n                                                <List.Item.Meta\n                                                    avatar={(option.image ? <Avatar src={makeFileURL(option.image)}/> :\n                                                        <Avatar style={{backgroundColor: '#87d068'}}>\n                                                            {option.user.first_name ? option.user.first_name.charAt(0) :\n                                                                <Icon type=\"user\"/>}\n                                                        </Avatar>)}\n                                                    title={option.user.first_name + \" (ID:\" + (option.custom_id?option.custom_id:option.user.id) + \")\"}\n                                                    description={that.props.activePracticePermissions.PatientPhoneNumber ? option.user.mobile : hideMobile(option.user.mobile)}\n\n                                                />\n                                            </List.Item>\n                                        </AutoComplete.Option>)}\n                                    </AutoComplete>\n                                )}\n                            </FormItem>\n                            <FormItem key=\"mobile\" label=\"Mobile Number\"   {...formItemLayout}>\n                                {getFieldDecorator(\"mobile\", {\n                                    initialValue: that.props.editAgentData ? that.props.editAgentData.user.mobile : null,\n                                    rules: [{required: true, message: REQUIRED_FIELD_MESSAGE}],\n                                })(\n                                    <Input placeholder=\"Mobile Number\" disabled={that.props.editAgentData?true:false}/>\n                                )}\n                            </FormItem>\n                            <FormItem key=\"email\" label=\"Email Address\"  {...formItemLayout}>\n                                {getFieldDecorator(\"email\", {\n                                    initialValue: that.props.editAgentData ? that.props.editAgentData.user.email : null,\n                                    rules: [{type: 'email', message: 'The input is not valid E-mail!'},\n                                        {required: true, message: REQUIRED_FIELD_MESSAGE}],\n                                })(\n                                    <Input placeholder=\"Email Address\" disabled={that.props.editAgentData?true:false}/>\n                                )}\n                            </FormItem>\n                            {this.state.editAgentData ? null :\n                                <FormItem key=\"referal\" label=\"Referer Code\"  {...formItemLayout}>\n                                    {getFieldDecorator(\"referal\", {\n                                        initialValue: that.props.editAgentData ? that.props.editAgentData.user.referer : null,\n\n                                    })(\n                                        <Input placeholder=\"Referer Code\" disabled={that.props.editAgentData?true:false}/>\n                                    )}\n                                </FormItem>}\n\n                        </div>}\n\n                    <FormItem key=\"role\" {...formItemLayout} label=\"Role Type\">\n                        {getFieldDecorator(\"role\", {initialValue: that.props.editAgentData && that.props.editAgentData.role ? that.props.editAgentData.role : null}, {\n                            rules: [{required: true, message: REQUIRED_FIELD_MESSAGE}],\n                        })(\n                            <Select>\n                                {this.state.agentRoles.map((option) => <Select.Option\n                                    value={option.id}>{option.name}</Select.Option>)}\n                            </Select>\n                        )}\n                    </FormItem>\n                    <FormItem label={\"Document Upload\"} {...formItemLayout}>\n                        {getFieldDecorator(\"aadhar_upload\",{initialValue: that.props.editAgentData && that.props.editAgentData.aadhar_upload ? that.props.editAgentData.aadhar_upload : null,\n                            rules: [{required: true, message: REQUIRED_FIELD_MESSAGE}],\n                            valuePropName: \"aadhar_upload\",\n                        })(\n                            <Upload {...singleUploadprops}>\n                                <Button>\n                                    <Icon type=\"upload\"/> Click to Upload\n                                </Button>\n                                {that.props.editAgentData && that.props.editAgentData.aadhar_upload ?\n                                    <img src={makeFileURL(that.props.editAgentData.aadhar_upload)}\n                                         style={{maxWidth: '100%'}}/> : null}\n                            </Upload>\n                        )}\n                    </FormItem>\n\n                    <FormItem {...formItemLayout}>\n                        <Button type=\"primary\" htmlType=\"submit\" style={{margin: 5}}>\n                            Submit\n                        </Button>\n                        {that.props.history ?\n                            <Button style={{margin: 5}} onClick={() => that.props.history.goBack()}>\n                                Cancel\n                            </Button> : null}\n                    </FormItem>\n                </Form>\n            </Spin>\n        </Card>\n    }\n}\n\nexport default Form.create()(AddOrEditAgent)\n","import React from \"react\";\nimport {Button, Modal, Card, Form, Icon, Row, Table, Divider, Popconfirm, Tag, Select, Col} from \"antd\";\nimport {\n    SUCCESS_MSG_TYPE,\n    INPUT_FIELD, WARNING_MSG_TYPE, NUMBER_FIELD, DATE_PICKER,\n} from \"../../../../constants/dataKeys\";\nimport {AGENT_ROLES, ALL_PRACTICE, PATIENT_PROFILE, PATIENTS_LIST, WALLET_LEDGER} from \"../../../../constants/api\"\nimport {Link, Route, Switch} from \"react-router-dom\";\nimport {getAPI, displayMessage, interpolate, postAPI, putAPI, makeFileURL} from \"../../../../utils/common\";\nimport AddOrEditAgent from \"./AddOrEditAgent\";\nimport CustomizedTable from \"../../../common/CustomizedTable\";\nimport InfiniteFeedLoaderButton from \"../../../common/InfiniteFeedLoaderButton\";\nimport PatientWalletLedger from \"../../../patients/wallet-ledger/PatientWalletLedger\";\nimport DynamicFieldsForm from \"../../../common/DynamicFieldsForm\";\nimport moment from \"moment\";\n\n// import Col from \"antd/es/grid/col\";\n\nclass AgentRoles extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            redirect: false,\n            visible: false,\n            data: null,\n            loading: true,\n            agentRoles: [],\n            practiceList: [],\n            approved: null,\n            showAgentData: null\n        };\n        this.loadData = this.loadData.bind(this);\n        this.deleteObject = this.deleteObject.bind(this);\n        this.loadAgentRoles = this.loadAgentRoles.bind(this);\n    }\n\n    componentDidMount() {\n        this.loadData();\n        this.loadAgentRoles();\n    }\n\n    loadAgentRoles() {\n        let that = this;\n        let successFn = function (data) {\n            that.setState({\n                agentRoles: data,\n            })\n        };\n        let errorFn = function () {\n        };\n        getAPI(AGENT_ROLES, successFn, errorFn);\n\n    }\n\n    loadData(page = 1) {\n        var that = this;\n        this.setState({\n            loading: true\n        })\n        let successFn = function (data) {\n            if (data.current == 1) {\n                that.setState({\n                    data: data.results,\n                    total: data.count,\n                    nextPage: data.next,\n                    loading: false\n                })\n            } else {\n                that.setState(function (prevState) {\n                    return {\n                        data: [...prevState.data, ...data.results],\n                        total: data.count,\n                        nextPage: data.next,\n                        loading: false\n                    }\n                })\n            }\n        };\n        let errorFn = function () {\n            that.setState({\n                loading: false\n            })\n        };\n        let apiParams = {\n            agent: true,\n            page\n        }\n        if (that.state.role)\n            apiParams.role = that.state.role;\n        if (that.state.approved != null) {\n            apiParams.approved = !!that.state.approved;\n        }\n        apiParams.practice = this.props.active_practiceId;\n\n        getAPI(PATIENTS_LIST, successFn, errorFn, apiParams);\n    }\n\n    changeRedirect() {\n        var redirectVar = this.state.redirect;\n        this.setState({\n            redirect: !redirectVar,\n        });\n    }\n\n    handleCancel = () => {\n        this.setState({visible: false});\n    }\n\n    editObject(record) {\n        this.setState({\n            editAgentData: record,\n            loading: false\n        });\n\n        this.props.history.push('/settings/agents/' + record.id + '/edit')\n\n    }\n\n    showWallet = (record) => {\n        this.setState({\n            showAgentData: record,\n        });\n    }\n    payAgentModal = (record) => {\n        this.setState({\n            payAgentData: record,\n        });\n    }\n\n    deleteObject(record) {\n        let that = this;\n        let reqData = {'id': record.id, is_agent: false}\n        let successFn = function (data) {\n            that.setState({\n                loading: false,\n            })\n            that.loadData();\n        }\n        let errorFn = function () {\n        };\n        putAPI(interpolate(PATIENT_PROFILE, [record.id]), reqData, successFn, errorFn)\n    }\n\n    approveAgent = (record) => {\n        let that = this;\n\n        let reqData = {'id': record.id, is_approved: true};\n        let successFn = function (data) {\n            displayMessage(SUCCESS_MSG_TYPE, \"Agent Approved Successfully!\");\n            that.setState(function (prevState) {\n                let agentList = [];\n                prevState.data.forEach(function (agent) {\n                    if (agent.id == record.id) {\n                        agent.is_approved = true\n                    }\n                    agentList.push(agent);\n                });\n                return {\n                    data: agentList,\n                    approvalLoading: false\n                }\n            })\n        }\n        let errorFn = function () {\n            that.setState({\n                approvalLoading: false\n            })\n        };\n        if (record.role) {\n            that.setState({\n                approvalLoading: true\n            })\n            putAPI(interpolate(PATIENT_PROFILE, [record.id]), reqData, successFn, errorFn)\n        } else {\n            displayMessage(WARNING_MSG_TYPE, \"Kindly assign the role before approving!\")\n        }\n    }\n    // handleChange=(key,value)=>{\n    //     console.log(\"type\",key,value)\n    //     this.props.form.setFieldsValue({\n    //         [key]: value,\n    //     });\n    // }\n    handleSubmit = (e) => {\n        let that = this;\n        e.preventDefault();\n        this.props.form.validateFieldsAndScroll((err, values) => {\n\n            if (!err) {\n                that.setState({\n                    role: values.role,\n                    approved: values.approved,\n                }, function () {\n                    that.loadData();\n                })\n            }\n        })\n    }\n\n\n    render() {\n        let that = this;\n        let i = 1;\n        const {getFieldDecorator} = this.props.form;\n        const columns = [{\n            title: 'S. No',\n            key: 'sno',\n            dataIndex: 'sno',\n            render: (item, record) => <span> {i++}</span>,\n            export: (item, record, index) => index + 1,\n        }, {\n            title: 'Name',\n            dataIndex: 'user.first_name',\n            key: 'name',\n            render: (value, record) => <Link to={\"/patient/\" + record.id + \"/profile\"}>{value}</Link>,\n            export: (item, record) => (record.user.first_name),\n        }, {\n            title: 'Email',\n            dataIndex: 'user.email',\n            key: 'email',\n            export: (item, record) => (record.user.email),\n        }, {\n            title: 'Mobile',\n            dataIndex: 'user.mobile',\n            key: 'mobile',\n            export: (item, record) => (record.user.mobile),\n        }, {\n            title: 'Referrer',\n            dataIndex: 'user.referer_data.referer.first_name',\n            key: 'referrer',\n            render: (value, record) => (value && record.user.referer_data.patient ?\n                <Link to={\"/patient/\" + record.user.referer_data.patient + \"/profile\"}>{value}</Link> : '--'),\n            export: (item, record) => (record.user.referer ? record.user.referer_data.referer.first_name : '--'),\n        }, {\n            title: 'Role',\n            dataIndex: 'role_data.name',\n            key: 'role_data',\n            export: (item, record) => (record.role_data.name),\n        }, {\n            title: 'Aadhar',\n            dataIndex: 'aadhar_id',\n            key: 'aadhar_id',\n            export: (value) => (value),\n        }, {\n            title: 'Document',\n            dataIndex: 'aadhar_upload',\n            key: 'aadhar_upload',\n            hideExport: true,\n            render: (value) => (value ? <a target=\"_blank\" href={makeFileURL(value)}>Open Document</a> : '--')\n        }, {\n            title: 'Status',\n            dataIndex: 'is_approved',\n            key: 'is_approved',\n            render: (value, record) => (\n                value ? <Tag color=\"#87d068\">Approved</Tag> : <Popconfirm\n                    title=\"Are you sure approve this Advisor?\"\n                    onConfirm={() => that.approveAgent(record)}\n                    okText=\"Yes\"\n                    cancelText=\"No\"\n                >\n                    <a href=\"#\" disabled={that.state.approvalLoading}>Approve</a>\n                </Popconfirm>\n            )\n        }, {\n            title: 'Action',\n            key: 'action',\n            hideExport: true,\n            render: (text, record) => (\n                <span>\n                     <a onClick={() => this.showWallet(record)}>  Wallet</a>\n                    <Divider type=\"vertical\"/>\n              <a onClick={() => this.payAgentModal(record)}>  Pay Out</a>\n                    <Divider type=\"vertical\"/>\n              <a onClick={() => this.editObject(record)}>  Edit</a>\n                <Divider type=\"vertical\"/>\n                    <Popconfirm title=\"Are you sure delete this item?\"\n                                onConfirm={() => that.deleteObject(record)} okText=\"Yes\" cancelText=\"No\">\n                      <a>Delete</a>\n                  </Popconfirm>\n              </span>\n            ),\n        }];\n        const status = [\n            {label: 'Approved', value: true},\n            {label: 'Pending', value: false},\n            {label: 'All', value: null}\n        ];\n        const PayAgentForm = Form.create()(DynamicFieldsForm);\n        return <Switch>\n            <Route exact path={\"/settings/agents/add\"}\n                   render={(route) => <AddOrEditAgent  {...this.props} title={\"Create Advisor\"}\n                                                       loadData={this.loadData}/>}/>\n\n            <Route exact path={\"/settings/agents/:id/edit\"}\n                   render={(route) => <AddOrEditAgent  {...this.props} {...this.state} title={\"Edit Advisor\"}\n                                                       loadData={this.loadData}/>}/>\n            <Route>\n                <Card title={<h4>Advisor <Link to={\"/settings/agents/add\"}>\n                    <Button style={{float: 'right'}} type={\"primary\"}><Icon type={\"plus\"}/>\n                        Add</Button></Link></h4>}>\n                    <Row>\n                        <Col style={{float: \"right\"}}>\n                            <Form layout=\"inline\" onSubmit={this.handleSubmit}>\n                                <Form.Item key=\"role\" label=\"Advisor Role\">\n                                    {getFieldDecorator(\"role\", {initialValue: this.state.agentRoles ? this.state.agentRoles.id : ''},\n                                    )(\n                                        <Select placeholder=\"Advisor Role\" style={{minWidth: 150}} allowClear={true}>\n                                            {this.state.agentRoles.map((option) => <Select.Option\n                                                value={option.id}>{option.name}</Select.Option>)}\n                                        </Select>\n                                    )}\n                                </Form.Item>\n\n                                <Form.Item key=\"approved\" label=\"Status\">\n                                    {getFieldDecorator(\"approved\", {initialValue: this.state.approved ? this.state.approved : null},\n                                    )(\n                                        <Select placeholder=\"status\" style={{minWidth: 150}}>\n                                            {status.map(item => <Select.Option\n                                                value={item.value}>\n                                                {item.label}\n                                            </Select.Option>)}\n                                        </Select>\n                                    )}\n                                </Form.Item>\n\n                                <Form.Item>\n                                    <Button type=\"primary\" htmlType=\"submit\" style={{margin: 5}}>\n                                        Submit\n                                    </Button>\n                                </Form.Item>\n                            </Form>\n                        </Col>\n                    </Row>\n\n                    <CustomizedTable loading={this.state.loading} columns={columns} dataSource={this.state.data}\n                                     pagination={false}/>\n                    <InfiniteFeedLoaderButton loading={this.state.loading}\n                                              loaderFunction={() => that.loadData(that.state.nextPage)}\n                                              hidden={!this.state.nextPage}/>\n                    <Modal visible={this.state.showAgentData}\n                           closable={false}\n                           centered\n                           width={1000}\n                           footer={null}\n                           style={{top: 60}}>\n                        <Button type=\"primary\"\n                                style={{position: 'absolute', top: '-50px'}}\n                                onClick={() => this.payAgentModal(this.state.showAgentData)}>Pay Out</Button>\n                        <Button icon=\"close\" type=\"danger\" shape=\"circle\"\n                                style={{position: 'absolute', top: '-50px', right: 0}}\n                                onClick={() => this.showWallet(null)}/>\n                        {this.state.showAgentData ?\n                            <PatientWalletLedger currentPatient={this.state.showAgentData}\n                                                 key={this.state.showAgentData ? this.state.showAgentData.id + this.state.payAgentData : null}/> : null}\n                    </Modal>\n                    <Modal visible={this.state.payAgentData}\n                           closable={false}\n                           centered\n                           footer={null}\n                           closeIcon={null}\n                           style={{top: 60}}>\n                        <Button icon=\"close\" type=\"danger\" shape=\"circle\"\n                                style={{position: 'absolute', top: '-50px', right: 0}}\n                                onClick={() => this.payAgentModal(null)}/>\n                        {this.state.payAgentData ? <div>\n                            <h2>Pay {this.state.payAgentData.user.first_name}</h2>\n                            <PayAgentForm formProp={{\n                                method: 'post',\n                                action: WALLET_LEDGER,\n                                successFn: function () {\n                                    that.payAgentModal(null)\n                                },\n                                errorFn: function () {\n\n                                },\n                                confirm: true,\n                                confirmText: \"Are you sure to pay out this advisor?\"\n                            }}\n                                          fields={[{\n                                              label: 'Amount',\n                                              key: 'amount',\n                                              type: NUMBER_FIELD,\n                                              required: true,\n                                              follow: 'INR'\n                                          }, {\n                                              label: 'Date',\n                                              key: 'date',\n                                              type: DATE_PICKER,\n                                              required: true,\n                                              format: 'YYYY-MM-DD',\n                                              initialValue: moment()\n                                          }, {\n                                              label: 'Comments',\n                                              key: 'comments',\n                                              type: INPUT_FIELD,\n                                              required: true,\n                                              extra: 'Comments for this transaction'\n                                          }]} defaultValues={[{\n                                key: 'ledger_type',\n                                value: 'Payout',\n                            }, {\n                                key: 'amount_type',\n                                value: 'Non Refundable',\n                            }, {\n                                key: 'practice',\n                                value: this.props.active_practiceId\n                            }, {\n                                key: 'is_mlm',\n                                value: false\n                            }, {\n                                key: 'is_cancelled',\n                                value: false\n                            }, {\n                                key: 'patient',\n                                value: this.state.payAgentData.id\n                            }, {\n                                key: 'staff',\n                                value: this.props.user.id\n                            }]}/>\n                        </div> : null}\n                    </Modal>\n                </Card>\n            </Route>\n\n        </Switch>\n\n\n    }\n}\n\nexport default Form.create()(AgentRoles);\n","import React from \"react\";\nimport {Card, Form, Row} from \"antd\";\nimport {Redirect, Route} from \"react-router\";\nimport DynamicFieldsForm from \"../../../common/DynamicFieldsForm\";\nimport {displayMessage, getAPI, interpolate} from \"../../../../utils/common\";\nimport {INPUT_FIELD, SUCCESS_MSG_TYPE} from \"../../../../constants/dataKeys\";\nimport {MEETING_USER, SINGLE_POST} from \"../../../../constants/api\";\nexport default class AddOrEditZoomUser extends React.Component{\n    constructor(props){\n        super(props);\n        this.state={\n        };\n\n        this.loadData = this.loadData.bind(this);\n    }\n\n    componentWillMount() {\n        let that=this;\n        if (that.props.match.params.id){\n            this.loadData();\n        }\n    }\n\n    changeRedirect(){\n        var redirectVar=this.state.redirect;\n        this.setState({\n            redirect:  !redirectVar,\n        })  ;\n    }\n\n    loadData(){\n        let that =this;\n        let successFn = function (data) {\n            that.setState({\n                editZoomData:data[0],\n            })\n        };\n        let errorFn = function () {\n\n        };\n        let reqData={\n            id:that.props.match.params.id\n        };\n        getAPI(MEETING_USER ,successFn, errorFn,reqData);\n\n\n    }\n\n    render() {\n        let that=this;\n        const fields=[{\n            label:'User Name',\n            key:'username',\n            type:INPUT_FIELD,\n            initialValue:that.state.editZoomData?that.state.editZoomData.username:'',\n        },{\n            label: 'API key',\n            key:'API_Key',\n            type: INPUT_FIELD,\n            initialValue:this.state.editZoomData?this.state.editZoomData.API_Key:'',\n        },{\n            label:'API Secret',\n            key:'API_Secret',\n            type:INPUT_FIELD,\n            initialValue:this.state.editZoomData?this.state.editZoomData.API_Secret:'',\n        }];\n        const TestFormLayout = Form.create()(DynamicFieldsForm);\n        let editformProp;\n\n        if(this.state.editZoomData) {\n            editformProp = {\n                successFn: function (data) {\n                    displayMessage(SUCCESS_MSG_TYPE, \"success\");\n                    that.setState({\n                        redirect: true\n                    });\n                    that.props.loadData();\n                    if (that.props.history){\n                        that.props.history.replace(\"/settings/zoom-user\");\n                    }\n                },\n                errorFn: function () {\n\n                },\n                action: interpolate(MEETING_USER, [this.props.match.params.id]),\n                method: \"post\",\n\n            }\n        }\n\n        const formProp = {\n            successFn: function (data) {\n                displayMessage(SUCCESS_MSG_TYPE, \"success\")\n\n                that.setState({\n                    redirect: true\n                });\n                that.props.loadData();\n                if (that.props.history){\n                    that.props.history.replace(\"/settings/zoom-user\");\n                }\n            },\n            errorFn: function () {\n\n            },\n            action:MEETING_USER,\n            method: \"post\",\n        };\n        let defaultValues=[{key:'id',value:this.props.match.params.id}];\n        return <Row>\n            <Card>\n                <Route exact path='/settings/zoom-user/edit/:id'\n                       render={() =>(this.props.match.params.id? <TestFormLayout title=\"Edit Zoom User\" defaultValues={defaultValues} changeRedirect= {this.changeRedirect}\n                                                     formProp={editformProp} fields={fields}/>: <Redirect to={'/settings/zoom-user'} />)}/>\n\n                <Route exact path='/settings/zoom-user/add'\n                       render={() => <TestFormLayout title=\"Add Zoom User\" changeRedirect= {this.changeRedirect}\n                                                     formProp={formProp} fields={fields}/>}/>\n\n            </Card>\n            {this.state.redirect&&    <Redirect to={'/settings/zoom-user'} />}\n        </Row>\n    }\n}\n","import React from \"react\";\nimport {Route, Switch} from \"react-router\";\nimport {Button, Card, Divider, Icon, Popconfirm, Table} from \"antd\";\nimport {Link} from \"react-router-dom\";\nimport AddOrEditZoomUser from \"./AddOrEditZoomUser\";\nimport {getAPI, interpolate, patchAPI, postAPI} from \"../../../../utils/common\";\nimport {MEETING_USER, SINGLE_POST} from \"../../../../constants/api\";\nexport default class ZoomUser extends React.Component{\n    constructor(props){\n        super(props);\n        this.state={\n            loading:true,\n        }\n        this.loadData = this.loadData.bind(this);\n    }\n    componentWillMount() {\n        this.loadData();\n    }\n\n    loadData(){\n        let that=this;\n        let successFn=function (data) {\n            that.setState({\n                zoomUser:data,\n                loading:false,\n            })\n        }\n        let errorFn =function () {\n            that.setState({\n                loading:false,\n            })\n        }\n        getAPI(MEETING_USER,successFn,errorFn);\n    }\n\n    deleteObject(record) {\n        let that = this;\n        let reqData = {};\n        reqData.id=record.id;\n        reqData.is_active = false;\n        let successFn = function (data) {\n            that.loadData();\n        };\n        let errorFn = function () {\n        };\n        postAPI(interpolate(MEETING_USER, [record.id]), reqData, successFn, errorFn)\n    }\n    render() {\n        let that=this;\n            const columns=[\n                {\n                    title: 'User Name',\n                    dataIndex: 'username',\n                    key: 'username'\n                },{\n                    title: 'API Key',\n                    dataIndex: 'API_Key',\n                    key: 'API_key'\n                },{\n                    title: 'API Secret',\n                    dataIndex: 'API_Secret',\n                    key: 'API_Secret'\n                },{\n                    title: 'Actions',\n                    render: (item) => {\n                        return <div>\n                            <Link to={\"/settings/zoom-user/edit/\" + item.id}>Edit</Link>\n                            <Divider type=\"vertical\"/>\n                            <Popconfirm title=\"Are you sure delete this item?\"\n                                        onConfirm={() => that.deleteObject(item)} okText=\"Yes\" cancelText=\"No\">\n                                <a>Delete</a>\n                            </Popconfirm>\n                        </div>\n                    }\n                }\n            ];\n        return( <div>\n                <Switch>\n                    <Route exact path='/settings/zoom-user/add'\n                           render={(route) => <AddOrEditZoomUser {...this.state} {...route}  loadData={this.loadData}/>}/>\n\n                    <Route exact path={\"/settings/zoom-user/edit/:id\"} render={(route)=><AddOrEditZoomUser loadData={this.loadData}  {...route} {...this.state}/>}/>\n\n                    <Card title=\"Zoom User\" extra={\n                        <Link to=\"/settings/zoom-user/add\" ><Button type=\"primary\"><Icon type=\"plus\"/> Add Zoom User</Button></Link>\n                    }>\n\n\n                        <Table dataSource={this.state.zoomUser} columns={columns} pagination={false}/>\n                    </Card>\n                </Switch>\n            </div>\n        )\n    }\n}","import React from \"react\";\nimport PracticeDetails from \"./options/practice-detail/PracticeDetails\"\nimport {Route, Switch} from 'react-router-dom';\nimport {Layout} from \"antd\";\nimport PracticeStaff from \"./options/practice-staff/PracticeStaff\";\nimport AddEditDoctor from \"./options/practice-staff/AddEditDoctor\";\nimport AddEditStaff from \"./options/practice-staff/AddEditStaff\";\nimport AddPracticeDetails from \"./options/practice-detail/AddPracticeDetails\";\nimport CommunicationSettings from \"./options/communication-settings/CommunicationSettings\";\nimport RecentProcedure from \"./options/procedure-catalog/RecentProcedure\";\nimport AddProcedure from \"./options/procedure-catalog/AddProcedure\";\nimport BillingSettings from \"./options/billing/BillingSettings\";\nimport EMRSettings from \"./options/emr/EMRSettings\";\nimport EditPracticeDetail from \"./options/practice-detail/EditPracticeDetail\";\nimport Prescriptions from \"./options/prescriptions/Prescriptions\";\nimport ExpensesTypes from \"./options/expenses-types/ExpensesTypes\";\nimport MedicalHistory from \"./options/medical-history/MedicalHistory\";\nimport Error404 from \"../common/errors/Error404\";\nimport CalendarSettings from \"./options/calendar/CalendarSettings\"\nimport SettingSider from \"./SettingSider\";\nimport PermissionDenied from \"../common/errors/PermissionDenied\";\nimport MlmBase from \"./options/mlm/MlmBase\";\nimport Printout from \"./options/printout/Printout\";\nimport IntegrationHome from \"./options/integration/IntegrationHome\";\nimport MailPDFSettings from \"./options/mailPDF/MailPDFSettings\";\nimport BedPackages from \"./options/bed-packages/BedPackages\";\nimport RoomTypes from \"./options/roomtypes/RoomTypes\";\nimport LoyaltySettings from \"./options/loyalty/LoyaltySettings\";\nimport LabTracking from \"./options/labs/LabTracking\";\nimport MedicinePackages from \"./options/medicine-packages/MedicinePackages\";\nimport DiseaseList from \"./options/disease-list/DiseaseList\";\nimport AgentRolesList from \"./options/agent-roles/AgentRoles\";\nimport AgentsList from \"./options/agents/AgentList\";\nimport ZoomUser from \"./options/zoom-user/ZoomUser\";\n\nconst Content = Layout.Content;\n\n\nclass SettingsDash extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            collapsed: false,\n        };\n    }\n\n    render() {\n        return <Content className=\"main-container\"\n                        style={{\n                            // margin: '24px 16px',\n                            // padding: 24,\n                            minHeight: 280,\n                            // marginLeft: '200px'\n                        }}>\n            <Layout>\n                <SettingSider {...this.props}/>\n                <Content style={{\n                    margin: '24px 16px',\n                    // padding: 24,\n                    minHeight: 280,\n                    // marginLeft: '200px'\n                }}>\n                    <Switch>\n\n                            <Route exact path=\"/settings/clinics-staff/adddoctor\"\n                                   render={(route) => (this.props.activePracticePermissions.SettingsPracticeStaff || this.props.allowAllPermissions ?\n                                          <AddEditDoctor  {...this.props} {...route} /> : <PermissionDenied/>\n                                   )}/>\n                            <Route exact path=\"/settings/clinics-staff/:doctorid/edit\"\n                                   render={(route) => (this.props.activePracticePermissions.SettingsPracticeStaff || this.props.allowAllPermissions ?\n                                          <AddEditDoctor  {...this.props} {...route} /> : <PermissionDenied/>\n                                   )}/>\n\n                            <Route exact path=\"/settings/clinics-staff/addstaff\"\n                                   render={(route) => (this.props.activePracticePermissions.SettingsPracticeStaff || this.props.allowAllPermissions ?\n                                          <AddEditStaff  {...this.props} {...route} /> : <PermissionDenied/>\n                                   )}/>\n                            <Route exact path=\"/settings/clinics-staff/staff/:staffid/edit\"\n                                   render={(route) => (this.props.activePracticePermissions.SettingsPracticeStaff || this.props.allowAllPermissions ?\n                                          <AddEditStaff  {...this.props} {...route} /> : <PermissionDenied/>\n                                   )}/>\n                        <Route path=\"/settings/clinics-staff\"\n                               render={(route) => (this.props.activePracticePermissions.SettingsPracticeStaff || this.props.allowAllPermissions ?\n                                       <PracticeStaff  {...this.props} {...route} /> : <PermissionDenied/>\n                               )}/>\n                        <Route exact path=\"/settings/clinics\"\n                               render={(route) => (this.props.activePracticePermissions.SettingsPracticeDetail || this.props.allowAllPermissions ?\n                                       <PracticeDetails  {...this.props} {...route} /> : <PermissionDenied/>\n                               )}/>\n                        <Route exact path=\"/settings/clinics/add\"\n                               render={(route) => (this.props.activePracticePermissions.SettingsPracticeDetail || this.props.allowAllPermissions ?\n                                       <AddPracticeDetails  {...this.props} {...route}/> : <PermissionDenied/>\n                               )}/>\n                        <Route exact path=\"/settings/clinics/:id/edit\"\n                               render={(route) => (this.props.activePracticePermissions.SettingsPracticeDetail || this.props.allowAllPermissions ?\n                                       <EditPracticeDetail {...this.props}\n                                                           practiceId={route.match.params.id} {...route}/> :\n                                       <PermissionDenied/>\n                               )}/>\n                        <Route exact path=\"/settings/communication-settings\"\n                               render={(route) => (this.props.activePracticePermissions.SettingsCommunincations || this.props.allowAllPermissions ?\n                                       <CommunicationSettings  {...this.props} {...route}/> : <PermissionDenied/>\n                               )}/>\n                        <Route exact path=\"/settings/calendarsettings\"\n                               render={(route) => (this.props.activePracticePermissions.SettingsCalendar || this.props.allowAllPermissions ?\n                                       <CalendarSettings  {...this.props} {...route}/> : <PermissionDenied/>\n                               )}/>\n                        <Route path=\"/settings/procedures\"\n                               render={(route) => (this.props.activePracticePermissions.SettingsProcedureCatalog || this.props.allowAllPermissions ?\n                                       <RecentProcedure  {...this.props} {...route}/> : <PermissionDenied/>\n                               )}/>\n                        <Route path=\"/settings/billing\"\n                               render={(route) => (this.props.activePracticePermissions.SettingsBilling || this.props.allowAllPermissions ?\n                                       <BillingSettings  {...this.props} {...route}/> : <PermissionDenied/>\n                               )}/>\n                        <Route exact path=\"/settings/loyalty\"\n                               render={(route) => (this.props.activePracticePermissions.SettingsLoyalty || this.props.allowAllPermissions ?\n                                       <LoyaltySettings  {...this.props} /> : <PermissionDenied/>\n                               )}/>\n                        <Route path=\"/settings/emr\"\n                               render={(route) => (this.props.activePracticePermissions.SettingsEMR || this.props.allowAllPermissions ?\n                                       <EMRSettings  {...this.props} {...route}/> : <PermissionDenied/>\n                               )}/>\n                        {/*<Route exact path=\"/settings/loyalty/add\"*/}\n                        {/*render={(route) => (this.props.activePracticePermissions.SettingsLoyalty || this.props.allowAllPermissions ?*/}\n                        {/*<AddOffer  {...this.props} {...route}/> : <PermissionDenied/>*/}\n                        {/*)}/>*/}\n                        <Route path=\"/settings/prescriptions\"\n                               render={(route) => (this.props.activePracticePermissions.SettingsPrescriptions || this.props.allowAllPermissions ?\n                                       <Prescriptions  {...this.props} {...route} /> : <PermissionDenied/>\n                               )}/>\n                        <Route exact path=\"/settings/expense-types\"\n                               render={(route) => (this.props.activePracticePermissions.SettingsExpenseTypes || this.props.allowAllPermissions ?\n                                       <ExpensesTypes  {...this.props} /> : <PermissionDenied/>\n                               )}/>\n                        <Route path=\"/settings/labs\"\n                               render={(route) => (this.props.activePracticePermissions.SettingsLabs || this.props.allowAllPermissions ?\n                                       <LabTracking  {...this.props} {...route} /> : <PermissionDenied/>\n                               )}/>\n                        <Route exact path=\"/settings/medical-history\"\n                               render={(route) => (this.props.activePracticePermissions.SettingsMedicalHistory || this.props.allowAllPermissions ?\n                                       <MedicalHistory  {...this.props} /> : <PermissionDenied/>\n                               )}/>\n                        <Route path=\"/settings/agents\"\n                               render={(route) =>(this.props.activePracticePermissions.SettingsAgents || this.props.allowAllPermissions ?\n                               <AgentsList {...this.state} {...this.props} {...route} key={this.state.active_practiceId} />:<PermissionDenied/>)}/>\n\n                        <Route path=\"/settings/agent-roles\"\n                             render={(route) =>(this.props.activePracticePermissions.SettingsAgentRoles || this.props.allowAllPermissions ?\n                                   <AgentRolesList {...this.state} {...this.props} {...route} key={this.state.active_practiceId}/>:<PermissionDenied/>)\n                            }\n\n                        />\n                        <Route path=\"/settings/mlm\"\n                               render={(route) => (this.props.activePracticePermissions.SettingsMLMSettings || this.props.allowAllPermissions ?\n                                       <MlmBase {...this.state}\n                                                {...this.props}\n                                                {...route}\n                                                key={this.state.active_practiceId}/> : <PermissionDenied/>\n                               )}/>\n                        <Route path=\"/settings/printout\"\n                               render={(route) => (this.props.activePracticePermissions.SettingsPrintouts || this.props.allowAllPermissions ?\n                                   <Printout {...this.state}\n                                             {...route}\n                                             {...this.props}\n                                             key={this.state.active_practiceId}/> : <PermissionDenied/>\n                               )}/>\n                        <Route path=\"/settings/mailpdfsettings\"\n                               render={(route) => (this.props.activePracticePermissions.SettingsEmailPDFSettings || this.props.allowAllPermissions ?\n                                   <MailPDFSettings {...this.state}\n                                                    {...route}\n                                                    {...this.props}/> : <PermissionDenied/>\n                               )}/>\n                        <Route path=\"/settings/integration\"\n                               render={(route) => <IntegrationHome {...this.state}\n                                                                   {...this.props}\n                                                                   {...route}/>}/>\n                        <Route exact path=\"/settings/roomtypes\"\n                               render={(route) => (this.props.activePracticePermissions.SettingsRoomTypes || this.props.allowAllPermissions ?\n                                       <RoomTypes  {...this.props} /> : <PermissionDenied/>\n                               )}/>\n                        <Route exact path=\"/settings/diseases\"\n                               render={(route) => (this.props.activePracticePermissions.SettingsDiseaseList || this.props.allowAllPermissions ?\n                                       <DiseaseList  {...this.props} /> : <PermissionDenied/>\n                               )}/>\n                        <Route path=\"/settings/bed-packages\"\n                               render={(route) => (this.props.activePracticePermissions.SettingsBedPackages || this.props.allowAllPermissions ?\n                                   <BedPackages {...this.state}  {...this.props}  {...route}/>:<PermissionDenied/>)}/>\n                                   \n                        <Route path=\"/settings/medicine-packages\"\n                               render={(route) =>(this.props.activePracticePermissions.SettingsMedicinePackages || this.props.allowAllPermissions ?\n                                   <MedicinePackages {...this.state} {...this.props} {...route}/>:<PermissionDenied/>)}/>\n\n                        <Route path=\"/settings/zoom-user\"\n                               render={(route) =>(this.props.activePracticePermissions.SettingsMedicinePackages || this.props.allowAllPermissions ?\n                                   <ZoomUser {...this.state} {...this.props} {...route}/>:<PermissionDenied/>)}/>\n\n                        {/*<Route path=\"/zoom-user\" render={(route)=><ZoomUser  {...this.state}*/}\n                        {/*                                                     {...this.props}*/}\n                        {/*                                                     {...route}*/}\n                        {/*                                                     key={that.state.active_practiceId}/>}/>*/}\n                        <Route component={Error404}/>\n                    </Switch>\n                </Content>\n            </Layout>\n        </Content>\n    }\n}\n\nexport default SettingsDash;\n","import '../../style/index.less';\nimport './index.less';","function _typeof(obj) {\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nimport * as React from 'react';\nimport * as PropTypes from 'prop-types';\nimport RcSwitch from 'rc-switch';\nimport classNames from 'classnames';\nimport omit from 'omit.js';\nimport Wave from '../_util/wave';\nimport Icon from '../icon';\nimport { ConfigConsumer } from '../config-provider';\nimport warning from '../_util/warning';\n\nvar Switch =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Switch, _React$Component);\n\n  function Switch(props) {\n    var _this;\n\n    _classCallCheck(this, Switch);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Switch).call(this, props));\n\n    _this.saveSwitch = function (node) {\n      _this.rcSwitch = node;\n    };\n\n    _this.renderSwitch = function (_ref) {\n      var _classNames;\n\n      var getPrefixCls = _ref.getPrefixCls;\n      var _this$props = _this.props,\n          customizePrefixCls = _this$props.prefixCls,\n          size = _this$props.size,\n          loading = _this$props.loading,\n          _this$props$className = _this$props.className,\n          className = _this$props$className === void 0 ? '' : _this$props$className,\n          disabled = _this$props.disabled;\n      var prefixCls = getPrefixCls('switch', customizePrefixCls);\n      var classes = classNames(className, (_classNames = {}, _defineProperty(_classNames, \"\".concat(prefixCls, \"-small\"), size === 'small'), _defineProperty(_classNames, \"\".concat(prefixCls, \"-loading\"), loading), _classNames));\n      var loadingIcon = loading ? React.createElement(Icon, {\n        type: \"loading\",\n        className: \"\".concat(prefixCls, \"-loading-icon\")\n      }) : null;\n      return React.createElement(Wave, {\n        insertExtraNode: true\n      }, React.createElement(RcSwitch, _extends({}, omit(_this.props, ['loading']), {\n        prefixCls: prefixCls,\n        className: classes,\n        disabled: disabled || loading,\n        ref: _this.saveSwitch,\n        loadingIcon: loadingIcon\n      })));\n    };\n\n    warning('checked' in props || !('value' in props), 'Switch', '`value` is not validate prop, do you mean `checked`?');\n    return _this;\n  }\n\n  _createClass(Switch, [{\n    key: \"focus\",\n    value: function focus() {\n      this.rcSwitch.focus();\n    }\n  }, {\n    key: \"blur\",\n    value: function blur() {\n      this.rcSwitch.blur();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(ConfigConsumer, null, this.renderSwitch);\n    }\n  }]);\n\n  return Switch;\n}(React.Component);\n\nexport { Switch as default };\nSwitch.__ANT_SWITCH = true;\nSwitch.propTypes = {\n  prefixCls: PropTypes.string,\n  // HACK: https://github.com/ant-design/ant-design/issues/5368\n  // size=default and size=large are the same\n  size: PropTypes.oneOf(['small', 'default', 'large']),\n  className: PropTypes.string\n};","import React from \"react\";\nimport CustomizedTable from \"../../common/CustomizedTable\";\nimport {getAPI, interpolate} from \"../../../utils/common\";\nimport {AGENT_WALLET, MY_AGENTS, WALLET_LEDGER, WALLET_LEDGER_SUM} from \"../../../constants/api\";\nimport {Card, Col, DatePicker, Icon, Row, Select, Statistic, Typography} from \"antd\";\nimport moment from \"moment\";\nimport InfiniteFeedLoaderButton from \"../../common/InfiniteFeedLoaderButton\";\n\nconst {Text} = Typography;\nexport default class PatientWalletLedger extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            ledger: [],\n            ledgerDetails:{},\n            loading: false,\n            walletAmount: null,\n            selectedStartDate: moment().subtract(1, 'month'),\n            selectedEndDate: moment(),\n            agents: [],\n            selectedAgents: []\n        }\n    }\n\n    componentDidMount() {\n        this.loadData();\n        this.loadPatientWallet();\n        this.loadAgents();\n        this.loadSumData();\n    }\n\n    loadPatientWallet = () => {\n        let that = this;\n        if (this.props.currentPatient && this.props.currentPatient.id) {\n            let successFn = function (data) {\n                if (data.length)\n                    that.setState({\n                        walletAmount: data[0]\n                    })\n            }\n            let errorFn = function () {\n\n            }\n            getAPI(interpolate(AGENT_WALLET, [this.props.currentPatient.id]), successFn, errorFn);\n        } else {\n            this.setState({\n                pendingAmount: null\n            })\n        }\n    }\n    loadData = (page = 1) => {\n        let that = this;\n        this.setState({\n            loading: true\n        })\n        let successFn = function (data) {\n            if (data.current == 1) {\n                that.setState({\n                    ledger: data.results,\n                    loading: false,\n                    nextPage: data.next\n                })\n            } else {\n                that.setState(function (prevState) {\n                    return {\n                        ledger: [...prevState.ledger, ...data.results],\n                        loading: false,\n                        nextPage: data.next\n                    }\n                })\n            }\n        }\n        let errorFn = function () {\n            that.setState({\n                loading: false\n            })\n        }\n        let params = {\n            page,\n            start: this.state.selectedStartDate.startOf('day').format(),\n            end: this.state.selectedEndDate.endOf('day').format(),\n            agents: this.state.selectedAgents.join(',')\n        }\n        if (this.state.selectedAgents)\n            params.agents = this.state.selectedAgents.join(',');\n        getAPI(interpolate(WALLET_LEDGER, [this.props.currentPatient.id]), successFn, errorFn, params);\n    }\n    loadSumData = (page = 1) => {\n        let that = this;\n\n        let successFn = function (data) {\n                that.setState({\n                    ledgerDetails: data,\n                    nextPage: data.next\n                })\n\n        }\n        let errorFn = function () {\n        }\n        let params = {\n            page,\n            start: this.state.selectedStartDate.format(),\n            end: this.state.selectedEndDate.format(),\n            agents: this.state.selectedAgents.join(',')\n        }\n        if (this.state.selectedAgents)\n            params.agents = this.state.selectedAgents.join(',');\n        getAPI(interpolate(WALLET_LEDGER_SUM, [this.props.currentPatient.id]), successFn, errorFn, params);\n    }\n    loadAgents() {\n        var that = this;\n        let successFn = function (data) {\n            that.setState({\n                agents: data,\n            })\n        };\n        let errorFn = function () {\n        };\n        let apiParams = {\n            agent: true,\n            pagination: false\n        }\n        getAPI(interpolate(MY_AGENTS, [this.props.currentPatient.id]), successFn, errorFn, apiParams);\n    }\n\n    changeExpenseFilters = (type, value) => {\n        let that = this;\n        this.setState({\n            [type]: value\n        }, function () {\n            that.loadData(1);\n        })\n    }\n\n    render() {\n        let columns = [{\n            title: 'Date',\n            dataIndex: 'created_at',\n            key: 'created_at',\n            render: (value) => moment(value).format('LLL')\n        }, {\n            title: 'Patient',\n            dataIndex: 'received_from',\n            key: 'received_from',\n            render: (value, record) => value ? <Text>{value.user.first_name} ({value.custom_id})</Text> : '--'\n        }, , {\n            title: 'Refered By',\n            dataIndex: 'received_from.user.referer_data',\n            key: 'received_from.user.referer_data',\n            render: (value, record) => value && value.referer ? <Text>{value.referer.first_name} ({value.custom_id})</Text> : '--'\n        }, {\n            title: 'Ledger Comment',\n            dataIndex: 'comments',\n            key: 'comments',\n            render: (value, record) => record.is_cancelled ? <Text delete>{value}</Text> : value\n        },\n            //     {\n            //     title: 'Amount Type',\n            //     dataIndex: 'amount_type',\n            //     key: 'amount_type',\n            //     render: (value, record) => record.is_cancelled ? <Text delete>{value}</Text> : value\n            // },\n            {\n                title: 'Cr/Dr',\n                dataIndex: 'ledger_type',\n                key: 'ledger_type',\n                render: (value, record) => record.is_cancelled ? <Text delete>{value}</Text> : value\n            }, {\n                title: 'Amount',\n                dataIndex: 'amount',\n                key: 'amount',\n                render: (value, record) => record.is_cancelled ?\n                    <Text delete>{value.toFixed(2)}</Text> : value.toFixed(2)\n            }];\n        return <div>\n            <Card title={\"Wallet Ledger\"}>\n                <Row gutter={16} style={{marginBottom: 10}}>\n                    <Col span={2} style={{textAlign: \"right\"}}>\n                        <b> Agents</b>\n                    </Col>\n                    <Col span={4}>\n                        <Select style={{width: '100%'}} value={this.state.selectedAgents}\n                                mode=\"multiple\"\n                                disabled={this.state.loading}\n                                onChange={(value) => this.changeExpenseFilters('selectedAgents', value)}>\n                            {this.state.agents.map(item => <Select.Option\n                                value={item.id}>{item.user.first_name}</Select.Option>)}\n                        </Select>\n                    </Col>\n                    {/*<Col span={2} style={{textAlign: \"right\"}}>*/}\n                    {/*    <b> Payment Modes</b>*/}\n                    {/*</Col>*/}\n                    {/*<Col span={4}>*/}\n                    {/*    <Select style={{width: '100%'}} value={this.state.selectedPaymentMode}*/}\n                    {/*            disabled={this.state.loading}*/}\n                    {/*            onChange={(value) => this.changeExpenseFilters('selectedPaymentMode', value)}>*/}\n                    {/*        <Select.Option value={null}>--ALL PAYMENT MODE--</Select.Option>*/}\n                    {/*        {this.state.paymentModes.map(item => <Select.Option*/}\n                    {/*            value={item.id}>{item.mode}</Select.Option>)}*/}\n                    {/*    </Select>*/}\n                    {/*</Col>*/}\n\n                    <Col span={2} style={{textAlign: \"right\"}}>\n                        <b> From</b>\n                    </Col>\n                    <Col span={4}>\n                        <DatePicker value={this.state.selectedStartDate}\n                                    disabled={this.state.loading} allowClear={false}\n                                    onChange={(value) => this.changeExpenseFilters('selectedStartDate', value)}/>\n                    </Col>\n                    <Col span={2} style={{textAlign: \"right\"}}>\n                        <b> To</b>\n                    </Col>\n                    <Col span={4}>\n                        <DatePicker value={this.state.selectedEndDate}\n                                    disabled={this.state.loading}\n                                    allowClear={false}\n                                    onChange={(value) => this.changeExpenseFilters('selectedEndDate', value)}/>\n                    </Col>\n                </Row>\n                {this.state.walletAmount ?\n                    <Row style={{textAlign: 'center', marginBottom: 10}}>\n                        {/*<Col span={12}>*/}\n                        {/*    <Statistic title={\"\"} prefix={<Icon type={\"wallet\"}/>}*/}\n                        {/*               value={this.state.walletAmount.refundable_amount}/>*/}\n                        {/*</Col>*/}\n                        <Col span={24}>\n                            <Statistic title={\"Wallet Total\"} prefix={<Icon type={\"wallet\"}/>}\n                                       value={this.state.walletAmount.non_refundable} precision={2}/>\n                        </Col>\n                    </Row> : null}\n                <CustomizedTable dataSource={this.state.ledger} loading={this.state.loading} columns={columns}\n                                 hideReport\n                                 pagination={false}/>\n                <InfiniteFeedLoaderButton loading={this.state.loading}\n                                          hidden={!this.state.nextPage}\n                                          loaderFunction={() => this.loadData(this.state.nextPage)}/>\n                <Row style={{textAlign: 'center', marginBottom: 10}}>\n                    <Col span={8}>\n                        <Statistic title={\"Credit\"} value={this.state.ledgerDetails.credit} precision={2}/>\n                    </Col>\n                    <Col span={8}>\n                        <Statistic title={\"Debit\"} value={this.state.ledgerDetails.debit} precision={2}/>\n                    </Col>\n                    <Col span={8}>\n                        <Statistic title={\"Profit\"} value={this.state.ledgerDetails.credit-this.state.ledgerDetails.debit} precision={2}/>\n                    </Col>\n                </Row>\n            </Card>\n        </div>\n    }\n}\n"],"sourceRoot":""}