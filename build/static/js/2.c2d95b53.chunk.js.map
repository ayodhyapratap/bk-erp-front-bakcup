{"version":3,"sources":["../node_modules/copy-to-clipboard/index.js","../node_modules/toggle-selection/index.js","../locale-provider/index.jsx","../config-provider/index.jsx","../typography/style/index.jsx","../_util/ref.js","../typography/Typography.jsx","../typography/Editable.jsx","../typography/util.jsx","../typography/Base.jsx","../typography/Text.jsx","../typography/Title.jsx","../typography/Paragraph.jsx","../typography/index.jsx"],"names":["deselectCurrent","require","clipboardToIE11Formatting","module","exports","text","options","debug","message","reselectPrevious","range","selection","mark","success","document","createRange","getSelection","createElement","textContent","style","all","position","top","clip","whiteSpace","webkitUserSelect","MozUserSelect","msUserSelect","userSelect","addEventListener","e","stopPropagation","format","preventDefault","clipboardData","console","warn","window","clearData","setData","body","appendChild","selectNodeContents","addRange","execCommand","Error","err","error","copyKey","test","navigator","userAgent","replace","prompt","removeRange","removeAllRanges","removeChild","rangeCount","active","activeElement","ranges","i","push","getRangeAt","tagName","toUpperCase","blur","type","forEach","focus","setMomentLocale","locale","interopDefault","LocaleProvider","props","changeConfirmLocale","warning","antLocale","this","exist","prevProps","React","PropTypes","configConsumerProps","fillRef","ref","node","__rest","s","t","Object","p","Typography","_a","customizePrefixCls","component","className","ariaLabel","setContentRef","children","restProps","mergedRef","refs","composeRef","getPrefixCls","Component","prefixCls","classNames","aria-label","RefTypography","Editable","current","value","target","keyCode","ctrlKey","altKey","metaKey","shiftKey","onCancel","KeyCode","onSave","nextProps","prevState","prevValue","newState","textarea","textArea","length","onChange","onKeyDown","onKeyUp","onCompositionStart","onCompositionEnd","onBlur","autoSize","polyfill","wrapperStyle","padding","margin","display","lineHeight","pxToNumber","match","Number","ellipsisContainer","originStyle","originCSS","Array","name","maxHeight","rows","contentList","childList","prevChild","child","mergeChildren","toArray","render","inRange","unmountComponentAtNode","content","ellipsis","childNodes","fixedNodes","ellipsisChildren","ellipsisContentHolder","ellipsisTextNode","childNode","appendChildNode","finished","reactNode","index","fullText","textNode","startLoc","endLoc","lastSuccessLoc","midLoc","Math","currentText","step","currentStepText","measureText","measureNode","isLineClampSupport","isStyleSupport","isTextOverflowSupport","Base","edit","copied","ellipsisText","ellipsisContent","isEllipsis","expanded","clientRendered","onExpand","copyable","copyConfig","String","copy","onStart","raf","editable","prevEllipsis","getEllipsis","editing","expandable","measure","findDOMNode","renderOperations","forceRender","key","onClick","expandStr","title","editStr","role","forceRenderExpanded","renderExpand","disabled","textProps","omit","cssEllipsis","cssTextOverflow","cssLineClamp","aria-hidden","code","underline","del","strong","currentContent","wrap","wrapperDecorations","componentName","copyStr","expand","onResize","WebkitLineClamp","TITLE_ELE_LIST","tupleNum","level"],"mappings":"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","file":"static/js/2.c2d95b53.chunk.js","sourcesContent":["\"use strict\";\n\nvar deselectCurrent = require(\"toggle-selection\");\n\nvar clipboardToIE11Formatting = {\n  \"text/plain\": \"Text\",\n  \"text/html\": \"Url\",\n  \"default\": \"Text\"\n}\n\nvar defaultMessage = \"Copy to clipboard: #{key}, Enter\";\n\nfunction format(message) {\n  var copyKey = (/mac os x/i.test(navigator.userAgent) ? \"⌘\" : \"Ctrl\") + \"+C\";\n  return message.replace(/#{\\s*key\\s*}/g, copyKey);\n}\n\nfunction copy(text, options) {\n  var debug,\n    message,\n    reselectPrevious,\n    range,\n    selection,\n    mark,\n    success = false;\n  if (!options) {\n    options = {};\n  }\n  debug = options.debug || false;\n  try {\n    reselectPrevious = deselectCurrent();\n\n    range = document.createRange();\n    selection = document.getSelection();\n\n    mark = document.createElement(\"span\");\n    mark.textContent = text;\n    // reset user styles for span element\n    mark.style.all = \"unset\";\n    // prevents scrolling to the end of the page\n    mark.style.position = \"fixed\";\n    mark.style.top = 0;\n    mark.style.clip = \"rect(0, 0, 0, 0)\";\n    // used to preserve spaces and line breaks\n    mark.style.whiteSpace = \"pre\";\n    // do not inherit user-select (it may be `none`)\n    mark.style.webkitUserSelect = \"text\";\n    mark.style.MozUserSelect = \"text\";\n    mark.style.msUserSelect = \"text\";\n    mark.style.userSelect = \"text\";\n    mark.addEventListener(\"copy\", function(e) {\n      e.stopPropagation();\n      if (options.format) {\n        e.preventDefault();\n        if (typeof e.clipboardData === \"undefined\") { // IE 11\n          debug && console.warn(\"unable to use e.clipboardData\");\n          debug && console.warn(\"trying IE specific stuff\");\n          window.clipboardData.clearData();\n          var format = clipboardToIE11Formatting[options.format] || clipboardToIE11Formatting[\"default\"]\n          window.clipboardData.setData(format, text);\n        } else { // all other browsers\n          e.clipboardData.clearData();\n          e.clipboardData.setData(options.format, text);\n        }\n      }\n    });\n\n    document.body.appendChild(mark);\n\n    range.selectNodeContents(mark);\n    selection.addRange(range);\n\n    var successful = document.execCommand(\"copy\");\n    if (!successful) {\n      throw new Error(\"copy command was unsuccessful\");\n    }\n    success = true;\n  } catch (err) {\n    debug && console.error(\"unable to copy using execCommand: \", err);\n    debug && console.error(\"unable to copy using clipboardData: \", err);\n    debug && console.error(\"falling back to prompt\");\n    message = format(\"message\" in options ? options.message : defaultMessage);\n    window.prompt(message, text);\n  } finally {\n    if (selection) {\n      if (typeof selection.removeRange == \"function\") {\n        selection.removeRange(range);\n      } else {\n        selection.removeAllRanges();\n      }\n    }\n\n    if (mark) {\n      document.body.removeChild(mark);\n    }\n    reselectPrevious();\n  }\n\n  return success;\n}\n\nmodule.exports = copy;\n","\nmodule.exports = function () {\n  var selection = document.getSelection();\n  if (!selection.rangeCount) {\n    return function () {};\n  }\n  var active = document.activeElement;\n\n  var ranges = [];\n  for (var i = 0; i < selection.rangeCount; i++) {\n    ranges.push(selection.getRangeAt(i));\n  }\n\n  switch (active.tagName.toUpperCase()) { // .toUpperCase handles XHTML\n    case 'INPUT':\n    case 'TEXTAREA':\n      active.blur();\n      break;\n\n    default:\n      active = null;\n      break;\n  }\n\n  selection.removeAllRanges();\n  return function () {\n    selection.type === 'Caret' &&\n    selection.removeAllRanges();\n\n    if (!selection.rangeCount) {\n      ranges.forEach(function(range) {\n        selection.addRange(range);\n      });\n    }\n\n    active &&\n    active.focus();\n  };\n};\n","import * as React from 'react';\nimport * as PropTypes from 'prop-types';\nimport * as moment from 'moment';\nimport interopDefault from '../_util/interopDefault';\nimport { changeConfirmLocale } from '../modal/locale';\nimport warning from '../_util/warning';\nexport const ANT_MARK = 'internalMark';\nfunction setMomentLocale(locale) {\n    if (locale && locale.locale) {\n        interopDefault(moment).locale(locale.locale);\n    }\n    else {\n        interopDefault(moment).locale('en');\n    }\n}\nexport default class LocaleProvider extends React.Component {\n    constructor(props) {\n        super(props);\n        setMomentLocale(props.locale);\n        changeConfirmLocale(props.locale && props.locale.Modal);\n        warning(props._ANT_MARK__ === ANT_MARK, 'LocaleProvider', '`LocaleProvider` is deprecated. Please use `locale` with `ConfigProvider` instead: http://u.ant.design/locale');\n    }\n    getChildContext() {\n        return {\n            antLocale: Object.assign(Object.assign({}, this.props.locale), { exist: true }),\n        };\n    }\n    componentDidUpdate(prevProps) {\n        const { locale } = this.props;\n        if (prevProps.locale !== locale) {\n            setMomentLocale(locale);\n            changeConfirmLocale(locale && locale.Modal);\n        }\n    }\n    componentWillUnmount() {\n        changeConfirmLocale();\n    }\n    render() {\n        return this.props.children;\n    }\n}\nLocaleProvider.propTypes = {\n    locale: PropTypes.object,\n};\nLocaleProvider.defaultProps = {\n    locale: {},\n};\nLocaleProvider.childContextTypes = {\n    antLocale: PropTypes.object,\n};\n","// TODO: remove this lint\n// SFC has specified a displayName, but not worked.\n/* eslint-disable react/display-name */\nimport * as React from 'react';\nimport LocaleProvider, { ANT_MARK } from '../locale-provider';\nimport LocaleReceiver from '../locale-provider/LocaleReceiver';\nimport { ConfigConsumer, ConfigContext } from './context';\nexport { ConfigConsumer };\nexport const configConsumerProps = [\n    'getPopupContainer',\n    'rootPrefixCls',\n    'getPrefixCls',\n    'renderEmpty',\n    'csp',\n    'autoInsertSpaceInButton',\n    'locale',\n    'pageHeader',\n];\nclass ConfigProvider extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.getPrefixCls = (suffixCls, customizePrefixCls) => {\n            const { prefixCls = 'ant' } = this.props;\n            if (customizePrefixCls)\n                return customizePrefixCls;\n            return suffixCls ? `${prefixCls}-${suffixCls}` : prefixCls;\n        };\n        this.renderProvider = (context, legacyLocale) => {\n            const { children, getPopupContainer, renderEmpty, csp, autoInsertSpaceInButton, locale, pageHeader, } = this.props;\n            const config = Object.assign(Object.assign({}, context), { getPrefixCls: this.getPrefixCls, csp,\n                autoInsertSpaceInButton });\n            if (getPopupContainer) {\n                config.getPopupContainer = getPopupContainer;\n            }\n            if (renderEmpty) {\n                config.renderEmpty = renderEmpty;\n            }\n            if (pageHeader) {\n                config.pageHeader = pageHeader;\n            }\n            return (<ConfigContext.Provider value={config}>\n        <LocaleProvider locale={locale || legacyLocale} _ANT_MARK__={ANT_MARK}>\n          {children}\n        </LocaleProvider>\n      </ConfigContext.Provider>);\n        };\n    }\n    render() {\n        return (<LocaleReceiver>\n        {(_, __, legacyLocale) => (<ConfigConsumer>\n            {context => this.renderProvider(context, legacyLocale)}\n          </ConfigConsumer>)}\n      </LocaleReceiver>);\n    }\n}\nexport default ConfigProvider;\n","import '../../style/index.less';\nimport './index.less';\n// style dependencies\nimport '../../tooltip/style';\nimport '../../input/style';\n","export function fillRef(ref, node) {\n    if (typeof ref === 'function') {\n        ref(node);\n    }\n    else if (typeof ref === 'object' && ref && 'current' in ref) {\n        ref.current = node;\n    }\n}\nexport function composeRef(...refs) {\n    return (node) => {\n        refs.forEach(ref => {\n            fillRef(ref, node);\n        });\n    };\n}\n","var __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nimport * as React from 'react';\nimport classNames from 'classnames';\nimport { ConfigConsumer } from '../config-provider';\nimport warning from '../_util/warning';\nimport { composeRef } from '../_util/ref';\nconst Typography = (_a, ref) => {\n    var { prefixCls: customizePrefixCls, component = 'article', className, 'aria-label': ariaLabel, setContentRef, children } = _a, restProps = __rest(_a, [\"prefixCls\", \"component\", \"className\", 'aria-label', \"setContentRef\", \"children\"]);\n    let mergedRef = ref;\n    if (setContentRef) {\n        warning(false, 'Typography', '`setContentRef` is deprecated. Please use `ref` instead.');\n        mergedRef = composeRef(ref, setContentRef);\n    }\n    return (<ConfigConsumer>\n      {({ getPrefixCls }) => {\n        const Component = component;\n        const prefixCls = getPrefixCls('typography', customizePrefixCls);\n        return (<Component className={classNames(prefixCls, className)} aria-label={ariaLabel} ref={mergedRef} {...restProps}>\n            {children}\n          </Component>);\n    }}\n    </ConfigConsumer>);\n};\nlet RefTypography;\nif (React.forwardRef) {\n    RefTypography = React.forwardRef(Typography);\n    RefTypography.displayName = 'Typography';\n}\nelse {\n    class TypographyWrapper extends React.Component {\n        constructor() {\n            super(...arguments);\n            this.state = {};\n        }\n        render() {\n            return <Typography {...this.props}/>;\n        }\n    }\n    RefTypography = TypographyWrapper;\n}\n// es default export should use const instead of let\nconst ExportTypography = RefTypography;\nexport default ExportTypography;\n","import * as React from 'react';\nimport KeyCode from 'rc-util/lib/KeyCode';\nimport classNames from 'classnames';\nimport { polyfill } from 'react-lifecycles-compat';\nimport Icon from '../icon';\nimport TextArea from '../input/TextArea';\nclass Editable extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.inComposition = false;\n        this.state = {\n            current: '',\n        };\n        this.onChange = ({ target: { value } }) => {\n            this.setState({ current: value.replace(/[\\r\\n]/g, '') });\n        };\n        this.onCompositionStart = () => {\n            this.inComposition = true;\n        };\n        this.onCompositionEnd = () => {\n            this.inComposition = false;\n        };\n        this.onKeyDown = ({ keyCode }) => {\n            // We don't record keyCode when IME is using\n            if (this.inComposition)\n                return;\n            this.lastKeyCode = keyCode;\n        };\n        this.onKeyUp = ({ keyCode, ctrlKey, altKey, metaKey, shiftKey, }) => {\n            const { onCancel } = this.props;\n            // Check if it's a real key\n            if (this.lastKeyCode === keyCode &&\n                !this.inComposition &&\n                !ctrlKey &&\n                !altKey &&\n                !metaKey &&\n                !shiftKey) {\n                if (keyCode === KeyCode.ENTER) {\n                    this.confirmChange();\n                }\n                else if (keyCode === KeyCode.ESC) {\n                    onCancel();\n                }\n            }\n        };\n        this.onBlur = () => {\n            this.confirmChange();\n        };\n        this.confirmChange = () => {\n            const { current } = this.state;\n            const { onSave } = this.props;\n            onSave(current.trim());\n        };\n        this.setTextarea = (textarea) => {\n            this.textarea = textarea;\n        };\n    }\n    static getDerivedStateFromProps(nextProps, prevState) {\n        const { prevValue } = prevState;\n        const { value } = nextProps;\n        const newState = {\n            prevValue: value,\n        };\n        if (prevValue !== value) {\n            newState.current = value;\n        }\n        return newState;\n    }\n    componentDidMount() {\n        if (this.textarea && this.textarea.resizableTextArea) {\n            const { textArea } = this.textarea.resizableTextArea;\n            textArea.focus();\n            const { length } = textArea.value;\n            textArea.setSelectionRange(length, length);\n        }\n    }\n    render() {\n        const { current } = this.state;\n        const { prefixCls, 'aria-label': ariaLabel, className, style } = this.props;\n        return (<div className={classNames(prefixCls, `${prefixCls}-edit-content`, className)} style={style}>\n        <TextArea ref={this.setTextarea} value={current} onChange={this.onChange} onKeyDown={this.onKeyDown} onKeyUp={this.onKeyUp} onCompositionStart={this.onCompositionStart} onCompositionEnd={this.onCompositionEnd} onBlur={this.onBlur} aria-label={ariaLabel} autoSize/>\n        <Icon type=\"enter\" className={`${prefixCls}-edit-content-confirm`}/>\n      </div>);\n    }\n}\npolyfill(Editable);\nexport default Editable;\n","import { render, unmountComponentAtNode } from 'react-dom';\nimport * as React from 'react';\nimport toArray from 'rc-util/lib/Children/toArray';\n// We only handle element & text node.\nconst ELEMENT_NODE = 1;\nconst TEXT_NODE = 3;\nconst COMMENT_NODE = 8;\nlet ellipsisContainer;\nconst wrapperStyle = {\n    padding: 0,\n    margin: 0,\n    display: 'inline',\n    lineHeight: 'inherit',\n};\nfunction pxToNumber(value) {\n    if (!value)\n        return 0;\n    const match = value.match(/^\\d*(\\.\\d*)?/);\n    return match ? Number(match[0]) : 0;\n}\nfunction styleToString(style) {\n    // There are some different behavior between Firefox & Chrome.\n    // We have to handle this ourself.\n    const styleNames = Array.prototype.slice.apply(style);\n    return styleNames.map(name => `${name}: ${style.getPropertyValue(name)};`).join('');\n}\nfunction mergeChildren(children) {\n    const childList = [];\n    children.forEach((child) => {\n        const prevChild = childList[childList.length - 1];\n        if (typeof child === 'string' && typeof prevChild === 'string') {\n            childList[childList.length - 1] += child;\n        }\n        else {\n            childList.push(child);\n        }\n    });\n    return childList;\n}\nexport default (originEle, rows, content, fixedContent, ellipsisStr) => {\n    if (!ellipsisContainer) {\n        ellipsisContainer = document.createElement('div');\n        ellipsisContainer.setAttribute('aria-hidden', 'true');\n        document.body.appendChild(ellipsisContainer);\n    }\n    // Get origin style\n    const originStyle = window.getComputedStyle(originEle);\n    const originCSS = styleToString(originStyle);\n    const lineHeight = pxToNumber(originStyle.lineHeight);\n    const maxHeight = lineHeight * (rows + 1) +\n        pxToNumber(originStyle.paddingTop) +\n        pxToNumber(originStyle.paddingBottom);\n    // Set shadow\n    ellipsisContainer.setAttribute('style', originCSS);\n    ellipsisContainer.style.position = 'fixed';\n    ellipsisContainer.style.left = '0';\n    ellipsisContainer.style.height = 'auto';\n    ellipsisContainer.style.minHeight = 'auto';\n    ellipsisContainer.style.maxHeight = 'auto';\n    ellipsisContainer.style.top = '-999999px';\n    ellipsisContainer.style.zIndex = '-1000';\n    // clean up css overflow\n    ellipsisContainer.style.textOverflow = 'clip';\n    ellipsisContainer.style.whiteSpace = 'normal';\n    ellipsisContainer.style.webkitLineClamp = 'none';\n    // Render in the fake container\n    const contentList = mergeChildren(toArray(content));\n    render(<div style={wrapperStyle}>\n      <span style={wrapperStyle}>{contentList}</span>\n      <span style={wrapperStyle}>{fixedContent}</span>\n    </div>, ellipsisContainer); // wrap in an div for old version react\n    // Check if ellipsis in measure div is height enough for content\n    function inRange() {\n        return ellipsisContainer.offsetHeight < maxHeight;\n    }\n    // Skip ellipsis if already match\n    if (inRange()) {\n        unmountComponentAtNode(ellipsisContainer);\n        return { content, text: ellipsisContainer.innerHTML, ellipsis: false };\n    }\n    // We should clone the childNode since they're controlled by React and we can't reuse it without warning\n    const childNodes = Array.prototype.slice\n        .apply(ellipsisContainer.childNodes[0].childNodes[0].cloneNode(true).childNodes)\n        .filter(({ nodeType }) => nodeType !== COMMENT_NODE);\n    const fixedNodes = Array.prototype.slice.apply(ellipsisContainer.childNodes[0].childNodes[1].cloneNode(true).childNodes);\n    unmountComponentAtNode(ellipsisContainer);\n    // ========================= Find match ellipsis content =========================\n    const ellipsisChildren = [];\n    ellipsisContainer.innerHTML = '';\n    // Create origin content holder\n    const ellipsisContentHolder = document.createElement('span');\n    ellipsisContainer.appendChild(ellipsisContentHolder);\n    const ellipsisTextNode = document.createTextNode(ellipsisStr);\n    ellipsisContentHolder.appendChild(ellipsisTextNode);\n    fixedNodes.forEach(childNode => {\n        ellipsisContainer.appendChild(childNode);\n    });\n    // Append before fixed nodes\n    function appendChildNode(node) {\n        ellipsisContentHolder.insertBefore(node, ellipsisTextNode);\n    }\n    // Get maximum text\n    function measureText(textNode, fullText, startLoc = 0, endLoc = fullText.length, lastSuccessLoc = 0) {\n        const midLoc = Math.floor((startLoc + endLoc) / 2);\n        const currentText = fullText.slice(0, midLoc);\n        textNode.textContent = currentText;\n        if (startLoc >= endLoc - 1) {\n            // Loop when step is small\n            for (let step = endLoc; step >= startLoc; step -= 1) {\n                const currentStepText = fullText.slice(0, step);\n                textNode.textContent = currentStepText;\n                if (inRange()) {\n                    return step === fullText.length\n                        ? {\n                            finished: false,\n                            reactNode: fullText,\n                        }\n                        : {\n                            finished: true,\n                            reactNode: currentStepText,\n                        };\n                }\n            }\n        }\n        if (inRange()) {\n            return measureText(textNode, fullText, midLoc, endLoc, midLoc);\n        }\n        return measureText(textNode, fullText, startLoc, midLoc, lastSuccessLoc);\n    }\n    function measureNode(childNode, index) {\n        const type = childNode.nodeType;\n        if (type === ELEMENT_NODE) {\n            // We don't split element, it will keep if whole element can be displayed.\n            appendChildNode(childNode);\n            if (inRange()) {\n                return {\n                    finished: false,\n                    reactNode: contentList[index],\n                };\n            }\n            // Clean up if can not pull in\n            ellipsisContentHolder.removeChild(childNode);\n            return {\n                finished: true,\n                reactNode: null,\n            };\n        }\n        if (type === TEXT_NODE) {\n            const fullText = childNode.textContent || '';\n            const textNode = document.createTextNode(fullText);\n            appendChildNode(textNode);\n            return measureText(textNode, fullText);\n        }\n        // Not handle other type of content\n        // PS: This code should not be attached after react 16\n        return {\n            finished: false,\n            reactNode: null,\n        };\n    }\n    childNodes.some((childNode, index) => {\n        const { finished, reactNode } = measureNode(childNode, index);\n        if (reactNode) {\n            ellipsisChildren.push(reactNode);\n        }\n        return finished;\n    });\n    return {\n        content: ellipsisChildren,\n        text: ellipsisContainer.innerHTML,\n        ellipsis: true,\n    };\n};\n","var __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nimport * as React from 'react';\nimport classNames from 'classnames';\nimport { polyfill } from 'react-lifecycles-compat';\nimport toArray from 'rc-util/lib/Children/toArray';\nimport findDOMNode from 'rc-util/lib/Dom/findDOMNode';\nimport copy from 'copy-to-clipboard';\nimport omit from 'omit.js';\nimport ResizeObserver from 'rc-resize-observer';\nimport { configConsumerProps } from '../config-provider';\nimport { withConfigConsumer } from '../config-provider/context';\nimport LocaleReceiver from '../locale-provider/LocaleReceiver';\nimport warning from '../_util/warning';\nimport TransButton from '../_util/transButton';\nimport raf from '../_util/raf';\nimport isStyleSupport from '../_util/styleChecker';\nimport Icon from '../icon';\nimport Tooltip from '../tooltip';\nimport Typography from './Typography';\nimport Editable from './Editable';\nimport measure from './util';\nconst isLineClampSupport = isStyleSupport('webkitLineClamp');\nconst isTextOverflowSupport = isStyleSupport('textOverflow');\nfunction wrapperDecorations({ mark, code, underline, delete: del, strong }, content) {\n    let currentContent = content;\n    function wrap(needed, tag) {\n        if (!needed)\n            return;\n        currentContent = React.createElement(tag, {}, currentContent);\n    }\n    wrap(strong, 'strong');\n    wrap(underline, 'u');\n    wrap(del, 'del');\n    wrap(code, 'code');\n    wrap(mark, 'mark');\n    return currentContent;\n}\nconst ELLIPSIS_STR = '...';\nclass Base extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.state = {\n            edit: false,\n            copied: false,\n            ellipsisText: '',\n            ellipsisContent: null,\n            isEllipsis: false,\n            expanded: false,\n            clientRendered: false,\n        };\n        // =============== Expend ===============\n        this.onExpandClick = () => {\n            const { onExpand } = this.getEllipsis();\n            this.setState({ expanded: true });\n            if (onExpand) {\n                onExpand();\n            }\n        };\n        // ================ Edit ================\n        this.onEditClick = () => {\n            this.triggerEdit(true);\n        };\n        this.onEditChange = (value) => {\n            const { onChange } = this.getEditable();\n            if (onChange) {\n                onChange(value);\n            }\n            this.triggerEdit(false);\n        };\n        this.onEditCancel = () => {\n            this.triggerEdit(false);\n        };\n        // ================ Copy ================\n        this.onCopyClick = () => {\n            const { children, copyable } = this.props;\n            const copyConfig = Object.assign({}, (typeof copyable === 'object' ? copyable : null));\n            if (copyConfig.text === undefined) {\n                copyConfig.text = String(children);\n            }\n            copy(copyConfig.text || '');\n            this.setState({ copied: true }, () => {\n                if (copyConfig.onCopy) {\n                    copyConfig.onCopy();\n                }\n                this.copyId = window.setTimeout(() => {\n                    this.setState({ copied: false });\n                }, 3000);\n            });\n        };\n        this.setContentRef = (node) => {\n            this.content = node;\n        };\n        this.setEditRef = (node) => {\n            this.editIcon = node;\n        };\n        this.triggerEdit = (edit) => {\n            const { onStart } = this.getEditable();\n            if (edit && onStart) {\n                onStart();\n            }\n            this.setState({ edit }, () => {\n                if (!edit && this.editIcon) {\n                    this.editIcon.focus();\n                }\n            });\n        };\n        // ============== Ellipsis ==============\n        this.resizeOnNextFrame = () => {\n            raf.cancel(this.rafId);\n            this.rafId = raf(() => {\n                // Do not bind `syncEllipsis`. It need for test usage on prototype\n                this.syncEllipsis();\n            });\n        };\n    }\n    static getDerivedStateFromProps(nextProps) {\n        const { children, editable } = nextProps;\n        warning(!editable || typeof children === 'string', 'Typography', 'When `editable` is enabled, the `children` should use string.');\n        return {};\n    }\n    componentDidMount() {\n        this.setState({ clientRendered: true });\n        this.resizeOnNextFrame();\n    }\n    componentDidUpdate(prevProps) {\n        const { children } = this.props;\n        const ellipsis = this.getEllipsis();\n        const prevEllipsis = this.getEllipsis(prevProps);\n        if (children !== prevProps.children || ellipsis.rows !== prevEllipsis.rows) {\n            this.resizeOnNextFrame();\n        }\n    }\n    componentWillUnmount() {\n        window.clearTimeout(this.copyId);\n        raf.cancel(this.rafId);\n    }\n    getEditable(props) {\n        const { edit } = this.state;\n        const { editable } = props || this.props;\n        if (!editable)\n            return { editing: edit };\n        return Object.assign({ editing: edit }, (typeof editable === 'object' ? editable : null));\n    }\n    getEllipsis(props) {\n        const { ellipsis } = props || this.props;\n        if (!ellipsis)\n            return {};\n        return Object.assign({ rows: 1, expandable: false }, (typeof ellipsis === 'object' ? ellipsis : null));\n    }\n    canUseCSSEllipsis() {\n        const { clientRendered } = this.state;\n        const { editable, copyable } = this.props;\n        const { rows, expandable } = this.getEllipsis();\n        // Can't use css ellipsis since we need to provide the place for button\n        if (editable || copyable || expandable || !clientRendered) {\n            return false;\n        }\n        if (rows === 1) {\n            return isTextOverflowSupport;\n        }\n        return isLineClampSupport;\n    }\n    syncEllipsis() {\n        const { ellipsisText, isEllipsis, expanded } = this.state;\n        const { rows } = this.getEllipsis();\n        const { children } = this.props;\n        if (!rows || rows < 0 || !this.content || expanded)\n            return;\n        // Do not measure if css already support ellipsis\n        if (this.canUseCSSEllipsis())\n            return;\n        warning(toArray(children).every((child) => typeof child === 'string'), 'Typography', '`ellipsis` should use string as children only.');\n        const { content, text, ellipsis } = measure(findDOMNode(this.content), rows, children, this.renderOperations(true), ELLIPSIS_STR);\n        if (ellipsisText !== text || isEllipsis !== ellipsis) {\n            this.setState({ ellipsisText: text, ellipsisContent: content, isEllipsis: ellipsis });\n        }\n    }\n    renderExpand(forceRender) {\n        const { expandable } = this.getEllipsis();\n        const { prefixCls } = this.props;\n        const { expanded, isEllipsis } = this.state;\n        if (!expandable)\n            return null;\n        // force render expand icon for measure usage or it will cause dead loop\n        if (!forceRender && (expanded || !isEllipsis))\n            return null;\n        return (<a key=\"expand\" className={`${prefixCls}-expand`} onClick={this.onExpandClick} aria-label={this.expandStr}>\n        {this.expandStr}\n      </a>);\n    }\n    renderEdit() {\n        const { editable, prefixCls } = this.props;\n        if (!editable)\n            return;\n        return (<Tooltip key=\"edit\" title={this.editStr}>\n        <TransButton ref={this.setEditRef} className={`${prefixCls}-edit`} onClick={this.onEditClick} aria-label={this.editStr}>\n          <Icon role=\"button\" type=\"edit\"/>\n        </TransButton>\n      </Tooltip>);\n    }\n    renderCopy() {\n        const { copied } = this.state;\n        const { copyable, prefixCls } = this.props;\n        if (!copyable)\n            return;\n        const title = copied ? this.copiedStr : this.copyStr;\n        return (<Tooltip key=\"copy\" title={title}>\n        <TransButton className={classNames(`${prefixCls}-copy`, copied && `${prefixCls}-copy-success`)} onClick={this.onCopyClick} aria-label={title}>\n          <Icon role=\"button\" type={copied ? 'check' : 'copy'}/>\n        </TransButton>\n      </Tooltip>);\n    }\n    renderEditInput() {\n        const { children, prefixCls, className, style } = this.props;\n        return (<Editable value={typeof children === 'string' ? children : ''} onSave={this.onEditChange} onCancel={this.onEditCancel} prefixCls={prefixCls} className={className} style={style}/>);\n    }\n    renderOperations(forceRenderExpanded) {\n        return [this.renderExpand(forceRenderExpanded), this.renderEdit(), this.renderCopy()].filter(node => node);\n    }\n    renderContent() {\n        const { ellipsisContent, isEllipsis, expanded } = this.state;\n        const _a = this.props, { component, children, className, prefixCls, type, disabled, style } = _a, restProps = __rest(_a, [\"component\", \"children\", \"className\", \"prefixCls\", \"type\", \"disabled\", \"style\"]);\n        const { rows } = this.getEllipsis();\n        const textProps = omit(restProps, [\n            'prefixCls',\n            'editable',\n            'copyable',\n            'ellipsis',\n            'mark',\n            'underline',\n            'mark',\n            'code',\n            'delete',\n            'underline',\n            'strong',\n            ...configConsumerProps,\n        ]);\n        const cssEllipsis = this.canUseCSSEllipsis();\n        const cssTextOverflow = rows === 1 && cssEllipsis;\n        const cssLineClamp = rows && rows > 1 && cssEllipsis;\n        let textNode = children;\n        let ariaLabel = null;\n        // Only use js ellipsis when css ellipsis not support\n        if (rows && isEllipsis && !expanded && !cssEllipsis) {\n            ariaLabel = String(children);\n            // We move full content to outer element to avoid repeat read the content by accessibility\n            textNode = (<span title={String(children)} aria-hidden=\"true\">\n          {ellipsisContent}\n          {ELLIPSIS_STR}\n        </span>);\n        }\n        textNode = wrapperDecorations(this.props, textNode);\n        return (<LocaleReceiver componentName=\"Text\">\n        {({ edit, copy: copyStr, copied, expand }) => {\n            this.editStr = edit;\n            this.copyStr = copyStr;\n            this.copiedStr = copied;\n            this.expandStr = expand;\n            return (<ResizeObserver onResize={this.resizeOnNextFrame} disabled={!rows}>\n              <Typography className={classNames(className, {\n                [`${prefixCls}-${type}`]: type,\n                [`${prefixCls}-disabled`]: disabled,\n                [`${prefixCls}-ellipsis`]: rows,\n                [`${prefixCls}-ellipsis-single-line`]: cssTextOverflow,\n                [`${prefixCls}-ellipsis-multiple-line`]: cssLineClamp,\n            })} style={Object.assign(Object.assign({}, style), { WebkitLineClamp: cssLineClamp ? rows : null })} component={component} ref={this.setContentRef} aria-label={ariaLabel} {...textProps}>\n                {textNode}\n                {this.renderOperations()}\n              </Typography>\n            </ResizeObserver>);\n        }}\n      </LocaleReceiver>);\n    }\n    render() {\n        const { editing } = this.getEditable();\n        if (editing) {\n            return this.renderEditInput();\n        }\n        return this.renderContent();\n    }\n}\nBase.defaultProps = {\n    children: '',\n};\npolyfill(Base);\nexport default withConfigConsumer({\n    prefixCls: 'typography',\n})(Base);\n","var __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nimport * as React from 'react';\nimport warning from '../_util/warning';\nimport Base from './Base';\nconst Text = (_a) => {\n    var { ellipsis } = _a, restProps = __rest(_a, [\"ellipsis\"]);\n    warning(typeof ellipsis !== 'object', 'Typography.Text', '`ellipsis` only supports boolean value.');\n    return <Base {...restProps} ellipsis={!!ellipsis} component=\"span\"/>;\n};\nexport default Text;\n","var __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nimport * as React from 'react';\nimport warning from 'warning';\nimport Base from './Base';\nimport { tupleNum } from '../_util/type';\nconst TITLE_ELE_LIST = tupleNum(1, 2, 3, 4);\nconst Title = props => {\n    const { level = 1 } = props, restProps = __rest(props, [\"level\"]);\n    let component;\n    if (TITLE_ELE_LIST.indexOf(level) !== -1) {\n        component = `h${level}`;\n    }\n    else {\n        warning(false, 'Title only accept `1 | 2 | 3 | 4` as `level` value.');\n        component = 'h1';\n    }\n    return <Base {...restProps} component={component}/>;\n};\nexport default Title;\n","import * as React from 'react';\nimport Base from './Base';\nconst Paragraph = props => <Base {...props} component=\"div\"/>;\nexport default Paragraph;\n","import OriginTypography from './Typography';\nimport Text from './Text';\nimport Title from './Title';\nimport Paragraph from './Paragraph';\nconst Typography = OriginTypography;\nTypography.Text = Text;\nTypography.Title = Title;\nTypography.Paragraph = Paragraph;\nexport default Typography;\n"],"sourceRoot":""}