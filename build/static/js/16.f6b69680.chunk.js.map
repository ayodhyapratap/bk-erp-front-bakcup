{"version":3,"sources":["app/components/auth/forms/LoginForm.js","app/components/auth/forms/LogintWithPhone.js","app/components/auth/Auth.js","app/components/common/DynamicFieldsForm.js","app/components/common/WebCamField.js","app/assets/img/kidneycarelogo.png"],"names":["FormItem","Item","LoginForm","props","handleOk","e","that","console","log","postOuterAPI","makeURL","RESET_PASSWORD_MAIL","mobile","state","userMail","data","displayMessage","setState","resetModalVisible","handleCancel","isLoading","username","redirect","handleSubmit","bind","showResetModal","changeUserMail","this","target","value","preventDefault","form","validateFields","err","values","EMAIL","email","PASSWORD","password","login","getFieldDecorator","to","onSubmit","className","rules","required","message","size","prefix","type","style","color","placeholder","float","onClick","loading","changePassLoading","htmlType","title","visible","onOk","onCancel","okText","onChange","push","React","Component","LoginWithPhone","setPhone","sendOTP","phone","successFn","otpSent","SUCCESS_MSG_TYPE","errorFn","sendLoginOTP","LOGIN_RESEND_OTP","LOGIN_SEND_OTP","WARNING_MSG_TYPE","Group","span","block","Auth","LoginFormLayout","create","PasswordResetForm","DynamicFieldsForm","LoginWithPhoneLayout","tokenDefaultValues","key","match","params","token","resetPasswordFields","label","PASSWORD_FIELD","formProp","history","action","RESET_PASSWORD","method","authorisation","path","xs","offset","sm","md","lg","xl","textAlign","src","AppLogo","alt","maxWidth","minWidth","padding","fields","defaultValues","href","TextArea","RadioGroup","CheckboxGroup","fieldDecorators","field","formData","urlInitialValues","MULTI_SELECT_FIELD","initialValue","REQUIRED_FIELD_MESSAGE","validateFieldsAndScroll","forEach","object","colorPickerKey","colorPickerColor","formFields","SINGLE_IMAGE_UPLOAD_FIELD","file","response","image_path","MULTI_IMAGE_UPLOAD_FIELD","fileList","map","id","TIME_PICKER","DATE_PICKER","DATE_TIME_PICKER","format","moment","isValid","QUILL_TEXT_FIELD","editorState","draftToHtml","convertToRaw","getCurrentContent","beforeSend","confirm","confirmText","submitForm","addMailTemplateTag","prevState","currentHtml","EditorState","createWithContent","ContentState","createFromBlockArray","htmlToDraft","toggleWebCam","webCamState","getImageandUpload","fieldKey","image","reqData","FormData","append","postAPI","FILE_UPLOAD_BASE64","setFieldsValue","onEditorStateChange","disabled","countryOptions","stateOptions","cityOptions","smsFields","resetFormData","colorChange","loadCountryData","addSMSTag","nextProps","COUNTRY_FIELD","location","search","pairValueArray","substr","split","length","urlInitialValue","item","keyValue","isNaN","toString","indexOf","parseInt","parseFloat","changeRedirect","headers","Authorization","undefined","putAPI","hex","states","country","cities","getAPI","EXTRA_DATA","prevValue","getFieldValue","formItemLayout","formLayout","labelCol","wrapperCol","extra","INPUT_FIELD","follow","SELECT_FIELD","mode","options","option","Option","showSearch","RADIO_FIELD","CHECKBOX_FIELD","SINGLE_CHECKBOX_FIELD","valuePropName","NUMBER_FIELD","min","max","allowClear","showTime","TEXT_FIELD","autosize","minRows","maxRows","inputChange","SMS_FIELD","MAIL_TEMPLATE_FIELD","border","createEmpty","preview","maxHeight","overflowY","dangerouslySetInnerHTML","__html","COLOR_PICKER","width","margin","backgroundColor","height","singleUploadprops","name","FILE_UPLOAD_API","authorization","info","status","success","error","makeFileURL","allowWebcam","Math","random","footer","getScreenShot","multiuploadprops","img","setAddressField","STATE_FIELD","EMAIL_FIELD","CITY_FIELD","DIVIDER_FIELD","LABEL_FIELD","goBack","WebCamField","setRef","webcam","capture","imageSrc","getScreenshot","audio","ref","videoConstraints","facingMode","screenshotFormat","module","exports"],"mappings":"qcASMA,EAAW,IAAKC,KAiIPC,E,YA7HX,WAAYC,GAAQ,IAAD,8BACf,4CAAMA,KAmBVC,SAAW,SAACC,GACR,IAAIC,EAAI,eACRC,QAAQC,IAAIH,GAUZI,YAAaC,YAAQC,MAAsB,CAACC,OAAQ,EAAKC,MAAMC,WAT/C,SAAUC,GACtBC,YAAe,UAAW,6DAC1BV,EAAKW,SAAS,CACVC,mBAAmB,OAGb,gBA7BC,EAmCnBC,aAAe,SAACd,GACZE,QAAQC,IAAIH,GACZ,EAAKY,SAAS,CACVC,mBAAmB,KApCvB,EAAKL,MAAQ,CACTO,WAAW,EACXC,SAAU,KACVP,SAAU,GACVQ,SAAU,KACVJ,mBAAmB,GAEvB,EAAKK,aAAe,EAAKA,aAAaC,KAAlB,gBACpB,EAAKC,eAAiB,EAAKA,eAAeD,KAApB,gBACtB,EAAKE,eAAiB,EAAKA,eAAeF,KAApB,gBAXP,E,8EAefG,KAAKV,SAAS,CACVC,mBAAmB,M,qCA0BZb,GACXsB,KAAKV,SAAS,CACVH,SAAUT,EAAEuB,OAAOC,U,mCAIdxB,GACTA,EAAEyB,iBACF,IAAIxB,EAAOqB,KACXA,KAAKxB,MAAM4B,KAAKC,gBAAe,SAACC,EAAKC,GACjC,IAAKD,EAAK,CAAC,IAAD,EACFlB,GAAI,mBACHoB,IAAQD,EAAOE,OADZ,cAEHC,IAAWH,EAAOI,UAFf,GAIRhC,EAAKH,MAAMoC,MAAMxB,S,+BAMnB,IACCyB,EAAqBb,KAAKxB,MAAM4B,KAAhCS,kBACP,OAAIb,KAAKd,MAAMS,SACJ,kBAAC,IAAD,CAAUmB,GAAId,KAAKd,MAAMS,WAEhC,oCACI,uBAAMoB,SAAUf,KAAKJ,aAAcoB,UAAU,cACzC,kBAAC3C,EAAD,KACKwC,EAAkB,QAAS,CACxBI,MAAO,CAAC,CAACC,UAAU,EAAMC,QAAS,iCADrCN,CAGG,uBAAOO,KAAK,QAAQC,OAAQ,uBAAMC,KAAK,QAAQC,MAAO,CAACC,MAAO,qBACvDC,YAAY,oBAG3B,kBAACpD,EAAD,KACKwC,EAAkB,WAAY,CAC3BI,MAAO,CAAC,CAACC,UAAU,EAAMC,QAAS,iCADrCN,CAGG,uBAAOO,KAAK,QAAQC,OAAQ,uBAAMC,KAAK,OAAOC,MAAO,CAACC,MAAO,qBACtDF,KAAK,WACLG,YAAY,eAG3B,kBAACpD,EAAD,KACI,uBAAGkD,MAAO,CAACG,MAAO,SAAUJ,KAAK,UAAUK,QAAS3B,KAAKF,gBAAzD,qBAGA,uBAAQsB,KAAK,QAAQQ,QAAS5B,KAAKd,MAAM2C,kBAAmBP,KAAK,UAAUQ,SAAS,SAC5Ed,UAAU,qBADlB,YAMR,iCACA,4BACI,kBAAC,IAAD,CAAMF,GAAI,mBACN,uBAAQM,KAAK,QAAQE,KAAK,UAClBN,UAAU,qBADlB,uBAKR,4BACA,uBACIe,MAAM,0BACNC,QAAShC,KAAKd,MAAMK,kBACpB0C,KAAMjC,KAAKvB,SACXyD,SAAUlC,KAAKR,aACf2C,OAAO,kBAEP,uBACIV,YAAY,2BACZJ,OAAQ,uBAAMC,KAAK,SAASC,MAAO,CAACC,MAAO,qBAC3CY,SAAUpC,KAAKD,kBAGC,GAAvBC,KAAKxB,MAAMmB,UAAoB,kBAAC,IAAD,CAAU0C,MAAI,EAACvB,GAAG,W,GAxH1CwB,IAAMC,W,mBCJxBlE,EAAW,IAAKC,KAiHPkE,E,YA9GX,WAAYhE,GAAQ,IAAD,8BACf,4CAAMA,KAOVoB,aAAe,SAAClB,GACZ,IAAIC,EAAI,eACRD,EAAEyB,iBACF,EAAK3B,MAAM4B,KAAKC,gBAAe,SAACC,EAAKC,GAC5BD,GACIA,GAEG3B,EAAKH,MAAMoC,OACXjC,EAAKH,MAAMoC,MAAML,GAAO,OAhBzB,EAuBnBkC,SAAW,SAACnB,EAAMpB,GACd,EAAKZ,SAAL,eACKgC,EAAOpB,KAzBG,EA4BnBwC,QAAU,WACN,IAAI/D,EAAI,eACR,GAAI,EAAKO,MAAMyD,MAAO,CAClB,IAAIC,EAAY,SAAUxD,GACtBT,EAAKW,SAAS,CACVuD,SAAS,IAEbxD,YAAeyD,KAAkB,2BAEjCC,EAAU,aAGV,EAAK7D,MAAM2D,QACXG,YAAajE,YAAQkE,MAAmB,EAAK/D,MAAMyD,MAAOC,EAAWG,GAErEC,YAAajE,YAAQmE,MAAiB,EAAKhE,MAAMyD,MAAOC,EAAWG,QAGvE1D,YAAe8D,KAAkB,gCA5CrC,EAAKjE,MAAQ,GACb,EAAKU,aAAe,EAAKA,aAAaC,KAAlB,gBAHL,E,sEAkDT,IAAD,OACEgB,EAAqBb,KAAKxB,MAAM4B,KAAhCS,kBACP,OACI,uBAAME,SAAUf,KAAKJ,aAAcoB,UAAU,cAEzC,sBAAOoC,MAAP,CAAahC,KAAK,SACd,2BACI,uBAAKiC,KAAMrD,KAAKd,MAAM2D,QAAU,GAAK,IACjC,kBAAC,EAAD,KACKhC,EAAkB,WAAY,CAC3BI,MAAO,CAAC,CAACC,UAAU,EAAMC,QAAS,8BADrCN,CAGG,uBAAOQ,OAAQ,uBAAMC,KAAK,QAAQC,MAAO,CAACC,MAAO,qBAC1CF,KAAK,OACLG,YAAY,QACZW,SAAU,SAAC1D,GAAD,OAAO,EAAK+D,SAAS,QAAS/D,EAAEuB,OAAOC,aAIpE,uBAAKmD,KAAMrD,KAAKd,MAAM2D,QAAU,EAAI,GAChC,uBAAQvB,KAAK,UAAUF,KAAM,QAASkC,OAAK,EAAC3B,QAAS3B,KAAK0C,SAA1D,eAKZ,kBAAC,EAAD,KACK7B,EAAkB,MAAO,CACtBI,MAAO,CAAC,CAACC,UAAU,EAAMC,QAAS,uBADrCN,CAGG,uBAAOO,KAAK,QAAQC,OAAQ,uBAAMC,KAAK,MAAMC,MAAO,CAACC,MAAO,qBACrDF,KAAK,OACLG,YAAY,UAG3B,kBAAC,EAAD,KACKzB,KAAKd,MAAM2D,QAAU,uBAAGtB,MAAO,CAACG,MAAO,SAAUJ,KAAK,UAAUK,QAAS3B,KAAK0C,SAAzD,gBAEf,KACP,uBAAQtB,KAAK,QAAQE,KAAK,UAAUQ,SAAS,SACrCd,UAAU,qBADlB,WAMJ,iCACA,4BACI,kBAAC,IAAD,CAAMF,GAAI,KAAV,IAAgB,uBAAQM,KAAK,QAAQE,KAAK,UAAUQ,SAAS,SACrCd,UAAU,qBADlB,2BAKpB,iC,GAtGasB,IAAMC,W,qCCE7BgB,E,YACF,WAAY/E,GAAQ,qEACVA,I,sEAIN,IAAIG,EAAOqB,KACLwD,EAAkB,IAAKC,QAAL,CAAclF,GAChCmF,EAAoB,IAAKD,QAAL,CAAcE,KAClCC,EAAuB,IAAKH,QAAL,CAAcjB,GAEvCqB,EAAqB,CAAC,CACtBC,IAAK,OACL5D,MAAQF,KAAKxB,MAAMuF,OAAS/D,KAAKxB,MAAMuF,MAAMC,OAAOC,MAAQjE,KAAKxB,MAAMuF,MAAMC,OAAOC,MAAQ,OAE5FC,EAAsB,CAAC,CACvBC,MAAO,WACPL,IAAK,WACLxC,KAAM8C,KACNlD,UAAU,GACX,CACCiD,MAAO,kBACPL,IAAK,cACLxC,KAAM8C,KACNlD,UAAU,IAERmD,EAAW,CACbzB,UAAW,SAAUxD,GACjBC,YAAeyD,KAAkB,iCACjCnE,EAAKH,MAAM8F,QAAQjC,KAAK,MAE5BU,QAAS,aAETwB,OAAQC,KACRC,OAAQ,OACRC,eAAe,GAEnB,OAAO,uBAAQ1D,UAAU,eAErB,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAO2D,KAAK,oBACR,2BAII,uBAAKC,GAAI,CAACvB,KAAM,GAAIwB,OAAQ,GAAIC,GAAI,CAACzB,KAAM,GAAIwB,OAAQ,GAAIE,GAAI,CAAC1B,KAAM,GAAIwB,OAAQ,GAC7EG,GAAI,CAAC3B,KAAM,EAAGwB,OAAQ,GAAII,GAAI,CAAC5B,KAAM,EAAGwB,OAAQ,IACjD,yBAAK7D,UAAU,mBAAmBO,MAAO,CAAC2D,UAAW,WACjD,yBAAKC,IAAKC,IAASC,IAAI,GAAG9D,MAAO,CAAC+D,SAAU,MAAOC,SAAU,MAAOC,QAAS,UAC7E,2BACI,kBAAC9B,EAAD,iBAAuB1D,KAAKxB,MAA5B,CACmB6F,SAAUA,EACVoB,OAAQvB,EACRwB,cAAe7B,MAEtC,4BACA,iCAUhB,kBAAC,IAAD,KACI,2BAII,uBAAKe,GAAI,CAACvB,KAAM,GAAIwB,OAAQ,GAAIC,GAAI,CAACzB,KAAM,GAAIwB,OAAQ,GAAIE,GAAI,CAAC1B,KAAM,GAAIwB,OAAQ,GAC7EG,GAAI,CAAC3B,KAAM,EAAGwB,OAAQ,GAAII,GAAI,CAAC5B,KAAM,EAAGwB,OAAQ,GAAItD,MAAO,CAACiE,QAAS,SACtE,yBAAKxE,UAAU,mBAAmBO,MAAO,CAAC2D,UAAW,WACjD,yBAAKC,IAAKC,IAASC,IAAI,GAAG9D,MAAO,CAAC+D,SAAU,MAAOC,SAAU,MAAOC,QAAS,UAC7E,kBAAC,IAAD,KAII,kBAAC,IAAD,CAAOb,KAAK,mBACR,kBAACf,EAAD,iBAA0B5D,KAAKxB,MAA/B,CAAsCoC,MAAOZ,KAAKxB,MAAMoC,UAI5D,kBAAC,IAAD,KACI,kBAAC4C,EAAD,iBAAqBxD,KAAKxB,MAA1B,CAAiCoC,MAAOZ,KAAKxB,MAAMoC,UAGvD,kBAAC,IAAD,OAOJ,wBAAIW,MAAO,CAAC2D,UAAW,WAAvB,eACgB,uBAAGS,KAAK,0BAA0B1F,OAAO,UAAzC,gC,GAhG7BqC,IAAMC,WA4GVgB,a,glCC/DRqC,E,IAAAA,SACDvH,EAAW,IAAKC,KAChBuH,EAAa,IAAMzC,MACnB0C,EAAgB,IAAS1C,MAGzBO,E,YACF,WAAYnF,GAAQ,IAAD,8BACf,4CAAMA,KA0BVuH,gBAAkB,SAACC,EAAOC,GACtB,IAAIC,EAAmB,EAAKhH,MAAMgH,iBAClC,OAAIF,EAAM1E,MAAQ6E,KACP,CACHC,aAAcH,EAASD,EAAMlC,KAAOmC,EAASD,EAAMlC,KAAQoC,EAAiBF,EAAMlC,KAAOoC,EAAiBF,EAAMlC,KAAOmC,EAASD,EAAMlC,KACtI7C,MAAO,CAAC,CACJC,SAAU8E,EAAM9E,SAChBC,QAASkF,IACT/E,KAAM,WAKX,CACH8E,aAAcH,EAASD,EAAMlC,KAAOmC,EAASD,EAAMlC,KAAQoC,EAAiBF,EAAMlC,KAAOoC,EAAiBF,EAAMlC,KAAOmC,EAASD,EAAMlC,KACtI7C,MAAO,CAAC,CACJC,SAAU8E,EAAM9E,SAChBC,QAASkF,QA5CF,EAkGnBzG,aAAe,SAAClB,GACZ,IAAIC,EAAI,eACRD,EAAEyB,iBACF,EAAK3B,MAAM4B,KAAKkG,yBAAwB,SAAChG,EAAKC,GACrCD,IACG,EAAK9B,MAAMkH,eACX,EAAKlH,MAAMkH,cAAca,SAAQ,SAAUC,GAEvCjG,EAAM,iBAAKiG,EAAO1C,IAAM0C,EAAOtG,OAAUK,MAG7C,EAAKrB,MAAMuH,iBACXlG,EAAO,EAAKrB,MAAMuH,gBAAkB,EAAKvH,MAAMwH,kBAEnD/H,EAAKH,MAAMiH,OAAOc,SAAQ,SAAUI,GAChC,GAAIA,EAAWrF,MAAQsF,KAA2B,CAC9C,IAAI9C,EAAM6C,EAAW7C,IACjBvD,EAAOuD,IAAQvD,EAAOuD,GAAK+C,MAAQtG,EAAOuD,GAAK+C,KAAKC,SACpDvG,EAAOuD,GAAOvD,EAAOuD,GAAK+C,KAAKC,SAASC,WAExCxG,EAAOuD,GAAO6C,EAAWP,kBAC1B,GAAIO,EAAWrF,MAAQ0F,KAA0B,CACpD,IAAIlD,EAAM6C,EAAW7C,IACjBvD,EAAOuD,IAAQvD,EAAOuD,GAAK+C,MAAQtG,EAAOuD,GAAK+C,KAAKC,SACpDvG,EAAOuD,GAAOvD,EAAOuD,GAAKmD,SAASC,KAAI,SAAAL,GAAI,OAAIA,EAAKC,SAASK,MAE7D5G,EAAOuD,GAAO6C,EAAWP,kBAC1B,GAAIO,EAAWrF,MAAQ8F,MAAeT,EAAWrF,MAAQ+F,KAAeV,EAAWrF,MAAQgG,IAAkB,CAChH,IAAIxD,EAAM6C,EAAW7C,IACjB6C,EAAWY,SACXhH,EAAOuD,GAAO0D,IAAOjH,EAAOuD,IAAM2D,UAAYD,IAAOjH,EAAOuD,IAAMyD,OAAOZ,EAAWY,QAAU,WAE/F,GAAIZ,EAAWrF,MAAQoG,KAAkB,CAC5C,IAAI5D,EAAM6C,EAAW7C,IACrBvD,EAAOuD,GAAOnF,EAAKO,MAAMyI,YAAY7D,GAAO8D,IAAYC,uBAAalJ,EAAKO,MAAMyI,YAAY7D,GAAKgE,sBAAwBnB,EAAWP,iBAGxIzH,EAAKO,MAAMmF,SAAS0D,aACpBxH,EAAS5B,EAAKO,MAAMmF,SAAS0D,WAAWxH,IAExC5B,EAAKO,MAAMmF,SAAS2D,QACpB,IAAMA,QAAQ,CACVjG,MAAOpD,EAAKO,MAAMmF,SAAS4D,aAAe,0BAC1ChG,KAAM,WACFtD,EAAKuJ,WAAW3H,IAEpB2B,SAAU,eAKdvD,EAAKuJ,WAAW3H,QArJb,EAoPnB4H,mBAAqB,SAACrE,EAAK5D,GACf,eACR,EAAKZ,UAAS,SAAU8I,GACpB,IAAIC,EAAcD,EAAUT,YAAY7D,GAAO8D,IAAYC,uBAAaO,EAAUT,YAAY7D,GAAKgE,sBAAwB,GAE3H,OADAO,GAAenI,EACR,CACHyH,YAAY,EAAD,GACJS,EAAUT,YADN,eAEN7D,EAAMwE,cAAYC,kBAAkBC,eAAaC,qBAAqBC,IAAYL,YA5PhF,EAiQnBM,aAAe,SAACrH,EAAMpB,GAClB,EAAKZ,UAAS,SAAU8I,GACpB,MAAO,CACHQ,YAAY,EAAD,GAAMR,EAAUQ,YAAhB,eAA8BtH,EAAOpB,SApQzC,EAwQnB2I,kBAAoB,SAACC,EAAUC,GAC3B,IAAIpK,EAAI,eACJqK,EAAU,IAAIC,SAElBD,EAAQE,OAAO,QAASH,GACxBC,EAAQE,OAAO,OAAQ,QAcvBC,YAAQC,KAAoBJ,GAZZ,SAAU5J,GACtBT,EAAKH,MAAM4B,KAAKiJ,eAAhB,eAAiCP,EAAW,CAACjC,KAAM,CAACC,SAAU1H,MAC9DC,YAAeyD,KAAkB,iCACjCnE,EAAKW,UAAS,SAAU8I,GACpB,MAAO,CACHQ,YAAY,EAAD,GAAMR,EAAUQ,YAAhB,eAA8BE,GAAW,WAIlD,cAG2C,CACrD,eAAgB,yBA5RL,EAgSnBQ,oBAAsB,SAACxF,EAAK6D,GACxB,EAAKrI,UAAS,SAAU8I,GACpB,MAAO,CACHT,YAAY,EAAD,GAAMS,EAAUT,YAAhB,eAA8B7D,EAAM6D,SAjSvD,EAAKzI,MAAQ,CACTuG,OAAQ,EAAKjH,MAAMiH,OACnBQ,SAAU,GACV5B,SAAS,EAAD,CAAGK,eAAe,GAAS,EAAKlG,MAAM6F,UAC9CkF,UAAU,EACV3H,SAAS,EACT4H,eAAgB,GAChBC,aAAc,GACdC,YAAa,GACbC,UAAW,GACXzD,iBAAkB,GAClB0C,YAAa,GACbjB,YAAa,IAEjB,EAAKiC,cAAgB,EAAKA,cAAc/J,KAAnB,gBACrB,EAAKqI,WAAa,EAAKA,WAAWrI,KAAhB,gBAClB,EAAKgK,YAAc,EAAKA,YAAYhK,KAAjB,gBACnB,EAAKiK,gBAAkB,EAAKA,gBAAgBjK,KAArB,gBACvB,EAAKkK,UAAY,EAAKA,UAAUlK,KAAf,gBApBF,E,uFAwBOmK,M,0CA0BtB,IAAIrL,EAAOqB,KAOX,GANAA,KAAK4J,gBACL5J,KAAKxB,MAAMiH,OAAOc,SAAQ,SAAUP,GAC5BA,EAAM1E,MAAQ2I,KACdtL,EAAKmL,qBAGT9J,KAAKxB,MAAM8F,SAAWtE,KAAKxB,MAAM8F,QAAQ4F,SAASC,OAAQ,CAC1D,IAAIC,EAAiBpK,KAAKxB,MAAM8F,QAAQ4F,SAASC,OAAOE,OAAO,GAAGC,MAAM,KACxE,GAAIF,EAAeG,OAAQ,CACvB,IAAIC,EAAkB,GACtBJ,EAAe7D,SAAQ,SAAUkE,GAC7B,IAAIC,EAAWD,EAAKH,MAAM,KACtBI,GAA+B,GAAnBA,EAASH,SAChBI,MAAMD,EAAS,MAA+C,GAAxCA,EAAS,GAAGE,WAAWC,QAAQ,KAE9CF,MAAMD,EAAS,IAGvBF,EAAgBE,EAAS,IAAMA,EAAS,GAFxCF,EAAgBE,EAAS,IAAMI,SAASJ,EAAS,IAFjDF,EAAgBE,EAAS,IAAMK,WAAWL,EAAS,QAQ/D1K,KAAKV,SAAS,CACV4G,iBAAkBsE,Q,sCAO9B,IAAIvE,EAAW,GACfjG,KAAKd,MAAMuG,OAAOc,SAAQ,SAAUP,GAChCC,EAASD,EAAMlC,KAAOkC,EAAMI,gBAEhCpG,KAAKV,SAAS,CACV2G,SAAUA,M,iCAsEP7G,GACP,IAAIT,EAAOqB,KACXA,KAAKV,SAAS,CACViK,UAAU,EACV3H,SAAS,IAEb,IAAIgB,EAAY,SAAUxD,GACtBT,EAAKO,MAAMmF,SAASzB,UAAUxD,GAC9BT,EAAKW,SAAS,CACViK,UAAU,EACV3H,SAAS,IAETjD,EAAKH,MAAMwM,gBACXrM,EAAKH,MAAMwM,kBAGfjI,EAAU,WACVpE,EAAKO,MAAMmF,SAAStB,UACpBpE,EAAKW,SAAS,CACViK,UAAU,EACV3H,SAAS,KAGbqJ,EAAU,GACTtM,EAAKO,MAAMmF,SAASK,gBACrBuG,EAAQC,mBAAgBC,GAEM,QAA9BnL,KAAKxB,MAAM6F,SAASI,OACpB0E,YAAQnJ,KAAKxB,MAAM6F,SAASE,OAAQnF,EAAMwD,EAAWG,EAA9C,KAA2DkI,IAC7B,OAA9BjL,KAAKxB,MAAM6F,SAASI,QAC3B2G,YAAOpL,KAAKxB,MAAM6F,SAASE,OAAQnF,EAAMwD,EAAWG,EAA9C,KAA2DkI,M,kCAI7DzJ,EAAOsC,GACf,IAAInF,EAAOqB,KACXA,KAAKV,SAAS,CACVmH,eAAgB3C,EAChB4C,iBAAkBlF,EAAM6J,MACzB,WACC1M,EAAKH,MAAM4B,KAAKiJ,eAAhB,eAAiCvF,EAAMtC,EAAM6J,W,sCAIrC/J,EAAMpB,GACN,WAARoB,EACAtB,KAAKV,UAAS,SAAU8I,GACpB,IAAIkD,EAAS,GAMb,OALAlD,EAAUoB,eAAejD,SAAQ,SAAUgF,GACnCA,EAAQpE,IAAMjH,IACdoL,EAASC,EAAQD,WAGlB,CAAC7B,aAAc6B,MAG1BtL,KAAKV,UAAS,SAAU8I,GACpB,IAAIoD,EAAS,GAMb,OALApD,EAAUqB,aAAalD,SAAQ,SAAUrH,GACjCA,EAAMiI,IAAMjH,IACZsL,EAAStM,EAAMsM,WAGhB,CAAC9B,YAAa8B,Q,wCAM7B,IAAI7M,EAAOqB,KAQXyL,YAAOC,MAPS,SAAUtM,GACtBT,EAAKW,SAAS,CACVkK,eAAgBpK,EAAKmM,aAGf,iB,gCAKRzH,EAAK5D,GACX,IACIyL,EADO3L,KACUxB,MAAM4B,KAAKwL,cAAc9H,IAAQ,GAD3C9D,KAENxB,MAAM4B,KAAKiJ,eAAhB,eACKvF,EAAM6H,EAAYzL,M,+BA0DvB,IAAMvB,EAAOqB,KACP6L,EAAkB7L,KAAKxB,MAAMsN,WAAa9L,KAAKxB,MAAMsN,WAAa,CACpEC,SAAU,CAAC1I,KAAM,GACjB2I,WAAY,CAAC3I,KAAM,KAEhBxC,EAAqBb,KAAKxB,MAAM4B,KAAhCS,kBACP,OAAO,6BACH,uBAAME,SAAUf,KAAKJ,cAChBI,KAAKxB,MAAMuD,MAAQ,4BAAK/B,KAAKxB,MAAMuD,OAAc,KACjD/B,KAAKd,MAAMuG,OAASzF,KAAKd,MAAMuG,OAAOyB,KAAI,SAAUlB,GACjD,OAAQA,EAAM1E,MACV,KAAK8C,KACD,OAAO,sBAAM9F,KAAN,eAAWwF,IAAKkC,EAAMlC,IAAKK,MAAO6B,EAAM7B,OAAY0H,EAApD,CACWI,MAAOjG,EAAMiG,QAC1BpL,EAAkBmF,EAAMlC,IAAKnF,EAAKoH,gBAAgBC,EAAOrH,EAAKO,MAAM+G,UAApEpF,CACG,uBAAOQ,OAAQ,uBAAMC,KAAK,OAAOC,MAAO,CAACC,MAAO,qBACzCF,KAAK,WACLG,YAAauE,EAAMvE,YACnBW,SAAU,SAAC1D,GAAD,OAAO,WACTsH,EAAM5D,UACN4D,EAAM5D,SAAS1D,KAEvB6K,SAAUvD,EAAMuD,SAAWvD,EAAMuD,SAAW5K,EAAKO,MAAMqK,aAG1E,KAAK2C,IACD,OAAO,kBAAC7N,EAAD,eAAUyF,IAAKkC,EAAMlC,IAAKK,MAAO6B,EAAM7B,OAAY0H,EAAnD,CACUI,MAAOjG,EAAMiG,QACzBpL,EAAkBmF,EAAMlC,IAAKnF,EAAKoH,gBAAgBC,EAAOrH,EAAKO,MAAM+G,UAApEpF,CACG,uBAAOY,YAAauE,EAAMvE,YACnBW,SAAU,SAAC1D,GAAD,OAAO,WACTsH,EAAM5D,UACN4D,EAAM5D,SAAS1D,KAEvB6K,SAAUvD,EAAMuD,SAAWvD,EAAMuD,SAAW5K,EAAKO,MAAMqK,YAEjEvD,EAAMmG,OAAS,0BAAMnL,UAAU,iBAAiBgF,EAAMmG,QAAiB,MAEhF,KAAKC,KACD,OAAO,kBAAC/N,EAAD,eAAUyF,IAAKkC,EAAMlC,KAAS+H,EAA9B,CAA8C1H,MAAO6B,EAAM7B,MACjD8H,MAAOjG,EAAMiG,QACzBpL,EAAkBmF,EAAMlC,IAAKnF,EAAKoH,gBAAgBC,EAAOrH,EAAKO,MAAM+G,UAApEpF,CACG,uBAAQY,YAAauE,EAAMvE,YACnB8H,SAAUvD,EAAMuD,SAAWvD,EAAMuD,SAAW5K,EAAKO,MAAMqK,SACvD8C,KAAMrG,EAAMqG,KAAOrG,EAAMqG,KAAO,WACnCrG,EAAMsG,QAAQpF,KAAI,SAACqF,GAAD,OAAY,sBAAQC,OAAR,CAC3BtM,MAAOqM,EAAOrM,OAAQqM,EAAOpI,YAGxC6B,EAAMmG,OAAS,0BAAMnL,UAAU,iBAAiBgF,EAAMmG,QAAiB,MAEhF,KAAKhG,KACD,OAAO,kBAAC9H,EAAD,eAAUyF,IAAKkC,EAAMlC,KAAS+H,EAA9B,CAA8C1H,MAAO6B,EAAM7B,MACjD8H,MAAOjG,EAAMiG,QACzBpL,EAAkBmF,EAAMlC,IAAP,KAAgBnF,EAAKoH,gBAAgBC,EAAOrH,EAAKO,MAAM+G,WAAxEpF,CACG,uBAAQwL,KAAK,WAAW5K,YAAauE,EAAMvE,YACnCgL,WAAYzG,EAAMyG,WAAazG,EAAMyG,WAAa,KAClDlD,SAAUvD,EAAMuD,SAAWvD,EAAMuD,SAAW5K,EAAKO,MAAMqK,UAC1DvD,EAAMsG,QAAQpF,KAAI,SAACqF,GAAD,OAAY,sBAAQC,OAAR,CAC3BtM,MAAOqM,EAAOrM,OAAQqM,EAAOpI,YAGxC6B,EAAMmG,OAAS,0BAAMnL,UAAU,iBAAiBgF,EAAMmG,QAAiB,MAEhF,KAAKO,KACD,OAAO,kBAACrO,EAAD,eAAUyF,IAAKkC,EAAMlC,IAAKK,MAAO6B,EAAM7B,OAAW0H,EAAlD,CACUI,MAAOjG,EAAMiG,QACzBpL,EAAkBmF,EAAMlC,IAAKnF,EAAKoH,gBAAgBC,EAAOrH,EAAKO,MAAM+G,UAApEpF,CACG,kBAACgF,EAAD,CAAY0D,SAAUvD,EAAMuD,SAAWvD,EAAMuD,SAAW5K,EAAKO,MAAMqK,UAC9DvD,EAAMsG,QAAQpF,KAAI,SAACqF,GAAD,OAAY,uBAC3BrM,MAAOqM,EAAOrM,OAAQqM,EAAOpI,aAIjD,KAAKwI,IACD,OAAO,kBAACtO,EAAD,eAAUyF,IAAKkC,EAAMlC,IAAKK,MAAO6B,EAAM7B,OAAW0H,EAAlD,CACUI,MAAOjG,EAAMiG,QACzBpL,EAAkBmF,EAAMlC,IAAKnF,EAAKoH,gBAAgBC,EAAOrH,EAAKO,MAAM+G,UAApEpF,CACG,kBAACiF,EAAD,CAAewG,QAAStG,EAAMsG,QACf/C,SAAUvD,EAAMuD,SAAWvD,EAAMuD,SAAW5K,EAAKO,MAAMqK,aAGlF,KAAKqD,KACD,OAAO,kBAACvO,EAAD,eAAUyF,IAAKkC,EAAMlC,IAAKK,MAAO6B,EAAM7B,OAAW0H,EAAlD,CACUI,MAAOjG,EAAMiG,QACzBpL,EAAkBmF,EAAMlC,IAAK,CACtB+I,cAAe,UACfzG,aAAcJ,EAAMI,cAExB,CACInF,MAAO,CAAC,CAACC,SAAU8E,EAAM9E,SAAUC,QAASkF,OALnDxF,CAOG,uBACI0I,SAAUvD,EAAMuD,SAAWvD,EAAMuD,SAAW5K,EAAKO,MAAMqK,UAAWvD,EAAMmG,UAGxF,KAAKW,KACD,OAAO,kBAACzO,EAAD,eAAUyF,IAAKkC,EAAMlC,KACP+H,EADd,CAEU1H,MAAO6B,EAAM7B,MAAO8H,MAAOjG,EAAMiG,QAC7CpL,EAAkBmF,EAAMlC,IAAKnF,EAAKoH,gBAAgBC,EAAOrH,EAAKO,MAAM+G,UAApEpF,CACG,uBAAakM,IAAK/G,EAAM+G,IAAKC,IAAKhH,EAAMgH,IAC3BzD,SAAUvD,EAAMuD,SAAWvD,EAAMuD,SAAW5K,EAAKO,MAAMqK,YAExE,0BAAMvI,UAAU,iBAAiBgF,EAAMmG,SAE/C,KAAK9E,IACD,OAAO,kBAAChJ,EAAD,eAAUyF,IAAKkC,EAAMlC,IAAKK,MAAO6B,EAAM7B,OAAW0H,EAAlD,CACUI,MAAOjG,EAAMiG,QACzBpL,EAAkBmF,EAAMlC,IACrB,CACIsC,aAAcJ,EAAMI,aAAeoB,IAAOxB,EAAMI,cAAgB,KAChEnF,MAAO,CAAC,CAACC,SAAU8E,EAAM9E,SAAUC,QAASkF,OAHnDxF,CAKG,uBAAY0G,OAAQvB,EAAMuB,OAAQ0F,YAAY,MAG1D,KAAK3F,IACD,OAAO,kBAACjJ,EAAD,eAAUyF,IAAKkC,EAAMlC,IAAKK,MAAO6B,EAAM7B,OAAW0H,EAAlD,CACUI,MAAOjG,EAAMiG,QACzBpL,EAAkBmF,EAAMlC,IACrB,CAACsC,aAAcJ,EAAMI,aAAeoB,IAAOxB,EAAMI,cAAgB,MACjE,CACInF,MAAO,CAAC,CAACC,SAAU8E,EAAM9E,SAAUC,QAASkF,OAHnDxF,CAKG,uBAAY0G,OAAQvB,EAAMuB,OAAQ2F,UAAQ,EAAC9K,SAAU,SAAC1D,GAAD,OAAQsH,EAAM5D,SAC/D4D,EAAM5D,SAAS1D,GACf,kBAIhB,KAAKyO,KACD,OAAO,yBAAKrJ,IAAKkC,EAAMlC,KACnB,kBAACzF,EAAD,eAAUyF,IAAKkC,EAAMlC,IAAKK,MAAO6B,EAAM7B,OAAY0H,EAAnD,CAAmEI,MAAOjG,EAAMiG,QAC3EpL,EAAkBmF,EAAMlC,IAAKnF,EAAKoH,gBAAgBC,EAAOrH,EAAKO,MAAM+G,UAApEpF,CACG,kBAAC+E,EAAD,CAAUwH,SAAU,CAACC,QAASrH,EAAMqH,QAASC,QAAStH,EAAMsH,SAClD7L,YAAauE,EAAMvE,YACnB8H,SAAUvD,EAAMuD,SAAWvD,EAAMuD,SAAW5K,EAAKO,MAAMqK,SACvDnH,SAAUzD,EAAK4O,iBAKzC,KAAKC,KACD,OAAO,6BACH,kBAACnP,EAAD,eAAUyF,IAAKkC,EAAMlC,IAAKK,MAAO6B,EAAM7B,OAAY0H,EAAnD,CAAmEI,MAAOjG,EAAMiG,QAC3EpL,EAAkBmF,EAAMlC,IAAKnF,EAAKoH,gBAAgBC,EAAOrH,EAAKO,MAAM+G,UAApEpF,CACG,kBAAC+E,EAAD,CAAUwH,SAAU,CAACC,QAASrH,EAAMqH,QAASC,QAAStH,EAAMsH,SAClD7L,YAAauE,EAAMvE,YACnB8H,SAAUvD,EAAMuD,SAAWvD,EAAMuD,SAAW5K,EAAKO,MAAMqK,YAGpEvD,EAAMsG,SAAWtG,EAAMsG,QAAQpF,KAAI,SAAAuD,GAAI,OACpC,uBAAKjJ,MAAM,UACNG,QAAS,kBAAMhD,EAAKoL,UAAU/D,EAAMlC,IAAK2G,EAAKvK,SAASuK,EAAKtG,YAGjF,KAAKsJ,IACD,OAAO,6BACH,kBAACpP,EAAD,eAAUyF,IAAKkC,EAAMlC,IAAKK,MAAO6B,EAAM7B,OAAY0H,EAAnD,CAAmEI,MAAOjG,EAAMiG,QAC3EpL,EAAkBmF,EAAMlC,IAAK,CAC1BsC,aAAeJ,EAAMI,cAAgBJ,EAAMI,aAAamE,OAASvE,EAAMI,aAAe,GACtFnF,MAAO,CAAC,CACJC,SAAU8E,EAAM9E,SAChBC,QAASkF,OAJhBxF,CAOG,yBAAKU,MAAO,CAACmM,OAAQ,mBACjB,kBAAC,SAAD,CACI/F,YAAchJ,EAAKO,MAAMyI,YAAY3B,EAAMlC,KAAOnF,EAAKO,MAAMyI,YAAY3B,EAAMlC,KAAQkC,EAAMI,aAAekC,cAAYC,kBAAkBC,eAAaC,qBAAqBC,IAAY1C,EAAMI,gBAAkBkC,cAAYqF,cAC5NrE,oBAAqB,SAAC3B,GAAD,OAAiBhJ,EAAK2K,oBAAoBtD,EAAMlC,IAAK6D,QAIrF3B,EAAMsG,SAAWtG,EAAMsG,QAAQpF,KAAI,SAAAuD,GAAI,OACpC,uBAAKjJ,MAAM,UACNG,QAAS,kBAAMhD,EAAKwJ,mBAAmBnC,EAAMlC,IAAK2G,EAAKvK,SAASuK,EAAKtG,UAC7E6B,EAAM4H,QAAU,6BACb,sCACA,yBAAKrM,MAAO,CAACsM,UAAW,IAAKC,UAAW,UACnCC,wBAAyB,CAACC,OAAQ,UAAGrP,EAAKO,MAAMyI,YAAY3B,EAAMlC,KAAO8D,IAAYC,uBAAalJ,EAAKO,MAAMyI,YAAY3B,EAAMlC,KAAKgE,sBAAwB9B,EAAMI,eAAkB,MACzL,6BACK,OAIrB,KAAKsB,KACD,OAAO,6BACH,kBAACrJ,EAAD,eAAUyF,IAAKkC,EAAMlC,IAAKK,MAAO6B,EAAM7B,OAAY0H,EAAnD,CAAmEI,MAAOjG,EAAMiG,QAC3EpL,EAAkBmF,EAAMlC,IAAK,CAC1BsC,aAAeJ,EAAMI,cAAgBJ,EAAMI,aAAamE,OAASvE,EAAMI,aAAe,GACtFnF,MAAO,IAFVJ,CAIG,yBAAKU,MAAO,CAACmM,OAAQ,mBACjB,kBAAC,SAAD,CACI/F,YAAchJ,EAAKO,MAAMyI,YAAY3B,EAAMlC,KAAOnF,EAAKO,MAAMyI,YAAY3B,EAAMlC,KAAQkC,EAAMI,aAAekC,cAAYC,kBAAkBC,eAAaC,qBAAqBC,IAAY1C,EAAMI,gBAAkBkC,cAAYqF,cAC5NrE,oBAAqB,SAAC3B,GAAD,OAAiBhJ,EAAK2K,oBAAoBtD,EAAMlC,IAAK6D,QAIrF3B,EAAM4H,QAAU,6BACb,sCACA,yBAAKrM,MAAO,CAACsM,UAAW,IAAKC,UAAW,UACnCC,wBAAyB,CAACC,OAAQ,UAAGrP,EAAKO,MAAMyI,YAAY3B,EAAMlC,KAAO8D,IAAYC,uBAAalJ,EAAKO,MAAMyI,YAAY3B,EAAMlC,KAAKgE,sBAAwB9B,EAAMI,eAAkB,MACzL,6BACK,OAIrB,KAAKgB,KACD,OAAO,kBAAC/I,EAAD,eAAUyF,IAAKkC,EAAMlC,IAAKK,MAAO6B,EAAM7B,OAAW0H,EAAlD,CACUI,MAAOjG,EAAMiG,QACzBpL,EAAkBmF,EAAMlC,IAAK,CAC1BsC,aAAcJ,EAAMI,aAAeoB,IAAOxB,EAAMI,aAAcJ,EAAMuB,QAAU,KAC9EtG,MAAO,CAAC,CAACC,SAAU8E,EAAM9E,SAAUC,QAASkF,OAF/CxF,CAIG,uBAAY0G,OAAQvB,EAAMuB,WAGtC,KAAK0G,IACD,OAAO,kBAAC5P,EAAD,eAAUyF,IAAKkC,EAAMlC,IAAKK,MAAO6B,EAAM7B,OAAY0H,EAAnD,CACUI,MAAOjG,EAAMiG,QACzBpL,EAAkBmF,EAAMlC,IAAKnF,EAAKoH,gBAAgBC,EAAOrH,EAAKO,MAAM+G,UAApEpF,CACG,6BACI,kBAAC,IAAD,CAAgBU,MAAO,CAAC2M,MAAO,QACf9L,SAAU,SAACZ,GAAD,OAAW7C,EAAKkL,YAAYrI,EAAOwE,EAAMlC,QAClEnF,EAAKO,MAAMuH,eAAiB,yBAAKlF,MAAO,CACrC4M,OAAQ,OACRC,gBAAiBzP,EAAKO,MAAMwH,iBAC5B2H,OAAQ,OACRH,MAAO,UACHvP,EAAKO,MAAM+G,SAASD,EAAMlC,KAAO,yBAAKvC,MAAO,CACjD4M,OAAQ,OACRC,gBAAiBzP,EAAKO,MAAM+G,SAASD,EAAMlC,KAC3CuK,OAAQ,OACRH,MAAO,UACJ,QAIvB,KAAKtH,KACD,IAAM0H,EAAoB,CACtBC,KAAM,QACNnP,KAAM,CACFmP,KAAM,SAEVhK,OAAQxF,YAAQyP,MAChBvD,QAAS,CACLwD,cAAe,sBAEnBrM,SATsB,SASbsM,GACDA,EAAK7H,KAAK8H,OAEW,SAArBD,EAAK7H,KAAK8H,OACV,IAAQC,QAAR,UAAmBF,EAAK7H,KAAK0H,KAA7B,gCAC4B,UAArBG,EAAK7H,KAAK8H,QACjB,IAAQE,MAAR,UAAiBH,EAAK7H,KAAK0H,KAA3B,2BAIZ,OAAO,sBAAMjQ,KAAN,eAAWwF,IAAKkC,EAAMlC,KAAS+H,EAA/B,CAA+C1H,MAAO6B,EAAM7B,QAC9DtD,EAAkBmF,EAAMlC,IAAKnF,EAAKoH,gBAAgBC,EAAOrH,EAAKO,MAAM+G,UAAW,CAAC4G,cAAe7G,EAAMlC,KAArGjD,CACG,sBAAYyN,EACR,2BACI,uBAAMhN,KAAK,WADf,gBAGC0E,EAAMI,aAGH,uBAAQhF,KAAM,GAAI+D,IAAK2J,YAAY9I,EAAMI,gBACvC,OAGbJ,EAAM+I,YAAc,0BAAM/N,UAAU,iBACjC,uBAAGW,QAAS,kBAAMhD,EAAKgK,aAAa3C,EAAMlC,IAAKkL,KAAKC,YAApD,gBAGM,KACV,uBACIC,OAAQ,KACRhN,SAAU,kBAAMvD,EAAKgK,aAAa3C,EAAMlC,KAAK,IAC7C9B,UAAWrD,EAAKO,MAAM0J,YAAY5C,EAAMlC,KACxCoK,MAAO,IACPpK,IAAKnF,EAAKO,MAAM0J,YAAY5C,EAAMlC,MAClC,kBAAC,IAAD,CAAaqL,cAAe,SAACjP,GAAD,OAAWvB,EAAKkK,kBAAkB7C,EAAMlC,IAAK5D,QAGrF,KAAK8G,KACD,IAAMoI,EAAmB,CACrBb,KAAM,QACNnP,KAAM,CACFmP,KAAM,SAEVhK,OAAQxF,YAAQyP,MAChBvD,QAAS,CACLwD,cAAe,sBAEnBrM,SATqB,SASZsM,GACDA,EAAK7H,KAAK8H,OAGW,SAArBD,EAAK7H,KAAK8H,OACV,IAAQC,QAAR,UAAmBF,EAAK7H,KAAK0H,KAA7B,gCAC4B,UAArBG,EAAK7H,KAAK8H,QACjB,IAAQE,MAAR,UAAiBH,EAAK7H,KAAK0H,KAA3B,2BAIZ,OAAO,sBAAMjQ,KAAN,eAAWwF,IAAKkC,EAAMlC,KAAS+H,EAA/B,CAA+C1H,MAAO6B,EAAM7B,QAC9DtD,EAAkBmF,EAAMlC,IAAK,CAAC+I,cAAe7G,EAAMlC,KAAnDjD,CACG,sBAAYuO,EACR,2BACI,uBAAM9N,KAAK,WADf,gBAGC0E,EAAMI,cAAgBJ,EAAMI,aAAamE,OACtCvE,EAAMI,aAAac,KAAI,SAAAmI,GAAG,OAAI,yBAAKlK,IAAKkK,EACL9N,MAAO,CAAC+D,SAAU,aAAc,QAIvF,KAAK2E,IACD,OAAO,kBAAC5L,EAAD,eAAUyF,IAAKkC,EAAMlC,KAAS+H,EAA9B,CAA8C1H,MAAO6B,EAAM7B,MACjD8H,MAAOjG,EAAMiG,QACzBpL,EAAkBmF,EAAMlC,IAAKnF,EAAKoH,gBAAgBC,EAAOrH,EAAKO,MAAM+G,UAApEpF,CACG,uBAAQY,YAAauE,EAAMvE,YACnB8H,SAAUvD,EAAMuD,SAAWvD,EAAMuD,SAAW5K,EAAKO,MAAMqK,SACvD8C,KAAMrG,EAAMqG,KAAOrG,EAAMqG,KAAO,UAChCjK,SAAU,SAAClC,GAAD,OAAWvB,EAAK2Q,gBAAgB,UAAWpP,KACxDvB,EAAKO,MAAMsK,eAAetC,KAAI,SAACqF,GAAD,OAAY,sBAAQC,OAAR,CACvCtM,MAAOqM,EAAOpF,IAAKoF,EAAOgC,YAI9C,KAAKgB,KACD,OAAO,kBAAClR,EAAD,eAAUyF,IAAKkC,EAAMlC,KAAS+H,EAA9B,CAA8C1H,MAAO6B,EAAM7B,MACjD8H,MAAOjG,EAAMiG,QACzBpL,EAAkBmF,EAAMlC,IAAKnF,EAAKoH,gBAAgBC,EAAOrH,EAAKO,MAAM+G,UAApEpF,CACG,uBAAQY,YAAauE,EAAMvE,YACnB8H,SAAUvD,EAAMuD,SAAWvD,EAAMuD,SAAW5K,EAAKO,MAAMqK,SACvD8C,KAAMrG,EAAMqG,KAAOrG,EAAMqG,KAAO,UAChCjK,SAAU,SAAClC,GAAD,OAAWvB,EAAK2Q,gBAAgB,QAASpP,KACtDvB,EAAKO,MAAMuK,aAAavC,KAAI,SAACqF,GAAD,OAAY,sBAAQC,OAAR,CACrCtM,MAAOqM,EAAOpF,IAAKoF,EAAOgC,YAK9C,KAAKiB,IACD,OAAO,sBAAMlR,KAAN,eACHwF,IAAKkC,EAAMlC,KACP+H,EAFD,CAGH1H,MAAO6B,EAAM7B,MACb8H,MAAOjG,EAAMiG,QAEZpL,EAAkBmF,EAAMlC,IAAK,CAC1BsC,aAAczH,EAAKO,MAAM+G,SAASD,EAAMlC,KACxC7C,MAAO,CAAC,CACJK,KAAM,QAASH,QAAS,kCACzB,CACCD,UAAU,EAAMC,QAAS,+BALhCN,CAQG,uBAAOY,YAAauE,EAAMvE,YACnB8H,SAAUvD,EAAMuD,SAAWvD,EAAMuD,SAAW5K,EAAKO,MAAMqK,SACvDnH,SAAUzD,EAAK4O,gBAIlC,KAAKkC,IACD,OAAO,kBAACpR,EAAD,eAAUyF,IAAKkC,EAAMlC,KAAS+H,EAA9B,CAA8C1H,MAAO6B,EAAM7B,MACjD8H,MAAOjG,EAAMiG,QACzBpL,EAAkBmF,EAAMlC,IAAKnF,EAAKoH,gBAAgBC,EAAOrH,EAAKO,MAAM+G,UAApEpF,CACG,uBAAQY,YAAauE,EAAMvE,YACnB8H,SAAUvD,EAAMuD,SAAWvD,EAAMuD,SAAW5K,EAAKO,MAAMqK,SACvD8C,KAAMrG,EAAMqG,KAAOrG,EAAMqG,KAAO,WACnC1N,EAAKO,MAAMwK,YAAYxC,KAAI,SAACqF,GAAD,OAAY,sBAAQC,OAAR,CACpCtM,MAAOqM,EAAOpF,IAAKoF,EAAOgC,YAI9C,KAAKmB,IACD,OAAO,uBAASnO,MAAO,CAAC4M,OAAQ,KAGpC,KAAKwB,IACD,OAAO,kBAACtR,EAAD,eAAUyF,IAAKkC,EAAMlC,KAAS+H,EAA9B,CAA8C1H,MAAO6B,EAAM7B,MACjD8H,MAAOjG,EAAMiG,QAEzBjG,EAAMmG,OAAS,0BAAMnL,UAAU,iBAAiBgF,EAAMmG,QAAiB,MAGhF,QACI,OAAO,SAEd,KACL,kBAAC9N,EAAawN,EAEV,uBAAQjK,QAASjD,EAAKO,MAAM0C,QAASN,KAAK,UAAUQ,SAAS,SAASP,MAAO,CAAC4M,OAAQ,IAAtF,UAGCxP,EAAKH,MAAM8F,QACR,uBAAQ/C,MAAO,CAAC4M,OAAQ,GAAIxM,QAAS,kBAAMhD,EAAKH,MAAM8F,QAAQsL,WAA9D,UAEY,Y,GA9rBJtN,IAAMC,WAqsBvBoB,O,iKChwBMkM,E,YACjB,WAAYrR,GAAQ,IAAD,8BACf,4CAAMA,KAIVsR,OAAS,SAAAC,GACL,EAAKA,OAASA,GANC,EASnBC,QAAU,WACN,IAAMC,EAAW,EAAKF,OAAOG,gBAC1B,EAAK1R,MAAM2Q,eACV,EAAK3Q,MAAM2Q,cAAcc,IAV7B,EAAK/Q,MAAQ,GAFE,E,sEAqBf,OAAO,yBAAKqC,MAAO,CAAC2M,MAAM,MACtB,kBAAC,IAAD,CAAQiC,OAAO,EACP9B,OAAQ,IACRH,MAAO,IACPkC,IAAKpQ,KAAK8P,OACVO,iBAVa,CACrBnC,MAAO,KACPG,OAAQ,IACRiC,WAAY,QAQJC,iBAAiB,eACzB,uBAAQ5O,QAAS3B,KAAKgQ,SAAtB,sB,GA7B6B1N,IAAMC,Y,oBCJ/CiO,EAAOC,QAAU,IAA0B","file":"static/js/16.f6b69680.chunk.js","sourcesContent":["import {Form, Icon, Input, Button, Modal, Divider} from 'antd';\nimport React from 'react';\nimport 'antd/dist/antd.css';\nimport {EMAIL, PASSWORD, PHONE, OTP} from \"../../../constants/formLabels\";\nimport {Redirect} from 'react-router';\nimport {Link, Route, Switch} from \"react-router-dom\";\nimport {displayMessage, makeURL, postOuterAPI} from \"../../../utils/common\";\nimport {RESET_PASSWORD_MAIL} from \"../../../constants/api\";\n\nconst FormItem = Form.Item;\n\n\nclass LoginForm extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            isLoading: false,\n            username: null,\n            userMail: '',\n            redirect: null,\n            resetModalVisible: false,\n        };\n        this.handleSubmit = this.handleSubmit.bind(this);\n        this.showResetModal = this.showResetModal.bind(this);\n        this.changeUserMail = this.changeUserMail.bind(this);\n    }\n\n    showResetModal() {\n        this.setState({\n            resetModalVisible: true\n        });\n    }\n\n    handleOk = (e) => {\n        var that = this;\n        console.log(e);\n        var successFn = function (data) {\n            displayMessage('success', \"Link to update your password have been sent to your mail.\")\n            that.setState({\n                resetModalVisible: false,\n            });\n        }\n        var errorFn = function () {\n\n        }\n        postOuterAPI(makeURL(RESET_PASSWORD_MAIL), {mobile: this.state.userMail}, successFn, errorFn);\n    }\n\n    handleCancel = (e) => {\n        console.log(e);\n        this.setState({\n            resetModalVisible: false,\n        });\n    }\n\n    changeUserMail(e) {\n        this.setState({\n            userMail: e.target.value\n        })\n    }\n\n    handleSubmit(e) {\n        e.preventDefault();\n        let that = this;\n        this.props.form.validateFields((err, values) => {\n            if (!err) {\n                let data = {\n                    [EMAIL]: values.email,\n                    [PASSWORD]: values.password\n                };\n                that.props.login(data)\n            }\n        });\n    }\n\n\n    render() {\n        const {getFieldDecorator} = this.props.form;\n        if (this.state.redirect)\n            return <Redirect to={this.state.redirect}/>\n        return (\n            <>\n                <Form onSubmit={this.handleSubmit} className=\"login-form\">\n                    <FormItem>\n                        {getFieldDecorator('email', {\n                            rules: [{required: true, message: 'Please input your username!'}],\n                        })(\n                            <Input size=\"large\" prefix={<Icon type=\"phone\" style={{color: 'rgba(0,0,0,.25)'}}/>}\n                                   placeholder=\"Mobile Number\"/>\n                        )}\n                    </FormItem>\n                    <FormItem>\n                        {getFieldDecorator('password', {\n                            rules: [{required: true, message: 'Please input your Password!'}],\n                        })(\n                            <Input size=\"large\" prefix={<Icon type=\"lock\" style={{color: 'rgba(0,0,0,.25)'}}/>}\n                                   type=\"password\"\n                                   placeholder=\"Password\"/>\n                        )}\n                    </FormItem>\n                    <FormItem>\n                        <a style={{float: 'right'}} type=\"primary\" onClick={this.showResetModal}>\n                            Forgot Password ?\n                        </a>\n                        <Button size=\"large\" loading={this.state.changePassLoading} type=\"primary\" htmlType=\"submit\"\n                                className=\"login-form-button\">\n                            Log in\n                        </Button>\n                    </FormItem>\n                </Form>\n                <Divider>OR</Divider>\n                <h4>\n                    <Link to={\"/loginwithphone\"}>\n                        <Button size=\"large\" type=\"primary\"\n                                className=\"login-form-button\">Log in with phone</Button>\n\n                    </Link>\n                </h4>\n                <Divider/>\n                <Modal\n                    title=\"Email to Reset Password\"\n                    visible={this.state.resetModalVisible}\n                    onOk={this.handleOk}\n                    onCancel={this.handleCancel}\n                    okText=\"Reset Password\"\n                >\n                    <Input\n                        placeholder=\"Enter your Mobile Number\"\n                        prefix={<Icon type=\"mobile\" style={{color: 'rgba(0,0,0,.25)'}}/>}\n                        onChange={this.changeUserMail}\n                    />\n                </Modal>\n                {this.props.redirect == true && <Redirect push to=\"/\"/>}\n            </>\n        );\n    }\n}\n\nexport default LoginForm;\n\nfunction hasErrors(fieldsError) {\n    return Object.keys(fieldsError).some(field => fieldsError[field]);\n}\n","import React from 'react';\nimport {Button, Col, Divider, Form, Icon, Input, Row} from 'antd';\nimport {Link} from \"react-router-dom\";\nimport {displayMessage, makeURL} from \"../../../utils/common\";\nimport {sendLoginOTP} from \"../../../utils/auth\";\nimport {SUCCESS_MSG_TYPE, WARNING_MSG_TYPE} from \"../../../constants/dataKeys\";\nimport {LOGIN_RESEND_OTP, LOGIN_SEND_OTP} from \"../../../constants/api\";\n\nconst FormItem = Form.Item;\n\nclass LoginWithPhone extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {}\n        this.handleSubmit = this.handleSubmit.bind(this);\n\n    }\n\n\n    handleSubmit = (e) => {\n        let that = this;\n        e.preventDefault();\n        this.props.form.validateFields((err, values) => {\n            if (!err) {\n                if (!err) {\n\n                    if (that.props.login)\n                        that.props.login(values,false);\n\n                }\n            }\n        });\n    }\n\n    setPhone = (type, value) => {\n        this.setState({\n            [type]: value\n        })\n    }\n    sendOTP = () => {\n        let that = this;\n        if (this.state.phone) {\n            let successFn = function (data) {\n                that.setState({\n                    otpSent: true\n                });\n                displayMessage(SUCCESS_MSG_TYPE, \"OTP Sent successfully!\")\n            }\n            let errorFn = function () {\n\n            }\n            if (this.state.otpSent) {\n                sendLoginOTP(makeURL(LOGIN_RESEND_OTP), this.state.phone, successFn, errorFn);\n            } else {\n                sendLoginOTP(makeURL(LOGIN_SEND_OTP), this.state.phone, successFn, errorFn);\n            }\n        } else {\n            displayMessage(WARNING_MSG_TYPE, \"Phone No can not be empty!!\");\n        }\n    }\n\n    render() {\n        const {getFieldDecorator} = this.props.form;\n        return (\n            <Form onSubmit={this.handleSubmit} className=\"login-form\">\n\n                <Input.Group size=\"large\">\n                    <Row>\n                        <Col span={this.state.otpSent ? 24 : 18}>\n                            <FormItem>\n                                {getFieldDecorator('phone_no', {\n                                    rules: [{required: true, message: 'Please input your phone!'}],\n                                })(\n                                    <Input prefix={<Icon type=\"phone\" style={{color: 'rgba(0,0,0,.25)'}}/>}\n                                           type=\"text\"\n                                           placeholder=\"Phone\"\n                                           onChange={(e) => this.setPhone('phone', e.target.value)}/>\n                                )}\n                            </FormItem>\n                        </Col>\n                        <Col span={this.state.otpSent ? 0 : 6}>\n                            <Button type=\"primary\" size={\"large\"} block onClick={this.sendOTP}>Send OTP</Button>\n                        </Col>\n                    </Row>\n                </Input.Group>\n\n                <FormItem>\n                    {getFieldDecorator('otp', {\n                        rules: [{required: true, message: 'Please input otp!'}],\n                    })(\n                        <Input size=\"large\" prefix={<Icon type=\"key\" style={{color: 'rgba(0,0,0,.25)'}}/>}\n                               type=\"text\"\n                               placeholder=\"otp\"/>\n                    )}\n                </FormItem>\n                <FormItem>\n                    {this.state.otpSent ? <a style={{float: 'right'}} type=\"primary\" onClick={this.sendOTP}>\n                        Resend Otp ?\n                    </a> : null}\n                    <Button size=\"large\" type=\"primary\" htmlType=\"submit\"\n                            className=\"login-form-button\">\n                        Log in\n                    </Button>\n                </FormItem>\n\n                <Divider>OR</Divider>\n                <h4>\n                    <Link to={\"/\"}> <Button size=\"large\" type=\"primary\" htmlType=\"submit\"\n                                            className=\"login-form-button\">Log in with password </Button>\n\n                    </Link>\n                </h4>\n                <Divider/>\n\n\n            </Form>\n        );\n    }\n\n}\n\nexport default LoginWithPhone;\n","import React from \"react\";\nimport LoginForm from \"./forms/LoginForm\";\nimport LoginWithPhone from \"./forms/LogintWithPhone\";\nimport {Card, Col, Divider, Form, Layout, Row} from \"antd\";\nimport {Route, Switch} from \"react-router-dom\";\nimport '../../assets/auth.css';\nimport AppLogo from '../../assets/img/kidneycarelogo.png';\nimport DynamicFieldsForm from \"../common/DynamicFieldsForm\";\nimport {PASSWORD_FIELD, SUCCESS_MSG_TYPE} from \"../../constants/dataKeys\";\nimport {RESET_PASSWORD} from \"../../constants/api\";\nimport {displayMessage} from \"../../utils/common\";\n\nclass Auth extends React.Component {\n    constructor(props) {\n        super(props);\n    }\n\n    render() {\n        let that = this;\n        const LoginFormLayout = Form.create()(LoginForm);\n        const PasswordResetForm = Form.create()(DynamicFieldsForm);\n        const LoginWithPhoneLayout = Form.create()(LoginWithPhone);\n\n        let tokenDefaultValues = [{\n            key: 'code',\n            value: (this.props.match && this.props.match.params.token ? this.props.match.params.token : null)\n        }];\n        let resetPasswordFields = [{\n            label: 'Password',\n            key: 'password',\n            type: PASSWORD_FIELD,\n            required: true\n        }, {\n            label: 'Retype Password',\n            key: 're-password',\n            type: PASSWORD_FIELD,\n            required: true\n        }];\n        const formProp = {\n            successFn: function (data) {\n                displayMessage(SUCCESS_MSG_TYPE, \"Password Changed Successfully\");\n                that.props.history.push(\"/\");\n            },\n            errorFn: function () {\n            },\n            action: RESET_PASSWORD,\n            method: \"post\",\n            authorisation: false\n        }\n        return <Layout className=\"loginLayout\">\n\n            <Switch>\n                <Route path=\"/password-reset/\">\n                    <Row>\n                        {/*<Col xs={{span: 20, offset: 2}} sm={{span: 16, offset: 4}} md={{span: 12, offset: 6}}*/}\n                        {/*lg={{span: 8, offset: 8}} xl={{span: 8, offset: 8}} style={{padding: '35px'}}>*/}\n                        {/*</Col>*/}\n                        <Col xs={{span: 20, offset: 2}} sm={{span: 16, offset: 4}} md={{span: 12, offset: 6}}\n                             lg={{span: 8, offset: 8}} xl={{span: 8, offset: 8}}>\n                            <div className=\"loginFormWrapper\" style={{textAlign: 'center'}}>\n                                <img src={AppLogo} alt=\"\" style={{maxWidth: '70%', minWidth: '50%', padding: '20px'}}/>\n                                <Card>\n                                    <PasswordResetForm {...this.props}\n                                                       formProp={formProp}\n                                                       fields={resetPasswordFields}\n                                                       defaultValues={tokenDefaultValues}/>\n                                </Card>\n                                <Divider/>\n                                <h4>\n                                    {/*<Link to=\"/login\">Login </Link>\n                                    <Divider type=\"vertical\"/>\n                                    <Link to=\"/privacypolicy\">Privacy Policy</Link>\n                                    <Divider style={{margin:'0px'}}>Patient</Divider>*/}\n                                </h4>\n                            </div>\n                        </Col>\n                    </Row>\n                </Route>\n                <Route>\n                    <Row>\n                        {/*<Col xs={{span: 20, offset: 2}} sm={{span: 16, offset: 4}} md={{span: 12, offset: 6}}*/}\n                        {/*lg={{span: 8, offset: 8}} xl={{span: 8, offset: 8}} style={{padding: '35px'}}>*/}\n                        {/*</Col>*/}\n                        <Col xs={{span: 20, offset: 2}} sm={{span: 16, offset: 4}} md={{span: 12, offset: 6}}\n                             lg={{span: 8, offset: 8}} xl={{span: 8, offset: 8}} style={{padding: '35px'}}>\n                            <div className=\"loginFormWrapper\" style={{textAlign: 'center'}}>\n                                <img src={AppLogo} alt=\"\" style={{maxWidth: '70%', minWidth: '50%', padding: '20px'}}/>\n                                <Switch>\n\n                                    {/*<Divider/>*/}\n\n                                    <Route path=\"/loginwithphone\">\n                                        <LoginWithPhoneLayout {...this.props} login={this.props.login}/>\n                                    </Route>\n\n\n                                    <Route>\n                                        <LoginFormLayout {...this.props} login={this.props.login}/>\n                                    </Route>\n\n                                    <Route>\n\n                                    </Route>\n\n                                </Switch>\n\n\n                                <h4 style={{textAlign: 'center'}}>\n                                    Powered By: <a href=\"https://plutonic.co.in/\" target=\"_blank\">Plutonic Services</a>\n                                </h4>\n                            </div>\n                        </Col>\n                    </Row>\n                </Route>\n            </Switch>\n        </Layout>\n    }\n}\n\n\nexport default Auth;\n","import React from \"react\";\nimport {\n    Button,\n    Checkbox,\n    DatePicker,\n    Divider,\n    Form,\n    Icon,\n    Input,\n    InputNumber,\n    message,\n    Modal,\n    Radio,\n    Select,\n    Tag,\n    TimePicker,\n    Upload,\n    Avatar,\n} from \"antd\";\nimport {\n    CHECKBOX_FIELD,\n    CITY_FIELD,\n    COLOR_PICKER,\n    COUNTRY_FIELD,\n    DATE_PICKER,\n    DATE_TIME_PICKER,\n    DIVIDER_FIELD,\n    EMAIL_FIELD,\n    INPUT_FIELD, LABEL_FIELD,\n    MAIL_TEMPLATE_FIELD,\n    MULTI_IMAGE_UPLOAD_FIELD,\n    MULTI_SELECT_FIELD,\n    NUMBER_FIELD,\n    PASSWORD_FIELD,\n    QUILL_TEXT_FIELD,\n    RADIO_FIELD,\n    SELECT_FIELD,\n    SINGLE_CHECKBOX_FIELD,\n    SINGLE_IMAGE_UPLOAD_FIELD,\n    SMS_FIELD,\n    STATE_FIELD,\n    SUCCESS_MSG_TYPE,\n    TEXT_FIELD,\n    TIME_PICKER\n} from \"../../constants/dataKeys\";\nimport {REQUIRED_FIELD_MESSAGE} from \"../../constants/messages\";\nimport {displayMessage, getAPI, makeFileURL, makeURL, postAPI, putAPI} from \"../../utils/common\";\nimport moment from \"moment\";\nimport SwatchesPicker from 'react-color/lib/Swatches';\nimport {EXTRA_DATA, FILE_UPLOAD_API, FILE_UPLOAD_BASE64} from \"../../constants/api\";\nimport WebCamField from \"./WebCamField\";\nimport {Editor} from 'react-draft-wysiwyg';\nimport '../../../../node_modules/react-draft-wysiwyg/dist/react-draft-wysiwyg.css';\nimport {ContentState, convertToRaw, EditorState} from 'draft-js';\nimport draftToHtml from 'draftjs-to-html';\nimport htmlToDraft from 'html-to-draftjs';\n\nconst {TextArea} = Input;\nconst FormItem = Form.Item;\nconst RadioGroup = Radio.Group;\nconst CheckboxGroup = Checkbox.Group;\n\n\nclass DynamicFieldsForm extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            fields: this.props.fields, //Fields data to create the form\n            formData: {},\n            formProp: {authorisation: true, ...this.props.formProp},    //Form data to send on form submission\n            disabled: false,\n            loading: false,\n            countryOptions: [],\n            stateOptions: [],\n            cityOptions: [],\n            smsFields: {},\n            urlInitialValues: {},\n            webCamState: {},\n            editorState: {}\n        }\n        this.resetFormData = this.resetFormData.bind(this);\n        this.submitForm = this.submitForm.bind(this);\n        this.colorChange = this.colorChange.bind(this);\n        this.loadCountryData = this.loadCountryData.bind(this);\n        this.addSMSTag = this.addSMSTag.bind(this);\n        // this.onFormFieldDataChange = this.onFormFieldDataChange.bind(this)\n    }\n\n    componentWillReceiveProps(nextProps) {\n    }\n\n    fieldDecorators = (field, formData) => {\n        let urlInitialValues = this.state.urlInitialValues;\n        if (field.type == MULTI_SELECT_FIELD) {\n            return {\n                initialValue: formData[field.key] ? formData[field.key] : (urlInitialValues[field.key] ? urlInitialValues[field.key] : formData[field.key]),\n                rules: [{\n                    required: field.required,\n                    message: REQUIRED_FIELD_MESSAGE,\n                    type: 'array'\n                }]\n            }\n        }\n\n        return {\n            initialValue: formData[field.key] ? formData[field.key] : (urlInitialValues[field.key] ? urlInitialValues[field.key] : formData[field.key]),\n            rules: [{\n                required: field.required,\n                message: REQUIRED_FIELD_MESSAGE\n            }]\n        }\n    }\n\n    componentDidMount() {\n        let that = this;\n        this.resetFormData();\n        this.props.fields.forEach(function (field) {\n            if (field.type == COUNTRY_FIELD) {\n                that.loadCountryData();\n            }\n        });\n        if (this.props.history && this.props.history.location.search) {\n            let pairValueArray = this.props.history.location.search.substr(1).split('&');\n            if (pairValueArray.length) {\n                let urlInitialValue = {};\n                pairValueArray.forEach(function (item) {\n                    let keyValue = item.split('=');\n                    if (keyValue && keyValue.length == 2) {\n                        if (!isNaN(keyValue[1]) && keyValue[1].toString().indexOf('.') != -1) {\n                            urlInitialValue[keyValue[0]] = parseFloat(keyValue[1]);\n                        } else if (!isNaN(keyValue[1])) {\n                            urlInitialValue[keyValue[0]] = parseInt(keyValue[1]);\n                        } else {\n                            urlInitialValue[keyValue[0]] = keyValue[1];\n                        }\n                    }\n                });\n                this.setState({\n                    urlInitialValues: urlInitialValue\n                })\n            }\n        }\n    }\n\n    resetFormData() {\n        let formData = {};\n        this.state.fields.forEach(function (field) {\n            formData[field.key] = field.initialValue\n        });\n        this.setState({\n            formData: formData\n        })\n    }\n\n    // onFormFieldDataChange() {\n    //     if (this.props.formProp.onFieldsDataChange) {\n    //         let values = this.props.form.getFieldsValue();\n    //         console.log(values);\n    //         this.props.formProp.onFieldsDataChange(values);\n    //     }\n    // }\n\n    handleSubmit = (e) => {\n        let that = this;\n        e.preventDefault();\n        this.props.form.validateFieldsAndScroll((err, values) => {\n            if (!err) {\n                if (this.props.defaultValues) {\n                    this.props.defaultValues.forEach(function (object) {\n                        // values[object.key] = object.value;\n                        values = {[object.key]: object.value, ...values}\n                    })\n                }\n                if (this.state.colorPickerKey) {\n                    values[this.state.colorPickerKey] = this.state.colorPickerColor;\n                }\n                that.props.fields.forEach(function (formFields) {\n                    if (formFields.type == SINGLE_IMAGE_UPLOAD_FIELD) {\n                        let key = formFields.key;\n                        if (values[key] && values[key].file && values[key].file.response)\n                            values[key] = values[key].file.response.image_path;\n                        else\n                            values[key] = formFields.initialValue;\n                    } else if (formFields.type == MULTI_IMAGE_UPLOAD_FIELD) {\n                        let key = formFields.key;\n                        if (values[key] && values[key].file && values[key].file.response)\n                            values[key] = values[key].fileList.map(file => file.response.id);\n                        else\n                            values[key] = formFields.initialValue;\n                    } else if (formFields.type == TIME_PICKER || formFields.type == DATE_PICKER || formFields.type == DATE_TIME_PICKER) {\n                        let key = formFields.key;\n                        if (formFields.format) {\n                            values[key] = moment(values[key]).isValid() ? moment(values[key]).format(formFields.format) : null;\n                        }\n                    } else if (formFields.type == QUILL_TEXT_FIELD) {\n                        let key = formFields.key;\n                        values[key] = that.state.editorState[key] ? draftToHtml(convertToRaw(that.state.editorState[key].getCurrentContent())) : formFields.initialValue;\n                    }\n                });\n                if (that.state.formProp.beforeSend) {\n                    values = that.state.formProp.beforeSend(values);\n                }\n                if (that.state.formProp.confirm) {\n                    Modal.confirm({\n                        title: that.state.formProp.confirmText || \"Are you sure to submit?\",\n                        onOk: function () {\n                            that.submitForm(values);\n                        },\n                        onCancel: function () {\n\n                        }\n                    })\n                } else {\n                    that.submitForm(values);\n                }\n\n            }\n        });\n    }\n\n    submitForm(data) {\n        let that = this;\n        this.setState({\n            disabled: true,\n            loading: true,\n        });\n        let successFn = function (data) {\n            that.state.formProp.successFn(data);\n            that.setState({\n                disabled: false,\n                loading: false,\n            });\n            if (that.props.changeRedirect) {\n                that.props.changeRedirect();\n            }\n        };\n        let errorFn = function () {\n            that.state.formProp.errorFn();\n            that.setState({\n                disabled: false,\n                loading: false,\n            });\n        };\n        let headers = {};\n        if (!that.state.formProp.authorisation) {\n            headers.Authorization = undefined;\n        }\n        if (this.props.formProp.method == \"post\") {\n            postAPI(this.props.formProp.action, data, successFn, errorFn, {...headers});\n        } else if (this.props.formProp.method == \"put\") {\n            putAPI(this.props.formProp.action, data, successFn, errorFn, {...headers});\n        }\n    }\n\n    colorChange(color, key) {\n        let that = this;\n        this.setState({\n            colorPickerKey: key,\n            colorPickerColor: color.hex,\n        }, function () {\n            that.props.form.setFieldsValue({[key]: color.hex})\n        });\n    }\n\n    setAddressField(type, value) {\n        if (type == 'country') {\n            this.setState(function (prevState) {\n                let states = []\n                prevState.countryOptions.forEach(function (country) {\n                    if (country.id == value) {\n                        states = country.states\n                    }\n                })\n                return {stateOptions: states}\n            })\n        } else {\n            this.setState(function (prevState) {\n                let cities = [];\n                prevState.stateOptions.forEach(function (state) {\n                    if (state.id == value) {\n                        cities = state.cities\n                    }\n                })\n                return {cityOptions: cities}\n            })\n        }\n    }\n\n    loadCountryData() {\n        var that = this;\n        let successFn = function (data) {\n            that.setState({\n                countryOptions: data.country,\n            })\n        };\n        let errorFn = function () {\n        };\n        getAPI(EXTRA_DATA, successFn, errorFn);\n    }\n\n    addSMSTag(key, value) {\n        let that = this;\n        let prevValue = that.props.form.getFieldValue(key) || '';\n        that.props.form.setFieldsValue({\n            [key]: prevValue + value\n        });\n    }\n\n    addMailTemplateTag = (key, value) => {\n        let that = this;\n        this.setState(function (prevState) {\n            let currentHtml = prevState.editorState[key] ? draftToHtml(convertToRaw(prevState.editorState[key].getCurrentContent())) : '';\n            currentHtml += value;\n            return {\n                editorState: {\n                    ...prevState.editorState,\n                    [key]: EditorState.createWithContent(ContentState.createFromBlockArray(htmlToDraft(currentHtml)))\n                }\n            }\n        })\n    }\n    toggleWebCam = (type, value) => {\n        this.setState(function (prevState) {\n            return {\n                webCamState: {...prevState.webCamState, [type]: value}\n            }\n        })\n    }\n    getImageandUpload = (fieldKey, image) => {\n        let that = this;\n        let reqData = new FormData();\n\n        reqData.append('image', image);\n        reqData.append('name', 'file');\n\n        let successFn = function (data) {\n            that.props.form.setFieldsValue({[fieldKey]: {file: {response: data}}});\n            displayMessage(SUCCESS_MSG_TYPE, \"Image Captured and processed.\");\n            that.setState(function (prevState) {\n                return {\n                    webCamState: {...prevState.webCamState, [fieldKey]: false}\n                }\n            })\n        }\n        let errorFn = function () {\n\n        }\n        postAPI(FILE_UPLOAD_BASE64, reqData, successFn, errorFn, {\n            'content-type': 'multipart/form-data'\n        });\n\n    }\n    onEditorStateChange = (key, editorState) => {\n        this.setState(function (prevState) {\n            return {\n                editorState: {...prevState.editorState, [key]: editorState}\n\n            }\n        });\n    };\n\n    render() {\n        const that = this;\n        const formItemLayout = (this.props.formLayout ? this.props.formLayout : {\n            labelCol: {span: 8},\n            wrapperCol: {span: 14},\n        });\n        const {getFieldDecorator} = this.props.form;\n        return <div>\n            <Form onSubmit={this.handleSubmit}>\n                {this.props.title ? <h2>{this.props.title}</h2> : null}\n                {this.state.fields ? this.state.fields.map(function (field) {\n                    switch (field.type) {\n                        case PASSWORD_FIELD:\n                            return <Form.Item key={field.key} label={field.label}  {...formItemLayout}\n                                              extra={field.extra}>\n                                {getFieldDecorator(field.key, that.fieldDecorators(field, that.state.formData))(\n                                    <Input prefix={<Icon type=\"lock\" style={{color: 'rgba(0,0,0,.25)'}}/>}\n                                           type=\"password\"\n                                           placeholder={field.placeholder}\n                                           onChange={(e) => function () {\n                                               if (field.onChange)\n                                                   field.onChange(e)\n                                           }}\n                                           disabled={field.disabled ? field.disabled : that.state.disabled}/>\n                                )}\n                            </Form.Item>;\n                        case INPUT_FIELD:\n                            return <FormItem key={field.key} label={field.label}  {...formItemLayout}\n                                             extra={field.extra}>\n                                {getFieldDecorator(field.key, that.fieldDecorators(field, that.state.formData))(\n                                    <Input placeholder={field.placeholder}\n                                           onChange={(e) => function () {\n                                               if (field.onChange)\n                                                   field.onChange(e)\n                                           }}\n                                           disabled={field.disabled ? field.disabled : that.state.disabled}/>\n                                )}\n                                {field.follow ? <span className=\"ant-form-text\">{field.follow}</span> : null}\n                            </FormItem>;\n                        case SELECT_FIELD:\n                            return <FormItem key={field.key} {...formItemLayout} label={field.label}\n                                             extra={field.extra}>\n                                {getFieldDecorator(field.key, that.fieldDecorators(field, that.state.formData))(\n                                    <Select placeholder={field.placeholder}\n                                            disabled={field.disabled ? field.disabled : that.state.disabled}\n                                            mode={field.mode ? field.mode : \"default\"}>\n                                        {field.options.map((option) => <Select.Option\n                                            value={option.value}>{option.label}</Select.Option>)}\n                                    </Select>\n                                )}\n                                {field.follow ? <span className=\"ant-form-text\">{field.follow}</span> : null}\n                            </FormItem>;\n                        case MULTI_SELECT_FIELD:\n                            return <FormItem key={field.key} {...formItemLayout} label={field.label}\n                                             extra={field.extra}>\n                                {getFieldDecorator(field.key, {...that.fieldDecorators(field, that.state.formData)})(\n                                    <Select mode=\"multiple\" placeholder={field.placeholder}\n                                            showSearch={field.showSearch ? field.showSearch : null}\n                                            disabled={field.disabled ? field.disabled : that.state.disabled}>\n                                        {field.options.map((option) => <Select.Option\n                                            value={option.value}>{option.label}</Select.Option>)}\n                                    </Select>\n                                )}\n                                {field.follow ? <span className=\"ant-form-text\">{field.follow}</span> : null}\n                            </FormItem>;\n                        case RADIO_FIELD:\n                            return <FormItem key={field.key} label={field.label} {...formItemLayout}\n                                             extra={field.extra}>\n                                {getFieldDecorator(field.key, that.fieldDecorators(field, that.state.formData))(\n                                    <RadioGroup disabled={field.disabled ? field.disabled : that.state.disabled}>\n                                        {field.options.map((option) => <Radio\n                                            value={option.value}>{option.label}</Radio>)}\n                                    </RadioGroup>\n                                )}\n                            </FormItem>;\n                        case CHECKBOX_FIELD:\n                            return <FormItem key={field.key} label={field.label} {...formItemLayout}\n                                             extra={field.extra}>\n                                {getFieldDecorator(field.key, that.fieldDecorators(field, that.state.formData))(\n                                    <CheckboxGroup options={field.options}\n                                                   disabled={field.disabled ? field.disabled : that.state.disabled}/>\n                                )}\n                            </FormItem>;\n                        case SINGLE_CHECKBOX_FIELD:\n                            return <FormItem key={field.key} label={field.label} {...formItemLayout}\n                                             extra={field.extra}>\n                                {getFieldDecorator(field.key, {\n                                        valuePropName: 'checked',\n                                        initialValue: field.initialValue\n                                    },\n                                    {\n                                        rules: [{required: field.required, message: REQUIRED_FIELD_MESSAGE}],\n                                    })(\n                                    <Checkbox\n                                        disabled={field.disabled ? field.disabled : that.state.disabled}>{field.follow}</Checkbox>\n                                )}\n                            </FormItem>;\n                        case NUMBER_FIELD:\n                            return <FormItem key={field.key}\n                                             {...formItemLayout}\n                                             label={field.label} extra={field.extra}>\n                                {getFieldDecorator(field.key, that.fieldDecorators(field, that.state.formData))(\n                                    <InputNumber min={field.min} max={field.max}\n                                                 disabled={field.disabled ? field.disabled : that.state.disabled}/>\n                                )}\n                                <span className=\"ant-form-text\">{field.follow}</span>\n                            </FormItem>;\n                        case DATE_PICKER:\n                            return <FormItem key={field.key} label={field.label} {...formItemLayout}\n                                             extra={field.extra}>\n                                {getFieldDecorator(field.key,\n                                    {\n                                        initialValue: field.initialValue ? moment(field.initialValue) : null,\n                                        rules: [{required: field.required, message: REQUIRED_FIELD_MESSAGE}],\n                                    })(\n                                    <DatePicker format={field.format} allowClear={false}/>\n                                )}\n                            </FormItem>;\n                        case DATE_TIME_PICKER:\n                            return <FormItem key={field.key} label={field.label} {...formItemLayout}\n                                             extra={field.extra}>\n                                {getFieldDecorator(field.key,\n                                    {initialValue: field.initialValue ? moment(field.initialValue) : null},\n                                    {\n                                        rules: [{required: field.required, message: REQUIRED_FIELD_MESSAGE}],\n                                    })(\n                                    <DatePicker format={field.format} showTime onChange={(e) => (field.onChange ?\n                                        field.onChange(e) :\n                                        function () {\n                                        })}/>\n                                )}\n                            </FormItem>;\n                        case TEXT_FIELD:\n                            return <div key={field.key}>\n                                <FormItem key={field.key} label={field.label}  {...formItemLayout} extra={field.extra}>\n                                    {getFieldDecorator(field.key, that.fieldDecorators(field, that.state.formData))(\n                                        <TextArea autosize={{minRows: field.minRows, maxRows: field.maxRows}}\n                                                  placeholder={field.placeholder}\n                                                  disabled={field.disabled ? field.disabled : that.state.disabled}\n                                                  onChange={that.inputChange}/>\n                                    )}\n\n                                </FormItem>\n                            </div>;\n                        case SMS_FIELD:\n                            return <div>\n                                <FormItem key={field.key} label={field.label}  {...formItemLayout} extra={field.extra}>\n                                    {getFieldDecorator(field.key, that.fieldDecorators(field, that.state.formData))(\n                                        <TextArea autosize={{minRows: field.minRows, maxRows: field.maxRows}}\n                                                  placeholder={field.placeholder}\n                                                  disabled={field.disabled ? field.disabled : that.state.disabled}\n                                        />\n                                    )}\n                                    {field.options && field.options.map(item =>\n                                        <Tag color=\"#108ee9\"\n                                             onClick={() => that.addSMSTag(field.key, item.value)}>{item.label}</Tag>)}\n                                </FormItem>\n                            </div>;\n                        case MAIL_TEMPLATE_FIELD:\n                            return <div>\n                                <FormItem key={field.key} label={field.label}  {...formItemLayout} extra={field.extra}>\n                                    {getFieldDecorator(field.key, {\n                                        initialValue: (field.initialValue && field.initialValue.length ? field.initialValue : ''),\n                                        rules: [{\n                                            required: field.required,\n                                            message: REQUIRED_FIELD_MESSAGE\n                                        }]\n                                    })(\n                                        <div style={{border: '1px solid #eee'}}>\n                                            <Editor\n                                                editorState={(that.state.editorState[field.key] ? that.state.editorState[field.key] : (field.initialValue ? EditorState.createWithContent(ContentState.createFromBlockArray(htmlToDraft(field.initialValue))) : EditorState.createEmpty()))}\n                                                onEditorStateChange={(editorState) => that.onEditorStateChange(field.key, editorState)}/>\n                                            {/*// <ReactQuill theme=\"snow\" placeholder={field.placeholder}/>*/}\n                                        </div>\n                                    )}\n                                    {field.options && field.options.map(item =>\n                                        <Tag color=\"#108ee9\"\n                                             onClick={() => that.addMailTemplateTag(field.key, item.value)}>{item.label}</Tag>)}\n                                    {field.preview ? <div>\n                                        <Divider>Preview</Divider>\n                                        <div style={{maxHeight: 200, overflowY: 'scroll'}}\n                                             dangerouslySetInnerHTML={{__html: `${that.state.editorState[field.key] ? draftToHtml(convertToRaw(that.state.editorState[field.key].getCurrentContent())) : field.initialValue}` || ''}}/>\n                                        <Divider/>\n                                    </div> : null}\n                                    {/*<div dangerouslySetInnerHTML={{__html: field.initialValue}}/>*/}\n                                </FormItem>\n                            </div>;\n                        case QUILL_TEXT_FIELD:\n                            return <div>\n                                <FormItem key={field.key} label={field.label}  {...formItemLayout} extra={field.extra}>\n                                    {getFieldDecorator(field.key, {\n                                        initialValue: (field.initialValue && field.initialValue.length ? field.initialValue : ''),\n                                        rules: []\n                                    })(\n                                        <div style={{border: '1px solid #eee'}}>\n                                            <Editor\n                                                editorState={(that.state.editorState[field.key] ? that.state.editorState[field.key] : (field.initialValue ? EditorState.createWithContent(ContentState.createFromBlockArray(htmlToDraft(field.initialValue))) : EditorState.createEmpty()))}\n                                                onEditorStateChange={(editorState) => that.onEditorStateChange(field.key, editorState)}/>\n                                            {/*// <ReactQuill theme=\"snow\" placeholder={field.placeholder}/>*/}\n                                        </div>\n                                    )}\n                                    {field.preview ? <div>\n                                        <Divider>Preview</Divider>\n                                        <div style={{maxHeight: 200, overflowY: 'scroll'}}\n                                             dangerouslySetInnerHTML={{__html: `${that.state.editorState[field.key] ? draftToHtml(convertToRaw(that.state.editorState[field.key].getCurrentContent())) : field.initialValue}` || ''}}/>\n                                        <Divider/>\n                                    </div> : null}\n                                    {/*<div dangerouslySetInnerHTML={{__html: field.initialValue}}/>*/}\n                                </FormItem>\n                            </div>;\n                        case TIME_PICKER:\n                            return <FormItem key={field.key} label={field.label} {...formItemLayout}\n                                             extra={field.extra}>\n                                {getFieldDecorator(field.key, {\n                                    initialValue: field.initialValue ? moment(field.initialValue, field.format) : null,\n                                    rules: [{required: field.required, message: REQUIRED_FIELD_MESSAGE}],\n                                })(\n                                    <TimePicker format={field.format}/>\n                                )}\n                            </FormItem>;\n                        case COLOR_PICKER:\n                            return <FormItem key={field.key} label={field.label}  {...formItemLayout}\n                                             extra={field.extra}>\n                                {getFieldDecorator(field.key, that.fieldDecorators(field, that.state.formData))(\n                                    <div>\n                                        <SwatchesPicker style={{width: '100%'}}\n                                                        onChange={(color) => that.colorChange(color, field.key)}/>\n                                        {that.state.colorPickerKey ? <div style={{\n                                            margin: '10px',\n                                            backgroundColor: that.state.colorPickerColor,\n                                            height: '40px',\n                                            width: '40px'\n                                        }}/> : (that.state.formData[field.key] ? <div style={{\n                                            margin: '10px',\n                                            backgroundColor: that.state.formData[field.key],\n                                            height: '40px',\n                                            width: '40px'\n                                        }}/> : null)}\n                                    </div>\n                                )}\n                            </FormItem>;\n                        case SINGLE_IMAGE_UPLOAD_FIELD:\n                            const singleUploadprops = {\n                                name: 'image',\n                                data: {\n                                    name: 'hello'\n                                },\n                                action: makeURL(FILE_UPLOAD_API),\n                                headers: {\n                                    authorization: 'authorization-text',\n                                },\n                                onChange(info) {\n                                    if (info.file.status !== 'uploading') {\n                                    }\n                                    if (info.file.status === 'done') {\n                                        message.success(`${info.file.name} file uploaded successfully`);\n                                    } else if (info.file.status === 'error') {\n                                        message.error(`${info.file.name} file upload failed.`);\n                                    }\n                                },\n                            };\n                            return <Form.Item key={field.key} {...formItemLayout} label={field.label}>\n                                {getFieldDecorator(field.key, that.fieldDecorators(field, that.state.formData), {valuePropName: field.key,})(\n                                    <Upload {...singleUploadprops}>\n                                        <Button>\n                                            <Icon type=\"upload\"/> Select File\n                                        </Button>\n                                        {field.initialValue ?\n                                            // <img src={makeFileURL(field.initialValue)}\n                                            //      style={{maxWidth: '100%'}}/> \n                                            <Avatar size={64} src={makeFileURL(field.initialValue)}/>\n                                            : null}\n                                    </Upload>\n                                )}\n                                {field.allowWebcam ? <span className=\"ant-form-text\">\n                                    <a onClick={() => that.toggleWebCam(field.key, Math.random())}>\n                                        Open Webcam\n                                    </a>\n                                </span> : null}\n                                <Modal\n                                    footer={null}\n                                    onCancel={() => that.toggleWebCam(field.key, false)}\n                                    visible={!!that.state.webCamState[field.key]}\n                                    width={680}\n                                    key={that.state.webCamState[field.key]}>\n                                    <WebCamField getScreenShot={(value) => that.getImageandUpload(field.key, value)}/>\n                                </Modal>\n                            </Form.Item>;\n                        case MULTI_IMAGE_UPLOAD_FIELD:\n                            const multiuploadprops = {\n                                name: 'image',\n                                data: {\n                                    name: 'hello'\n                                },\n                                action: makeURL(FILE_UPLOAD_API),\n                                headers: {\n                                    authorization: 'authorization-text',\n                                },\n                                onChange(info) {\n                                    if (info.file.status !== 'uploading') {\n                                        // console.log(info.file, info.fileList);\n                                    }\n                                    if (info.file.status === 'done') {\n                                        message.success(`${info.file.name} file uploaded successfully`);\n                                    } else if (info.file.status === 'error') {\n                                        message.error(`${info.file.name} file upload failed.`);\n                                    }\n                                },\n                            };\n                            return <Form.Item key={field.key} {...formItemLayout} label={field.label}>\n                                {getFieldDecorator(field.key, {valuePropName: field.key,})(\n                                    <Upload {...multiuploadprops}>\n                                        <Button>\n                                            <Icon type=\"upload\"/> Select File\n                                        </Button>\n                                        {field.initialValue && field.initialValue.length ?\n                                            field.initialValue.map(img => <img src={img}\n                                                                               style={{maxWidth: '100%'}}/>) : null}\n                                    </Upload>\n                                )}\n                            </Form.Item>;\n                        case COUNTRY_FIELD:\n                            return <FormItem key={field.key} {...formItemLayout} label={field.label}\n                                             extra={field.extra}>\n                                {getFieldDecorator(field.key, that.fieldDecorators(field, that.state.formData))(\n                                    <Select placeholder={field.placeholder}\n                                            disabled={field.disabled ? field.disabled : that.state.disabled}\n                                            mode={field.mode ? field.mode : \"default\"}\n                                            onChange={(value) => that.setAddressField('country', value)}>\n                                        {that.state.countryOptions.map((option) => <Select.Option\n                                            value={option.id}>{option.name}</Select.Option>)}\n                                    </Select>\n                                )}\n                            </FormItem>;\n                        case STATE_FIELD:\n                            return <FormItem key={field.key} {...formItemLayout} label={field.label}\n                                             extra={field.extra}>\n                                {getFieldDecorator(field.key, that.fieldDecorators(field, that.state.formData))(\n                                    <Select placeholder={field.placeholder}\n                                            disabled={field.disabled ? field.disabled : that.state.disabled}\n                                            mode={field.mode ? field.mode : \"default\"}\n                                            onChange={(value) => that.setAddressField('state', value)}>\n                                        {that.state.stateOptions.map((option) => <Select.Option\n                                            value={option.id}>{option.name}</Select.Option>)}\n                                    </Select>\n                                )}\n                            </FormItem>;\n\n                        case EMAIL_FIELD:\n                            return <Form.Item\n                                key={field.key}\n                                {...formItemLayout}\n                                label={field.label}\n                                extra={field.extra}\n                            >\n                                {getFieldDecorator(field.key, {\n                                    initialValue: that.state.formData[field.key],\n                                    rules: [{\n                                        type: 'email', message: 'The input is not valid E-mail!',\n                                    }, {\n                                        required: true, message: 'Please input your E-mail!',\n                                    }],\n                                })(\n                                    <Input placeholder={field.placeholder}\n                                           disabled={field.disabled ? field.disabled : that.state.disabled}\n                                           onChange={that.inputChange}/>\n                                )}\n                            </Form.Item>\n\n                        case CITY_FIELD:\n                            return <FormItem key={field.key} {...formItemLayout} label={field.label}\n                                             extra={field.extra}>\n                                {getFieldDecorator(field.key, that.fieldDecorators(field, that.state.formData))(\n                                    <Select placeholder={field.placeholder}\n                                            disabled={field.disabled ? field.disabled : that.state.disabled}\n                                            mode={field.mode ? field.mode : \"default\"}>\n                                        {that.state.cityOptions.map((option) => <Select.Option\n                                            value={option.id}>{option.name}</Select.Option>)}\n                                    </Select>\n                                )}\n                            </FormItem>;\n                        case DIVIDER_FIELD :\n                            return <Divider style={{margin: 4}}/>\n\n\n                        case LABEL_FIELD :\n                            return <FormItem key={field.key} {...formItemLayout} label={field.label}\n                                             extra={field.extra}>\n\n                                {field.follow ? <span className=\"ant-form-text\">{field.follow}</span> : null}\n\n                            </FormItem>;\n                        default:\n                            return null;\n                    }\n                }) : null}\n                <FormItem {...formItemLayout}>\n                    {/*<Button onClick={this.resetFormData}>Reset</Button>*/}\n                    <Button loading={that.state.loading} type=\"primary\" htmlType=\"submit\" style={{margin: 5}}>\n                        Submit\n                    </Button>\n                    {that.props.history ?\n                        <Button style={{margin: 5}} onClick={() => that.props.history.goBack()}>\n                            Cancel\n                        </Button> : null}\n                </FormItem>\n            </Form>\n        </div>\n    }\n}\n\nexport default DynamicFieldsForm;\n","import React from \"react\";\nimport Webcam from \"react-webcam\";\nimport {Button} from \"antd\";\n\nexport default class WebCamField extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {}\n    }\n\n    setRef = webcam => {\n        this.webcam = webcam;\n    };\n\n    capture = () => {\n        const imageSrc = this.webcam.getScreenshot();\n        if(this.props.getScreenShot)\n            this.props.getScreenShot(imageSrc);\n    };\n\n    render() {\n        const videoConstraints = {\n            width: 1280,\n            height: 720,\n            facingMode: \"user\"\n        };\n        return <div style={{width:680}}>\n            <Webcam audio={false}\n                    height={480}\n                    width={640}\n                    ref={this.setRef}\n                    videoConstraints={videoConstraints}\n                    screenshotFormat=\"image/jpeg\"/>\n            <Button onClick={this.capture}>Capture photo</Button>\n        </div>\n    }\n}\n","module.exports = __webpack_public_path__ + \"static/media/kidneycarelogo.3378a129.png\";"],"sourceRoot":""}