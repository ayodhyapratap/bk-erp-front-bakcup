{"version":3,"sources":["app/components/calendar/EventComponent.js","app/utils/calendarUtils.js","app/components/calendar/CalendarRightPanel.js","app/components/calendar/Calendar.js"],"names":["EventComponent","props","placement","content","EventPatientPopover","appointmentId","this","event","appointment","id","key","trigger","style","color","height","type","title","React","Component","calendarSettingMenu","Item","to","saveCalendarSettings","value","settings","lockr","CALENDAR_SETTINGS","TimeSlotWrapper","flag","dayValue","moment","isValid","format","toLowerCase","filterType","selectedDoctor","calendarTimings","daysTimings","lunch","startTime","endTime","lunchEndTime","lunchStartTime","doctorTimings","showCalendarEvents","i","blockedCalendar","length","doctor","isBetween","block_from","block_to","children","child","Children","only","cloneElement","className","CalendarRightPanel","changeDate","option","that","setState","prevState","selectedDate","add","subtract","todaysAppointments","loading","getAPI","interpolate","APPOINTMENT_PERPRACTICE_API","active_practiceId","data","appointmentOverview","filteredAppointment","forEach","status","CANCELLED_STATUS","todaysAppointmentFilter","push","todaysAppointmentOverview","todaysFilteredAppointments","start","state","end","filterTodaysAppointment","changeAppointmentStatus","currentStatus","targetStatus","APPOINTMENT_API","updateAppointmentStatus","displayMessage","ERROR_MSG_TYPE","reqData","WAITING_STATUS","waiting","ENGAGED_STATUS","engaged","CHECKOUT_STATUS","checkout","putAPI","SUCCESS_MSG_TYPE","bind","overlay","block","margin","activePracticePermissions","AddWalkinAppointment","allowAllPermissions","gutter","span","onClick","SCHEDULE_STATUS","textAlign","border","borderRadius","backgroundColor","boxShadow","spinning","size","dataSource","renderItem","apppointment","padding","textDecoration","width","marginTop","borderLeft","doctors_object","calendar_colour","AppointmentCard","marginBottom","schedule_at","patient","user","first_name","float","disabled","ChangeAppointmentStatus","localizer","momentLocalizer","DragAndDropCalendar","withDragAndDrop","BigCalendar","Content","confirm","App","changeCalendarType","calendarType","selectedCategory","changeFilter","practice_doctors","resizeEvent","WARNING_MSG_TYPE","events","changedEvent","nextEvents","existingEvent","parseInt","successFn","refreshFilterList","errorFn","onOk","onCancel","blockedCalendarTiming","BLOCK_CALENDAR","practice","cal_fdate","cal_tdate","onRangeChange","e","appointmentList","date","newDate","month","onSelectedDateChange","startOf","endOf","setFilterType","setFilter","stateValues","loadDoctorTiming","filteredEvent","filterCancelledAppointment","category","changeState","DOCTOR_VISIT_TIMING_API","dataObject","timing","DAY_KEYS","dayKey","visting_hour_same_week","first_start_time","second_end_time","is_two_sessions","first_end_time","second_start_time","doctorTiming","visiblePopover","appointments","practice_categories","practice_staff","categories_object","doctorsAppointmentCount","categoriesAppointmentCount","showAppointments","getCalendarSettings","onSelectSlot","onSelectEvent","moveEvent","loadDoctors","eventStyleGetter","loadCalendarTimings","APPOINTMENT_CATEGORIES","categories","map","item","intToRGB","hashCode","name","doctorLoading","PRACTICESTAFF","doctors","staff","doctor_object","usersdata","role","DOCTORS_ROLE","CALENDER_SETTINGS","droppedOnAllDaySlot","isAllDay","idx","indexOf","allDay","updatedEvent","splice","time","action","redirect","history","newEvents","endtime","slot","Date","ALL","CANCELLED","isSelected","color_object","opacity","display","start_time","end_time","exact","path","render","route","AddAppointment","CreateAppointment","PermissionDenied","EditAppointment","onChange","allowClear","BlockCalendar","selectedKeys","textOverflow","borderRight","fontWeight","Group","checked","defaultValue","buttonStyle","target","Button","position","bottom","zIndex","openMorePanel","listStyle","paddingInlineStart","show24HourCalendar","shape","icon","defaultDate","defaultView","step","timeslots","truncateEvents","onEventDrop","onEventResize","resizable","selectable","popup","views","week","MyWeek","day","agenda","eventPropGetter","components","timeSlotWrapper","options","toString","range","eventOffset","dates","current","navigate","Navigate","PREVIOUS","NEXT","toLocaleDateString"],"mappings":"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","file":"static/js/18.7a489e1f.chunk.js","sourcesContent":["import React from \"react\";\nimport {Icon, Popover} from \"antd\";\nimport EventPatientPopover from \"./EventPatientPopover\";\n\nexport default class EventComponent extends React.Component {\n    constructor(props) {\n        super(props);\n    }\n\n    render(){\n        const that=this;\n        return (\n<Popover\n  placement=\"right\"\n  content={(\n<EventPatientPopover\n  appointmentId={this.props.event.appointment.id}\n  key={this.props.event.appointment.id}\n  {...that.props}\n/>\n)}\n  trigger=\"hover\"\n>\n            <div style={{color: 'white',height:'100%'}}>\n                <h1 style={{color: 'white'}}><Icon type=\"user\" />{this.props.title}</h1>\n            </div>\n</Popover>\n)\n    }\n}\n","import {Menu} from \"antd\";\nimport React from 'react';\nimport {Link} from \"react-router-dom\";\nimport * as lockr from \"lockr\";\nimport moment from \"moment/moment\";\nimport {getAPI, interpolate} from \"./common\";\nimport {APPOINTMENT_CATEGORIES} from \"../constants/api\";\nimport {hashCode, intToRGB} from \"./clinicUtils\";\nimport {CALENDAR_SETTINGS} from \"../constants/dataKeys\";\n\nexport const calendarSettingMenu = (\n<Menu>\n        <Menu.Item key=\"1\">\n            <Link to=\"/settings/calendarsettings#timings\">\n                Modify Calendar Timings\n            </Link>\n        </Menu.Item>\n        <Menu.Item key=\"2\">\n            <Link to=\"/settings/clinics-staff#staff\">\n                Add/Edit Doctor or Staff\n            </Link>\n        </Menu.Item>\n        <Menu.Item key=\"3\">\n            <Link to=\"/settings/clinics-staff#notification\">\n                Modify SMS/Email for Doctor/Staff\n            </Link>\n        </Menu.Item>\n        <Menu.Item key=\"4\">\n            <Link to=\"/settings/communication-settings\">\n                Modify SMS/Email for Patients\n            </Link>\n        </Menu.Item>\n        <Menu.Item key=\"5\">\n            <Link to=\"/settings/calendarsettings#categories\">\n                Add/Edit Categroies\n            </Link>\n        </Menu.Item>\n</Menu>\n);\nexport const loadAppointmentCategories = function (that) {\n    const successFn = function (data) {\n        const categories_object = {}\n        const categories = data.map((item) => {\n                categories_object[item.id] = {...item, calendar_colour: intToRGB(hashCode(item.name))}\n                return categories_object[item.id]\n            }\n        )\n        that.setState({\n            categories_object,\n            practice_categories: categories,\n        })\n\n    }\n    const errorFn = function () {\n\n    }\n    getAPI(interpolate(APPOINTMENT_CATEGORIES, [that.props.active_practiceId]), successFn, errorFn)\n}\n\nexport const saveCalendarSettings = function (type, value) {\n    let settings = lockr.get(CALENDAR_SETTINGS);\n    if (!settings) {\n        settings = {}\n    }\n    settings = {...settings, [type]: value}\n    lockr.set(CALENDAR_SETTINGS, settings);\n}\nexport const getCalendarSettings = function () {\n    let settings = lockr.get(CALENDAR_SETTINGS);\n    if (!settings) {\n        settings = {}\n    }\n    return settings;\n}\n\n\nexport const TimeSlotWrapper = function (props) {\n    let flag = true;\n    const dayValue = moment(props.value).isValid() ? moment(props.value).format('dddd').toLowerCase() : null;\n    if (props.filterType != 'DOCTOR' || props.selectedDoctor == 'ALL') {\n        /**\n         * Checking for Calendar Clinic Timings\n         * */\n        if (props.calendarTimings && dayValue && props.calendarTimings[dayValue]) {\n            const daysTimings = props.calendarTimings[dayValue];\n            if (daysTimings.lunch) {\n                if (\n                    (moment(props.value, 'HH:mm:ss').format('HH:mm:ss') <= daysTimings.startTime.format('HH:mm:ss')\n                        || moment(props.value, 'HH:mm:ss').format('HH:mm:ss') > daysTimings.endTime.format('HH:mm:ss')\n                    ) || (\n                        moment(props.value, 'HH:mm:ss').format('HH:mm:ss') < daysTimings.lunchEndTime.format('HH:mm:ss')\n                        && moment(props.value, 'HH:mm:ss').format('HH:mm:ss') >= daysTimings.lunchStartTime.format('HH:mm:ss')\n                    )\n                ) {\n                    flag = false;\n                }\n            } else if (moment(props.value, 'HH:mm:ss').format('HH:mm:ss') <= daysTimings.startTime.format('HH:mm:ss') || moment(props.value, 'HH:mm:ss').format('HH:mm:ss') > daysTimings.endTime.format('HH:mm:ss')) {\n                    flag = false;\n                }\n        } else if (dayValue && !props.calendarTimings[dayValue]) {\n            /**\n             * If the practice is not opening for the day\n             * */\n            flag = false;\n        }\n    } else if (props.doctorTimings && dayValue && props.doctorTimings[dayValue]) {\n            const daysTimings = props.doctorTimings[dayValue];\n            if (daysTimings.lunch) {\n                if (\n                    (moment(props.value, 'HH:mm:ss').format('HH:mm:ss') <= daysTimings.startTime.format('HH:mm:ss')\n                        || moment(props.value, 'HH:mm:ss').format('HH:mm:ss') > daysTimings.endTime.format('HH:mm:ss')\n                    ) || (\n                        moment(props.value, 'HH:mm:ss').format('HH:mm:ss') < daysTimings.lunchEndTime.format('HH:mm:ss')\n                        && moment(props.value, 'HH:mm:ss').format('HH:mm:ss') >= daysTimings.lunchStartTime.format('HH:mm:ss')\n                    )\n                ) {\n                    flag = false;\n                }\n            } else if (moment(props.value, 'HH:mm:ss').format('HH:mm:ss') <= daysTimings.startTime.format('HH:mm:ss') || moment(props.value, 'HH:mm:ss').format('HH:mm:ss') > daysTimings.endTime.format('HH:mm:ss')) {\n                    flag = false;\n                }\n        } else if (props.doctorTimings && dayValue && !props.doctorTimings[dayValue]) {\n            /**\n             * If the doctor is not working for the day\n             * */\n            flag = false;\n        }\n    /**\n     * Checking for Events Timings\n     * */\n    if (props.showCalendarEvents && flag) {\n        for (let i = 0; i < props.blockedCalendar.length; i++) {\n            if (props.blockedCalendar[i].doctor && props.filterType == 'DOCTOR') {\n                if (props.blockedCalendar[i].doctor == props.selectedDoctor && moment(props.value).isBetween(moment(props.blockedCalendar[i].block_from), moment(props.blockedCalendar[i].block_to))) {\n                    flag = false;\n                    break;\n                }\n            } else if (moment(props.value).isBetween(moment(props.blockedCalendar[i].block_from), moment(props.blockedCalendar[i].block_to))) {\n                    flag = false;\n                    break;\n                }\n        }\n    }\n\n    if (flag)\n        return props.children;\n\n\n    const child = React.Children.only(props.children);\n    return React.cloneElement(child, {className: `${child.props.className  } rbc-off-range-bg`});\n}\n","import React from \"react\";\nimport {Button, Icon, Dropdown, Row, Col, Divider, Spin, List, Popover} from \"antd\";\nimport {Link} from \"react-router-dom\";\nimport moment from \"moment/moment\";\nimport {calendarSettingMenu} from \"../../utils/calendarUtils\";\nimport {\n    CANCELLED_STATUS,\n    CHECKOUT_STATUS,\n    ENGAGED_STATUS,\n    SCHEDULE_STATUS,\n    WAITING_STATUS\n} from \"../../constants/hardData\";\nimport {APPOINTMENT_API, APPOINTMENT_PERPRACTICE_API} from \"../../constants/api\";\nimport {displayMessage, getAPI, interpolate, putAPI} from \"../../utils/common\";\nimport EventPatientPopover from \"./EventPatientPopover\";\nimport {ERROR_MSG_TYPE, SUCCESS_MSG_TYPE} from \"../../constants/dataKeys\";\n\nexport default class CalendarRightPanel extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            todaysAppointments: [],\n            todaysFilteredAppointments: [],\n            todaysAppointmentOverview: {},\n            todaysAppointmentFilter: 'ALL',\n            selectedDate: this.props.selectedDate\n        }\n        this.todaysAppointments = this.todaysAppointments.bind(this);\n    }\n\n    componentDidMount() {\n        this.todaysAppointments()\n    }\n\n    changeDate = (option) => {\n        const that = this;\n        this.setState(function (prevState) {\n            if (option)\n                return {selectedDate: prevState.selectedDate.add(1, 'days')};\n            return {selectedDate: prevState.selectedDate.subtract(1, 'days')};\n\n        }, function () {\n            that.todaysAppointments();\n        })\n\n    }\n\n    todaysAppointments = () => {\n        const that = this;\n        that.setState({\n            loading: true\n        });\n        const successFn = function (data) {\n            that.setState(function (prevState) {\n                const appointmentOverview = {};\n                const filteredAppointment = [];\n                data.forEach(function (appointment) {\n                    if (appointment.status == CANCELLED_STATUS) {\n                        return true;\n                    }\n                    if (appointmentOverview[appointment.status]) {\n                        appointmentOverview[appointment.status] += 1\n                    } else {\n                        appointmentOverview[appointment.status] = 1;\n                    }\n                    if (prevState.todaysAppointmentFilter == 'ALL') {\n                        filteredAppointment.push(appointment)\n                    } else if (prevState.todaysAppointmentFilter == appointment.status) {\n                        filteredAppointment.push(appointment)\n                    }\n                });\n                return {\n                    todaysAppointments: data,\n                    todaysAppointmentOverview: appointmentOverview,\n                    todaysFilteredAppointments: filteredAppointment,\n                    loading: false\n                }\n            });\n        }\n        const errorFn = function () {\n            that.setState({\n                loading: false\n            })\n        }\n        getAPI(interpolate(APPOINTMENT_PERPRACTICE_API, [this.props.active_practiceId]), successFn, errorFn, {\n            start: that.state.selectedDate.format('YYYY-MM-DD'),\n            end: that.state.selectedDate.format('YYYY-MM-DD')\n        });\n    }\n\n    filterTodaysAppointment = (filterType) => {\n        this.setState(function (prevState) {\n            const filteredAppointment = [];\n            prevState.todaysAppointments.forEach(function (appointment) {\n                if (filterType == 'ALL') {\n                    filteredAppointment.push(appointment)\n                } else if (filterType == appointment.status) {\n                    filteredAppointment.push(appointment)\n                }\n            });\n            return {\n                todaysFilteredAppointments: filteredAppointment,\n                todaysAppointmentFilter: filterType\n            }\n        });\n    }\n\n    changeAppointmentStatus = (id, currentStatus, targetStatus) => {\n        const that = this;\n        const successFn = function (data) {\n            if (data.status == currentStatus) {\n                that.updateAppointmentStatus(id, currentStatus, targetStatus)\n            } else {\n                displayMessage(ERROR_MSG_TYPE, \"Appointment status has already changed. Updating Appointments...\")\n                that.todaysAppointments();\n            }\n        }\n        const errorFn = function () {\n\n        }\n        getAPI(interpolate(APPOINTMENT_API, [id]), successFn, errorFn);\n    }\n\n    updateAppointmentStatus = (id, currentStatus, targetStatus) => {\n        const that = this;\n        const reqData = {\n            status: targetStatus\n        };\n        if(targetStatus==WAITING_STATUS){\n            reqData.waiting=moment().format()\n        }else if(targetStatus==ENGAGED_STATUS){\n            reqData.engaged=moment().format()\n        }else if(targetStatus==CHECKOUT_STATUS){\n            reqData.checkout=moment().format()\n        }\n        const successFn = function (data) {\n            displayMessage(SUCCESS_MSG_TYPE, \"Appointment Status Changed Successfully!!\");\n            that.todaysAppointments()\n        }\n        const errorFn = function () {\n\n        }\n        putAPI(interpolate(APPOINTMENT_API, [id]), reqData, successFn, errorFn\n        )\n    }\n\n    render() {\n        const that = this;\n        return (\n<div>\n            <Dropdown trigger=\"click\" overlay={calendarSettingMenu}>\n                <Button block style={{margin: 5}}>\n                    <Icon type=\"setting\" /> Settings <Icon type=\"down\" />\n                </Button>\n            </Dropdown>\n            {that.props.activePracticePermissions.AddWalkinAppointment || that.props.allowAllPermissions ? (\n            <Link to='/calendar/create-appointment'>\n                <Button block type=\"primary\" style={{margin: 5}}> Walkin\n                    Appointment\n                </Button>\n            </Link>\n          ):null}\n            <Row gutter={8}>\n                <Col\n                  span={6}\n                  onClick={() => this.filterTodaysAppointment(this.state.todaysAppointmentFilter == SCHEDULE_STATUS ? 'ALL' : SCHEDULE_STATUS)}\n                  style={{\n                         textAlign: 'center',\n                         border: '1px solid #ccc',\n                         borderRadius: '3px',\n                         backgroundColor: (this.state.todaysAppointmentFilter == SCHEDULE_STATUS ? '#FF6600' : null),\n                         color: (this.state.todaysAppointmentFilter == SCHEDULE_STATUS ? 'white' : '#FF6600'),\n                         boxShadow: '0 2px 4px #111 inset'\n                     }}\n                >\n                    <small>{SCHEDULE_STATUS}</small>\n                    <h2 style={{color: (this.state.todaysAppointmentFilter == SCHEDULE_STATUS ? 'white' : '#FF6600')}}>{this.state.todaysAppointmentOverview[SCHEDULE_STATUS] ? this.state.todaysAppointmentOverview[SCHEDULE_STATUS] : 0}</h2>\n                </Col>\n                <Col\n                  span={6}\n                  onClick={() => this.filterTodaysAppointment(this.state.todaysAppointmentFilter == WAITING_STATUS ? 'ALL' : WAITING_STATUS)}\n                  style={{\n                         textAlign: 'center',\n                         border: '1px solid #ccc',\n                         borderRadius: '3px',\n                         backgroundColor: (this.state.todaysAppointmentFilter == WAITING_STATUS ? '#FC0000' : null),\n                         color: (this.state.todaysAppointmentFilter == WAITING_STATUS ? 'white' : '#FC0000'),\n                         boxShadow: '0 2px 4px #111 inset'\n                     }}\n                >\n                    <small>{WAITING_STATUS}</small>\n                    <h2 style={{color: (this.state.todaysAppointmentFilter == WAITING_STATUS ? 'white' : '#FC0000')}}>{this.state.todaysAppointmentOverview[WAITING_STATUS] ? this.state.todaysAppointmentOverview[WAITING_STATUS] : 0}</h2>\n                </Col>\n                <Col\n                  span={6}\n                  onClick={() => this.filterTodaysAppointment(this.state.todaysAppointmentFilter == ENGAGED_STATUS ? 'ALL' : ENGAGED_STATUS)}\n                  style={{\n                         textAlign: 'center',\n                         border: '1px solid #ccc',\n                         borderRadius: '3px',\n                         backgroundColor: (this.state.todaysAppointmentFilter == ENGAGED_STATUS ? '#598C01' : null),\n                         color: (this.state.todaysAppointmentFilter == ENGAGED_STATUS ? 'white' : '#598C01'),\n                         boxShadow: '0 2px 4px #111 inset'\n                     }}\n                >\n                    <small>{ENGAGED_STATUS}</small>\n                    <h2 style={{color: (this.state.todaysAppointmentFilter == ENGAGED_STATUS ? 'white' : '#598C01')}}>{this.state.todaysAppointmentOverview[ENGAGED_STATUS] ? this.state.todaysAppointmentOverview[ENGAGED_STATUS] : 0}</h2>\n                </Col>\n                <Col\n                  span={6}\n                  onClick={() => this.filterTodaysAppointment(this.state.todaysAppointmentFilter == CHECKOUT_STATUS ? 'ALL' : CHECKOUT_STATUS)}\n                  style={{\n                         textAlign: 'center',\n                         border: '1px solid #ccc',\n                         borderRadius: '3px',\n                         backgroundColor: (this.state.todaysAppointmentFilter == CHECKOUT_STATUS ? '#0094DE' : null),\n                         color: (this.state.todaysAppointmentFilter == CHECKOUT_STATUS ? 'white' : '#0094DE'),\n                         boxShadow: '0 2px 4px #111 inset'\n                     }}\n                >\n                    <small>{CHECKOUT_STATUS}</small>\n                    <h2 style={{color: (this.state.todaysAppointmentFilter == CHECKOUT_STATUS ? 'white' : '#0094DE')}}>{this.state.todaysAppointmentOverview[CHECKOUT_STATUS] ? this.state.todaysAppointmentOverview[CHECKOUT_STATUS] : 0}</h2>\n                </Col>\n            </Row>\n            <Divider>\n                <a type=\"primary\" onClick={() => this.changeDate(false)}><Icon type=\"left\" /></a>\n                {this.state.selectedDate.format(\"MMM Do\") == moment().format(\"MMM Do\") ? 'Today' : this.state.selectedDate.format(\"MMM Do\")}'s\n                Schedule ({this.state.todaysFilteredAppointments.length})\n                &nbsp;<a type=\"primary\" onClick={() => this.changeDate(true)}><Icon type=\"right\" /></a>\n            </Divider>\n            <Spin spinning={this.state.loading}>\n                <List\n                  size=\"small\"\n                  dataSource={this.state.todaysFilteredAppointments}\n                  renderItem={(apppointment) => (apppointment.status == CANCELLED_STATUS ? <div /> : (\n<List.Item\n  color=\"transparent\"\n  style={{padding: 0}}\n>\n                        <div\n                          style={{\n                                border: '1px solid #ddd',\n                                borderRadius: '5px',\n                                textDecoration: (apppointment.status == CANCELLED_STATUS ? 'line-through' : 'inherit'),\n                                backgroundColor: (apppointment.status == CANCELLED_STATUS ? '#aaa' : '#eee'),\n                                width: '100%',\n                                marginTop: '2px',\n                                borderLeft: `5px solid${  apppointment.doctor && that.props.doctors_object && that.props.doctors_object[apppointment.doctor] ? that.props.doctors_object[apppointment.doctor].calendar_colour : 'transparent'}`\n                            }}\n                        >\n                            <AppointmentCard\n                              {...apppointment}\n                              changeAppointmentStatus={this.changeAppointmentStatus}\n                              {...this.props}\n                            />\n                        </div>\n</List.Item>\n))}\n                />\n            </Spin>\n</div>\n)\n    }\n}\n\nfunction AppointmentCard(appointment) {\n    return (\n<div style={{width: '100%'}}>\n\n        <p style={{marginBottom: 0}}>\n            <Popover\n              placement=\"right\"\n              content={(\n<EventPatientPopover\n  appointmentId={appointment.id}\n  key={appointment.id}\n  {...appointment}\n/>\n)}\n            >\n            <span\n              style={{width: 'calc(100% - 60px)'}}\n            ><b>{moment(appointment.schedule_at).format(\"LT\")}</b>&nbsp;\n                {appointment.patient.user.first_name}\n            </span>\n            </Popover>\n            {appointment.status == SCHEDULE_STATUS ? (\n                <span style={{width: '70px', float: 'right'}}>\n                    <a onClick={() => appointment.changeAppointmentStatus(appointment.id, SCHEDULE_STATUS, WAITING_STATUS)} disabled={!appointment.activePracticePermissions.ChangeAppointmentStatus}> Check In</a>\n                </span>\n              ) : null}\n            {appointment.status == WAITING_STATUS ? (\n                <span style={{width: '70px', float: 'right'}}>\n                    <a onClick={() => appointment.changeAppointmentStatus(appointment.id, WAITING_STATUS, ENGAGED_STATUS)} disabled={!appointment.activePracticePermissions.ChangeAppointmentStatus}> Engage</a>\n                </span>\n              ) : null}\n            {appointment.status == ENGAGED_STATUS ? (\n                <span style={{width: '70px', float: 'right'}}>\n                    <a onClick={() => appointment.changeAppointmentStatus(appointment.id, ENGAGED_STATUS, CHECKOUT_STATUS)} disabled={!appointment.activePracticePermissions.ChangeAppointmentStatus}> Check Out</a>\n                </span>\n              ) : null}\n            {appointment.status == CHECKOUT_STATUS ? (\n                <span style={{width: '70px', float: 'right'}}>\n                    <small>Checked Out</small>\n                </span>\n              ) : null}\n\n        </p>\n</div>\n);\n}\n","import React, {Component} from \"react\";\nimport moment from \"moment\";\nimport \"react-big-calendar/lib/addons/dragAndDrop/styles.css\";\nimport \"react-big-calendar/lib/css/react-big-calendar.css\";\nimport withDragAndDrop from \"react-big-calendar/lib/addons/dragAndDrop\";\nimport TimeGrid from 'react-big-calendar/lib/TimeGrid';\nimport {Calendar as BigCalendar, momentLocalizer, Navigate} from 'react-big-calendar';\nimport {\n    Modal,\n    Row,\n    Col,\n    Button,\n    Divider,\n    Layout,\n    Spin,\n    Menu,\n    Dropdown,\n    Icon,\n    DatePicker, Checkbox,\n    Radio\n} from \"antd\";\nimport \"./app.css\";\nimport {Route, Link, Switch} from \"react-router-dom\";\nimport * as dates from 'date-arithmetic'\nimport {DOCTORS_ROLE, SUCCESS_MSG_TYPE, WARNING_MSG_TYPE,} from \"../../constants/dataKeys\";\nimport {getAPI, putAPI, interpolate, displayMessage} from \"../../utils/common\";\nimport {\n    APPOINTMENT_PERPRACTICE_API,\n    APPOINTMENT_API,\n    PRACTICESTAFF,\n    CALENDER_SETTINGS,\n    BLOCK_CALENDAR, DOCTOR_VISIT_TIMING_API\n} from \"../../constants/api\";\nimport EventComponent from \"./EventComponent\";\nimport {\n    getCalendarSettings,\n    loadAppointmentCategories,\n    saveCalendarSettings, TimeSlotWrapper\n} from \"../../utils/calendarUtils\";\nimport CalendarRightPanel from \"./CalendarRightPanel\";\nimport {\n    CANCELLED_STATUS,\n    DAY_KEYS,\n    SCHEDULE_STATUS,\n} from \"../../constants/hardData\";\nimport CreateAppointment from \"./CreateAppointment\";\nimport PermissionDenied from \"../common/errors/PermissionDenied\";\n\nconst localizer = momentLocalizer(moment);\nconst DragAndDropCalendar = withDragAndDrop(BigCalendar);\nconst {Content} = Layout;\nconst {confirm} = Modal;\n\nclass App extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            startTime: null,\n            visiblePopover: false,\n            events: [],\n            filteredEvent: [],\n            appointments: [],\n            practice_doctors: [],\n            practice_categories: [],\n            practice_staff: [],\n            doctors_object: null,\n            categories_object: null,\n            calendarTimings: null,\n            timing: {},\n            loading: true,\n            selectedDoctor: 'ALL',\n            selectedCategory: 'ALL',\n            selectedDate: moment(),\n            filterType: 'DOCTOR',\n            calendarType: 'APPOINTMENTS',\n            doctorsAppointmentCount: {},\n            categoriesAppointmentCount: {},\n            blockedCalendar: [],\n            showCalendarEvents: true,\n            showAppointments: true,\n            doctorTiming: {},\n            ...getCalendarSettings()\n        }\n        ;\n        this.onSelectSlot = this.onSelectSlot.bind(this);\n        this.onSelectEvent = this.onSelectEvent.bind(this);\n        this.moveEvent = this.moveEvent.bind(this)\n        this.resizeEvent = this.resizeEvent.bind(this);\n        this.loadDoctors = this.loadDoctors.bind(this);\n        this.eventStyleGetter = this.eventStyleGetter.bind(this);\n        this.loadCalendarTimings = this.loadCalendarTimings.bind(this);\n        this.loadCalendarTimings()\n    }\n\n    componentDidMount() {\n        this.appointmentList(moment().startOf('day'), moment().endOf('day'));\n        this.loadDoctors();\n        loadAppointmentCategories(this);\n    }\n\n    changeCalendarType = (value) => {\n        const that = this;\n        this.setState({\n            calendarType: value,\n            selectedDoctor: 'ALL',\n            selectedCategory: 'ALL',\n            filterType: 'DOCTOR',\n        }, function () {\n            if (value == 'APPOINTMENTS') {\n                that.changeFilter('selectedDoctor', 'ALL');\n\n            } else if (value == 'AVAILABILITY') {\n                if (that.state.practice_doctors.length) {\n                    that.changeFilter('selectedDoctor', that.state.practice_doctors[0].id);\n                }\n            }\n        })\n    }\n\n    loadDoctors() {\n        const that = this;\n        that.setState({\n            doctorLoading: true\n        })\n        const successFn = function (data) {\n            const doctors = [];\n            const staff = [];\n            const doctor_object = {}\n            data.staff.forEach(function (usersdata) {\n                if (usersdata.role == DOCTORS_ROLE) {\n                    doctors.push(usersdata);\n                    doctor_object[usersdata.id] = usersdata;\n                } else {\n                    staff.push(usersdata);\n                }\n            });\n            that.setState({\n                practice_staff: staff,\n                practice_doctors: doctors,\n                doctors_object: doctor_object,\n                doctorLoading: false\n            })\n        }\n        const errorFn = function () {\n            that.setState({\n                doctorLoading: false\n            })\n        };\n        getAPI(interpolate(PRACTICESTAFF, [this.props.active_practiceId]), successFn, errorFn);\n    }\n\n    loadCalendarTimings() {\n        const that = this;\n        const successFn = function (data) {\n            let dataObject = {};\n            if (data.length)\n                dataObject = data[0];\n            const timing = {};\n            DAY_KEYS.forEach(function (dayKey) {\n                timing[dayKey] = {};\n                if (dataObject.visting_hour_same_week) {\n                    timing[dayKey].startTime = moment(dataObject.first_start_time, 'HH:mm:ss');\n                    timing[dayKey].endTime = moment(dataObject.second_end_time, 'HH:mm:ss');\n                    if (dataObject.is_two_sessions) {\n                        timing[dayKey].lunch = true;\n                        timing[dayKey].lunchStartTime = moment(dataObject.first_end_time, 'HH:mm:ss');\n                        timing[dayKey].lunchEndTime = moment(dataObject.second_start_time, 'HH:mm:ss');\n                    } else {\n                        timing[dayKey].lunch = false\n                    }\n                } else if (dataObject[dayKey]) {\n                    timing[dayKey].startTime = moment(dataObject[`first_start_time_${dayKey}`], 'HH:mm:ss');\n                    timing[dayKey].endTime = moment(dataObject[`second_end_time_${dayKey}`], 'HH:mm:ss');\n                    if (dataObject[`is_two_sessions_${dayKey}`]) {\n                        timing[dayKey].lunch = true;\n                        timing[dayKey].lunchStartTime = moment(dataObject[`first_end_time_${dayKey}`], 'HH:mm:ss');\n                        timing[dayKey].lunchEndTime = moment(dataObject[`second_start_time_${dayKey}`], 'HH:mm:ss');\n                    } else {\n                        timing[dayKey].lunch = false\n                    }\n                } else {\n                    timing[dayKey] = null\n                }\n            });\n            that.setState({\n                calendarTimings: {\n                    ...dataObject,\n                },\n                timing: {...timing},\n                loading: false\n            });\n        };\n        const errorFn = function () {\n            that.setState({\n                loading: false\n            })\n        };\n        getAPI(interpolate(CALENDER_SETTINGS, [this.props.active_practiceId]), successFn, errorFn);\n    }\n\n    /** *\n     * Calenders Functions\n     * */\n\n\n    moveEvent({event, start, end, isAllDay: droppedOnAllDaySlot}) {\n        if (event.appointment.status != SCHEDULE_STATUS) {\n            displayMessage(WARNING_MSG_TYPE, \"Action Not Allowed\");\n            return true;\n        }\n        const {events} = this.state;\n        const idx = events.indexOf(event)\n        let {allDay} = event\n        const that = this;\n        if (!event.allDay && droppedOnAllDaySlot) {\n            allDay = true\n        } else if (event.allDay && !droppedOnAllDaySlot) {\n            allDay = false\n        }\n        const updatedEvent = {...event, start, end, allDay}\n        const nextEvents = [...events]\n        const changedEvent = {\n            // \"id\": event.id,\n            \"schedule_at\": moment(start).format(),\n            \"slot\": parseInt((end - start) / 60000)\n        };\n        const successFn = function (data) {\n            displayMessage(SUCCESS_MSG_TYPE, \"time changed\");\n            nextEvents.splice(idx, 1, updatedEvent);\n            that.setState({\n                events: nextEvents,\n            }, function () {\n                that.refreshFilterList();\n            })\n        }\n        const errorFn = function () {\n        }\n        confirm({\n            title: 'Are you sure to change the time of this appointment?',\n            // content: 'Some descriptions',\n            onOk() {\n                putAPI(interpolate(APPOINTMENT_API, [event.id]), changedEvent, successFn, errorFn);\n            },\n            onCancel() {\n            },\n        });\n\n    }\n\n    resizeEvent = ({event, start, end}) => {\n        if (event.appointment.status != SCHEDULE_STATUS) {\n            displayMessage(WARNING_MSG_TYPE, \"Action Not Allowed\");\n            return true;\n        }\n        const {events} = this.state\n        let changedEvent = {};\n        const that = this;\n        const nextEvents = [];\n        events.forEach((existingEvent) => {\n            if (existingEvent.id == event.id) {\n                changedEvent = {\n                    // \"id\": event.id,\n                    \"schedule_at\": moment(start).format(),\n                    \"slot\": parseInt((end - start) / 60000)\n                };\n            }\n        })\n\n        const successFn = function (data) {\n            displayMessage(SUCCESS_MSG_TYPE, \"time changed\");\n            events.forEach((existingEvent) => {\n                nextEvents.push(existingEvent.id == event.id\n                    ? {...existingEvent, start, end}\n                    : existingEvent)\n            });\n            that.setState({\n                events: nextEvents,\n            }, function () {\n                that.refreshFilterList();\n            })\n        }\n        const errorFn = function () {\n        }\n        confirm({\n            title: 'Are you sure to change the time of this appointment?',\n            // content: 'Some descriptions',\n            onOk() {\n                putAPI(interpolate(APPOINTMENT_API, [event.id]), changedEvent, successFn, errorFn);\n            },\n            onCancel() {\n                // console.log('Cancel');\n            },\n        });\n    }\n\n\n    onSelectSlot(value) {\n        const time = moment(value.start).format();\n        if (value.action == \"doubleClick\") {\n            this.setState({\n                startTime: time,\n                redirect: true\n            });\n            this.props.history.push('/calendar/create-appointment')\n        }\n    }\n\n\n    onSelectEvent(event, e) {\n        this.setState({\n            visiblePopover: true\n        })\n        this.props.history.push(`/patients/appointments/${  event.id}`)\n    }\n\n\n    /** *\n     * List and style settings\n     * */\n\n\n    appointmentList(start, end) {\n        const that = this;\n        that.setState({\n            loading: true\n        });\n        const successFn = function (data) {\n            that.setState(function (prevState) {\n                const previousEvent = prevState.events;\n                const newEvents = [];\n                const filteredEvent = [];\n                const doctorsAppointmentCount = {};\n                const categoriesAppointmentCount = {};\n                // newEvents.concat(previousEvent);\n                data.forEach(function (appointment) {\n                    const endtime = new moment(appointment.schedule_at).add(appointment.slot, 'minutes')\n                    const event = {\n                        appointment,\n                        start: new Date(moment(appointment.schedule_at)),\n                        end: new Date(endtime),\n                        title: appointment.patient.user.first_name,\n                        id: appointment.id,\n                        doctor: appointment.doctor,\n                        loading: false\n                    };\n\n                    if (doctorsAppointmentCount.ALL) {\n                        doctorsAppointmentCount.ALL.ALL += 1\n                        if (appointment.status == CANCELLED_STATUS) {\n                            doctorsAppointmentCount.ALL.CANCELLED += 1;\n                        }\n                    } else {\n                        doctorsAppointmentCount.ALL = {}\n                        doctorsAppointmentCount.ALL.ALL = 1;\n                        if (appointment.status == CANCELLED_STATUS) {\n                            doctorsAppointmentCount.ALL.CANCELLED = 1;\n                        } else {\n                            doctorsAppointmentCount.ALL.CANCELLED = 0;\n                        }\n                    }\n                    if (appointment.doctor && doctorsAppointmentCount[appointment.doctor]) {\n                        doctorsAppointmentCount[appointment.doctor].ALL += 1\n                        if (appointment.status == CANCELLED_STATUS) {\n                            doctorsAppointmentCount[appointment.doctor].CANCELLED += 1;\n                        }\n                    } else {\n                        doctorsAppointmentCount[appointment.doctor] = {}\n                        doctorsAppointmentCount[appointment.doctor].ALL = 1;\n                        if (appointment.status == CANCELLED_STATUS) {\n                            doctorsAppointmentCount[appointment.doctor].CANCELLED = 1;\n                        } else {\n                            doctorsAppointmentCount[appointment.doctor].CANCELLED = 0;\n                        }\n                    }\n                    if (appointment.category && doctorsAppointmentCount[appointment.category]) {\n                        categoriesAppointmentCount[appointment.category] += 1\n                    } else {\n                        categoriesAppointmentCount[appointment.category] = 1;\n                    }\n                    newEvents.push(event);\n                    if (!prevState.filterCancelledAppointment && event.appointment.status == CANCELLED_STATUS) {\n                        return true;\n                    }\n                    if ((prevState.filterType == 'DOCTOR' && prevState.selectedDoctor == 'ALL') || (prevState.filterType == 'CATEGORY' && prevState.selectedCategory == 'ALL')) {\n                        filteredEvent.push(event)\n                    } else if (prevState.filterType == 'DOCTOR' && event.doctor == prevState.selectedDoctor) {\n                        filteredEvent.push(event)\n                    } else if (prevState.filterType == 'CATEGORY' && event.appointment.category == prevState.selectedCategory) {\n                        filteredEvent.push(event)\n                    }\n\n                });\n                return {\n                    events: newEvents,\n                    filteredEvent,\n                    doctorsAppointmentCount: {...doctorsAppointmentCount},\n                    categoriesAppointmentCount: {...categoriesAppointmentCount, 'ALL': data.length},\n                    appointments: data,\n                    loading: false\n                }\n            });\n        }\n        const errorFn = function () {\n            that.setState({\n                loading: false\n            })\n        }\n        getAPI(interpolate(APPOINTMENT_PERPRACTICE_API, [this.props.active_practiceId]), successFn, errorFn, {\n            start: start.format('YYYY-MM-DD'),\n            end: end.format('YYYY-MM-DD')\n        });\n        this.blockedCalendarTiming(start, end)\n    }\n\n    blockedCalendarTiming = (start, end) => {\n        const that = this;\n        const successFn = function (data) {\n            that.setState({\n                blockedCalendar: data\n            })\n        }\n        const errorFn = function () {\n\n        }\n        getAPI(BLOCK_CALENDAR, successFn, errorFn, {\n            practice: this.props.active_practiceId,\n            cal_fdate: start.format(),\n            cal_tdate: end.format()\n        })\n    };\n\n    eventStyleGetter(event, start, end, isSelected) {\n        const {doctor} = event;\n        const {category} = event.appointment;\n        let color_object = null;\n        const style = {\n            borderRadius: '0px',\n            opacity: 0.8,\n            border: '5px',\n            color: 'white',\n            display: 'block'\n        };\n        if (event.appointment.status == CANCELLED_STATUS) {\n            style.backgroundColor = '#aaa';\n            style.textDecoration = 'line-through';\n        } else {\n            if (this.state.filterType == 'DOCTOR') {\n                if (doctor && this.state.doctors_object && this.state.doctors_object[doctor]) {\n                    color_object = this.state.doctors_object[doctor].calendar_colour;\n                } else {\n                    color_object = 'black';\n                }\n            } else if (this.state.filterType == 'CATEGORY') {\n                if (category && this.state.categories_object && this.state.categories_object[category]) {\n                    color_object = `#${  this.state.categories_object[category].calendar_colour}`;\n                } else {\n                    color_object = 'black';\n                }\n            }\n            style.backgroundColor = color_object;\n        }\n        return {\n            style\n        };\n    }\n\n    onRangeChange = (e) => {\n        if (e.start && e.end) {\n            this.appointmentList(moment(e.start), moment(e.end));\n            if (moment(e.start).date() == 1) {\n                this.setState({\n                    selectedDate: moment(e.start)\n                })\n            } else {\n                const newDate = moment(e.start);\n                this.setState({\n                    selectedDate: newDate.month(newDate.month() + 1).date(1)\n                })\n            }\n        } else if (e.length) {\n            if (e.length == 7) {\n                this.appointmentList(moment(e[0]).subtract(1, 'day'), moment(e[e.length - 1]).subtract(1, 'day'));\n            } else {\n                this.appointmentList(moment(e[0]), moment(e[e.length - 1]));\n            }\n            this.setState({\n                selectedDate: moment(e[0])\n            });\n        }\n    }\n\n    onSelectedDateChange = (e) => {\n        const that = this;\n        this.setState({\n            selectedDate: moment(e)\n        },function(){\n            that.appointmentList(moment(e).startOf('day'),moment(e).endOf('day'));\n        });\n    }\n\n    setFilterType = (e) => {\n        const that = this;\n        this.setState({\n            filterType: e.key,\n            selectedDoctor: 'ALL',\n            selectedCategory: 'ALL'\n        }, function () {\n            if (e.key == 'DOCTOR') {\n                that.changeFilter('selectedDoctor', 'ALL')\n            } else if (e.key == 'CATEGORY') {\n                that.changeFilter('selectedCategory', 'ALL')\n            }\n        })\n    }\n\n    setFilter = (type, value) => {\n        const that = this;\n        this.setState({\n            [type]: value\n        }, function () {\n            saveCalendarSettings(type, value);\n            that.changeFilter('tempKey', 'ALL')\n        })\n    }\n\n    refreshFilterList = () => {\n        const stateValues = this.state;\n        if (stateValues.filterType == 'DOCTOR') {\n            this.changeFilter('selectedDoctor', stateValues.selectedDoctor)\n        } else if (stateValues.filterType == 'CATEGORY') {\n            this.changeFilter('selectedCategory', stateValues.selectedCategory)\n        }\n    }\n\n    changeFilter = (type, value) => {\n        if (type == \"selectedDoctor\" && value != 'ALL') {\n            this.loadDoctorTiming(value)\n        }\n        this.setState(function (prevState) {\n            const filteredEvent = [];\n            prevState.events.forEach(function (event) {\n                if (!prevState.filterCancelledAppointment && event.appointment.status == CANCELLED_STATUS) {\n                    return true;\n                }\n                if (value == 'ALL') {\n                    filteredEvent.push(event)\n                } else if (type == \"selectedDoctor\" && event.doctor == value) {\n                    filteredEvent.push(event)\n                } else if (type == \"selectedCategory\" && event.appointment.category == value) {\n                    filteredEvent.push(event)\n                }\n            })\n            return {\n                [type]: value,\n                filteredEvent\n            }\n        })\n    };\n\n    changeState = (type, value) => {\n        this.setState({\n            [type]: value\n        }, function () {\n            saveCalendarSettings(type, value)\n        })\n    }\n\n    loadDoctorTiming = (id) => {\n        const that = this;\n        const successFn = function (data) {\n            let dataObject = {};\n            if (data.length)\n                dataObject = data[0];\n            const timing = {};\n            DAY_KEYS.forEach(function (dayKey) {\n                timing[dayKey] = {};\n                if (dataObject.visting_hour_same_week) {\n                    timing[dayKey].startTime = moment(dataObject.first_start_time, 'HH:mm:ss');\n                    timing[dayKey].endTime = moment(dataObject.second_end_time, 'HH:mm:ss');\n                    if (dataObject.is_two_sessions) {\n                        timing[dayKey].lunch = true;\n                        timing[dayKey].lunchStartTime = moment(dataObject.first_end_time, 'HH:mm:ss');\n                        timing[dayKey].lunchEndTime = moment(dataObject.second_start_time, 'HH:mm:ss');\n                    } else {\n                        timing[dayKey].lunch = false\n                    }\n                } else if (dataObject[dayKey]) {\n                    timing[dayKey].startTime = moment(dataObject[`first_start_time_${dayKey}`], 'HH:mm:ss');\n                    timing[dayKey].endTime = moment(dataObject[`second_end_time_${dayKey}`], 'HH:mm:ss');\n                    if (dataObject[`is_two_sessions_${dayKey}`]) {\n                        timing[dayKey].lunch = true;\n                        timing[dayKey].lunchStartTime = moment(dataObject[`first_end_time_${dayKey}`], 'HH:mm:ss');\n                        timing[dayKey].lunchEndTime = moment(dataObject[`second_start_time_${dayKey}`], 'HH:mm:ss');\n                    } else {\n                        timing[dayKey].lunch = false\n                    }\n                } else {\n                    timing[dayKey] = null\n                }\n            });\n            that.setState(function (prevState) {\n                return {doctorTiming: {...prevState.doctorTiming, [id]: {...timing}}}\n            });\n        }\n        const errorFn = function () {\n\n        };\n        getAPI(interpolate(DOCTOR_VISIT_TIMING_API, [this.props.active_practiceId]), successFn, errorFn, {\n            doctor: id\n        });\n    }\n\n    render() {\n        const that = this;\n        let {startTime} = this.state;\n        // let startTime = null;\n        let endTime = null;\n        if (this.state.calendarTimings) {\n            // console.log(new Date(new moment(this.state.calendarTimings.start_time, 'HH:mm:ss')));\n            startTime = new Date(new moment(this.state.calendarTimings.start_time, 'HH:mm:ss'));\n            endTime = new Date(new moment(this.state.calendarTimings.end_time, 'HH:mm:ss'))\n\n        }\n        const summaryEvents = [];\n        // if(this.state.calendarType==)\n        return (\n<Content className=\"main-container\">\n                <div style={{padding: '5px'}}>\n                    <Switch>\n\n                        <Route\n                          exact\n                          path=\"/calendar/create-appointment\"\n                          render={(route) => (this.props.activePracticePermissions.AddAppointment || this.props.allowAllPermissions ? (\n                                   <CreateAppointment\n                                     {...this.state}\n                                     {...this.props}\n                                     {...route}\n                                     startTime={this.state.startTime}\n                                   />\n                                 ) :\n                                   <PermissionDenied />)}\n                        />\n\n                        <Route\n                          exact\n                          path=\"/calendar/:appointmentid/edit-appointment\"\n                          render={(route) => (this.props.activePracticePermissions.EditAppointment || this.props.allowAllPermissions ? (\n                                   <CreateAppointment\n                                     {...this.state}\n                                     {...this.props}\n                                     {...route}\n                                     startTime={this.state.startTime}\n                                   />\n                                 ) :\n                                   <PermissionDenied />)}\n                        />\n\n                        <Route>\n\n                            <div style={{backgroundColor: '#fff', padding: '5px 10px'}}>\n                                <Row gutter={16}>\n                                    <Col span={3}>\n\n                                        <DatePicker\n                                          onChange={this.onSelectedDateChange}\n                                          value={this.state.selectedDate}\n                                          format=\"DD-MM-YYYY\"\n                                          style={{margin: 5}}\n                                          allowClear={false}\n                                        />\n                                        {this.state.calendarType == 'APPOINTMENTS' ? (\n                                            <div>\n                                                {that.props.activePracticePermissions.BlockCalendar || that.props.allowAllPermissions ? (\n                                                    <Button block style={{margin: 5}}>\n                                                        <Link to=\"/calendar/blockcalendar\">\n                                                            <Icon type=\"stop\" /> Block Calendar\n                                                        </Link>\n                                                    </Button>\n                                                  ) : null}\n                                                <Dropdown\n                                                  trigger=\"click\"\n                                                  overlay={(\n                                                    <Menu onClick={this.setFilterType}>\n                                                        <Menu.Item key=\"DOCTOR\">\n                                                            DOCTOR\n                                                        </Menu.Item>\n                                                        <Menu.Item key=\"CATEGORY\">\n                                                            CATEGORY\n                                                        </Menu.Item>\n                                                    </Menu>\n                                                  )}\n                                                >\n                                                    <Button block style={{margin: 5}}>\n                                                        {this.state.filterType} <Icon type=\"caret-down\" />\n                                                    </Button>\n                                                </Dropdown>\n                                            </div>\n                                          ) : null}\n                                        <Spin spinning={this.state.doctorLoading}>\n                                            {this.state.filterType == 'DOCTOR' ? (\n                                                <Menu\n                                                  selectedKeys={[this.state.selectedDoctor]}\n                                                  size=\"small\"\n                                                  onClick={(e) => this.changeFilter('selectedDoctor', e.key)}\n                                                >\n                                                    {this.state.calendarType == 'APPOINTMENTS' ? (\n                                                        <Menu.Item\n                                                          key=\"ALL\"\n                                                          style={{\n                                                            marginBottom: 2,\n                                                            textOverflow: \"ellipsis\",\n                                                            borderLeft: '5px solid black',\n                                                            borderRight: 'none'\n                                                        }}\n                                                        >\n                                                            <span>({this.state.doctorsAppointmentCount.ALL ? (!this.state.filterCancelledAppointment ? (this.state.doctorsAppointmentCount.ALL.ALL - this.state.doctorsAppointmentCount.ALL.CANCELLED) : this.state.doctorsAppointmentCount.ALL.ALL) : 0}) All Doctors</span>\n                                                        </Menu.Item>\n                                                      ) : null}\n                                                    {this.state.practice_doctors.map(item => (\n                                                        <Menu.Item\n                                                          key={item.id}\n                                                          style={{\n                                                            textOverflow: \"ellipsis\",\n                                                            borderRight: 'none',\n                                                            borderLeft: `5px solid ${  item.calendar_colour}`,\n                                                            backgroundColor: this.state.selectedDoctor == item.id ? item.calendar_colour : 'inherit',\n                                                            color: this.state.selectedDoctor == item.id ? 'white' : 'inherit',\n                                                            fontWeight: this.state.selectedDoctor == item.id ? 'bold' : 'inherit',\n                                                        }}\n                                                        >\n                                                            <span>({this.state.doctorsAppointmentCount[item.id] ? (!this.state.filterCancelledAppointment ? (this.state.doctorsAppointmentCount[item.id].ALL - this.state.doctorsAppointmentCount[item.id].CANCELLED) : this.state.doctorsAppointmentCount[item.id].ALL) : 0}) {item.user.first_name}</span>\n                                                        </Menu.Item>\n                                                      )\n                                                    )}\n                                                </Menu>\n                                              )\n                                                : (\n<Menu\n  selectedKeys={[this.state.selectedCategory]}\n  size=\"small\"\n  onClick={(e) => this.changeFilter('selectedCategory', e.key)}\n>\n                                                    <Menu.Item\n                                                      key=\"ALL\"\n                                                      style={{\n                                                        marginBottom: 2,\n                                                        textOverflow: \"ellipsis\",\n                                                        borderLeft: '5px solid black',\n                                                        borderRight: 'none'\n                                                    }}\n                                                    >\n                                                        <span>({this.state.categoriesAppointmentCount.ALL ? this.state.categoriesAppointmentCount.ALL : 0}) All Categories</span>\n                                                    </Menu.Item>\n                                                    {this.state.practice_categories.map(item => (\n                                                        <Menu.Item\n                                                          key={item.id}\n                                                          style={{\n                                                            textOverflow: \"ellipsis\",\n                                                            borderRight: 'none',\n                                                            borderLeft: `5px solid #${  item.calendar_colour}`,\n                                                            backgroundColor: this.state.selectedCategory == item.id ? `#${  item.calendar_colour}` : 'inherit',\n                                                            color: this.state.selectedCategory == item.id ? 'white' : 'inherit',\n                                                            fontWeight: this.state.selectedCategory == item.id ? 'bold' : 'inherit',\n                                                        }}\n                                                        >\n                                                            <span>({this.state.categoriesAppointmentCount[item.id] ? this.state.categoriesAppointmentCount[item.id] : 0}) {item.name}</span>\n                                                        </Menu.Item>\n                                                      )\n                                                    )}\n</Menu>\n)}\n                                            <div style={{marginTop: 16}}>\n                                                <Radio.Group\n                                                  size=\"small\"\n                                                  checked={this.state.calendarType}\n                                                  defaultValue={this.state.calendarType}\n                                                  buttonStyle=\"solid\"\n                                                  onChange={(e) => this.changeCalendarType(e.target.value)}\n                                                >\n                                                    <Radio.Button value=\"APPOINTMENTS\">\n                                                        <small>Appointments</small>\n                                                    </Radio.Button>\n                                                    <Radio.Button value=\"AVAILABILITY\">\n                                                        <small>Availability</small>\n                                                    </Radio.Button>\n                                                </Radio.Group>\n                                            </div>\n                                            <div style={{position: 'fixed', bottom: 10, zIndex: 9}}>\n                                                {this.state.openMorePanel ? (\n                                                    <div style={{\n                                                        // width: 100,\n                                                        boxShadow: '0 2px 4px #111',\n                                                        border: '1px solid #bbb',\n                                                        borderRadius: 2,\n                                                        padding: 5,\n                                                        backgroundColor: 'white'\n                                                    }}\n                                                    >\n                                                        <ul style={{listStyle: 'none', paddingInlineStart: 0}}>\n                                                            <li>\n                                                                <Checkbox\n                                                                  checked={this.state.showCalendarEvents}\n                                                                  onChange={(e) => that.changeState('showCalendarEvents', e.target.checked)}\n                                                                >\n                                                                    <small>Events</small>\n                                                                </Checkbox>\n                                                            </li>\n                                                            <li>\n                                                                <Checkbox\n                                                                  checked={this.state.showAppointments}\n                                                                  onChange={(e) => that.changeState('showAppointments', e.target.checked)}\n                                                                >\n                                                                    <small>Appointments</small>\n                                                                </Checkbox>\n                                                            </li>\n                                                            <li>\n                                                                <Checkbox\n                                                                  checked={this.state.show24HourCalendar}\n                                                                  onChange={(e) => that.changeState('show24HourCalendar', e.target.checked)}\n                                                                >\n                                                                    <small>24 Hours</small>\n                                                                </Checkbox>\n                                                            </li>\n                                                            <li>\n                                                                <Checkbox\n                                                                  checked={this.state.filterCancelledAppointment}\n                                                                  onChange={(e) => that.setFilter('filterCancelledAppointment', e.target.checked)}\n                                                                >\n                                                                    <small>Cancellled Appointment</small>\n                                                                </Checkbox>\n                                                            </li>\n                                                            <li>\n                                                                <Divider />\n                                                            </li>\n                                                            <li>\n                                                                <Link to=\"/settings/clinics-staff#staff\">\n                                                                    <small>Add Doctor</small>\n                                                                </Link>\n                                                            </li>\n                                                            <li>\n                                                                <Link to=\"/settings/calendarsettings#timings\">\n                                                                    <small> Customize Calendar</small>\n                                                                </Link>\n                                                            </li>\n                                                            <li>\n                                                                <a>\n                                                                    <small>Resync</small>\n                                                                </a>\n                                                                <Button\n                                                                  onClick={() => this.changeState('openMorePanel', false)}\n                                                                  shape=\"circle\"\n                                                                  size=\"small\"\n                                                                  type=\"danger\"\n                                                                  icon=\"close\"\n                                                                  style={{float: 'right'}}\n                                                                />\n                                                            </li>\n                                                        </ul>\n\n                                                    </div>\n                                                  ) : (\n                                                    <a onClick={() => this.changeState('openMorePanel', true)}>\n                                                        More <Icon type=\"caret-down\" />\n                                                    </a>\n                                                  )}\n                                            </div>\n                                        </Spin>\n                                    </Col>\n                                    {this.state.calendarType == 'APPOINTMENTS' ? (\n                                        <div>\n                                            <Col span={16}>\n                                                <Spin size=\"large\" spinning={this.state.loading}>\n                                                    <DragAndDropCalendar\n                                                      key=\"APPOINTMENTS\"\n                                                      defaultDate={new Date()}\n                                                      localizer={localizer}\n                                                      defaultView=\"day\"\n                                                      step={10}\n                                                      timeslots={1}\n                                                      truncateEvents={false}\n                                                      events={this.state.showAppointments ? this.state.filteredEvent : []}\n\n                                                      onEventDrop={this.moveEvent}\n                                                      onEventResize={this.resizeEvent}\n                                                      resizable\n                                                      selectable\n                                                      popup={this.onSelectEvent}\n                                                      onSelectSlot={this.onSelectSlot}\n                                                        // onSelectEvent={this.onSelectEvent}\n                                                      views={{month: true, week: MyWeek, day: true, agenda: true}}\n                                                      style={{height: \"calc(100vh - 85px)\"}}\n                                                      eventPropGetter={(this.eventStyleGetter)}\n                                                      date={new Date(this.state.selectedDate.format())}\n                                                      onRangeChange={this.onRangeChange}\n                                                      components={{\n                                                            event (option) {\n                                                                return <EventComponent {...option} {...that.props} />\n                                                            },\n                                                            timeSlotWrapper (options) {\n                                                                return (\n<TimeSlotWrapper\n  {...options}\n  key={options.value.toString()}\n  blockedCalendar={that.state.blockedCalendar}\n  calendarTimings={that.state.timing}\n  doctorTimings={that.state.doctorTiming[that.state.selectedDoctor]}\n  filterType={that.state.filterType}\n  selectedDoctor={that.state.selectedDoctor}\n  showCalendarEvents={that.state.showCalendarEvents}\n/>\n)\n                                                            },\n                                                        }}\n                                                    />\n\n                                                </Spin>\n                                            </Col>\n                                            <Col span={5}>\n                                                <CalendarRightPanel\n                                                  {...this.props}\n                                                  {...this.state}\n                                                  selectedDate={this.state.selectedDate}\n                                                  key={moment(this.state.selectedDate).format('l')}\n                                                />\n                                            </Col>\n                                        </div>\n                                      )\n                                        : (\n                                        <Col span={21}>\n                                            <DragAndDropCalendar\n                                              key=\"AVAILABILITY\"\n                                              defaultDate={new Date()}\n                                              localizer={localizer}\n                                              defaultView=\"day\"\n                                              step={10}\n                                              timeslots={1}\n                                              truncateEvents={false}\n                                              events={this.state.showAppointments ? this.state.filteredEvent : []}\n                                              onEventDrop={this.moveEvent}\n                                              onEventResize={this.resizeEvent}\n                                              resizable\n                                              selectable\n                                              popup={this.onSelectEvent}\n                                              onSelectSlot={this.onSelectSlot}\n                                                // onSelectEvent={this.onSelectEvent}\n                                              views={{week: true, day: true}}\n                                              style={{height: \"calc(100vh - 85px)\"}}\n                                              eventPropGetter={(this.eventStyleGetter)}\n                                              date={new Date(this.state.selectedDate.format())}\n                                              onRangeChange={this.onRangeChange}\n                                              components={{\n                                                    event (option) {\n                                                        return <EventComponent {...option} {...that.props} />\n                                                    },\n                                                    timeSlotWrapper (options) {\n                                                        return (\n<TimeSlotWrapper\n  {...options}\n  key={options.value.toString()}\n  blockedCalendar={that.state.blockedCalendar}\n  calendarTimings={that.state.timing}\n  doctorTimings={that.state.doctorTiming[that.state.selectedDoctor]}\n  filterType={that.state.filterType}\n  selectedDoctor={that.state.selectedDoctor}\n  showCalendarEvents={that.state.showCalendarEvents}\n/>\n)\n                                                    },\n                                                }}\n                                            />\n                                        </Col>\n                                      )}\n                                </Row>\n                            </div>\n                        </Route>\n\n                    </Switch>\n                </div>\n</Content>\n        );\n    }\n}\n\nexport default App;\n\n\nclass MyWeek\n    extends React\n        .Component {\n    render() {\n        const {date} = this.props\n        const range = MyWeek.range(date)\n\n        return <TimeGrid {...this.props} range={range} eventOffset={15} />\n    }\n}\n\nMyWeek.range = date => {\n    const start = dates.add(date, -1, 'day')\n    const end = dates.add(start, 6, 'day')\n    let current = start\n    const range = []\n    while (dates.lte(current, end, 'day')) {\n        range.push(current)\n        current = dates.add(current, 1, 'day')\n    }\n    return range\n}\n\nMyWeek.navigate = (date, action) => {\n    switch (action) {\n        case Navigate.PREVIOUS:\n            return dates.add(date, -3, 'day')\n\n        case Navigate.NEXT:\n            return dates.add(date, 3, 'day')\n\n        default:\n            return date\n    }\n}\n\nMyWeek.title = date => {\n    return ` ${date.toLocaleDateString()}`\n}\n\n\nfunction MonthEventWrapper(props) {\n    return props.children;\n}\n"],"sourceRoot":""}