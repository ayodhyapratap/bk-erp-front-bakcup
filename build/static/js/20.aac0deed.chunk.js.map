{"version":3,"sources":["app/components/inventory/vendor/AddVendor.js","app/components/inventory/vendor/VendorList.js","app/components/inventory/expenses/AddExpenses.js","app/components/inventory/expenses/ExpensesList.js","app/components/inventory/manufacture/AddManufacture.js","app/components/inventory/manufacture/ManufactureList.js","app/components/inventory/labs/AddLab.js","app/components/inventory/labs/LabList.js","app/components/inventory/activities/ActivityList.js","app/components/inventory/inventoryItem/AddorEditInventoryItem.js","app/components/inventory/inventoryItem/AddOrConsumeStock.js","app/components/inventory/inventoryItem/InventoryItemList.js","app/components/inventory/InventoryHome.js","app/utils/export.js","app/components/common/CustomizedTable.js","app/components/common/InfiniteFeedLoaderButton.js"],"names":["AddVendor","props","changeRedirect","redirectVar","state","redirect","setState","editData","this","match","params","id","loadData","that","getAPI","interpolate","SINGLE_VENDOR_API","data","editformProp","fields","label","key","initialValue","name","type","INPUT_FIELD","required","description","successFn","displayMessage","SUCCESS_MSG_TYPE","errorFn","action","method","TestFormLayout","create","DynamicFieldsForm","formProp","history","replace","VENDOR_API","active_practiceId","defaultValues","exact","path","render","route","title","to","React","Component","VendorList","vendors","bind","value","reqData","console","log","putAPI","vendorsColoumns","dataIndex","record","onConfirm","deleteVendor","okText","cancelText","disabled","activePracticePermissions","DeleteVendor","EditVendor","allowAllPermissions","PermissionDenied","extra","CustomizedTable","columns","dataSource","hideReport","ExportVendor","AddExpenses","loadExpensetypes","loadPaymentModes","loadVendors","PAYMENT_MODES","paymentModes","SINGLE_EXPENSES_API","EXPENSE_TYPE","expense_types","paymentModesOptions","forEach","drug","push","mode","expenseTypesOptions","vendorsOptions","expense_date","moment","DATE_PICKER","format","amount","NUMBER_FIELD","follow","SELECT_FIELD","options","expense_type","payment_mode","bank_name","TEXT_FIELD","minRows","maxRows","remark","EXPENSES_API","ExpensesList","changeExpenseFilters","loading","expenses","practice","selectedPaymentMode","selectedExpenseType","start","selectedStartDate","end","selectedEndDate","expenseTypes","subtract","loadExpenseTypes","deleted","deletedExpenses","deletedLoading","is_active","showDeleted","expenseColoumns","export","text","EditExpenses","DeleteExpenses","deleteObject","gutter","style","marginBottom","span","textAlign","width","onChange","Option","map","item","allowClear","AddManufacture","SINGLE_MANUFACTURER_API","MANUFACTURER_API","EditManufacturer","ManufactureList","manufactures","deleteManufacture","reqDate","manufactureColoumns","DeleteManufacturer","ExportManufacturer","AddLab","getPatientListData","PATIENTS_LIST","patientListData","patientOptions","length","job_no","doctor_name","status","due_date","patient","editBlogData","SINGLE_LAB_API","LAB_API","LabList","lab","ActivityList","activity","loadActivityLog","ACTIVITY_API","CheckboxGroup","Group","AddorEditInventoryItem","loadDrugType","DRUG_TYPE_API","drugTypeList","onChangeHandeler","e","setFormParams","handleSubmit","preventDefault","form","validateFields","err","formData","retail_without_tax","retail_price","net_price","undefined","editInventoryItem","SINGLE_INVENTORY_ITEM_API","postAPI","INVENTORY_ITEM_API","changeNetPrice","getFieldsValue","setFields","setTimeout","values","retail_with_tax","totalTaxAmount","taxes","taxid","taxes_list","taxObj","tax_value","retailPrice","toFixed","manufacture_list","vendor_list","drugUnitList","productMargin","loadTaxes","loadManufactureList","loadVendorList","loadDrugUnit","loadProductMargin","PRODUCT_MARGIN","TAXES","prevState","totalTax","taxes_data","tax","item_type","DRUG_UNIT_API","taxesOption","manufacturerOption","manufacturer","vendorOption","vendor","getFieldDecorator","formItemLayout","labelCol","wrapperCol","onSubmit","Item","rules","message","REQUIRED_FIELD_MESSAGE","placeholder","code","manufacturerType","editPrescreption","manufacturer_extra","onClick","option","stocking_unit","re_order_level","className","margin","INVENTORY_ITEM_TYPE","DRUG","valuePropName","perscribe_this","drugType","drug_type_extra","drug_type","strength","drugUnit","unit_type_extra","stength_unit","instructions","SUPPLIES","EQUIPMENT","htmlType","goBack","Search","MonthPicker","TabPane","tableFormFields","_id","quantity","batch","AddOrConsumeStock","changeSupplierType","customSupplier","loadItemsList","page","recData","items","maintain_inventory","searchStrings","item_name","remove","k","newTableFormValues","tableFormValues","formValue","add","randId","Math","random","keyCode","itemObject","item_add_type","classType","inventory_item","remarks","batch_number","date","bill_number","bill_file","file","response","image_path","ADD_STOCK","expiry_date","unit_cost","total_cost","supplier","supplier_name","CONSUME_STOCK","type_of_consumption","isValid","BULK_STOCK_ENTRY","searchValues","filterValues","filteredItemOfGivenType","toString","toLowerCase","includes","filteredItems","storeValue","tempValues","setFieldsValue","item_type_stock","addItemThroughQR","loadingQr","qrSplitted","split","SEARCH_THROUGH_QR","randomId","getFieldValue","flag","row","fieldsToBeSet","qrValue","qr","setQrValue","target","maxQuantityforConsume","supplierList","loadSupplierList","loadInventoryItemList","SUPPLIER_API","recordId","newMaxQuantityforConsume","item_stock","stock","xs","sm","singleUploadprops","makeURL","FILE_UPLOAD_API","headers","authorization","info","success","error","consumeRow","concat","validateTrigger","min","itemStock","Date","changeMaxQuantityforConsume","max","spinning","onSearch","size","itemType","tab","backgroundColor","padding","itemLayout","results","renderItem","Meta","total_quantity","shape","icon","previous","next","TYPE_OF_CONSUMPTION","pagination","bordered","rowKey","offsetBottom","TextArea","offset","reduce","total","InventoryItemList","loadInventoryTotal","INVENTORY_STOCK_TOTAL_COST","inventoryTotal","total_price","changeFilter","changeInventoryFilters","inventoryItemModalOpen","inventoryModal","inventoryItemObj","inventoryItemModalClose","inventoryItems","inventoryItemList","stockModalVisibility","itemTypeFilter","itemStockFilter","nextItemPage","showAddOrConsumeModal","setActionType","excelExport","pdfExport","current","reqParams","sort","ASCENDING_ORDER","on","filter_type","filterItemName","filterItemCode","filterMLM","itemId","actionType","msg","startLoadingMessage","INVENTORY_ITEM_EXPORT","stopLoadingMessage","report_csv","window","open","BACKEND_BASE_URL","ERROR_MSG_TYPE","report_pdf","taxesdata","manufacturerData","vendorData","color","itemTypeStock","totalStock","currentDate","Number","isInteger","manufacturer_data","a","b","inventoryItemColumn","index","AddInventoryItem","AddInventoryStock","ConsumeInventoryStock","defaultValue","buttonStyle","Button","prefix","float","parseInt","InfiniteFeedLoaderButton","loaderFunction","hidden","visible","onOk","onCancel","footer","Content","InventoryHome","minHeight","ViewVendor","ViewExpenses","ViewManufacturer","Labs","ViewActivities","ViewInventory","makeCSVString","dataArray","printColumn","str","line","column","join","dataRow","downloadCSV","fileName","cCode","fName","bArr","i","charCodeAt","blob","Blob","Uint8Array","navigator","msSaveBlob","link","document","createElement","download","url","URL","createObjectURL","setAttribute","visibility","body","appendChild","click","removeChild","revokeObjectURL","getColumnSearchProps","filterDropdown","setSelectedKeys","selectedKeys","confirm","clearFilters","ref","node","searchInput","onPressEnter","handleSearch","display","marginRight","handleReset","filterIcon","filtered","onFilter","onFilterDropdownVisibleChange","select","highlightStyle","searchWords","searchText","autoEscape","textToHighlight","newProps","excelColumns","hideExport","dataKey","dataArrayForExcel","dataObjectToPush","pdf","jsPDF","addPDFHeader","rows","Object","autoTable","top","startY","autoTableEndPosY","headerStyle","overflow","bodyStyles","setFontSize","addPDFFooter","save","exportToPDF","exportToExcel","position","pageSizeOptions","showSizeChanger","showQuickJumper","showTotal","range","startLoading","startMakingExtraLabels","extraLoadingLabel"],"mappings":"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","file":"static/js/20.aac0deed.chunk.js","sourcesContent":["import {Card, Form, Row} from \"antd\";\nimport React from \"react\";\nimport {Route, Redirect} from \"react-router-dom\";\nimport {\n    INPUT_FIELD,\n    SUCCESS_MSG_TYPE,\n} from \"../../../constants/dataKeys\";\nimport DynamicFieldsForm from \"../../common/DynamicFieldsForm\";\nimport {displayMessage, getAPI, interpolate} from \"../../../utils/common\";\nimport {\n    SINGLE_VENDOR_API, VENDOR_API\n} from \"../../../constants/api\";\n\n\nexport default class AddVendor extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            editData: this.props.editData ? this.props.editData : null\n        }\n    }\n\n    changeRedirect = () => {\n        const redirectVar = this.state.redirect;\n        this.setState({\n            redirect: !redirectVar,\n        });\n    }\n\n    componentDidMount() {\n        if (this.props.match.params.id) {\n            if (!this.state.editData) {\n                this.loadData();\n            }\n        }\n    }\n\n    loadData() {\n        const that = this;\n        const successFn = function (data) {\n            that.setState({\n                editData: data,\n            })\n        }\n        const errorFn = function () {\n\n        }\n        getAPI(interpolate(SINGLE_VENDOR_API, [this.props.match.params.id]), successFn, errorFn);\n\n\n    }\n\n\n    render() {\n        const that = this;\n        const fields = [{\n            label: \"Name\",\n            key: \"name\",\n            initialValue: this.state.editData ? this.state.editData.name : null,\n            type: INPUT_FIELD,\n            required: true\n        }, {\n            label: \"Description\",\n            key: \"description\",\n            initialValue: this.state.editData ? this.state.editData.description : null,\n            type: INPUT_FIELD\n        }];\n\n\n        let editformProp;\n        if (this.state.editData) {\n            editformProp = {\n                successFn (data) {\n                    displayMessage(SUCCESS_MSG_TYPE, \"success\");\n                    that.props.loadData();\n                },\n                errorFn () {\n\n                },\n                action: interpolate(SINGLE_VENDOR_API, [this.props.match.params.id]),\n                method: \"put\",\n            }\n        }\n        const TestFormLayout = Form.create()(DynamicFieldsForm);\n\n        const formProp = {\n            successFn (data) {\n                displayMessage(SUCCESS_MSG_TYPE, \"success\");\n                that.props.loadData();\n                if (that.props.history){\n                    that.props.history.replace(\"/inventory/vendor\");\n                }\n            },\n            errorFn () {\n\n            },\n            action: interpolate(VENDOR_API, [that.props.active_practiceId]),\n            method: \"post\",\n        }\n        const defaultValues = [{\"key\": \"practice\", \"value\": this.props.active_practiceId}];\n        return (\n<Row>\n            <Card>\n                <Route\n                  exact\n                  path='/inventory/vendor/edit/:id'\n                  render={(route) => (this.props.match.params.id ? (\n                           <TestFormLayout\n                             defaultValues={defaultValues}\n                             title=\"Edit Vendor\"\n                             changeRedirect={this.changeRedirect}\n                             formProp={editformProp}\n                             {...route}\n                             fields={fields}\n                           />\n                         ) : <Redirect to=\"/inventory/vendor\" />)}\n                />\n                <Route\n                  exact\n                  path='/inventory/vendor/add'\n                  render={(route) => (\n<TestFormLayout\n  title=\"Add Vendor\"\n  changeRedirect={this.changeRedirect}\n  {...route}\n  formProp={formProp}\n  fields={fields}\n/>\n)}\n                />\n            </Card>\n            {this.state.redirect && <Redirect to=\"/inventory/vendor\" />}\n</Row>\n)\n\n    }\n}\n","import {Button, Card, Icon,Popconfirm,Divider} from \"antd\";\nimport React from \"react\";\nimport {Route, Switch} from \"react-router\";\nimport {Link} from \"react-router-dom\";\nimport {getAPI, interpolate,putAPI} from \"../../../utils/common\";\nimport {VENDOR_API ,SINGLE_VENDOR_API}from \"../../../constants/api\";\nimport AddVendor from \"./AddVendor\";\nimport CustomizedTable from \"../../common/CustomizedTable\";\nimport PermissionDenied from \"../../common/errors/PermissionDenied\";\n\nexport default class VendorList extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            active_practiceId: this.props.active_practiceId,\n            vendors: null\n        };\n        this.loadData = this.loadData.bind(this);\n    }\n\n    componentDidMount() {\n        this.loadData();\n    }\n\n    loadData() {\n        const that = this;\n        const successFn = function (data) {\n            that.setState({\n                vendors: data\n            })\n        }\n        const errorFn = function () {\n\n        }\n        getAPI(interpolate(VENDOR_API, [this.props.active_practiceId]), successFn, errorFn);\n    }\n\n    deleteVendor(value){\n        const that = this;\n        const reqData={...value, 'is_active':false}\n        console.log(\"is_active\",reqData);\n        const successFn = function (data) {\n            that.loadData();\n            console.log(\"Deleted\");\n        }\n        const errorFn = function () {\n        };\n        putAPI(interpolate(SINGLE_VENDOR_API, [value]),reqData, successFn, errorFn);\n    }\n\n    render() {\n        const that = this;\n        const vendorsColoumns = [{\n            title: 'Name',\n            key: 'name',\n            dataIndex: 'name'\n        }, {\n            title: 'Details',\n            key: 'details',\n            dataIndex: 'description'\n        }, {\n            title: 'Action',\n            render (record) {\n                return (\n<div>\n                    <Link to={`/inventory/vendor/edit/${  record.id}`}>Edit</Link>\n                    <Divider type=\"vertical\" />\n                    <Popconfirm\n                      title=\"Are you sure delete this item?\"\n                      onConfirm={() => that.deleteVendor(record.id)}\n                      okText=\"Yes\"\n                      cancelText=\"No\"\n                    >\n                       <a disabled={!that.props.activePracticePermissions.DeleteVendor}>Delete</a>\n                    </Popconfirm>\n\n</div>\n)\n            }\n        }];\n        return (\n<div><Switch>\n            <Route\n              exact\n              path='/inventory/vendor/add'\n              render={(route) =>(that.props.activePracticePermissions.EditVendor || that.props.allowAllPermissions ? <AddVendor {...this.state} {...route} loadData={that.loadData} />:<PermissionDenied />)}\n            />\n            <Route\n              exact\n              path='/inventory/vendor/edit/:id'\n              render={(route) =>(that.props.activePracticePermissions.EditVendor || that.props.allowAllPermissions ? <AddVendor {...this.state} {...route} loadData={that.loadData} />:<PermissionDenied />)}\n            />\n            <Card\n              title=\"Vendors\"\n              extra={(that.props.activePracticePermissions.EditVendor?(\n<Link to=\"/inventory/vendor/add\"> <Button type=\"primary\"><Icon\n  type=\"plus\"\n/> Add\n                                  </Button>\n</Link>\n):null)}\n            >\n                <CustomizedTable columns={vendorsColoumns} dataSource={this.state.vendors} hideReport={!that.props.activePracticePermissions.ExportVendor} />\n            </Card>\n     </Switch>\n</div>\n)\n    }\n}\n","import {Card, Form, Row} from \"antd\";\nimport React from \"react\";\nimport {Route} from \"react-router\";\nimport {Redirect} from \"react-router-dom\";\nimport moment from \"moment\";\nimport {\n    DATE_PICKER,\n    INPUT_FIELD, NUMBER_FIELD,\n    SELECT_FIELD,\n    SUCCESS_MSG_TYPE,\n    TEXT_FIELD,\n} from \"../../../constants/dataKeys\";\nimport DynamicFieldsForm from \"../../common/DynamicFieldsForm\";\nimport {displayMessage, getAPI, interpolate} from \"../../../utils/common\";\nimport {EXPENSE_TYPE, EXPENSES_API, PAYMENT_MODES, SINGLE_EXPENSES_API, VENDOR_API} from \"../../../constants/api\";\n\n\nexport default class AddExpenses extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            editData: this.props.editData ? this.props.editData : null\n        }\n    }\n\n    changeRedirect() {\n        const redirectVar = this.state.redirect;\n        this.setState({\n            redirect: !redirectVar,\n        });\n\n    }\n\n    componentDidMount() {\n        if (this.props.match.params.id) {\n            if (!this.state.editData) {\n                this.loadData();\n            }\n        }\n        this.loadExpensetypes();\n        this.loadPaymentModes();\n        this.loadVendors();\n\n\n    }\n\n    loadPaymentModes() {\n        const that = this;\n        const successFn = function (data) {\n            that.setState({\n                paymentModes: data,\n            })\n        };\n        const errorFn = function () {\n        };\n        getAPI(interpolate(PAYMENT_MODES, [this.props.active_practiceId]), successFn, errorFn);\n    }\n\n    loadData() {\n        const that = this;\n        const successFn = function (data) {\n            that.setState({\n                editData: data,\n            })\n        }\n        const errorFn = function () {\n\n        }\n        getAPI(interpolate(SINGLE_EXPENSES_API, [this.props.match.params.id]), successFn, errorFn);\n    }\n\n    loadExpensetypes() {\n        const that = this;\n        const successFn = function (data) {\n            that.setState({\n                expense_types: data,\n            })\n        };\n        const errorFn = function () {\n        };\n        getAPI(interpolate(EXPENSE_TYPE, [this.props.active_practiceId]), successFn, errorFn);\n    }\n\n    loadVendors() {\n        const that = this;\n        const successFn = function (data) {\n            that.setState({\n                vendors: data,\n            })\n        };\n        const errorFn = function () {\n        };\n        getAPI(interpolate(VENDOR_API, [this.props.active_practiceId]), successFn, errorFn);\n    }\n\n\n    render() {\n        const paymentModesOptions = []\n        if (this.state.paymentModes) {\n            this.state.paymentModes.forEach(function (drug) {\n                paymentModesOptions.push({label: (drug.mode), value: drug.id});\n            })\n        }\n        ;\n        const expenseTypesOptions = []\n        if (this.state.expense_types) {\n            this.state.expense_types.forEach(function (drug) {\n                expenseTypesOptions.push({label: (drug.name), value: drug.id});\n            })\n        }\n        const vendorsOptions = []\n        if (this.state.vendors) {\n            this.state.vendors.forEach(function (drug) {\n                vendorsOptions.push({label: (drug.name), value: drug.id});\n            })\n        }\n        const fields = [{\n            label: \"Expense Date\",\n            key: \"expense_date\",\n            required: true,\n            initialValue: this.state.editData ? this.state.editData.expense_date : moment(),\n            type: DATE_PICKER,\n            format: \"YYYY-MM-DD\"\n        }, {\n            label: \"Amount\",\n            key: \"amount\",\n            required: true,\n            initialValue: this.state.editData ? this.state.editData.amount : null,\n            type: NUMBER_FIELD,\n            follow:\"INR\"\n        }, {\n            label: \"Vendor\",\n            key: \"vendor\",\n            type: SELECT_FIELD,\n            initialValue: this.state.editData ? this.state.editData.vendors : null,\n            options: vendorsOptions\n        }, {\n            label: \"Expense type\",\n            key: \"expense_type\",\n            type: SELECT_FIELD,\n            initialValue: this.state.editData && this.state.editData.expense_type ? this.state.editData.expense_type.id : null,\n            options: expenseTypesOptions\n        }, {\n            label: \"Payment Mode\",\n            key: \"payment_mode\",\n            type: SELECT_FIELD,\n            required: true,\n            initialValue: this.state.editData && this.state.editData.payment_mode? this.state.editData.payment_mode.id : null,\n            options: paymentModesOptions\n        }, {\n            label: \"Bank Name\",\n            key: 'bank_name',\n            type: INPUT_FIELD,\n            initialValue: this.state.editData ? this.state.editData.bank_name : null,\n        }, {\n            label: \"Remark\",\n            key: 'remark',\n            type: TEXT_FIELD,\n            minRows: 2,\n            maxRows: 6,\n            initialValue: this.state.editData ? this.state.editData.remark : null,\n        },];\n\n\n        let editformProp;\n        const that = this;\n        if (this.state.editData) {\n            editformProp = {\n                successFn (data) {\n                    displayMessage(SUCCESS_MSG_TYPE, \"success\");\n                    that.props.loadData();\n                    that.changeRedirect();\n                    if (that.props.history){\n                        that.props.history.replace(\"/inventory/expenses\");\n                    }\n                },\n                errorFn () {\n\n                },\n                action: interpolate(SINGLE_EXPENSES_API, [this.props.match.params.id]),\n                method: \"put\",\n\n            }\n        }\n        const TestFormLayout = Form.create()(DynamicFieldsForm);\n\n        const formProp = {\n            successFn (data) {\n                displayMessage(SUCCESS_MSG_TYPE, \"success\");\n                that.props.loadData();\n                that.changeRedirect();\n                if (that.props.history){\n                    that.props.history.replace(\"/inventory/expenses\");\n                }\n            },\n            errorFn () {\n\n            },\n            action: EXPENSES_API,\n            method: \"post\",\n        }\n        const defaultValues = [{\"key\": \"practice\", \"value\": this.props.active_practiceId}];\n        return (\n<Row>\n            <Card>\n                <Route\n                  exact\n                  path='/inventory/expenses/edit/:id'\n                  render={() => (this.props.match.params.id ? (\n                           <TestFormLayout\n                             defaultValues={defaultValues}\n                             title=\"Edit Expense\"\n                             changeRedirect={this.changeRedirect}\n                             formProp={editformProp}\n                             fields={fields}\n                           />\n                         ) : <Redirect to=\"/inventory/expenses\" />)}\n                />\n                <Route\n                  exact\n                  path='/inventory/expenses/add'\n                  render={() => (\n<TestFormLayout\n  title=\"Add Expenses\"\n  changeRedirect={this.changeRedirect}\n  formProp={formProp}\n  fields={fields}\n  defaultValues={defaultValues}\n/>\n)}\n                />\n            </Card>\n            {this.state.redirect && <Redirect to=\"/inventory/expenses\" />}\n</Row>\n)\n\n    }\n}\n","import {Button, Card, Divider, Icon, Popconfirm, Row, Col, Select, DatePicker, Table} from \"antd\";\nimport React from \"react\";\nimport {Route, Switch} from \"react-router\";\nimport {Link} from \"react-router-dom\";\nimport moment from \"moment\";\nimport {getAPI, interpolate, postAPI, putAPI} from \"../../../utils/common\";\nimport {EXPENSE_TYPE, EXPENSES_API, PAYMENT_MODES, SINGLE_EXPENSES_API} from \"../../../constants/api\";\nimport AddExpenses from \"./AddExpenses\";\nimport PermissionDenied from \"../../common/errors/PermissionDenied\";\n\nexport default class ExpensesList extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            active_practiceId: this.props.active_practiceId,\n            expenses: null,\n            expenseTypes: [],\n            loading: true,\n            paymentModes: [],\n            selectedExpenseType: null,\n            selectedPaymentMode: null,\n            selectedStartDate: moment().subtract(1, 'month'),\n            selectedEndDate: moment()\n        };\n        this.loadData = this.loadData.bind(this);\n    }\n\n    componentDidMount() {\n        this.loadExpenseTypes();\n        this.loadPaymentModes();\n        this.loadData();\n    }\n\n    loadExpenseTypes(deleted = false) {\n        const that = this;\n        const successFn = function (data) {\n            console.log(\"get table\");\n            if (deleted) {\n                that.setState({\n                    deletedExpenses: data,\n                    deletedLoading: false\n                })\n            } else {\n                that.setState({\n                    expenseTypes: data,\n                })\n            }\n        };\n        const errorFn = function () {\n        };\n        if (deleted) {\n            getAPI(interpolate(EXPENSE_TYPE, [this.props.active_practiceId]), successFn, errorFn, {deleted: true});\n        } else {\n            getAPI(interpolate(EXPENSE_TYPE, [this.props.active_practiceId]), successFn, errorFn);\n        }\n    }\n\n    loadPaymentModes() {\n        const that = this;\n        const successFn = function (data) {\n            console.log(\"get table\");\n            that.setState({\n                paymentModes: data,\n            })\n        };\n        const errorFn = function () {\n        };\n        getAPI(interpolate(PAYMENT_MODES, [this.props.active_practiceId]), successFn, errorFn);\n    }\n\n    changeExpenseFilters = (type, value) => {\n        const that = this;\n        this.setState({\n            [type]: value\n        }, function () {\n            that.loadData();\n        })\n    }\n\n    loadData = () => {\n        const that = this;\n        that.setState({\n            loading: true\n        })\n        const successFn = function (data) {\n            that.setState({\n                expenses: data,\n                loading: false\n            })\n            console.log(\"log data\", that.state.expenses)\n        }\n        const errorFn = function () {\n            that.setState({\n                loading: false\n            })\n\n        }\n        getAPI(EXPENSES_API, successFn, errorFn, {\n            practice:that.props.active_practiceId,\n            payment_mode: that.state.selectedPaymentMode,\n            expense_type: that.state.selectedExpenseType,\n            start: that.state.selectedStartDate.format(),\n            end: that.state.selectedEndDate.format(),\n        });\n    }\n\n    deleteObject(record, type) {\n        const that = this;\n        const reqData = {};\n        reqData.id = record.id;\n        reqData.is_active = type;\n        const successFn = function (data) {\n            that.loadData();\n            if (that.state.showDeleted) {\n                that.loadData(true);\n            }\n        }\n        const errorFn = function () {\n        };\n        putAPI(interpolate(SINGLE_EXPENSES_API, [record.id]), reqData, successFn, errorFn)\n    }\n\n    render() {\n        const that = this;\n        const expenseColoumns = [{\n            title: 'Expense Date',\n            key: 'expense_date',\n            dataIndex: 'expense_date',\n            export (text) {\n                return moment(text).format('lll');\n            },\n            render (text) {\n                return moment(text).format('lll');\n            }\n        }, {\n            title: 'Expense Type',\n            key: 'expense_type',\n            dataIndex: 'expense_type.name',\n        }, {\n            title: 'Vendor',\n            key: 'vendor',\n            dataIndex: 'vendor.name'\n        }, {\n            title: 'Payment Mode',\n            key: 'payment_mode',\n            dataIndex: 'payment_mode.mode'\n        }, {\n            title: 'Amount',\n            key: 'amount',\n            dataIndex: 'amount'\n        }, {\n            title: 'Bank Name',\n            key: 'bank_name',\n            dataIndex: 'bank_name'\n        }, {\n            title: 'Remark',\n            key: 'remark',\n            dataIndex: 'remark'\n        }, {\n            title: 'Action',\n            render (record) {\n                return (\n<div>\n                    {that.props.activePracticePermissions.EditExpenses || that.props.allowAllPermissions ?\n                        <Link to={`/inventory/expenses/edit/${  record.id}`}>Edit</Link> : null}\n                    <Divider type=\"vertical\" />\n                    {that.props.activePracticePermissions.DeleteExpenses || that.props.allowAllPermissions ? (\n                        <Popconfirm\n                          title=\"Are you sure to delete this?\"\n                          onConfirm={() => that.deleteObject(record, false)}\n                          okText=\"Yes\"\n                          cancelText=\"No\"\n                        >\n                            <a>Delete</a>\n                        </Popconfirm>\n                      ) : null}\n</div>\n)\n            }\n        }]\n        return (\n<div>\n            <Switch>\n                <Route\n                  exact\n                  path='/inventory/expenses/add'\n                  render={(route) => (that.props.activePracticePermissions.EditExpenses || that.props.allowAllPermissions ?\n                           <AddExpenses {...this.state} {...route} loadData={this.loadData} /> : <PermissionDenied />)}\n                />\n                <Route\n                  exact\n                  path='/inventory/expenses/edit/:id'\n                  render={(route) => (that.props.activePracticePermissions.EditExpenses || that.props.allowAllPermissions ?\n                           <AddExpenses {...this.state} {...route} loadData={this.loadData} /> : <PermissionDenied />)}\n                />\n                <Card\n                  title=\"Expenses\"\n                  extra={(that.props.activePracticePermissions.EditExpenses || that.props.allowAllPermissions ? (\n                          <Link to=\"/inventory/expenses/add\"> <Button type=\"primary\"><Icon\n                            type=\"plus\"\n                          /> Add\n                                                              </Button>\n                          </Link>\n                        ) : <PermissionDenied />)}\n                >\n                    <Row gutter={16} style={{marginBottom: 10}}>\n                        <Col span={2} style={{textAlign: \"right\"}}>\n                            <b> Expense Types</b>\n                        </Col>\n                        <Col span={4}>\n                            <Select\n                              style={{width: '100%'}}\n                              value={this.state.selectedExpenseType}\n                              disabled={this.state.loading}\n                              onChange={(value) => this.changeExpenseFilters('selectedExpenseType', value)}\n                            >\n                                <Select.Option value={null}>--ALL EXPENSES--</Select.Option>\n                                {this.state.expenseTypes.map(item => (\n<Select.Option\n  value={item.id}\n>{item.name}\n</Select.Option>\n))}\n                            </Select>\n                        </Col>\n                        <Col span={2} style={{textAlign: \"right\"}}>\n                            <b> Payment Modes</b>\n                        </Col>\n                        <Col span={4}>\n                            <Select\n                              style={{width: '100%'}}\n                              value={this.state.selectedPaymentMode}\n                              disabled={this.state.loading}\n                              onChange={(value) => this.changeExpenseFilters('selectedPaymentMode', value)}\n                            >\n                                <Select.Option value={null}>--ALL PAYMENT MODE--</Select.Option>\n                                {this.state.paymentModes.map(item => (\n<Select.Option\n  value={item.id}\n>{item.mode}\n</Select.Option>\n))}\n                            </Select>\n                        </Col>\n\n                        <Col span={2} style={{textAlign: \"right\"}}>\n                            <b> From</b>\n                        </Col>\n                        <Col span={4}>\n                            <DatePicker\n                              value={this.state.selectedStartDate}\n                              disabled={this.state.loading}\n                              allowClear={false}\n                              onChange={(value) => this.changeExpenseFilters('selectedStartDate', value)}\n                            />\n                        </Col>\n                        <Col span={2} style={{textAlign: \"right\"}}>\n                            <b> To</b>\n                        </Col>\n                        <Col span={4}>\n                            <DatePicker\n                              value={this.state.selectedEndDate}\n                              disabled={this.state.loading}\n                              allowClear={false}\n                              onChange={(value) => this.changeExpenseFilters('selectedEndDate', value)}\n                            />\n                        </Col>\n                    </Row>\n                    <Table\n                      loading={this.state.loading}\n                      dataSource={this.state.expenses}\n                      columns={expenseColoumns}\n                    />\n                </Card>\n            </Switch>\n</div>\n)\n    }\n}\n","import {Card, Form, Row} from \"antd\";\nimport React from \"react\";\nimport {Route} from \"react-router\";\nimport {Redirect} from \"react-router-dom\";\nimport {\n    INPUT_FIELD,\n    SUCCESS_MSG_TYPE,\n    TEXT_FIELD,\n} from \"../../../constants/dataKeys\";\nimport DynamicFieldsForm from \"../../common/DynamicFieldsForm\";\nimport {displayMessage, getAPI, interpolate} from \"../../../utils/common\";\nimport {\n    MANUFACTURER_API, SINGLE_MANUFACTURER_API, SINGLE_VENDOR_API\n} from \"../../../constants/api\";\nimport PermissionDenied from \"../../common/errors/PermissionDenied\";\n\n\nexport default class AddManufacture extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            editData: this.props.editData ? this.props.editData : null\n        }\n    }\n\n    changeRedirect = () => {\n        const redirectVar = this.state.redirect;\n        this.setState({\n            redirect: !redirectVar,\n        });\n    }\n\n    componentDidMount() {\n        if (this.props.match.params.id) {\n            if (!this.state.editData) {\n                this.loadData();\n            }\n        }\n    }\n\n    loadData() {\n        const that = this;\n        const successFn = function (data) {\n            that.setState({\n                editData: data,\n            })\n        }\n        const errorFn = function () {\n\n        }\n        getAPI(interpolate(SINGLE_MANUFACTURER_API, [this.props.match.params.id]), successFn, errorFn);\n\n\n    }\n\n\n    render() {\n\n        const that = this;\n        const fields = [{\n            label: \"Name\",\n            key: \"name\",\n            initialValue: this.state.editData ? this.state.editData.name : null,\n            type: INPUT_FIELD\n        },{\n            label: 'Details',\n            key: 'description',\n            initialValue:this.state.editData?this.state.editData.description:null,\n            type:TEXT_FIELD\n        },\n        ];\n\n\n        let editformProp;\n        if (this.state.editData) {\n            editformProp = {\n                successFn (data) {\n                    displayMessage(SUCCESS_MSG_TYPE, \"success\");\n                    that.props.loadData();\n                    if (that.props.history){\n                        that.props.history.replace(\"/inventory/manufacture\");\n                    }\n                },\n                errorFn () {\n\n                },\n                action: interpolate(SINGLE_MANUFACTURER_API, [this.props.match.params.id]),\n                method: \"put\",\n\n            }\n        }\n        const TestFormLayout = Form.create()(DynamicFieldsForm);\n\n        const formProp = {\n            successFn (data) {\n                displayMessage(SUCCESS_MSG_TYPE, \"success\");\n                that.props.loadData();\n                if (that.props.history){\n                    that.props.history.replace(\"/inventory/manufacture\");\n                }\n            },\n            errorFn () {\n\n            },\n            action: MANUFACTURER_API,\n            method: \"post\",\n        }\n        const defaultValues = [{\"key\": \"practice\", \"value\": this.props.active_practiceId}];\n        return (\n<Row>\n            <Card>\n                <Route\n                  path='/inventory/manufacture/edit/:id'\n                  render={(route) => (this.props.match.params.id ? (\n                           <TestFormLayout\n                             defaultValues={defaultValues}\n                             title=\"Edit Manufacturer\"\n                             changeRedirect={this.changeRedirect}\n                             formProp={editformProp}\n                             {...route}\n                             fields={fields}\n                           />\n                         ) : <Redirect to=\"/inventory/manufacture\" />)}\n                />\n                <Route\n                  exact\n                  path='/inventory/manufacture/add'\n                  render={(route) => (that.props.activePracticePermissions.EditManufacturer || that.props.allowAllPermissions ? (\n                            <TestFormLayout\n                              title=\"Add Manufacturer\"\n                              changeRedirect={this.changeRedirect}\n                              {...route}\n                              formProp={formProp}\n                              fields={fields}\n                            />\n                          ):<PermissionDenied />)}\n                />\n\n\n            </Card>\n            {this.state.redirect && <Redirect to=\"/inventory/manufacture\" />}\n</Row>\n)\n\n    }\n}\n","import {Button, Card,Icon,Divider,Popconfirm} from \"antd\";\nimport React from \"react\";\nimport {Route, Switch} from \"react-router\";\nimport {Link} from \"react-router-dom\";\nimport {getAPI,deleteAPI,interpolate,putAPI} from \"../../../utils/common\";\nimport {MANUFACTURER_API,SINGLE_MANUFACTURER_API} from \"../../../constants/api\";\nimport AddManufacture from \"./AddManufacture\";\nimport CustomizedTable from \"../../common/CustomizedTable\";\nimport PermissionDenied from \"../../common/errors/PermissionDenied\";\n\nexport default class ManufactureList extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            active_practiceId: this.props.active_practiceId,\n            manufactures: null,\n            loading:true\n        };\n        this.loadData = this.loadData.bind(this);\n        this.deleteManufacture =this.deleteManufacture.bind(this);\n    }\n\n    componentDidMount() {\n        this.loadData();\n    }\n\n    loadData() {\n        const that = this;\n        const successFn = function (data) {\n            that.setState({\n                manufactures: data,\n                loading:false\n            })\n        }\n        const errorFn = function () {\n            that.setState({\n                loading:false\n            })\n\n        }\n        getAPI(MANUFACTURER_API, successFn, errorFn);\n    }\n\n    deleteManufacture(value) {\n        const that = this;\n        const reqDate={...value,\n            'is_active':false\n        }\n        const successFn = function (data) {\n            that.setState({\n                loading:false\n            })\n            that.loadData();\n        };\n        const errorFn = function () {\n        };\n        putAPI(interpolate(SINGLE_MANUFACTURER_API, [value]), reqDate,successFn, errorFn);\n\n    }\n\n\n    render() {\n        \n        const that = this;\n        const manufactureColoumns = [{\n            title: 'Name',\n            key: 'name',\n            dataIndex: 'name'\n        }, {\n            title: 'Details',\n            key: 'details',\n            dataIndex: 'description'\n        }, {\n            title: 'Action',\n            render (record) {\n                return (\n<div>\n                    {that.props.activePracticePermissions.EditManufacturer || that.props.allowAllPermissions ?\n                    <Link to={`/inventory/manufacture/edit/${  record.id}`}>Edit</Link>:null}\n                    <Divider type=\"vertical\" />\n                    {that.props.activePracticePermissions.DeleteManufacturer || that.props.allowAllPermissions ? (\n                    <Popconfirm\n                      title=\"Are you sure delete this item?\"\n                      onConfirm={() => that.deleteManufacture(record.id)}\n                      okText=\"Yes\"\n                      cancelText=\"No\"\n                    >\n                        <a>Delete</a>\n                    </Popconfirm>\n                  ):null}\n\n                    \n</div>\n)\n            }\n        }];\n        return (\n<div><Switch>\n            <Route\n              exact\n              path='/inventory/manufacture/add'\n              render={(route) =>(that.props.activePracticePermissions.EditManufacturer || that.props.allowAllPermissions ? <AddManufacture {...this.state} {...route} {...this.props} loadData={that.loadData} />:<PermissionDenied />)}\n            />\n            <Route\n              path='/inventory/manufacture/edit/:id'\n              render={(route) =>(that.props.activePracticePermissions.EditManufacturer || that.props.allowAllPermissions ? <AddManufacture {...this.state} {...this.props} {...route} loadData={that.loadData} />:<PermissionDenied />)}\n            />\n            <Card\n              title=\"Manufacturers\"\n              extra={(\n<Link to=\"/inventory/manufacture/add\"> <Button type=\"primary\" disabled={!that.props.activePracticePermissions.EditManufacturer}><Icon\n  type=\"plus\"\n/> Add\n                                       </Button>\n</Link>\n)}\n            >\n                <CustomizedTable loading={this.state.loading} dataSource={this.state.manufactures} columns={manufactureColoumns} hideReport={!that.props.activePracticePermissions.ExportManufacturer} />\n            </Card>\n     </Switch>\n</div>\n)\n    }\n}\n","import {Card, Form, Row} from \"antd\";\nimport React from \"react\";\nimport {Route} from \"react-router\";\nimport {Redirect} from \"react-router-dom\";\nimport {\n    DATE_PICKER,\n    INPUT_FIELD,\n    SELECT_FIELD,\n    SUCCESS_MSG_TYPE,\n} from \"../../../constants/dataKeys\";\nimport DynamicFieldsForm from \"../../common/DynamicFieldsForm\";\nimport {displayMessage, getAPI, interpolate} from \"../../../utils/common\";\nimport {\n    LAB_API, PATIENTS_LIST, SINGLE_EXPENSES_API, SINGLE_LAB_API,\n} from \"../../../constants/api\";\n\n\nexport default class AddLab extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            editData: this.props.editData ? this.props.editData : null\n        }\n    }\n\n    changeRedirect() {\n        const redirectVar = this.state.redirect;\n        this.setState({\n            redirect: !redirectVar,\n        });\n\n    }\n\n    componentDidMount() {\n        if (this.props.match.params.id) {\n            if (!this.state.editData) {\n                this.loadData();\n            }\n        }\n        this.getPatientListData();\n\n\n    }\n\n\n    loadData() {\n        const that = this;\n        const successFn = function (data) {\n            that.setState({\n                editData: data,\n            })\n        }\n        const errorFn = function () {\n\n        }\n        getAPI(interpolate(SINGLE_EXPENSES_API, [this.props.match.params.id]), successFn, errorFn);\n\n\n    }\n\n    getPatientListData() {\n        const that = this;\n        const successFn = function (data) {\n            that.setState({\n                patientListData: data\n            })\n        };\n        const errorFn = function () {\n\n        };\n        getAPI(PATIENTS_LIST, successFn, errorFn);\n    }\n\n\n    render() {\n\n        const patientOptions = []\n        if (this.state.patientListData && this.state.patientListData.length) {\n            this.state.patientListData.forEach(function (drug) {\n                patientOptions.push({label: (drug.name), value: drug.id});\n            })\n        }\n        const fields = [{\n            label: \"Job number \",\n            key: \"job_no\",\n            initialValue: this.state.editData ? this.state.editData.job_no : null,\n            type: INPUT_FIELD\n        }, {\n            label: \"Doctor Name \",\n            key: \"job_no\",\n            initialValue: this.state.editData ? this.state.editData.doctor_name : null,\n            type: INPUT_FIELD\n        }, {\n            label: \"Name \",\n            key: \"name\",\n            initialValue: this.state.editData ? this.state.editData.name : null,\n            type: INPUT_FIELD\n        }, {\n            label: \"Status \",\n            key: \"status\",\n            initialValue: this.state.editData ? this.state.editData.status : null,\n            type: INPUT_FIELD\n        }, {\n            label: \"Due Date\",\n            key: \"due_date\",\n            type: DATE_PICKER,\n            initialValue: this.state.editData ? this.state.editData.due_date : null,\n            format: \"YYYY/MM/DD HH:mm\"\n        }, {\n            label: \"patient\",\n            key: \"patient\",\n            type: SELECT_FIELD,\n            initialValue: this.state.editData ? this.state.editData.patient : null,\n            options: patientOptions\n        },];\n\n\n        let editformProp;\n        if (this.state.editBlogData) {\n            editformProp = {\n                successFn (data) {\n                    displayMessage(SUCCESS_MSG_TYPE, \"success\");\n                    console.log(data);\n                },\n                errorFn () {\n\n                },\n                action: interpolate(SINGLE_LAB_API, [this.props.match.params.id]),\n                method: \"put\",\n\n            }\n        }\n        const TestFormLayout = Form.create()(DynamicFieldsForm);\n\n        const formProp = {\n            successFn (data) {\n                displayMessage(SUCCESS_MSG_TYPE, \"success\");\n\n                console.log(data);\n            },\n            errorFn () {\n\n            },\n            action: LAB_API,\n            method: \"post\",\n        }\n        const defaultValues = [{\"key\": \"practice\", \"value\": this.props.active_practiceId}];\n        return (\n<Row>\n            <Card>\n                <Route\n                  exact\n                  path='/inventory/lab/edit/:id'\n                  render={() => (this.props.match.params.id ? (\n                           <TestFormLayout\n                             defaultValues={defaultValues}\n                             title=\"Edit Lab\"\n                             changeRedirect={this.changeRedirect}\n                             formProp={editformProp}\n                             fields={fields}\n                           />\n                         ) : <Redirect to=\"/inventory/lab\" />)}\n                />\n                <Route\n                  exact\n                  path='/inventory/lab/add'\n                  render={() => (\n<TestFormLayout\n  title=\"Add lab\"\n  changeRedirect={this.changeRedirect}\n  formProp={formProp}\n  fields={fields}\n/>\n)}\n                />\n\n\n            </Card>\n            {this.state.redirect && <Redirect to=\"/inventory/lab\" />}\n</Row>\n)\n\n    }\n}\n","import {Button, Card, Icon} from \"antd\";\nimport React from \"react\";\nimport {Route, Switch} from \"react-router\";\nimport {Link} from \"react-router-dom\";\nimport {getAPI} from \"../../../utils/common\";\nimport {LAB_API} from \"../../../constants/api\";\nimport AddLab from \"./AddLab\";\n\nexport default class LabList extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            active_practiceId: this.props.active_practiceId,\n            lab: null,\n            loading:true\n        };\n        this.loadData = this.loadData.bind(this);\n    }\n\n    componentDidMount() {\n        this.loadData();\n    }\n\n    loadData() {\n        const that = this;\n        const successFn = function (data) {\n            that.setState({\n                lab: data,\n                loading:false\n            })\n        }\n        const errorFn = function () {\n            that.setState({\n                loading:false\n            })\n\n        }\n        getAPI(LAB_API, successFn, errorFn);\n    }\n\n    render() {\n        return (\n<div><Switch>\n            <Route\n              exact\n              path='/inventory/lab/add'\n              render={(route) => <AddLab {...this.state} {...route} />}\n            />\n            <Route\n              exact\n              path='/inventory/expenses/lab/:id'\n              render={(route) => <AddLab {...this.state} {...route} />}\n            />\n            <Card\n              loading={this.state.loading}\n              title=\"Lab\"\n              extra={(\n<Link to=\"/inventory/lab/add\"> <Button type=\"primary\"><Icon\n  type=\"plus\"\n/> Add\n                               </Button>\n</Link>\n)}\n            />\n     </Switch>\n</div>\n)\n    }\n}\n","import React from \"react\";\nimport {Card, Table} from \"antd\";\nimport {getAPI} from \"../../../utils/common\";\nimport {ACTIVITY_API} from \"../../../constants/api\";\n\nexport default class ActivityList extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            activity: null,\n            loading:true\n        }\n        this.loadActivityLog = this.loadActivityLog.bind(this)\n    }\n\n    componentWillMount() {\n        this.loadActivityLog();\n    }\n\n    loadActivityLog() {\n        const that = this;\n        const successFn = function (data) {\n            that.setState({\n                activity: data,\n                loading:false\n            })\n        }\n        const errorFn = function () {\n            that.setState({\n                loading:false\n            })\n\n        }\n        getAPI(ACTIVITY_API, successFn, errorFn);\n    }\n\n    render() {\n        return (\n<Card title=\"Activity Log\">\n            <Table loading={this.state.loading} dataSource={this.state.activity} />\n</Card>\n)\n    }\n}\n","import React from \"react\";\nimport {Card, Form, Row, Col, Input, Button, Select, Checkbox, InputNumber} from \"antd\";\nimport {Link, Redirect, Switch} from \"react-router-dom\";\nimport {Route} from \"react-router\";\nimport TextArea from \"antd/lib/input/TextArea\";\nimport DynamicFieldsForm from \"../../common/DynamicFieldsForm\";\nimport {CHECKBOX_FIELD, INPUT_FIELD, SUCCESS_MSG_TYPE, NUMBER_FIELD, SELECT_FIELD} from \"../../../constants/dataKeys\";\nimport {\n    SINGLE_INVENTORY_ITEM_API,\n    TAXES,\n    MANUFACTURER_API,\n    VENDOR_API,\n    INVENTORY_ITEM_API,\n    INVENTORY_API,\n    DRUG_TYPE_API,\n    DRUG_UNIT_API, PRODUCT_MARGIN\n} from \"../../../constants/api\";\nimport {INVENTORY_ITEM_TYPE, DRUG, SUPPLIES, EQUIPMENT} from \"../../../constants/hardData\";\nimport {getAPI, putAPI, postAPI, displayMessage, interpolate} from \"../../../utils/common\";\nimport {REQUIRED_FIELD_MESSAGE} from \"../../../constants/messages\";\n\nconst CheckboxGroup = Checkbox.Group;\n\nclass AddorEditInventoryItem extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            // editInventoryItem: this.props.editInventoryItem ? this.props.editInventoryItem : null,\n            taxes_list: this.props.taxes_list ? this.props.taxes_list : null,\n            manufacture_list: this.props.manufacture_list ? this.props.manufacture_list : null,\n            vendor_list: this.props.vendor_list ? this.props.vendor_list : null,\n            redirect: false,\n            type: this.props.editInventoryItem ? this.props.editInventoryItem : null,\n            drugUnitList: [],\n            drugTypeList: [],\n            retail_price: 0,\n            productMargin: [],\n            loading:false,\n        };\n        this.changeRedirect = this.changeRedirect.bind(this);\n    }\n\n    changeRedirect() {\n        const redirectVar = this.state.redirect;\n        this.setState({\n            redirect: !redirectVar,\n        });\n    }\n\n    componentDidMount() {\n        if (this.props.match.params.id) {\n            if (!this.state.editInventoryItem) {\n                this.loadData();\n            }\n        }\n        if (this.props.taxes_list == null) {\n            this.loadTaxes();\n        }\n        if (this.props.manufacture_list == null) {\n            this.loadManufactureList();\n        }\n        if (this.props.vendor_list == null) {\n            this.loadVendorList();\n        }\n        this.loadDrugType();\n        this.loadDrugUnit();\n        this.loadProductMargin();\n    }\n\n    loadProductMargin() {\n        const that = this;\n        const successFn = function (data) {\n            that.setState({\n                productMargin: data\n            })\n        }\n        const errorFn = function () {\n\n        }\n        getAPI(PRODUCT_MARGIN, successFn, errorFn);\n    }\n\n    loadTaxes() {\n        const that = this;\n        const successFn = function (data) {\n            that.setState({\n                taxes_list: data,\n            })\n        };\n        const errorFn = function () {\n        };\n        getAPI(interpolate(TAXES, [this.props.active_practiceId]), successFn, errorFn);\n\n    }\n\n    loadManufactureList() {\n        const that = this;\n        const successFn = function (data) {\n            that.setState({\n                manufacture_list: data\n            })\n        }\n        const errorFn = function () {\n\n        }\n        getAPI(MANUFACTURER_API, successFn, errorFn);\n    }\n\n    loadVendorList() {\n        const that = this;\n        const successFn = function (data) {\n            that.setState({\n                vendor_list: data\n            })\n        }\n        const errorFn = function () {\n\n        }\n        getAPI(interpolate(VENDOR_API, [this.props.active_practiceId]), successFn, errorFn);\n    }\n\n\n    loadData() {\n        const that = this;\n        const successFn = function (data) {\n            that.setState(function (prevState) {\n                let totalTax = 0;\n                data.taxes_data.forEach(function (tax) {\n                    totalTax += tax.tax_value;\n                });\n                const net_price = (data.retail_price * (1 + totalTax * 0.01)).toFixed(2);\n                return {\n                    editInventoryItem: {...data, net_price},\n                    type: data.item_type,\n                    retail_price: data.retail_price\n                }\n            })\n        }\n        const errorFn = function () {\n\n        }\n        if (this.props.match.params.id)\n            getAPI(interpolate(SINGLE_INVENTORY_ITEM_API, [this.props.match.params.id]), successFn, errorFn);\n\n    }\n\n    loadDrugType = () => {\n        const that = this;\n        const successFn = function (data) {\n            that.setState({\n                drugTypeList: data,\n            })\n        }\n        const errorFn = function () {\n\n        }\n        getAPI(interpolate(DRUG_TYPE_API, [this.props.active_practiceId]), successFn, errorFn);\n    }\n\n    onChangeHandeler = (e) => {\n        const that = this\n        that.setState({\n            type: e,\n        })\n    }\n\n    loadDrugUnit() {\n        const that = this;\n        const successFn = function (data) {\n            that.setState({\n                drugUnitList: data\n            })\n        }\n        const errorFn = function () {\n        }\n        getAPI(interpolate(DRUG_UNIT_API, [this.props.active_practiceId]), successFn, errorFn);\n    }\n\n    setFormParams = (type, value) => {\n        this.setState({\n            [type]: value\n        })\n    }\n\n    handleSubmit = (e) => {\n        e.preventDefault();\n        const that = this;\n        this.props.form.validateFields((err, formData) => {\n            if (!err) {\n                const reqData = {\n                    ...formData,\n                    retail_without_tax: that.state.retail_price,\n                    net_price: undefined,\n                    practice: this.props.active_practiceId,\n\n                }\n                if (this.state.editInventoryItem) {\n                    reqData.id = this.state.editInventoryItem.id\n                }\n\n                const successFn = function (data) {\n                    that.setState({\n                        redirect: true,\n                    });\n                    that.props.loadData();\n                    that.props.history.replace('/inventory');\n                };\n                const errorFn = function () {\n\n                };\n                if (!this.state.editInventoryItem) {\n                    postAPI(interpolate(INVENTORY_ITEM_API, [this.props.match.params.id]), reqData, successFn, errorFn);\n                } else {\n                    putAPI(interpolate(SINGLE_INVENTORY_ITEM_API, [this.props.match.params.id]), reqData, successFn, errorFn);\n                }\n\n            }\n        });\n    }\n\n    changeNetPrice = (value) => {\n        const that = this;\n        const {getFieldsValue, setFields} = this.props.form;\n        setTimeout(function () {\n            const values = getFieldsValue();\n            if (values.retail_with_tax) {\n                let totalTaxAmount = 0;\n                values.taxes.forEach(function (taxid) {\n                    that.state.taxes_list.forEach(function (taxObj) {\n                        if (taxObj.id == taxid)\n                            totalTaxAmount += taxObj.tax_value;\n                    })\n                });\n                const retailPrice = values.retail_with_tax / (1 + totalTaxAmount * 0.01);\n                that.setState({\n                    retail_price: retailPrice.toFixed(2)\n                })\n            } else {\n                that.setState({\n                    retail_price: 0\n                })\n            }\n        }, 1000);\n\n    }\n\n    render() {\n        const that = this;\n        const taxesOption = [];\n        if (this.state.taxes_list) {\n            this.state.taxes_list.forEach(function (drug) {\n                taxesOption.push({label: (`${drug.name  }(${  drug.tax_value  }%)`), value: drug.id});\n            })\n        }\n        const manufacturerOption = [];\n        if (this.state.manufacture_list) {\n            this.state.manufacture_list.forEach(function (manufacturer) {\n                manufacturerOption.push({label: (manufacturer.name), value: manufacturer.id});\n            })\n        }\n\n        const vendorOption = [];\n        if (this.state.vendor_list) {\n            this.state.vendor_list.forEach(function (vendor) {\n                vendorOption.push({label: (vendor.name), value: vendor.id});\n            })\n        }\n        const {getFieldDecorator} = this.props.form;\n\n        const formItemLayout = ({\n            labelCol: {span: 10},\n            wrapperCol: {span: 14},\n        });\n\n        return (\n<Card title={this.state.editInventoryItem ? \"Edit Inventory Item\" : \"Add Inventory Item\"} loading={this.state.loading}>\n            <Row>\n                <Col span={18}>\n                    <Form onSubmit={this.handleSubmit}>\n                        <Form.Item label=\"Item Name\" {...formItemLayout}>\n                            {getFieldDecorator('name', {\n                                initialValue: this.state.editInventoryItem ? this.state.editInventoryItem.name : null,\n                                rules: [{required: true, message: REQUIRED_FIELD_MESSAGE}]\n                            })\n                            (<Input placeholder=\"Item Name\" />)}\n                        </Form.Item>\n\n                        <Form.Item label=\"HSN\" {...formItemLayout}>\n                            {getFieldDecorator('code', {initialValue: this.state.editInventoryItem ? this.state.editInventoryItem.code : null})\n                            (<Input placeholder=\"HSN Number\" />)}\n                        </Form.Item>\n                        {this.state.manufacturerType && this.state.manufacturerType == INPUT_FIELD ? (\n                            <Form.Item key=\"manufacturer_extra\" label=\"Manufacturer\" {...formItemLayout}>\n                                {getFieldDecorator(\"manufacturer_extra\", {\n                                    initialValue: that.state.editPrescreption ? that.state.editPrescreption.manufacturer_extra : null,\n                                    rules: [{\n                                        required: true,\n                                        message: REQUIRED_FIELD_MESSAGE\n                                    }]\n                                })(\n                                    <Input />\n                                )}\n                                <a onClick={() => that.setFormParams('manufacturerType', SELECT_FIELD)}>Choose\n                                    Manufacturer\n                                </a>\n                            </Form.Item>\n                          )\n                            : (\n<Form.Item key=\"manufacturer\" {...formItemLayout} label=\"Manufacturer\">\n                                {getFieldDecorator(\"manufacturer\", {\n                                    initialValue: this.state.editInventoryItem ? this.state.editInventoryItem.manufacturer : null,\n                                })(\n                                    <Select>\n                                        {manufacturerOption.map((option) => (\n<Select.Option\n  value={option.value}\n>{option.label}\n</Select.Option>\n))}\n                                    </Select>\n                                )}\n                                <a onClick={() => that.setFormParams('manufacturerType', INPUT_FIELD)}>Add New\n                                    Manufacturer\n                                </a>\n</Form.Item>\n)}\n                        <Form.Item label=\"Stocking Unit\" {...formItemLayout}>\n                            {getFieldDecorator('stocking_unit', {\n                                initialValue: this.state.editInventoryItem ? this.state.editInventoryItem.stocking_unit : null,\n                                rules: [{required: true, message: REQUIRED_FIELD_MESSAGE}],\n                            })\n                            (<Input placeholder=\"Example: Bottles, Strips etc.\" />)}<p>(Make sure this is the same as the unit in which you dispense this item.)</p>\n                        </Form.Item>\n\n                        <Form.Item label=\"Re-Order Level\" {...formItemLayout}>\n                            {getFieldDecorator('re_order_level', {initialValue: this.state.editInventoryItem ? this.state.editInventoryItem.re_order_level : null})\n                            (<InputNumber placeholder=\"Re-Order Level\" />)}\n                        </Form.Item>\n                        <Form.Item label=\"Net Price\" {...formItemLayout}>\n                            {getFieldDecorator('retail_with_tax', {\n                                initialValue: this.state.editInventoryItem ? this.state.editInventoryItem.retail_with_tax : null,\n                                rules: [{\n                                    required: true,\n                                    message: REQUIRED_FIELD_MESSAGE\n                                }]\n                            })\n                            (<InputNumber onChange={this.changeNetPrice} />)}<span className=\"ant-form-text\">INR</span>\n                        </Form.Item>\n                        <Form.Item label=\"Tax\" {...formItemLayout}>\n                            {getFieldDecorator('taxes', {initialValue: this.state.editInventoryItem ? this.state.editInventoryItem.taxes : []})\n                            (<CheckboxGroup onChange={this.changeNetPrice}>\n                                {taxesOption.map((option) => (\n<Checkbox\n  value={option.value}\n>{option.label}\n</Checkbox>\n))}\n                             </CheckboxGroup>)}\n                        </Form.Item>\n                        <Form.Item label=\"Retail Price\" {...formItemLayout}>\n                            <span className=\"ant-form-text\"><b>{that.state.retail_price}</b>&nbsp;INR</span>\n                        </Form.Item>\n\n                        <Form.Item key=\"margin\" {...formItemLayout} label=\"MLM Margin\">\n                            {getFieldDecorator(\"margin\", {\n                                initialValue: this.state.editInventoryItem ? this.state.editInventoryItem.margin : null,\n                            })(\n                                <Select>\n                                    {this.state.productMargin.map((option) => (\n<Select.Option\n  value={option.id}\n>{option.name}\n</Select.Option>\n))}\n                                </Select>\n                            )}\n                        </Form.Item>\n                        <Form.Item label=\"Item Type\" {...formItemLayout}>\n                            {getFieldDecorator('item_type', {\n                                initialValue: this.state.editInventoryItem ? this.state.editInventoryItem.item_type : null,\n                                rules: [{required: true, message: REQUIRED_FIELD_MESSAGE}],\n                            })\n                            (<Select placeholder=\"Item Type\" onChange={this.onChangeHandeler}>\n                                {INVENTORY_ITEM_TYPE.map((option) => (\n<Select.Option\n  value={option.value}\n>{option.label}\n</Select.Option>\n))}\n                             </Select>)}\n                        </Form.Item>\n\n                        {this.state.type == DRUG ? (\n<div>\n                                <Form.Item label=\"I prescribe this\" {...formItemLayout}>\n                                    {getFieldDecorator('perscribe_this', {\n                                        valuePropName: 'checked',\n                                        initialValue: this.state.editInventoryItem ? this.state.editInventoryItem.perscribe_this : false\n                                    })\n                                    (<Checkbox />)}\n                                </Form.Item>\n                                {this.state.drugType && this.state.drugType == INPUT_FIELD ? (\n                                    <Form.Item key=\"drug_type_extra\" label=\"Medicine Type\" {...formItemLayout}>\n                                        {getFieldDecorator(\"drug_type_extra\", {\n                                            initialValue: that.state.editInventoryItem ? that.state.editInventoryItem.drug_type_extra : null,\n                                            rules: [{\n                                                required: true,\n                                                message: REQUIRED_FIELD_MESSAGE\n                                            }]\n                                        })(\n                                            <Input />\n                                        )}\n                                        <a onClick={() => that.setFormParams('drugType', SELECT_FIELD)}>Choose Medicine\n                                            Type\n                                        </a>\n                                    </Form.Item>\n                                  )\n                                    : (\n<Form.Item key=\"drug_type\" {...formItemLayout} label=\"Medicine Type\">\n                                        {getFieldDecorator(\"drug_type\", {\n                                            initialValue: this.state.editInventoryItem ? this.state.editInventoryItem.drug_type : null,\n                                            rules: [{\n                                                required: true,\n                                                message: REQUIRED_FIELD_MESSAGE\n                                            }]\n                                        })(\n                                            <Select>\n                                                {that.state.drugTypeList.map((option) => (\n<Select.Option\n  value={option.id}\n>{option.name}\n</Select.Option>\n))}\n                                            </Select>\n                                        )}\n                                        <a onClick={() => that.setFormParams('drugType', INPUT_FIELD)}>Add New Medicine\n                                            Type\n                                        </a>\n</Form.Item>\n)}\n                                <Form.Item label=\"Strength\" {...formItemLayout}>\n                                    {getFieldDecorator('strength', {initialValue: this.state.editInventoryItem ? this.state.editInventoryItem.strength : null})\n                                    (<InputNumber />)}\n                                </Form.Item>\n                                {this.state.drugUnit && this.state.drugUnit == INPUT_FIELD ? (\n                                    <Form.Item key=\"unit_type_extra\" label=\"Strength Unit\" {...formItemLayout}>\n                                        {getFieldDecorator(\"unit_type_extra\", {\n                                            initialValue: that.state.editInventoryItem ? that.state.editInventoryItem.unit_type_extra : null,\n                                            rules: [{\n                                                required: true,\n                                                message: REQUIRED_FIELD_MESSAGE\n                                            }]\n                                        })(\n                                            <Input />\n                                        )}\n                                        <a onClick={() => that.setFormParams('drugUnit', SELECT_FIELD)}>Choose Strength\n                                            Unit\n                                        </a>\n                                    </Form.Item>\n                                  )\n                                    : (\n<Form.Item key=\"stength_unit\" {...formItemLayout} label=\"Strength Unit\">\n                                        {getFieldDecorator(\"stength_unit\", {\n                                            initialValue: this.state.editInventoryItem ? this.state.editInventoryItem.stength_unit : null,\n                                            rules: [{\n                                                required: true,\n                                                message: REQUIRED_FIELD_MESSAGE\n                                            }]\n                                        })(\n                                            <Select>\n                                                {that.state.drugUnitList.map((option) => (\n<Select.Option\n  value={option.id}\n>{option.name}\n</Select.Option>\n))}\n                                            </Select>\n                                        )}\n                                        <a onClick={() => that.setFormParams('drugUnit', INPUT_FIELD)}>Add New Strength\n                                            Unit\n                                        </a>\n</Form.Item>\n)}\n                                <Form.Item label=\"Instructions\" {...formItemLayout}>\n                                    {getFieldDecorator('instructions', {initialValue: this.state.editInventoryItem ? this.state.editInventoryItem.instructions : null})\n                                    (<TextArea />)}\n                                </Form.Item>\n\n</div>\n)\n\n                            : null}\n                        {this.state.type == SUPPLIES ? (\n<div>\n                                <Form.Item label=\"I prescribe this\" {...formItemLayout}>\n                                    {getFieldDecorator('perscribe_this', {\n                                        valuePropName: 'checked',\n                                        initialValue: this.state.editInventoryItem ? this.state.editInventoryItem.perscribe_this : false\n                                    })\n                                    (<Checkbox />)}\n                                </Form.Item>\n                                <Form.Item label=\"Strength Unit\" {...formItemLayout}>\n                                    {getFieldDecorator('strength', {initialValue: this.state.editInventoryItem ? this.state.editInventoryItem.strength : null})\n                                    (<Input />)}\n                                </Form.Item>\n\n                                {this.state.drugUnit && this.state.drugUnit == INPUT_FIELD ? (\n                                    <Form.Item key=\"unit_type_extra\" label=\"Strength Unit\" {...formItemLayout}>\n                                        {getFieldDecorator(\"unit_type_extra\", {\n                                            initialValue: that.state.editInventoryItem ? that.state.editInventoryItem.unit_type_extra : null,\n                                            rules: [{\n                                                required: true,\n                                                message: REQUIRED_FIELD_MESSAGE\n                                            }]\n                                        })(\n                                            <Input />\n                                        )}\n                                        <a onClick={() => that.setFormParams('drugUnit', SELECT_FIELD)}>Choose Strength\n                                            Unit\n                                        </a>\n                                    </Form.Item>\n                                  )\n                                    : (\n<Form.Item key=\"stength_unit\" {...formItemLayout} label=\"Strength Unit\">\n                                        {getFieldDecorator(\"stength_unit\", {\n                                            initialValue: this.state.editInventoryItem ? this.state.editInventoryItem.stength_unit : null,\n                                            rules: [{\n                                                required: true,\n                                                message: REQUIRED_FIELD_MESSAGE\n                                            }]\n                                        })(\n                                            <Select>\n                                                {that.state.drugUnitList.map((option) => (\n<Select.Option\n  value={option.id}\n>{option.name}\n</Select.Option>\n))}\n                                            </Select>\n                                        )}\n                                        <a onClick={() => that.setFormParams('drugUnit', INPUT_FIELD)}>Add New Strength\n                                            Unit\n                                        </a>\n</Form.Item>\n)}\n\n                                <Form.Item label=\"Instructions\" {...formItemLayout}>\n                                    {getFieldDecorator('instructions', {initialValue: this.state.editInventoryItem ? this.state.editInventoryItem.instructions : null})\n                                    (<TextArea />)}\n                                </Form.Item>\n</div>\n)\n                            : null}\n                        {this.state.type == EQUIPMENT ? (\n<div>\n                                <Form.Item label=\"I prescribe this\" {...formItemLayout}>\n                                    {getFieldDecorator('perscribe_this', {\n                                        valuePropName: 'checked',\n                                        initialValue: this.state.editInventoryItem ? this.state.editInventoryItem.perscribe_this : null\n                                    })\n                                    (<Checkbox />)}\n                                </Form.Item>\n                                <Form.Item label=\"Instructions\" {...formItemLayout}>\n                                    {getFieldDecorator('instructions', {initialValue: this.state.editInventoryItem ? this.state.editInventoryItem.instructions : null})\n                                    (<TextArea />)}\n                                </Form.Item>\n</div>\n)\n\n                            : null}\n\n                        <Form.Item>\n                            <Button style={{margin: 5}} type=\"primary\" htmlType=\"submit\">\n                                Submit\n                            </Button>\n                            {that.props.history ? (\n                                <Button style={{margin: 5}} onClick={() => that.props.history.goBack()}>\n                                    Cancel\n                                </Button>\n                              ) : null}\n                        </Form.Item>\n\n\n                    </Form>\n                </Col>\n            </Row>\n            {this.state.redirect && <Redirect to=\"/inventory\" />}\n</Card>\n)\n\n    }\n}\n\nexport default Form.create()(AddorEditInventoryItem);\n","import React from \"react\";\nimport {\n    Affix,\n    AutoComplete,\n    Button,\n    Card,\n    Col,\n    DatePicker, Divider,\n    Form,\n    Icon,\n    Input,\n    InputNumber,\n    List,\n    message,\n    Row,\n    Select, Spin,\n    Table,\n    Tabs,\n    Upload\n} from \"antd\";\nimport moment from \"moment\";\nimport {displayMessage, getAPI, interpolate, makeURL, postAPI} from \"../../../utils/common\";\n\nimport {ADD_STOCK, CONSUME_STOCK, INVENTORY_ITEM_TYPE, TYPE_OF_CONSUMPTION} from \"../../../constants/hardData\";\nimport {\n    BULK_STOCK_ENTRY,\n    FILE_UPLOAD_API,\n    INVENTORY_ITEM_API,\n    SEARCH_THROUGH_QR,\n    SUPPLIER_API\n} from \"../../../constants/api\";\n\nconst {Search} = Input;\nconst {MonthPicker} = DatePicker;\nconst {TabPane} = Tabs;\n\nconst tableFormFields = {\n    _id: null,\n    quantity: 0,\n    batch: null\n};\n\nclass AddOrConsumeStock extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            items: {},\n            classType: props.type,\n            tableFormValues: [],\n            maxQuantityforConsume: {},\n            searchStrings: {},\n            tempValues: {},\n            supplierList: [],\n            customSupplier: false,\n            qrValue: '',\n            loading: true,\n        }\n        this.loadSupplierList = this.loadSupplierList.bind(this);\n    }\n\n    componentDidMount() {\n        this.loadInventoryItemList();\n        this.loadSupplierList();\n    }\n\n    changeSupplierType = (value) => {\n        this.setState({\n            customSupplier: !!value\n        })\n    }\n\n    loadSupplierList() {\n        const that = this;\n        const params = {practice: this.props.active_practiceId}\n        const successFn = function (data) {\n            that.setState({\n                supplierList: data\n            })\n        }\n        const errorFn = function () {\n\n        }\n        getAPI(interpolate(SUPPLIER_API, [this.props.active_practiceId]), successFn, errorFn, params);\n        // getAPI(SUPPLIER_API, successFn, errorFn, {\n        //     practice: this.props.active_practiceId\n        // })\n    }\n\n    loadInventoryItemList() {\n        const that = this;\n        INVENTORY_ITEM_TYPE.forEach(function (type) {\n            that.loadItemsList(type.value)\n        });\n    }\n\n    loadItemsList = (type, page = 1) => {\n        const that = this;\n        const successFn = function (recData) {\n            const data = recData;\n            that.setState(function (prevState) {\n                return {\n                    items: {\n                        ...prevState.items,\n                        [type]: {...prevState.items[type], ...data},\n                    },\n                    loading: false,\n                }\n            });\n        }\n        const errorFn = function () {\n        }\n        const params = {\n            maintain_inventory: true,\n            practice: this.props.active_practiceId,\n            item_type: type,\n            page\n        }\n        if (that.state.searchStrings[type]) {\n            params.item_name = that.state.searchStrings[type]\n        }\n        getAPI(INVENTORY_ITEM_API, successFn, errorFn, params);\n    }\n\n    remove = (k) => {\n        this.setState(function (prevState) {\n            const newTableFormValues = [];\n            prevState.tableFormValues.forEach(function (formValue) {\n                if (formValue._id != k)\n                    newTableFormValues.push(formValue);\n            });\n            // console.log(prevState.tableFormValues, k);\n            return {\n                tableFormValues: newTableFormValues\n            }\n        });\n    }\n\n    add = (item, randId = Math.random().toFixed(7)) => {\n        this.setState(function (prevState) {\n            return {\n                tableFormValues: [{\n                    ...tableFormFields,\n                    ...item,\n                    _id: randId,\n                }, ...prevState.tableFormValues]\n            }\n        });\n    };\n\n    handleSubmit = (e) => {\n        const that = this;\n        this.setState({\n            loading: true,\n        });\n        if (e.keyCode == 13) {\n            return false;\n        }\n        e.preventDefault();\n        this.props.form.validateFields((err, values) => {\n            if (!err) {\n                const reqData = [];\n\n                that.state.tableFormValues.forEach(function (item) {\n                    let itemObject = {\n                        item_add_type: that.state.classType,\n                        inventory_item: item.id,\n                        remarks : values.remarks,\n                        quantity: values.quantity[item._id],\n                        batch_number: values.batch[item._id],\n                        date: moment(values.date).format('YYYY-MM-DD'),\n                        bill_number: values.bill_number,\n                        bill_file: values.file && values.file.file.response ? values.file.file.response.image_path : null\n                    };\n\n                    if (that.state.classType == ADD_STOCK) {\n                        itemObject = {\n                            ...itemObject,\n                            expiry_date: moment(values.expiry_date[item._id]).format('YYYY-MM-DD'),\n                            unit_cost: values.unit_cost[item._id],\n                            total_cost: values.unit_cost[item._id] * values.quantity[item._id],\n                        }\n                        if (values.supplier) {\n                            itemObject.supplier = values.supplier;\n                        } else if (values.supplier_name) {\n                            itemObject.supplier_name = values.supplier_name;\n                        }\n                    } else if (that.state.classType == CONSUME_STOCK) {\n                        itemObject.type_of_consumption = values.type_of_consumption;\n                    }\n                    reqData.push(itemObject);\n                });\n                reqData.date = moment(values.date).isValid() ? moment(values.date).format() : null;\n                if (that.state.customSupplier) {\n                    reqData.supplier_name = values.supplier_name;\n                } else {\n                    reqData.supplier = values.supplier;\n                }\n                const successFn = function (data) {\n\n                    displayMessage(\"Inventory updated successfully\");\n                    that.props.loadData();\n                    that.props.history.replace('/inventory');\n                };\n                const errorFn = function () {\n                    that.setState({\n                        loading: false,\n                    });\n                };\n                postAPI(BULK_STOCK_ENTRY, reqData, successFn, errorFn);\n            }\n        });\n    };\n\n    changeMaxQuantityforConsume(recordId, batch) {\n        this.setState(function (prevState) {\n            const newMaxQuantityforConsume = {...prevState.maxQuantityforConsume}\n            prevState.tableFormValues.forEach(function (formValue) {\n                if (formValue._id == recordId)\n                    formValue.item_type_stock.item_stock.forEach(function (stock) {\n                        if (stock.batch_number == batch)\n                            newMaxQuantityforConsume[recordId] = stock.quantity || 0\n                    })\n            });\n            return {\n                maxQuantityforConsume: newMaxQuantityforConsume\n            }\n        });\n    }\n\n    searchValues = (type, value) => {\n        const that = this;\n        this.setState(function (prevState) {\n            const searchValues = {...prevState.searchStrings};\n            searchValues[type] = value;\n            return {searchStrings: searchValues}\n        }, function () {\n            that.loadItemsList(type);\n        });\n    }\n\n    filterValues = (type) => {\n        this.setState(function (prevState) {\n            let filteredItemOfGivenType = [];\n            if (prevState.items[type]) {\n                if (prevState.searchStrings[type]) {\n                    prevState.items[type].forEach(function (item) {\n                        if (item.name\n                            .toString()\n                            .toLowerCase()\n                            .includes(prevState.searchStrings[type].toLowerCase())) {\n                            filteredItemOfGivenType.push(item);\n                        }\n                    });\n                } else {\n                    filteredItemOfGivenType = prevState.items[type];\n                }\n            }\n            return {\n                filteredItems: {...prevState.filteredItems, [type]: filteredItemOfGivenType}\n            }\n        });\n    }\n\n    storeValue = (type, id, value) => {\n        const that = this;\n        this.setState(function (prevState) {\n            return {tempValues: {...prevState.tempValues, [type.toString() + id.toString()]: value}}\n        });\n        if (type == 'batch') {\n            const {setFieldsValue} = that.props.form;\n            that.state.tableFormValues.forEach(function (item) {\n                if (item._id == id) {\n                    if (item.item_type_stock.batch_number) {\n                        item.item_type_stock.batch_number.forEach(function (batch) {\n                            setFieldsValue({[`expiry_date[${id}]`]: batch.expiry_date && moment(batch.expiry_date).isValid() ? moment(batch.expiry_date) : null});\n                        })\n                    }\n                }\n            })\n\n        }\n    }\n\n    addItemThroughQR = (value) => {\n        const that = this;\n        that.setState({\n            loadingQr: true,\n        });\n        const qrSplitted = value.split('*');\n        const successFn = function (data) {\n            const item = data;\n            const {setFieldsValue, getFieldsValue, getFieldValue} = that.props.form;\n            const randomId = Math.random().toFixed(7);\n            let flag = true\n            that.state.tableFormValues.forEach(function (row) {\n                if (row.item_name == qrSplitted[0]) {\n                    const {_id} = row;\n                    const batch = getFieldsValue(`batch[${_id}]`);\n                    if (batch == qrSplitted[3]) {\n                        const quantity = getFieldsValue(`quantity[${_id}]`);\n                        flag = false\n                        setFieldsValue({\n                            [`quantity[${_id}]`]: quantity + 1\n                        });\n                        that.storeValue('quantity', _id, value);\n                    }\n                }\n            })\n            if (flag) {\n                that.add(data, randomId);\n                that.storeValue('batch', randomId, qrSplitted[1]);\n                that.storeValue('unit_cost', randomId, qrSplitted[3]);\n                const fieldsToBeSet = {\n                    [`batch[${randomId}]`]: qrSplitted[1],\n                    [`expiry_date[${randomId}]`]: moment(qrSplitted[2], 'MM/YY')\n                };\n                if (that.state.classType == CONSUME_STOCK)\n                    fieldsToBeSet[`unit_cost[${randomId}]`] = qrSplitted[3]\n                setFieldsValue(fieldsToBeSet)\n            }\n            console.log(getFieldsValue(), {\n                [`batch[${randomId}]`]: qrSplitted[0]\n            });\n            that.setState(function (prevState) {\n\n                // if (prevState.items && prevState.items[INVENTORY]) {\n                //     prevState.items[INVENTORY].forEach(function (inventItem) {\n                //         console.log(item.inventory_item)\n                //         if (inventItem.id == item.inventory_item) {\n                //             console.log(inventItem);\n                //             that.add({...inventItem, item_type: INVENTORY});\n                //\n                //         }\n                //     })\n                // }\n                return {\n                    loadingQr: false,\n                    qrValue: ''\n                }\n            });\n        }\n        const errorFn = function () {\n\n        }\n        getAPI(SEARCH_THROUGH_QR, successFn, errorFn, {qr: value, form: 'Inventory'})\n    }\n\n    setQrValue = (e) => {\n        const {value} = e.target;\n        this.setState({\n            qrValue: value\n        })\n    }\n\n    render() {\n        const that = this;\n        const {getFieldDecorator} = this.props.form;\n        const formItemLayout = {\n            labelCol: {\n                xs: {span: 24},\n                sm: {span: 4},\n            },\n            wrapperCol: {\n                xs: {span: 24},\n                sm: {span: 20},\n            },\n        };\n        const formItemLayoutWithOutLabel = {\n            labelCol: {\n                xs: {span: 24},\n                sm: {span: 4},\n            },\n            wrapperCol: {\n                xs: {span: 24},\n                sm: {span: 20},\n            },\n        };\n        const singleUploadprops = {\n            name: 'image',\n            data: {\n                name: 'hello'\n            },\n            action: makeURL(FILE_UPLOAD_API),\n            headers: {\n                authorization: 'authorization-text',\n            },\n            onChange(info) {\n                if (info.file.status !== 'uploading') {\n\n                }\n                if (info.file.status === 'done') {\n                    message.success(`${info.file.name} file uploaded successfully`);\n                } else if (info.file.status === 'error') {\n                    message.error(`${info.file.name} file upload failed.`);\n                }\n            },\n        };\n        getFieldDecorator('keys', {initialValue: []});\n        let consumeRow = [{\n            title: 'Item Name',\n            key: 'item_name',\n            dataIndex: 'name'\n        }];\n        if (this.state.classType == ADD_STOCK) {\n            consumeRow = consumeRow.concat([{\n                title: 'Quantity',\n                key: 'quantity',\n                dataIndex: 'quantity',\n                render: (item, record) => (\n<Form.Item\n  key={`quantity[${record._id}]`}\n  {...formItemLayout}\n>\n                    {getFieldDecorator(`quantity[${record._id}]`, {\n                        validateTrigger: ['onChange', 'onBlur'],\n                        rules: [{\n                            required: true,\n                            message: \"This field is required.\",\n                        }],\n                    })(\n                        <InputNumber\n                          min={0}\n                          placeholder=\"quantity\"\n                          onChange={(value) => this.storeValue('quantity', record._id, value)}\n                        />\n                    )}\n</Form.Item>\n)\n            }, {\n                title: 'Batch',\n                key: 'batch',\n                dataIndex: 'batch',\n                render: (item, record) => (\n<Form.Item\n  key={`batch[${record._id}]`}\n  {...formItemLayout}\n>\n                    {getFieldDecorator(`batch[${record._id}]`, {\n                        validateTrigger: ['onChange', 'onBlur'],\n                        rules: [{\n                            required: true,\n                            message: \"This field is required.\",\n                        }],\n                    })(\n                        <AutoComplete\n                          placeholder=\"Batch Number\"\n                          onChange={(value) => this.storeValue('batch', record._id, value)}\n                          dataSource={record.item_type_stock && record.item_type_stock.item_stock ? record.item_type_stock.item_stock.map(itemStock => itemStock.batch_number ? itemStock.batch_number : '--') : []}\n                        />\n                    )}\n</Form.Item>\n)\n            }, {\n                title: 'Expiry Date',\n                key: 'expiry',\n                dataIndex: 'expiry',\n                render: (item, record) => (\n<Form.Item\n  key={`expiry_date[${record._id}]`}\n  {...formItemLayout}\n>\n                    {getFieldDecorator(`expiry_date[${record._id}]`, {\n                        rules: [{\n                            required: true,\n                            message: \"This field is required.\",\n                        }],\n                        initialValue: moment(new Date())\n                    })(\n                        <MonthPicker allowClear={false} />\n                    )}\n</Form.Item>\n)\n            }, {\n                title: 'Unit Cost',\n                key: 'unit_cost',\n                dataIndex: 'unit_cost',\n                render: (item, record) => (\n<Form.Item\n  key={`unit_cost[${record._id}]`}\n  {...formItemLayout}\n>\n                    {getFieldDecorator(`unit_cost[${record._id}]`, {\n                        // validateTrigger: ['onChange', 'onBlur'],\n                        rules: [{\n                            required: true,\n                            message: \"This field is required.\",\n                        }],\n                    })(\n                        <InputNumber\n                          placeholder=\"Unit Cost\"\n                          onChange={(value) => this.storeValue('unit_cost', record._id, value)}\n                        />\n                    )}\n</Form.Item>\n)\n            }, {\n                title: 'Total Cost',\n                key: 'total_cost',\n                dataIndex: 'total_cost',\n                render: (item, record) =>\n                    <span>{this.state.tempValues[`unit_cost${  record._id}`] && this.state.tempValues[`quantity${  record._id}`] ? this.state.tempValues[`unit_cost${  record._id}`] * this.state.tempValues[`quantity${  record._id}`] : '--'}</span>\n            }]);\n        } else if (this.state.classType == CONSUME_STOCK) {\n            consumeRow = consumeRow.concat([{\n                title: 'Batch',\n                key: 'batch',\n                dataIndex: 'batch',\n                render: (item, record) => (\n<Form.Item\n  key={`batch[${record._id}]`}\n  {...formItemLayout}\n>\n                    {getFieldDecorator(`batch[${record._id}]`, {\n                        validateTrigger: ['onChange', 'onBlur'],\n                        rules: [{\n                            required: true,\n                            message: \"This field is required.\",\n                        }],\n                    })(\n                        <Select\n                          placeholder=\"Batch Number\"\n                          onChange={(value) => that.changeMaxQuantityforConsume(record._id, value)}\n                        >\n                            {record.item_type_stock && record.item_type_stock.item_stock && record.item_type_stock.item_stock.map(stock => (\n                                <Select.Option value={stock.batch_number}>\n                                    #{stock.batch_number} ({stock.quantity})\n                                </Select.Option>\n                              ))}\n                        </Select>\n                    )}\n</Form.Item>\n)\n            }, {\n                title: 'Quantity',\n                key: 'quantity',\n                dataIndex: 'quantity',\n                render: (item, record) => (\n<Form.Item\n  key={`quantity[${record._id}]`}\n  {...formItemLayout}\n>\n                    {getFieldDecorator(`quantity[${record._id}]`, {\n                        validateTrigger: ['onChange', 'onBlur'],\n                        rules: [{\n                            required: true,\n                            message: \"This field is required.\",\n                        }],\n                    })(\n                        <InputNumber min={0} max={this.state.maxQuantityforConsume[record._id]} placeholder=\"quantity\" />\n                    )}\n</Form.Item>\n)\n            },]);\n        }\n        consumeRow = consumeRow.concat([{\n            title: 'Action',\n            key: '_id',\n            dataIndex: '_id',\n            render: (value, record) => <a onClick={() => that.remove(record._id)}>Delete</a>\n        }]);\n        return (\n<div>\n            <Spin spinning={this.state.loading}>\n                <Card\n                  title={`${this.state.classType  } Stock`}\n                  extra={(\n                    <Search\n                      loading={this.state.loadingQr}\n                      value={this.state.qrValue}\n                      onChange={this.setQrValue}\n                      placeholder=\"Search QR Code\"\n                      onSearch={this.addItemThroughQR}\n                      style={{width: 200}}\n                    />\n                  )}\n                >\n                    <Row gutter={16}>\n                        <Col span={7}>\n                            <Tabs size=\"small\" type=\"card\">\n                                {INVENTORY_ITEM_TYPE.map(itemType => (\n<TabPane tab={itemType.label} key={itemType.value}>\n                                    <div style={{backgroundColor: '#ddd', padding: 8}}>\n                                        <Input.Search\n                                          key={itemType.label}\n                                          placeholder={`Search in ${  itemType.label  }...`}\n                                          onSearch={value => this.searchValues(itemType.label, value)}\n                                        />\n                                    </div>\n                                    <List\n                                      size=\"small\"\n                                      itemLayout=\"horizontal\"\n                                      dataSource={this.state.items && this.state.items[itemType.value] ? this.state.items[itemType.value].results : []}\n                                      renderItem={item => (\n                                              <List.Item>\n                                                  <List.Item.Meta\n                                                    title={`${item.name} (${item.total_quantity})`}\n                                                    description={item.item_type_stock.item_stock && item.item_type_stock.item_stock.map((stock) =>\n                                                          <span>#{stock.batch_number}<br /></span>)}\n                                                  />\n                                                  <Button\n                                                    type=\"primary\"\n                                                    size=\"small\"\n                                                    shape=\"circle\"\n                                                    onClick={() => this.add(item)}\n                                                    icon=\"arrow-right\"\n                                                  />\n                                              </List.Item>\n)}\n                                    />\n                                    {this.state.items && this.state.items[itemType.value] ? (\n                                        <div style={{textAlign: 'center'}}>\n                                            <a\n                                              style={{margin: 5}}\n                                              disabled={!this.state.items[itemType.value].previous}\n                                              onClick={() => this.loadItemsList(itemType.value, this.state.items[itemType.value].previous)}\n                                            >\n                                                <Icon type=\"left\" />Previous\n                                            </a>\n                                            <Divider type=\"vertical\" />\n                                            <a\n                                              style={{margin: 5}}\n                                              disabled={!this.state.items[itemType.value].next}\n                                              onClick={() => this.loadItemsList(itemType.value, this.state.items[itemType.value].next)}\n                                            >\n                                                Next<Icon type=\"right\" />\n                                            </a>\n                                        </div>\n                                      ) : null}\n</TabPane>\n))}\n                            </Tabs>\n                        </Col>\n                        <Col span={17}>\n                            <Form onSubmit={this.handleSubmit}>\n                                {this.state.classType == CONSUME_STOCK ? (\n                                    <Row>\n                                        <Col span={16}>\n                                            <Form.Item\n                                              key=\"type_of_consumption\"\n                                              label=\"Type of Consumption\"\n                                              {...{\n                                                    labelCol: {span: 6},\n                                                    wrapperCol: {span: 14},\n                                                }}\n                                            >\n                                                {getFieldDecorator(`type_of_consumption`, {\n                                                    validateTrigger: ['onChange', 'onBlur'],\n                                                    rules: [{\n                                                        required: true,\n                                                        message: \"This field is required.\",\n                                                    }],\n                                                })(\n                                                    <Select>\n                                                        {TYPE_OF_CONSUMPTION.map(item => (\n<Select.Option\n  value={item.value}\n>{item.label}\n</Select.Option>\n))}\n                                                    </Select>\n                                                )}\n                                            </Form.Item>\n                                        </Col>\n                                        {/* <Col span={8}> */}\n                                        {/* <Search */}\n                                        {/* loading={this.state.loadingQr} */}\n                                        {/* value={this.state.qrValue} */}\n                                        {/* onChange={this.setQrValue} */}\n                                        {/* placeholder=\"Search QR Code\" */}\n                                        {/* onSearch={this.addItemThroughQR} */}\n                                        {/* style={{width: 200}} */}\n                                        {/* /> */}\n                                        {/* </Col> */}\n                                    </Row>\n                                  )\n                                    : null}\n\n                                {/* {this.state.classType == CONSUME_STOCK ? */}\n                                {/* <Form.Item */}\n                                {/* key={`supplier`} */}\n                                {/* label={\"Supplier\"} */}\n                                {/* {...{ */}\n                                {/* labelCol: {span: 6}, */}\n                                {/* wrapperCol: {span: 14}, */}\n                                {/* }}> */}\n                                {/* {getFieldDecorator(`addedOn`, { */}\n                                {/* validateTrigger: ['onChange', 'onBlur'], */}\n                                {/* rules: [{ */}\n                                {/* message: \"This field is required.\", */}\n                                {/* }], */}\n                                {/* })( */}\n                                {/* <Select> */}\n                                {/* /!*{this.state.suppliersList && this.state.suppliersList.map(item =>*!/ */}\n                                {/* /!*<Select.Option*!/ */}\n                                {/* /!*value={item.id}>{item.name}</Select.Option>)}*!/ */}\n                                {/* </Select> */}\n                                {/* )} */}\n                                {/* </Form.Item> */}\n                                {/*: null} */}\n\n                                <Table\n                                  pagination={false}\n                                  bordered\n                                  rowKey={record => record._id}\n                                  dataSource={this.state.tableFormValues}\n                                  columns={consumeRow}\n                                />\n                                {/* <List>{formItems}</List> */}\n\n                                <Affix offsetBottom={0}>\n                                    <Card>\n                                        <Row>\n                                            <Col span={8}>\n                                                <Form.Item\n                                                  key=\"remarks\"\n                                                  label='Notes'\n                                                  {...{\n                                                        labelCol: {span: 24},\n                                                        wrapperCol: {span: 24},\n                                                    }}\n                                                >\n                                                    {getFieldDecorator(`remarks`, {\n                                                    })(\n                                                        <Input.TextArea />\n                                                    )}\n                                                </Form.Item>\n                                                <Form.Item {...formItemLayoutWithOutLabel}>\n                                                    <Button type=\"primary\" htmlType=\"submit\">Submit</Button>\n                                                    {that.props.history ? (\n                                                        <Button\n                                                          style={{margin: 5}}\n                                                          onClick={() => that.props.history.goBack()}\n                                                        >\n                                                            Cancel\n                                                        </Button>\n                                                      ) : null}\n                                                </Form.Item>\n                                            </Col>\n                                            <Col span={8}>\n                                                <Form.Item\n                                                  key=\"date\"\n                                                  label={this.state.classType == ADD_STOCK ? \"Added On\" : \"Consumed On\"}\n                                                  {...{\n                                                        labelCol: {span: 10},\n                                                        wrapperCol: {span: 14},\n                                                    }}\n                                                >\n                                                    {getFieldDecorator(`date`, {\n                                                        // validateTrigger: ['onChange', 'onBlur'],\n                                                        rules: [{\n                                                            required: true,\n                                                            message: \"This field is required.\",\n                                                        }],\n                                                        initialValue: moment(),\n                                                    })(\n                                                        <DatePicker allowClear={false} />\n                                                    )}\n                                                </Form.Item>\n\n                                                <Form.Item\n                                                  key=\"bill_number\"\n                                                  label='Bill Number'\n                                                  {...{\n                                                        labelCol: {span: 10},\n                                                        wrapperCol: {span: 14},\n                                                    }}\n                                                >\n                                                    {getFieldDecorator(`bill_number`, {\n                                                        validateTrigger: ['onChange', 'onBlur'],\n                                                        rules: [{\n                                                            required: true,\n                                                            message: \"This field is required.\",\n                                                        }],\n\n                                                    })(\n                                                        <Input />\n                                                    )}\n                                                </Form.Item>\n\n\n                                                {this.state.classType == ADD_STOCK ? (\n<div>\n                                                    {this.state.customSupplier ? (\n                                                        <Form.Item\n                                                          key=\"supplier_name\"\n                                                          label=\"Supplier\"\n                                                          {...{\n                                                                labelCol: {span: 10},\n                                                                wrapperCol: {span: 14},\n                                                            }}\n                                                        >\n                                                            {getFieldDecorator(`supplier_name`, {\n                                                                validateTrigger: ['onChange', 'onBlur'],\n                                                                rules: [{\n                                                                    required: true,\n                                                                    message: \"This field is required.\",\n                                                                }],\n                                                            })(\n                                                                <Input />\n                                                            )}\n                                                            {this.state.customSupplier ?\n                                                                <a onClick={() => this.changeSupplierType(false)}>Cancel</a> : null}\n                                                        </Form.Item>\n                                                      ) : (\n<Form.Item\n  key=\"supplier\"\n  label=\"Supplier\"\n  {...{\n                                                                labelCol: {span: 10},\n                                                                wrapperCol: {span: 14},\n                                                            }}\n>\n                                                            {getFieldDecorator(`supplier`, {\n                                                                validateTrigger: ['onChange', 'onBlur'],\n                                                                rules: [{\n                                                                    required: true,\n                                                                    message: \"This field is required.\",\n                                                                }],\n                                                            })(<Select>\n                                                                {this.state.supplierList.map(item => (\n<Select.Option\n  value={item.id}\n>\n                                                                    {item.name}\n</Select.Option>\n))}\n                                                               </Select>)}\n                                                            {this.state.customSupplier ? null : (\n                                                                <a onClick={() => this.changeSupplierType(true)}>Add\n                                                                    New\n                                                                </a>\n                                                              )}\n</Form.Item>\n)} \n</div>\n) : null}\n                                            </Col>\n                                            <Col span={6} offset={2}>\n                                                <Form.Item key=\"file\" {...formItemLayout}>\n                                                    {getFieldDecorator('file', {})(\n                                                        <Upload {...singleUploadprops}>\n                                                            <Button>\n                                                                <Icon type=\"upload\" /> Select File\n                                                            </Button>\n\n                                                        </Upload>\n                                                    )}\n                                                </Form.Item>\n                                            </Col>\n                                            {this.state.classType == ADD_STOCK ? (\n                                                <Col style={{textAlign: 'center'}} span={8}>\n\n                                                    <h3>Grand\n                                                        Total: <b>{this.state.tableFormValues.reduce(function (total, item) {\n                                                            if (that.state.tempValues[`quantity${  item._id}`] && that.state.tempValues[`unit_cost${  item._id}`]) {\n                                                                return total + (that.state.tempValues[`quantity${  item._id}`] * that.state.tempValues[`unit_cost${  item._id}`])\n                                                            }\n                                                            return total\n                                                        }, 0)}\n                                                               </b>\n                                                    </h3>\n                                                </Col>\n                                              )\n                                                : null}\n\n                                        </Row>\n                                    </Card>\n                                </Affix>\n\n                            </Form>\n\n                        </Col>\n                    </Row>\n                </Card>\n            </Spin>\n</div>\n)\n\n    }\n}\n\nexport default Form.create()(AddOrConsumeStock);\n","import React from 'react';\nimport {\n    Button,\n    Card,\n    Col,\n    Divider,\n    Icon,\n    Input,\n    Modal,\n    Popconfirm,\n    Radio,\n    Row,\n    Select,\n    Spin,\n    Statistic,\n    Table,\n    Tag,\n} from 'antd';\nimport { Link, Route, Switch } from 'react-router-dom';\nimport moment from 'moment';\nimport {\n    getAPI,\n    interpolate,\n    putAPI,\n    startLoadingMessage,\n    stopLoadingMessage,\n} from '../../../utils/common';\nimport {\n    INVENTORY_ITEM_API,\n    SINGLE_INVENTORY_ITEM_API,\n    INVENTORY_ITEM_EXPORT,\n    PRODUCT_MARGIN,\n    INVENTORY_STOCK_TOTAL_COST,\n} from '../../../constants/api';\nimport AddorEditInventoryItem from './AddorEditInventoryItem';\nimport AddOrConsumeStock from './AddOrConsumeStock';\nimport { ADD_STOCK, CONSUME_STOCK, INVENTORY_ITEM_TYPE } from '../../../constants/hardData';\nimport InfiniteFeedLoaderButton from '../../common/InfiniteFeedLoaderButton';\nimport PermissionDenied from '../../common/errors/PermissionDenied';\nimport { ASCENDING_ORDER, ERROR_MSG_TYPE, SUCCESS_MSG_TYPE } from '../../../constants/dataKeys';\nimport { BACKEND_BASE_URL } from '../../../config/connect';\n\nexport default class InventoryItemList extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            inventoryItems: [], // All List\n            inventoryItemList: [], // Filtered List\n            stockModalVisibility: false,\n            itemTypeFilter: 'ALL',\n            itemStockFilter: 'ALL',\n            loading: true,\n            nextItemPage: null,\n            productMargin: [],\n            inventoryModal: false,\n            inventoryItemObj: null,\n            inventoryTotal: null,\n        };\n        this.loadData = this.loadData.bind(this);\n        this.showAddOrConsumeModal = this.showAddOrConsumeModal.bind(this);\n        this.setActionType = this.setActionType.bind(this);\n        this.changeFilter = this.changeFilter.bind(this);\n        this.deleteObject = this.deleteObject.bind(this);\n        this.excelExport = this.excelExport.bind(this);\n        this.pdfExport = this.pdfExport.bind(this);\n    }\n\n    componentDidMount() {\n        this.loadData();\n        this.loadProductMargin();\n    }\n\n    loadProductMargin = () => {\n        const that = this;\n        const successFn = function(data) {\n            that.setState({\n                productMargin: data,\n            });\n        };\n        const errorFn = function() {};\n        getAPI(PRODUCT_MARGIN, successFn, errorFn);\n    };\n\n    loadInventoryTotal = () => {\n        const that = this;\n        const successFn = function(data) {\n            that.setState({\n                inventoryTotal: data.total_price,\n            });\n        };\n        const errorFn = function() {};\n        getAPI(INVENTORY_STOCK_TOTAL_COST, successFn, errorFn, {\n            practice: this.props.active_practiceId,\n        });\n    };\n\n    loadData(page = 1) {\n        const that = this;\n        that.setState({\n            loading: true,\n        });\n        that.loadInventoryTotal();\n        const successFn = function(recData) {\n            const data = recData.results;\n            that.setState(function(prevState) {\n                if (recData.current === 1) {\n                    return {\n                        inventoryItems: data,\n                        loading: false,\n                        nextItemPage: recData.next,\n                    };\n                }\n                return {\n                    inventoryItems: [...prevState.inventoryItems, ...data],\n                    loading: false,\n                    nextItemPage: recData.next,\n                };\n            });\n        };\n        const errorFn = function() {\n            that.setState({\n                loading: false,\n            });\n        };\n        const reqParams = {\n            maintain_inventory: true,\n            practice: this.props.active_practiceId,\n            page,\n            sort: ASCENDING_ORDER,\n            on: 'total_quantity',\n        };\n        if (that.state.itemTypeFilter !== 'ALL') {\n            reqParams.item_type = that.state.itemTypeFilter;\n        }\n        if (that.state.itemStockFilter !== 'ALL') {\n            reqParams.filter_type = that.state.itemStockFilter;\n        }\n        if (that.state.filterItemName) {\n            reqParams.item_name = that.state.filterItemName;\n        }\n        if (that.state.filterItemCode) {\n            reqParams.code = that.state.filterItemCode;\n        }\n        if (that.state.filterMLM) {\n            reqParams.margin = that.state.filterMLM;\n        }\n        getAPI(INVENTORY_ITEM_API, successFn, errorFn, reqParams);\n    }\n\n    deleteObject(value) {\n        const that = this;\n        const reqData = {\n            is_active: false,\n        };\n        const successFn = function() {\n            that.loadData();\n        };\n        const errorFn = function() {};\n        putAPI(interpolate(SINGLE_INVENTORY_ITEM_API, [value]), reqData, successFn, errorFn);\n    }\n\n    setActionType(type, itemId) {\n        this.setState({\n            itemId,\n            actionType: type,\n        });\n        this.showAddOrConsumeModal(true);\n    }\n\n    showAddOrConsumeModal(type) {\n        this.setState({\n            stockModalVisibility: type,\n        });\n    }\n\n    changeFilter = e => {\n        const that = this;\n        this.setState(\n            {\n                [e.target.name]: e.target.value,\n            },\n            function() {\n                that.loadData();\n            },\n        );\n    };\n\n    changeInventoryFilters = (key, value) => {\n        const that = this;\n        that.setState(\n            {\n                [key]: value,\n            },\n            function() {\n                that.loadData();\n            },\n        );\n    };\n\n    excelExport() {\n        const that = this;\n        const msg = startLoadingMessage('Generating Report...');\n        const successFn = function(data) {\n            stopLoadingMessage(msg, SUCCESS_MSG_TYPE, 'Report Generated Successfully!!');\n            if (data.report_csv) window.open(BACKEND_BASE_URL + data.report_csv);\n        };\n        const errorFn = function() {\n            stopLoadingMessage(msg, ERROR_MSG_TYPE, 'Report Generation Failed!!');\n        };\n        const reqParams = {\n            maintain_inventory: true,\n            practice: this.props.active_practiceId,\n            sort: ASCENDING_ORDER,\n            on: 'total_quantity',\n        };\n        if (that.state.itemTypeFilter !== 'ALL') {\n            reqParams.item_type = that.state.itemTypeFilter;\n        }\n        if (that.state.itemStockFilter !== 'ALL') {\n            reqParams.filter_type = that.state.itemStockFilter;\n        }\n        if (that.state.filterItemName) {\n            reqParams.item_name = that.state.filterItemName;\n        }\n        if (that.state.filterItemCode) {\n            reqParams.code = that.state.filterItemCode;\n        }\n        if (that.state.filterMLM) {\n            reqParams.margin = that.state.filterMLM;\n        }\n        getAPI(INVENTORY_ITEM_EXPORT, successFn, errorFn, reqParams);\n    }\n\n    pdfExport() {\n        const that = this;\n        const msg = startLoadingMessage('Generating Report...');\n        const successFn = function(data) {\n            stopLoadingMessage(msg, SUCCESS_MSG_TYPE, 'Report Generated Successfully!!');\n            if (data.report_pdf) window.open(BACKEND_BASE_URL + data.report_pdf);\n        };\n        const errorFn = function() {\n            stopLoadingMessage(msg, ERROR_MSG_TYPE, 'Report Generation Failed!!');\n        };\n        const reqParams = {\n            maintain_inventory: true,\n            practice: this.props.active_practiceId,\n            sort: ASCENDING_ORDER,\n            on: 'total_quantity',\n        };\n        if (that.state.itemTypeFilter !== 'ALL') {\n            reqParams.item_type = that.state.itemTypeFilter;\n        }\n        if (that.state.itemStockFilter !== 'ALL') {\n            reqParams.filter_type = that.state.itemStockFilter;\n        }\n        if (that.state.filterItemName) {\n            reqParams.item_name = that.state.filterItemName;\n        }\n        if (that.state.filterItemCode) {\n            reqParams.code = that.state.filterItemCode;\n        }\n        if (that.state.filterMLM) {\n            reqParams.margin = that.state.filterMLM;\n        }\n        getAPI(INVENTORY_ITEM_EXPORT, successFn, errorFn, reqParams);\n    }\n\n    inventoryItemModalOpen = item => {\n        this.setState({\n            inventoryModal: true,\n            inventoryItemObj: item,\n        });\n    };\n\n    inventoryItemModalClose = () => {\n        this.setState({\n            inventoryModal: false,\n        });\n    };\n\n    render() {\n        const taxesdata = {};\n        if (this.state.taxes_list) {\n            this.state.taxes_list.forEach(function(tax) {\n                taxesdata[tax.id] = tax;\n            });\n        }\n        const manufacturerData = {};\n        if (this.state.manufacture_list) {\n            this.state.manufacture_list.forEach(function(manufacturer) {\n                manufacturerData[manufacturer.id] = manufacturer.name;\n            });\n        }\n        const vendorData = {};\n        if (this.state.vendor_list) {\n            this.state.vendor_list.forEach(function(vendor) {\n                vendorData[vendor.id] = vendor.name;\n            });\n        }\n        const that = this;\n        const columns = [\n            {\n                title: 'Name',\n                dataIndex: 'name',\n                key: 'name',\n                render: (value, record) => (\n                    <a onClick={() => this.inventoryItemModalOpen(record)}>\n                        <span>{record.name}</span>\n                    </a>\n                ),\n            },\n            {\n                title: 'HSN',\n                dataIndex: 'code',\n                key: 'code',\n                // render: (value,record) => <span>{record.inventory_item.code}</span>\n            },\n            {\n                title: 'Inventory Stock',\n                dataIndex: 'total_quantity',\n                key: 'total_quantity',\n                render: (value, record) => (\n                    <span>\n                        {value}{' '}\n                        {value <= record.re_order_level ? <Tag color=\"#f50\">Low</Tag> : null}\n                    </span>\n                ),\n            },\n            {\n                title: 'Expired Stock',\n                dataIndex: 'item_type_stock',\n                key: 'expired_stock',\n                export(itemTypeStock) {\n                    let totalStock = 0;\n                    const currentDate = moment();\n                    if (itemTypeStock.item_stock)\n                        itemTypeStock.item_stock.forEach(function(stock) {\n                            if (currentDate >= moment(stock.expiry_date, 'YYYY-MM-DD'))\n                                totalStock += Number.isInteger(stock.quantity) ? stock.quantity : 0;\n                        });\n                    return totalStock;\n                },\n                render(itemTypeStock) {\n                    let totalStock = 0;\n                    const currentDate = moment();\n                    if (itemTypeStock.item_stock)\n                        itemTypeStock.item_stock.forEach(function(stock) {\n                            if (currentDate >= moment(stock.expiry_date, 'YYYY-MM-DD'))\n                                totalStock += Number.isInteger(stock.quantity) ? stock.quantity : 0;\n                        });\n                    return <span>{totalStock}</span>;\n                },\n            },\n            {\n                title: 'Retail Price (INR)',\n                dataIndex: 'retail_without_tax',\n                key: 'retail_without_tax',\n                render: (value, record) => <span>{record.retail_without_tax}</span>,\n            },\n            {\n                title: 'Tax',\n                dataIndex: 'taxes',\n                key: 'taxes',\n                render: (value, record) => (\n                    <span>\n                        {record.taxes_data &&\n                            record.taxes_data.map(tax => (\n                                <Tag>\n                                    <small> {tax ? `${tax.name}@${tax.tax_value}%` : null}</small>\n                                </Tag>\n                            ))}\n                    </span>\n                ),\n            },\n            {\n                title: 'MLM Margin',\n                dataIndex: 'margin_data',\n                key: 'margin',\n                render: margin => <span>{margin ? margin.name : null}</span>,\n            },\n            {\n                title: 'Item type',\n                dataIndex: 'item_type',\n                key: 'item_type',\n                // render: (value,record) => <span>{record.inventory_item.item_type}</span>\n            },\n            {\n                title: 'Reorder Level',\n                dataIndex: 're_order_level',\n                key: 're_order_level',\n                // render: (value, record) => <span>{record.inventory_item.re_order_level}</span>\n            },\n            {\n                title: 'Manufacturer',\n                key: 'manufacturer',\n                export(text, record) {\n                    return record.manufacturer_data ? record.manufacturer_data.name : '';\n                },\n                render: (text, record) => (\n                    <span> {record.manufacturer_data ? record.manufacturer_data.name : ''}</span>\n                ),\n            },\n            {\n                title: 'Stock Cost (INR)',\n                key: 'stock_cost',\n                // export: function (text, record) {\n                //     return record.manufacturer_data ? record.manufacturer_data.name : '';\n                // },\n                render: (text, record) => (\n                    <span>\n                        {' '}\n                        {record.item_type_stock && record.item_type_stock.item_stock\n                            ? record.item_type_stock.item_stock.reduce(\n                                  (a, b) => a + b.unit_cost * b.quantity,\n                                  0,\n                              )\n                            : ''}\n                    </span>\n                ),\n            },\n            {\n                title: 'Actions',\n                render: item => {\n                    return (\n                        <div>\n                            <Link to={`/inventory/edit/${item.id}`}>Edit</Link>\n                            <Divider type=\"vertical\" />\n                            {/* <Link to={\"/inventory/edit-item-type/\" + item.id}>Edit stock type </Link>\n                        <Divider type=\"vertical\"/> */}\n                            {item.total_quantity === 0 ? (\n                                <Popconfirm\n                                  title=\"Are you sure delete this item?\"\n                                  onConfirm={() => that.deleteObject(item.id)}\n                                  okText=\"Yes\"\n                                  cancelText=\"No\"\n                                >\n                                    <a>Delete</a>\n                                </Popconfirm>\n                            ) : (\n                                <Tag color=\"red\">Can Not Delete</Tag>\n                            )}\n                        </div>\n                    );\n                },\n            },\n        ];\n\n        const inventoryItemColumn = [\n            {\n                title: 'S.No',\n                key: 's_no',\n                render: (item, record, index) => <span>{index + 1}</span>,\n            },\n            {\n                title: 'Batch Number',\n                dataIndex: 'batch_number',\n                key: 'batch_number',\n            },\n            {\n                title: 'Quantity',\n                dataIndex: 'quantity',\n                key: 'quantity',\n            },\n            {\n                title: 'Stock Cost(INR)',\n                key: 'stock_cost',\n                render: (item, record) => (\n                    <span>{(record.quantity * record.unit_cost).toFixed(2)}</span>\n                ),\n            },\n            {\n                title: 'Expiry Date',\n                key: 'expiry_date',\n                render: (item, record) => (\n                    <span>{moment(record.expiry_date).format('DD-MM-YYYY')}</span>\n                ),\n            },\n        ];\n        return (\n            <div>\n                <Switch>\n                    <Route\n                      path=\"/inventory/add\"\n                      render={route =>\n                            that.props.activePracticePermissions.AddInventoryItem ||\n                            that.props.allowAllPermissions ? (\n                                <AddorEditInventoryItem\n                                  {...route}\n                                  {...this.props}\n                                  {...this.state}\n                                  loadData={this.loadData}\n                                />\n                            ) : (\n                                <PermissionDenied />\n                            )}\n                    />\n\n                    {/* <Route path=\"/inventory/edit-item-type/:id\"\n                       render={(route) => <AddOrConsumeStock key={ADD_STOCK}\n                       type={ADD_STOCK}\n                       loadData={this.loadData}\n                       {...this.state} {...route} {...this.props}/>}/> */}\n\n                    <Route\n                      exact\n                      path=\"/inventory/edit/:id\"\n                      render={route =>\n                            that.props.activePracticePermissions.AddInventoryItem ||\n                            that.props.allowAllPermissions ? (\n                                <AddorEditInventoryItem\n                                  {...this.state}\n                                  {...this.props}\n                                  {...route}\n                                  loadData={this.loadData}\n                                />\n                            ) : (\n                                <PermissionDenied />\n                            )}\n                    />\n\n                    <Route\n                      exact\n                      path=\"/inventory/consume-stock\"\n                      render={route =>\n                            that.props.activePracticePermissions.AddInventoryStock ||\n                            that.props.allowAllPermissions ? (\n                                <AddOrConsumeStock\n                                  key={CONSUME_STOCK}\n                                  type={CONSUME_STOCK}\n                                  loadData={this.loadData}\n                                  {...this.state}\n                                  {...route}\n                                  {...this.props}\n                                />\n                            ) : (\n                                <PermissionDenied />\n                            )}\n                    />\n\n                    <Route\n                      exact\n                      path=\"/inventory/add-stock\"\n                      render={route =>\n                            that.props.activePracticePermissions.ConsumeInventoryStock ||\n                            that.props.allowAllPermissions ? (\n                                <AddOrConsumeStock\n                                  key={ADD_STOCK}\n                                  type={ADD_STOCK}\n                                  loadData={this.loadData}\n                                  {...this.state}\n                                  {...route}\n                                  {...this.props}\n                                />\n                            ) : (\n                                <PermissionDenied />\n                            )}\n                    />\n                    <Route>\n                        <Card\n                          title=\"Inventory List\"\n                          extra={(\n                                <Button.Group>\n                                    <Link to=\"/inventory/add\">\n                                        <Button\n                                          type=\"primary\"\n                                          disabled={\n                                                !that.props.activePracticePermissions\n                                                    .AddInventoryItem &&\n                                                !that.props.allowAllPermissions\n                                            }\n                                        >\n                                            <Icon type=\"plus\" /> Add Item\n                                        </Button>\n                                    </Link>\n\n                                    <Link to=\"/inventory/add-stock\">\n                                        <Button\n                                          disabled={\n                                                !that.props.activePracticePermissions\n                                                    .AddInventoryStock &&\n                                                !that.props.allowAllPermissions\n                                            }\n                                          type=\"primary\"\n                                        >\n                                            Add Stock\n                                        </Button>\n                                    </Link>\n                                    <Link to=\"/inventory/consume-stock\">\n                                        <Button\n                                          disabled={\n                                                !that.props.activePracticePermissions\n                                                    .ConsumeInventoryStock &&\n                                                !that.props.allowAllPermissions\n                                            }\n                                          type=\"primary\"\n                                        >\n                                            Consume Stock\n                                        </Button>\n                                    </Link>\n                                </Button.Group>\n                              )}\n                        >\n                            <Row style={{ marginBottom: 10 }}>\n                                <Col span={8}>\n                                    <Radio.Group\n                                      name=\"itemTypeFilter\"\n                                      size=\"small\"\n                                      defaultValue=\"ALL\"\n                                      buttonStyle=\"solid\"\n                                      onChange={this.changeFilter}\n                                      style={{ margin: '10px' }}\n                                    >\n                                        <Radio.Button value=\"ALL\">ALL</Radio.Button>\n                                        {INVENTORY_ITEM_TYPE.map(item => (\n                                            <Radio.Button value={item.value}>\n                                                {item.label}\n                                            </Radio.Button>\n                                        ))}\n                                    </Radio.Group>\n                                </Col>\n                                <Col span={8} style={{ textAlign: 'center' }}>\n                                    <Statistic\n                                      title=\"Inventory Total Cost\"\n                                      value={this.state.inventoryTotal}\n                                      prefix=\"Rs.\"\n                                    />\n                                </Col>\n                                <Col span={8}>\n                                    <Radio.Group\n                                      name=\"itemStockFilter\"\n                                      size=\"small\"\n                                      defaultValue=\"ALL\"\n                                      buttonStyle=\"solid\"\n                                      style={{ margin: '10px', float: 'right' }}\n                                      onChange={this.changeFilter}\n                                    >\n                                        <Radio.Button value=\"ALL\">ALL</Radio.Button>\n                                        <Radio.Button value=\"Low\">Low</Radio.Button>\n                                        <Radio.Button value=\"Expired\">Expired</Radio.Button>\n                                    </Radio.Group>\n                                </Col>\n                            </Row>\n                            <Row gutter={16} style={{ marginBottom: 10 }}>\n                                <Col span={4}>\n                                    <Button.Group size=\"small\">\n                                        <Button\n                                          disabled={this.state.loading}\n                                          type=\"primary\"\n                                          onClick={this.excelExport}\n                                        >\n                                            <Icon type=\"file-excel\" /> Excel\n                                        </Button>\n                                        <Button\n                                          disabled={this.state.loading}\n                                          type=\"primary\"\n                                          onClick={this.pdfExport}\n                                        >\n                                            <Icon type=\"file-pdf\" /> PDF\n                                        </Button>\n                                    </Button.Group>\n                                </Col>\n\n                                <Col span={2} style={{ textAlign: 'right' }}>\n                                    <b> Item Name</b>\n                                </Col>\n                                <Col span={4}>\n                                    <Input\n                                      style={{ width: '100%' }}\n                                      value={this.state.filterItemName}\n                                      allowClear\n                                        // disabled={this.state.loading}\n                                      placeholder=\"Item Name\"\n                                      onChange={e =>\n                                            this.changeInventoryFilters(\n                                                'filterItemName',\n                                                e.target.value,\n                                            )}\n                                    />\n                                </Col>\n                                <Col span={2} style={{ textAlign: 'right' }}>\n                                    <b> HSN</b>\n                                </Col>\n                                <Col span={4}>\n                                    <Input\n                                      style={{ width: '100%' }}\n                                      value={this.state.filterItemCode}\n                                      allowClear\n                                        // disabled={this.state.loading}\n                                      placeholder=\"HSN Number\"\n                                      onChange={e =>\n                                            this.changeInventoryFilters(\n                                                'filterItemCode',\n                                                e.target.value,\n                                            )}\n                                    />\n                                </Col>\n                                <Col span={2} style={{ textAlign: 'right' }}>\n                                    <b> MLM</b>\n                                </Col>\n                                <Col span={4}>\n                                    <Select\n                                      style={{ width: '100%' }}\n                                      value={this.state.filterMLM}\n                                      allowClear\n                                        // disabled={this.state.loading}\n                                      placeholder=\"MLM Margin\"\n                                      onChange={e => this.changeInventoryFilters('filterMLM', e)}\n                                    >\n                                        {this.state.productMargin.map(item => (\n                                            <Select.Option value={item.id}>\n                                                {item.name}\n                                            </Select.Option>\n                                        ))}\n                                    </Select>\n                                </Col>\n                                {/* <Col span={8}> */}\n                                {/*    <Button type={\"primary\"} onClick={()=>this.loadData()}> Filter Items</Button> */}\n                                {/* </Col> */}\n                            </Row>\n\n                            <Row>\n                                <Table\n                                  bordered\n                                  pagination={false}\n                                  hideReport\n                                  dataSource={this.state.inventoryItems.sort(\n                                        (a, b) =>\n                                            parseInt(b.total_quantity) - parseInt(a.total_quantity),\n                                    )}\n                                  columns={columns}\n                                />\n                                <Spin spinning={this.state.loading}>\n                                    <Row />\n                                </Spin>\n                                <InfiniteFeedLoaderButton\n                                  loaderFunction={() => this.loadData(this.state.nextItemPage)}\n                                  loading={this.state.loading}\n                                  hidden={!this.state.nextItemPage}\n                                />\n                            </Row>\n                            <Modal\n                              visible={this.state.stockModalVisibility}\n                              title={`Stock${this.state.actionType}`}\n                              onOk={() => this.showAddOrConsumeModal(false)}\n                              onCancel={() => this.showAddOrConsumeModal(false)}\n                              footer={null}\n                            >\n                                <AddOrConsumeStock\n                                  showAddOrConsumeModal={this.showAddOrConsumeModal}\n                                  itemId={this.state.itemId}\n                                  actionType={this.state.actionType}\n                                />\n                            </Modal>\n\n                            <Modal\n                              title={\n                                    this.state.inventoryItemObj\n                                        ? `${this.state.inventoryItemObj.name} Details`\n                                        : ''\n                                }\n                              visible={this.state.inventoryModal}\n                              onCancel={this.inventoryItemModalClose}\n                              footer={null}\n                            >\n                                <Table\n                                  dataSource={\n                                        this.state.inventoryItemObj\n                                            ? this.state.inventoryItemObj.item_type_stock.item_stock\n                                            : []\n                                    }\n                                  columns={inventoryItemColumn}\n                                  pagination={false}\n                                />\n                            </Modal>\n                        </Card>\n                    </Route>\n                </Switch>\n            </div>\n        );\n    }\n}\n","import React from \"react\";\nimport {Layout} from \"antd\";\nimport {Route, Switch} from \"react-router-dom\";\nimport VendorList from \"./vendor/VendorList\";\nimport ExpensesList from \"./expenses/ExpensesList\";\nimport ManufactureList from \"./manufacture/ManufactureList\";\nimport LabList from \"./labs/LabList\";\nimport ActivityList from \"./activities/ActivityList\";\nimport InventoryItemList from \"./inventoryItem/InventoryItemList\";\nimport PermissionDenied from \"../common/errors/PermissionDenied\";\n\nconst {Content} = Layout;\nexport default class InventoryHome extends React.Component {\n    constructor(props) {\n        super(props);\n    }\n\n    render() {\n        const that =this;\n        return (\n<Content\n  className=\"main-container\"\n  style={{\n            margin: '24px 16px',\n            // padding: 24,\n            minHeight: 280,\n            // marginLeft: '200px'\n        }}\n>\n\n            <Switch>\n                <Route\n                  path=\"/inventory/vendor\"\n                  render={(route) =>(that.props.activePracticePermissions.ViewVendor || that.props.allowAllPermissions?\n                    <VendorList {...this.props} {...route} />:<PermissionDenied />)}\n                />\n                    \n                <Route\n                  path=\"/inventory/expenses\"\n                  render={(route) =>(that.props.activePracticePermissions.ViewExpenses || that.props.allowAllPermissions ?\n                    <ExpensesList {...this.props} {...route} />:<PermissionDenied />)}\n                />\n\n                <Route\n                  path=\"/inventory/manufacture\"\n                  render={(route) =>(that.props.activePracticePermissions.ViewManufacturer || that.props.allowAllPermissions?\n                    <ManufactureList {...that.props} {...this.state} {...route} />:<PermissionDenied />)}\n                />\n                <Route\n                  path=\"/inventory/lab\"\n                  render={(route) => (that.props.activePracticePermissions.Labs || that.props.allowAllPermissions ?\n                    <LabList {...this.props} />:<PermissionDenied />)}\n                />\n                <Route\n                  path=\"/inventory/activity\"\n                  render={(route) =>(that.props.activePracticePermissions.ViewActivities || that.props.allowAllPermissions ?\n                    <ActivityList {...this.props} {...route} />:<PermissionDenied />)}\n                />\n                <Route\n                  path=\"/inventory\"\n                  render={(route)=> (that.props.activePracticePermissions.ViewInventory || that.props.allowAllPermissions ?\n                    <InventoryItemList {...route} {...this.props} />:<PermissionDenied />)}\n                />\n            </Switch>\n</Content>\n)\n    }\n}\n","import jsPDF from 'jspdf';\nimport \"jspdf-autotable\";\n\nexport const exportToExcel = function (columns, dataArray, fileName = \"download\") {\n    const str = makeCSVString(columns, dataArray);\n    downloadCSV(str, fileName)\n}\n\nexport const makeCSVString = function (columns, dataArray, printColumn = true) {\n    let str = '';\n    let line = [];\n    if (printColumn) {\n        columns.forEach(function (column) {\n            line.push(column);\n        });\n        str += line.join(',');\n        str += '\\r\\n';\n    }\n    dataArray.forEach(function (dataRow) {\n        line = [];\n        columns.forEach(function (column) {\n            if (dataRow[column])\n                line.push(dataRow[column]);\n            else\n                line.push('--');\n        });\n\n        str += line.join(',');\n        str += '\\r\\n';\n    });\n    return str;\n}\n\nexport const downloadCSV = function (str, fileName) {\n    const fName = `${fileName  }.csv`;\n    let cCode; const bArr = [];\n    bArr.push(255, 254);\n    for (let i = 0; i < str.length; ++i) {\n        cCode = str.charCodeAt(i);\n        // eslint-disable-next-line\n        bArr.push(cCode & 0xff);\n        // eslint-disable-next-line\n        bArr.push(cCode / 256 >>> 0);\n    }\n\n    const blob = new Blob([new Uint8Array(bArr)], {type: 'text/csv;charset=UTF-16LE;'});\n    if (navigator.msSaveBlob) {\n        navigator.msSaveBlob(blob, fName);\n    } else {\n        const link = document.createElement(\"a\");\n        if (link.download !== undefined) {\n            const url = window.URL.createObjectURL(blob);\n            link.setAttribute(\"href\", url);\n            link.setAttribute(\"download\", fName);\n            link.style.visibility = 'hidden';\n            document.body.appendChild(link);\n            link.click();\n            document.body.removeChild(link);\n            window.URL.revokeObjectURL(url);\n        }\n    }\n    // window.open(\"data:text/csv;charset=utf-8,\" + encodeURI(str));\n}\n\nexport const exportToPDF = function (columns, dataArray, fileName) {\n    // eslint-disable-next-line\n    const pdf = new jsPDF('p', 'mm', 'a4');\n    addPDFHeader(pdf);\n\n\n    const rows = Object.create(dataArray);\n    pdf.autoTable(columns, rows, {\n        margin: {top: 35},\n        startY: pdf.autoTableEndPosY() + 20,\n        headerStyle: {\n            overflow: 'linebreak'\n        },\n        bodyStyles: {\n            overflow: 'linebreak'\n        }\n    });\n    addPDFFooter(pdf);\n    pdf.save(`${fileName}.pdf`)\n}\n\nfunction addPDFHeader(pdf) {\n    pdf.line(10, 20, 200, 20);\n}\n\n\nfunction addPDFFooter(pdf) {\n    pdf.line(10, 270, 200, 270);\n    pdf.setFontSize(8);\n    pdf.text(10, 275, 'This is a computer generated report.');\n}\n","import React from \"react\";\nimport {Button, Col, Icon, Input, Modal, Row, Table, Tag} from \"antd\";\nimport moment from \"moment\";\nimport Highlighter from 'react-highlight-words';\nimport * as _ from \"lodash\";\nimport {exportToExcel, exportToPDF} from \"../../utils/export\";\nimport {interpolate} from \"../../utils/common\";\nimport {CLINIC_NOTES_PDF} from \"../../constants/api\";\nimport {sendMail} from \"../../utils/clinicUtils\";\n\nexport default class CustomizedTable extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            ...props,\n            searchText: '',\n        };\n        this.excelExport = this.excelExport.bind(this);\n        this.pdfExport = this.pdfExport.bind(this);\n    }\n\n    componentWillReceiveProps(newProps) {\n        if (newProps.columns != this.state.columns || newProps.dataSource != this.state.dataSource || newProps.loading != this.state.loading) {\n            this.setState({...newProps});\n        }\n    }\n\n    pdfExport() {\n        const that = this;\n        const excelColumns = [];\n            that.state.columns.forEach(function(item) {\n                if(!item.hideExport)\n                    excelColumns.push({title: item.title, dataKey: item.title})\n            });\n        const dataArrayForExcel = [];\n        that.state.dataSource.forEach(function (dataRow,index) {\n            const dataObjectToPush = {};\n            that.state.columns.forEach(function (column) {\n                if (column.export) {\n                    dataObjectToPush[column.title] = column.export(dataRow[column.dataIndex], dataRow,index);\n                } else {\n                    dataObjectToPush[column.title] = dataRow[column.dataIndex];\n                }\n            });\n            dataArrayForExcel.push(dataObjectToPush);\n        });\n        exportToPDF(excelColumns, dataArrayForExcel, `Export${  moment()}`, true);\n    }\n\n    excelExport() {\n        const that = this;\n        const excelColumns = [];\n        that.state.columns.forEach(function(item) {\n            if(!item.hideExport)\n                excelColumns.push(item.title)\n        });\n        const dataArrayForExcel = [];\n        that.state.dataSource.forEach(function (dataRow,index) {\n            const dataObjectToPush = {};\n            that.state.columns.forEach(function (column) {\n                if (column.export) {\n                    dataObjectToPush[column.title] = column.export(dataRow[column.dataIndex], dataRow,index);\n                } else {\n                    dataObjectToPush[column.title] = dataRow[column.dataIndex];\n                }\n            });\n            dataArrayForExcel.push(dataObjectToPush);\n        });\n        exportToExcel(excelColumns, dataArrayForExcel, `Export${  moment()}`);\n    }\n\n\n    getColumnSearchProps = dataIndex => ({\n        filterDropdown: ({setSelectedKeys, selectedKeys, confirm, clearFilters}) => (\n            <div style={{padding: 8}}>\n                <Input\n                  ref={node => {\n                        this.searchInput = node;\n                    }}\n                  placeholder={`Search ${dataIndex}`}\n                  value={selectedKeys[0]}\n                  onChange={e => setSelectedKeys(e.target.value ? [e.target.value] : [])}\n                  onPressEnter={() => this.handleSearch(selectedKeys, confirm)}\n                  style={{width: 188, marginBottom: 8, display: 'block'}}\n                />\n                <Button\n                  type=\"primary\"\n                  onClick={() => this.handleSearch(selectedKeys, confirm)}\n                  icon=\"search\"\n                  size=\"small\"\n                  style={{width: 90, marginRight: 8}}\n                >\n                    Search\n                </Button>\n                <Button onClick={() => this.handleReset(clearFilters)} size=\"small\" style={{width: 90}}>\n                    Reset\n                </Button>\n            </div>\n        ),\n        filterIcon: filtered => (<Icon type=\"search\" style={{color: filtered ? '#1890ff' : undefined}} />),\n        onFilter: (value, record) =>\n            record[dataIndex] != null ? record[dataIndex]\n                .toString()\n                .toLowerCase()\n                .includes(value.toLowerCase()) : '',\n        onFilterDropdownVisibleChange: visible => {\n            if (visible) {\n                setTimeout(() => this.searchInput.select());\n            }\n        },\n        render: text => (\n            <Highlighter\n              highlightStyle={{backgroundColor: '#ffc069', padding: 0}}\n              searchWords={[this.state.searchText]}\n              autoEscape\n              textToHighlight={text ? text.toString() : ''}\n            />\n        ),\n    });\n\n    handleSearch = (selectedKeys, confirm) => {\n        confirm();\n        this.setState({searchText: selectedKeys[0]});\n    };\n\n    handleReset = clearFilters => {\n        clearFilters();\n        this.setState({searchText: ''});\n    };\n\n    render() {\n        const that = this;\n        const columns = this.state.columns.map(item => {\n                if (!item.render)\n                    return {...item, ...that.getColumnSearchProps(item.dataIndex)}\n                return {...item};\n            }\n        )\n        return (\n<div>\n            {this.props.hideReport ? null : (\n                <Row>\n                    <Col>\n                        <Button.Group size=\"small\">\n                            <Button disabled={this.state.loading} type=\"primary\" onClick={this.excelExport}><Icon\n                              type=\"file-excel\"\n                            /> Excel\n                            </Button>\n                            <Button disabled={this.state.loading} type=\"primary\" onClick={this.pdfExport}><Icon\n                              type=\"file-pdf\"\n                            /> PDF\n                            </Button>\n\n                        </Button.Group>\n                    </Col>\n                </Row>\n              )}\n            <Row>\n                <Table\n                  pagination={{\n                    position: 'both',\n                    pageSizeOptions: ['10', '20', '30', '40', '50', '100'],\n                    showSizeChanger: true,\n                    showQuickJumper: true,\n                    size: \"small\",\n                    showTotal (total, range) {\n                        return <Tag>Showing <b>{range[0]}</b> to <b>{range[1]}</b> of <b>{total}</b> items</Tag>\n                    }\n                }}\n                  {...this.state}\n                  columns={columns}\n                />\n\n\n            </Row>\n</div>\n)\n    }\n\n}\n","import {Button, Row, Spin} from \"antd\";\nimport React from \"react\";\n\nexport default class InfiniteFeedLoaderButton extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            extraLoadingLabel: '',\n        }\n    }\n\n    startLoading = () => {\n        if (this.props.loaderFunction) {\n            this.props.loaderFunction();\n            this.startMakingExtraLabels();\n        }\n    }\n\n    startMakingExtraLabels = () => {\n        const that = this;\n        this.setState(function (prevState) {\n            if (prevState.extraLoadingLabel.length > 2) {\n                return {extraLoadingLabel: ''}\n            } \n                return {extraLoadingLabel: `${prevState.extraLoadingLabel  }.`}\n            \n        }, function () {\n            if (that.props.loading)\n                setTimeout(function () {\n                    that.startMakingExtraLabels();\n                }, 500)\n        })\n    }\n\n    render() {\n        if (this.props.loading) {\n            return (\n<Spin spinning={this.props.loading}>\n                <Row style={{minHeight: 200}} />\n</Spin>\n)\n        }\n        if (this.props.hidden) {\n            return (\n<Row>\n                <div style={{textAlign: 'center', margin: '15px 0px'}}>\n                    <small>No More Data Found</small>\n                </div>\n</Row>\n)\n        }\n        return (\n<Row>\n            <div style={{textAlign: 'center', margin: '15px 0px'}}>\n                <Button type=\"primary\" onClick={this.startLoading} loading={this.props.loading}>\n                    {this.props.loading ? `Loading${  this.state.extraLoadingLabel}` : 'Load More'}\n                </Button>\n            </div>\n</Row>\n)\n    }\n}\n"],"sourceRoot":""}