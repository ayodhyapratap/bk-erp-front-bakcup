{"version":3,"sources":["app/components/conference/meeting/EventMeetingPopover.js","app/components/conference/meeting/MeetingRightPanel.js","app/components/conference/meeting/AddOrEditMeeting.js","app/components/conference/meeting/MeetingEventComponent.js","app/components/conference/meeting/MeetingBooking.js"],"names":["EventMeetingPopover","props","loadMeetingDetails","that","setState","loading","getAPI","interpolate","SINGLE_MEETING","meetingId","data","meeting","openWindowLink","link","window","open","state","this","navigator","clipboard","writeText","displayMessage","SUCCESS_MSG_TYPE","status","title","style","width","minHeight","overflowY","overflowX","spinning","name","onConfirm","id","okText","cancelText","size","onClick","copyToClipBoard","block","shape","purpose","React","Component","MeetingRightPanel","loadTodayMeeting","params","start","moment","startOf","format","end","endOf","MEETING_DETAILS","filterMeetingList","console","log","type","dataSource","bordered","renderItem","Item","MeetingCard","marginBottom","placement","content","key","AddOrEditMeeting","loadPracticeStaff","PRACTICESTAFF","active_practiceId","practiceStaff","staff","loadPatient","value","SEARCH_PATIENT","results","length","patientListData","handleSubmit","e","preventDefault","form","validateFields","err","values","reqData","doctors","iterator_doctor","choose_doctor","push","patients","choose_patient","iterator_patient","other_user","postAPI","MEETINGS","history","loadData","addNewUser","nextKeys","getFieldValue","concat","setFieldsValue","keys","removeNewOptionField","k","filter","loadMeetingList","zoomUser","zoom_user","meetingNotAllowed","checkMeetingAvailabilty","startSchedule","add","duration","no_of_participant","practiceDoctors","add_new_user","startTime","bind","loadZoomUser","loadDoctors","MEETING_USER","getFieldDecorator","formItemLayout","labelCol","span","wrapperCol","initialValue","chooseOption","map","index","offset","label","placeholder","colon","className","gutter","onSubmit","TextArea","rows","mode","option","Option","user","first_name","showSearch","onSearch","filterOption","custom_id","xs","sm","isValid","showTime","onChange","message","showIcon","htmlType","margin","disabled","goBack","float","MeetingBlock","create","MeetingEventComponent","event","trigger","color","height","DragAndDropCalendar","withDragAndDrop","BigCalendar","localizer","momentLocalizer","MeetingBooking","onSelectSlot","time","action","redirect","onRangeChange","date","selectedDate","selectedStartDate","selectedEndDate","newDate","month","subtract","eventList","forEach","agenda","Date","meetingList","setFilterType","filterType","selectedZoomUser","changeFilter","prevState","filteredEvent","exact","path","render","route","activePracticePermissions","CreateMeeting","PermissionDenied","UpdateMeeting","extra","to","overlay","defaultSelectedKeys","textOverflow","borderRight","item","username","startAccessor","defaultView","step","timeslots","events","selectable","endAccessor","defaultDate","views","week","MyWeek","day","components","range","eventOffset","dates","current","navigate","Navigate","PREVIOUS","NEXT","toLocaleDateString"],"mappings":"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","file":"static/js/22.05c38d75.chunk.js","sourcesContent":["import {Button, Divider, Popconfirm, Result, Spin} from \"antd\";\nimport React from \"react\";\nimport {SINGLE_MEETING} from \"../../../constants/api\";\nimport {displayMessage, getAPI, interpolate} from \"../../../utils/common\";\nimport {SUCCESS_MSG_TYPE} from \"../../../constants/dataKeys\";\n\nexport default class EventMeetingPopover extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            loading: false,\n            meeting: null\n        }\n    }\n\n    componentDidMount() {\n        this.loadMeetingDetails();\n    }\n\n    loadMeetingDetails = () => {\n        const that = this;\n        that.setState({\n            loading: true\n        })\n        const successFn = function (data) {\n            that.setState({\n                loading: false,\n                meeting: data\n            })\n        }\n        const errorFn = function () {\n            that.setState({\n                loading: false,\n            })\n        }\n        getAPI(interpolate(SINGLE_MEETING, [that.props.meetingId]), successFn, errorFn);\n    }\n\n    openWindowLink = (link) => {\n        window.open(link)\n    }\n\n    copyToClipBoard(meeting) {\n\n        navigator.clipboard.writeText(meeting);\n        displayMessage(SUCCESS_MSG_TYPE, \"Meeting URL & Password copied to clipboard\")\n    }\n\n    render() {\n        if (!this.state.meeting) {\n            return (\n<Result\n  status=\"warning\"\n  title=\"Meeting Not Found\"\n/>\n)\n        }\n        const that = this;\n        return (\n<div style={{width: '300px', minHeight: '200px', overflowY: 'scroll', overflowX: 'hidden'}}>\n            <Spin spinning={this.state.loading}>\n                <div>\n                    <h4>{this.state.meeting.name}</h4>\n                    <Popconfirm\n                      title=\"Are you sure to start this meeting?\"\n                      onConfirm={() => that.openWindowLink(`https://clinic.bkarogyam.com/webcall/${this.state.meeting.id}`)}\n                      okText=\"Yes\"\n                      cancelText=\"No\"\n                    >\n                        <a>Meeting Link</a>\n                    </Popconfirm>\n                    {/* <Divider style={{margin: 0}}>Invite Link</Divider> */}\n                    {/* <p>{directMeetingLink}<br/>Password: {this.state.meeting.password}</p> */}\n                    <Button\n                      size=\"small\"\n                      onClick={() => this.copyToClipBoard(`https://clinic.bkarogyam.com/webcall/${this.state.meeting.id}`)}\n                      block\n                      shape=\"round\"\n                    >Copy Link\n                    </Button>\n                    <p>{this.state.meeting.purpose}</p>\n                </div>\n            </Spin>\n</div>\n)\n    }\n}\n","import React from \"react\";\nimport {Icon, Divider, Spin, List, Avatar, Popover} from \"antd\";\nimport moment from \"moment\";\nimport EventMeetingPopover from \"./EventMeetingPopover\";\nimport {getAPI} from \"../../../utils/common\";\nimport {MEETING_DETAILS} from \"../../../constants/api\";\n\nexport default class MeetingRightPanel extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            loading:false\n        }\n\n    }\n\n    componentWillReceiveProps() {\n        this.loadTodayMeeting();\n\n    }\n\n\n    loadTodayMeeting(){\n        const that=this;\n        this.setState({\n            loading:true,\n        });\n        const successFn =function (data) {\n            that.setState({\n                filterMeetingList:data,\n                loading:false,\n            })\n        };\n        const errorFn = function () {\n            that.setState({\n                loading:false,\n            });\n        };\n        const params={\n            start: moment().startOf('day').format(),\n            end: moment().endOf('day').format(),\n        };\n\n        getAPI(MEETING_DETAILS, successFn, errorFn, params);\n    }\n\n\n    render() {\n        const that = this;\n        const {filterMeetingList} =this.state;\n        console.log(\"===\",filterMeetingList);\n        return (\n<div>\n            <Divider>\n                <a type=\"primary\"><Icon type=\"left\" /></a> Meeting's Schedule <a type=\"primary\"><Icon type=\"right\" /></a>\n            </Divider>\n\n            <Spin spinning={this.props.loading}>\n                <List\n                  dataSource={filterMeetingList}\n                  bordered\n                  renderItem={meeting => (\n                          <List.Item>\n\n                              <MeetingCard {...meeting} />\n                          </List.Item>\n                      )}\n                />\n            </Spin>\n</div>\n)\n    }\n}\n\nfunction MeetingCard(meeting) {\n\n    return (\n<div style={{width: '100%'}}>\n        <p style={{marginBottom: 0}}>\n            <Popover\n              placement=\"right\"\n              content={(\n<EventMeetingPopover\n  meetingId={meeting.id}\n  key={meeting.id}\n/>\n)}\n            >\n            <span style={{width: 'calc(100% - 60px)'}}><b>{moment(meeting.start).format(\"LT\")}</b>&nbsp;\n                {meeting.name}\n            </span>\n            </Popover>\n\n\n        </p>\n</div>\n);\n}\n\n\n","import React from \"react\";\nimport {\n    Alert,\n    Button,\n    Card,\n    Col,\n    DatePicker,\n    Form,\n    Icon,\n    Input,\n    InputNumber,\n    List,\n    Popover,\n    Row,\n    Select,\n    Spin\n} from \"antd\";\nimport moment from \"moment\";\nimport {getAPI, interpolate, postAPI} from \"../../../utils/common\";\nimport {MEETING_DETAILS, MEETING_USER, MEETINGS, PRACTICESTAFF, SEARCH_PATIENT} from \"../../../constants/api\";\nimport {loadDoctors} from \"../../../utils/clinicUtils\";\nimport {REQUIRED_FIELD_MESSAGE} from \"../../../constants/messages\";\nimport MeetingRightPanel from \"./MeetingRightPanel\";\nimport EventMeetingPopover from \"./EventMeetingPopover\";\n\nlet id = 0;\n\nclass AddOrEditMeeting extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            loading: false,\n            patientListData: [],\n            no_of_participant: 1,\n            practiceDoctors: [],\n            practiceStaff: [],\n            zoom_user: [],\n            add_new_user: false,\n            meetingNotAllowed: true,\n            duration: 30,\n            startSchedule: this.props ? moment(this.props.startTime) : moment(),\n            filterMeetingList:[],\n        };\n        this.loadPatient = this.loadPatient.bind(this);\n        this.loadZoomUser = this.loadZoomUser.bind(this);\n    }\n\n    componentWillMount() {\n        this.loadPatient();\n        loadDoctors(this);\n        this.loadPracticeStaff();\n        // this.loadZoomUser();\n        this.loadMeetingList(this.state.startSchedule, moment(this.state.startSchedule).add(this.state.duration, 'minute'));\n    }\n\n    loadPracticeStaff =()=>{\n        const that = this;\n        const successFn = function (data){\n            that.setState({\n                practiceStaff : data.staff\n            })\n        }\n        const errorFn = function(){\n\n        }\n        getAPI(interpolate(PRACTICESTAFF, [that.props.active_practiceId]), successFn, errorFn);\n    }\n\n    loadPatient = (value) => {\n        const that = this;\n        const successFn = function (data) {\n            if (data.results.length > 0) {\n                that.setState({\n                    patientListData: data.results,\n                })\n                // console.log(\"list\",that.state.patientListData);\n            }\n        };\n        const errorFn = function () {\n        };\n        if (value) {\n            getAPI(interpolate(SEARCH_PATIENT, [value]), successFn, errorFn);\n        }\n\n    };\n\n    loadZoomUser() {\n        const that = this;\n        const successFn = function (data) {\n            that.setState({\n                zoom_user: data,\n            })\n        }\n        const errorFn = function () {\n\n        }\n        getAPI(MEETING_USER, successFn, errorFn);\n    }\n\n    onChangeParticipant(value) {\n        this.setState({\n            no_of_participant: value\n        })\n    }\n\n    handleSubmit = (e) => {\n        const that = this;\n        that.setState({\n            loading: true\n        });\n        e.preventDefault();\n        this.props.form.validateFields((err, values) => {\n            if (!err) {\n                const reqData = values;\n                let participant_count = 0;\n                if (values.doctors) {\n                    participant_count += values.doctors.length;\n                    const iterator_doctor = values.doctors.values();\n                    const choose_doctor = [];\n                    for (const doctors of iterator_doctor) {\n                        choose_doctor.push(doctors)\n                    }\n                    reqData.doctors = choose_doctor;\n\n                }\n                if (values.patients) {\n                    participant_count += values.patients.length;\n                    const choose_patient = [];\n                    const iterator_patient = values.patients.values();\n                    for (const patients of iterator_patient) {\n                        choose_patient.push(patients)\n                    }\n                    reqData.patients = choose_patient;\n                }\n                if (values.other_user) {\n                    participant_count += values.other_user.length;\n                }\n                const successFn = function (data) {\n                    that.setState({\n                        loading: false\n                    });\n                    that.props.history.push(\"/meeting-booking\");\n                    that.props.loadData();\n                };\n                const errorFn = function () {\n                    that.setState({\n                        loading: false\n                    });\n                };\n\n                postAPI(MEETINGS, reqData, successFn, errorFn);\n\n            }\n        });\n    };\n\n    addNewUser = () => {\n        const that = this;\n        const {form} = this.props;\n        const keys = form.getFieldValue('keys');\n        const nextKeys = keys.concat(id++);\n        form.setFieldsValue({\n            keys: nextKeys,\n        });\n    };\n\n    removeNewOptionField = (k) => {\n        const {form} = this.props;\n        const keys = form.getFieldValue('keys');\n        // if (keys.length === 1) {\n        //     return;\n        // }\n\n        form.setFieldsValue({\n            keys: keys.filter(key => key !== k),\n        });\n    };\n\n    loadMeetingList = (start, end ,zoomUser) => {\n        const that = this;\n        that.setState({\n            loading: true\n        })\n        const successFn = function (data) {\n\n            that.setState({\n                filterMeetingList: data,\n                loading: false,\n                meetingNotAllowed: !!data.length\n            })\n        }\n        const errorFn = function () {\n            that.setState({\n                meetingNotAllowed: true,\n                loading: false,\n            })\n        }\n        const params = {\n            start: start.format(),\n            end: end.format(),\n            zoom_user:zoomUser,\n        }\n        getAPI(MEETING_DETAILS, successFn, errorFn, params)\n    }\n\n    checkMeetingAvailabilty = (type, value) => {\n        const that = this;\n        this.setState({\n            [type]: value,\n            loading:true\n        }, function () {\n            that.loadMeetingList(that.state.startSchedule, moment(that.state.startSchedule).add(that.state.duration, 'minute'),that.state.zoomUser);\n        });\n    }\n\n    render() {\n        const that = this;\n        const {getFieldDecorator, getFieldValue} = this.props.form;\n        const {filterMeetingList} = this.state;\n        const formItemLayout = {\n            labelCol: {span: 6},\n            wrapperCol: {span: 18},\n        };\n        const formItemLayoutWithOutLabel = {\n            wrapperCol: {\n                xs: {span: 24, offset: 0},\n                sm: {span: 18, offset: 6},\n            },\n        };\n        // const patientField =()=> {\n        //     let fields = [];\n        //     for (var i = 0; i <this.state.no_of_participant; i++) {\n        //        fields.push(<Form.Item label={\"Patient\"} {...formItemLayout} key={i}>\n        //            {getFieldDecorator(`names[${i}]`, {initialValue: ''})\n        //            (<Select notFoundContent={this.state.fetching ? <Spin size=\"small\"/> : null}\n        //                     placeholder=\"Select Patient\" style={{width: '100%'}}\n        //                     showSearch labelInValue onSearch={this.loadPatient} filterOption={false} >\n        //\n        //                {this.state.patientListData.map(option => (\n        //                    <Select.Option key={option.user.id}>{option.user.first_name}</Select.Option>))}\n        //            </Select>)\n        //            }\n        //        </Form.Item>)\n        //     }\n        //     return fields;\n        // }\n\n        const addNewUserFields = () => {\n\n        }\n        getFieldDecorator('keys', {initialValue: []});\n        const keys = getFieldValue('keys');\n        const chooseOption = keys.map((k, index) => (\n<div><Col span={6} offset={4}>\n                <Form.Item label=\"First Name\" key={k}>\n                    {getFieldDecorator(`others[${k}][first_name]`, {initialValue: ''})\n                    (<Input placeholder=\"First Name\" />)}\n                </Form.Item>\n     </Col>\n                <Col span={4}>\n                    <Form.Item label=\"Last Name\">\n                        {getFieldDecorator(`others[${k}][last_name]`, {initialValue: ''})\n                        (<Input placeholder=\"Last Name\" />)}\n                    </Form.Item>\n                </Col>\n                <Col span={4}>\n                    <Form.Item label=\"Email Id\">\n                        {getFieldDecorator(`others[${k}][email]`, {initialValue: ''})\n                        (<Input placeholder=\"Email Id\" />)}\n                    </Form.Item>\n\n                </Col>\n                <Col span={4}>\n                    <Form.Item label=\"phone\">\n                        {getFieldDecorator(`others[${k}][phone]`, {initialValue: ''})\n                        (<Input placeholder=\"Phone Number\" />)}\n                    </Form.Item>\n\n                </Col>\n\n                <Col span={2}>\n                    <Form.Item label={' '} colon={false}>\n                        <Button shape=\"circle\" onClick={() => that.removeNewOptionField(k)}>\n                            <Icon className=\"dynamic-delete-button\" type=\"minus-circle-o\" />\n                        </Button>\n                        <br />\n                    </Form.Item>\n                </Col>\n</div>\n        ));\n\n        return (\n<Card title=\"Add Booking\">\n                <Row gutter={16}>\n                    <Col span={14}>\n                        <Form onSubmit={this.handleSubmit}>\n                            <Form.Item label=\"Purpose\" {...formItemLayout}>\n                                {getFieldDecorator('name', {initialValue: ''})\n                                (<Input placeholder=\"Purpose\" />)}\n                            </Form.Item>\n                            <Form.Item label=\"Agenda\" {...formItemLayout}>\n                                {getFieldDecorator('agenda', {initialValue: ''})\n                                (<Input.TextArea placeholder=\"Agenda\" rows={3} />)}\n                            </Form.Item>\n                            {/* <Form.Item label={\"No. of Participants\"} {...formItemLayout}> */}\n                            {/*    {getFieldDecorator('participants', {initialValue: '1'}) */}\n                            {/*    (<InputNumber placeholder={\"No. of Participants\"} min={1} max={MAX_PARTICIPANT} */}\n                            {/*                  onChange={(value) => this.onChangeParticipant(value)}/>) */}\n\n                            {/*    } */}\n                            {/* </Form.Item> */}\n                            <Form.Item label=\"Meeting Admins\" {...formItemLayout} key=\"admins\">\n                                {getFieldDecorator('admins', {initialValue: []})\n                                (<Select\n                                  mode=\"multiple\"\n                                  placeholder=\"Select Admins\"\n                                  style={{width: '100%'}}\n                                >\n\n                                    {this.state.practiceStaff.map(option => (\n                                        <Select.Option\n                                          value={option.id}\n                                        >{option.user.first_name}\n                                        </Select.Option>\n))}\n                                 </Select>)}\n                            </Form.Item>\n                            <Form.Item label=\"Patients\" {...formItemLayout} key=\"patient\">\n                                {getFieldDecorator('patients', {initialValue: []})\n                                (<Select\n                                  mode=\"multiple\"\n                                  placeholder=\"Select Patient\"\n                                  style={{width: '100%'}}\n                                  showSearch\n                                  onSearch={this.loadPatient}\n                                  filterOption={false}\n                                >\n\n                                    {this.state.patientListData.map(option => (\n                                        <Select.Option\n                                          value={option.id}\n                                        >{option.user.first_name} ({option.custom_id})\n                                        </Select.Option>\n))}\n                                 </Select>)}\n                            </Form.Item>\n                            {/* {patientField()} */}\n                            <Form.Item label=\"Doctors\" {...formItemLayout} key=\"doctors\">\n                                {getFieldDecorator('doctors', {initialValue: []})\n                                (<Select placeholder=\"Select Doctors\" style={{width: '100%'}} mode=\"multiple\">\n\n                                    {this.state.practiceDoctors.map(option => (\n                                        <Select.Option key={option.id}>{option.user.first_name}</Select.Option>))}\n                                 </Select>)}\n\n                            </Form.Item>\n\n                            {/* <Form.Item label={\"Meeting User\"} {...formItemLayout} key={'zoom_user'}> */}\n                            {/*    {getFieldDecorator('zoom_user', { */}\n                            {/*        initialValue: [], rules: [{ */}\n                            {/*            required: true, */}\n                            {/*            message: REQUIRED_FIELD_MESSAGE */}\n                            {/*        }] */}\n                            {/*    }) */}\n                            {/*    (<Select placeholder=\"Select Zoom User\" style={{width: '100%'}} onChange={(value) => that.checkMeetingAvailabilty('zoomUser', value)}> */}\n                            {/*        {this.state.zoom_user.map(option => ( */}\n                            {/*            <Select.Option key={option.id}>{option.username}</Select.Option>))} */}\n                            {/*    </Select>)} */}\n\n                            {/* </Form.Item> */}\n\n                            <Row gutter={16}>\n                                {chooseOption}\n                            </Row>\n\n                            {/* {this.state.add_new_user?<Form.Item label={\"No. Of New Participants\"} {...formItemLayout} > */}\n                            {/*    {getFieldDecorator('no_of_new_participant',{initialValue:''}) */}\n                            {/*    (<InputNumber placeholder={\"number\"} onChange={(value)=>this.newParticipant(value)}/>) */}\n                            {/*    } */}\n                            {/* </Form.Item>:null} */}\n\n                            <Form.Item {...formItemLayoutWithOutLabel}>\n                                <a onClick={() => this.addNewUser()}> <Icon type=\"plus\" /> Add New User</a>\n                            </Form.Item>\n\n\n                            <Form.Item label=\"Booking From\" {...formItemLayout}>\n\n                                {getFieldDecorator('start', {initialValue: that.state.startSchedule && moment(that.state.startSchedule).isValid() ? moment(that.state.startSchedule) : (that.props.startTime && moment(that.props.startTime).isValid() ? moment(that.props.startTime) : null)})\n                                (<DatePicker\n                                  format=\"YYYY/MM/DD HH:mm\"\n                                  showTime\n                                  onChange={(value) => that.checkMeetingAvailabilty('startSchedule', value)}\n                                />)}\n                                {this.state.filterMeetingList.length>0 ? (\n                                    <Alert\n                                      message=\"Selected time slot Booked!!\"\n                                      type=\"warning\"\n                                      showIcon\n                                    />\n                                  ) : null}\n                            </Form.Item>\n\n                            <Form.Item label=\"Duration\" {...formItemLayout}>\n                                {getFieldDecorator('duration', {initialValue: this.state.duration})\n                                (<InputNumber onChange={(value) => that.checkMeetingAvailabilty('duration', value)} />)}\n                                <span className=\"ant-form-text\">Minutes</span>\n                            </Form.Item>\n                            <Form.Item {...formItemLayout}>\n                                <Button\n                                  type=\"primary\"\n                                  htmlType=\"submit\"\n                                  style={{margin: 5}}\n                                  disabled={this.state.meetingNotAllowed}\n                                  loading={this.state.loading}\n                                >\n                                    Submit\n                                </Button>\n                                {that.props.history ? (\n                                    <Button style={{margin: 5}} onClick={() => that.props.history.goBack()}>\n                                        Cancel\n                                    </Button>\n                                  ) : null}\n                            </Form.Item>\n                        </Form>\n                    </Col>\n                    <Col span={6} style={{float:'Right'}}>\n                        <div>\n                            <Spin spinning={this.props.loading}>\n                                <List\n                                  dataSource={filterMeetingList}\n                                  bordered={filterMeetingList.length>0}\n                                  renderItem={meeting => (\n                                          <List.Item>\n\n                                              <MeetingBlock {...meeting} />\n                                          </List.Item>\n                                      )}\n                                />\n                            </Spin>\n                        </div>\n                    </Col>\n                </Row>\n</Card>\n\n        )\n    }\n}\n\nexport default Form.create()(AddOrEditMeeting)\n\nfunction MeetingBlock(meeting) {\n\n    return (\n<div style={{width: '100%'}}>\n        <p style={{marginBottom: 0}}>\n            <Popover\n              placement=\"right\"\n              content={(\n<EventMeetingPopover\n  meetingId={meeting.id}\n  key={meeting.id}\n/>\n)}\n            >\n            <span style={{width: 'calc(100% - 60px)'}}><b>{moment(meeting.start).format(\"LLL\")}</b>&nbsp;\n                {meeting.name}\n            </span>\n            </Popover>\n\n\n        </p>\n</div>\n)\n}\n","import React from \"react\";\nimport {Icon, Popover} from \"antd\";\nimport EventMeetingPopover from \"./EventMeetingPopover\";\n\nexport default class MeetingEventComponent extends React.Component {\n    constructor(props) {\n        super(props);\n    }\n\n    render(){\n        const that=this;\n        return (\n<Popover\n  placement=\"right\"\n  content={(\n<EventMeetingPopover\n  meetingId={this.props.event.id}\n  key={this.props.event.id}\n  {...that.props}\n/>\n)}\n  trigger=\"hover\"\n>\n            <div style={{color: 'white',height:'100%'}}>\n                <h1 style={{color: 'white'}}><Icon type=\"user\" />{this.props.event.name}</h1>\n            </div>\n</Popover>\n)\n    }\n}\n\n","import React from \"react\";\nimport \"react-big-calendar/lib/addons/dragAndDrop/styles.css\";\nimport \"react-big-calendar/lib/css/react-big-calendar.css\";\nimport {Button, Card, Col, Dropdown, Icon, Menu, Row, Spin} from \"antd\";\nimport {Route, Switch} from \"react-router\";\nimport {Link} from \"react-router-dom\";\nimport withDragAndDrop from \"react-big-calendar/lib/addons/dragAndDrop\";\nimport {Calendar as BigCalendar, momentLocalizer, Navigate} from \"react-big-calendar\";\nimport moment from \"moment\";\nimport TimeGrid from \"react-big-calendar/lib/TimeGrid\";\nimport * as dates from \"date-arithmetic\";\nimport AddOrEditMeeting from \"./AddOrEditMeeting\";\nimport {getAPI} from \"../../../utils/common\";\nimport {MEETING_DETAILS, MEETING_USER} from \"../../../constants/api\";\nimport MeetingEventComponent from \"./MeetingEventComponent\";\nimport MeetingRightPanel from \"./MeetingRightPanel\";\nimport PermissionDenied from \"../../common/errors/PermissionDenied\";\nimport {CANCELLED_STATUS} from \"../../../constants/hardData\";\n\nconst DragAndDropCalendar = withDragAndDrop(BigCalendar);\nconst localizer = momentLocalizer(moment);\nexport default class MeetingBooking extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            loading: false,\n            selectedDate: moment(),\n            selectedStartDate: moment().subtract(1, 'days'),\n            selectedEndDate: moment().add(5, 'days'),\n            meetingList: [],\n            filterMeetingList:[],\n            filterType: 'Zoom User',\n            zoomUser:[],\n        }\n        this.loadZoomUser = this.loadZoomUser.bind(this);\n    }\n\n    componentDidMount() {\n        this.loadMeetingList();\n        // this.loadZoomUser();\n    }\n\n\n    loadZoomUser(){\n        const that=this;\n        const successFn=function (data) {\n            that.setState({\n                zoomUser:data,\n                loading:false,\n            })\n        };\n        const errorFn =function () {\n            that.setState({\n                loading:false,\n            })\n        };\n        getAPI(MEETING_USER,successFn,errorFn);\n    }\n\n    onSelectSlot = (value) => {\n        const that = this;\n        const time = moment(value.start);\n        if (value.action == \"doubleClick\") {\n            that.setState({\n                startTime: time,\n                redirect: true\n            });\n            this.props.history.push('/meeting-booking/add');\n        }\n\n    }\n\n    onRangeChange = (e) => {\n        const that = this;\n        if (e.start && e.end) {\n\n            if (moment(e.start).date() == 1) {\n                this.setState({\n                    selectedDate: moment(e.start),\n                    selectedStartDate: moment(e.start),\n                    selectedEndDate: moment(e.end),\n                }, function () {\n                    that.loadMeetingList();\n                })\n            } else {\n                const newDate = moment(e.start);\n                this.setState({\n                    selectedDate: newDate.month(newDate.month() + 1).date(1),\n                    selectedStartDate: moment(e.start),\n                    selectedEndDate: moment(e.end),\n                }, function () {\n                    that.loadMeetingList();\n                })\n            }\n        } else if (e.length) {\n            if (e.length == 7) {\n                this.setState({\n                    selectedDate: moment(e[1]),\n                    selectedStartDate: moment(e[0]).subtract(1, 'day'),\n                    selectedEndDate: moment(e[e.length - 1]).add(1, 'day')\n                }, function () {\n                    that.loadMeetingList();\n                });\n            } else {\n                this.loadMeetingList(moment(e[0]), moment(e[e.length - 1]));\n                this.setState({\n                    selectedDate: moment(e[0]),\n                    selectedStartDate: moment(e[0]),\n                    selectedEndDate: moment(e[e.length - 1])\n                }, function () {\n                    that.loadMeetingList();\n                });\n            }\n\n        }\n    };\n\n    loadMeetingList =()=>{\n        const that = this;\n        that.setState({\n            loading: true\n        });\n        const successFn = function (data) {\n            const eventList = [];\n            data.forEach(function (meeting) {\n                eventList.push({\n                    ...meeting,\n                    title: meeting.agenda,\n                    start: new Date(meeting.start),\n                    end: new Date(meeting.end),\n                });\n            });\n            that.setState({\n                meetingList: eventList,\n                filterMeetingList:eventList,\n                loading: false\n            })\n        };\n        const errorFn = function () {\n\n        };\n        const params = {\n            start: moment(this.state.selectedStartDate).startOf('day').format(),\n            end: moment(this.state.selectedEndDate).endOf('day').format(),\n        };\n        // if (value){\n        //     params.zoom_user=value;\n        // }\n        getAPI(MEETING_DETAILS, successFn, errorFn, params)\n    };\n\n    setFilterType = (e) => {\n        const that = this;\n        this.setState({\n            filterType: e.key,\n            selectedZoomUser: 'ALL',\n        }, function () {\n            if (e.key == 'Zoom User') {\n                that.changeFilter('selectedZoomUser', 'ALL')\n            }\n        })\n    };\n\n    changeFilter = (type, value) => {\n        if (type == \"selectedDoctor\" && value != 'ALL') {\n            this.loadMeetingList()\n        }\n        this.setState(function (prevState) {\n            const filteredEvent = [];\n            prevState.meetingList.forEach(function (event) {\n                if (value == 'ALL') {\n                    filteredEvent.push(event)\n                } else if (type == \"selectedZoomUser\" && event.zoom_user == value) {\n                    filteredEvent.push(event)\n                }\n            });\n            return {\n                [type]: value,\n                filterMeetingList: filteredEvent\n            }\n        })\n\n    };\n\n    render() {\n        const that = this;\n        return (\n            <div style={{margin: 20}}>\n                <Switch>\n                    <Route\n                      exact\n                      path='/meeting-booking/add'\n                      render={(route) =>(that.props.activePracticePermissions || that.props.CreateMeeting?(\n<AddOrEditMeeting\n  {...this.state}\n  {...route}\n  {...this.props}\n  loadData={this.loadMeetingList}\n/>\n):<PermissionDenied />)}\n                    />\n\n                    <Route\n                      exact\n                      path=\"/meeting-booking/edit/:id\"\n                      render={(route) =>(that.props.activePracticePermissions || that.props.UpdateMeeting? (\n<AddOrEditMeeting\n  {...route}\n  {...this.props}\n  {...this.state}\n  loadData={this.loadMeetingList}\n/>\n):<PermissionDenied />)}\n                    />\n\n                    <Card\n                      title=\"Meeting Booking\"\n                      extra={<Link to=\"/meeting-booking/add\"><Button type=\"primary\"><Icon type=\"plus\" /> Add Booking</Button></Link>}\n                    >\n                        <Spin size=\"large\" spinning={this.state.loading}>\n                            <Row gutter={16}>\n                                <Col span={3}>\n                                    <div>\n                                        <Dropdown\n                                          trigger=\"click\"\n                                          overlay={(\n                                            <Menu>\n                                                <Menu.Item key=\"Zoom User\">\n                                                    Zoom User\n                                                </Menu.Item>\n                                            </Menu>\n                                          )}\n                                        >\n                                            <Button block style={{margin: 5}}>\n                                                {this.state.filterType} <Icon type=\"caret-down\" />\n                                            </Button>\n                                        </Dropdown>\n                                        <Menu defaultSelectedKeys=\"ALL\" onClick={(e) => this.changeFilter('selectedZoomUser', e.key)}>\n                                            <Menu.Item\n                                              key=\"ALL\"\n                                              style={{\n                                                marginBottom: 2,\n                                                textOverflow: \"ellipsis\",\n                                                borderRight: 'none'\n                                            }}\n                                            ><span>All Zoom User</span>\n                                            </Menu.Item>\n                                            {this.state.zoomUser.map(item => (\n                                                <Menu.Item\n                                                  key={item.id}\n                                                  style={{\n                                                    textOverflow: \"ellipsis\",\n                                                    borderRight: 'none',\n\n                                                }}\n                                                >\n                                                    <span>{item.id ? item.username :null}</span>\n                                                </Menu.Item>\n                                              )\n                                            )}\n                                        </Menu>\n                                    </div>\n                                </Col>\n                                <Col span={16}>\n                                    <DragAndDropCalendar\n                                      localizer={localizer}\n                                      startAccessor=\"start\"\n                                      defaultView=\"week\"\n                                      step={10}\n                                      timeslots={1}\n                                      events={this.state.filterMeetingList}\n                                      selectable\n                                      date={new Date(this.state.selectedDate.format())}\n                                      endAccessor=\"end\"\n                                      defaultDate={new Date()}\n                                      views={{month: true, week: MyWeek, day: true}}\n                                      onSelectSlot={this.onSelectSlot}\n                                      style={{height: \"calc(100vh - 85px)\"}}\n                                      onRangeChange={this.onRangeChange}\n                                      components={{\n                                            event (option) {\n                                                return <MeetingEventComponent {...option} {...that.props} />\n                                            }\n                                        }}\n                                    />\n                                </Col>\n                                <Col span={5}>\n                                    <MeetingRightPanel {...this.props} {...this.state} />\n                                </Col>\n                            </Row>\n                        </Spin>\n                    </Card>\n                </Switch>\n            </div>\n        )\n    }\n}\n\n\nclass MyWeek\n    extends React\n        .Component {\n    render() {\n        const {date} = this.props\n        const range = MyWeek.range(date)\n\n        return <TimeGrid {...this.props} range={range} eventOffset={15} />\n    }\n}\n\nMyWeek.range = date => {\n    const start = dates.add(date, -1, 'day')\n    const end = dates.add(start, 6, 'day')\n    let current = start\n    const range = []\n    while (dates.lte(current, end, 'day')) {\n        range.push(current)\n        current = dates.add(current, 1, 'day')\n    }\n    return range\n}\n\nMyWeek.navigate = (date, action) => {\n    switch (action) {\n        case Navigate.PREVIOUS:\n            return dates.add(date, -3, 'day')\n\n        case Navigate.NEXT:\n            return dates.add(date, 3, 'day')\n\n        default:\n            return date\n    }\n}\n\nMyWeek.title = date => {\n    return ` ${date.toLocaleDateString()}`\n}\n\n\nfunction MonthEventWrapper(props) {\n    return props.children;\n}\n"],"sourceRoot":""}