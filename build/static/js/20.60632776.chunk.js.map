{"version":3,"sources":["app/components/conference/meeting/EventMeetingPopover.js","app/components/conference/meeting/MeetingRightPanel.js","app/components/conference/meeting/AddOrEditMeeting.js","app/components/conference/meeting/MeetingEventComponent.js","app/components/conference/meeting/MeetingBooking.js"],"names":["EventMeetingPopover","props","loadMeetingDetails","that","setState","loading","getAPI","interpolate","SINGLE_MEETING","meetingId","data","meeting","openWindowLink","link","window","open","state","this","navigator","clipboard","writeText","displayMessage","SUCCESS_MSG_TYPE","status","title","style","width","minHeight","overflowY","overflowX","spinning","name","onConfirm","start_url","okText","cancelText","margin","password","size","onClick","copyToClipBoard","block","shape","purpose","React","Component","MeetingRightPanel","loadTodayMeeting","params","start","moment","startOf","format","end","endOf","MEETING_DETAILS","filterMeetingList","console","log","type","dataSource","bordered","renderItem","Item","MeetingCard","marginBottom","placement","content","id","key","AddOrEditMeeting","loadPatient","value","SEARCH_PATIENT","results","length","patientListData","handleSubmit","e","preventDefault","form","validateFields","err","values","reqData","doctors","iterator_doctor","choose_doctor","push","patients","choose_patient","iterator_patient","other_user","postAPI","MEETINGS","history","loadData","addNewUser","nextKeys","getFieldValue","concat","setFieldsValue","keys","removeNewOptionField","k","filter","loadMeetingList","zoomUser","zoom_user","meetingNotAllowed","checkMeetingAvailabilty","startSchedule","add","duration","no_of_participant","practiceDoctors","add_new_user","startTime","bind","loadZoomUser","loadDoctors","MEETING_USER","getFieldDecorator","formItemLayout","labelCol","span","wrapperCol","initialValue","chooseOption","map","index","offset","label","placeholder","colon","className","gutter","onSubmit","TextArea","rows","mode","showSearch","onSearch","filterOption","option","Option","user","first_name","custom_id","xs","sm","isValid","showTime","onChange","message","showIcon","htmlType","disabled","goBack","float","MeetingBlock","create","MeetingEventComponent","event","trigger","color","height","DragAndDropCalendar","withDragAndDrop","BigCalendar","localizer","momentLocalizer","MeetingBooking","onSelectSlot","time","action","redirect","onRangeChange","date","selectedDate","selectedStartDate","selectedEndDate","newDate","month","subtract","setFilterType","filterType","selectedZoomUser","changeFilter","prevState","filteredEvent","meetingList","forEach","eventList","agenda","Date","exact","path","render","route","activePracticePermissions","CreateMeeting","PermissionDenied","UpdateMeeting","extra","to","overlay","defaultSelectedKeys","textOverflow","borderRight","item","username","startAccessor","defaultView","step","timeslots","events","selectable","endAccessor","defaultDate","views","week","MyWeek","day","components","range","eventOffset","dates","current","navigate","Navigate","PREVIOUS","NEXT","toLocaleDateString"],"mappings":"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","file":"static/js/20.60632776.chunk.js","sourcesContent":["import {Button, Divider, Popconfirm, Result, Spin} from \"antd\";\nimport React from \"react\";\nimport {SINGLE_MEETING} from \"../../../constants/api\";\nimport {displayMessage, getAPI, interpolate} from \"../../../utils/common\";\nimport {SUCCESS_MSG_TYPE} from \"../../../constants/dataKeys\";\n\nexport default class EventMeetingPopover extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            loading: false,\n            meeting: null\n        }\n    }\n\n    componentDidMount() {\n        this.loadMeetingDetails();\n    }\n\n    loadMeetingDetails = () => {\n        let that = this;\n        that.setState({\n            loading: true\n        })\n        let successFn = function (data) {\n            that.setState({\n                loading: false,\n                meeting: data\n            })\n        }\n        let errorFn = function () {\n            that.setState({\n                loading: false,\n            })\n        }\n        getAPI(interpolate(SINGLE_MEETING, [that.props.meetingId]), successFn, errorFn);\n    }\n    openWindowLink = (link) => {\n        window.open(link)\n    }\n\n    copyToClipBoard(meeting) {\n\n        navigator.clipboard.writeText(meeting);\n        displayMessage(SUCCESS_MSG_TYPE, \"Meeting URL & Password copied to clipboard\")\n    }\n\n    render() {\n        if (!this.state.meeting) {\n            return <Result\n                status=\"warning\"\n                title=\"Meeting Not Found\"\n\n            />\n        }\n        let that = this;\n        let directMeetingLink = '';\n        // let directMeetingLink = \"https://us04web.zoom.us/wc/join/\" + that.state.meeting.meeting_id + \"?\" + (that.state.meeting.join_url.split('?'))['1'];\n        return <div style={{width: '300px', minHeight: '200px', overflowY: 'scroll', overflowX: 'hidden'}}>\n            <Spin spinning={this.state.loading}>\n                <div>\n                    <h4>{this.state.meeting.name}</h4>\n                    <Popconfirm\n                        title=\"Are you sure to start this meeting?\"\n                        onConfirm={() => that.openWindowLink(that.state.meeting.start_url)}\n                        okText=\"Yes\"\n                        cancelText=\"No\">\n                        <a>Admin Meeting Start Link</a>\n                    </Popconfirm>\n                    <Divider style={{margin: 0}}>Invite Link</Divider>\n                    <p>{directMeetingLink}<br/>Password: {this.state.meeting.password}</p>\n                    <Button size=\"small\"\n                            onClick={() => this.copyToClipBoard(directMeetingLink + \"\\nPassword: \" + this.state.meeting.password)}\n                            block shape={\"round\"}>Copy\n                        Invite Link</Button>\n                    <p>{this.state.meeting.purpose}</p>\n                </div>\n            </Spin>\n        </div>\n    }\n}\n","import React from \"react\";\nimport {Icon, Divider, Spin, List, Avatar, Popover} from \"antd\";\nimport moment from \"moment\";\nimport EventMeetingPopover from \"./EventMeetingPopover\";\nimport {getAPI} from \"../../../utils/common\";\nimport {MEETING_DETAILS} from \"../../../constants/api\";\n\nexport default class MeetingRightPanel extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            loading:false\n        }\n\n    }\n    componentWillReceiveProps() {\n        this.loadTodayMeeting();\n\n    }\n\n\n    loadTodayMeeting(){\n        let that=this;\n        this.setState({\n            loading:true,\n        });\n        let successFn =function (data) {\n            that.setState({\n                filterMeetingList:data,\n                loading:false,\n            })\n        };\n        let errorFn = function () {\n            that.setState({\n                loading:false,\n            });\n        };\n        let params={\n            start: moment().startOf('day').format(),\n            end: moment().endOf('day').format(),\n        };\n\n        getAPI(MEETING_DETAILS, successFn, errorFn, params);\n    }\n\n\n    render() {\n        let that = this;\n        const {filterMeetingList} =this.state;\n        console.log(\"===\",filterMeetingList);\n        return <div>\n            <Divider>\n                <a type=\"primary\"><Icon type=\"left\"/></a> Meeting's Schedule <a type=\"primary\"><Icon type=\"right\"/></a>\n            </Divider>\n\n            <Spin spinning={this.props.loading}>\n                <List dataSource={filterMeetingList}\n                      bordered\n                      renderItem={meeting => (\n                          <List.Item>\n\n                              <MeetingCard {...meeting}/>\n                          </List.Item>\n                      )}\n                />\n            </Spin>\n        </div>\n    }\n}\n\nfunction MeetingCard(meeting) {\n\n    return <div style={{width: '100%'}}>\n        <p style={{marginBottom: 0}}>\n            <Popover placement=\"right\" content={<EventMeetingPopover meetingId={meeting.id}\n                                                                     key={meeting.id} />}>\n            <span style={{width: 'calc(100% - 60px)'}}><b>{moment(meeting.start).format(\"LT\")}</b>&nbsp;\n                {meeting.name}</span>\n            </Popover>\n\n\n        </p>\n    </div>;\n}\n\n\n","import React from \"react\";\nimport {\n    Alert,\n    Button,\n    Card,\n    Col,\n    DatePicker,\n    Form,\n    Icon,\n    Input,\n    InputNumber,\n    List,\n    Popover,\n    Row,\n    Select,\n    Spin\n} from \"antd\";\nimport {getAPI, interpolate, postAPI} from \"../../../utils/common\";\nimport {MEETING_DETAILS, MEETING_USER, MEETINGS, SEARCH_PATIENT} from \"../../../constants/api\";\nimport {loadDoctors} from \"../../../utils/clinicUtils\";\nimport moment from \"moment\";\nimport {REQUIRED_FIELD_MESSAGE} from \"../../../constants/messages\";\nimport MeetingRightPanel from \"./MeetingRightPanel\";\nimport EventMeetingPopover from \"./EventMeetingPopover\";\n\nlet id = 0;\n\nclass AddOrEditMeeting extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            loading: false,\n            patientListData: [],\n            no_of_participant: 1,\n            practiceDoctors: [],\n            zoom_user: [],\n            add_new_user: false,\n            meetingNotAllowed: true,\n            duration: 30,\n            startSchedule: this.props ? moment(this.props.startTime) : moment(),\n            filterMeetingList:[],\n        };\n        this.loadPatient = this.loadPatient.bind(this);\n        this.loadZoomUser = this.loadZoomUser.bind(this);\n    }\n\n    componentWillMount() {\n        this.loadPatient();\n        loadDoctors(this);\n        // this.loadZoomUser();\n        this.loadMeetingList(this.state.startSchedule, moment(this.state.startSchedule).add(this.state.duration, 'minute'));\n    }\n\n    loadPatient = (value) => {\n        let that = this;\n        let successFn = function (data) {\n            if (data.results.length > 0) {\n                that.setState({\n                    patientListData: data.results,\n                })\n                // console.log(\"list\",that.state.patientListData);\n            }\n        };\n        let errorFn = function () {\n        };\n        if (value) {\n            getAPI(interpolate(SEARCH_PATIENT, [value]), successFn, errorFn);\n        }\n\n    };\n\n    loadZoomUser() {\n        let that = this;\n        let successFn = function (data) {\n            that.setState({\n                zoom_user: data,\n            })\n        }\n        let errorFn = function () {\n\n        }\n        getAPI(MEETING_USER, successFn, errorFn);\n    }\n\n    onChangeParticipant(value) {\n        this.setState({\n            no_of_participant: value\n        })\n    }\n\n    handleSubmit = (e) => {\n        let that = this;\n        that.setState({\n            loading: true\n        });\n        e.preventDefault();\n        this.props.form.validateFields((err, values) => {\n            if (!err) {\n                let reqData = values;\n                let participant_count = 0;\n                if (values.doctors) {\n                    participant_count += values.doctors.length;\n                    let iterator_doctor = values.doctors.values();\n                    let choose_doctor = [];\n                    for (let doctors of iterator_doctor) {\n                        choose_doctor.push(doctors)\n                    }\n                    reqData.doctors = choose_doctor;\n\n                }\n                if (values.patients) {\n                    participant_count += values.patients.length;\n                    let choose_patient = [];\n                    let iterator_patient = values.patients.values();\n                    for (let patients of iterator_patient) {\n                        choose_patient.push(patients)\n                    }\n                    reqData.patients = choose_patient;\n                }\n                if (values.other_user) {\n                    participant_count += values.other_user.length;\n                }\n                let successFn = function (data) {\n                    that.setState({\n                        loading: false\n                    });\n                    that.props.history.push(\"/meeting-booking\");\n                    that.props.loadData();\n                };\n                let errorFn = function () {\n                    that.setState({\n                        loading: false\n                    });\n                };\n\n                postAPI(MEETINGS, reqData, successFn, errorFn);\n\n            }\n        });\n    };\n\n    addNewUser = () => {\n        let that = this;\n        const {form} = this.props;\n        const keys = form.getFieldValue('keys');\n        const nextKeys = keys.concat(id++);\n        form.setFieldsValue({\n            keys: nextKeys,\n        });\n    };\n    removeNewOptionField = (k) => {\n        const {form} = this.props;\n        const keys = form.getFieldValue('keys');\n        // if (keys.length === 1) {\n        //     return;\n        // }\n\n        form.setFieldsValue({\n            keys: keys.filter(key => key !== k),\n        });\n    };\n\n    loadMeetingList = (start, end ,zoomUser) => {\n        let that = this;\n        that.setState({\n            loading: true\n        })\n        let successFn = function (data) {\n\n            that.setState({\n                filterMeetingList: data,\n                loading: false,\n                meetingNotAllowed: !!data.length\n            })\n        }\n        let errorFn = function () {\n            that.setState({\n                meetingNotAllowed: true,\n                loading: false,\n            })\n        }\n        let params = {\n            start: start.format(),\n            end: end.format(),\n            zoom_user:zoomUser,\n        }\n        getAPI(MEETING_DETAILS, successFn, errorFn, params)\n    }\n\n    checkMeetingAvailabilty = (type, value) => {\n        let that = this;\n        this.setState({\n            [type]: value,\n            loading:true\n        }, function () {\n            that.loadMeetingList(that.state.startSchedule, moment(that.state.startSchedule).add(that.state.duration, 'minute'),that.state.zoomUser);\n        });\n    }\n\n    render() {\n        let that = this;\n        const {getFieldDecorator, getFieldValue} = this.props.form;\n        const {filterMeetingList} = this.state;\n        const formItemLayout = {\n            labelCol: {span: 6},\n            wrapperCol: {span: 18},\n        };\n        const formItemLayoutWithOutLabel = {\n            wrapperCol: {\n                xs: {span: 24, offset: 0},\n                sm: {span: 18, offset: 6},\n            },\n        };\n        // const patientField =()=> {\n        //     let fields = [];\n        //     for (var i = 0; i <this.state.no_of_participant; i++) {\n        //        fields.push(<Form.Item label={\"Patient\"} {...formItemLayout} key={i}>\n        //            {getFieldDecorator(`names[${i}]`, {initialValue: ''})\n        //            (<Select notFoundContent={this.state.fetching ? <Spin size=\"small\"/> : null}\n        //                     placeholder=\"Select Patient\" style={{width: '100%'}}\n        //                     showSearch labelInValue onSearch={this.loadPatient} filterOption={false} >\n        //\n        //                {this.state.patientListData.map(option => (\n        //                    <Select.Option key={option.user.id}>{option.user.first_name}</Select.Option>))}\n        //            </Select>)\n        //            }\n        //        </Form.Item>)\n        //     }\n        //     return fields;\n        // }\n\n        const addNewUserFields = () => {\n\n        }\n        getFieldDecorator('keys', {initialValue: []});\n        const keys = getFieldValue('keys');\n        let chooseOption = keys.map((k, index) => (<div><Col span={6} offset={4}>\n                <Form.Item label={\"First Name\"} key={k}>\n                    {getFieldDecorator(`others[${k}][first_name]`, {initialValue: ''})\n                    (<Input placeholder={\"First Name\"}/>)\n                    }\n                </Form.Item>\n            </Col>\n                <Col span={4}>\n                    <Form.Item label={\"Last Name\"}>\n                        {getFieldDecorator(`others[${k}][last_name]`, {initialValue: ''})\n                        (<Input placeholder={\"Last Name\"}/>)\n                        }\n                    </Form.Item>\n                </Col>\n                <Col span={4}>\n                    <Form.Item label={\"Email Id\"}>\n                        {getFieldDecorator(`others[${k}][email]`, {initialValue: ''})\n                        (<Input placeholder={\"Email Id\"}/>)\n                        }\n                    </Form.Item>\n\n                </Col>\n                <Col span={4}>\n                    <Form.Item label={\"phone\"}>\n                        {getFieldDecorator(`others[${k}][phone]`, {initialValue: ''})\n                        (<Input placeholder={\"Phone Number\"}/>)\n                        }\n                    </Form.Item>\n\n                </Col>\n\n                <Col span={2}>\n                    <Form.Item label={' '} colon={false}>\n                        <Button shape=\"circle\" onClick={() => that.removeNewOptionField(k)}>\n                            <Icon className=\"dynamic-delete-button\" type=\"minus-circle-o\"/>\n                        </Button>\n                        <br/>\n                    </Form.Item>\n                </Col>\n            </div>\n        ));\n\n        return (<Card title={\"Add Booking\"}>\n                <Row gutter={16}>\n                    <Col span={14}>\n                        <Form onSubmit={this.handleSubmit}>\n                            <Form.Item label={\"Purpose\"} {...formItemLayout}>\n                                {getFieldDecorator('name', {initialValue: ''})\n                                (<Input placeholder={\"Purpose\"}/>)\n                                }\n                            </Form.Item>\n                            <Form.Item label={\"Agenda\"} {...formItemLayout}>\n                                {getFieldDecorator('agenda', {initialValue: ''})\n                                (<Input.TextArea placeholder={\"Agenda\"} rows={3}/>)\n                                }\n                            </Form.Item>\n                            {/*<Form.Item label={\"No. of Participants\"} {...formItemLayout}>*/}\n                            {/*    {getFieldDecorator('participants', {initialValue: '1'})*/}\n                            {/*    (<InputNumber placeholder={\"No. of Participants\"} min={1} max={MAX_PARTICIPANT}*/}\n                            {/*                  onChange={(value) => this.onChangeParticipant(value)}/>)*/}\n\n                            {/*    }*/}\n                            {/*</Form.Item>*/}\n                            {/*<Form.Item label={\"Meeting Admins\"} {...formItemLayout} key={'admins'}>*/}\n                            {/*    {getFieldDecorator('admin', {initialValue: []})*/}\n                            {/*    (<Select mode={\"multiple\"}*/}\n                            {/*             placeholder=\"Select Admins\" style={{width: '100%'}}*/}\n                            {/*             showSearch onSearch={this.loadPatient} filterOption={false}>*/}\n\n                            {/*        {this.state.patientListData.map(option => (*/}\n                            {/*            <Select.Option*/}\n                            {/*                value={option.id}>{option.user.first_name} ({option.custom_id})</Select.Option>))}*/}\n                            {/*    </Select>)*/}\n                            {/*    }*/}\n                            {/*</Form.Item>*/}\n                            <Form.Item label={\"Patients\"} {...formItemLayout} key={'patient'}>\n                                {getFieldDecorator('patients', {initialValue: []})\n                                (<Select mode={\"multiple\"}\n                                         placeholder=\"Select Patient\" style={{width: '100%'}}\n                                         showSearch onSearch={this.loadPatient} filterOption={false}>\n\n                                    {this.state.patientListData.map(option => (\n                                        <Select.Option\n                                            value={option.id}>{option.user.first_name} ({option.custom_id})</Select.Option>))}\n                                </Select>)\n                                }\n                            </Form.Item>\n                            {/*{patientField()}*/}\n                            <Form.Item label={\"Doctors\"} {...formItemLayout} key={'doctors'}>\n                                {getFieldDecorator('doctors', {initialValue: []})\n                                (<Select placeholder=\"Select Doctors\" style={{width: '100%'}} mode={\"multiple\"}>\n\n                                    {this.state.practiceDoctors.map(option => (\n                                        <Select.Option key={option.id}>{option.user.first_name}</Select.Option>))}\n                                </Select>)\n                                }\n\n                            </Form.Item>\n\n                            {/*<Form.Item label={\"Meeting User\"} {...formItemLayout} key={'zoom_user'}>*/}\n                            {/*    {getFieldDecorator('zoom_user', {*/}\n                            {/*        initialValue: [], rules: [{*/}\n                            {/*            required: true,*/}\n                            {/*            message: REQUIRED_FIELD_MESSAGE*/}\n                            {/*        }]*/}\n                            {/*    })*/}\n                            {/*    (<Select placeholder=\"Select Zoom User\" style={{width: '100%'}} onChange={(value) => that.checkMeetingAvailabilty('zoomUser', value)}>*/}\n                            {/*        {this.state.zoom_user.map(option => (*/}\n                            {/*            <Select.Option key={option.id}>{option.username}</Select.Option>))}*/}\n                            {/*    </Select>)}*/}\n\n                            {/*</Form.Item>*/}\n\n                            <Row gutter={16}>\n                                {chooseOption}\n                            </Row>\n\n                            {/*{this.state.add_new_user?<Form.Item label={\"No. Of New Participants\"} {...formItemLayout} >*/}\n                            {/*    {getFieldDecorator('no_of_new_participant',{initialValue:''})*/}\n                            {/*    (<InputNumber placeholder={\"number\"} onChange={(value)=>this.newParticipant(value)}/>)*/}\n                            {/*    }*/}\n                            {/*</Form.Item>:null}*/}\n\n                            <Form.Item {...formItemLayoutWithOutLabel}>\n                                <a onClick={() => this.addNewUser()}> <Icon type=\"plus\"/> Add New User</a>\n                            </Form.Item>\n\n\n                            <Form.Item label={\"Booking From\"} {...formItemLayout}>\n\n                                {getFieldDecorator('start', {initialValue: that.state.startSchedule && moment(that.state.startSchedule).isValid() ? moment(that.state.startSchedule) : (that.props.startTime && moment(that.props.startTime).isValid() ? moment(that.props.startTime) : null)})\n                                (<DatePicker format=\"YYYY/MM/DD HH:mm\" showTime\n                                             onChange={(value) => that.checkMeetingAvailabilty('startSchedule', value)}/>)\n                                }\n                                {this.state.filterMeetingList.length>0 ?\n                                    <Alert message=\"Selected time slot Booked!!\" type=\"warning\"\n                                           showIcon/> : null}\n                            </Form.Item>\n\n                            <Form.Item label={\"Duration\"} {...formItemLayout}>\n                                {getFieldDecorator('duration', {initialValue: this.state.duration})\n                                (<InputNumber onChange={(value) => that.checkMeetingAvailabilty('duration', value)}/>)\n\n                                }\n                                <span className=\"ant-form-text\">Minutes</span>\n                            </Form.Item>\n                            <Form.Item {...formItemLayout}>\n                                <Button type=\"primary\" htmlType=\"submit\" style={{margin: 5}}\n                                        disabled={this.state.meetingNotAllowed} loading={this.state.loading}>\n                                    Submit\n                                </Button>\n                                {that.props.history ?\n                                    <Button style={{margin: 5}} onClick={() => that.props.history.goBack()}>\n                                        Cancel\n                                    </Button> : null}\n                            </Form.Item>\n                        </Form>\n                    </Col>\n                    <Col span={6} style={{float:'Right'}}>\n                        <div>\n                            <Spin spinning={this.props.loading}>\n                                <List dataSource={filterMeetingList}\n                                      bordered={filterMeetingList.length>0?true:false}\n                                      renderItem={meeting => (\n                                          <List.Item>\n\n                                              <MeetingBlock {...meeting}/>\n                                          </List.Item>\n                                      )}\n                                />\n                            </Spin>\n                        </div>\n                    </Col>\n                </Row>\n            </Card>\n\n        )\n    }\n}\n\nexport default Form.create()(AddOrEditMeeting)\n\nfunction MeetingBlock(meeting) {\n\n    return <div style={{width: '100%'}}>\n        <p style={{marginBottom: 0}}>\n            <Popover placement=\"right\" content={<EventMeetingPopover meetingId={meeting.id}\n                                                                     key={meeting.id} />}>\n            <span style={{width: 'calc(100% - 60px)'}}><b>{moment(meeting.start).format(\"LLL\")}</b>&nbsp;\n                {meeting.name}</span>\n            </Popover>\n\n\n        </p>\n    </div>\n}\n","import React from \"react\";\nimport {Icon, Popover} from \"antd\";\nimport EventMeetingPopover from \"./EventMeetingPopover\";\n\nexport default class MeetingEventComponent extends React.Component {\n    constructor(props) {\n        super(props);\n    }\n\n    render(){\n        let that=this;\n        return <Popover placement=\"right\"\n                        content={<EventMeetingPopover meetingId={this.props.event.id}\n                                                      key={this.props.event.id} {...that.props}/>}\n                        trigger=\"hover\">\n            <div style={{color: 'white',height:'100%'}}>\n                <h1 style={{color: 'white'}}><Icon type={'user'}/>{this.props.event.name}</h1>\n            </div>\n        </Popover>\n    }\n}\n\n","import React from \"react\";\nimport \"react-big-calendar/lib/addons/dragAndDrop/styles.css\";\nimport \"react-big-calendar/lib/css/react-big-calendar.css\";\nimport {Button, Card, Col, Dropdown, Icon, Menu, Row, Spin} from \"antd\";\nimport {Route, Switch} from \"react-router\";\nimport AddOrEditMeeting from \"./AddOrEditMeeting\";\nimport {Link} from \"react-router-dom\";\nimport withDragAndDrop from \"react-big-calendar/lib/addons/dragAndDrop\";\nimport {Calendar as BigCalendar, momentLocalizer, Navigate} from \"react-big-calendar\";\nimport moment from \"moment\";\nimport TimeGrid from \"react-big-calendar/lib/TimeGrid\";\nimport * as dates from \"date-arithmetic\";\nimport {getAPI} from \"../../../utils/common\";\nimport {MEETING_DETAILS, MEETING_USER} from \"../../../constants/api\";\nimport MeetingEventComponent from \"./MeetingEventComponent\";\nimport MeetingRightPanel from \"./MeetingRightPanel\";\nimport PermissionDenied from \"../../common/errors/PermissionDenied\";\nimport {CANCELLED_STATUS} from \"../../../constants/hardData\";\n\nconst DragAndDropCalendar = withDragAndDrop(BigCalendar);\nconst localizer = momentLocalizer(moment);\nexport default class MeetingBooking extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            loading: false,\n            selectedDate: moment(),\n            selectedStartDate: moment().subtract(1, 'days'),\n            selectedEndDate: moment().add(5, 'days'),\n            meetingList: [],\n            filterMeetingList:[],\n            filterType: 'Zoom User',\n            zoomUser:[],\n        }\n        this.loadZoomUser = this.loadZoomUser.bind(this);\n    }\n\n    componentDidMount() {\n        this.loadMeetingList();\n        // this.loadZoomUser();\n    }\n\n\n    loadZoomUser(){\n        let that=this;\n        let successFn=function (data) {\n            that.setState({\n                zoomUser:data,\n                loading:false,\n            })\n        };\n        let errorFn =function () {\n            that.setState({\n                loading:false,\n            })\n        };\n        getAPI(MEETING_USER,successFn,errorFn);\n    }\n    onSelectSlot = (value) => {\n        let that = this;\n        let time = moment(value.start);\n        if (value.action == \"doubleClick\") {\n            that.setState({\n                startTime: time,\n                redirect: true\n            });\n            this.props.history.push('/meeting-booking/add');\n        }\n\n    }\n    onRangeChange = (e) => {\n        let that = this;\n        if (e.start && e.end) {\n\n            if (moment(e.start).date() == 1) {\n                this.setState({\n                    selectedDate: moment(e.start),\n                    selectedStartDate: moment(e.start),\n                    selectedEndDate: moment(e.end),\n                }, function () {\n                    that.loadMeetingList();\n                })\n            } else {\n                let newDate = moment(e.start);\n                this.setState({\n                    selectedDate: newDate.month(newDate.month() + 1).date(1),\n                    selectedStartDate: moment(e.start),\n                    selectedEndDate: moment(e.end),\n                }, function () {\n                    that.loadMeetingList();\n                })\n            }\n        } else if (e.length) {\n            if (e.length == 7) {\n                this.setState({\n                    selectedDate: moment(e[1]),\n                    selectedStartDate: moment(e[0]).subtract(1, 'day'),\n                    selectedEndDate: moment(e[e.length - 1]).add(1, 'day')\n                }, function () {\n                    that.loadMeetingList();\n                });\n            } else {\n                this.loadMeetingList(moment(e[0]), moment(e[e.length - 1]));\n                this.setState({\n                    selectedDate: moment(e[0]),\n                    selectedStartDate: moment(e[0]),\n                    selectedEndDate: moment(e[e.length - 1])\n                }, function () {\n                    that.loadMeetingList();\n                });\n            }\n\n        }\n    };\n    loadMeetingList (){\n        let that = this;\n        that.setState({\n            loading: true\n        });\n        let successFn = function (data) {\n            let eventList = [];\n            data.forEach(function (meeting) {\n                eventList.push({\n                    ...meeting,\n                    title: meeting.agenda,\n                    start: new Date(meeting.start),\n                    end: new Date(meeting.end),\n                });\n            });\n            that.setState({\n                meetingList: eventList,\n                filterMeetingList:eventList,\n                loading: false\n            })\n        };\n        let errorFn = function () {\n\n        };\n        let params = {\n            start: moment(this.state.selectedStartDate).startOf('day').format(),\n            end: moment(this.state.selectedEndDate).endOf('day').format(),\n        };\n        // if (value){\n        //     params.zoom_user=value;\n        // }\n        getAPI(MEETING_DETAILS, successFn, errorFn, params)\n    };\n\n    setFilterType = (e) => {\n        let that = this;\n        this.setState({\n            filterType: e.key,\n            selectedZoomUser: 'ALL',\n        }, function () {\n            if (e.key == 'Zoom User') {\n                that.changeFilter('selectedZoomUser', 'ALL')\n            }\n        })\n    };\n\n    changeFilter = (type, value) => {\n        if (type == \"selectedDoctor\" && value != 'ALL') {\n            this.loadMeetingList()\n        }\n        this.setState(function (prevState) {\n            let filteredEvent = [];\n            prevState.meetingList.forEach(function (event) {\n                if (value == 'ALL') {\n                    filteredEvent.push(event)\n                } else if (type == \"selectedZoomUser\" && event.zoom_user == value) {\n                    filteredEvent.push(event)\n                }\n            });\n            return {\n                [type]: value,\n                filterMeetingList: filteredEvent\n            }\n        })\n\n    };\n\n    render() {\n        let that = this;\n        return (\n            <div style={{margin: 20}}>\n                <Switch>\n                    <Route exact path='/meeting-booking/add'\n                           render={(route) =>(that.props.activePracticePermissions || that.props.CreateMeeting?<AddOrEditMeeting {...this.state} {...route} {...this.props}\n                                                                loadData={this.loadMeetingList}/>:<PermissionDenied/>)}/>\n\n                    <Route exact path={\"/meeting-booking/edit/:id\"}\n                           render={(route) =>(that.props.activePracticePermissions || that.props.UpdateMeeting? <AddOrEditMeeting  {...route} {...this.props} {...this.state}\n                                                                 loadData={this.loadMeetingList}/>:<PermissionDenied/>)}/>\n\n                    <Card title=\"Meeting Booking\"\n                          extra={<Link to=\"/meeting-booking/add\"><Button type=\"primary\"><Icon type=\"plus\"/> Add Booking</Button></Link>}>\n                        <Spin size=\"large\" spinning={this.state.loading}>\n                            <Row gutter={16}>\n                                <Col span={3}>\n                                    <div>\n                                        <Dropdown trigger={'click'} overlay={\n                                            <Menu >\n                                                <Menu.Item key={\"Zoom User\"}>\n                                                    Zoom User\n                                                </Menu.Item>\n                                            </Menu>\n\n                                        }>\n                                            <Button block style={{margin: 5}}>\n                                                {this.state.filterType} <Icon type={\"caret-down\"}/>\n                                            </Button>\n                                        </Dropdown>\n                                        <Menu  defaultSelectedKeys={\"ALL\"} onClick={(e) => this.changeFilter('selectedZoomUser', e.key)}>\n                                            <Menu.Item key={\"ALL\"} style={{\n                                                marginBottom: 2,\n                                                textOverflow: \"ellipsis\",\n                                                borderRight: 'none'\n                                            }}><span>All Zoom User</span>\n                                            </Menu.Item>\n                                            {this.state.zoomUser.map(item =>\n                                                <Menu.Item key={item.id} style={{\n                                                    textOverflow: \"ellipsis\",\n                                                    borderRight: 'none',\n\n                                                }}>\n                                                    <span>{item.id ? item.username :null}</span>\n                                                </Menu.Item>\n                                            )}\n                                        </Menu>\n                                    </div>\n                                </Col>\n                                <Col span={16}>\n                                    <DragAndDropCalendar\n                                        localizer={localizer}\n                                        startAccessor=\"start\"\n                                        defaultView=\"week\"\n                                        step={10}\n                                        timeslots={1}\n                                        events={this.state.filterMeetingList}\n                                        selectable\n                                        date={new Date(this.state.selectedDate.format())}\n                                        endAccessor=\"end\"\n                                        defaultDate={new Date()}\n                                        views={{month: true, week: MyWeek, day: true}}\n                                        onSelectSlot={this.onSelectSlot}\n                                        style={{height: \"calc(100vh - 85px)\"}}\n                                        onRangeChange={this.onRangeChange}\n                                        components={{\n                                            event: function (option) {\n                                                return <MeetingEventComponent {...option} {...that.props}/>\n                                            }\n                                        }}\n                                    />\n                                </Col>\n                                <Col span={5}>\n                                    <MeetingRightPanel {...this.props} {...this.state}/>\n                                </Col>\n                            </Row>\n                        </Spin>\n                    </Card>\n                </Switch>\n            </div>\n        )\n    }\n}\n\n\nclass MyWeek\n    extends React\n        .Component {\n    render() {\n        let {date} = this.props\n        let range = MyWeek.range(date)\n\n        return <TimeGrid {...this.props} range={range} eventOffset={15}/>\n    }\n}\n\nMyWeek.range = date => {\n    let start = dates.add(date, -1, 'day')\n    let end = dates.add(start, 6, 'day')\n    let current = start\n    let range = []\n    while (dates.lte(current, end, 'day')) {\n        range.push(current)\n        current = dates.add(current, 1, 'day')\n    }\n    return range\n}\n\nMyWeek.navigate = (date, action) => {\n    switch (action) {\n        case Navigate.PREVIOUS:\n            return dates.add(date, -3, 'day')\n\n        case Navigate.NEXT:\n            return dates.add(date, 3, 'day')\n\n        default:\n            return date\n    }\n}\n\nMyWeek.title = date => {\n    return ` ${date.toLocaleDateString()}`\n}\n\n\nfunction MonthEventWrapper(props) {\n    return props.children;\n}\n"],"sourceRoot":""}