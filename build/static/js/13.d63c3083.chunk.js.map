{"version":3,"sources":["app/components/core/AppHeader.js","app/components/core/AppSider.js","app/components/auth/forms/ChangePasswordForm.js","app/components/auth/Profile.js","app/components/patients/patient/PrintPatientForm.js","app/components/calendar/CreateAppointmentForm.js","app/components/calendar/CreateAppointment.js","app/components/calendar/BlockCalendar.js","app/components/core/SuggestionBox.js","crashHandling/ErrorBoundary.js","crashHandling/utils/crashHandlingUtils.js","app/components/core/AppBase.js","app/utils/clinicUtils.js","app/components/common/DynamicFieldsForm.js","app/constants/hardData.js","app/utils/permissionUtils.js","app/components/common/errors/PermissionDenied.js","app/components/common/WebCamField.js","app/assets/img/kidneycarelogo.png","app/components/common/errors/Error404.js","app/components/calendar/EventPatientPopover.js"],"names":["Header","AppHeader","props","searchPatient","value","that","setState","prevState","searchPatientString","getAPI","interpolate","SEARCH_PATIENT","data","patientListData","results","switchPortal","SAVE_CREDENTIALS","user","id","setUserCredentials","login","password","displayMessage","ERROR_MSG_TYPE","handlePatientSelect","event","history","push","replace","CUSTOM_STRING_SEPERATOR","state","email","msg","startLoadingMessage","sessionStorage","removeItem","reqData","getItem","postOuterAPI","CREDENTIALS","success","stopLoadingMessage","SUCCESS_MSG_TYPE","setItem","token","window","open","this","userMenu","Item","key","to","Divider","onClick","logout","style","background","padding","boxShadow","zIndex","float","margin","className","type","collapsed","toggleSider","mode","lineHeight","placeholder","showSearch","dropdownMatchSelectWidth","dropdownStyle","width","onSearch","defaultActiveFirstOption","showArrow","filterOption","onSelect","map","option","Option","toString","Meta","avatar","image","src","makeFileURL","backgroundColor","first_name","charAt","title","description","activePracticePermissions","PatientPhoneNumber","mobile","hideMobile","custom_id","Group","AddPatient","allowAllPermissions","MergePatients","onChange","switchPractice","defaultValue","active_practiceId","maxWidth","practiceList","practice","name","is_superuser","color","overlay","placement","icon","React","Component","Sider","SubMenu","AppSider","ItemGroup","onOpenChange","openKeys","latestOpenKey","find","indexOf","onHotKeyDown","bind","keyNm","console","log","keyName","OUTER_KEYS_HOTKEYS","onKeyDown","trigger","collapsible","breakpoint","onBreakpoint","broken","onCollapse","Applogo","alt","defaultSelectedKeys","theme","ViewCalendar","currentPatient","WebAdmin","FormItem","ChangePasswordForm","handleSubmit","e","preventDefault","form","validateFieldsAndScroll","err","values","changePassLoading","OLD_PASSWORD","oldPass","NEW_PASSWORD","newPass","postAPI","CHANGE_PASSWORD","message","handleConfirmBlur","target","confirmDirty","compareToFirstPassword","rule","callback","getFieldValue","validateToNextPassword","validatePassword","formItemLayout","labelCol","span","wrapperCol","getFieldDecorator","onSubmit","label","rules","required","prefix","validator","onBlur","loading","htmlType","Content","Profile","USER_DATA","userProfile","ChangePasswordLayout","create","minHeight","size","dataSource","activePracticeData","permissions_data","renderItem","item","gutter","UsersRow","marginBottom","textAlign","PrintPatientForm","setTimeout","print","newProps","http-equiv","content","marginTop","borderBottom","logo","fontSize","address","locality","city","pincode","contact","website","colSpan","display","TextArea","Radio","Checkbox","CreateAppointmentForm","loadPracticeTiming","CALENDER_SETTINGS","dataObject","length","timing","DAY_KEYS","forEach","dayKey","visting_hour_same_week","startTime","moment","first_start_time","endTime","second_end_time","is_two_sessions","lunch","lunchStartTime","first_end_time","lunchEndTime","second_start_time","calendarTimings","findOutsidePracticeTiming","loadDoctorsTiming","timeToCheckBlock","doctor","DOCTOR_VISIT_TIMING_API","doctorTimings","findOutsideDoctorTiming","setBlockedTiming","loadAppointmentList","findBlockedTiming","BLOCK_CALENDAR","blockRow","practiceBlock","doctorBlock","cal_fdate","schedule_at","format","cal_tdate","add","slot","flag","dayValue","isValid","toLowerCase","daysTimings","practiceOutsideAvailableTiming","doctorOutsideAvailableTiming","validateFields","saving","formData","patient","patientDetails","patient_name","patient_email","patient_mobile","undefined","successFn","goBack","loadData","errorFn","appointment","putAPI","APPOINTMENT_API","ALL_APPOINTMENT_API","PATIENT_PROFILE","handleClick","redirect","practice_doctors","appointmentCategories","procedure_category","treatmentNotes","practice_staff","appointmentDetail","procedureObjectsById","changeRedirect","loadDoctors","loadProcedureCategory","loadTreatmentNotes","loadAppointment","loadAppointmentCategories","match","params","appointmentid","location","search","pairValueArray","substr","split","keyValue","PRACTICESTAFF","selectedDoctor","staff","usersdata","role","DOCTORS_ROLE","PROCEDURE_CATEGORY","obj","pagination","EMR_TREATMENTNOTES","APPOINTMENT_CATEGORIES","redirectVar","current","apiParams","start_time","end_time","APPOINTMENT_SCHEDULE","appointmentList","formLayout","formPatients","offset","treatmentNotesOption","drug","categoryOptions","category","appointmentTime","Date","spinning","initialValue","REQUIRED_FIELD_MESSAGE","showTime","showIcon","min","listStyle","paddingLeft","paddingRight","border","marginLeft","doctor_data","bordered","status","APPOINTMENT_STATUS","notes","CreateAppointment","defaultValues","TestFormLayout","exact","path","render","route","BlockCalendar","changeParamsForBlockedAppointments","blockedAppointmentParams","retrieveBlockingAppointments","block_from","block_to","APPOINTMENT_PERPRACTICE_API","blockingAppointments","start","end","practiceDoctors","apppointment","CANCELLED_STATUS","borderRadius","textDecoration","borderLeft","doctors_object","calendar_colour","AppointmentCard","changeAppointmentStatus","EventPatientPopover","appointmentId","SuggestionBox","onClose","close","SUGGESTIONS","visible","layout","autosize","minRows","maxRows","marginRight","ErrorBoundary","redirectToHome","hasError","error","errorInfo","crashData","hostname","text","componentStack","pathname","loggedInUser","CONFIG","prodDomain","crashHandling","slack","sendOnProduction","sendOnDevelopment","webHookUrl","logErrorToSlackChannel","subTitle","extra","children","Calendar","loadable","ReportsHome","WebAdminHome","InventoryHome","MeetingBooking","SettingsDash","PatientHome","AppBase","showDrawer","loggedInactivePractice","loggedInUserPractices","specialisations","loadingPermissions","activeData","permissions","practice_permissions","permission","codename","global_permissions","activePracticeObj","practiceObj","setCurrentPractice","loadUserDetails","practiceId","tip","height","position","right","bottom","shape","AddAppointment","PermissionDenied","EditAppointment","refreshClinicData","ViewMeeting","component","Error404","confirm","parseInt","patientSettingMenu","hashCode","str","hash","i","charCodeAt","intToRGB","c","toUpperCase","substring","loadConfigParameters","parameters","join","CONFIG_API","loadMailingUserListForReportsMail","MAILING_USERS_LIST","mailingUsersList","sendReportMail","url","successMsg","errorMsg","mail_to","okText","okType","cancelText","onOk","SUCCESS","MAIL_SEND_MSG","MAIL_SEND_ERROR_MSG","onCancel","RadioGroup","CheckboxGroup","DynamicFieldsForm","fieldDecorators","field","urlInitialValues","MULTI_SELECT_FIELD","object","colorPickerKey","colorPickerColor","fields","formFields","SINGLE_IMAGE_UPLOAD_FIELD","file","response","image_path","MULTI_IMAGE_UPLOAD_FIELD","fileList","TIME_PICKER","DATE_PICKER","DATE_TIME_PICKER","QUILL_TEXT_FIELD","editorState","draftToHtml","convertToRaw","getCurrentContent","formProp","beforeSend","confirmText","submitForm","addMailTemplateTag","currentHtml","EditorState","createWithContent","ContentState","createFromBlockArray","htmlToDraft","toggleWebCam","webCamState","getImageandUpload","fieldKey","FormData","append","FILE_UPLOAD_BASE64","setFieldsValue","onEditorStateChange","disabled","countryOptions","stateOptions","cityOptions","smsFields","resetFormData","colorChange","loadCountryData","addSMSTag","nextProps","COUNTRY_FIELD","urlInitialValue","isNaN","parseFloat","method","action","hex","states","country","cities","EXTRA_DATA","prevValue","PASSWORD_FIELD","INPUT_FIELD","follow","SELECT_FIELD","options","RADIO_FIELD","CHECKBOX_FIELD","SINGLE_CHECKBOX_FIELD","valuePropName","NUMBER_FIELD","max","TEXT_FIELD","inputChange","SMS_FIELD","MAIL_TEMPLATE_FIELD","createEmpty","preview","maxHeight","overflowY","dangerouslySetInnerHTML","__html","COLOR_PICKER","singleUploadprops","makeURL","FILE_UPLOAD_API","headers","authorization","info","allowWebcam","Math","random","footer","getScreenShot","multiuploadprops","img","setAddressField","STATE_FIELD","EMAIL_FIELD","CITY_FIELD","DIVIDER_FIELD","LABEL_FIELD","PAYMENT_TYPES","DISEASE_TYPES","DRUG","EQUIPMENT","SUPPLIES","PROCEDURES","PRESCRIPTIONS","INVENTORY","INVENTORY_ITEM_TYPE","ADD_STOCK","CONSUME_STOCK","APPOINTMENT_CONFIRMATION_SMS_TAG_OPTIONS","EMR_TYPE","BILLING_TYPE","EMR_SUB_TYPE","BILLING_SUB_TYPE","CUSTOMIZE_PAPER_TYPE","PAPER_SIZE","PAGE_ORIENTATION","PRINTER_TYPE","HEADER_INCLUDE","LOGO_TYPE","LOGO_ALIGMENT","LOGO_INCLUDE","PATIENT_DETAILS_LIST","EXCLUDE_PATIENT_DOB","SMS_ENABLE","EMAIL_ENABLE","BIRTHDAY_SMS_ENABLE","DURATIONS_UNIT","DOSE_REQUIRED","SCHEDULE_STATUS","WAITING_STATUS","ENGAGED_STATUS","CHECKOUT_STATUS","TYPE_OF_CONSUMPTION","NOTES","DEFAULT_TEMPERATURE_IN","DEFAULT_TEMPERATURE_METHOD","DEFAULT_BP_METHOD","PAYMENT_STATUS","OPD_IPD","ROLES","PATIENTS_RELATED_REPORT","DAILY_NEW_PATIENTS","EXPIRING_MEMBERSHIP","PATIENTS_FIRST_APPOINTMENT","MONTHLY_NEW_PATIENTS","NEW_MEMBERSHIP","ACTIVE_PATIENTS","FOLLOW_UP","MEDICINE","APPOINTMENT_RELATED_REPORT","APPOINTMENT_FOR_EACH_CATEGORY","CANCELLATION_NUMBERS","AVERAGE_WAITING_ENGAGED_TIME_DAY_WISE","AVERAGE_WAITING_ENGAGED_TIME_MONTH_WISE","DAILY_APPOINTMENT_COUNT","APPOINTMENT_FOR_EACH_DOCTOR","MONTHLY_APPOINTMENT_COUNT","APPOINTMENT_FOR_EACH_PATIENT_GROUP","APPOINTMENT_FOR_PATIENT_CONVERSION","EMR_RELATED_REPORT","DAILY_TREATMENT_COUNT","TREATMENTS_FOR_EACH_DOCTOR","MONTHLY_TREATMENT_COUNT","TREATMENT_FOR_EACH_CATEGORY","AMOUNT_DUE_RELATED_REPORT","AGEING_AMOUNT_DUE","AMOUNT_DUE_PER_DOCTOR","BLOOD_GROUPS","EXPENSE_RELATED_REPORT","DAILY_EXPENSES","EXPENSES_EACH_TYPE","MONTHLY_EXPENSES","INVENTORY_RELATED_REPORT","DAILY_INVENTORY","MONTHLY_INVENTORY","TOP_INVENTORY","BED_BOOKING_RELATED_REPORT","DAILY_BOOKING_COUNT","MONTHLY_BOOKING_COUNT","MEDICINE_USAGE_COUNT","BED_BOOKING_PACKAGE_COUNT","MLM_RELATED_REPORT","MARGIN_TYPE_WISE","WALLET_BALANCE_AMOUNT","AGENT_TREE_VIEW","PAYMENT_RELATED_REPORT","PAYMENT_REFUND","PATIENTS_UNSETTLED_ADVANCE","PAYMENT_RECEIVED_PATIENT_GROUP","MODE_OF_PAYMENTS","PAYMENT_RECEIVED_PER_DAY","PAYMENT_RECEIVED_PER_DOCTOR","PAYMENT_RECEIVED_PER_MONTH","PAYMENT_SETTLEMENT","PAYMENT_SETTLEMENT_PER_DOCTOR","CREDIT_NOTES","CREDIT_AMOUNT_PER_DOCTOR","INCOME_RELATED_REPORT","DAILY_INCOME","MONTHLY_INCOME","TAXED_INCOME","DOCTOR_EACH_INCOME","PROCEDURE_INCOME","PATIENT_GROUPS_INCOME","PRODUCT_INCOME","INVOICE_RELATED_REPORT","DAILY_WISE_RETURN_INVOICE","MONTHLY_WISE_RETURN_INVOICE","RETURN_INVOICE_FOR_EACH_TAX","RETURN_INVOICE_FOR_EACH_PROCEDURE","RETURN_INVOICE_FOR_EACH_PRODUCT","RETURN_INVOICE_FOR_EACH_DOCTOR","RETURN_INVOICE_FOR_EACH_PATIENT_GROUPS","SCHEDULE_OF_INVOICES","DISCOUNT","SCHEDULE_OF_PAYMENT","PATIENT_AGE","INNER_KEYS_HOTKEYS","ADVANCED_SEARCH","HAS_AGE","HAS_DOB","HAS_AADHAR_ID","HAS_EMAIL","HAS_GENDER","HAS_PINCODE","HAS_STREET","REFERED_BY_AGENT","GENDER_OPTION","CURRENCY_TYPE","ROUTES_TO_HIDE_PATIENT_SIDE_PANEL","PROMO_CODE_SMS_TAG_OPTIONS","BLOOD_GROUP_CONFIG_PARAM","PATIENT_SOURCE_CONFIG_PARAM","SMS_LANGUAGE_CONFIG_PARAM","FAMILY_RELATION_CONFIG_PARAM","GENDER_CONFIG_PARAM","INCOME_TYPE","PDF_FILE_EXTENSION","repeat","hideEmail","WebCamField","setRef","webcam","capture","imageSrc","getScreenshot","audio","ref","videoConstraints","facingMode","screenshotFormat","module","exports","loadAppointmentDetails","updateAppointmentStatus","currentStatus","targetStatus","waiting","engaged","checkout","gender","from","showStatusTimeline","overflow","ChangeAppointmentStatus","category_data","onConfirm"],"mappings":"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","file":"static/js/13.d63c3083.chunk.js","sourcesContent":["import React from \"react\";\nimport {AutoComplete, Avatar, Button, Dropdown, Icon, Layout, List, Menu, Select, Tag} from \"antd\";\nimport {Link, Redirect} from 'react-router-dom';\nimport {\n    displayMessage,\n    getAPI,\n    handleErrorResponse,\n    interpolate,\n    makeFileURL,\n    makeURL,\n    postOuterAPI, startLoadingMessage, stopLoadingMessage\n} from \"../../utils/common\";\nimport {CREDENTIALS, PATIENT_PROFILE, SAVE_CREDENTIALS, SEARCH_PATIENT, SWITCH_PORTAL} from \"../../constants/api\";\nimport {hideMobile} from \"../../utils/permissionUtils\";\nimport axios from \"axios\";\nimport {getAuthToken} from \"../../utils/auth\";\nimport {ERROR_MSG_TYPE, SUCCESS_MSG_TYPE} from \"../../constants/dataKeys\";\nimport {CUSTOM_STRING_SEPERATOR} from \"../../constants/hardData\";\n\nconst {Header} = Layout;\n\nclass AppHeader extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            patientListData: [],\n            // searchPatientString: null,\n            // loading:false\n        }\n    }\n\n    searchPatient = (value) => {\n        let that = this;\n        this.setState(function (prevState) {\n            return {\n                searchPatientString: value\n            }\n        });\n        let successFn = function (data) {\n            that.setState(function (prevState) {\n                if (prevState.searchPatientString == value)\n                    return {\n                        patientListData: [...data.results],\n                    }\n                return {}\n            })\n        };\n        let errorFn = function (data) {\n            that.setState({\n                searchPatientString: null,\n            })\n        };\n        if (value) {\n            getAPI(interpolate(SEARCH_PATIENT, [value]), successFn, errorFn);\n        }\n\n    };\n\n    setUserCredentials(email, password) {\n        let that = this;\n        let msg = startLoadingMessage(\"Waiting for authentication from server...\");\n        sessionStorage.removeItem('token');\n        let reqData = {\n            email: email,\n            password: password\n        };\n        let successFn = function (data) {\n            if (data.success) {\n                stopLoadingMessage(msg, SUCCESS_MSG_TYPE, \" Authentication Successfully!!\");\n                sessionStorage.setItem(\"token\", data.token);\n            }\n            if (sessionStorage.getItem('token')) {\n                window.open('/task/');\n            } else {\n                stopLoadingMessage(msg, ERROR_MSG_TYPE, \"Authentication failed. User not found.\");\n            }\n\n        };\n        let errorFn = function () {\n\n        };\n        if (sessionStorage.getItem('token') == null) {\n            postOuterAPI(CREDENTIALS, reqData, successFn, errorFn);\n        }\n\n    };\n\n    switchPortal = () => {\n        let that = this;\n        let successFn = function (data) {\n            if (data) {\n                that.setUserCredentials(data.login, data.password);\n                // that.setUserCredentials(data.email,data.password);\n            }\n\n        };\n        let errorFn = function () {\n            displayMessage(ERROR_MSG_TYPE, \"Something went wrong.\");\n        };\n\n        getAPI(interpolate(SAVE_CREDENTIALS, [that.props.user.id]), successFn, errorFn);\n    };\n\n\n    handlePatientSelect = (event) => {\n        if (event) {\n            this.props.history.push(\"/patient/\" + event.replace(CUSTOM_STRING_SEPERATOR, '') + \"/profile\");\n            this.setState({\n                searchPatientString: null,\n            });\n        }\n    }\n\n    render() {\n        let that = this;\n        const userMenu = (\n            <Menu>\n                <Menu.Item key=\"profile\">\n                    <Link to=\"/profile\">Profile</Link>\n                </Menu.Item>\n                <Menu.Divider/>\n                <Menu.Item key={\"website\"} onClick={this.switchPortal}>\n                    <small>Switch to Tasks ></small>\n                </Menu.Item>\n                <Menu.Divider/>\n                <Menu.Item key=\"logout\">\n                    <a onClick={this.props.logout}>Log out</a>\n                </Menu.Item>\n            </Menu>\n        );\n        return <Header style={{background: '#fff', padding: 0, boxShadow: '0 2px 4px 0 rgba(38,50,69,.2)', zIndex: 1}}>\n            <div style={{float: 'left', margin: '0px 20px'}}>\n                <Icon\n                    className=\"trigger\"\n                    type={this.props.collapsed ? 'menu-unfold' : 'menu-fold'}\n                    onClick={() => this.props.toggleSider(!this.props.collapsed)}\n                />\n            </div>\n            <Menu mode=\"horizontal\"\n                  style={{lineHeight: '64px'}}>\n                <Menu.Item key=\"5\">\n                    <AutoComplete placeholder=\"Patient Name\"\n                                  showSearch\n                                  dropdownMatchSelectWidth={false}\n                                  dropdownStyle={{width: 400}}\n                                  onSearch={this.searchPatient}\n                                  defaultActiveFirstOption={false}\n                                  showArrow={false}\n                                  value={this.state.searchPatientString}\n                                  filterOption={false}\n                                  onSelect={this.handlePatientSelect}>\n                        {this.state.patientListData.map((option) => <AutoComplete.Option\n                            value={option.id.toString() + CUSTOM_STRING_SEPERATOR}>\n                            <List.Item style={{padding: 0}}>\n                                <List.Item.Meta\n                                    avatar={(option.image ? <Avatar src={makeFileURL(option.image)}/> :\n                                        <Avatar style={{backgroundColor: '#87d068'}}>\n                                            {option.user.first_name ? option.user.first_name.charAt(0) :\n                                                <Icon type=\"user\"/>}\n                                        </Avatar>)}\n                                    title={option.user.first_name}\n                                    description={that.props.activePracticePermissions.PatientPhoneNumber ? option.user.mobile : hideMobile(option.user.mobile)}\n                                />\n                                <div>{option.custom_id ? option.custom_id : option.user.id}</div>\n                            </List.Item>\n                        </AutoComplete.Option>)}\n                    </AutoComplete>\n                </Menu.Item>\n                <Menu.Item key=\"4\">\n                    <Button.Group>\n                        {that.props.activePracticePermissions.AddPatient || that.props.allowAllPermissions ?\n                            <Link to={\"/patients/profile/add\"}>\n                                <Button type={\"primary\"}>\n                                    <Icon type={\"plus\"}/>Add Patient\n                                </Button>\n                            </Link> : null}\n                        {that.props.activePracticePermissions.MergePatients || that.props.allowAllPermissions ?\n                            <Link to={\"/patients/merge\"}>\n                                <Button type={\"primary\"}>\n                                    <Icon type={\"user-add\"}/>Merge Patients\n                                </Button>\n                            </Link> : null}\n                    </Button.Group>\n                </Menu.Item>\n                <Menu.Item key=\"3\">\n                    <Select onChange={this.props.switchPractice} defaultValue={this.props.active_practiceId}\n                            value={this.props.active_practiceId}\n                            style={{width: '300px', maxWidth: '70vw'}}>\n                        {this.props.practiceList && this.props.practiceList.map((option) => <Select.Option\n                            key={option.practice.id}\n                            value={option.practice.id}>{option.practice.name}</Select.Option>)}\n                    </Select>\n                </Menu.Item>\n                {/*<Menu.Item key=\"3\"><Search*/}\n                {/*placeholder=\"Search\"*/}\n                {/*onSearch={value => console.log(value)}*/}\n                {/*style={{width: 200}}*/}\n                {/*/></Menu.Item>*/}\n\n                <div style={{float: 'right', margin: '0px 20px'}}>\n                    {this.props.user && this.props.user.is_superuser ? <Tag color={\"red\"}>SuperUser</Tag> : null}\n                    <Dropdown overlay={userMenu} placement=\"bottomRight\">\n\n                        <Avatar style={{backgroundColor: '#87d068'}} icon=\"user\"/>\n                    </Dropdown>\n                </div>\n\n            </Menu>\n        </Header>\n    }\n}\n\nexport default AppHeader;\n","import React from \"react\";\nimport {Divider, Icon, Layout, Menu} from 'antd';\nimport {Link} from 'react-router-dom';\nimport Applogo from '../../assets/img/kidneycarelogo.png'\nimport {OUTER_KEYS_HOTKEYS} from \"../../constants/hardData\";\nimport Hotkeys from \"react-hot-keys\";\n\nconst Sider = Layout.Sider;\nconst SubMenu = Menu.SubMenu;\nconst MenuItemGroup = Menu.ItemGroup;\n\nclass AppSider extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            openKeys: [],\n        }\n        this.onHotKeyDown = this.onHotKeyDown.bind(this);\n    }\n\n    onOpenChange = (openKeys) => {\n        const rootSubmenuKeys = ['sub1', 'sub2'];\n        const latestOpenKey = openKeys.find(key => this.state.openKeys.indexOf(key) === -1);\n        if (rootSubmenuKeys.indexOf(latestOpenKey) === -1) {\n            this.setState({openKeys});\n        } else {\n            this.setState({\n                openKeys: latestOpenKey ? [latestOpenKey] : [],\n            });\n        }\n    };\n\n    onHotKeyDown(keyNm) {\n        console.log(keyNm);\n        let that = this;\n        switch (keyNm) {\n            case 'alt+c':\n                that.props.history.push(\"/calendar\");\n                break;\n            case 'alt+p':\n                that.props.history.push(\"/patients/profile\");\n                break;\n            case 'alt+r':\n                that.props.history.push(\"/reports/appointments\");\n                break;\n            case 'alt+s':\n                that.props.history.push('/settings/clinics');\n                break;\n            case 'alt+b':\n                that.props.history.push(\"/inventory\");\n                break;\n            case 'alt+w':\n                that.props.history.push(\"/web/videos\");\n                break;\n        }\n    }\n\n\n    render() {\n        let that = this;\n        return <Hotkeys keyName={OUTER_KEYS_HOTKEYS} onKeyDown={(value) => this.onHotKeyDown(value)}>\n            <Sider\n                // style={{background: '#fff'}}\n                trigger={null}\n                collapsible\n                collapsed={this.props.collapsed}\n                style={{zIndex: 1}}\n                breakpoint=\"xxl\"\n                // collapsedWidth=\"0\"\n                onBreakpoint={(broken) => {\n                    // console.log(broken);\n                    that.props.toggleSider(broken);\n                }}\n                onCollapse={(collapsed, type) => {\n                    // console.log(collapsed, type);\n                }}>\n                <img src={Applogo} alt=\"\" style={{width: '100%', padding: '20px'}}/>\n\n                <Menu mode=\"inline\" defaultSelectedKeys={['1']}\n                      openKeys={this.state.openKeys}\n                      onOpenChange={this.onOpenChange}\n                      theme=\"dark\">\n                    {this.props.activePracticePermissions.ViewCalendar ?\n                        <Menu.Item key=\"1\">\n                            <Link to=\"/calendar\">\n                                <Icon type=\"schedule\"/>\n                                <span className=\"nav-text\"><span\n                                    className={\"shortcutLetterHighlight\"}>C</span>alendar</span>\n                            </Link>\n                        </Menu.Item> : null}\n                    <Menu.Item key=\"26\">\n                        <Link\n                            to={this.props.currentPatient ? \"/patient/\" + this.props.currentPatient.id + \"/profile\" : \"/patients/profile\"}>\n                            <Icon type=\"user\"/>\n                            <span className=\"nav-text\"><span\n                                className={\"shortcutLetterHighlight\"}>P</span>atients</span>\n                        </Link>\n                    </Menu.Item>\n                    <Menu.Item key=\"27\">\n                        <Link to=\"/reports/appointments\">\n                            <Icon type=\"bar-chart\"/>\n                            <span className=\"nav-text\"><span className={\"shortcutLetterHighlight\"}>R</span>eports</span>\n                        </Link>\n                    </Menu.Item>\n                    <Menu.Item key=\"5\">\n                        <Link to=\"/settings/clinics\">\n                            <Icon type=\"setting\"/>\n                            <span className=\"nav-text\"><span\n                                className={\"shortcutLetterHighlight\"}>S</span>ettings</span>\n                        </Link>\n                    </Menu.Item>\n                    <SubMenu key=\"sub1\"\n                             title={<span><Icon type=\"gold\"/><span><span className={\"shortcutLetterHighlight\"}>B</span>ack Office</span></span>}>\n                        <Menu.Item key=\"6\">\n                            <Link to=\"/inventory/expenses\">\n                                <Icon type=\"credit-card\"/>\n                                <span className=\"nav-text\">Expenses</span>\n                            </Link>\n                        </Menu.Item>\n                        <Menu.Item key=\"7\">\n                            <Link to=\"/inventory/activity\">\n                                <Icon type=\"bell\"/>\n                                <span className=\"nav-text\">Activities</span>\n                            </Link>\n                        </Menu.Item>\n                        <Menu.Item key=\"8\">\n                            <Link to=\"/inventory/manufacture\">\n                                <Icon type=\"database\"/>\n                                <span className=\"nav-text\">Manufacturers</span>\n                            </Link>\n                        </Menu.Item>\n                        <Menu.Item key=\"42\">\n                            <Link to=\"/inventory/vendor\">\n                                <Icon type=\"database\"/>\n                                <span className=\"nav-text\">Vendor</span>\n                            </Link>\n                        </Menu.Item>\n                        <Menu.Item key=\"9\">\n                            <Link to=\"/inventory/lab\">\n                                <Icon type=\"experiment\"/>\n                                <span className=\"nav-text\">Labs</span>\n                            </Link>\n                        </Menu.Item>\n                        <Menu.Item key=\"10\">\n                            <Link to=\"/inventory\">\n                                <Icon type=\"gold\"/>\n                                <span className=\"nav-text\">Inventory</span>\n                            </Link>\n                        </Menu.Item>\n                    </SubMenu>\n                    {this.props.activePracticePermissions.WebAdmin ?\n                        <Menu.Item key=\"web-1\">\n                            <Link to=\"/web/videos\">\n                                <Icon type=\"google\"/>\n                                <span className=\"nav-text\"><span className={\"shortcutLetterHighlight\"}>W</span>eb Admin</span>\n                            </Link>\n                        </Menu.Item>\n                        : null}\n                        <Menu.Item key={'11'}>\n                            <Link to=\"/meeting-booking\">\n                                <Icon type={\"reconciliation\"}/>\n                                <span className=\"nav-text\">Meeting Booking</span>\n                            </Link>\n                        </Menu.Item>\n                    {/*<Menu.Item key={'12'}>*/}\n                    {/*    <Link to=\"/alternate-medicine\">*/}\n                    {/*        <Icon type={\"swap\"}/>*/}\n                    {/*        <span className=\"nav-text\">Alternate Medicines</span>*/}\n                    {/*    </Link>*/}\n                    {/*</Menu.Item>*/}\n                </Menu>\n            </Sider>\n        </Hotkeys>\n    }\n}\n\nexport default AppSider;\n","import React from \"react\";\nimport {Button, Form, Icon, message, Input} from \"antd\";\nimport {postAPI, putAPI, validatePassword} from \"../../../utils/common\";\nimport {CHANGE_PASSWORD} from \"../../../constants/api\";\nimport {NEW_PASSWORD, OLD_PASSWORD} from \"../../../constants/formLabels\";\n\nconst FormItem = Form.Item;\nexport default class ChangePasswordForm extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            confirmDirty: false,\n            changePassLoading: false\n\n        };\n        this.handleSubmit = this.handleSubmit.bind(this);\n    }\n\n    handleSubmit = (e) => {\n        e.preventDefault();\n        let that = this;\n        this.props.form.validateFieldsAndScroll((err, values) => {\n            if (!err) {\n                that.setState({\n                    changePassLoading: true\n                });\n                let data = {\n                    [OLD_PASSWORD]: values.oldPass,\n                    [NEW_PASSWORD]: values.newPass,\n                };\n                let successFn = function (data) {\n                    message.success(data.message);\n                    that.setState({\n                        changePassLoading: false\n                    });\n                };\n                let errorFn = function () {\n                    that.setState({\n                        changePassLoading: false\n                    });\n                };\n                postAPI(CHANGE_PASSWORD, data, successFn, errorFn);\n            }\n        });\n    };\n    handleConfirmBlur = (e) => {\n        const value = e.target.value;\n        this.setState({confirmDirty: this.state.confirmDirty || !!value});\n    };\n    compareToFirstPassword = (rule, value, callback) => {\n        const form = this.props.form;\n        if (value && value != form.getFieldValue('newPass')) {\n            callback('Two passwords that you enter is inconsistent!');\n        } else {\n            callback();\n        }\n    };\n    validateToNextPassword = (rule, value, callback) => {\n        callback(validatePassword(rule, value, callback));\n    };\n\n    render() {\n        const formItemLayout = {\n            labelCol: {span: 6},\n            wrapperCol: {span: 14},\n        };\n        const {getFieldDecorator} = this.props.form;\n        return (\n            <Form onSubmit={this.handleSubmit}>\n                <FormItem label=\"Old Password\"  {...formItemLayout}>\n                    {getFieldDecorator('oldPass', {\n                        rules: [{required: true, message: 'Please enter your old Password!'}],\n                    })(\n                        <Input prefix={<Icon type=\"lock\" style={{color: 'rgba(0,0,0,.25)'}}/>} type=\"password\"\n                               placeholder=\"Old Password\"/>\n                    )}\n                </FormItem>\n                <FormItem label=\"New Password\"  {...formItemLayout}>\n                    {getFieldDecorator('newPass', {\n                        rules: [{\n                            required: true, message: 'Please enter your new Password!'\n                        }, {\n                            validator: this.validateToNextPassword\n                        }]\n                    })(\n                        <Input prefix={<Icon type=\"lock\" style={{color: 'rgba(0,0,0,.25)'}}/>} type=\"password\"\n                               placeholder=\"New Password\"/>\n                    )}\n                </FormItem>\n                <FormItem label=\"Confirm Password\"  {...formItemLayout}>\n                    {getFieldDecorator('confirmPass', {\n                        rules: [{required: true, message: 'Please confirm your new Password!'}, {\n                            validator: this.compareToFirstPassword\n                        }],\n                    })(\n                        <Input prefix={<Icon type=\"lock\" style={{color: 'rgba(0,0,0,.25)'}}/>} type=\"password\"\n                               placeholder=\"Confirm Password\" onBlur={this.handleConfirmBlur}/>\n                    )}\n                </FormItem>\n                <FormItem>\n                    <Button loading={this.state.changePassLoading} type=\"primary\" htmlType=\"submit\"\n                            className=\"login-form-button\">\n                        Change Password\n                    </Button>\n                </FormItem>\n            </Form>\n        );\n    }\n}\n","import {Card, Col, Form, List, Row, Divider} from \"antd\";\nimport React from \"react\";\nimport ChangePasswordForm from \"./forms/ChangePasswordForm\";\nimport {Layout} from \"antd\";\nimport {getAPI, interpolate} from \"../../utils/common\";\nimport {USER_DATA} from \"../../constants/api\";\n\nconst {Content} = Layout;\nexport default class Profile extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {};\n        console.log(this.state);\n    }\n\n    loadProfile() {\n        let that = this;\n        let successFn = function (data) {\n            that.setState({\n                userProfile: data,\n                loading: false\n            });\n        };\n        let errorFn = function () {\n            that.setState({\n                loading: false\n            })\n        };\n        getAPI(USER_DATA, successFn, errorFn);\n    }\n\n    render() {\n        let that = this;\n        const ChangePasswordLayout = Form.create()(ChangePasswordForm);\n        return <Content className=\"main-container\" style={{\n            margin: '24px 16px',\n            // padding: 24,\n            minHeight: 280,\n            // marginLeft: '200px'\n        }}>\n            <Row>\n                <Col span={12}>\n                    <Card title=\"Change Password\">\n                        <ChangePasswordLayout/>\n                    </Card>\n                </Col>\n                <Col span={12}>\n                    <Card title=\"My Permissions\">\n                        <List size=\"small\"\n                              dataSource={that.props.activePracticeData ? that.props.activePracticeData.permissions_data : []}\n                              renderItem={item => <List.Item>{item.name}</List.Item>}/>\n                    </Card>\n                </Col>\n                <Divider/>\n                <Col span={12}>\n                    <Card title=\"My Profile\">\n                        <Row gutter={16}>\n                            <Col span={6}>\n                                <UsersRow label=\"Name \" value={this.props.user.first_name}/>\n                                <UsersRow label=\"Email Id \" value={this.props.user.email}/>\n                                <UsersRow label=\"Contact No.\" value={this.props.user.mobile}/>\n                            </Col>\n                        </Row>\n                    </Card>\n                </Col>\n            </Row>\n        </Content>\n    }\n}\n\nfunction UsersRow(props) {\n    return <Row gutter={16} style={{marginBottom: '5px'}}>\n        <Col span={12} style={{textAlign: 'right'}}>{props.label}:</Col>\n        <Col span={12}><strong>{props.value}</strong></Col>\n    </Row>\n}\n","import React from \"react\";\nimport '../../../assets/printpatientform.css';\nimport {makeFileURL} from \"../../../utils/common\";\n\n\nexport default class PrintPatientForm extends React.Component {\n    constructor(props) {\n        super(props);\n    }\n\n    componentDidMount() {\n        if (this.props.activePracticeData) {\n            setTimeout(function () {\n                window.print();\n            }, 1000)\n\n        }\n    }\n    componentWillReceiveProps(newProps) {\n        if (newProps.activePracticeData) {\n            setTimeout(function () {\n                window.print();\n            }, 1000)\n\n        }\n    }\n\n    render() {\n        if (this.props.activePracticeData)\n            return <html className=\"PrintPatientForm\">\n            <meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n            <body style={{margin: '0 auto', marginTop: '20px'}}>\n            <div style={{margin: \"0px 10%\"}}>\n\n                <table style={{borderBottom: \"1px solid #000\", width: '100%'}}>\n                    <tr>\n                        <td style={{width: '150px'}}>\n                            <img style={{width:'150px'}}\n                            src={makeFileURL(this.props.activePracticeData.logo)}/>\n                        </td>\n                        <td>\n                            <h2 style={{margin: \"5px\"}}>{this.props.activePracticeData.name}</h2>\n                            <p style={{margin: \"5px\", fontSize: \"11px\"}}>{this.props.activePracticeData.address}<br/>{this.props.activePracticeData.locality}<br/>{this.props.activePracticeData.city}, {this.props.activePracticeData.state}-\n                                {this.props.activePracticeData.pincode}\n                            </p>\n                            <div style={{margin: \"5px\", fontSize: \"11px\"}}>\n                                Email : <strong>{this.props.activePracticeData.email}</strong>\n                                <br/>\n\n                                Phone : <strong>{this.props.activePracticeData.contact}</strong>\n                                <br/>\n\n                                Website : <strong>{this.props.activePracticeData.website}</strong>\n                                <br/>\n                            </div>\n                        </td>\n                    </tr>\n                </table>\n\n\n                <h3 className=\"centeralign\">\n                    Patient Information </h3>\n                <table>\n                    <tr>\n                        <td colSpan=\"2\">\n                            <h4>Personal Details</h4>\n                        </td>\n                    </tr>\n                    <tr>\n                        <td className=\"rightalign\" style={{width: '30%'}}>Name</td>\n                        <td>\n                            <div className=\"textfield\"></div>\n                        </td>\n                    </tr>\n                    <tr>\n                        <td className=\"rightalign\">Patient ID</td>\n                        <td>\n                            <div className=\"textfield\"></div>\n                            <span className=\"leftrightmargin_10\">(official use)</span></td>\n                    </tr>\n                    <tr id=\"nationalid\" style={{display: \"none\"}}>\n                        <td className=\"rightalign\">\n                            <span id=\"nationalidlabel\"></span>\n                        </td>\n                        <td>\n                            <div className=\"textfield\"></div>\n                        </td>\n                    </tr>\n                    <tr>\n                        <td className=\"rightalign\">Mobile Number</td>\n                        <td>\n                            <div className=\"textfield\"></div>\n                        </td>\n                    </tr>\n\n                    <tr>\n                        <td colSpan=\"2\">\n                            <h4>Contact Details</h4>\n                        </td>\n                    </tr>\n                    <tr>\n                        <td className=\"rightalign\">Email</td>\n                        <td>\n                            <div className=\"textfield\"></div>\n                        </td>\n                    </tr>\n                    <tr>\n                        <td className=\"rightalign\">Land-line Number(s)</td>\n                        <td>\n                            <div className=\"textfield\"></div>\n                        </td>\n                    </tr>\n                    <tr>\n                        <td className=\"rightalign\">Address</td>\n                        <td>\n                            <div className=\"textarea\"></div>\n                        </td>\n                    </tr>\n\n                    <tr>\n                        <td colSpan=\"2\">\n                            <h4>General Details</h4>\n                        </td>\n                    </tr>\n                    <tr>\n                        <td className=\"rightalign\">Gender</td>\n                        <td>\n                            <div className=\"radio\"></div>\n                            <label>Male </label>\n                            <div className=\"radio\"></div>\n                            <label>Female </label>\n                        </td>\n                    </tr>\n                    <tr>\n                        <td className=\"rightalign\">Blood Group</td>\n                        <td>\n                            <div className=\"textfield\"></div>\n                        </td>\n                    </tr>\n                    <tr>\n                        <td className=\"rightalign\">Date of Birth / Age</td>\n                        <td>\n                            <div className=\"textfield\"></div>\n                        </td>\n                    </tr>\n\n\n                </table>\n                <p>I hereby declare that the information provided above is true and correct to the best of my knowledge.\n                    I give consent to the performance of medical / surgical / anesthesia / diagnostic procedure /\n                    treatment to be performed upon myself at B.K. Arogyam & Research Pvt Ltd. I will pay in full any\n                    cost of treatment or insurance co-payments according to the office's financial policy. </p>\n                <div className=\"date\">Date</div>\n                <div className=\"signature\">Patient's Signature</div>\n            </div>\n            </body>\n            </html>\n        return null;\n    }\n}\n","import React from \"react\";\nimport {\n    Alert,\n    AutoComplete,\n    Avatar,\n    Button,\n    Card,\n    DatePicker,\n    Form,\n    Input,\n    InputNumber,\n    List,\n    Select,\n    Spin,\n    Popover,\n    Icon,\n    Row,Col,\n} from 'antd';\nimport {REQUIRED_FIELD_MESSAGE} from \"../../constants/messages\";\nimport moment from \"moment/moment\";\nimport {ALL, DOCTORS_ROLE, SUCCESS_MSG_TYPE} from \"../../constants/dataKeys\";\nimport {\n    ALL_APPOINTMENT_API,\n    APPOINTMENT_API,\n    APPOINTMENT_CATEGORIES,\n    BLOCK_CALENDAR,\n    CALENDER_SETTINGS,\n    DOCTOR_VISIT_TIMING_API,\n    EMR_TREATMENTNOTES,\n    PATIENT_PROFILE,\n    PRACTICESTAFF,\n    PROCEDURE_CATEGORY,\n    SEARCH_PATIENT,\n    APPOINTMENT_PERPRACTICE_API,\n    APPOINTMENT_SCHEDULE\n} from \"../../constants/api\";\nimport {Checkbox, Radio} from \"antd/lib/index\";\nimport {displayMessage, getAPI, interpolate, makeFileURL, postAPI, putAPI} from \"../../utils/common\";\nimport {APPOINTMENT_STATUS, DAY_KEYS} from \"../../constants/hardData\";\nimport {hideMobile} from \"../../utils/permissionUtils\";\nimport { red } from \"ansi-colors\";\n\nconst {TextArea} = Input;\nconst FormItem = Form.Item;\nconst RadioGroup = Radio.Group;\nconst CheckboxGroup = Checkbox.Group;\nconst {Meta} = Card;\nexport default class CreateAppointmentForm extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            redirect: false,\n            practice_doctors: [],\n            appointmentCategories: null,\n            procedure_category: null,\n            treatmentNotes: null,\n            practice_staff: [],\n            appointment: null,\n            loading: false,\n            patientListData: [],\n            // patientDetails: null,\n            appointmentDetail: null,\n            saving: false,\n            doctorBlock: false,\n            doctorOutsideAvailableTiming: false,\n            practiceBlock: false,\n            practiceOutsideAvailableTiming: false,\n            timeToCheckBlock: {\n                schedule_at: moment(),\n                slot: 10,\n            },\n            procedureObjectsById: {},\n            // appointmentList:[],\n\n        }\n        this.changeRedirect = this.changeRedirect.bind(this);\n        this.loadDoctors = this.loadDoctors.bind(this);\n        this.loadProcedureCategory = this.loadProcedureCategory.bind(this);\n        this.loadTreatmentNotes = this.loadTreatmentNotes.bind(this);\n        this.searchPatient = this.searchPatient.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n        this.loadAppointment = this.loadAppointment.bind(this);\n        this.loadAppointmentList = this.loadAppointmentList.bind(this);\n\n    }\n\n    componentDidMount() {\n        let that = this;\n        this.loadDoctors();\n        this.loadProcedureCategory();\n        this.loadTreatmentNotes();\n        this.loadAppointmentCategories();\n        this.loadPracticeTiming();\n        this.loadAppointmentList();\n        if (this.props.match.params.appointmentid) {\n            that.loadAppointment();\n        } else if (this.props.history && this.props.history.location.search) {\n            let pairValueArray = this.props.history.location.search.substr(1).split('&');\n            if (pairValueArray.length) {\n                pairValueArray.forEach(function (item) {\n                    let keyValue = item.split('=');\n                    if (keyValue && keyValue.length == 2) {\n                        if (keyValue[0] == 'patient' && keyValue[1]) {\n                            that.handlePatientSelect(keyValue[1])\n                        }\n                    }\n                });\n            }\n        }\n    }\n\n    loadPracticeTiming = () => {\n        var that = this;\n        let successFn = function (data) {\n            let dataObject = {};\n            if (data.length)\n                dataObject = data[0];\n            let timing = {};\n            DAY_KEYS.forEach(function (dayKey) {\n                timing[dayKey] = {};\n                if (dataObject.visting_hour_same_week) {\n                    timing[dayKey].startTime = moment(dataObject.first_start_time, 'HH:mm:ss');\n                    timing[dayKey].endTime = moment(dataObject.second_end_time, 'HH:mm:ss');\n                    if (dataObject.is_two_sessions) {\n                        timing[dayKey].lunch = true;\n                        timing[dayKey].lunchStartTime = moment(dataObject.first_end_time, 'HH:mm:ss');\n                        timing[dayKey].lunchEndTime = moment(dataObject.second_start_time, 'HH:mm:ss');\n                    } else {\n                        timing[dayKey].lunch = false\n                    }\n                } else if (dataObject[dayKey]) {\n                    timing[dayKey].startTime = moment(dataObject[`first_start_time_${dayKey}`], 'HH:mm:ss');\n                    timing[dayKey].endTime = moment(dataObject[`second_end_time_${dayKey}`], 'HH:mm:ss');\n                    if (dataObject[`is_two_sessions_${dayKey}`]) {\n                        timing[dayKey].lunch = true;\n                        timing[dayKey].lunchStartTime = moment(dataObject[`first_end_time_${dayKey}`], 'HH:mm:ss');\n                        timing[dayKey].lunchEndTime = moment(dataObject[`second_start_time_${dayKey}`], 'HH:mm:ss');\n                    } else {\n                        timing[dayKey].lunch = false\n                    }\n                } else {\n                    timing[dayKey] = null\n                }\n            });\n            that.setState({\n                calendarTimings: {...timing},\n            }, function () {\n                that.findOutsidePracticeTiming();\n            });\n        };\n        let errorFn = function () {\n            that.setState({\n                calendarTimings: {}\n            })\n        };\n        getAPI(interpolate(CALENDER_SETTINGS, [this.props.active_practiceId]), successFn, errorFn);\n    }\n    loadDoctorsTiming = () => {\n        let that = this;\n        let successFn = function (data) {\n            let dataObject = {};\n            if (data.length)\n                dataObject = data[0];\n            let timing = {};\n            DAY_KEYS.forEach(function (dayKey) {\n                timing[dayKey] = {};\n                if (dataObject.visting_hour_same_week) {\n                    timing[dayKey].startTime = moment(dataObject.first_start_time, 'HH:mm:ss');\n                    timing[dayKey].endTime = moment(dataObject.second_end_time, 'HH:mm:ss');\n                    if (dataObject.is_two_sessions) {\n                        timing[dayKey].lunch = true;\n                        timing[dayKey].lunchStartTime = moment(dataObject.first_end_time, 'HH:mm:ss');\n                        timing[dayKey].lunchEndTime = moment(dataObject.second_start_time, 'HH:mm:ss');\n                    } else {\n                        timing[dayKey].lunch = false\n                    }\n                } else if (dataObject[dayKey]) {\n                    timing[dayKey].startTime = moment(dataObject[`first_start_time_${dayKey}`], 'HH:mm:ss');\n                    timing[dayKey].endTime = moment(dataObject[`second_end_time_${dayKey}`], 'HH:mm:ss');\n                    if (dataObject[`is_two_sessions_${dayKey}`]) {\n                        timing[dayKey].lunch = true;\n                        timing[dayKey].lunchStartTime = moment(dataObject[`first_end_time_${dayKey}`], 'HH:mm:ss');\n                        timing[dayKey].lunchEndTime = moment(dataObject[`second_start_time_${dayKey}`], 'HH:mm:ss');\n                    } else {\n                        timing[dayKey].lunch = false\n                    }\n                } else {\n                    timing[dayKey] = null\n                }\n            });\n            that.setState({\n                doctorTimings: {...timing},\n            }, function () {\n                that.findOutsideDoctorTiming();\n            });\n        }\n        let errorFn = function () {\n\n        };\n        if (that.state.timeToCheckBlock.doctor)\n            getAPI(interpolate(DOCTOR_VISIT_TIMING_API, [this.props.active_practiceId]), successFn, errorFn, {\n                doctor: that.state.timeToCheckBlock.doctor\n            });\n    }\n    setBlockedTiming = (type, value) => {\n        console.log(\"Onchange\",value)\n        let that = this;\n        if (type) {\n            this.setState(function (prevState) {\n                return {\n                    timeToCheckBlock: {...prevState.timeToCheckBlock, [type]: value}\n                }\n            }, function () {\n                that.loadAppointmentList();\n                that.findBlockedTiming();\n                that.findOutsidePracticeTiming();\n                if (type == 'doctor') {\n                    that.loadDoctorsTiming();\n                } else {\n                    that.findOutsideDoctorTiming();\n                }\n\n            })\n        }\n    }\n    findBlockedTiming = () => {\n        let that = this;\n        let successFn = function (data) {\n            data.forEach(function (blockRow) {\n                if (blockRow.doctor == null) {\n                    that.setState({\n                        practiceBlock: true\n                    });\n                } else if (blockRow.doctor == that.props.timeToCheckBlock.doctor) {\n                    that.setState({\n                        doctorBlock: true\n                    });\n                }\n            });\n        }\n        let errorFn = function () {\n\n        }\n        getAPI(BLOCK_CALENDAR, successFn, errorFn, {\n            practice: this.props.active_practiceId,\n            cal_fdate: moment(that.state.timeToCheckBlock.schedule_at).format(),\n            cal_tdate: moment(that.state.timeToCheckBlock.schedule_at).add(that.state.timeToCheckBlock.slot, 'minutes').format()\n        })\n    }\n    findOutsidePracticeTiming = () => {\n        let that = this;\n        let flag = true;\n        if (that.state.timeToCheckBlock.schedule_at && that.state.timeToCheckBlock.slot) {\n            let schedule_at = that.state.timeToCheckBlock.schedule_at;\n            let calendarTimings = that.state.calendarTimings;\n            let dayValue = moment(schedule_at).isValid() ? moment(schedule_at).format('dddd').toLowerCase() : null;\n            /**\n             * Checking for Calendar Clinic Timings\n             * */\n            if (calendarTimings && dayValue && calendarTimings[dayValue]) {\n                let daysTimings = calendarTimings[dayValue];\n                if (daysTimings.lunch) {\n                    if (\n                        (moment(schedule_at, 'HH:mm:ss').format('HH:mm:ss') <= daysTimings.startTime.format('HH:mm:ss')\n                            || moment(schedule_at, 'HH:mm:ss').format('HH:mm:ss') > daysTimings.endTime.format('HH:mm:ss')\n                        ) || (\n                            moment(schedule_at, 'HH:mm:ss').format('HH:mm:ss') < daysTimings.lunchEndTime.format('HH:mm:ss')\n                            && moment(schedule_at, 'HH:mm:ss').format('HH:mm:ss') >= daysTimings.lunchStartTime.format('HH:mm:ss')\n                        )\n                    ) {\n                        flag = false;\n                    }\n                } else {\n                    if (moment(schedule_at, 'HH:mm:ss').format('HH:mm:ss') <= daysTimings.startTime.format('HH:mm:ss') || moment(schedule_at, 'HH:mm:ss').format('HH:mm:ss') > daysTimings.endTime.format('HH:mm:ss')) {\n                        flag = false;\n                    }\n                }\n            } else if (dayValue && !calendarTimings[dayValue]) {\n                /**\n                 * If the practice isnot opening for the day\n                 * */\n                flag = false;\n            }\n\n        }\n        that.setState({\n            practiceOutsideAvailableTiming: !flag\n        })\n    }\n    findOutsideDoctorTiming = () => {\n        let that = this;\n        let flag = true;\n        if (that.state.timeToCheckBlock.schedule_at && that.state.timeToCheckBlock.slot) {\n            let schedule_at = that.state.timeToCheckBlock.schedule_at;\n            let calendarTimings = that.state.doctorTimings;\n            let dayValue = moment(schedule_at).isValid() ? moment(schedule_at).format('dddd').toLowerCase() : null;\n            /**\n             * Checking for Calendar Clinic Timings\n             * */\n            if (calendarTimings && dayValue && calendarTimings[dayValue]) {\n                let daysTimings = calendarTimings[dayValue];\n                if (daysTimings.lunch) {\n                    if (\n                        (moment(schedule_at, 'HH:mm:ss').format('HH:mm:ss') <= daysTimings.startTime.format('HH:mm:ss')\n                            || moment(schedule_at, 'HH:mm:ss').format('HH:mm:ss') > daysTimings.endTime.format('HH:mm:ss')\n                        ) || (\n                            moment(schedule_at, 'HH:mm:ss').format('HH:mm:ss') < daysTimings.lunchEndTime.format('HH:mm:ss')\n                            && moment(schedule_at, 'HH:mm:ss').format('HH:mm:ss') >= daysTimings.lunchStartTime.format('HH:mm:ss')\n                        )\n                    ) {\n                        flag = false;\n                    }\n                } else {\n                    if (moment(schedule_at, 'HH:mm:ss').format('HH:mm:ss') <= daysTimings.startTime.format('HH:mm:ss') || moment(schedule_at, 'HH:mm:ss').format('HH:mm:ss') > daysTimings.endTime.format('HH:mm:ss')) {\n                        flag = false;\n                    }\n                }\n            } else if (dayValue && calendarTimings && !calendarTimings[dayValue]) {\n                /**\n                 * If the practice isnot opening for the day\n                 * */\n                flag = false;\n            }\n        }\n        that.setState({\n            doctorOutsideAvailableTiming: !flag\n        })\n    }\n\n    loadAppointment() {\n        let that = this;\n        this.setState({\n            loading: true,\n        })\n        let successFn = function (data) {\n            that.setState({\n                appointment: data,\n                patientDetails: data.patient,\n                timeToCheckBlock: data,\n                loading: false,\n            }, function () {\n                that.findBlockedTiming();\n                that.findOutsideDoctorTiming();\n                that.loadDoctorsTiming();\n                that.loadAppointmentList();\n            });\n\n        }\n\n        let errorFn = function () {\n            that.setState({\n                loading: false,\n            })\n        }\n        getAPI(interpolate(APPOINTMENT_API, [this.props.match.params.appointmentid]), successFn, errorFn);\n\n    }\n\n    loadDoctors() {\n        let that = this;\n        let successFn = function (data) {\n            let doctor = [];\n            let selectedDoctor = {};\n            data.staff.forEach(function (usersdata) {\n                if (usersdata.role == DOCTORS_ROLE) {\n                    doctor.push(usersdata);\n                    if (that.props.user.id==usersdata.user.id) {\n                        selectedDoctor = usersdata;\n                    }\n\n                }\n            });\n            that.setState(function (prevState) {\n\n\n                return {\n                    selectedDoctor:(doctor.length && !selectedDoctor.id ? doctor[0].user.id : selectedDoctor.user.id),\n                    practice_doctors: doctor,\n                    timeToCheckBlock: {...prevState.timeToCheckBlock, doctor: (doctor.length && !selectedDoctor.id ? doctor[0].user.id: selectedDoctor.user.id)}\n                }\n            }, function () {\n                that.findBlockedTiming();\n                that.loadDoctorsTiming();\n            });\n        }\n        let errorFn = function () {\n        };\n        getAPI(interpolate(PRACTICESTAFF, [this.props.active_practiceId]), successFn, errorFn);\n    }\n\n    loadProcedureCategory() {\n        let that = this;\n        let successFn = function (data) {\n            let obj = {};\n            data.forEach(function (item) {\n                obj[item.id] = item\n            })\n            that.setState({\n                procedure_category: data,\n                procedureObjectsById: {...obj}\n            })\n        }\n        let errorFn = function () {\n\n        }\n        getAPI(interpolate(PROCEDURE_CATEGORY, [this.props.active_practiceId]), successFn, errorFn,{pagination:false})\n    }\n\n    loadTreatmentNotes() {\n        let that = this;\n        let successFn = function (data) {\n            that.setState({\n                treatmentNotes: data\n            })\n\n        }\n        let errorFn = function () {\n\n        }\n        getAPI(interpolate(EMR_TREATMENTNOTES, [this.props.active_practiceId]), successFn, errorFn)\n    }\n\n    loadAppointmentCategories() {\n        let that = this;\n        let successFn = function (data) {\n            that.setState({\n                appointmentCategories: data\n            })\n\n        }\n        let errorFn = function () {\n\n        }\n        getAPI(interpolate(APPOINTMENT_CATEGORIES, [this.props.active_practiceId]), successFn, errorFn)\n    }\n\n    changeRedirect() {\n        var redirectVar = this.state.redirect;\n        this.setState({\n            redirect: !redirectVar,\n        });\n    }\n\n    searchPatient(value) {\n        let that=this;\n        this.setState({\n            searchPatientString: value\n        });\n        let successFn = function (data) {\n            that.setState(function (prevState) {\n                if(prevState.searchPatientString == value)\n                    if (data.current > 1) {\n                        return {\n                            patientListData: [...prevState.patientListData, ...data.results],\n\n                        }\n                    }else {\n                        return {\n                            patientListData: [...data.results],\n\n                        }\n                    }\n            })\n        };\n        let errorFn = function (data) {\n            that.setState({\n                searchPatientString:null,\n            })\n        };\n        if (value){\n            getAPI(interpolate(SEARCH_PATIENT, [value]), successFn, errorFn);\n        }\n\n    };\n    handleSubmit = (e) => {\n        let that = this;\n        let patient = {};\n        e.preventDefault();\n        this.props.form.validateFields((err, values) => {\n            if (!err) {\n                that.setState({\n                    saving: true\n                });\n                let formData = {...values};\n                formData.patient = {user: {}};\n                if (!this.state.patientDetails) {\n                    formData.patient.user.first_name = formData.patient_name;\n                    formData.patient.user.email = formData.patient_email;\n                    formData.patient.user.mobile = formData.patient_mobile;\n                    formData.patient_email = undefined;\n                    formData.patient_name = undefined;\n                    formData.patient_mobile = undefined;\n                } else {\n                    formData.patient = this.state.patientDetails;\n                }\n                formData.practice = that.props.active_practiceId;\n                // formData.treatment_plans = []\n                // values.procedure.forEach(function (id) {\n                //     let item = that.state.procedureObjectsById[id];\n                //     formData.treatment_plans.push({\n                //         \"procedure\": item.id,\n                //         \"cost\": item.cost,\n                //         \"quantity\": 1,\n                //         \"margin\": item.margin,\n                //         \"default_notes\": item.default_notes,\n                //         \"is_active\": true,\n                //         \"is_completed\": false,\n                //         \"discount\": item.discount,\n                //         \"discount_type\": \"%\",\n                //     })\n                // });\n                // delete formData.procedure;\n                // console.log(formData);\n                let successFn = function (data) {\n                    that.setState({\n                        saving: false\n                    });\n                    if (that.props.history)\n                        that.props.history.goBack();\n                    if (that.props.loadData)\n                        that.props.loadData();\n                    if (data) {\n                        // console.log(data)\n                        displayMessage(SUCCESS_MSG_TYPE, \"Appointment Created Successfully\");\n                    }\n                };\n                let errorFn = function () {\n                    that.setState({\n                        saving: false\n                    });\n                };\n                if (this.state.appointment) {\n                    putAPI(interpolate(APPOINTMENT_API, [this.state.appointment.id]), formData, successFn, errorFn);\n                } else {\n                    postAPI(ALL_APPOINTMENT_API, formData, successFn, errorFn);\n                }\n            }\n        });\n\n    }\n    handlePatientSelect = (event) => {\n        if (event) {\n            let that = this;\n            let successFn = function (data) {\n                that.setState({\n                    patientDetails: data\n                });\n            };\n            let errorFn = function () {\n            };\n            getAPI(interpolate(PATIENT_PROFILE, [event]), successFn, errorFn);\n        }\n    }\n    // handleChange = (event) => {\n    //     this.setState({})\n\n    //     // this.setState({ value: event.target.value });\n    // };\n    handleClick = (e) => {\n\n        this.setState({\n            patientDetails: null\n        })\n\n    };\n    loadAppointmentList(){\n        let that=this;\n        let successFn = function(data){\n            that.setState({\n                appointmentList:data,\n            })\n        }\n        let errorFn =function(data){\n        }\n        let apiParams={\n            start_time:moment(this.state.timeToCheckBlock.schedule_at).format(),\n            end_time:moment(this.state.timeToCheckBlock.schedule_at).add(this.state.timeToCheckBlock.slot, 'minutes').format(),\n            doctor:this.state.timeToCheckBlock.doctor,\n        }\n        getAPI(interpolate(APPOINTMENT_SCHEDULE,[this.props.active_practiceId]),successFn,errorFn,apiParams);\n    }\n    render() {\n        const that = this;\n        const formItemLayout = (this.props.formLayout ? this.props.formLayout : {\n            labelCol: {span: 6},\n            wrapperCol: {span: 14},\n        });\n        const formPatients = (this.props.formLayout ? this.props.formLayout : {\n            wrapperCol: {offset: 6, span: 14},\n        });\n        const {getFieldDecorator} = this.props.form;\n\n        // let doctorArray=this.state.practice_doctors;\n        // let loginUser =that.props.user;\n        // const doctorId={};\n        // let flag=true;\n        // doctorArray.forEach(function (items) {\n        //    if (items.user.id == that.props.user.id){\n        //        doctorId.id=that.props.user.id;\n        //        flag=false;\n        //        return false;\n        //    }\n        // },function () {\n        //     doctorId.id=doctorArray[0].user.id;\n        // });\n\n        const treatmentNotesOption = [];\n        if (this.state.treatmentNotes) {\n            this.state.treatmentNotes.forEach(function (drug) {\n                treatmentNotesOption.push({label: drug.name, value: drug.id});\n            })\n        }\n        const categoryOptions = [];\n        if (this.state.appointmentCategories) {\n            this.state.appointmentCategories.forEach(function (category) {\n                categoryOptions.push({label: category.name, value: category.id});\n            })\n        }\n        let appointmentTime = this.state.appointment ? this.state.appointment.schedule_at : this.props.startTime;\n        if (!appointmentTime) {\n            appointmentTime = new moment(new Date()).format();\n        }\n        const fields = [];\n\n        return <Card>\n            <Spin spinning={this.state.saving}>\n                <Form onSubmit={this.handleSubmit}>\n                    {this.props.title ? <h2>{this.props.title}</h2> : null}\n\n                    <FormItem key=\"schedule_at\" label=\"Appointment Schedule\" {...formItemLayout}>\n                        {getFieldDecorator(\"schedule_at\",\n                            {\n                                initialValue: appointmentTime ? moment(appointmentTime) : null,\n                                rules: [{required: true, message: REQUIRED_FIELD_MESSAGE}],\n                            })(\n                            <DatePicker format=\"YYYY/MM/DD HH:mm\" showTime\n                                        onChange={(value) => this.setBlockedTiming(\"schedule_at\", value)}/>\n                        )}\n                        {this.state.practiceOutsideAvailableTiming ?\n                            <Alert message=\"Selected time is outside available clinic time!!\" type=\"warning\"\n                                   showIcon/> : null}\n                        {this.state.practiceBlock ?\n                            <Alert message=\"Selected time is blocked in this clinic !!\" type=\"warning\"\n                                   showIcon/> : null}\n                    </FormItem>\n                    <FormItem key=\"slot\"\n                              {...formItemLayout}\n                              label=\"Time Slot\">\n                        {getFieldDecorator(\"slot\", {\n                            initialValue: this.state.appointment ? this.state.appointment.slot : 10,\n                            rules: [{required: true, message: REQUIRED_FIELD_MESSAGE}],\n                        })(\n                            <InputNumber min={1} onChange={(value) => this.setBlockedTiming(\"slot\", value)}/>\n                        )}\n                        <span className=\"ant-form-text\">mins\n                        <Row style={{float:\"right\"}}>\n                            <Col span={24}>\n                                {this.state.appointmentList && this.state.appointmentList.length>0 ?\n                                    <div span={5} style={{float:\"right\"}}>\n                                        <ul style={{listStyle:\"none\",display:\"inline-flex\",paddingLeft:'15px',paddingRight: \"10px\"}}>\n                                        {that.state.appointmentList.map((item) =><li style={{border: '1px solid #bbb', marginLeft: \"13px\",padding:\" 0.01em 14px\"}}><span style={{width: 'calc(100% - 60px)'}}><b>{moment(item.schedule_at).format(\"LT\")}</b>&nbsp;{item.patient.user.first_name}</span>\n                                        &nbsp;<b>with</b> &nbsp;{item.doctor_data.user.first_name}\n                                        </li>)}\n                                            \n                                        </ul>\n                                    </div>\n                                    \n                                :null}\n                            </Col>\n                        </Row>\n                       \n                        </span>\n                        {this.state.appointmentList && this.state.appointmentList.length>0 ?<>\n                                \n                                <Alert message=\"Selected time slot have assigned someone else !! please select another slot.\" type=\"warning\"\n                                   showIcon/> \n                                {/* <div style={{backgroundColor:\"#fffbe6\"}}>\n                                    <p style={{color:red ,padding:\"7px\"}}><Icon type=\"exclamation-circle\" theme=\"twoTone\" twoToneColor=\"#faad14\" /> </p>\n                                </div> */}\n                            \n                              </>      \n                        :null}\n                    </FormItem>\n                    \n\n                    {that.state.patientDetails ?\n                        <FormItem key=\"id\" value={this.state.patientDetails.id} {...formPatients}>\n                            <Card bordered={false} style={{background: '#ECECEC'}}>\n                                <Meta\n                                    avatar={(this.state.patientDetails.image ? <Avatar src={makeFileURL(this.state.patientDetails.image)}/> :\n                                        <Avatar style={{backgroundColor: '#87d068'}}>\n                                            {this.state.patientDetails.user.first_name ? this.state.patientDetails.user.first_name.charAt(0) :\n                                                <Icon type=\"user\"/>}\n                                        </Avatar>)}\n\n                                    title={this.state.patientDetails.user.first_name}\n                                    description={\n                                        <span>{that.props.activePracticePermissions.PatientPhoneNumber ? this.state.patientDetails.user.mobile : hideMobile(this.state.patientDetails.user.mobile)}<br/>\n                                    <Button type=\"primary\" style={{float: 'right'}} onClick={this.handleClick}>Add New\n                                    Patient</Button>\n                                    </span>}\n                                />\n\n\n                            </Card>\n                        </FormItem>\n                        : <div>\n                            <FormItem key=\"patient_name\" label=\"Patient Name\"  {...formItemLayout}>\n                                {getFieldDecorator(\"patient_name\", {\n                                    initialValue: this.state.appointment ? this.state.appointment.patient.user.first_name : null,\n                                    rules: [{required: true, message: REQUIRED_FIELD_MESSAGE}],\n                                })(\n                                    <AutoComplete placeholder=\"Patient Name\"\n                                                  showSearch\n                                                  onSearch={this.searchPatient}\n                                                  defaultActiveFirstOption={false}\n                                                  showArrow={false}\n                                                  filterOption={false}\n                                                  onSelect={this.handlePatientSelect}>\n                                        {this.state.patientListData.map((option) => <AutoComplete.Option\n                                            value={option.id.toString()}>\n                                            <List.Item style={{padding: 0}}>\n                                                <List.Item.Meta\n                                                    avatar={(option.image ? <Avatar src={makeFileURL(option.image)}/> :\n                                                        <Avatar style={{backgroundColor: '#87d068'}}>\n                                                            {option.user.first_name ? option.user.first_name.charAt(0) :\n                                                                <Icon type=\"user\"/>}\n                                                        </Avatar>)}\n                                                    title={option.user.first_name + \" (ID:\" + (option.custom_id?option.custom_id:option.user.id) + \")\"}\n                                                    description={that.props.activePracticePermissions.PatientPhoneNumber ? option.user.mobile : hideMobile(option.user.mobile)}\n                                                />\n\n                                            </List.Item>\n                                        </AutoComplete.Option>)}\n                                    </AutoComplete>\n                                )}\n                            </FormItem>\n                            <FormItem key=\"patient_mobile\" label=\"Mobile Number\"   {...formItemLayout}>\n                                {getFieldDecorator(\"patient_mobile\", {\n                                    initialValue: this.state.appointment ? this.state.appointment.patient.user.mobile : null,\n                                    rules: [{required: true, message: REQUIRED_FIELD_MESSAGE}],\n                                })(\n                                    <Input placeholder=\"Mobile Number\"/>\n                                )}\n                            </FormItem>\n                            <FormItem key=\"patient_email\" label=\"Email Address\"  {...formItemLayout}>\n                                {getFieldDecorator(\"patient_email\", {\n                                    initialValue: this.state.appointment ? this.state.appointment.patient.user.email : null,\n                                    rules: [{type: 'email', message: 'The input is not valid E-mail!'},\n                                        {required: true, message: REQUIRED_FIELD_MESSAGE}],\n                                })(\n                                    <Input placeholder=\"Email Address\"/>\n                                )}\n                            </FormItem>\n\n                        </div>}\n\n                    <FormItem key=\"doctor\" {...formItemLayout} label=\"Doctor\">\n                        {getFieldDecorator(\"doctor\", {initialValue: this.state.appointment ? this.state.appointment.doctor:this.state.selectedDoctor}, {\n                            rules: [{required: true, message: REQUIRED_FIELD_MESSAGE}],\n                        })(\n                            <Select placeholder=\"Doctor\"\n                                    onChange={(value) => this.setBlockedTiming(\"doctor\", value)}>\n                                {this.state.practice_doctors.map((option) => <Select.Option\n                                    value={option.id}>{(option.user.first_name + \"(\" + option.user.email + \")\")}</Select.Option>)}\n                            </Select>\n                        )}\n                        {this.state.doctorBlock ?\n                            <Alert message=\"Selected time is blocked for selected doctor in this clinic!!\"\n                                   type=\"warning\"\n                                   showIcon/> : null}\n                        {this.state.doctorOutsideAvailableTiming ?\n                            <Alert message=\"Selected time is out of doctor's visit time in this clinic!!\"\n                                   type=\"warning\"\n                                   showIcon/> : null}\n                        {this.state.appointmentList && this.state.appointmentList.length>0 ?<>\n                            <Alert message=\"Selected time doctor's busy on other patients in  this clinic!!\"\n                                   type=\"warning\"\n                                   showIcon/>\n                        </>:null}\n                    </FormItem>\n                    <FormItem key=\"category\" {...formItemLayout} label=\"Category\">\n                        {getFieldDecorator(\"category\", {initialValue: this.state.appointment ? this.state.appointment.category : null}, {\n                            rules: [{required: true, message: REQUIRED_FIELD_MESSAGE}],\n                        })(\n                            <Select placeholder=\"Category\">\n                                {categoryOptions.map((option) => <Select.Option\n                                    value={option.value}>{option.label}</Select.Option>)}\n                            </Select>\n                        )}\n                    </FormItem>\n                    {/* <FormItem key=\"procedure\" {...formItemLayout} label=\"Procedures Planned\">\n                        {getFieldDecorator(\"procedure\", {initialValue: this.state.appointment ? this.state.appointment.procedure_data.treatment_plans.id :null}, {\n                            rules: [{required: true, message: REQUIRED_FIELD_MESSAGE}],\n                        })(\n                            <Select placeholder=\"Procedures Planned\" mode={\"multiple\"}>\n                                {this.state.procedure_category && this.state.procedure_category.map((drug) =>\n                                    <Select.Option\n                                        value={drug.id}>{drug.name}</Select.Option>\n                                )}\n                            </Select>\n                        )}\n                    </FormItem> */}\n                    {this.state.appointment ?\n                        <FormItem key=\"status\" {...formItemLayout} label=\"Status\">\n                            {getFieldDecorator(\"status\", {initialValue: this.state.appointment.status})\n                            (\n                                <Select placeholder=\"Status\">\n                                    {APPOINTMENT_STATUS.map((option) => <Select.Option\n                                        value={option.value}>{option.label}</Select.Option>)}\n                                </Select>\n                            )}\n                        </FormItem> : null\n                    }\n\n\n                    <FormItem key=\"notes\" {...formItemLayout} label=\"Notes\">\n                        {getFieldDecorator(\"notes\", {initialValue: this.state.appointment ? this.state.appointment.notes : null}, {\n                            rules: [{required: true, message: REQUIRED_FIELD_MESSAGE}],\n                        })(\n                            <Input placeholder=\"Notes\"/>\n                        )}\n                    </FormItem>\n                    <FormItem {...formItemLayout}>\n                        <Button loading={that.state.saving} type=\"primary\" htmlType=\"submit\" style={{margin: 5}}>\n                            Submit\n                        </Button>\n                        {that.props.history ?\n                            <Button style={{margin: 5}} onClick={() => that.props.history.goBack()}>\n                                Cancel\n                            </Button> : null}\n                    </FormItem>\n                </Form>\n            </Spin>\n        </Card>\n    }\n}\n","import React from \"react\";\nimport {Route} from \"react-router\";\nimport DynamicFieldsForm from \"../common/DynamicFieldsForm\";\nimport {Button, Card, Form, Icon, Row} from \"antd\";\nimport {\n    CHECKBOX_FIELD,\n    SINGLE_CHECKBOX_FIELD,\n    DATE_PICKER,\n    NUMBER_FIELD,\n    SUCCESS_MSG_TYPE,\n    INPUT_FIELD,\n    RADIO_FIELD,\n    SELECT_FIELD,\n    DOCTORS_ROLE\n} from \"../../constants/dataKeys\";\nimport {\n    PATIENTS_LIST,\n    ALL_APPOINTMENT_API,\n    APPOINTMENT_CATEGORIES,\n    PRACTICESTAFF,\n    PROCEDURE_CATEGORY, APPOINTMENT_API, SINGLE_PRACTICE_STAFF_API, SEARCH_PATIENT\n} from \"../../constants/api\";\nimport {getAPI, interpolate, displayMessage} from \"../../utils/common\";\nimport {Redirect} from 'react-router-dom'\nimport moment from 'moment';\nimport CreateAppointmentForm from \"./CreateAppointmentForm\";\n\n\nclass CreateAppointment extends React.Component {\n    render() {\n        const formProp = {\n            successFn: function (data) {\n                console.log(data);\n                displayMessage(SUCCESS_MSG_TYPE, \"success\")\n\n            },\n            errorFn: function () {\n\n            },\n            onFieldsDataChange: function (data) {\n                console.log(data);\n            },\n            action: ALL_APPOINTMENT_API,\n            method: \"post\",\n        };\n        let defaultValues = [{\"key\": \"practice\", \"value\": this.props.active_practiceId}];\n        let that = this;\n        let editformProp;\n        // if (this.state.appointment) {\n        //     editformProp = {\n        //         successFn: function (data) {\n        //             displayMessage(SUCCESS_MSG_TYPE, \"success\");\n        //             console.log(data);\n        //         },\n        //         errorFn: function () {\n        //\n        //         },\n        //         onFieldsDataChange: function (data) {\n        //             that.setState(function (prevState) {\n        //                 return {appointment: {...prevState.appointment, ...data}}\n        //             });\n        //         },\n        //         action: interpolate(APPOINTMENT_API, [this.state.appointment.id]),\n        //         method: \"put\",\n        //     }\n        //     defaultValues = [{\"key\": \"practice\", \"value\": this.state.appointment.practice}];\n        //\n        // }\n        const TestFormLayout = Form.create()(CreateAppointmentForm);\n        return <Row>\n            <Route exact path='/calendar/:appointmentid/edit-appointment'\n                   render={(route) => (this.props.match.params.appointmentid ?\n                       <TestFormLayout {...route} {...this.props} defaultValues={defaultValues} title=\"Edit Appointment\"\n                                       changeRedirect={this.changeRedirect}/> :\n                       <Redirect to={'/patients/appointments/'}/>)}/>\n\n            <Route exact path='/calendar/create-appointment'\n                   render={(route) => <TestFormLayout {...this.props} defaultValues={defaultValues} changeRedirect={this.changeRedirect} {...route}\n                                                 title=\"ADD Appointment \"/>}/>\n\n        </Row>\n    }\n\n\n}\n\nexport default CreateAppointment;\n","import React from \"react\";\nimport {\n    DATE_PICKER,\n    DATE_TIME_PICKER, DOCTORS_ROLE,\n    ERROR_MSG_TYPE,\n    INPUT_FIELD,\n    SELECT_FIELD,\n    TIME_PICKER\n} from \"../../constants/dataKeys\";\nimport moment from \"moment\";\nimport DynamicFieldsForm from \"../common/DynamicFieldsForm\";\nimport {Form, Card, Row, Col,Popover, List,Button, DatePicker,TimePicker,Input,Select,Divider} from \"antd\";\nimport {APPOINTMENT_PERPRACTICE_API, BLOCK_CALENDAR, PRACTICESTAFF} from \"../../constants/api\";\nimport {displayMessage, getAPI, interpolate,postAPI} from \"../../utils/common\";\nimport { loadDoctors } from \"../../utils/clinicUtils\";\nimport {\n    CANCELLED_STATUS,\n    CHECKOUT_STATUS,\n    ENGAGED_STATUS,\n    SCHEDULE_STATUS,\n    WAITING_STATUS\n} from \"../../constants/hardData\";\nimport EventPatientPopover from \"./EventPatientPopover\";\nimport { tag } from \"postcss-selector-parser\";\n\nclass BlockCalendar extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            practiceDoctors: [],\n            blockedAppointmentParams: {\n                block_from:moment(),\n                block_to:moment(),\n            }\n        };\n        loadDoctors(this);\n    }\n    // componentDidMount() {\n    //\n    // }\n    changeParamsForBlockedAppointments = (type, value) => {\n        let that = this;\n        this.setState(function (prevState) {\n            return {\n                blockedAppointmentParams: {\n                    ...prevState.blockedAppointmentParams,\n                    [type]: value\n                }\n            }\n        }, function () {\n            // if (valueObj.block_from && valueObj.block_to)\n            that.retrieveBlockingAppointments();\n        })\n    }\n    retrieveBlockingAppointments = () => {\n        let that = this;\n        that.setState({\n            loading: true\n        });\n        let successFn = function (data) {\n            that.setState(function (prevState) {\n                return {\n                    blockingAppointments: data,\n                    loading: false\n                }\n            });\n        }\n        let errorFn = function () {\n            that.setState({\n                loading: false\n            })\n        }\n        if (this.state.blockedAppointmentParams.block_from && this.state.blockedAppointmentParams.block_to)\n            getAPI(interpolate(APPOINTMENT_PERPRACTICE_API, [this.props.active_practiceId]), successFn, errorFn, {\n                start: moment(that.state.blockedAppointmentParams.block_from).format('YYYY-MM-DD'),\n                end: moment(that.state.blockedAppointmentParams.block_to).format('YYYY-MM-DD'),\n                doctor:that.state.blockedAppointmentParams.doctor,\n            });\n    }\n\n    handleSubmit =(e)=>{\n        let that=this;\n        e.preventDefault();\n        let reqData={}\n        this.props.form.validateFields((err, values) => {\n            if (!err) {\n                reqData = {...values,\n                    practice:this.props.active_practiceId,\n                    // block_from:moment(that.state.blockedAppointmentParams.block_from).format('YYYY-MM-DD'),\n                    // block_to:moment(that.state.blockedAppointmentParams.block_to).format('YYYY-MM-DD'),\n\n                };\n\n            }\n        });\n\n        let successFn =function(data){\n\n        };\n        let errorFn=function(){\n\n        };\n        postAPI(BLOCK_CALENDAR,reqData,successFn,errorFn)\n    };\n   \n    render(){\n        let that = this;\n        const {getFieldDecorator} = this.props.form;\n \n        const formItemLayout = ({\n            labelCol: {span: 6},\n            wrapperCol: {span: 4},\n        });\n        //\n        // let doctorArray=this.state.practiceDoctors;\n        // let loginUser =that.props.user;\n        // const doctorId={};\n        // let flag=true;\n        // doctorArray.forEach(function (items) {\n        //     if (items.user.id == loginUser.id){\n        //         doctorId.id=that.loginUser.id;\n        //         flag=false;\n        //         return false;\n        //     }\n        // },function () {\n        //     doctorId.id=doctorArray[0].user.id\n        // });\n\n        return(<Card title={'Block Calendar'}>\n                <Row>\n                    <Col span={18}>\n                        <Form onSubmit={this.handleSubmit}>\n                            <Form.Item label=\"Block From\" {...formItemLayout}>\n                                {getFieldDecorator('block_from',{initialValue:moment()})\n                                (<DatePicker  showTime onChange={(value)=>this.changeParamsForBlockedAppointments('block_from',value)}/>)\n                            }\n                            </Form.Item>\n\n                            <Form.Item label=\"Block To\" {...formItemLayout}>\n                                {getFieldDecorator('block_to',{initialValue:moment()})\n                                (<DatePicker  showTime onChange={(value)=>this.changeParamsForBlockedAppointments('block_to',value)}/>)\n                            }\n                            </Form.Item>\n\n                            <Form.Item label=\"Event Name\" {...formItemLayout}>\n                                {getFieldDecorator('event', {})\n                                (<Input placeholder=\"Event Name\"/>)\n                                }\n                            </Form.Item>\n\n                            <Form.Item label=\"Doctor\" {...formItemLayout}>\n                                {getFieldDecorator('doctor', {initialValue:6})\n                                (<Select placeholder=\"Docto List\"  onChange={(value) => this.changeParamsForBlockedAppointments(\"doctor\", value)}>\n                                    {this.state.practiceDoctors.map((option) => <Select.Option\n                                    value={option.id}>{option.user.first_name}</Select.Option>)}\n                                </Select>)\n\n                                }\n                            </Form.Item>\n\n                            <Form.Item>\n                                <Button style={{margin: 5}} type=\"primary\" htmlType=\"submit\">\n                                    Submit\n                                </Button>\n                                {that.props.history ?\n                                    <Button style={{margin: 5}} onClick={() => that.props.history.goBack()}>\n                                        Cancel\n                                    </Button> : null}\n                            </Form.Item>\n\n                        </Form>\n                    </Col>\n                \n                    <Col span={6}>\n                        <List\n                            size={'small'}\n                            dataSource={this.state.blockingAppointments}\n                            renderItem={(apppointment) => (apppointment.status == CANCELLED_STATUS ? <div/> : <List.Item\n                                color={'transparent'}\n                                style={{padding: 0}}>\n                                <div\n                                    style={{\n                                        border: '1px solid #ddd',\n                                        borderRadius: '5px',\n                                        textDecoration: (apppointment.status == CANCELLED_STATUS ? 'line-through' : 'inherit'),\n                                        backgroundColor: (apppointment.status == CANCELLED_STATUS ? '#aaa' : '#eee'),\n                                        width: '100%',\n                                        marginTop: '2px',\n                                        borderLeft: '5px solid' + (apppointment.doctor && that.state.practice_doctors && that.state.practice_doctors[apppointment.doctor] ? that.props.doctors_object[apppointment.doctor].calendar_colour : 'transparent')\n                                    }}>\n                                    <AppointmentCard {...apppointment}\n                                                    changeAppointmentStatus={this.changeAppointmentStatus} {...this.props}/>\n                                </div>\n                            </List.Item>)\n                            }/>\n                    </Col>\n                </Row>\n               \n            </Card>\n\n        )\n    }\n}\nexport default Form.create()(BlockCalendar);\n\nfunction AppointmentCard(appointment) {\n    return <div style={{width: '100%'}}>\n\n        <p style={{marginBottom: 0}}>\n        <Divider type=\"vertical\" />\n            <Popover placement=\"right\"\n                     content={<EventPatientPopover appointmentId={appointment.id}\n                                                   key={appointment.id} {...appointment}/>}>\n            <span\n                style={{width: 'calc(100% - 60px)'}}><b>{moment(appointment.schedule_at).format(\"LLL\")}</b>&nbsp;\n                {appointment.patient.user.first_name}</span>\n            <p style={{color:appointment.doctor_data ?appointment.doctor_data.calendar_colour:null}}><Divider type=\"vertical\"/><span>{appointment.doctor_data ? appointment.doctor_data.user.first_name:null}</span></p>\n            </Popover>\n        </p>\n    </div>;\n}\n","import React from \"react\";\nimport {Layout, Spin, Button, Drawer, Row, Col, Form, Input, Divider, Modal} from \"antd\";\nimport {SUGGESTIONS} from \"../../constants/api\";\nimport {displayMessage, interpolate, postAPI} from \"../../utils/common\";\nimport {SUCCESS_MSG_TYPE} from \"../../constants/dataKeys\";\n\nconst {TextArea} = Input;\n\nclass SuggestionBox extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {};\n\n    }\n\n\n    onClose = () => {\n        let that = this;\n        that.props.close();\n    };\n    handleSubmit = (e) => {\n        e.preventDefault();\n        let that = this;\n        this.props.form.validateFieldsAndScroll((err, values) => {\n            if (!err) {\n                let reqData = {\n                    ...values,\n                }\n                let successFn = function (data) {\n                    displayMessage(SUCCESS_MSG_TYPE, \"Save Your Suggestions\");\n                    that.props.close();\n\n                }\n                let errorFn = function () {\n\n                }\n                postAPI(SUGGESTIONS, reqData, successFn, errorFn);\n            }\n\n        })\n    };\n\n    render() {\n        let that = this;\n        const {getFieldDecorator} = this.props.form;\n        return <div>\n            <Modal\n                title=\"Your Suggestion\"\n                width={720}\n                onClose={this.onClose}\n                visible={that.props.visible}>\n\n                <Form layout=\"vertical\" onSubmit={this.handleSubmit}>\n                    <Row gutter={16}>\n                        <Col span={12}>\n                            <Form.Item label=\"Name\">\n                                {getFieldDecorator('name', {\n                                    rules: [{required: true, message: 'Please enter  name'}],\n                                })(<Input placeholder=\"Please enter user name\"/>)}\n                            </Form.Item>\n                        </Col>\n                        <Col span={12}>\n                            <Form.Item label=\"Email\">\n                                {getFieldDecorator('email', {\n                                    rules: [{required: true, message: 'Please enter Email'}],\n                                })(\n                                    <Input\n                                        style={{width: '100%'}}\n                                        placeholder=\"Please enter Email\"\n                                    />,\n                                )}\n                            </Form.Item>\n                        </Col>\n                    </Row>\n\n                    <Row gutter={16}>\n                        <Col span={12}>\n                            <Form.Item label=\"Mobile\">\n                                {getFieldDecorator('mobile')\n                                (<Input placeholder=\"Please enter Mobile\"/>)}\n                            </Form.Item>\n                        </Col>\n                        <Col span={12}>\n                            <Form.Item label=\"Subject\">\n                                {getFieldDecorator('subject')(\n                                    <Input\n                                        style={{width: '100%'}}\n                                        placeholder=\"Please enter Email\"\n                                    />,\n                                )}\n                            </Form.Item>\n                        </Col>\n                    </Row>\n                    <Row gutter={16}>\n                        <Col span={24}>\n                            <Form.Item label=\"Description\">\n                                {getFieldDecorator('description')\n                                (<TextArea placeholder=\"Please enter description\"\n                                           autosize={{minRows: 4, maxRows: 6}}/>)}\n                            </Form.Item>\n                        </Col>\n                    </Row>\n                    <Divider/>\n                    <div\n                        style={{\n                            textAlign: '-webkit-center',\n                        }}\n                    >\n                        <Button onClick={this.onClose} style={{marginRight: 8}}>\n                            Cancel\n                        </Button>\n                        <Button htmlType=\"submit\" onSubmit={this.handleSubmit} type=\"primary\">\n                            Submit\n                        </Button>\n                    </div>\n                </Form>\n\n            </Modal>\n        </div>\n\n    }\n}\n\nexport default Form.create()(SuggestionBox);\n","import React from \"react\";\nimport {logErrorToSlackChannel} from \"./utils/crashHandlingUtils\";\nimport {Button, Result} from \"antd\";\n\nexport default class ErrorBoundary extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {hasError: false};\n    }\n\n    static getDerivedStateFromError(error) {\n        // Update state so the next render will show the fallback UI.\n        return {hasError: true};\n    }\n\n    componentDidCatch(error, errorInfo) {\n        // You can also log the error to an error reporting service\n\n        logErrorToSlackChannel(error, errorInfo);\n    }\n\n    redirectToHome = () => {\n        window.location.replace(\"/\");\n    }\n\n    render() {\n        let that = this;\n        if (this.state.hasError) {\n            return <Result\n                status=\"500\"\n                title=\"500\"\n                subTitle={\"Sorry, something went wrong.\"}\n                extra={<Button type=\"primary\" onClick={this.redirectToHome}>Back Home</Button>}\n            />;\n        }\n\n        return this.props.children;\n    }\n}","import {postOuterAPI} from \"../../app/utils/common\";\nimport CONFIG from \"../../app.config\";\nimport moment from \"moment\";\nimport lockr from \"lockr\";\nimport {loggedInUser} from \"../../app/utils/auth\";\n\nexport const logErrorToSlackChannel = function (error, errorInfo) {\n    let crashData = {\n        \"text\": error.toString(),\n        \"attachments\": [\n            {\n                \"color\": \"#36a64f\",\n                \"author_name\": window.location.hostname,\n                \"author_link\": \"http://flickr.com/bobby/\",\n                \"author_icon\": window.location.hostname + \"/favicon.ico\",\n                \"title\": \"BK ERP Admin Application Crash Error\",\n                text: errorInfo.componentStack,\n                \"fields\": [\n                    {\n                        \"title\": \"Priority\",\n                        \"value\": \"High\",\n                        \"short\": false\n                    }, {\n                        \"title\": \"Domain\",\n                        \"value\": window.location.hostname,\n                        \"short\": false\n                    }, {\n                        \"title\": \"Path\",\n                        \"value\": window.location.pathname,\n                        \"short\": false\n                    }, {\n                        \"title\": \"User\",\n                        \"value\": loggedInUser(),\n                        \"short\": false\n                    }\n                ],\n                \"ts\": new moment().format('X')\n            }\n        ]\n    }\n    let successFn = function () {\n        console.log(\"The above error has been notified to devs.\");\n    }\n    let errorFn = function () {\n        console.log(\"The above error notifications failed\");\n    }\n    if ((CONFIG.prodDomain && CONFIG.crashHandling.slack.sendOnProduction && CONFIG.prodDomain.indexOf(window.location.hostname) > -1) || CONFIG.crashHandling.slack.sendOnDevelopment) {\n        postOuterAPI(CONFIG.crashHandling.slack.webHookUrl, crashData, successFn, errorFn, {\n            'Content-type': 'application/x-www-form-urlencoded'\n        });\n    }\n}","import React from \"react\";\nimport {Route, Switch} from \"react-router-dom\";\nimport AppHeader from \"./AppHeader\";\nimport {Layout, Spin, Button} from \"antd\";\nimport loadable from '@loadable/component';\nimport AppSider from \"./AppSider\";\nimport {loadUserDetails, loggedInactivePractice, loggedInUserPractices, setCurrentPractice} from \"../../utils/auth\";\nimport Error404 from \"../common/errors/Error404\";\nimport Profile from \"../auth/Profile\";\nimport PrintPatientForm from \"../patients/patient/PrintPatientForm\";\nimport CreateAppointment from \"../calendar/CreateAppointment\";\nimport BlockCalendar from \"../calendar/BlockCalendar\";\nimport PermissionDenied from \"../common/errors/PermissionDenied\";\nimport SuggestionBox from \"./SuggestionBox\";\nimport ErrorBoundary from \"../../../crashHandling/ErrorBoundary\";\n\nconst Calendar = loadable(() => import('../calendar/Calendar'));\nconst ReportsHome = loadable(() => import('../reports/ReportsHome'));\nconst WebAdminHome = loadable(() => import('../webAdmin/WebAdminHome'));\nconst InventoryHome = loadable(() => import('../inventory/InventoryHome'));\nconst MeetingBooking = loadable(() => import('../conference/meeting/MeetingBooking'));\nconst SettingsDash = loadable(() => import('../settings/SettingsDash'));\nconst PatientHome = loadable(() => import('../patients/PatientHome'));\n\nclass AppBase extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            collapsed: false,\n            active_practiceId: loggedInactivePractice(),\n            practiceList: loggedInUserPractices(),\n            activePracticeData: null,\n            activePracticePermissions: {},\n            specialisations: null,\n            allowAllPermissions: false,\n            loadingPermissions: false,\n            visible: false,\n\n        };\n        this.activeData = this.activeData.bind(this);\n        // this.clinicData = this.clinicData.bind(this);\n        this.switchPractice = this.switchPractice.bind(this);\n\n\n    }\n\n    componentDidMount() {\n        this.activeData();\n\n    }\n\n\n    toggleSider = (option) => {\n        this.setState({\n            collapsed: !!option,\n        });\n    }\n\n    activeData() {\n        let that = this;\n        let successFn = function (data) {\n            that.setState(function (prevState) {\n                let permissions = {};\n                data.practice_permissions.forEach(function (permission) {\n                    permissions[permission.codename] = permission;\n                });\n                data.global_permissions.forEach(function (permission) {\n                    permissions[permission.codename] = permission;\n                });\n                return {\n                    activePracticePermissions: permissions,\n                    loadingPermissions: false,\n                    practiceList: loggedInUserPractices(),\n                }\n            }, function () {\n                // that.clinicData();\n            });\n        }\n        let errorFn = function () {\n            that.setState({\n                loadingPermissions: false\n            })\n        }\n\n        that.setState(function (prevState) {\n            let activePracticeObj = null;\n            prevState.practiceList.forEach(function (practiceObj) {\n                if (practiceObj.practice.id == prevState.active_practiceId) {\n                    activePracticeObj = practiceObj.practice\n                }\n            });\n            if (activePracticeObj || !prevState.practiceList.length)\n                return {\n                    activePracticeData: activePracticeObj,\n                    loadingPermissions: true\n                }\n            setCurrentPractice(prevState.practiceList[0].practice.id);\n            return {\n                activePracticeData: prevState.practiceList[0].practice,\n                active_practiceId: prevState.practiceList[0].practice.id,\n                loadingPermissions: true\n            }\n        }, function () {\n            loadUserDetails(that.state.active_practiceId, successFn, errorFn);\n        })\n\n\n    }\n\n    switchPractice(practiceId) {\n        let that = this;\n        that.setState(function (prevState) {\n            return {\n                active_practiceId: practiceId,\n            }\n        }, function () {\n            setCurrentPractice(practiceId);\n            that.activeData();\n        });\n\n\n    }\n\n    showDrawer = () => {\n        this.setState({\n            visible: true,\n        });\n    };\n    onClose = () => {\n        this.setState({\n            visible: false,\n        });\n    };\n\n\n    render() {\n        let that = this;\n        if (this.state.loadingPermissions) {\n            return <Spin spinning={this.state.loadingPermissions} tip={\"Loading Permissions....\"}>\n                <div style={{width: '100vw', height: '100vh'}}/>\n            </Spin>\n        }\n        return <Layout style={{minHeight: '100vh'}}>\n            <ErrorBoundary>\n                <div style={{\n                    position: 'fixed', right: '29px',\n                    bottom: '23px', zIndex: '20'\n                }}>\n                    <Button type=\"primary\" shape=\"circle\" icon=\"mail\" size={\"large\"} onClick={this.showDrawer}/>\n                </div>\n                <Switch>\n                    <Route path={\"/patients/patientprintform\"}\n                           render={(route) => <PrintPatientForm {...this.state} key={that.state.active_practiceId}/>}/>\n                    <Route>\n                        <Layout>\n                            <AppSider toggleSider={this.toggleSider} {...this.state}\n                                      key={that.state.active_practiceId} {...this.props} />\n                            <Layout>\n                                <AppHeader {...this.props}\n                                           {...this.state}\n                                           switchPractice={this.switchPractice}\n                                           toggleSider={this.toggleSider}/>\n                                <Switch>\n                                    {this.state.activePracticePermissions.WebAdmin ?\n                                        <Route path=\"/web\" render={(route) => <WebAdminHome {...this.state}\n                                                                                            {...this.props}\n                                                                                            {...route}\n                                                                                            key={that.state.active_practiceId}/>}/>\n                                        : null}\n                                    <Route exact path=\"/calendar/create-appointment\"\n                                           render={(route) => (this.state.activePracticePermissions.AddAppointment || this.state.allowAllPermissions ?\n                                               <CreateAppointment {...this.state}{...this.props} {...route}\n                                                                  startTime={this.state.startTime}/> :\n                                               <PermissionDenied/>)}/>\n\n                                    <Route exact path=\"/calendar/:appointmentid/edit-appointment\"\n                                           render={(route) => (this.state.activePracticePermissions.EditAppointment || this.state.allowAllPermissions ?\n                                               <CreateAppointment {...this.state}{...this.props} {...route}\n                                                                  startTime={this.state.startTime}/> :\n                                               <PermissionDenied/>)}/>\n                                    <Route exact path=\"/calendar/blockcalendar\"\n                                           render={(route) => (that.state.activePracticePermissions.BlockCalendar || that.state.allowAllPermissions ?\n                                               <BlockCalendar {...this.state} {...this.props} {...route}/> :\n                                               <PermissionDenied/>)}/>\n                                    <Route path=\"/calendar\"\n                                           render={(route) => (that.state.activePracticePermissions.ViewCalendar ?\n                                               <Calendar {...that.state}\n                                                         {...that.props}\n                                                         {...route}\n                                                         key={that.state.active_practiceId}/> : <PermissionDenied/>)}/>\n                                    <Route path=\"/patient/:id\" render={(route) => <PatientHome {...this.state}\n                                                                                               {...this.props}\n                                                                                               {...route}\n                                                                                               key={that.state.active_practiceId + \"|\" + route.match.params.id}/>}/>\n\n                                    <Route path=\"/settings\" render={(route) => <SettingsDash {...this.state}\n                                                                                             {...this.props}\n                                                                                             {...route}\n                                                                                             key={that.state.active_practiceId}\n                                                                                             refreshClinicData={this.activeData}/>}/>\n                                    <Route path=\"/inventory\" render={(route) => <InventoryHome {...this.state}\n                                                                                               {...this.props}\n                                                                                               {...route}\n                                                                                               key={that.state.active_practiceId}/>}/>\n                                    <Route path=\"/reports/:type\" render={(route) => <ReportsHome {...this.state}\n                                                                                                 {...this.props}\n                                                                                                 {...route}\n                                                                                                 key={that.state.active_practiceId}/>}/>\n\n                                    <Route path=\"/profile\" render={(route) =>\n                                        <Profile {...this.state}\n                                                 {...this.props}\n                                                 {...route} key={that.state.active_practiceId}/>}/>\n\n                                    <Route path=\"/meeting-booking\"\n                                           render={(route) => (this.state.activePracticePermissions.ViewMeeting || this.state.allowAllPermissions ?\n                                               <MeetingBooking  {...this.state} {...this.props} {...route}\n                                                                key={that.state.active_practiceId}/> :\n                                               <PermissionDenied/>)}/>\n                                    {/*<Route path=\"/alternate-medicine\" render={(route)=>(this.state.activePracticePermissions.ManageMedicineConversion || this.state.allowAllPermissions?*/}\n                                    {/*    <AlternateMedicineHome  {...this.state} {...this.props} {...route}*/}\n                                    {/*                     key={that.state.active_practiceId}/>:<PermissionDenied/>)}/>*/}\n\n                                    {this.state.activePracticePermissions.ViewCalendar ?\n                                        <Route exact path=\"/\" render={(route) => <Calendar {...this.state}\n                                                                                           {...this.props}\n                                                                                           {...route}\n                                                                                           key={that.state.active_practiceId}/>}/> : null}\n\n\n                                    <Route path=\"/\" render={(route) => <PatientHome {...this.state}\n                                                                                    {...this.props}\n                                                                                    {...route}\n                                                                                    key={that.state.active_practiceId}/>}/>\n\n\n                                    <Route component={Error404}/>\n\n                                </Switch>\n                                {/*<AppFooter/>*/}\n                            </Layout>\n                        </Layout>\n                    </Route>\n                </Switch>\n                <SuggestionBox {...this.state} close={this.onClose}/>\n            </ErrorBoundary>\n        </Layout>\n            ;\n    }\n}\n\nexport default AppBase;\n","import React from 'react';\nimport {CONFIG_API, MAILING_USERS_LIST, PRACTICESTAFF} from \"../constants/api\";\nimport {displayMessage, getAPI, interpolate} from \"./common\";\nimport {DOCTORS_ROLE, ERROR_MSG_TYPE} from \"../constants/dataKeys\";\nimport {Link} from \"react-router-dom\";\nimport {Menu, Modal} from 'antd';\nimport {MAIL_SEND_ERROR_MSG, MAIL_SEND_MSG, SUCCESS} from \"../constants/messages\";\nconst { confirm } = Modal;\nexport const loadDoctors = function (that) {\n    let successFn = function (data) {\n        let doctor = [];\n        let selectedDoctor = {};\n        data.staff.forEach(function (usersdata) {\n\n            if (usersdata.role.indexOf(parseInt(DOCTORS_ROLE)) > -1 || usersdata.role.indexOf(DOCTORS_ROLE) > -1) {\n                doctor.push(usersdata);\n                if (that.props.user.id == usersdata.user.id) {\n                    selectedDoctor = usersdata;\n                }\n            }\n        });\n        that.setState({\n            practiceDoctors: doctor,\n            selectedDoctor: (doctor.length && !selectedDoctor.id ? doctor[0] : selectedDoctor)\n        });\n    };\n    let errorFn = function () {\n    };\n    getAPI(interpolate(PRACTICESTAFF, [that.props.active_practiceId]), successFn, errorFn);\n}\n\nexport const patientSettingMenu = (<Menu>\n        <Menu.Item key=\"1\">\n            <Link to={\"/settings/prescriptions\"}>\n                Add/Edit Drugs\n            </Link>\n        </Menu.Item>\n        <Menu.Item key=\"2\">\n            <Link to={\"/settings/procedures\"}>\n                Add/Edit Procedures\n            </Link>\n        </Menu.Item>\n        <Menu.Item key=\"3\">\n            <Link to={\"/settings/emr#treatmentnotes\"}>\n                Add/Edit Clinical Notes\n            </Link>\n        </Menu.Item>\n        <Menu.Item key=\"4\">\n            <Link to={\"/settings/printout\"}>\n                Modify EMR/Billing Printout\n            </Link>\n        </Menu.Item>\n        <Menu.Item key=\"5\">\n            <Link to={\"/settings/billing#taxcatalog\"}>\n                Add/Edit taxes\n            </Link>\n        </Menu.Item>\n        <Menu.Item key=\"6\">\n            <Link to={\"/settings/billing#paymentmodes\"}>\n                Add/Edit Payment Modes\n            </Link>\n        </Menu.Item>\n    </Menu>\n);\n\nexport const hashCode = function (str) { // java String#hashCode\n    var hash = 0;\n    for (var i = 0; i < str.length; i++) {\n        hash = str.charCodeAt(i) + ((hash << 6) - hash);\n        hash = (hash >> 6) + hash\n    }\n    return hash;\n}\n\nexport const intToRGB = function (i) {\n    var c = (i & 0x00FFFFFF)\n        .toString(16)\n        .toUpperCase();\n\n    return \"00000\".substring(0, 6 - c.length) + c;\n}\n\nexport const loadConfigParameters = function (that, params = []) {\n    let successFn = function (data) {\n        that.setState({\n            ...data\n        });\n    };\n    let errorFn = function () {\n\n    };\n    let parameters = params.join(',');\n    getAPI(CONFIG_API, successFn, errorFn, {parameters});\n}\n\nexport const loadMailingUserListForReportsMail = function (that) {\n    let successFn = function (data) {\n        that.setState({\n            mailingUsersList: data\n        })\n    }\n    let errorFn = function () {\n\n    }\n    getAPI(MAILING_USERS_LIST, successFn, errorFn)\n}\n\nexport const sendReportMail = function(url,params,successMsg, errorMsg){\nconsole.log(\"msg\",url,successMsg,errorMsg)\n    confirm({\n        title: 'Are you sure send mail?',\n        content: 'Email Id :'+ params.mail_to,\n        okText: 'Yes',\n        okType: 'danger',\n        cancelText: 'No',\n        onOk() {\n            let successFn = function (data){\n                if (successMsg){\n                    displayMessage(SUCCESS,MAIL_SEND_MSG + \"to\" +params.mail_to)\n                }\n\n            }\n            let errorFn = function (){\n                if (errorMsg){\n                    displayMessage(ERROR_MSG_TYPE,MAIL_SEND_ERROR_MSG)\n                }\n\n\n            }\n            getAPI(url,successFn,errorFn,params);\n        },\n        onCancel() {\n        },\n    });\n\n\n}\n","import React from \"react\";\nimport {\n    Button,\n    Checkbox,\n    DatePicker,\n    Divider,\n    Form,\n    Icon,\n    Input,\n    InputNumber,\n    message,\n    Modal,\n    Radio,\n    Select,\n    Tag,\n    TimePicker,\n    Upload,\n} from \"antd\";\nimport {\n    CHECKBOX_FIELD,\n    CITY_FIELD,\n    COLOR_PICKER,\n    COUNTRY_FIELD,\n    DATE_PICKER,\n    DATE_TIME_PICKER,\n    DIVIDER_FIELD,\n    EMAIL_FIELD,\n    INPUT_FIELD, LABEL_FIELD,\n    MAIL_TEMPLATE_FIELD,\n    MULTI_IMAGE_UPLOAD_FIELD,\n    MULTI_SELECT_FIELD,\n    NUMBER_FIELD,\n    PASSWORD_FIELD,\n    QUILL_TEXT_FIELD,\n    RADIO_FIELD,\n    SELECT_FIELD,\n    SINGLE_CHECKBOX_FIELD,\n    SINGLE_IMAGE_UPLOAD_FIELD,\n    SMS_FIELD,\n    STATE_FIELD,\n    SUCCESS_MSG_TYPE,\n    TEXT_FIELD,\n    TIME_PICKER\n} from \"../../constants/dataKeys\";\nimport {REQUIRED_FIELD_MESSAGE} from \"../../constants/messages\";\nimport {displayMessage, getAPI, makeFileURL, makeURL, postAPI, putAPI} from \"../../utils/common\";\nimport moment from \"moment\";\nimport SwatchesPicker from 'react-color/lib/Swatches';\nimport {EXTRA_DATA, FILE_UPLOAD_API, FILE_UPLOAD_BASE64} from \"../../constants/api\";\nimport WebCamField from \"./WebCamField\";\nimport {Editor} from 'react-draft-wysiwyg';\nimport '../../../../node_modules/react-draft-wysiwyg/dist/react-draft-wysiwyg.css';\nimport {ContentState, convertToRaw, EditorState} from 'draft-js';\nimport draftToHtml from 'draftjs-to-html';\nimport htmlToDraft from 'html-to-draftjs';\n\nconst {TextArea} = Input;\nconst FormItem = Form.Item;\nconst RadioGroup = Radio.Group;\nconst CheckboxGroup = Checkbox.Group;\n\n\nclass DynamicFieldsForm extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            fields: this.props.fields, //Fields data to create the form\n            formData: {},\n            formProp: this.props.formProp,    //Form data to send on form submission\n            disabled: false,\n            loading: false,\n            countryOptions: [],\n            stateOptions: [],\n            cityOptions: [],\n            smsFields: {},\n            urlInitialValues: {},\n            webCamState: {},\n            editorState: {}\n        }\n        this.resetFormData = this.resetFormData.bind(this);\n        this.submitForm = this.submitForm.bind(this);\n        this.colorChange = this.colorChange.bind(this);\n        this.loadCountryData = this.loadCountryData.bind(this);\n        this.addSMSTag = this.addSMSTag.bind(this);\n        // this.onFormFieldDataChange = this.onFormFieldDataChange.bind(this)\n    }\n\n    componentWillReceiveProps(nextProps) {\n        // console.log(\"Recieved New Props in Dynamic Form\", nextProps);\n    }\n\n    fieldDecorators = (field, formData) => {\n        let urlInitialValues = this.state.urlInitialValues;\n        // console.log(urlInitialValues);\n        if (field.type == MULTI_SELECT_FIELD) {\n            return {\n                initialValue: formData[field.key] ? formData[field.key] : (urlInitialValues[field.key] ? urlInitialValues[field.key] : formData[field.key]),\n                rules: [{\n                    required: field.required,\n                    message: REQUIRED_FIELD_MESSAGE,\n                    type: 'array'\n                }]\n            }\n        }\n\n        return {\n            initialValue: formData[field.key] ? formData[field.key] : (urlInitialValues[field.key] ? urlInitialValues[field.key] : formData[field.key]),\n            rules: [{\n                required: field.required,\n                message: REQUIRED_FIELD_MESSAGE\n            }]\n        }\n    }\n\n    componentDidMount() {\n        let that = this;\n        this.resetFormData();\n        this.props.fields.forEach(function (field) {\n            if (field.type == COUNTRY_FIELD) {\n                that.loadCountryData();\n            }\n        });\n        if (this.props.history && this.props.history.location.search) {\n            let pairValueArray = this.props.history.location.search.substr(1).split('&');\n            if (pairValueArray.length) {\n                let urlInitialValue = {};\n                pairValueArray.forEach(function (item) {\n                    let keyValue = item.split('=');\n                    if (keyValue && keyValue.length == 2) {\n                        if (!isNaN(keyValue[1]) && keyValue[1].toString().indexOf('.') != -1) {\n                            urlInitialValue[keyValue[0]] = parseFloat(keyValue[1]);\n                        } else if (!isNaN(keyValue[1])) {\n                            urlInitialValue[keyValue[0]] = parseInt(keyValue[1]);\n                        } else {\n                            urlInitialValue[keyValue[0]] = keyValue[1];\n                        }\n                    }\n                });\n                this.setState({\n                    urlInitialValues: urlInitialValue\n                })\n            }\n        }\n    }\n\n    resetFormData() {\n        let formData = {};\n        this.state.fields.forEach(function (field) {\n            formData[field.key] = field.initialValue\n        });\n        this.setState({\n            formData: formData\n        })\n    }\n\n    // onFormFieldDataChange() {\n    //     if (this.props.formProp.onFieldsDataChange) {\n    //         let values = this.props.form.getFieldsValue();\n    //         console.log(values);\n    //         this.props.formProp.onFieldsDataChange(values);\n    //     }\n    // }\n\n    handleSubmit = (e) => {\n        let that = this;\n        e.preventDefault();\n        this.props.form.validateFieldsAndScroll((err, values) => {\n            if (!err) {\n                if (this.props.defaultValues) {\n                    this.props.defaultValues.forEach(function (object) {\n                        // values[object.key] = object.value;\n                        values = {[object.key]: object.value, ...values}\n                    })\n                }\n                if (this.state.colorPickerKey) {\n                    values[this.state.colorPickerKey] = this.state.colorPickerColor;\n                }\n                that.props.fields.forEach(function (formFields) {\n                    if (formFields.type == SINGLE_IMAGE_UPLOAD_FIELD) {\n                        let key = formFields.key;\n                        if (values[key] && values[key].file && values[key].file.response)\n                            values[key] = values[key].file.response.image_path;\n                        else\n                            values[key] = formFields.initialValue;\n                    } else if (formFields.type == MULTI_IMAGE_UPLOAD_FIELD) {\n                        let key = formFields.key;\n                        if (values[key] && values[key].file && values[key].file.response)\n                            values[key] = values[key].fileList.map(file => file.response.id);\n                        else\n                            values[key] = formFields.initialValue;\n                    } else if (formFields.type == TIME_PICKER || formFields.type == DATE_PICKER || formFields.type == DATE_TIME_PICKER) {\n                        let key = formFields.key;\n                        if (formFields.format) {\n                            values[key] = moment(values[key]).isValid() ? moment(values[key]).format(formFields.format) : null;\n                        }\n                    } else if (formFields.type == QUILL_TEXT_FIELD) {\n                        let key = formFields.key;\n                        values[key] = that.state.editorState[key] ? draftToHtml(convertToRaw(that.state.editorState[key].getCurrentContent())) : formFields.initialValue;\n                    }\n                });\n                if (that.state.formProp.beforeSend) {\n                    values = that.state.formProp.beforeSend(values);\n                }\n                if (that.state.formProp.confirm) {\n                    Modal.confirm({\n                        title: that.state.formProp.confirmText || \"Are you sure to submit?\",\n                        onOk: function () {\n                            that.submitForm(values);\n                        },\n                        onCancel: function () {\n\n                        }\n                    })\n                } else {\n                    that.submitForm(values);\n                }\n\n            }\n        });\n    }\n\n    submitForm(data) {\n        let that = this;\n        this.setState({\n            disabled: true,\n            loading: true,\n        });\n        let successFn = function (data) {\n            that.state.formProp.successFn(data);\n            that.setState({\n                disabled: false,\n                loading: false,\n            });\n            if (that.props.changeRedirect) {\n                that.props.changeRedirect();\n            }\n        };\n        let errorFn = function () {\n            that.state.formProp.errorFn();\n            that.setState({\n                disabled: false,\n                loading: false,\n            });\n        };\n        if (this.props.formProp.method == \"post\") {\n            postAPI(this.props.formProp.action, data, successFn, errorFn);\n        } else if (this.props.formProp.method == \"put\") {\n            putAPI(this.props.formProp.action, data, successFn, errorFn);\n        }\n    }\n\n    colorChange(color, key) {\n        let that = this;\n        this.setState({\n            colorPickerKey: key,\n            colorPickerColor: color.hex,\n        }, function () {\n            that.props.form.setFieldsValue({[key]: color.hex})\n        });\n    }\n\n    setAddressField(type, value) {\n        if (type == 'country') {\n            this.setState(function (prevState) {\n                let states = []\n                prevState.countryOptions.forEach(function (country) {\n                    if (country.id == value) {\n                        states = country.states\n                    }\n                })\n                return {stateOptions: states}\n            })\n        } else {\n            this.setState(function (prevState) {\n                let cities = [];\n                prevState.stateOptions.forEach(function (state) {\n                    if (state.id == value) {\n                        cities = state.cities\n                    }\n                })\n                return {cityOptions: cities}\n            })\n        }\n    }\n\n    loadCountryData() {\n        var that = this;\n        let successFn = function (data) {\n            that.setState({\n                countryOptions: data.country,\n            })\n        };\n        let errorFn = function () {\n        };\n        getAPI(EXTRA_DATA, successFn, errorFn);\n    }\n\n    addSMSTag(key, value) {\n        let that = this;\n        let prevValue = that.props.form.getFieldValue(key) || '';\n        that.props.form.setFieldsValue({\n            [key]: prevValue + value\n        });\n    }\n\n    addMailTemplateTag = (key, value) => {\n        let that = this;\n        this.setState(function (prevState) {\n            let currentHtml = prevState.editorState[key] ? draftToHtml(convertToRaw(prevState.editorState[key].getCurrentContent())) : '';\n            currentHtml += value;\n            return {\n                editorState: {\n                    ...prevState.editorState,\n                    [key]: EditorState.createWithContent(ContentState.createFromBlockArray(htmlToDraft(currentHtml)))\n                }\n            }\n        })\n    }\n    toggleWebCam = (type, value) => {\n        this.setState(function (prevState) {\n            return {\n                webCamState: {...prevState.webCamState, [type]: value}\n            }\n        })\n    }\n    getImageandUpload = (fieldKey, image) => {\n        let that = this;\n        let reqData = new FormData();\n\n        reqData.append('image', image);\n        reqData.append('name', 'file');\n\n        let successFn = function (data) {\n            that.props.form.setFieldsValue({[fieldKey]: {file: {response: data}}});\n            displayMessage(SUCCESS_MSG_TYPE, \"Image Captured and processed.\");\n            that.setState(function (prevState) {\n                return {\n                    webCamState: {...prevState.webCamState, [fieldKey]: false}\n                }\n            })\n        }\n        let errorFn = function () {\n\n        }\n        postAPI(FILE_UPLOAD_BASE64, reqData, successFn, errorFn, {\n            'content-type': 'multipart/form-data'\n        });\n\n    }\n    onEditorStateChange = (key, editorState) => {\n        this.setState(function (prevState) {\n            return {\n                editorState: {...prevState.editorState, [key]: editorState}\n\n            }\n        });\n    };\n\n    render() {\n        const that = this;\n        const formItemLayout = (this.props.formLayout ? this.props.formLayout : {\n            labelCol: {span: 8},\n            wrapperCol: {span: 14},\n        });\n        const {getFieldDecorator} = this.props.form;\n        return <div>\n            <Form onSubmit={this.handleSubmit}>\n                {this.props.title ? <h2>{this.props.title}</h2> : null}\n                {this.state.fields ? this.state.fields.map(function (field) {\n                    switch (field.type) {\n                        case PASSWORD_FIELD:\n                            return <Form.Item key={field.key} label={field.label}  {...formItemLayout}\n                                              extra={field.extra}>\n                                {getFieldDecorator(field.key, that.fieldDecorators(field, that.state.formData))(\n                                    <Input prefix={<Icon type=\"lock\" style={{color: 'rgba(0,0,0,.25)'}}/>}\n                                           type=\"password\"\n                                           placeholder={field.placeholder}\n                                           onChange={(e) => function () {\n                                               if (field.onChange)\n                                                   field.onChange(e)\n                                           }}\n                                           disabled={field.disabled ? field.disabled : that.state.disabled}/>\n                                )}\n                            </Form.Item>;\n                        case INPUT_FIELD:\n                            return <FormItem key={field.key} label={field.label}  {...formItemLayout}\n                                             extra={field.extra}>\n                                {getFieldDecorator(field.key, that.fieldDecorators(field, that.state.formData))(\n                                    <Input placeholder={field.placeholder}\n                                           onChange={(e) => function () {\n                                               if (field.onChange)\n                                                   field.onChange(e)\n                                           }}\n                                           disabled={field.disabled ? field.disabled : that.state.disabled}/>\n                                )}\n                                {field.follow ? <span className=\"ant-form-text\">{field.follow}</span> : null}\n                            </FormItem>;\n                        case SELECT_FIELD:\n                            return <FormItem key={field.key} {...formItemLayout} label={field.label}\n                                             extra={field.extra}>\n                                {getFieldDecorator(field.key, that.fieldDecorators(field, that.state.formData))(\n                                    <Select placeholder={field.placeholder}\n                                            disabled={field.disabled ? field.disabled : that.state.disabled}\n                                            mode={field.mode ? field.mode : \"default\"}>\n                                        {field.options.map((option) => <Select.Option\n                                            value={option.value}>{option.label}</Select.Option>)}\n                                    </Select>\n                                )}\n                                {field.follow ? <span className=\"ant-form-text\">{field.follow}</span> : null}\n                            </FormItem>;\n                        case MULTI_SELECT_FIELD:\n                            return <FormItem key={field.key} {...formItemLayout} label={field.label}\n                                             extra={field.extra}>\n                                {getFieldDecorator(field.key, {...that.fieldDecorators(field, that.state.formData)})(\n                                    <Select mode=\"multiple\" placeholder={field.placeholder}\n                                            showSearch={field.showSearch ? field.showSearch : null}\n                                            disabled={field.disabled ? field.disabled : that.state.disabled}>\n                                        {field.options.map((option) => <Select.Option\n                                            value={option.value}>{option.label}</Select.Option>)}\n                                    </Select>\n                                )}\n                                {field.follow ? <span className=\"ant-form-text\">{field.follow}</span> : null}\n                            </FormItem>;\n                        case RADIO_FIELD:\n                            return <FormItem key={field.key} label={field.label} {...formItemLayout}\n                                             extra={field.extra}>\n                                {getFieldDecorator(field.key, that.fieldDecorators(field, that.state.formData))(\n                                    <RadioGroup disabled={field.disabled ? field.disabled : that.state.disabled}>\n                                        {field.options.map((option) => <Radio\n                                            value={option.value}>{option.label}</Radio>)}\n                                    </RadioGroup>\n                                )}\n                            </FormItem>;\n                        case CHECKBOX_FIELD:\n                            return <FormItem key={field.key} label={field.label} {...formItemLayout}\n                                             extra={field.extra}>\n                                {getFieldDecorator(field.key, that.fieldDecorators(field, that.state.formData))(\n                                    <CheckboxGroup options={field.options}\n                                                   disabled={field.disabled ? field.disabled : that.state.disabled}/>\n                                )}\n                            </FormItem>;\n                        case SINGLE_CHECKBOX_FIELD:\n                            return <FormItem key={field.key} label={field.label} {...formItemLayout}\n                                             extra={field.extra}>\n                                {getFieldDecorator(field.key, {\n                                        valuePropName: 'checked',\n                                        initialValue: field.initialValue\n                                    },\n                                    {\n                                        rules: [{required: field.required, message: REQUIRED_FIELD_MESSAGE}],\n                                    })(\n                                    <Checkbox\n                                        disabled={field.disabled ? field.disabled : that.state.disabled}>{field.follow}</Checkbox>\n                                )}\n                            </FormItem>;\n                        case NUMBER_FIELD:\n                            return <FormItem key={field.key}\n                                             {...formItemLayout}\n                                             label={field.label} extra={field.extra}>\n                                {getFieldDecorator(field.key, that.fieldDecorators(field, that.state.formData))(\n                                    <InputNumber min={field.min} max={field.max}\n                                                 disabled={field.disabled ? field.disabled : that.state.disabled}/>\n                                )}\n                                <span className=\"ant-form-text\">{field.follow}</span>\n                            </FormItem>;\n                        case DATE_PICKER:\n                            return <FormItem key={field.key} label={field.label} {...formItemLayout}\n                                             extra={field.extra}>\n                                {getFieldDecorator(field.key,\n                                    {\n                                        initialValue: field.initialValue ? moment(field.initialValue) : null,\n                                        rules: [{required: field.required, message: REQUIRED_FIELD_MESSAGE}],\n                                    })(\n                                    <DatePicker format={field.format}/>\n                                )}\n                            </FormItem>;\n                        case DATE_TIME_PICKER:\n                            return <FormItem key={field.key} label={field.label} {...formItemLayout}\n                                             extra={field.extra}>\n                                {getFieldDecorator(field.key,\n                                    {initialValue: field.initialValue ? moment(field.initialValue) : null},\n                                    {\n                                        rules: [{required: field.required, message: REQUIRED_FIELD_MESSAGE}],\n                                    })(\n                                    <DatePicker format={field.format} showTime onChange={(e) => (field.onChange ?\n                                        field.onChange(e) :\n                                        function () {\n                                        })}/>\n                                )}\n                            </FormItem>;\n                        case TEXT_FIELD:\n                            return <div key={field.key}>\n                                <FormItem key={field.key} label={field.label}  {...formItemLayout} extra={field.extra}>\n                                    {getFieldDecorator(field.key, that.fieldDecorators(field, that.state.formData))(\n                                        <TextArea autosize={{minRows: field.minRows, maxRows: field.maxRows}}\n                                                  placeholder={field.placeholder}\n                                                  disabled={field.disabled ? field.disabled : that.state.disabled}\n                                                  onChange={that.inputChange}/>\n                                    )}\n\n                                </FormItem>\n                            </div>;\n                        case SMS_FIELD:\n                            return <div>\n                                <FormItem key={field.key} label={field.label}  {...formItemLayout} extra={field.extra}>\n                                    {getFieldDecorator(field.key, that.fieldDecorators(field, that.state.formData))(\n                                        <TextArea autosize={{minRows: field.minRows, maxRows: field.maxRows}}\n                                                  placeholder={field.placeholder}\n                                                  disabled={field.disabled ? field.disabled : that.state.disabled}\n                                        />\n                                    )}\n                                    {field.options && field.options.map(item =>\n                                        <Tag color=\"#108ee9\"\n                                             onClick={() => that.addSMSTag(field.key, item.value)}>{item.label}</Tag>)}\n                                </FormItem>\n                            </div>;\n                        case MAIL_TEMPLATE_FIELD:\n                            return <div>\n                                <FormItem key={field.key} label={field.label}  {...formItemLayout} extra={field.extra}>\n                                    {getFieldDecorator(field.key, {\n                                        initialValue: (field.initialValue && field.initialValue.length ? field.initialValue : ''),\n                                        rules: [{\n                                            required: field.required,\n                                            message: REQUIRED_FIELD_MESSAGE\n                                        }]\n                                    })(\n                                        <div style={{border: '1px solid #eee'}}>\n                                            <Editor\n                                                editorState={(that.state.editorState[field.key] ? that.state.editorState[field.key] : (field.initialValue ? EditorState.createWithContent(ContentState.createFromBlockArray(htmlToDraft(field.initialValue))) : EditorState.createEmpty()))}\n                                                onEditorStateChange={(editorState) => that.onEditorStateChange(field.key, editorState)}/>\n                                            {/*// <ReactQuill theme=\"snow\" placeholder={field.placeholder}/>*/}\n                                        </div>\n                                    )}\n                                    {field.options && field.options.map(item =>\n                                        <Tag color=\"#108ee9\"\n                                             onClick={() => that.addMailTemplateTag(field.key, item.value)}>{item.label}</Tag>)}\n                                    {field.preview ? <div>\n                                        <Divider>Preview</Divider>\n                                        <div style={{maxHeight: 200, overflowY: 'scroll'}}\n                                             dangerouslySetInnerHTML={{__html: `${that.state.editorState[field.key] ? draftToHtml(convertToRaw(that.state.editorState[field.key].getCurrentContent())) : field.initialValue}` || ''}}/>\n                                        <Divider/>\n                                    </div> : null}\n                                    {/*<div dangerouslySetInnerHTML={{__html: field.initialValue}}/>*/}\n                                </FormItem>\n                            </div>;\n                        case QUILL_TEXT_FIELD:\n                            return <div>\n                                <FormItem key={field.key} label={field.label}  {...formItemLayout} extra={field.extra}>\n                                    {getFieldDecorator(field.key, {\n                                        initialValue: (field.initialValue && field.initialValue.length ? field.initialValue : ''),\n                                        rules: []\n                                    })(\n                                        <div style={{border: '1px solid #eee'}}>\n                                            <Editor\n                                                editorState={(that.state.editorState[field.key] ? that.state.editorState[field.key] : (field.initialValue ? EditorState.createWithContent(ContentState.createFromBlockArray(htmlToDraft(field.initialValue))) : EditorState.createEmpty()))}\n                                                onEditorStateChange={(editorState) => that.onEditorStateChange(field.key, editorState)}/>\n                                            {/*// <ReactQuill theme=\"snow\" placeholder={field.placeholder}/>*/}\n                                        </div>\n                                    )}\n                                    {field.preview ? <div>\n                                        <Divider>Preview</Divider>\n                                        <div style={{maxHeight: 200, overflowY: 'scroll'}}\n                                             dangerouslySetInnerHTML={{__html: `${that.state.editorState[field.key] ? draftToHtml(convertToRaw(that.state.editorState[field.key].getCurrentContent())) : field.initialValue}` || ''}}/>\n                                        <Divider/>\n                                    </div> : null}\n                                    {/*<div dangerouslySetInnerHTML={{__html: field.initialValue}}/>*/}\n                                </FormItem>\n                            </div>;\n                        case TIME_PICKER:\n                            return <FormItem key={field.key} label={field.label} {...formItemLayout}\n                                             extra={field.extra}>\n                                {getFieldDecorator(field.key, {\n                                    initialValue: field.initialValue ? moment(field.initialValue, field.format) : null,\n                                    rules: [{required: field.required, message: REQUIRED_FIELD_MESSAGE}],\n                                })(\n                                    <TimePicker format={field.format}/>\n                                )}\n                            </FormItem>;\n                        case COLOR_PICKER:\n                            return <FormItem key={field.key} label={field.label}  {...formItemLayout}\n                                             extra={field.extra}>\n                                {getFieldDecorator(field.key, that.fieldDecorators(field, that.state.formData))(\n                                    <div>\n                                        <SwatchesPicker style={{width: '100%'}}\n                                                        onChange={(color) => that.colorChange(color, field.key)}/>\n                                        {that.state.colorPickerKey ? <div style={{\n                                            margin: '10px',\n                                            backgroundColor: that.state.colorPickerColor,\n                                            height: '40px',\n                                            width: '40px'\n                                        }}/> : (that.state.formData[field.key] ? <div style={{\n                                            margin: '10px',\n                                            backgroundColor: that.state.formData[field.key],\n                                            height: '40px',\n                                            width: '40px'\n                                        }}/> : null)}\n                                    </div>\n                                )}\n                            </FormItem>;\n                        case SINGLE_IMAGE_UPLOAD_FIELD:\n                            const singleUploadprops = {\n                                name: 'image',\n                                data: {\n                                    name: 'hello'\n                                },\n                                action: makeURL(FILE_UPLOAD_API),\n                                headers: {\n                                    authorization: 'authorization-text',\n                                },\n                                onChange(info) {\n                                    if (info.file.status !== 'uploading') {\n                                        console.log(info.file, info.fileList);\n                                    }\n                                    if (info.file.status === 'done') {\n                                        message.success(`${info.file.name} file uploaded successfully`);\n                                    } else if (info.file.status === 'error') {\n                                        message.error(`${info.file.name} file upload failed.`);\n                                    }\n                                },\n                            };\n                            return <Form.Item key={field.key} {...formItemLayout} label={field.label}>\n                                {getFieldDecorator(field.key, that.fieldDecorators(field, that.state.formData), {valuePropName: field.key,})(\n                                    <Upload {...singleUploadprops}>\n                                        <Button>\n                                            <Icon type=\"upload\"/> Select File\n                                        </Button>\n                                        {field.initialValue ?\n                                            <img src={makeFileURL(field.initialValue)}\n                                                 style={{maxWidth: '100%'}}/> : null}\n                                    </Upload>\n                                )}\n                                {field.allowWebcam ? <span className=\"ant-form-text\">\n                                    <a onClick={() => that.toggleWebCam(field.key, Math.random())}>\n                                        Open Webcam\n                                    </a>\n                                </span> : null}\n                                <Modal\n                                    footer={null}\n                                    onCancel={() => that.toggleWebCam(field.key, false)}\n                                    visible={!!that.state.webCamState[field.key]}\n                                    width={680}\n                                    key={that.state.webCamState[field.key]}>\n                                    <WebCamField getScreenShot={(value) => that.getImageandUpload(field.key, value)}/>\n                                </Modal>\n                            </Form.Item>;\n                        case MULTI_IMAGE_UPLOAD_FIELD:\n                            const multiuploadprops = {\n                                name: 'image',\n                                data: {\n                                    name: 'hello'\n                                },\n                                action: makeURL(FILE_UPLOAD_API),\n                                headers: {\n                                    authorization: 'authorization-text',\n                                },\n                                onChange(info) {\n                                    if (info.file.status !== 'uploading') {\n                                        console.log(info.file, info.fileList);\n                                    }\n                                    if (info.file.status === 'done') {\n                                        message.success(`${info.file.name} file uploaded successfully`);\n                                    } else if (info.file.status === 'error') {\n                                        message.error(`${info.file.name} file upload failed.`);\n                                    }\n                                },\n                            };\n                            return <Form.Item key={field.key} {...formItemLayout} label={field.label}>\n                                {getFieldDecorator(field.key, {valuePropName: field.key,})(\n                                    <Upload {...multiuploadprops}>\n                                        <Button>\n                                            <Icon type=\"upload\"/> Select File\n                                        </Button>\n                                        {field.initialValue && field.initialValue.length ?\n                                            field.initialValue.map(img => <img src={img}\n                                                                               style={{maxWidth: '100%'}}/>) : null}\n                                    </Upload>\n                                )}\n                            </Form.Item>;\n                        case COUNTRY_FIELD:\n                            return <FormItem key={field.key} {...formItemLayout} label={field.label}\n                                             extra={field.extra}>\n                                {getFieldDecorator(field.key, that.fieldDecorators(field, that.state.formData))(\n                                    <Select placeholder={field.placeholder}\n                                            disabled={field.disabled ? field.disabled : that.state.disabled}\n                                            mode={field.mode ? field.mode : \"default\"}\n                                            onChange={(value) => that.setAddressField('country', value)}>\n                                        {that.state.countryOptions.map((option) => <Select.Option\n                                            value={option.id}>{option.name}</Select.Option>)}\n                                    </Select>\n                                )}\n                            </FormItem>;\n                        case STATE_FIELD:\n                            return <FormItem key={field.key} {...formItemLayout} label={field.label}\n                                             extra={field.extra}>\n                                {getFieldDecorator(field.key, that.fieldDecorators(field, that.state.formData))(\n                                    <Select placeholder={field.placeholder}\n                                            disabled={field.disabled ? field.disabled : that.state.disabled}\n                                            mode={field.mode ? field.mode : \"default\"}\n                                            onChange={(value) => that.setAddressField('state', value)}>\n                                        {that.state.stateOptions.map((option) => <Select.Option\n                                            value={option.id}>{option.name}</Select.Option>)}\n                                    </Select>\n                                )}\n                            </FormItem>;\n\n                        case EMAIL_FIELD:\n                            return <Form.Item\n                                key={field.key}\n                                {...formItemLayout}\n                                label={field.label}\n                                extra={field.extra}\n                            >\n                                {getFieldDecorator(field.key, {\n                                    initialValue: that.state.formData[field.key],\n                                    rules: [{\n                                        type: 'email', message: 'The input is not valid E-mail!',\n                                    }, {\n                                        required: true, message: 'Please input your E-mail!',\n                                    }],\n                                })(\n                                    <Input placeholder={field.placeholder}\n                                           disabled={field.disabled ? field.disabled : that.state.disabled}\n                                           onChange={that.inputChange}/>\n                                )}\n                            </Form.Item>\n\n                        case CITY_FIELD:\n                            return <FormItem key={field.key} {...formItemLayout} label={field.label}\n                                             extra={field.extra}>\n                                {getFieldDecorator(field.key, that.fieldDecorators(field, that.state.formData))(\n                                    <Select placeholder={field.placeholder}\n                                            disabled={field.disabled ? field.disabled : that.state.disabled}\n                                            mode={field.mode ? field.mode : \"default\"}>\n                                        {that.state.cityOptions.map((option) => <Select.Option\n                                            value={option.id}>{option.name}</Select.Option>)}\n                                    </Select>\n                                )}\n                            </FormItem>;\n                        case DIVIDER_FIELD :\n                            return <Divider style={{margin: 4}}/>\n\n\n                        case LABEL_FIELD :\n                            return <FormItem key={field.key} {...formItemLayout} label={field.label}\n                                             extra={field.extra}>\n\n                                {field.follow ? <span className=\"ant-form-text\">{field.follow}</span> : null}\n\n                            </FormItem>;\n                        default:\n                            return null;\n                    }\n                }) : null}\n                <FormItem {...formItemLayout}>\n                    {/*<Button onClick={this.resetFormData}>Reset</Button>*/}\n                    <Button loading={that.state.loading} type=\"primary\" htmlType=\"submit\" style={{margin: 5}}>\n                        Submit\n                    </Button>\n                    {that.props.history ?\n                        <Button style={{margin: 5}} onClick={() => that.props.history.goBack()}>\n                            Cancel\n                        </Button> : null}\n                </FormItem>\n            </Form>\n        </div>\n    }\n}\n\nexport default DynamicFieldsForm;","import {\n    APPOINTMENT_FOR_EACH_CATEGORY,\n    CANCELLATION_NUMBERS,\n    AVERAGE_WAITING_ENGAGED_TIME_DAY_WISE,\n    AVERAGE_WAITING_ENGAGED_TIME_MONTH_WISE,\n    REASONS_FOR_CANCELLATIONS,\n    DAILY_APPOINTMENT_COUNT,\n    APPOINTMENT_FOR_EACH_DOCTOR,\n    MONTHLY_APPOINTMENT_COUNT,\n    APPOINTMENT_FOR_EACH_PATIENT_GROUP,\n    NEW_PATIENTS,\n    DAILY_NEW_PATIENTS,\n    PATIENTS_FIRST_APPOINTMENT,\n    MONTHLY_NEW_PATIENTS,\n    NEW_MEMBERSHIP,\n    EXPIRING_MEMBERSHIP,\n    AGEING_AMOUNT_DUE,\n    AMOUNT_DUE_PER_DOCTOR,\n    AMOUNT_DUE_PER_PROCEDURE,\n    UNSETTLED_INVOICE,\n    DAILY_TREATMENT_COUNT,\n    TREATMENTS_FOR_EACH_DOCTOR,\n    MONTHLY_TREATMENT_COUNT,\n    TREATMENT_FOR_EACH_CATEGORY,\n    DAILY_EXPENSES,\n    MONTHLY_EXPENSES,\n    EXPENSES_EACH_TYPE,\n    DAILY_INVENTORY,\n    MONTHLY_INVENTORY,\n    TOP_INVENTORY,\n    DAILY_BOOKING_COUNT,\n    MONTHLY_BOOKING_COUNT,\n    MEDICINE_USAGE_COUNT,\n    BED_BOOKING_PACKAGE_COUNT,\n    MARGIN_TYPE_WISE,\n    PRODUCT_WISE,\n    TRANSFERED_AMOUNT,\n    WALLET_BALANCE_AMOUNT,\n    CREDIT_AMOUNT_PER_DOCTOR,\n    PAYMENT_REFUND,\n    PATIENTS_UNSETTLED_ADVANCE,\n    PAYMENT_RECEIVED_PATIENT_GROUP,\n    MODE_OF_PAYMENTS,\n    PAYMENT_RECEIVED_PER_DAY,\n    PAYMENT_RECEIVED_PER_DOCTOR,\n    PAYMENT_RECEIVED_PER_MONTH,\n    PAYMENT_SETTLEMENT,\n    PAYMENT_SETTLEMENT_PER_DOCTOR,\n    CREDIT_NOTES,\n    ACTIVE_PATIENTS,\n    AGENT_TREE_VIEW,\n    FOLLOW_UP,\n    MEDICINE,\n    ALL_INVOICE,\n    DAILY_INCOME,\n    MONTHLY_INCOME,\n    TAXED_INCOME,\n    PATIENT_GROUPS_INCOME,\n    PRODUCT_INCOME,\n    PROCEDURE_INCOME,\n    DOCTOR_EACH_INCOME,\n    APPOINTMENT_FOR_PATIENT_CONVERSION,\n    ALL_INVOICE_RETURN,\n    DAILY_WISE_INVOICE,\n    MONTHLY_WISE_INCOME,\n    RETURN_ITEMS,\n    RETURN_INVOICE_FOR_EACH_PROCEDURE,\n    RETURN_INVOICE_FOR_EACH_DOCTOR,\n    RETURN_INVOICE_FOR_EACH_PRODUCT,\n    RETURN_INVOICE_FOR_EACH_PATIENT_GROUPS,\n    RETURN_INVOICE_FOR_EACH_TAX, MONTHLY_WISE_RETURN_INVOICE, DAILY_WISE_RETURN_INVOICE\n} from \"../constants/dataKeys\";\n\nexport const PAYMENT_TYPES = [\n    {label: 'cash', value: 'cash'},\n    {label: 'cheque', value: 'cheque'},\n    {label: 'card', value: 'card'},\n    {label: 'netbanking', value: 'netbanking'},\n    {label: 'unknown', value: 'unknown'},\n]\nexport const DISEASE_TYPES = [\n    {label: 'Kidney Disease', value: 'Kidney Disease'},\n    {label: 'Cancer Disease', value: 'Cancer Disease'},\n    {label: 'Other Disease', value: 'Other Disease'}\n];\nexport const DRUG = \"Medicine\";\nexport const EQUIPMENT = \"Equipment\";\nexport const SUPPLIES = \"Supplies\";\nexport const PROCEDURES = \"Procedure\";\nexport const PRESCRIPTIONS = \"Prescriptions\";\nexport const INVENTORY = \"Inventory\";\n\n\nexport const INVOICE_ITEM_TYPE = [\n    {label: PROCEDURES, value: PROCEDURES},\n    {label: PRESCRIPTIONS, value: PRESCRIPTIONS},\n    {label: INVENTORY, value: INVENTORY}\n];\nexport const INVENTORY_ITEM_TYPE = [\n    {label: DRUG, value: DRUG},\n    {label: EQUIPMENT, value: EQUIPMENT},\n    {label: SUPPLIES, value: SUPPLIES}\n];\n\n\nexport const ADD_STOCK = \"ADD\";\nexport const CONSUME_STOCK = \"CONSUME\";\n\nexport const APPOINTMENT_CONFIRMATION_SMS_TAG_OPTIONS = [\n    {\n        label: \"PATIENT ID\",\n        value: \"{{PATIENT_ID}}\"\n    }, {\n        label: \"CLINIC CONTACT\",\n        value: \"{{CLINICCONTACTNUMBER}}\"\n    }, {\n        label: \"CLINIC NAME\",\n        value: \"{{CLINIC}}\"\n    }, {\n        label: \"PATIENT NAME\",\n        value: \"{{PATIENT}}\"\n    }, {\n        label: \"APPOINTMENT CATEGORY\",\n        value: \"{{CATEGORY}}\"\n    }, {\n        label: \"DATE\",\n        value: \"{{DATE}}\"\n    }, {\n        label: \"TIME\",\n        value: \"{{TIME}}\"\n    }];\n\nexport const EMR_TYPE = \"EMR\";\nexport const BILLING_TYPE = \"BILLING\";\n\nexport const EMR_SUB_TYPE = [\n    {title: 'PRESCRIPTION'},\n    {title: 'TREATMENT PLAN'},\n    {title: 'CASE SHEET'},\n    {title: 'MEDICAL LEAVE'},\n    {title: 'REPORT MANUAL'},\n    {title: 'LAB ORDER'},\n    // {title: 'LAB ORDER RESULT'},\n    {title: 'CLINICAL NOTES'}\n];\nexport const BILLING_SUB_TYPE = [\n    {title: 'INVOICE'},\n    {title: 'RECEIPTS'},\n    {title: 'RETURN'}\n];\n\nexport const CUSTOMIZE_PAPER_TYPE = [\n    'PAGE', 'HEADER', 'PATIENT', 'FOOTER'\n];\n\nexport const PAPER_SIZE = ['A2', 'A3', 'A4', 'A5'];\n\nexport const PAGE_ORIENTATION = [\n    {value: 'PORTRAIT'},\n    {value: 'LANDSCAPE'}\n];\n\nexport const PRINTER_TYPE = [\n    {value: 'COLOR'},\n    {value: 'BLACK'}\n];\nexport const HEADER_INCLUDE = [\n    {title: 'Yes', value: true},\n    {title: 'No , I already have a letter head.', value: false}\n];\nexport const LOGO_TYPE = [\n    {value: 'Square'},\n    {value: 'Narrow'},\n    {value: 'Wide'}\n];\nexport const LOGO_ALIGMENT = [\n    {value: 'RIGHT'},\n    {value: 'LEFT'},\n    {value: 'CENTRE'}\n];\nexport const LOGO_INCLUDE = [\n    {title: 'Yes', value: true},\n    {title: 'No', value: false}\n];\nexport const PATIENT_DETAILS_LIST = [\n    {value: 'Exclude Medical History'},\n    {value: 'Exclude Patient Number'},\n    {value: 'Exclude address'},\n    {value: 'Exclude Blood Group'}\n];\nexport const EXCLUDE_PATIENT_DOB = \"Exclude Patient Gender & DOB\";\n\nexport const SMS_ENABLE = [\n    {title: 'Yes', value: true},\n    {title: 'No', value: false}\n]\n\nexport const EMAIL_ENABLE = [\n    {title: 'Yes', value: true},\n    {title: 'No', value: false}\n]\n\nexport const BIRTHDAY_SMS_ENABLE = [\n    {title: 'Yes', value: true},\n    {title: 'No', value: false}\n]\n\nexport const DURATIONS_UNIT = [\n    {label: 'day(s)', value: 'day(s)'},\n    {label: 'week(s)', value: 'week(s)'},\n    {label: 'month(s)', value: 'month(s)'},\n    {label: 'year(s)', value: 'year(s)'},\n];\n\nexport const DOSE_FREQUENCIES = [\n    {label: 'day(s)', value: 'day(s)'},\n];\n\nexport const DOSE_REQUIRED = [\n    {label: 'twice daily', value: 'twice daily'},\n    {label: 'three times a day', value: 'three times a day'},\n    {label: 'four times a day', value: 'four times a day'},\n    {label: 'every four hours', value: 'every four hours'},\n    {label: 'as needed', value: 'as needed'},\n    {label: 'every 2 hour(s)', value: 'every 2 hour(s)'},\n    {label: 'every other hour', value: 'every other hour'},\n    {label: 'every day', value: 'every day'},\n    {label: 'every other day', value: 'every other day'},\n];\n\nexport const SCHEDULE_STATUS = 'Scheduled';\nexport const WAITING_STATUS = 'Waiting';\nexport const ENGAGED_STATUS = 'Engaged';\nexport const CHECKOUT_STATUS = 'CheckOut';\nexport const CANCELLED_STATUS = 'Cancelled';\n\nexport const TYPE_OF_CONSUMPTION = [\n    {label: \"Sales\", value: \"SALES\"},\n    {label: \"Services\", value: \"SERVICES\"},\n    {label: \"Damaged\", value: \"DAMAGED\"},\n    {label: \"Returned\", value: \"RETURNED\"},\n    {label: \"Adjustment\", value: \"ADJUSTMENT\"},\n];\n\nexport const TYPES_OF_BED_PACKAGES_ROOM_TYPE = [\n    {label: \"Private\", value: \"PRIVATE\"},\n    {label: \"Dormitory\", value: \"DORMITORY\"},\n    {label: \"Semi Private\", value: \"SEMI PRIVATE\"},\n]\n\nexport const CUSTOM_STRING_SEPERATOR = '$_$';\n\nexport const DAY_KEYS = ['monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday', 'sunday'];\n\nexport const NOTES = [\n    {label: \"Valid for absence from court attendance\", value: \"valid_court\"},\n    {label: \"Invalid for absence from court attendance\", value: \"invalid_court\"},\n    {label: \"Dont mention\", value: \"no_mention\"}\n];\n\nexport const DEFAULT_TEMPERATURE_IN = [\n    {label: \"Degree Fahrenheit\", value: \"Degree Fahrenheit\"},\n    {label: \"Degree Celsius\", value: \"Degree Celsius\"}\n];\nexport const DEFAULT_TEMPERATURE_METHOD = [\n    {label: \"Armpit\", value: \"Armpit\"},\n    {label: \"Forehead\", value: \"Forehead\"},\n    {label: \"Anus\", value: \"Anus\"},\n    {label: \"Mouth\", value: \"Mouth\"},\n    {label: \"Ear\", value: \"Ear\"}\n];\nexport const DEFAULT_BP_METHOD = [\n    {label: \"Sitting\", value: \"Sitting\"},\n    {label: \"Standing\", value: \"Standing\"}\n];\n\nexport const APPOINTMENT_STATUS = [\n    {label: \"Scheduled\", value: SCHEDULE_STATUS},\n    {label: \"Cancelled\", value: CANCELLED_STATUS},\n    {label: \"Engaged\", value: ENGAGED_STATUS}\n];\nexport const MAILED = 'true';\n\nexport const Booking_Type = [\n    {value: 'TATKAL'},\n    {value: 'NORMAL'}\n];\nexport const PAYMENT_STATUS = [\n    {label: \"Success\", value: \"SUCCESSFUL\"},\n    {label: \"Failed\", value: \"FAILED\"},\n    {label: \"Pending\", value: \"PENDING\"}\n];\nexport const OPD_IPD = [\n    {label: \"OPD\", value: \"OPD\"},\n    {label: \"IPD\", value: \"IPD\"}\n];\n\nexport const ROLES = [\n    {label: \"ADMIN\", value: '1'},\n    {label: \"CLINIC_ADMIN\", value: '2'}\n];\n/*Patient Reports*/\nexport const PATIENTS_RELATED_REPORT = [\n    {name: 'Daily New Patients', value: DAILY_NEW_PATIENTS},\n    {name: 'Expiring Membership', value: EXPIRING_MEMBERSHIP},\n    {name: 'Patients First Appointment', value: PATIENTS_FIRST_APPOINTMENT},\n    {name: 'Monthly New Patients', value: MONTHLY_NEW_PATIENTS},\n    {name: 'New Membership', value: NEW_MEMBERSHIP},\n    {name: 'Active Patients', value: ACTIVE_PATIENTS},\n    {name: \"Follow Up Report\", value: FOLLOW_UP},\n    {name: \"Medicine Report\", value: MEDICINE},\n];\n\n/*Appointment Reports*/\nexport const APPOINTMENT_RELATED_REPORT = [\n    {name: 'Appointments For Each Category', value: APPOINTMENT_FOR_EACH_CATEGORY},\n    {name: 'Cancellation Numbers', value: CANCELLATION_NUMBERS},\n    {name: 'Average Waiting/engaged Time Day Wise', value: AVERAGE_WAITING_ENGAGED_TIME_DAY_WISE},\n    {name: 'Average Waiting/engaged Time Month Wise', value: AVERAGE_WAITING_ENGAGED_TIME_MONTH_WISE},\n    // {name: 'Reasons For Cancellations', value: REASONS_FOR_CANCELLATIONS},\n    {name: 'Daily Appointment Count', value: DAILY_APPOINTMENT_COUNT},\n    {name: 'Appointments For Each Doctor', value: APPOINTMENT_FOR_EACH_DOCTOR},\n    {name: 'Monthly Appointment Count', value: MONTHLY_APPOINTMENT_COUNT},\n    {name: 'Appointment For Each Patient Group', value: APPOINTMENT_FOR_EACH_PATIENT_GROUP},\n    {name: 'Patient Conversion', value: APPOINTMENT_FOR_PATIENT_CONVERSION},\n];\n\n/*Emr Reports*/\nexport const EMR_RELATED_REPORT = [\n    {name: 'Daily Treatments Count', value: DAILY_TREATMENT_COUNT},\n    {name: 'Treatments For Each Doctor', value: TREATMENTS_FOR_EACH_DOCTOR},\n    {name: 'Monthly Treatments Count', value: MONTHLY_TREATMENT_COUNT},\n    {name: 'Treatments For Each Category', value: TREATMENT_FOR_EACH_CATEGORY}\n];\n\n/*Amount Due Reports*/\nexport const AMOUNT_DUE_RELATED_REPORT = [\n    {name: 'Ageing Amount Due', value: AGEING_AMOUNT_DUE},\n    {name: 'Amount Due Per Doctor', value: AMOUNT_DUE_PER_DOCTOR},\n    // {name: 'Amount Due Per Procedure', value: AMOUNT_DUE_PER_PROCEDURE},\n    // {name: 'Unsettled Invoice', value: UNSETTLED_INVOICE},\n];\n\nexport const BLOOD_GROUPS = [\n    {name: \"A+\", value: 'A+'},\n    {name: \"A-\", value: 'A-'},\n    {name: \"B+\", value: 'B+'},\n    {name: \"B-\", value: 'B-'},\n    {name: \"AB+\", value: 'AB+'},\n    {name: \"AB-\", value: 'AB-'},\n    {name: \"O+\", value: 'O+'},\n    {name: \"O-\", value: 'O-'},\n];\n\n/*** Expense Reports ***/\nexport const EXPENSE_RELATED_REPORT = [\n    {name: 'Daily Expenses', value: DAILY_EXPENSES},\n    {name: 'Expenses For Each Type', value: EXPENSES_EACH_TYPE},\n    {name: 'Monthly Expenses', value: MONTHLY_EXPENSES}];\n\n/***Inventory Reports **/\nexport const INVENTORY_RELATED_REPORT = [\n    {name: 'Daily Stock Consumption Item Wise', value: DAILY_INVENTORY},\n    {name: 'Monthly Stock Consumption Item Wise', value: MONTHLY_INVENTORY},\n    {name: 'Top 10 Consumed Items', value: TOP_INVENTORY}\n];\nexport const PRODUCT_ITEM = [\n    {label: 'All', value: 'ALL'},\n    {label: DRUG, value: DRUG},\n    {label: EQUIPMENT, value: EQUIPMENT},\n    {label: SUPPLIES, value: SUPPLIES},\n];\n/*Bed Booking Reports*/\nexport const BED_BOOKING_RELATED_REPORT = [\n    {name: 'Daily Booking Count', value: DAILY_BOOKING_COUNT},\n    {name: 'Monthly Booking Count', value: MONTHLY_BOOKING_COUNT},\n    {name: 'Medicine Usage Count', value: MEDICINE_USAGE_COUNT},\n    {name: 'Bed Booking Package Count', value: BED_BOOKING_PACKAGE_COUNT},\n];\n/*MLM reports*/\nexport const MLM_RELATED_REPORT = [\n    {name: 'Margin Type wise', value: MARGIN_TYPE_WISE},\n    // {name:'Product Wise', value:PRODUCT_WISE},\n    {name: 'Wallet Balance Amount', value: WALLET_BALANCE_AMOUNT},\n    {name: 'Agent Tree View', value: AGENT_TREE_VIEW},\n];\n\n/*Payments Reports*/\nexport const PAYMENT_RELATED_REPORT = [\n    {name: 'Refund Payments', value: PAYMENT_REFUND},\n    {name: 'Payment Received From Each Patient Group', value: PATIENTS_UNSETTLED_ADVANCE},\n    {name: 'Patients With Unsettled Advance, As Of Today', value: PAYMENT_RECEIVED_PATIENT_GROUP},\n    {name: 'Modes Of Payment', value: MODE_OF_PAYMENTS},\n    {name: 'Payment Received Per Day', value: PAYMENT_RECEIVED_PER_DAY},\n    {name: 'Payment Received Per Doctor', value: PAYMENT_RECEIVED_PER_DOCTOR},\n    {name: 'Payment Received Per Month', value: PAYMENT_RECEIVED_PER_MONTH},\n    {name: 'Payment Settlement', value: PAYMENT_SETTLEMENT},\n    {name: 'Payment Settlement Per Doctor', value: PAYMENT_SETTLEMENT_PER_DOCTOR},\n    {name: 'Credit Notes', value: CREDIT_NOTES},\n    {name: 'Credit Amount Per Doctor', value: CREDIT_AMOUNT_PER_DOCTOR},\n];\n\n/*Income Reports*/\n\nexport const INCOME_RELATED_REPORT = [\n    {name: \"Daily Invoiced Income\", value: DAILY_INCOME},\n    {name: \"Monthly Invoiced Income\", value: MONTHLY_INCOME},\n    {name: \"Taxed Invoiced Income\", value: TAXED_INCOME},\n    {name: \"Invoiced Income For Each Doctor\", value: DOCTOR_EACH_INCOME},\n    {name: \"Invoiced Income For Each Procedure\", value: PROCEDURE_INCOME},\n    {name: \"Invoiced Income For Each Patient Group\", value: PATIENT_GROUPS_INCOME},\n    {name: \"Invoiced Income For Each Product\", value: PRODUCT_INCOME},\n\n];\n\n/* Invoiced Report */\nexport const INVOICE_RELATED_REPORT = [\n    // {name:\"All Returned Invoices\" ,value:ALL_INVOICE_RETURN},\n    {name: \"Day wise Return Invoice\", value: DAILY_WISE_RETURN_INVOICE},\n    {name: \"Monthly wise Return Invoice\", value: MONTHLY_WISE_RETURN_INVOICE},\n    {name: \"Return Invoice For Each Tax\", value: RETURN_INVOICE_FOR_EACH_TAX},\n    {name: \"Return Invoice For Each Procedure\", value: RETURN_INVOICE_FOR_EACH_PROCEDURE},\n    {name: \"Return Invoice For Each Product\", value: RETURN_INVOICE_FOR_EACH_PRODUCT},\n    {name: \"Return Invoice For Each Doctor\", value: RETURN_INVOICE_FOR_EACH_DOCTOR},\n    {name: \"Return Invoice For Each Patient Groups\", value: RETURN_INVOICE_FOR_EACH_PATIENT_GROUPS},\n];\n\n\nexport const SCHEDULE_OF_INVOICES = [\n    {label: \"all \", value: ''},\n    {label: \"Services\", value: \"SERVICES\"},\n    {label: \"Products\", value: \"PRODUCTS\"},\n    {label: \"Lab orders\", value: \"RESERVATION\"},\n];\n\nexport const DISCOUNT = [\n    {label: \"Zero\", value: \"ZERO\"},\n    {label: \"Non Zero\", value: \"NON_ZERO\"},\n];\n\nexport const SCHEDULE_OF_PAYMENT = [\n    {label: \"all payments\", value: \"SALES\"},\n    {label: \"Only advance payments\", value: \"SERVICES\"},\n    {label: \"Payment for services\", value: \"DAMAGED\"},\n    {label: \"Payment for products\", value: \"RETURNED\"},\n];\n\nexport const PATIENT_AGE = [\n    {label: 'DOB', value: 'DOB'},\n    {label: 'Age', value: 'AGE'}\n];\n\n/** Suggestions Reports***/\nexport const SUGGESTIONS_STATUS = [\n    {label: \"Open\", value: \"Open\"},\n    {label: \"In Progress\", value: \"InProgress\"},\n    {label: \"Closed\", value: \"Closed\"},\n];\n\nexport const SOURCE_PLATFORM = [\n    {label: 'Facebook', value: 'FACEBOOK'},\n    {label: \"News Paper\", value: \"NEWS_PAPER\"},\n    {label: \"TV\", value: \"TV\"},\n    {label: 'Street Banners', value: \"STREET\"},\n];\n\nexport const OUTER_KEYS_HOTKEYS = 'alt+c ,alt+p, alt+r, alt+s, alt+b ,alt+w';\n\nexport const INNER_KEYS_HOTKEYS = 'alt+f ,alt+a, alt+o, alt+m, alt+l ,alt+i,alt+e ,alt+n ,alt+y ,alt+t,alt+s ,alt+k, alt+g,alt+u,alt+w';\n\n\nexport const FAMILY_GROUPS = [\n    {name: \"Child\", value: 'CHILD'},\n    {name: \"Parent  \", value: 'PARENT'},\n    {name: \"Brother/Sister\", value: 'BROTHER/SISTER'},\n    {name: \"Husband/Wife\", value: 'HUSBAND/WIFE'},\n    {name: \"Grandchild\", value: 'GRANDCHILD'},\n    {name: \"GrandParent\", value: 'GRANDPARENT'},\n    {name: \"Uncle/Aunt\", value: 'O+'},\n    {name: \"Nephew/Niece\", value: 'NEPHEW/NIECE'},\n    {name: \"Cousin\", value: 'COUSIN'},\n];\n\n// //\n// export const ADVANCED_SEARCH = [\n//     {label: 'Patient Name', value: 'name', input_type: \"text\", placeholder: \"Patient Name\"},\n//     {label: 'Contact No', value: 'phone', input_type: \"text\", placeholder: \"Contact No\"},\n//     {label: 'Age is', value: 'age', input_type: \"number\", placeholder: \"Age is\"},\n//     {label: 'Age more than', value: 'age_gte', input_type: \"number\", placeholder: \"Age more than\"},\n//     {label: 'Age Less Than', value: 'age_lte', input_type: \"number\", placeholder: \"Age less than\"},\n//     {\n//         label: 'Has Age', value: 'has_age', input_type: \"dropdown\", values: [\n//             \"12\", \"25\", \"45\", \"78\"\n//         ]\n//     },\n//\n// ];\n\n/** Advanced Search Constant Data**/\nexport const ADVANCED_SEARCH = [\n    {label: 'Patient Name', value: 'name'},\n    {label: 'Contact No', value: 'phone'},\n    {label: 'Age is ', value: 'age'},\n    {label: 'Age more than ', value: 'age_gte'},\n    {label: 'Age Less Than', value: 'age_lte'},\n    {label: 'Has Age ', value: 'has_age'},\n    {label: 'Date of Birth is ', value: 'dob'},\n    {label: 'Date of Birth is more than ', value: 'dob_gte'},\n    {label: 'Date of Birth is less than', value: 'dob_lte'},\n    {label: 'Birthday is in', value: 'dob_month'},\n    {label: 'Has Date of Birth', value: 'has_dob'},\n    {label: 'Patient Id', value: 'patient_id'},\n    {label: 'Has Aadhar Id', value: 'has_aadhar'},\n    {label: 'Aadhar Id', value: 'aadhar'},\n    {label: 'Email', value: 'email'},\n    {label: 'Has Email', value: 'has_email'},\n    {label: 'Gender is', value: 'gender'},\n    {label: 'Has Gender', value: 'has_gender'},\n    {label: 'Pincode', value: 'pincode'},\n    {label: 'Has Pincode', value: 'has_pincode'},\n    {label: 'Has Street Address', value: 'has_street'},\n    {label: 'Street Address ', value: 'street'},\n    {label: 'Blood Group', value: 'blood_group'},\n    {label: 'Referal Source', value: 'source'},\n    {label: 'Refered by Agent', value: 'agent_referal'},\n    // {label:'Refered by Agent' ,value:'agent_referal'},\n\n];\n\nexport const HAS_AGE = [\n    {label: 'Yes', value: 'Y'},\n    {label: 'No', value: 'N'}\n];\n\nexport const HAS_DOB = [\n    {label: 'Yes', value: 'Y'},\n    {label: 'No', value: 'N'}\n];\nexport const HAS_AADHAR_ID = [\n    {label: 'Yes', value: 'Y'},\n    {label: 'No', value: 'N'}\n];\nexport const HAS_EMAIL = [\n    {label: 'Yes', value: 'Y'},\n    {label: 'No', value: 'N'}\n];\n\nexport const HAS_GENDER = [\n    {label: 'Yes', value: 'Y'},\n    {label: 'No', value: 'N'}\n];\n\nexport const HAS_PINCODE = [\n    {label: 'Yes', value: 'Y'},\n    {label: 'No', value: 'N'}\n];\n\nexport const HAS_STREET = [\n    {label: 'Yes', value: 'Y'},\n    {label: 'No', value: 'N'}\n];\n\nexport const REFERED_BY_AGENT = [\n    {label: 'Yes', value: 'Y'},\n    {label: 'No', value: 'N'}\n];\n\nexport const GENDER_OPTION = [\n    {label: 'Female', value: 'female'},\n    {label: 'Male', value: 'male'},\n    {label: 'Other', value: 'other'},\n];\n\nexport const CURRENCY_TYPE = [\n    {label: 'Percent', value: '%'},\n    {label: 'Rupees', value: 'INR'}\n];\n\n\nexport const ROUTES_TO_HIDE_PATIENT_SIDE_PANEL = [\n    '/patients/profile/add',\n    '/patient/:id/emr/vitalsigns/add',\n    \"/patient/:id/emr/vitalsigns/edit\",\n    \"/patient/:id/emr/clinicnotes/add\",\n    \"/patient/:id/emr/clinicnotes/edit\",\n    \"/patient/:id/emr/plans/add\",\n    \"/patient/:id/emr/plans/edit\",\n    \"/patient/:id/emr/workdone/add\",\n    \"/patient/:id/emr/workdone/edit\",\n    \"/patient/:id/emr/prescriptions/add\",\n    \"/patient/:id/emr/prescriptions/edit\",\n    \"/patient/:id/prescriptions/template/add\",\n    \"/patient/:id/billing/invoices/add\",\n    \"/patient/:id/billing/invoices/edit\",\n    \"/patient/:id/billing/payments/add\",\n    \"/patient/:id/billing/payments/edit\"\n];\n\n\nexport const PROMO_CODE_SMS_TAG_OPTIONS = [\n    {\n        label: \"PATIENT NAME\",\n        value: \"{{PATIENT}}\"\n    }, {\n        label: \"CLINIC NAME\",\n        value: \"{{CLINIC}}\"\n    }, {\n        label: \"CLINIC NAME\",\n        value: \"{{EXPIRY}}\"\n    }, {\n        label: \"VALUE\",\n        value: \"{{VALUE}}\"\n    }, {\n        label: \"MAX VALUE\",\n        value: \"{{MAX_VALUE}}\"\n    }, {\n        label: \"MIN PURCHASE\",\n        value: \"{{MIN_PURCHASE}}\"\n    }];\nexport const BLOOD_GROUP_CONFIG_PARAM = 'config_blood_group';\nexport const PATIENT_SOURCE_CONFIG_PARAM = 'config_source';\nexport const SMS_LANGUAGE_CONFIG_PARAM = 'config_sms_language';\nexport const FAMILY_RELATION_CONFIG_PARAM = 'config_family_relation';\nexport const GENDER_CONFIG_PARAM = 'config_gender';\n\n\n\nexport const INCOME_TYPE = [\n    {label: \"Services\", value: \"SERVICES\"},\n    {label: \"Products\", value: \"PRODUCTS\"},\n];\n\nexport const PDF_FILE_EXTENSION = 'pdf';","export const hideMobile = function (mobile) {\n    let hideString = '*';\n    if (mobile && mobile.length > 8) {\n        return mobile.substring(0, 3) + hideString.repeat(mobile.length - 5) + mobile.substring(mobile.length - 2);\n    }\n    return mobile;\n}\nexport const hideEmail = function (email) {\n    let hideString = '*';\n    if (email && email.length > 8) {\n        return email.substring(0, 3) + hideString.repeat(email.length - email.indexOf('@') - 4) + email.substring(email.length - email.indexOf('@') - 4);\n    }\n    return email;\n}\n","import React from \"react\";\nimport {Button, Result, Row} from \"antd\";\nimport {Link} from \"react-router-dom\";\n\nclass PermissionDenied extends React.Component {\n    render() {\n        return <Row style={{marginTop: '20px'}}>\n            <Result\n                status=\"403\"\n                title={<span><h1><b>403</b></h1>\n        <h2>Permission Denied</h2></span>}\n                subTitle=\"You don't have permission to view this page.\"\n                extra={<Link to=\"/\"><Button type=\"primary\">Go to Home</Button></Link>}\n            />\n        </Row>\n    }\n}\n\nexport default PermissionDenied;\n","import React from \"react\";\nimport Webcam from \"react-webcam\";\nimport {Button} from \"antd\";\n\nexport default class WebCamField extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {}\n    }\n\n    setRef = webcam => {\n        this.webcam = webcam;\n    };\n\n    capture = () => {\n        const imageSrc = this.webcam.getScreenshot();\n        if(this.props.getScreenShot)\n            this.props.getScreenShot(imageSrc);\n    };\n\n    render() {\n        const videoConstraints = {\n            width: 1280,\n            height: 720,\n            facingMode: \"user\"\n        };\n        return <div style={{width:680}}>\n            <Webcam audio={false}\n                    height={480}\n                    width={640}\n                    ref={this.setRef}\n                    videoConstraints={videoConstraints}\n                    screenshotFormat=\"image/jpeg\"/>\n            <Button onClick={this.capture}>Capture photo</Button>\n        </div>\n    }\n}\n","module.exports = __webpack_public_path__ + \"static/media/kidneycarelogo.3378a129.png\";","import React from \"react\";\nimport {Button, Result, Row} from \"antd\";\nimport {Link} from \"react-router-dom\";\n\nclass Error404 extends React.Component {\n    render() {\n        return <Row style={{marginTop: '20px'}} gutter={24}>\n            <Result\n                status=\"404\"\n                title={<span><h1><b>404</b></h1>\n        <h2>Page Not Found</h2></span>}\n                subTitle=\"The page you are looking for has been temporarily moved or did not exist.\"\n                extra={<Link to=\"/\"><Button type=\"primary\">Go to Home</Button></Link>}\n            />\n        </Row>\n    }\n}\n\nexport default Error404;\n","import React from \"react\";\nimport {Spin, Row, Col, Avatar, Icon, Button, Divider, Tag, Popconfirm} from \"antd\";\nimport {displayMessage, getAPI, interpolate, putAPI} from \"../../utils/common\";\nimport {APPOINTMENT_API} from \"../../constants/api\";\nimport {Link} from \"react-router-dom\";\nimport moment from \"moment\";\nimport {\n    CANCELLED_STATUS,\n    CHECKOUT_STATUS,\n    ENGAGED_STATUS,\n    SCHEDULE_STATUS,\n    WAITING_STATUS\n} from \"../../constants/hardData\";\nimport {ERROR_MSG_TYPE, SUCCESS_MSG_TYPE} from \"../../constants/dataKeys\";\n\nexport default class EventPatientPopover extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            loading: true,\n            appointment: null\n        }\n    }\n\n    componentDidMount() {\n        console.log(this.props);\n        if (this.props.appointmentId) {\n            this.loadAppointmentDetails();\n        } else {\n            this.setState({\n                loading: false\n            });\n        }\n    }\n\n    loadAppointmentDetails = () => {\n        this.setState({\n            loading: true\n        })\n        let that = this;\n        let successFn = function (data) {\n            that.setState({\n                appointment: data,\n                loading: false\n            });\n            console.log(\"event\", data)\n        };\n        let errorFn = function () {\n            that.setState({\n                loading: false\n            });\n        };\n        getAPI(interpolate(APPOINTMENT_API, [this.props.appointmentId]), successFn, errorFn);\n\n\n    }\n    updateAppointmentStatus = (id, currentStatus, targetStatus) => {\n        let that = this;\n        let reqData = {\n            status: targetStatus\n        };\n        if (targetStatus == WAITING_STATUS) {\n            reqData.waiting = moment().format()\n        } else if (targetStatus == ENGAGED_STATUS) {\n            reqData.engaged = moment().format()\n        } else if (targetStatus == CHECKOUT_STATUS) {\n            reqData.checkout = moment().format()\n        }\n        let successFn = function (data) {\n            displayMessage(SUCCESS_MSG_TYPE, \"Appointment Status Changed Successfully!!\");\n            that.loadAppointmentDetails()\n        }\n        let errorFn = function () {\n\n        }\n        putAPI(interpolate(APPOINTMENT_API, [id]), reqData, successFn, errorFn\n        )\n    }\n\n    changeAppointmentStatus = (id, currentStatus, targetStatus) => {\n        let that = this;\n        let successFn = function (data) {\n            if (data.status == currentStatus) {\n                that.updateAppointmentStatus(id, currentStatus, targetStatus)\n            } else {\n                displayMessage(ERROR_MSG_TYPE, \"Appointment status has already changed. Updating Appointments...\")\n                that.loadAppointmentDetails();\n            }\n        }\n        let errorFn = function () {\n\n        }\n        getAPI(interpolate(APPOINTMENT_API, [id]), successFn, errorFn);\n    }\n\n    render() {\n        let that = this;\n        let appointment = this.state.appointment;\n        return <div style={{width: '300px', minHeight: '200px'}}>\n            <Spin spinning={this.state.loading}>\n                {this.state.appointment ? <div>\n                        <Row>\n                            <Col span={8}>\n                                {this.state.appointment.patient.image?<Avatar src={this.state.appointment.patient.image} size={80}/>:\n                                    <Avatar style={{backgroundColor: '#87d068'}}>\n                                        {this.state.appointment.patient.user.first_name ? this.state.appointment.patient.user.first_name.charAt(0) :\n                                            <Icon type=\"user\"/>}\n                                    </Avatar>\n                                }\n                            </Col>\n                            <Col span={16}>\n                                <Link to={\"/patient/\" + this.state.appointment.patient.id + \"/profile\"}>\n                                    <h3>{this.state.appointment.patient.user.first_name}\n                                        <br/>\n                                        <small>\n                                            Patient\n                                            ID: {this.state.appointment.patient.custom_id} , {this.state.appointment.patient.gender}\n                                            <br/>{this.state.appointment.patient.user.mobile}\n                                        </small>\n                                    </h3>\n                                </Link>\n                            </Col>\n                        </Row>\n                        <Divider style={{margin: 0}}/>\n                        <small>Status: {this.state.appointment.status}</small>\n                        <br/>\n                        <small>\n                            <Icon\n                                type=\"clock-circle\"/> {moment(this.state.appointment.schedule_at).format('HH:mm A on MMMM Do')} for {this.state.appointment.slot} mins.\n                        </small>\n                        {showStatusTimeline(appointment)}\n                        <Row style={{height: '100px', overflow: 'scroll', backgroundColor: '#eee', padding: 5}}>\n                            <div>\n                                {appointment.status == SCHEDULE_STATUS ?\n                                    <span style={{width: '70px', float: 'right'}}>\n                    <a onClick={() => that.changeAppointmentStatus(appointment.id, SCHEDULE_STATUS, WAITING_STATUS)} disabled={that.props.activePracticePermissions.ChangeAppointmentStatus}> Check In</a></span> : null}\n                                {appointment.status == WAITING_STATUS ?\n                                    <span style={{width: '70px', float: 'right'}}>\n                    <a onClick={() => that.changeAppointmentStatus(appointment.id, WAITING_STATUS, ENGAGED_STATUS)} disabled={that.props.activePracticePermissions.ChangeAppointmentStatus}> Engage</a></span> : null}\n                                {appointment.status == ENGAGED_STATUS ?\n                                    <span style={{width: '70px', float: 'right'}}>\n                    <a onClick={() => that.changeAppointmentStatus(appointment.id, ENGAGED_STATUS, CHECKOUT_STATUS)} disabled={that.props.activePracticePermissions.ChangeAppointmentStatus}> Check Out</a></span> : null}\n                                {appointment.status == CHECKOUT_STATUS ?\n                                    <span style={{width: '70px', float: 'right'}}>\n                    <small>Checked Out</small></span> : null}\n                                {this.state.appointment.doctor_data ? <Tag\n                                    color={this.state.appointment.doctor_data ? this.state.appointment.doctor_data.calendar_colour : null}>\n                                    <b>{\"With \" + this.state.appointment.doctor_data.user.first_name} </b>\n                                </Tag> : null}\n                            </div>\n                            <Divider style={{margin: 0}}/>\n                            <b>Category:</b>{this.state.appointment.category_data ? this.state.appointment.category_data.name : null}\n                        </Row>\n                        <Divider style={{margin: 0}}/>\n                        <Row style={{textAlign: 'right'}}>\n                            <Button.Group size={\"small\"}>\n                                {that.props.activePracticePermissions.EditAppointment || that.props.allowAllPermissions ?\n                                <Button>\n                                    <Link to={\"/calendar/\" + this.state.appointment.id + \"/edit-appointment\"}>\n                                        <Icon type={\"edit\"}/> Edit\n                                    </Link>\n                                </Button>:null}\n                                {that.props.activePracticePermissions.ChangeAppointmentStatus || that.props.allowAllPermissions?\n                                <Popconfirm title=\"Are you sure delete this?\"\n                                            onConfirm={() => that.changeAppointmentStatus(appointment.id, appointment.status, CANCELLED_STATUS)}\n                                            okText=\"Yes\" cancelText=\"No\">\n                                    <Button type={\"danger\"}>\n                                        <Icon type={\"cross\"}/> Cancel\n                                    </Button>\n                                </Popconfirm>:null}\n                            </Button.Group>\n                        </Row>\n                    </div> :\n                    <h4>No Patient Found</h4>}\n            </Spin>\n        </div>\n    }\n}\n\nfunction showStatusTimeline(appointment) {\n    switch (appointment.status) {\n        case WAITING_STATUS:\n            return <div>\n                <br/><small>Checked in At {moment(appointment.waiting).format('lll')}</small>\n            </div>\n        case ENGAGED_STATUS:\n            return <div>\n                <small>Waiting Time {moment(appointment.engaged).from(moment(appointment.waiting))}</small>\n                <br/><small>Engaged At {moment(appointment.engaged).format('lll')}</small>\n            </div>\n        case CHECKOUT_STATUS:\n            return <div>\n                <small>Waiting Time {moment(appointment.engaged).from(moment(appointment.waiting))}</small>\n                <br/><small>Engaged Time {moment(appointment.checkout).from(moment(appointment.engaged))}</small>\n                <br/><small>Total Stay Time {moment(appointment.checkout).from(moment(appointment.waiting))}</small>\n            </div>\n    }\n    return null\n}\n"],"sourceRoot":""}