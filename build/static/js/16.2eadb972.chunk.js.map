{"version":3,"sources":["app/components/calendar/EventComponent.js","app/utils/calendarUtils.js","app/components/calendar/CalendarRightPanel.js","app/components/calendar/Calendar.js"],"names":["EventComponent","props","placement","content","EventPatientPopover","appointmentId","this","event","appointment","id","key","trigger","style","color","height","type","title","React","Component","calendarSettingMenu","Item","to","saveCalendarSettings","value","settings","lockr","CALENDAR_SETTINGS","getCalendarSettings","TimeSlotWrapper","flag","dayValue","moment","isValid","format","toLowerCase","filterType","selectedDoctor","calendarTimings","daysTimings","lunch","startTime","endTime","lunchEndTime","lunchStartTime","doctorTimings","showCalendarEvents","i","blockedCalendar","length","doctor","isBetween","block_from","block_to","children","child","Children","only","cloneElement","className","CalendarRightPanel","changeDate","option","that","setState","prevState","selectedDate","add","subtract","todaysAppointments","loading","getAPI","interpolate","APPOINTMENT_PERPRACTICE_API","active_practiceId","data","appointmentOverview","filteredAppointment","forEach","status","CANCELLED_STATUS","todaysAppointmentFilter","push","todaysAppointmentOverview","todaysFilteredAppointments","start","state","end","filterTodaysAppointment","changeAppointmentStatus","currentStatus","targetStatus","APPOINTMENT_API","updateAppointmentStatus","displayMessage","ERROR_MSG_TYPE","reqData","WAITING_STATUS","waiting","ENGAGED_STATUS","engaged","CHECKOUT_STATUS","checkout","putAPI","SUCCESS_MSG_TYPE","bind","overlay","block","margin","activePracticePermissions","AddWalkinAppointment","allowAllPermissions","gutter","span","onClick","SCHEDULE_STATUS","textAlign","border","borderRadius","backgroundColor","boxShadow","spinning","size","dataSource","renderItem","apppointment","padding","textDecoration","width","marginTop","borderLeft","doctors_object","calendar_colour","AppointmentCard","marginBottom","schedule_at","patient","user","first_name","float","disabled","ChangeAppointmentStatus","localizer","momentLocalizer","DragAndDropCalendar","withDragAndDrop","BigCalendar","Content","confirm","App","changeCalendarType","calendarType","selectedCategory","changeFilter","practice_doctors","resizeEvent","WARNING_MSG_TYPE","events","changedEvent","nextEvents","existingEvent","parseInt","successFn","refreshFilterList","errorFn","onOk","onCancel","blockedCalendarTiming","BLOCK_CALENDAR","practice","cal_fdate","cal_tdate","onRangeChange","e","appointmentList","date","newDate","month","onSelectedDateChange","startOf","endOf","setFilterType","setFilter","stateValues","loadDoctorTiming","filteredEvent","filterCancelledAppointment","category","changeState","DOCTOR_VISIT_TIMING_API","dataObject","timing","DAY_KEYS","dayKey","visting_hour_same_week","first_start_time","second_end_time","is_two_sessions","first_end_time","second_start_time","doctorTiming","visiblePopover","appointments","practice_categories","practice_staff","categories_object","doctorsAppointmentCount","categoriesAppointmentCount","showAppointments","onSelectSlot","onSelectEvent","moveEvent","loadDoctors","eventStyleGetter","loadCalendarTimings","APPOINTMENT_CATEGORIES","categories","map","item","intToRGB","hashCode","name","doctorLoading","PRACTICESTAFF","doctors","staff","doctor_object","usersdata","role","DOCTORS_ROLE","CALENDER_SETTINGS","droppedOnAllDaySlot","isAllDay","idx","indexOf","allDay","updatedEvent","splice","time","action","redirect","history","newEvents","endtime","slot","Date","ALL","CANCELLED","isSelected","color_object","opacity","display","start_time","end_time","exact","path","render","route","AddAppointment","CreateAppointment","PermissionDenied","EditAppointment","onChange","allowClear","BlockCalendar","selectedKeys","textOverflow","borderRight","fontWeight","Group","checked","defaultValue","buttonStyle","target","Button","position","bottom","zIndex","openMorePanel","listStyle","paddingInlineStart","show24HourCalendar","shape","icon","defaultDate","defaultView","step","timeslots","truncateEvents","onEventDrop","onEventResize","resizable","selectable","popup","views","week","MyWeek","day","agenda","eventPropGetter","components","timeSlotWrapper","options","toString","range","eventOffset","dates","current","navigate","Navigate","PREVIOUS","NEXT","toLocaleDateString"],"mappings":"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","file":"static/js/16.2eadb972.chunk.js","sourcesContent":["import React from \"react\";\nimport {Icon, Popover} from \"antd\";\nimport EventPatientPopover from \"./EventPatientPopover\";\n\nexport default class EventComponent extends React.Component {\n    constructor(props) {\n        super(props);\n    }\n\n    render(){\n        let that=this;\n        return <Popover placement=\"right\"\n                        content={<EventPatientPopover appointmentId={this.props.event.appointment.id}\n                                                      key={this.props.event.appointment.id} {...that.props}/>}\n                        trigger=\"hover\">\n            <div style={{color: 'white',height:'100%'}}>\n                <h1 style={{color: 'white'}}><Icon type={'user'}/>{this.props.title}</h1>\n            </div>\n        </Popover>\n    }\n}\n","import {Menu} from \"antd\";\nimport React from 'react';\nimport {Link} from \"react-router-dom\";\nimport {getAPI, interpolate} from \"./common\";\nimport {APPOINTMENT_CATEGORIES} from \"../constants/api\";\nimport {hashCode, intToRGB} from \"./clinicUtils\";\nimport * as lockr from \"lockr\";\nimport {CALENDAR_SETTINGS} from \"../constants/dataKeys\";\nimport moment from \"moment/moment\";\n\nexport const calendarSettingMenu = (<Menu>\n        <Menu.Item key=\"1\">\n            <Link to={\"/settings/calendarsettings#timings\"}>\n                Modify Calendar Timings\n            </Link>\n        </Menu.Item>\n        <Menu.Item key=\"2\">\n            <Link to={\"/settings/clinics-staff#staff\"}>\n                Add/Edit Doctor or Staff\n            </Link>\n        </Menu.Item>\n        <Menu.Item key=\"3\">\n            <Link to={\"/settings/clinics-staff#notification\"}>\n                Modify SMS/Email for Doctor/Staff\n            </Link>\n        </Menu.Item>\n        <Menu.Item key=\"4\">\n            <Link to={\"/settings/communication-settings\"}>\n                Modify SMS/Email for Patients\n            </Link>\n        </Menu.Item>\n        <Menu.Item key=\"5\">\n            <Link to={\"/settings/calendarsettings#categories\"}>\n                Add/Edit Categroies\n            </Link>\n        </Menu.Item>\n    </Menu>\n);\nexport const loadAppointmentCategories = function (that) {\n    let successFn = function (data) {\n        let categories_object = {}\n        let categories = data.map((item) => {\n                categories_object[item.id] = {...item, calendar_colour: intToRGB(hashCode(item.name))}\n                return categories_object[item.id]\n            }\n        )\n        that.setState({\n            categories_object: categories_object,\n            practice_categories: categories,\n        })\n\n    }\n    let errorFn = function () {\n\n    }\n    getAPI(interpolate(APPOINTMENT_CATEGORIES, [that.props.active_practiceId]), successFn, errorFn)\n}\n\nexport const saveCalendarSettings = function (type, value) {\n    let settings = lockr.get(CALENDAR_SETTINGS);\n    if (!settings) {\n        settings = {}\n    }\n    settings = {...settings, [type]: value}\n    lockr.set(CALENDAR_SETTINGS, settings);\n}\nexport const getCalendarSettings = function () {\n    let settings = lockr.get(CALENDAR_SETTINGS);\n    if (!settings) {\n        settings = {}\n    }\n    return settings;\n}\n\n\nexport const TimeSlotWrapper = function (props) {\n    let flag = true;\n    let dayValue = moment(props.value).isValid() ? moment(props.value).format('dddd').toLowerCase() : null;\n    if (props.filterType != 'DOCTOR' || props.selectedDoctor == 'ALL') {\n        /**\n         * Checking for Calendar Clinic Timings\n         * */\n        if (props.calendarTimings && dayValue && props.calendarTimings[dayValue]) {\n            let daysTimings = props.calendarTimings[dayValue];\n            if (daysTimings.lunch) {\n                if (\n                    (moment(props.value, 'HH:mm:ss').format('HH:mm:ss') <= daysTimings.startTime.format('HH:mm:ss')\n                        || moment(props.value, 'HH:mm:ss').format('HH:mm:ss') > daysTimings.endTime.format('HH:mm:ss')\n                    ) || (\n                        moment(props.value, 'HH:mm:ss').format('HH:mm:ss') < daysTimings.lunchEndTime.format('HH:mm:ss')\n                        && moment(props.value, 'HH:mm:ss').format('HH:mm:ss') >= daysTimings.lunchStartTime.format('HH:mm:ss')\n                    )\n                ) {\n                    flag = false;\n                }\n            } else {\n                if (moment(props.value, 'HH:mm:ss').format('HH:mm:ss') <= daysTimings.startTime.format('HH:mm:ss') || moment(props.value, 'HH:mm:ss').format('HH:mm:ss') > daysTimings.endTime.format('HH:mm:ss')) {\n                    flag = false;\n                }\n            }\n        } else if (dayValue && !props.calendarTimings[dayValue]) {\n            /**\n             * If the practice is not opening for the day\n             * */\n            flag = false;\n        }\n    } else {\n        if (props.doctorTimings && dayValue && props.doctorTimings[dayValue]) {\n            let daysTimings = props.doctorTimings[dayValue];\n            if (daysTimings.lunch) {\n                if (\n                    (moment(props.value, 'HH:mm:ss').format('HH:mm:ss') <= daysTimings.startTime.format('HH:mm:ss')\n                        || moment(props.value, 'HH:mm:ss').format('HH:mm:ss') > daysTimings.endTime.format('HH:mm:ss')\n                    ) || (\n                        moment(props.value, 'HH:mm:ss').format('HH:mm:ss') < daysTimings.lunchEndTime.format('HH:mm:ss')\n                        && moment(props.value, 'HH:mm:ss').format('HH:mm:ss') >= daysTimings.lunchStartTime.format('HH:mm:ss')\n                    )\n                ) {\n                    flag = false;\n                }\n            } else {\n                if (moment(props.value, 'HH:mm:ss').format('HH:mm:ss') <= daysTimings.startTime.format('HH:mm:ss') || moment(props.value, 'HH:mm:ss').format('HH:mm:ss') > daysTimings.endTime.format('HH:mm:ss')) {\n                    flag = false;\n                }\n            }\n        } else if (props.doctorTimings && dayValue && !props.doctorTimings[dayValue]) {\n            /**\n             * If the doctor is not working for the day\n             * */\n            flag = false;\n        }\n    }\n    /**\n     * Checking for Events Timings\n     * */\n    if (props.showCalendarEvents && flag) {\n        for (let i = 0; i < props.blockedCalendar.length; i++) {\n            if (props.blockedCalendar[i].doctor && props.filterType == 'DOCTOR') {\n                if (props.blockedCalendar[i].doctor == props.selectedDoctor && moment(props.value).isBetween(moment(props.blockedCalendar[i].block_from), moment(props.blockedCalendar[i].block_to))) {\n                    flag = false;\n                    break;\n                }\n            } else {\n                if (moment(props.value).isBetween(moment(props.blockedCalendar[i].block_from), moment(props.blockedCalendar[i].block_to))) {\n                    flag = false;\n                    break;\n                }\n            }\n        }\n    }\n\n    if (flag)\n        return props.children;\n\n\n    const child = React.Children.only(props.children);\n    return React.cloneElement(child, {className: child.props.className + ' rbc-off-range-bg'});\n}\n","import React from \"react\";\nimport {\n    CANCELLED_STATUS,\n    CHECKOUT_STATUS,\n    ENGAGED_STATUS,\n    SCHEDULE_STATUS,\n    WAITING_STATUS\n} from \"../../constants/hardData\";\nimport {calendarSettingMenu} from \"../../utils/calendarUtils\";\nimport {Button, Icon, Dropdown, Row, Col, Divider, Spin, List, Popover} from \"antd\";\nimport {Link} from \"react-router-dom\";\nimport moment from \"moment/moment\";\nimport {APPOINTMENT_API, APPOINTMENT_PERPRACTICE_API} from \"../../constants/api\";\nimport {displayMessage, getAPI, interpolate, putAPI} from \"../../utils/common\";\nimport EventPatientPopover from \"./EventPatientPopover\";\nimport {ERROR_MSG_TYPE, SUCCESS_MSG_TYPE} from \"../../constants/dataKeys\";\n\nexport default class CalendarRightPanel extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            todaysAppointments: [],\n            todaysFilteredAppointments: [],\n            todaysAppointmentOverview: {},\n            todaysAppointmentFilter: 'ALL',\n            selectedDate: this.props.selectedDate\n        }\n        this.todaysAppointments = this.todaysAppointments.bind(this);\n    }\n\n    componentDidMount() {\n        this.todaysAppointments()\n    }\n\n    changeDate = (option) => {\n        let that = this;\n        this.setState(function (prevState) {\n            if (option)\n                return {selectedDate: prevState.selectedDate.add(1, 'days')};\n            return {selectedDate: prevState.selectedDate.subtract(1, 'days')};\n\n        }, function () {\n            that.todaysAppointments();\n        })\n\n    }\n    todaysAppointments = () => {\n        let that = this;\n        that.setState({\n            loading: true\n        });\n        let successFn = function (data) {\n            that.setState(function (prevState) {\n                let appointmentOverview = {};\n                let filteredAppointment = [];\n                data.forEach(function (appointment) {\n                    if (appointment.status == CANCELLED_STATUS) {\n                        return true;\n                    }\n                    if (appointmentOverview[appointment.status]) {\n                        appointmentOverview[appointment.status] += 1\n                    } else {\n                        appointmentOverview[appointment.status] = 1;\n                    }\n                    if (prevState.todaysAppointmentFilter == 'ALL') {\n                        filteredAppointment.push(appointment)\n                    } else if (prevState.todaysAppointmentFilter == appointment.status) {\n                        filteredAppointment.push(appointment)\n                    }\n                });\n                return {\n                    todaysAppointments: data,\n                    todaysAppointmentOverview: appointmentOverview,\n                    todaysFilteredAppointments: filteredAppointment,\n                    loading: false\n                }\n            });\n        }\n        let errorFn = function () {\n            that.setState({\n                loading: false\n            })\n        }\n        getAPI(interpolate(APPOINTMENT_PERPRACTICE_API, [this.props.active_practiceId]), successFn, errorFn, {\n            start: that.state.selectedDate.format('YYYY-MM-DD'),\n            end: that.state.selectedDate.format('YYYY-MM-DD')\n        });\n    }\n\n    filterTodaysAppointment = (filterType) => {\n        this.setState(function (prevState) {\n            let filteredAppointment = [];\n            prevState.todaysAppointments.forEach(function (appointment) {\n                if (filterType == 'ALL') {\n                    filteredAppointment.push(appointment)\n                } else if (filterType == appointment.status) {\n                    filteredAppointment.push(appointment)\n                }\n            });\n            return {\n                todaysFilteredAppointments: filteredAppointment,\n                todaysAppointmentFilter: filterType\n            }\n        });\n    }\n    changeAppointmentStatus = (id, currentStatus, targetStatus) => {\n        let that = this;\n        let successFn = function (data) {\n            if (data.status == currentStatus) {\n                that.updateAppointmentStatus(id, currentStatus, targetStatus)\n            } else {\n                displayMessage(ERROR_MSG_TYPE, \"Appointment status has already changed. Updating Appointments...\")\n                that.todaysAppointments();\n            }\n        }\n        let errorFn = function () {\n\n        }\n        getAPI(interpolate(APPOINTMENT_API, [id]), successFn, errorFn);\n    }\n    updateAppointmentStatus = (id, currentStatus, targetStatus) => {\n        let that = this;\n        let reqData = {\n            status: targetStatus\n        };\n        if(targetStatus==WAITING_STATUS){\n            reqData.waiting=moment().format()\n        }else if(targetStatus==ENGAGED_STATUS){\n            reqData.engaged=moment().format()\n        }else if(targetStatus==CHECKOUT_STATUS){\n            reqData.checkout=moment().format()\n        }\n        let successFn = function (data) {\n            displayMessage(SUCCESS_MSG_TYPE, \"Appointment Status Changed Successfully!!\");\n            that.todaysAppointments()\n        }\n        let errorFn = function () {\n\n        }\n        putAPI(interpolate(APPOINTMENT_API, [id]), reqData, successFn, errorFn\n        )\n    }\n\n    render() {\n        let that = this;\n        return <div>\n            <Dropdown trigger={'click'} overlay={calendarSettingMenu}>\n                <Button block style={{margin: 5}}>\n                    <Icon type=\"setting\"/> Settings <Icon type=\"down\"/>\n                </Button>\n            </Dropdown>\n            {that.props.activePracticePermissions.AddWalkinAppointment || that.props.allowAllPermissions ?\n            <Link to='/calendar/create-appointment'>\n                <Button block type=\"primary\" style={{margin: 5}}> Walkin\n                    Appointment</Button>\n            </Link>:null}\n            <Row gutter={8}>\n                <Col span={6}\n                     onClick={() => this.filterTodaysAppointment(this.state.todaysAppointmentFilter == SCHEDULE_STATUS ? 'ALL' : SCHEDULE_STATUS)}\n                     style={{\n                         textAlign: 'center',\n                         border: '1px solid #ccc',\n                         borderRadius: '3px',\n                         backgroundColor: (this.state.todaysAppointmentFilter == SCHEDULE_STATUS ? '#FF6600' : null),\n                         color: (this.state.todaysAppointmentFilter == SCHEDULE_STATUS ? 'white' : '#FF6600'),\n                         boxShadow: '0 2px 4px #111 inset'\n                     }}>\n                    <small>{SCHEDULE_STATUS}</small>\n                    <h2 style={{color: (this.state.todaysAppointmentFilter == SCHEDULE_STATUS ? 'white' : '#FF6600')}}>{this.state.todaysAppointmentOverview[SCHEDULE_STATUS] ? this.state.todaysAppointmentOverview[SCHEDULE_STATUS] : 0}</h2>\n                </Col>\n                <Col span={6}\n                     onClick={() => this.filterTodaysAppointment(this.state.todaysAppointmentFilter == WAITING_STATUS ? 'ALL' : WAITING_STATUS)}\n                     style={{\n                         textAlign: 'center',\n                         border: '1px solid #ccc',\n                         borderRadius: '3px',\n                         backgroundColor: (this.state.todaysAppointmentFilter == WAITING_STATUS ? '#FC0000' : null),\n                         color: (this.state.todaysAppointmentFilter == WAITING_STATUS ? 'white' : '#FC0000'),\n                         boxShadow: '0 2px 4px #111 inset'\n                     }}>\n                    <small>{WAITING_STATUS}</small>\n                    <h2 style={{color: (this.state.todaysAppointmentFilter == WAITING_STATUS ? 'white' : '#FC0000')}}>{this.state.todaysAppointmentOverview[WAITING_STATUS] ? this.state.todaysAppointmentOverview[WAITING_STATUS] : 0}</h2>\n                </Col>\n                <Col span={6}\n                     onClick={() => this.filterTodaysAppointment(this.state.todaysAppointmentFilter == ENGAGED_STATUS ? 'ALL' : ENGAGED_STATUS)}\n                     style={{\n                         textAlign: 'center',\n                         border: '1px solid #ccc',\n                         borderRadius: '3px',\n                         backgroundColor: (this.state.todaysAppointmentFilter == ENGAGED_STATUS ? '#598C01' : null),\n                         color: (this.state.todaysAppointmentFilter == ENGAGED_STATUS ? 'white' : '#598C01'),\n                         boxShadow: '0 2px 4px #111 inset'\n                     }}>\n                    <small>{ENGAGED_STATUS}</small>\n                    <h2 style={{color: (this.state.todaysAppointmentFilter == ENGAGED_STATUS ? 'white' : '#598C01')}}>{this.state.todaysAppointmentOverview[ENGAGED_STATUS] ? this.state.todaysAppointmentOverview[ENGAGED_STATUS] : 0}</h2>\n                </Col>\n                <Col span={6}\n                     onClick={() => this.filterTodaysAppointment(this.state.todaysAppointmentFilter == CHECKOUT_STATUS ? 'ALL' : CHECKOUT_STATUS)}\n                     style={{\n                         textAlign: 'center',\n                         border: '1px solid #ccc',\n                         borderRadius: '3px',\n                         backgroundColor: (this.state.todaysAppointmentFilter == CHECKOUT_STATUS ? '#0094DE' : null),\n                         color: (this.state.todaysAppointmentFilter == CHECKOUT_STATUS ? 'white' : '#0094DE'),\n                         boxShadow: '0 2px 4px #111 inset'\n                     }}>\n                    <small>{CHECKOUT_STATUS}</small>\n                    <h2 style={{color: (this.state.todaysAppointmentFilter == CHECKOUT_STATUS ? 'white' : '#0094DE')}}>{this.state.todaysAppointmentOverview[CHECKOUT_STATUS] ? this.state.todaysAppointmentOverview[CHECKOUT_STATUS] : 0}</h2>\n                </Col>\n            </Row>\n            <Divider>\n                <a type=\"primary\" onClick={() => this.changeDate(false)}><Icon type=\"left\"/></a>\n                {this.state.selectedDate.format(\"MMM Do\") == moment().format(\"MMM Do\") ? 'Today' : this.state.selectedDate.format(\"MMM Do\")}'s\n                Schedule ({this.state.todaysFilteredAppointments.length})\n                &nbsp;<a type=\"primary\" onClick={() => this.changeDate(true)}><Icon type=\"right\"/></a>\n            </Divider>\n            <Spin spinning={this.state.loading}>\n                <List\n                    size={'small'}\n                    dataSource={this.state.todaysFilteredAppointments}\n                    renderItem={(apppointment) => (apppointment.status == CANCELLED_STATUS ? <div/> : <List.Item\n                        color={'transparent'}\n                        style={{padding: 0}}>\n                        <div\n                            style={{\n                                border: '1px solid #ddd',\n                                borderRadius: '5px',\n                                textDecoration: (apppointment.status == CANCELLED_STATUS ? 'line-through' : 'inherit'),\n                                backgroundColor: (apppointment.status == CANCELLED_STATUS ? '#aaa' : '#eee'),\n                                width: '100%',\n                                marginTop: '2px',\n                                borderLeft: '5px solid' + (apppointment.doctor && that.props.doctors_object && that.props.doctors_object[apppointment.doctor] ? that.props.doctors_object[apppointment.doctor].calendar_colour : 'transparent')\n                            }}>\n                            <AppointmentCard {...apppointment}\n                                             changeAppointmentStatus={this.changeAppointmentStatus} {...this.props}/>\n                        </div>\n                    </List.Item>)\n                    }/>\n            </Spin>\n        </div>\n    }\n}\n\nfunction AppointmentCard(appointment) {\n    return <div style={{width: '100%'}}>\n\n        <p style={{marginBottom: 0}}>\n            <Popover placement=\"right\"\n                     content={<EventPatientPopover appointmentId={appointment.id}\n                                                   key={appointment.id} {...appointment}/>}>\n            <span\n                style={{width: 'calc(100% - 60px)'}}><b>{moment(appointment.schedule_at).format(\"LT\")}</b>&nbsp;\n                {appointment.patient.user.first_name}</span>\n            </Popover>\n            {appointment.status == SCHEDULE_STATUS ?\n                <span style={{width: '70px', float: 'right'}}>\n                    <a onClick={() => appointment.changeAppointmentStatus(appointment.id, SCHEDULE_STATUS, WAITING_STATUS)} disabled={!appointment.activePracticePermissions.ChangeAppointmentStatus}> Check In</a></span> : null}\n            {appointment.status == WAITING_STATUS ?\n                <span style={{width: '70px', float: 'right'}}>\n                    <a onClick={() => appointment.changeAppointmentStatus(appointment.id, WAITING_STATUS, ENGAGED_STATUS)} disabled={!appointment.activePracticePermissions.ChangeAppointmentStatus}> Engage</a></span> : null}\n            {appointment.status == ENGAGED_STATUS ?\n                <span style={{width: '70px', float: 'right'}}>\n                    <a onClick={() => appointment.changeAppointmentStatus(appointment.id, ENGAGED_STATUS, CHECKOUT_STATUS)} disabled={!appointment.activePracticePermissions.ChangeAppointmentStatus}> Check Out</a></span> : null}\n            {appointment.status == CHECKOUT_STATUS ?\n                <span style={{width: '70px', float: 'right'}}>\n                    <small>Checked Out</small></span> : null}\n\n        </p>\n    </div>;\n}\n","import React, {Component} from \"react\";\nimport moment from \"moment\";\nimport \"react-big-calendar/lib/addons/dragAndDrop/styles.css\";\nimport \"react-big-calendar/lib/css/react-big-calendar.css\";\nimport withDragAndDrop from \"react-big-calendar/lib/addons/dragAndDrop\";\nimport TimeGrid from 'react-big-calendar/lib/TimeGrid';\nimport {Calendar as BigCalendar, momentLocalizer, Navigate} from 'react-big-calendar';\nimport {\n    Modal,\n    Row,\n    Col,\n    Button,\n    Divider,\n    Layout,\n    Spin,\n    Menu,\n    Dropdown,\n    Icon,\n    DatePicker, Checkbox,\n    Radio\n} from \"antd\";\nimport {DOCTORS_ROLE, SUCCESS_MSG_TYPE, WARNING_MSG_TYPE,} from \"../../constants/dataKeys\";\nimport \"./app.css\";\nimport {Route, Link, Switch} from \"react-router-dom\";\nimport * as dates from 'date-arithmetic'\nimport {getAPI, putAPI, interpolate, displayMessage} from \"../../utils/common\";\nimport {\n    APPOINTMENT_PERPRACTICE_API,\n    APPOINTMENT_API,\n    PRACTICESTAFF,\n    CALENDER_SETTINGS,\n    BLOCK_CALENDAR, DOCTOR_VISIT_TIMING_API\n} from \"../../constants/api\";\nimport EventComponent from \"./EventComponent\";\nimport {\n    getCalendarSettings,\n    loadAppointmentCategories,\n    saveCalendarSettings, TimeSlotWrapper\n} from \"../../utils/calendarUtils\";\nimport CalendarRightPanel from \"./CalendarRightPanel\";\nimport {\n    CANCELLED_STATUS,\n    DAY_KEYS,\n    SCHEDULE_STATUS,\n} from \"../../constants/hardData\";\nimport CreateAppointment from \"./CreateAppointment\";\nimport PermissionDenied from \"../common/errors/PermissionDenied\";\n\nconst localizer = momentLocalizer(moment);\nconst DragAndDropCalendar = withDragAndDrop(BigCalendar);\nconst {Content} = Layout;\nconst confirm = Modal.confirm;\n\nclass App extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            startTime: null,\n            visiblePopover: false,\n            events: [],\n            filteredEvent: [],\n            appointments: [],\n            practice_doctors: [],\n            practice_categories: [],\n            practice_staff: [],\n            doctors_object: null,\n            categories_object: null,\n            calendarTimings: null,\n            timing: {},\n            loading: true,\n            selectedDoctor: 'ALL',\n            selectedCategory: 'ALL',\n            selectedDate: moment(),\n            filterType: 'DOCTOR',\n            calendarType: 'APPOINTMENTS',\n            doctorsAppointmentCount: {},\n            categoriesAppointmentCount: {},\n            blockedCalendar: [],\n            showCalendarEvents: true,\n            showAppointments: true,\n            doctorTiming: {},\n            ...getCalendarSettings()\n        }\n        ;\n        this.onSelectSlot = this.onSelectSlot.bind(this);\n        this.onSelectEvent = this.onSelectEvent.bind(this);\n        this.moveEvent = this.moveEvent.bind(this)\n        this.resizeEvent = this.resizeEvent.bind(this);\n        this.loadDoctors = this.loadDoctors.bind(this);\n        this.eventStyleGetter = this.eventStyleGetter.bind(this);\n        this.loadCalendarTimings = this.loadCalendarTimings.bind(this);\n        this.loadCalendarTimings()\n    }\n\n    componentDidMount() {\n        this.appointmentList(moment().startOf('day'), moment().endOf('day'));\n        this.loadDoctors();\n        loadAppointmentCategories(this);\n    }\n\n    changeCalendarType = (value) => {\n        let that = this;\n        this.setState({\n            calendarType: value,\n            selectedDoctor: 'ALL',\n            selectedCategory: 'ALL',\n            filterType: 'DOCTOR',\n        }, function () {\n            if (value == 'APPOINTMENTS') {\n                that.changeFilter('selectedDoctor', 'ALL');\n\n            } else if (value == 'AVAILABILITY') {\n                if (that.state.practice_doctors.length) {\n                    that.changeFilter('selectedDoctor', that.state.practice_doctors[0].id);\n                }\n            }\n        })\n    }\n\n    loadDoctors() {\n        let that = this;\n        that.setState({\n            doctorLoading: true\n        })\n        let successFn = function (data) {\n            let doctors = [];\n            let staff = [];\n            let doctor_object = {}\n            data.staff.forEach(function (usersdata) {\n                if (usersdata.role == DOCTORS_ROLE) {\n                    doctors.push(usersdata);\n                    doctor_object[usersdata.id] = usersdata;\n                } else {\n                    staff.push(usersdata);\n                }\n            });\n            that.setState({\n                practice_staff: staff,\n                practice_doctors: doctors,\n                doctors_object: doctor_object,\n                doctorLoading: false\n            })\n        }\n        let errorFn = function () {\n            that.setState({\n                doctorLoading: false\n            })\n        };\n        getAPI(interpolate(PRACTICESTAFF, [this.props.active_practiceId]), successFn, errorFn);\n    }\n\n    loadCalendarTimings() {\n        var that = this;\n        let successFn = function (data) {\n            let dataObject = {};\n            if (data.length)\n                dataObject = data[0];\n            let timing = {};\n            DAY_KEYS.forEach(function (dayKey) {\n                timing[dayKey] = {};\n                if (dataObject.visting_hour_same_week) {\n                    timing[dayKey].startTime = moment(dataObject.first_start_time, 'HH:mm:ss');\n                    timing[dayKey].endTime = moment(dataObject.second_end_time, 'HH:mm:ss');\n                    if (dataObject.is_two_sessions) {\n                        timing[dayKey].lunch = true;\n                        timing[dayKey].lunchStartTime = moment(dataObject.first_end_time, 'HH:mm:ss');\n                        timing[dayKey].lunchEndTime = moment(dataObject.second_start_time, 'HH:mm:ss');\n                    } else {\n                        timing[dayKey].lunch = false\n                    }\n                } else if (dataObject[dayKey]) {\n                    timing[dayKey].startTime = moment(dataObject[`first_start_time_${dayKey}`], 'HH:mm:ss');\n                    timing[dayKey].endTime = moment(dataObject[`second_end_time_${dayKey}`], 'HH:mm:ss');\n                    if (dataObject[`is_two_sessions_${dayKey}`]) {\n                        timing[dayKey].lunch = true;\n                        timing[dayKey].lunchStartTime = moment(dataObject[`first_end_time_${dayKey}`], 'HH:mm:ss');\n                        timing[dayKey].lunchEndTime = moment(dataObject[`second_start_time_${dayKey}`], 'HH:mm:ss');\n                    } else {\n                        timing[dayKey].lunch = false\n                    }\n                } else {\n                    timing[dayKey] = null\n                }\n            });\n            that.setState({\n                calendarTimings: {\n                    ...dataObject,\n                },\n                timing: {...timing},\n                loading: false\n            });\n        };\n        let errorFn = function () {\n            that.setState({\n                loading: false\n            })\n        };\n        getAPI(interpolate(CALENDER_SETTINGS, [this.props.active_practiceId]), successFn, errorFn);\n    }\n\n    /***\n     * Calenders Functions\n     * */\n\n\n    moveEvent({event, start, end, isAllDay: droppedOnAllDaySlot}) {\n        if (event.appointment.status != SCHEDULE_STATUS) {\n            displayMessage(WARNING_MSG_TYPE, \"Action Not Allowed\");\n            return true;\n        }\n        const {events} = this.state;\n        const idx = events.indexOf(event)\n        let allDay = event.allDay\n        let that = this;\n        if (!event.allDay && droppedOnAllDaySlot) {\n            allDay = true\n        } else if (event.allDay && !droppedOnAllDaySlot) {\n            allDay = false\n        }\n        const updatedEvent = {...event, start, end, allDay}\n        const nextEvents = [...events]\n        let changedEvent = {\n            // \"id\": event.id,\n            \"schedule_at\": moment(start).format(),\n            \"slot\": parseInt((end - start) / 60000)\n        };\n        let successFn = function (data) {\n            displayMessage(SUCCESS_MSG_TYPE, \"time changed\");\n            nextEvents.splice(idx, 1, updatedEvent);\n            that.setState({\n                events: nextEvents,\n            }, function () {\n                that.refreshFilterList();\n            })\n        }\n        let errorFn = function () {\n        }\n        confirm({\n            title: 'Are you sure to change the time of this appointment?',\n            // content: 'Some descriptions',\n            onOk() {\n                putAPI(interpolate(APPOINTMENT_API, [event.id]), changedEvent, successFn, errorFn);\n            },\n            onCancel() {\n            },\n        });\n\n    }\n\n    resizeEvent = ({event, start, end}) => {\n        if (event.appointment.status != SCHEDULE_STATUS) {\n            displayMessage(WARNING_MSG_TYPE, \"Action Not Allowed\");\n            return true;\n        }\n        const {events} = this.state\n        let changedEvent = {};\n        let that = this;\n        const nextEvents = [];\n        events.forEach((existingEvent) => {\n            if (existingEvent.id == event.id) {\n                changedEvent = {\n                    // \"id\": event.id,\n                    \"schedule_at\": moment(start).format(),\n                    \"slot\": parseInt((end - start) / 60000)\n                };\n            }\n        })\n\n        let successFn = function (data) {\n            displayMessage(SUCCESS_MSG_TYPE, \"time changed\");\n            events.forEach((existingEvent) => {\n                nextEvents.push(existingEvent.id == event.id\n                    ? {...existingEvent, start, end}\n                    : existingEvent)\n            });\n            that.setState({\n                events: nextEvents,\n            }, function () {\n                that.refreshFilterList();\n            })\n        }\n        let errorFn = function () {\n        }\n        confirm({\n            title: 'Are you sure to change the time of this appointment?',\n            // content: 'Some descriptions',\n            onOk() {\n                putAPI(interpolate(APPOINTMENT_API, [event.id]), changedEvent, successFn, errorFn);\n            },\n            onCancel() {\n                // console.log('Cancel');\n            },\n        });\n    }\n\n\n    onSelectSlot(value) {\n        let time = moment(value.start).format();\n        if (value.action == \"doubleClick\") {\n            this.setState({\n                startTime: time,\n                redirect: true\n            });\n            this.props.history.push('/calendar/create-appointment')\n        }\n    }\n\n\n    onSelectEvent(event, e) {\n        this.setState({\n            visiblePopover: true\n        })\n        this.props.history.push(\"/patients/appointments/\" + event.id)\n    }\n\n\n    /***\n     * List and style settings\n     * */\n\n\n    appointmentList(start, end) {\n        let that = this;\n        that.setState({\n            loading: true\n        });\n        let successFn = function (data) {\n            that.setState(function (prevState) {\n                let previousEvent = prevState.events;\n                let newEvents = [];\n                let filteredEvent = [];\n                let doctorsAppointmentCount = {};\n                let categoriesAppointmentCount = {};\n                // newEvents.concat(previousEvent);\n                data.forEach(function (appointment) {\n                    let endtime = new moment(appointment.schedule_at).add(appointment.slot, 'minutes')\n                    let event = {\n                        appointment: appointment,\n                        start: new Date(moment(appointment.schedule_at)),\n                        end: new Date(endtime),\n                        title: appointment.patient.user.first_name,\n                        id: appointment.id,\n                        doctor: appointment.doctor,\n                        loading: false\n                    };\n\n                    if (doctorsAppointmentCount['ALL']) {\n                        doctorsAppointmentCount['ALL'].ALL += 1\n                        if (appointment.status == CANCELLED_STATUS) {\n                            doctorsAppointmentCount['ALL'].CANCELLED += 1;\n                        }\n                    } else {\n                        doctorsAppointmentCount['ALL'] = {}\n                        doctorsAppointmentCount['ALL'].ALL = 1;\n                        if (appointment.status == CANCELLED_STATUS) {\n                            doctorsAppointmentCount['ALL'].CANCELLED = 1;\n                        } else {\n                            doctorsAppointmentCount['ALL'].CANCELLED = 0;\n                        }\n                    }\n                    if (appointment.doctor && doctorsAppointmentCount[appointment.doctor]) {\n                        doctorsAppointmentCount[appointment.doctor].ALL += 1\n                        if (appointment.status == CANCELLED_STATUS) {\n                            doctorsAppointmentCount[appointment.doctor].CANCELLED += 1;\n                        }\n                    } else {\n                        doctorsAppointmentCount[appointment.doctor] = {}\n                        doctorsAppointmentCount[appointment.doctor].ALL = 1;\n                        if (appointment.status == CANCELLED_STATUS) {\n                            doctorsAppointmentCount[appointment.doctor].CANCELLED = 1;\n                        } else {\n                            doctorsAppointmentCount[appointment.doctor].CANCELLED = 0;\n                        }\n                    }\n                    if (appointment.category && doctorsAppointmentCount[appointment.category]) {\n                        categoriesAppointmentCount[appointment.category] += 1\n                    } else {\n                        categoriesAppointmentCount[appointment.category] = 1;\n                    }\n                    newEvents.push(event);\n                    if (!prevState.filterCancelledAppointment && event.appointment.status == CANCELLED_STATUS) {\n                        return true;\n                    }\n                    if ((prevState.filterType == 'DOCTOR' && prevState.selectedDoctor == 'ALL') || (prevState.filterType == 'CATEGORY' && prevState.selectedCategory == 'ALL')) {\n                        filteredEvent.push(event)\n                    } else if (prevState.filterType == 'DOCTOR' && event.doctor == prevState.selectedDoctor) {\n                        filteredEvent.push(event)\n                    } else if (prevState.filterType == 'CATEGORY' && event.appointment.category == prevState.selectedCategory) {\n                        filteredEvent.push(event)\n                    }\n\n                });\n                return {\n                    events: newEvents,\n                    filteredEvent: filteredEvent,\n                    doctorsAppointmentCount: {...doctorsAppointmentCount},\n                    categoriesAppointmentCount: {...categoriesAppointmentCount, 'ALL': data.length},\n                    appointments: data,\n                    loading: false\n                }\n            });\n        }\n        let errorFn = function () {\n            that.setState({\n                loading: false\n            })\n        }\n        getAPI(interpolate(APPOINTMENT_PERPRACTICE_API, [this.props.active_practiceId]), successFn, errorFn, {\n            start: start.format('YYYY-MM-DD'),\n            end: end.format('YYYY-MM-DD')\n        });\n        this.blockedCalendarTiming(start, end)\n    }\n\n    blockedCalendarTiming = (start, end) => {\n        let that = this;\n        let successFn = function (data) {\n            that.setState({\n                blockedCalendar: data\n            })\n        }\n        let errorFn = function () {\n\n        }\n        getAPI(BLOCK_CALENDAR, successFn, errorFn, {\n            practice: this.props.active_practiceId,\n            cal_fdate: start.format(),\n            cal_tdate: end.format()\n        })\n    };\n\n    eventStyleGetter(event, start, end, isSelected) {\n        let doctor = event.doctor;\n        let category = event.appointment.category;\n        let color_object = null;\n        var style = {\n            borderRadius: '0px',\n            opacity: 0.8,\n            border: '5px',\n            color: 'white',\n            display: 'block'\n        };\n        if (event.appointment.status == CANCELLED_STATUS) {\n            style.backgroundColor = '#aaa';\n            style.textDecoration = 'line-through';\n        } else {\n            if (this.state.filterType == 'DOCTOR') {\n                if (doctor && this.state.doctors_object && this.state.doctors_object[doctor]) {\n                    color_object = this.state.doctors_object[doctor].calendar_colour;\n                } else {\n                    color_object = 'black';\n                }\n            } else if (this.state.filterType == 'CATEGORY') {\n                if (category && this.state.categories_object && this.state.categories_object[category]) {\n                    color_object = '#' + this.state.categories_object[category].calendar_colour;\n                } else {\n                    color_object = 'black';\n                }\n            }\n            style.backgroundColor = color_object;\n        }\n        return {\n            style: style\n        };\n    }\n\n    onRangeChange = (e) => {\n        if (e.start && e.end) {\n            this.appointmentList(moment(e.start), moment(e.end));\n            if (moment(e.start).date() == 1) {\n                this.setState({\n                    selectedDate: moment(e.start)\n                })\n            } else {\n                let newDate = moment(e.start);\n                this.setState({\n                    selectedDate: newDate.month(newDate.month() + 1).date(1)\n                })\n            }\n        } else if (e.length) {\n            if (e.length == 7) {\n                this.appointmentList(moment(e[0]).subtract(1, 'day'), moment(e[e.length - 1]).subtract(1, 'day'));\n            } else {\n                this.appointmentList(moment(e[0]), moment(e[e.length - 1]));\n            }\n            this.setState({\n                selectedDate: moment(e[0])\n            });\n        }\n    }\n    onSelectedDateChange = (e) => {\n        let that = this;\n        this.setState({\n            selectedDate: moment(e)\n        },function(){\n            that.appointmentList(moment(e).startOf('day'),moment(e).endOf('day'));\n        });\n    }\n    setFilterType = (e) => {\n        let that = this;\n        this.setState({\n            filterType: e.key,\n            selectedDoctor: 'ALL',\n            selectedCategory: 'ALL'\n        }, function () {\n            if (e.key == 'DOCTOR') {\n                that.changeFilter('selectedDoctor', 'ALL')\n            } else if (e.key == 'CATEGORY') {\n                that.changeFilter('selectedCategory', 'ALL')\n            }\n        })\n    }\n    setFilter = (type, value) => {\n        let that = this;\n        this.setState({\n            [type]: value\n        }, function () {\n            saveCalendarSettings(type, value);\n            that.changeFilter('tempKey', 'ALL')\n        })\n    }\n    refreshFilterList = () => {\n        let stateValues = this.state;\n        if (stateValues.filterType == 'DOCTOR') {\n            this.changeFilter('selectedDoctor', stateValues['selectedDoctor'])\n        } else if (stateValues.filterType == 'CATEGORY') {\n            this.changeFilter('selectedCategory', stateValues['selectedCategory'])\n        }\n    }\n    changeFilter = (type, value) => {\n        if (type == \"selectedDoctor\" && value != 'ALL') {\n            this.loadDoctorTiming(value)\n        }\n        this.setState(function (prevState) {\n            let filteredEvent = [];\n            prevState.events.forEach(function (event) {\n                if (!prevState.filterCancelledAppointment && event.appointment.status == CANCELLED_STATUS) {\n                    return true;\n                }\n                if (value == 'ALL') {\n                    filteredEvent.push(event)\n                } else if (type == \"selectedDoctor\" && event.doctor == value) {\n                    filteredEvent.push(event)\n                } else if (type == \"selectedCategory\" && event.appointment.category == value) {\n                    filteredEvent.push(event)\n                }\n            })\n            return {\n                [type]: value,\n                filteredEvent: filteredEvent\n            }\n        })\n    };\n\n    changeState = (type, value) => {\n        this.setState({\n            [type]: value\n        }, function () {\n            saveCalendarSettings(type, value)\n        })\n    }\n    loadDoctorTiming = (id) => {\n        let that = this;\n        let successFn = function (data) {\n            let dataObject = {};\n            if (data.length)\n                dataObject = data[0];\n            let timing = {};\n            DAY_KEYS.forEach(function (dayKey) {\n                timing[dayKey] = {};\n                if (dataObject.visting_hour_same_week) {\n                    timing[dayKey].startTime = moment(dataObject.first_start_time, 'HH:mm:ss');\n                    timing[dayKey].endTime = moment(dataObject.second_end_time, 'HH:mm:ss');\n                    if (dataObject.is_two_sessions) {\n                        timing[dayKey].lunch = true;\n                        timing[dayKey].lunchStartTime = moment(dataObject.first_end_time, 'HH:mm:ss');\n                        timing[dayKey].lunchEndTime = moment(dataObject.second_start_time, 'HH:mm:ss');\n                    } else {\n                        timing[dayKey].lunch = false\n                    }\n                } else if (dataObject[dayKey]) {\n                    timing[dayKey].startTime = moment(dataObject[`first_start_time_${dayKey}`], 'HH:mm:ss');\n                    timing[dayKey].endTime = moment(dataObject[`second_end_time_${dayKey}`], 'HH:mm:ss');\n                    if (dataObject[`is_two_sessions_${dayKey}`]) {\n                        timing[dayKey].lunch = true;\n                        timing[dayKey].lunchStartTime = moment(dataObject[`first_end_time_${dayKey}`], 'HH:mm:ss');\n                        timing[dayKey].lunchEndTime = moment(dataObject[`second_start_time_${dayKey}`], 'HH:mm:ss');\n                    } else {\n                        timing[dayKey].lunch = false\n                    }\n                } else {\n                    timing[dayKey] = null\n                }\n            });\n            that.setState(function (prevState) {\n                return {doctorTiming: {...prevState.doctorTiming, [id]: {...timing}}}\n            });\n        }\n        let errorFn = function () {\n\n        };\n        getAPI(interpolate(DOCTOR_VISIT_TIMING_API, [this.props.active_practiceId]), successFn, errorFn, {\n            doctor: id\n        });\n    }\n\n    render() {\n        let that = this;\n        let {startTime} = this.state;\n        // let startTime = null;\n        let endTime = null;\n        if (this.state.calendarTimings) {\n            // console.log(new Date(new moment(this.state.calendarTimings.start_time, 'HH:mm:ss')));\n            startTime = new Date(new moment(this.state.calendarTimings.start_time, 'HH:mm:ss'));\n            endTime = new Date(new moment(this.state.calendarTimings.end_time, 'HH:mm:ss'))\n\n        }\n        let summaryEvents = [];\n        // if(this.state.calendarType==)\n        return (<Content className=\"main-container\">\n                <div style={{padding: '5px'}}>\n                    <Switch>\n\n                        <Route exact path=\"/calendar/create-appointment\"\n                               render={(route) => (this.props.activePracticePermissions.AddAppointment || this.props.allowAllPermissions ?\n                                   <CreateAppointment {...this.state} {...this.props} {...route}\n                                                      startTime={this.state.startTime}/> :\n                                   <PermissionDenied/>)}/>\n\n                        <Route exact path=\"/calendar/:appointmentid/edit-appointment\"\n                               render={(route) => (this.props.activePracticePermissions.EditAppointment || this.props.allowAllPermissions ?\n                                   <CreateAppointment {...this.state} {...this.props} {...route}\n                                                      startTime={this.state.startTime}/> :\n                                   <PermissionDenied/>)}/>\n\n                        <Route>\n\n                            <div style={{backgroundColor: '#fff', padding: '5px 10px'}}>\n                                <Row gutter={16}>\n                                    <Col span={3}>\n\n                                        <DatePicker onChange={this.onSelectedDateChange}\n                                                    value={this.state.selectedDate}\n                                                    format={\"DD-MM-YYYY\"} style={{margin: 5}} allowClear={false}/>\n                                        {this.state.calendarType == 'APPOINTMENTS' ?\n                                            <div>\n                                                {that.props.activePracticePermissions.BlockCalendar || that.props.allowAllPermissions ?\n                                                    <Button block style={{margin: 5}}>\n                                                        <Link to={\"/calendar/blockcalendar\"}>\n                                                            <Icon type=\"stop\"/> Block Calendar\n                                                        </Link>\n                                                    </Button> : null}\n                                                <Dropdown trigger={'click'} overlay={\n                                                    <Menu onClick={this.setFilterType}>\n                                                        <Menu.Item key={\"DOCTOR\"}>\n                                                            DOCTOR\n                                                        </Menu.Item>\n                                                        <Menu.Item key={\"CATEGORY\"}>\n                                                            CATEGORY\n                                                        </Menu.Item>\n                                                    </Menu>\n                                                }>\n                                                    <Button block style={{margin: 5}}>\n                                                        {this.state.filterType} <Icon type={\"caret-down\"}/>\n                                                    </Button>\n                                                </Dropdown>\n                                            </div> : null}\n                                        <Spin spinning={this.state.doctorLoading}>\n                                            {this.state.filterType == 'DOCTOR' ?\n                                                <Menu selectedKeys={[this.state.selectedDoctor]}\n                                                      size={'small'}\n                                                      onClick={(e) => this.changeFilter('selectedDoctor', e.key)}>\n                                                    {this.state.calendarType == 'APPOINTMENTS' ?\n                                                        <Menu.Item key={\"ALL\"} style={{\n                                                            marginBottom: 2,\n                                                            textOverflow: \"ellipsis\",\n                                                            borderLeft: '5px solid black',\n                                                            borderRight: 'none'\n                                                        }}>\n                                                            <span>({this.state.doctorsAppointmentCount['ALL'] ? (!this.state.filterCancelledAppointment ? (this.state.doctorsAppointmentCount['ALL'].ALL - this.state.doctorsAppointmentCount['ALL'].CANCELLED) : this.state.doctorsAppointmentCount['ALL'].ALL) : 0}) All Doctors</span>\n                                                        </Menu.Item> : null}\n                                                    {this.state.practice_doctors.map(item =>\n                                                        <Menu.Item key={item.id} style={{\n                                                            textOverflow: \"ellipsis\",\n                                                            borderRight: 'none',\n                                                            borderLeft: '5px solid ' + item.calendar_colour,\n                                                            backgroundColor: this.state.selectedDoctor == item.id ? item.calendar_colour : 'inherit',\n                                                            color: this.state.selectedDoctor == item.id ? 'white' : 'inherit',\n                                                            fontWeight: this.state.selectedDoctor == item.id ? 'bold' : 'inherit',\n                                                        }}>\n                                                            <span>({this.state.doctorsAppointmentCount[item.id] ? (!this.state.filterCancelledAppointment ? (this.state.doctorsAppointmentCount[item.id].ALL - this.state.doctorsAppointmentCount[item.id].CANCELLED) : this.state.doctorsAppointmentCount[item.id].ALL) : 0}) {item.user.first_name}</span>\n                                                        </Menu.Item>\n                                                    )}\n                                                </Menu>\n                                                : <Menu selectedKeys={[this.state.selectedCategory]}\n                                                        size={'small'}\n                                                        onClick={(e) => this.changeFilter('selectedCategory', e.key)}>\n                                                    <Menu.Item key={\"ALL\"} style={{\n                                                        marginBottom: 2,\n                                                        textOverflow: \"ellipsis\",\n                                                        borderLeft: '5px solid black',\n                                                        borderRight: 'none'\n                                                    }}>\n                                                        <span>({this.state.categoriesAppointmentCount['ALL'] ? this.state.categoriesAppointmentCount['ALL'] : 0}) All Categories</span>\n                                                    </Menu.Item>\n                                                    {this.state.practice_categories.map(item =>\n                                                        <Menu.Item key={item.id} style={{\n                                                            textOverflow: \"ellipsis\",\n                                                            borderRight: 'none',\n                                                            borderLeft: '5px solid #' + item.calendar_colour,\n                                                            backgroundColor: this.state.selectedCategory == item.id ? '#' + item.calendar_colour : 'inherit',\n                                                            color: this.state.selectedCategory == item.id ? 'white' : 'inherit',\n                                                            fontWeight: this.state.selectedCategory == item.id ? 'bold' : 'inherit',\n                                                        }}>\n                                                            <span>({this.state.categoriesAppointmentCount[item.id] ? this.state.categoriesAppointmentCount[item.id] : 0}) {item.name}</span>\n                                                        </Menu.Item>\n                                                    )}\n                                                </Menu>}\n                                            <div style={{marginTop: 16}}>\n                                                <Radio.Group size=\"small\" checked={this.state.calendarType}\n                                                             defaultValue={this.state.calendarType}\n                                                             buttonStyle=\"solid\"\n                                                             onChange={(e) => this.changeCalendarType(e.target.value)}>\n                                                    <Radio.Button value={\"APPOINTMENTS\"}>\n                                                        <small>Appointments</small>\n                                                    </Radio.Button>\n                                                    <Radio.Button value={\"AVAILABILITY\"}>\n                                                        <small>Availability</small>\n                                                    </Radio.Button>\n                                                </Radio.Group>\n                                            </div>\n                                            <div style={{position: 'fixed', bottom: 10, zIndex: 9}}>\n                                                {this.state.openMorePanel ?\n                                                    <div style={{\n                                                        // width: 100,\n                                                        boxShadow: '0 2px 4px #111',\n                                                        border: '1px solid #bbb',\n                                                        borderRadius: 2,\n                                                        padding: 5,\n                                                        backgroundColor: 'white'\n                                                    }}>\n                                                        <ul style={{listStyle: 'none', paddingInlineStart: 0}}>\n                                                            <li>\n                                                                <Checkbox checked={this.state.showCalendarEvents}\n                                                                          onChange={(e) => that.changeState('showCalendarEvents', e.target.checked)}>\n                                                                    <small>Events</small>\n                                                                </Checkbox>\n                                                            </li>\n                                                            <li>\n                                                                <Checkbox checked={this.state.showAppointments}\n                                                                          onChange={(e) => that.changeState('showAppointments', e.target.checked)}>\n                                                                    <small>Appointments</small>\n                                                                </Checkbox>\n                                                            </li>\n                                                            <li>\n                                                                <Checkbox checked={this.state.show24HourCalendar}\n                                                                          onChange={(e) => that.changeState('show24HourCalendar', e.target.checked)}>\n                                                                    <small>24 Hours</small>\n                                                                </Checkbox>\n                                                            </li>\n                                                            <li>\n                                                                <Checkbox\n                                                                    checked={this.state.filterCancelledAppointment}\n                                                                    onChange={(e) => that.setFilter('filterCancelledAppointment', e.target.checked)}>\n                                                                    <small>Cancellled Appointment</small>\n                                                                </Checkbox>\n                                                            </li>\n                                                            <li>\n                                                                <Divider/>\n                                                            </li>\n                                                            <li>\n                                                                <Link to={\"/settings/clinics-staff#staff\"}>\n                                                                    <small>Add Doctor</small>\n                                                                </Link>\n                                                            </li>\n                                                            <li>\n                                                                <Link to={\"/settings/calendarsettings#timings\"}>\n                                                                    <small> Customize Calendar</small>\n                                                                </Link>\n                                                            </li>\n                                                            <li>\n                                                                <a>\n                                                                    <small>Resync</small>\n                                                                </a>\n                                                                <Button\n                                                                    onClick={() => this.changeState('openMorePanel', false)}\n                                                                    shape={\"circle\"}\n                                                                    size={\"small\"}\n                                                                    type={\"danger\"}\n                                                                    icon={\"close\"}\n                                                                    style={{float: 'right'}}/>\n                                                            </li>\n                                                        </ul>\n\n                                                    </div> :\n                                                    <a onClick={() => this.changeState('openMorePanel', true)}>\n                                                        More <Icon type={\"caret-down\"}/>\n                                                    </a>}\n                                            </div>\n                                        </Spin>\n                                    </Col>\n                                    {this.state.calendarType == 'APPOINTMENTS' ?\n                                        <div>\n                                            <Col span={16}>\n                                                <Spin size=\"large\" spinning={this.state.loading}>\n                                                    <DragAndDropCalendar\n                                                        key={'APPOINTMENTS'}\n                                                        defaultDate={new Date()}\n                                                        localizer={localizer}\n                                                        defaultView=\"day\"\n                                                        step={10}\n                                                        timeslots={1}\n                                                        truncateEvents={false}\n                                                        events={this.state.showAppointments ? this.state.filteredEvent : []}\n\n                                                        onEventDrop={this.moveEvent}\n                                                        onEventResize={this.resizeEvent}\n                                                        resizable\n                                                        selectable\n                                                        popup={this.onSelectEvent}\n                                                        onSelectSlot={this.onSelectSlot}\n                                                        // onSelectEvent={this.onSelectEvent}\n                                                        views={{month: true, week: MyWeek, day: true, agenda: true}}\n                                                        style={{height: \"calc(100vh - 85px)\"}}\n                                                        eventPropGetter={(this.eventStyleGetter)}\n                                                        date={new Date(this.state.selectedDate.format())}\n                                                        onRangeChange={this.onRangeChange}\n                                                        components={{\n                                                            event: function (option) {\n                                                                return <EventComponent {...option} {...that.props}/>\n                                                            },\n                                                            timeSlotWrapper: function (options) {\n                                                                return <TimeSlotWrapper {...options}\n                                                                                        key={options.value.toString()}\n                                                                                        blockedCalendar={that.state.blockedCalendar}\n                                                                                        calendarTimings={that.state.timing}\n                                                                                        doctorTimings={that.state.doctorTiming[that.state.selectedDoctor]}\n                                                                                        filterType={that.state.filterType}\n                                                                                        selectedDoctor={that.state.selectedDoctor}\n                                                                                        showCalendarEvents={that.state.showCalendarEvents}/>\n                                                            },\n                                                        }}/>\n\n                                                </Spin>\n                                            </Col>\n                                            <Col span={5}>\n                                                <CalendarRightPanel {...this.props} {...this.state}\n                                                                    selectedDate={this.state.selectedDate}\n                                                                    key={moment(this.state.selectedDate).format('l')}/>\n                                            </Col>\n                                        </div>\n                                        :\n                                        <Col span={21}>\n                                            <DragAndDropCalendar\n                                                key={'AVAILABILITY'}\n                                                defaultDate={new Date()}\n                                                localizer={localizer}\n                                                defaultView=\"day\"\n                                                step={10}\n                                                timeslots={1}\n                                                truncateEvents={false}\n                                                events={this.state.showAppointments ? this.state.filteredEvent : []}\n                                                onEventDrop={this.moveEvent}\n                                                onEventResize={this.resizeEvent}\n                                                resizable\n                                                selectable\n                                                popup={this.onSelectEvent}\n                                                onSelectSlot={this.onSelectSlot}\n                                                // onSelectEvent={this.onSelectEvent}\n                                                views={{week: true, day: true}}\n                                                style={{height: \"calc(100vh - 85px)\"}}\n                                                eventPropGetter={(this.eventStyleGetter)}\n                                                date={new Date(this.state.selectedDate.format())}\n                                                onRangeChange={this.onRangeChange}\n                                                components={{\n                                                    event: function (option) {\n                                                        return <EventComponent {...option} {...that.props}/>\n                                                    },\n                                                    timeSlotWrapper: function (options) {\n                                                        return <TimeSlotWrapper {...options}\n                                                                                key={options.value.toString()}\n                                                                                blockedCalendar={that.state.blockedCalendar}\n                                                                                calendarTimings={that.state.timing}\n                                                                                doctorTimings={that.state.doctorTiming[that.state.selectedDoctor]}\n                                                                                filterType={that.state.filterType}\n                                                                                selectedDoctor={that.state.selectedDoctor}\n                                                                                showCalendarEvents={that.state.showCalendarEvents}/>\n                                                    },\n                                                }}/>\n                                        </Col>\n                                    }\n                                </Row>\n                            </div>\n                        </Route>\n\n                    </Switch>\n                </div>\n            </Content>\n        );\n    }\n}\n\nexport default App;\n\n\nclass MyWeek\n    extends React\n        .Component {\n    render() {\n        let {date} = this.props\n        let range = MyWeek.range(date)\n\n        return <TimeGrid {...this.props} range={range} eventOffset={15}/>\n    }\n}\n\nMyWeek.range = date => {\n    let start = dates.add(date, -1, 'day')\n    let end = dates.add(start, 6, 'day')\n    let current = start\n    let range = []\n    while (dates.lte(current, end, 'day')) {\n        range.push(current)\n        current = dates.add(current, 1, 'day')\n    }\n    return range\n}\n\nMyWeek.navigate = (date, action) => {\n    switch (action) {\n        case Navigate.PREVIOUS:\n            return dates.add(date, -3, 'day')\n\n        case Navigate.NEXT:\n            return dates.add(date, 3, 'day')\n\n        default:\n            return date\n    }\n}\n\nMyWeek.title = date => {\n    return ` ${date.toLocaleDateString()}`\n}\n\n\nfunction MonthEventWrapper(props) {\n    return props.children;\n}\n"],"sourceRoot":""}