{"version":3,"sources":["app/components/inventory/vendor/AddVendor.js","app/components/inventory/vendor/VendorList.js","app/components/inventory/expenses/AddExpenses.js","app/components/inventory/expenses/ExpensesList.js","app/components/inventory/manufacture/AddManufacture.js","app/components/inventory/manufacture/ManufactureList.js","app/components/inventory/labs/AddLab.js","app/components/inventory/labs/LabList.js","app/components/inventory/activities/ActivityList.js","app/components/inventory/inventoryItem/AddorEditInventoryItem.js","app/components/inventory/inventoryItem/AddOrConsumeStock.js","app/components/inventory/inventoryItem/InventoryItemList.js","app/components/inventory/InventoryHome.js"],"names":["AddVendor","props","changeRedirect","redirectVar","state","redirect","setState","editData","this","match","params","id","loadData","that","getAPI","interpolate","SINGLE_VENDOR_API","data","editformProp","fields","label","key","initialValue","name","type","INPUT_FIELD","required","description","successFn","displayMessage","SUCCESS_MSG_TYPE","console","log","errorFn","action","method","TestFormLayout","create","DynamicFieldsForm","formProp","VENDOR_API","active_practiceId","defaultValues","exact","path","render","route","title","to","React","Component","VendorList","vendors","bind","value","reqData","putAPI","vendorsColoumns","dataIndex","record","onConfirm","deleteVendor","okText","cancelText","disabled","activePracticePermissions","DeleteVendor","EditVendor","allowAllPermissions","PermissionDenied","extra","CustomizedTable","columns","dataSource","hideReport","ExportVendor","AddExpenses","loadExpensetypes","loadPaymentModes","loadVendors","PAYMENT_MODES","paymentModes","SINGLE_EXPENSES_API","EXPENSE_TYPE","expense_types","paymentModesOptions","forEach","drug","push","mode","expenseTypesOptions","vendorsOptions","expense_date","moment","DATE_PICKER","format","amount","NUMBER_FIELD","follow","SELECT_FIELD","options","expense_type","payment_mode","bank_name","TEXT_FIELD","minRows","maxRows","remark","EXPENSES_API","ExpensesList","changeExpenseFilters","loading","expenses","practice","selectedPaymentMode","selectedExpenseType","start","selectedStartDate","end","selectedEndDate","expenseTypes","subtract","loadExpenseTypes","deleted","deletedExpenses","deletedLoading","is_active","postAPI","showDeleted","expenseColoumns","export","text","EditExpenses","DeleteExpenses","deleteObject","gutter","style","marginBottom","span","textAlign","width","onChange","Option","map","item","AddManufacture","SINGLE_MANUFACTURER_API","MANUFACTURER_API","EditManufacturer","ManufactureList","manufactures","deleteManufacture","reqDate","manufactureColoumns","DeleteManufacturer","ExportManufacturer","AddLab","getPatientListData","PATIENTS_LIST","patientListData","patientOptions","length","job_no","doctor_name","status","due_date","patient","editBlogData","SINGLE_LAB_API","LAB_API","LabList","lab","ActivityList","activity","loadActivityLog","ACTIVITY_API","CheckboxGroup","Group","AddorEditInventoryItem","loadDrugType","DRUG_TYPE_API","drugTypeList","onChangeHandeler","e","setFormParams","handleSubmit","preventDefault","form","validateFields","err","formData","retail_without_tax","retail_price","net_price","undefined","editInventoryItem","SINGLE_INVENTORY_ITEM_API","INVENTORY_ITEM_API","changeNetPrice","getFieldsValue","setFields","setTimeout","values","retail_with_tax","totalTaxAmount","taxes","taxid","taxes_list","taxObj","tax_value","retailPrice","toFixed","manufacture_list","vendor_list","drugUnitList","productMargin","loadTaxes","loadManufactureList","loadVendorList","loadDrugUnit","loadProductMargin","PRODUCT_MARGIN","TAXES","prevState","totalTax","taxes_data","tax","item_type","DRUG_UNIT_API","taxesOption","manufacturerOption","manufacturer","vendorOption","vendor","getFieldDecorator","formItemLayout","labelCol","wrapperCol","onSubmit","Item","rules","message","REQUIRED_FIELD_MESSAGE","placeholder","code","manufacturerType","editPrescreption","manufacturer_extra","onClick","option","stocking_unit","re_order_level","className","editingProcedureData","margin","INVENTORY_ITEM_TYPE","DRUG","valuePropName","perscribe_this","drugType","drug_type_extra","drug_type","strength","drugUnit","unit_type_extra","stength_unit","instructions","SUPPLIES","EQUIPMENT","htmlType","history","goBack","Search","MonthPicker","TabPane","tableFormFields","_id","quantity","batch","AddOrConsumeStock","changeSupplierType","customSupplier","loadItemsList","page","recData","items","maintain_inventory","searchStrings","item_name","remove","k","newTableFormValues","tableFormValues","formValue","add","randId","Math","random","keyCode","itemObject","item_add_type","classType","inventory_item","batch_number","date","bill_number","bill_file","file","response","image_path","ADD_STOCK","expiry_date","unit_cost","total_cost","supplier","supplier_name","CONSUME_STOCK","type_of_consumption","isValid","BULK_STOCK_ENTRY","searchValues","filterValues","filteredItemOfGivenType","toString","toLowerCase","includes","filteredItems","storeValue","tempValues","setFieldsValue","item_type_stock","addItemThroughQR","loadingQr","qrSplitted","split","SEARCH_THROUGH_QR","randomId","getFieldValue","flag","row","fieldsToBeSet","qrValue","qr","setQrValue","target","maxQuantityforConsume","supplierList","loadSupplierList","loadInventoryItemList","SUPPLIER_API","recordId","newMaxQuantityforConsume","item_stock","stock","xs","sm","singleUploadprops","makeURL","FILE_UPLOAD_API","headers","authorization","info","success","error","consumeRow","concat","validateTrigger","min","itemStock","Date","changeMaxQuantityforConsume","max","spinning","onSearch","size","itemType","tab","backgroundColor","padding","itemLayout","results","renderItem","Meta","shape","icon","previous","next","TYPE_OF_CONSUMPTION","pagination","bordered","rowKey","offsetBottom","offset","reduce","total","InventoryItemList","changeFilter","changeInventoryFilters","inventoryItems","inventoryItemList","stockModalVisibility","itemTypeFilter","itemStockFilter","nextItemPage","showAddOrConsumeModal","setActionType","excelExport","pdfExport","current","reqParams","sort","ASCENDING_ORDER","on","filter_type","filterItemName","filterItemCode","item_Id","itemId","actionType","msg","startLoadingMessage","INVENTORY_ITEM_EXPORT","stopLoadingMessage","report_csv","window","open","BACKEND_BASE_URL","ERROR_MSG_TYPE","report_pdf","taxesdata","manufacturerData","vendorData","color","totalStock","currentDate","Number","isInteger","manufacturer_data","total_quantity","AddInventoryItem","AddInventoryStock","ConsumeInventoryStock","defaultValue","buttonStyle","Button","float","allowClear","a","b","parseInt","InfiniteFeedLoaderButton","loaderFunction","hidden","visible","onOk","onCancel","footer","Content","InventoryHome","minHeight","ViewVendor","ViewExpenses","ViewManufacturer","Labs","ViewActivities","ViewInventory"],"mappings":"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","file":"static/js/20.df50dff6.chunk.js","sourcesContent":["import {Card, Form, Row} from \"antd\";\nimport React from \"react\";\nimport {\n    INPUT_FIELD,\n    SUCCESS_MSG_TYPE,\n} from \"../../../constants/dataKeys\";\nimport DynamicFieldsForm from \"../../common/DynamicFieldsForm\";\nimport {displayMessage, getAPI, interpolate} from \"../../../utils/common\";\nimport {\n    SINGLE_VENDOR_API, VENDOR_API\n} from \"../../../constants/api\";\nimport {Route, Redirect} from \"react-router-dom\";\n\n\nexport default class AddVendor extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            editData: this.props.editData ? this.props.editData : null\n        }\n    }\n\n    changeRedirect = () => {\n        var redirectVar = this.state.redirect;\n        this.setState({\n            redirect: !redirectVar,\n        });\n    }\n\n    componentDidMount() {\n        if (this.props.match.params.id) {\n            if (!this.state.editData) {\n                this.loadData();\n            }\n        }\n    }\n\n    loadData() {\n        let that = this;\n        let successFn = function (data) {\n            that.setState({\n                editData: data,\n            })\n        }\n        let errorFn = function () {\n\n        }\n        getAPI(interpolate(SINGLE_VENDOR_API, [this.props.match.params.id]), successFn, errorFn);\n\n\n    }\n\n\n    render() {\n        let that = this;\n        const fields = [{\n            label: \"Name\",\n            key: \"name\",\n            initialValue: this.state.editData ? this.state.editData.name : null,\n            type: INPUT_FIELD,\n            required: true\n        }, {\n            label: \"Description\",\n            key: \"description\",\n            initialValue: this.state.editData ? this.state.editData.description : null,\n            type: INPUT_FIELD\n        }];\n\n\n        let editformProp;\n        if (this.state.editData) {\n            editformProp = {\n                successFn: function (data) {\n                    displayMessage(SUCCESS_MSG_TYPE, \"success\");\n                    that.props.loadData();\n                    console.log(data);\n                },\n                errorFn: function () {\n\n                },\n                action: interpolate(SINGLE_VENDOR_API, [this.props.match.params.id]),\n                method: \"put\",\n            }\n        }\n        const TestFormLayout = Form.create()(DynamicFieldsForm);\n\n        const formProp = {\n            successFn: function (data) {\n                displayMessage(SUCCESS_MSG_TYPE, \"success\");\n                that.props.loadData();\n                console.log(data);\n            },\n            errorFn: function () {\n\n            },\n            action: interpolate(VENDOR_API, [that.props.active_practiceId]),\n            method: \"post\",\n        }\n        const defaultValues = [{\"key\": \"practice\", \"value\": this.props.active_practiceId}];\n        return <Row>\n            <Card>\n                <Route exact path='/inventory/vendor/edit/:id'\n                       render={(route) => (this.props.match.params.id ?\n                           <TestFormLayout defaultValues={defaultValues} title=\"Edit Vendor\"\n                                           changeRedirect={this.changeRedirect} formProp={editformProp}\n                                           {...route}\n                                           fields={fields}/> : <Redirect to={'/inventory/vendor'}/>)}/>\n                <Route exact path='/inventory/vendor/add'\n                       render={(route) => <TestFormLayout title=\"Add Vendor\" changeRedirect={this.changeRedirect}\n                                                     {...route}\n                                                     formProp={formProp} fields={fields}/>}/>\n            </Card>\n            {this.state.redirect && <Redirect to={'/inventory/vendor'}/>}\n        </Row>\n\n    }\n}\n","import {Button, Card, Icon,Popconfirm,Divider} from \"antd\";\nimport React from \"react\";\nimport {getAPI, interpolate,putAPI} from \"../../../utils/common\";\nimport {VENDOR_API ,SINGLE_VENDOR_API}from \"../../../constants/api\";\nimport {Route, Switch} from \"react-router\";\nimport AddVendor from \"./AddVendor\";\nimport {Link} from \"react-router-dom\";\nimport CustomizedTable from \"../../common/CustomizedTable\";\nimport PermissionDenied from \"../../common/errors/PermissionDenied\";\n\nexport default class VendorList extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            active_practiceId: this.props.active_practiceId,\n            vendors: null\n        };\n        this.loadData = this.loadData.bind(this);\n    }\n\n    componentDidMount() {\n        this.loadData();\n    }\n\n    loadData() {\n        let that = this;\n        let successFn = function (data) {\n            that.setState({\n                vendors: data\n            })\n        }\n        let errorFn = function () {\n\n        }\n        getAPI(interpolate(VENDOR_API, [this.props.active_practiceId]), successFn, errorFn);\n    }\n    deleteVendor(value){\n        var that = this;\n        let reqData={...value, 'is_active':false}\n        console.log(\"is_active\",reqData);\n        let successFn = function (data) {\n            that.loadData();\n            console.log(\"Deleted\");\n        }\n        let errorFn = function () {\n        };\n        putAPI(interpolate(SINGLE_VENDOR_API, [value]),reqData, successFn, errorFn);\n    }\n    render() {\n        let that = this;\n        const vendorsColoumns = [{\n            title: 'Name',\n            key: 'name',\n            dataIndex: 'name'\n        }, {\n            title: 'Details',\n            key: 'details',\n            dataIndex: 'description'\n        }, {\n            title: 'Action',\n            render: function (record) {\n                return <div>\n                    <Link to={'/inventory/vendor/edit/' + record.id}>Edit</Link>\n                    <Divider type=\"vertical\"/>\n                    <Popconfirm title=\"Are you sure delete this item?\"\n                                onConfirm={() => that.deleteVendor(record.id)} okText=\"Yes\" cancelText=\"No\">\n                       <a disabled={!that.props.activePracticePermissions.DeleteVendor}>Delete</a>\n                    </Popconfirm>\n\n                </div>\n            }\n        }];\n        return <div><Switch>\n            <Route exact path='/inventory/vendor/add'\n                   render={(route) =>(that.props.activePracticePermissions.EditVendor || that.props.allowAllPermissions ? <AddVendor {...this.state} {...route} loadData={that.loadData}/>:<PermissionDenied/>)}/>\n            <Route exact path='/inventory/vendor/edit/:id'\n                   render={(route) =>(that.props.activePracticePermissions.EditVendor || that.props.allowAllPermissions ? <AddVendor {...this.state} {...route} loadData={that.loadData}/>:<PermissionDenied/>)}/>\n            <Card title=\"Vendors\" extra={(that.props.activePracticePermissions.EditVendor?<Link to={\"/inventory/vendor/add\"}> <Button type=\"primary\"><Icon\n                type=\"plus\"/> Add</Button></Link>:null)}>\n                <CustomizedTable columns={vendorsColoumns} dataSource={this.state.vendors}  hideReport={!that.props.activePracticePermissions.ExportVendor}/>\n            </Card>\n        </Switch>\n        </div>\n    }\n}\n","import {Card, Form, Row} from \"antd\";\nimport React from \"react\";\nimport {\n    DATE_PICKER,\n    INPUT_FIELD, NUMBER_FIELD,\n    SELECT_FIELD,\n    SUCCESS_MSG_TYPE,\n    TEXT_FIELD,\n} from \"../../../constants/dataKeys\";\nimport DynamicFieldsForm from \"../../common/DynamicFieldsForm\";\nimport {displayMessage, getAPI, interpolate} from \"../../../utils/common\";\nimport {EXPENSE_TYPE, EXPENSES_API, PAYMENT_MODES, SINGLE_EXPENSES_API, VENDOR_API} from \"../../../constants/api\";\nimport {Route} from \"react-router\";\nimport {Redirect} from \"react-router-dom\";\nimport moment from \"moment\";\n\n\nexport default class AddExpenses extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            editData: this.props.editData ? this.props.editData : null\n        }\n    }\n\n    changeRedirect() {\n        var redirectVar = this.state.redirect;\n        this.setState({\n            redirect: !redirectVar,\n        });\n\n    }\n\n    componentDidMount() {\n        if (this.props.match.params.id) {\n            if (!this.state.editData) {\n                this.loadData();\n            }\n        }\n        this.loadExpensetypes();\n        this.loadPaymentModes();\n        this.loadVendors();\n\n\n    }\n\n    loadPaymentModes() {\n        var that = this;\n        let successFn = function (data) {\n            console.log(\"get table\");\n            that.setState({\n                paymentModes: data,\n            })\n            console.log(\"payment mode\", that.state.paymentModes);\n        };\n        let errorFn = function () {\n        };\n        getAPI(interpolate(PAYMENT_MODES, [this.props.active_practiceId]), successFn, errorFn);\n    }\n\n    loadData() {\n        let that = this;\n        let successFn = function (data) {\n            that.setState({\n                editData: data,\n            })\n        }\n        let errorFn = function () {\n\n        }\n        getAPI(interpolate(SINGLE_EXPENSES_API, [this.props.match.params.id]), successFn, errorFn);\n    }\n\n    loadExpensetypes() {\n        var that = this;\n        let successFn = function (data) {\n            console.log(\"get table\");\n            that.setState({\n                expense_types: data,\n            })\n        };\n        let errorFn = function () {\n        };\n        getAPI(interpolate(EXPENSE_TYPE, [this.props.active_practiceId]), successFn, errorFn);\n    }\n\n    loadVendors() {\n        var that = this;\n        let successFn = function (data) {\n            console.log(\"get table\");\n            that.setState({\n                vendors: data,\n            })\n        };\n        let errorFn = function () {\n        };\n        getAPI(interpolate(VENDOR_API, [this.props.active_practiceId]), successFn, errorFn);\n    }\n\n\n    render() {\n        const paymentModesOptions = []\n        if (this.state.paymentModes) {\n            this.state.paymentModes.forEach(function (drug) {\n                paymentModesOptions.push({label: (drug.mode), value: drug.id});\n            })\n        }\n        ;\n        const expenseTypesOptions = []\n        if (this.state.expense_types) {\n            this.state.expense_types.forEach(function (drug) {\n                expenseTypesOptions.push({label: (drug.name), value: drug.id});\n            })\n        }\n        const vendorsOptions = []\n        if (this.state.vendors) {\n            this.state.vendors.forEach(function (drug) {\n                vendorsOptions.push({label: (drug.name), value: drug.id});\n            })\n        }\n        const fields = [{\n            label: \"Expense Date\",\n            key: \"expense_date\",\n            required: true,\n            initialValue: this.state.editData ? this.state.editData.expense_date : moment(),\n            type: DATE_PICKER,\n            format: \"YYYY-MM-DD\"\n        }, {\n            label: \"Amount\",\n            key: \"amount\",\n            required: true,\n            initialValue: this.state.editData ? this.state.editData.amount : null,\n            type: NUMBER_FIELD,\n            follow:\"INR\"\n        }, {\n            label: \"Vendor\",\n            key: \"vendor\",\n            type: SELECT_FIELD,\n            initialValue: this.state.editData ? this.state.editData.vendors : null,\n            options: vendorsOptions\n        }, {\n            label: \"Expense type\",\n            key: \"expense_type\",\n            type: SELECT_FIELD,\n            initialValue: this.state.editData ? this.state.editData.expense_type.id : null,\n            options: expenseTypesOptions\n        }, {\n            label: \"Payment Mode\",\n            key: \"payment_mode\",\n            type: SELECT_FIELD,\n            required: true,\n            initialValue: this.state.editData ? this.state.editData.payment_mode.id : null,\n            options: paymentModesOptions\n        }, {\n            label: \"Bank Name\",\n            key: 'bank_name',\n            type: INPUT_FIELD,\n            initialValue: this.state.editData ? this.state.editData.bank_name : null,\n        }, {\n            label: \"Remark\",\n            key: 'remark',\n            type: TEXT_FIELD,\n            minRows: 2,\n            maxRows: 6,\n            initialValue: this.state.editData ? this.state.editData.remark : null,\n        },];\n\n\n        let editformProp;\n        let that = this;\n        if (this.state.editData) {\n            editformProp = {\n                successFn: function (data) {\n                    displayMessage(SUCCESS_MSG_TYPE, \"success\");\n                    that.props.loadData();\n                    that.changeRedirect();\n                },\n                errorFn: function () {\n\n                },\n                action: interpolate(SINGLE_EXPENSES_API, [this.props.match.params.id]),\n                method: \"put\",\n\n            }\n        }\n        const TestFormLayout = Form.create()(DynamicFieldsForm);\n\n        const formProp = {\n            successFn: function (data) {\n                displayMessage(SUCCESS_MSG_TYPE, \"success\");\n                that.props.loadData();\n                that.changeRedirect();\n                console.log(data);\n            },\n            errorFn: function () {\n\n            },\n            action: EXPENSES_API,\n            method: \"post\",\n        }\n        const defaultValues = [{\"key\": \"practice\", \"value\": this.props.active_practiceId}];\n        return <Row>\n            <Card>\n                <Route exact path='/inventory/expenses/edit/:id'\n                       render={() => (this.props.match.params.id ?\n                           <TestFormLayout defaultValues={defaultValues} title=\"Edit Expense\"\n                                           changeRedirect={this.changeRedirect} formProp={editformProp}\n                                           fields={fields}/> : <Redirect to={'/inventory/expenses'}/>)}/>\n                <Route exact path='/inventory/expenses/add'\n                       render={() => <TestFormLayout title=\"Add Expenses\" changeRedirect={this.changeRedirect}\n                                                     formProp={formProp} fields={fields}\n                                                     defaultValues={defaultValues}/>}/>\n            </Card>\n            {this.state.redirect && <Redirect to={'/inventory/expenses'}/>}\n        </Row>\n\n    }\n}\n","import {Button, Card, Divider, Icon, Popconfirm, Row, Col, Select, DatePicker, Table} from \"antd\";\nimport React from \"react\";\nimport {getAPI, interpolate, postAPI} from \"../../../utils/common\";\nimport {EXPENSE_TYPE, EXPENSES_API, PAYMENT_MODES, SINGLE_EXPENSES_API} from \"../../../constants/api\";\nimport {Route, Switch} from \"react-router\";\nimport AddExpenses from \"./AddExpenses\";\nimport {Link} from \"react-router-dom\";\nimport moment from \"moment\";\nimport PermissionDenied from \"../../common/errors/PermissionDenied\";\n\nexport default class ExpensesList extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            active_practiceId: this.props.active_practiceId,\n            expenses: null,\n            expenseTypes: [],\n            loading: true,\n            paymentModes: [],\n            selectedExpenseType: null,\n            selectedPaymentMode: null,\n            selectedStartDate: moment().subtract(1, 'month'),\n            selectedEndDate: moment()\n        };\n        this.loadData = this.loadData.bind(this);\n    }\n\n    componentDidMount() {\n        this.loadExpenseTypes();\n        this.loadPaymentModes();\n        this.loadData();\n    }\n\n    loadExpenseTypes(deleted = false) {\n        var that = this;\n        let successFn = function (data) {\n            console.log(\"get table\");\n            if (deleted) {\n                that.setState({\n                    deletedExpenses: data,\n                    deletedLoading: false\n                })\n            } else {\n                that.setState({\n                    expenseTypes: data,\n                })\n            }\n        };\n        let errorFn = function () {\n        };\n        if (deleted) {\n            getAPI(interpolate(EXPENSE_TYPE, [this.props.active_practiceId]), successFn, errorFn, {deleted: true});\n        } else {\n            getAPI(interpolate(EXPENSE_TYPE, [this.props.active_practiceId]), successFn, errorFn);\n        }\n    }\n\n    loadPaymentModes() {\n        var that = this;\n        let successFn = function (data) {\n            console.log(\"get table\");\n            that.setState({\n                paymentModes: data,\n            })\n        };\n        let errorFn = function () {\n        };\n        getAPI(interpolate(PAYMENT_MODES, [this.props.active_practiceId]), successFn, errorFn);\n    }\n\n    changeExpenseFilters = (type, value) => {\n        let that = this;\n        this.setState({\n            [type]: value\n        }, function () {\n            that.loadData();\n        })\n    }\n    loadData = () => {\n        let that = this;\n        that.setState({\n            loading: true\n        })\n        let successFn = function (data) {\n            that.setState({\n                expenses: data,\n                loading: false\n            })\n            console.log(\"log data\", that.state.expenses)\n        }\n        let errorFn = function () {\n            that.setState({\n                loading: false\n            })\n\n        }\n        getAPI(EXPENSES_API, successFn, errorFn, {\n            practice:that.props.active_practiceId,\n            payment_mode: that.state.selectedPaymentMode,\n            expense_type: that.state.selectedExpenseType,\n            start: that.state.selectedStartDate.format(),\n            end: that.state.selectedEndDate.format(),\n        });\n    }\n\n    deleteObject(record, type) {\n        let that = this;\n        let reqData = record;\n        reqData.is_active = type;\n        let successFn = function (data) {\n            that.loadData();\n            if (that.state.showDeleted) {\n                that.loadData(true);\n            }\n        }\n        let errorFn = function () {\n        };\n        postAPI(interpolate(SINGLE_EXPENSES_API, [record.id]), reqData, successFn, errorFn)\n    }\n\n    render() {\n        let that = this;\n        const expenseColoumns = [{\n            title: 'Expense Date',\n            key: 'expense_date',\n            dataIndex: 'expense_date',\n            export: function (text) {\n                return moment(text).format('lll');\n            },\n            render: function (text) {\n                return moment(text).format('lll');\n            }\n        }, {\n            title: 'Expense Type',\n            key: 'expense_type',\n            dataIndex: 'expense_type.name',\n        }, {\n            title: 'Vendor',\n            key: 'vendor',\n            dataIndex: 'vendor.name'\n        }, {\n            title: 'Payment Mode',\n            key: 'payment_mode',\n            dataIndex: 'payment_mode.mode'\n        }, {\n            title: 'Amount',\n            key: 'amount',\n            dataIndex: 'amount'\n        }, {\n            title: 'Bank Name',\n            key: 'bank_name',\n            dataIndex: 'bank_name'\n        }, {\n            title: 'Remark',\n            key: 'remark',\n            dataIndex: 'remark'\n        }, {\n            title: 'Action',\n            render: function (record) {\n                return <div>\n                    {that.props.activePracticePermissions.EditExpenses || that.props.allowAllPermissions ?\n                        <Link to={'/inventory/expenses/edit/' + record.id}>Edit</Link> : null}\n                    <Divider type={\"vertical\"}/>\n                    {that.props.activePracticePermissions.DeleteExpenses || that.props.allowAllPermissions ?\n                        <Popconfirm title=\"Are you sure to delete this?\"\n                                    onConfirm={() => that.deleteObject(record, false)} okText=\"Yes\" cancelText=\"No\">\n                            <a>Delete</a>\n                        </Popconfirm> : null}\n                </div>\n            }\n        }]\n        return <div>\n            <Switch>\n                <Route exact path='/inventory/expenses/add'\n                       render={(route) => (that.props.activePracticePermissions.EditExpenses || that.props.allowAllPermissions ?\n                           <AddExpenses {...this.state} {...route} loadData={this.loadData}/> : <PermissionDenied/>)}/>\n                <Route exact path='/inventory/expenses/edit/:id'\n                       render={(route) => (that.props.activePracticePermissions.EditExpenses || that.props.allowAllPermissions ?\n                           <AddExpenses {...this.state} {...route} loadData={this.loadData}/> : <PermissionDenied/>)}/>\n                <Card title=\"Expenses\"\n                      extra={(that.props.activePracticePermissions.EditExpenses || that.props.allowAllPermissions ?\n                          <Link to={\"/inventory/expenses/add\"}> <Button type=\"primary\"><Icon\n                              type=\"plus\"/> Add</Button></Link> : <PermissionDenied/>)}>\n                    <Row gutter={16} style={{marginBottom: 10}}>\n                        <Col span={2} style={{textAlign: \"right\"}}>\n                            <b> Expense Types</b>\n                        </Col>\n                        <Col span={4}>\n                            <Select style={{width: '100%'}} value={this.state.selectedExpenseType}\n                                    disabled={this.state.loading}\n                                    onChange={(value) => this.changeExpenseFilters('selectedExpenseType', value)}>\n                                <Select.Option value={null}>--ALL EXPENSES--</Select.Option>\n                                {this.state.expenseTypes.map(item => <Select.Option\n                                    value={item.id}>{item.name}</Select.Option>)}\n                            </Select>\n                        </Col>\n                        <Col span={2} style={{textAlign: \"right\"}}>\n                            <b> Payment Modes</b>\n                        </Col>\n                        <Col span={4}>\n                            <Select style={{width: '100%'}} value={this.state.selectedPaymentMode}\n                                    disabled={this.state.loading}\n                                    onChange={(value) => this.changeExpenseFilters('selectedPaymentMode', value)}>\n                                <Select.Option value={null}>--ALL PAYMENT MODE--</Select.Option>\n                                {this.state.paymentModes.map(item => <Select.Option\n                                    value={item.id}>{item.mode}</Select.Option>)}\n                            </Select>\n                        </Col>\n\n                        <Col span={2} style={{textAlign: \"right\"}}>\n                            <b> From</b>\n                        </Col>\n                        <Col span={4}>\n                            <DatePicker value={this.state.selectedStartDate}\n                                        disabled={this.state.loading}\n                                        onChange={(value) => this.changeExpenseFilters('selectedStartDate', value)}/>\n                        </Col>\n                        <Col span={2} style={{textAlign: \"right\"}}>\n                            <b> To</b>\n                        </Col>\n                        <Col span={4}>\n                            <DatePicker value={this.state.selectedEndDate}\n                                        disabled={this.state.loading}\n                                        onChange={(value) => this.changeExpenseFilters('selectedEndDate', value)}/>\n                        </Col>\n                    </Row>\n                    <Table loading={this.state.loading} dataSource={this.state.expenses}\n                                     columns={expenseColoumns}/>\n                </Card>\n            </Switch>\n        </div>\n    }\n}\n","import {Card, Form, Row} from \"antd\";\nimport React from \"react\";\nimport {\n    INPUT_FIELD,\n    SUCCESS_MSG_TYPE,\n    TEXT_FIELD,\n} from \"../../../constants/dataKeys\";\nimport DynamicFieldsForm from \"../../common/DynamicFieldsForm\";\nimport {displayMessage, getAPI, interpolate} from \"../../../utils/common\";\nimport {\n    MANUFACTURER_API, SINGLE_MANUFACTURER_API, SINGLE_VENDOR_API\n} from \"../../../constants/api\";\nimport {Route} from \"react-router\";\nimport {Redirect} from \"react-router-dom\";\nimport PermissionDenied from \"../../common/errors/PermissionDenied\";\n\n\nexport default class AddManufacture extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            editData: this.props.editData ? this.props.editData : null\n        }\n    }\n\n    changeRedirect = () => {\n        var redirectVar = this.state.redirect;\n        this.setState({\n            redirect: !redirectVar,\n        });\n    }\n\n    componentDidMount() {\n        if (this.props.match.params.id) {\n            if (!this.state.editData) {\n                this.loadData();\n            }\n        }\n    }\n\n    loadData() {\n        let that = this;\n        let successFn = function (data) {\n            that.setState({\n                editData: data,\n            })\n        }\n        let errorFn = function () {\n\n        }\n        getAPI(interpolate(SINGLE_MANUFACTURER_API, [this.props.match.params.id]), successFn, errorFn);\n\n\n    }\n\n\n    render() {\n        console.log('props',this.state);\n        \n        let that = this;\n        const fields = [{\n            label: \"Name\",\n            key: \"name\",\n            initialValue: this.state.editData ? this.state.editData.name : null,\n            type: INPUT_FIELD\n        },{\n            label: 'Details',\n            key: 'description',\n            initialValue:this.state.editData?this.state.editData.description:null,\n            type:TEXT_FIELD\n        },\n        ];\n\n\n        let editformProp;\n        if (this.state.editData) {\n            editformProp = {\n                successFn: function (data) {\n                    displayMessage(SUCCESS_MSG_TYPE, \"success\");\n                    that.props.loadData();\n                    console.log(data);\n                },\n                errorFn: function () {\n\n                },\n                action: interpolate(SINGLE_MANUFACTURER_API, [this.props.match.params.id]),\n                method: \"put\",\n\n            }\n        }\n        const TestFormLayout = Form.create()(DynamicFieldsForm);\n\n        const formProp = {\n            successFn: function (data) {\n                displayMessage(SUCCESS_MSG_TYPE, \"success\");\n                that.props.loadData();\n\n                console.log(data);\n            },\n            errorFn: function () {\n\n            },\n            action: MANUFACTURER_API,\n            method: \"post\",\n        }\n        const defaultValues = [{\"key\": \"practice\", \"value\": this.props.active_practiceId}];\n        return <Row>\n            <Card>\n                <Route  path='/inventory/manufacture/edit/:id'\n                       render={(route) => (this.props.match.params.id ?\n                           <TestFormLayout defaultValues={defaultValues} title=\"Edit Manufacturer\"\n                                           changeRedirect={this.changeRedirect} formProp={editformProp}\n                                           {...route}\n                                           fields={fields}/> : <Redirect to={'/inventory/manufacture'}/>)}/>\n                <Route exact path='/inventory/manufacture/add'\n                       render={(route) => (that.props.activePracticePermissions.EditManufacturer || that.props.allowAllPermissions ?\n                            <TestFormLayout title=\"Add Manufacturer\" changeRedirect={this.changeRedirect}{...route}\n                                formProp={formProp} fields={fields}/>:<PermissionDenied/>)}/>\n\n\n            </Card>\n            {this.state.redirect && <Redirect to={'/inventory/manufacture'}/>}\n        </Row>\n\n    }\n}\n","import {Button, Card,Icon,Divider,Popconfirm} from \"antd\";\nimport React from \"react\";\nimport {getAPI,deleteAPI,interpolate,putAPI} from \"../../../utils/common\";\nimport {MANUFACTURER_API,SINGLE_MANUFACTURER_API} from \"../../../constants/api\";\nimport {Route, Switch} from \"react-router\";\nimport AddManufacture from \"./AddManufacture\";\nimport {Link} from \"react-router-dom\";\nimport CustomizedTable from \"../../common/CustomizedTable\";\nimport PermissionDenied from \"../../common/errors/PermissionDenied\";\n\nexport default class ManufactureList extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            active_practiceId: this.props.active_practiceId,\n            manufactures: null,\n            loading:true\n        };\n        this.loadData = this.loadData.bind(this);\n        this.deleteManufacture =this.deleteManufacture.bind(this);\n    }\n\n    componentDidMount() {\n        this.loadData();\n    }\n\n    loadData() {\n        let that = this;\n        let successFn = function (data) {\n            that.setState({\n                manufactures: data,\n                loading:false\n            })\n        }\n        let errorFn = function () {\n            that.setState({\n                loading:false\n            })\n\n        }\n        getAPI(MANUFACTURER_API, successFn, errorFn);\n    }\n\n    deleteManufacture(value) {\n        var that = this;\n        let reqDate={...value,\n            'is_active':false\n        }\n        let successFn = function (data) {\n            that.setState({\n                loading:false\n            })\n            that.loadData();\n        };\n        let errorFn = function () {\n        };\n        putAPI(interpolate(SINGLE_MANUFACTURER_API, [value]), reqDate,successFn, errorFn);\n\n    }\n\n\n    render() {\n        \n        let that = this;\n        const manufactureColoumns = [{\n            title: 'Name',\n            key: 'name',\n            dataIndex: 'name'\n        }, {\n            title: 'Details',\n            key: 'details',\n            dataIndex: 'description'\n        }, {\n            title: 'Action',\n            render: function (record) {\n                return <div>\n                    {that.props.activePracticePermissions.EditManufacturer || that.props.allowAllPermissions ?\n                    <Link to={'/inventory/manufacture/edit/' + record.id}>Edit</Link>:null}\n                    <Divider type=\"vertical\"/>\n                    {that.props.activePracticePermissions.DeleteManufacturer || that.props.allowAllPermissions ?\n                    <Popconfirm title=\"Are you sure delete this item?\"\n                                onConfirm={() => that.deleteManufacture(record.id)} okText=\"Yes\" cancelText=\"No\">\n                        <a>Delete</a>\n                    </Popconfirm>:null}\n\n                    \n                </div>\n            }\n        }];\n        return <div><Switch>\n            <Route exact path='/inventory/manufacture/add'\n                   render={(route) =>(that.props.activePracticePermissions.EditManufacturer || that.props.allowAllPermissions ? <AddManufacture {...this.state} {...route} {...this.props} loadData={that.loadData}/>:<PermissionDenied/>)}/>\n            <Route  path='/inventory/manufacture/edit/:id'\n                   render={(route) =>(that.props.activePracticePermissions.EditManufacturer || that.props.allowAllPermissions ? <AddManufacture {...this.state}  {...this.props} {...route} loadData={that.loadData}/>:<PermissionDenied/>)}/>\n            <Card title=\"Manufacturers\" extra={<Link to={\"/inventory/manufacture/add\"}> <Button type=\"primary\" disabled={!that.props.activePracticePermissions.EditManufacturer}><Icon\n                type=\"plus\"/> Add</Button></Link>}>\n                <CustomizedTable loading={this.state.loading} dataSource={this.state.manufactures} columns={manufactureColoumns} hideReport={!that.props.activePracticePermissions.ExportManufacturer}/>\n            </Card>\n        </Switch>\n        </div>\n    }\n}\n","import {Card, Form, Row} from \"antd\";\nimport React from \"react\";\nimport {\n    DATE_PICKER,\n    INPUT_FIELD,\n    SELECT_FIELD,\n    SUCCESS_MSG_TYPE,\n} from \"../../../constants/dataKeys\";\nimport DynamicFieldsForm from \"../../common/DynamicFieldsForm\";\nimport {displayMessage, getAPI, interpolate} from \"../../../utils/common\";\nimport {\n    LAB_API, PATIENTS_LIST, SINGLE_EXPENSES_API, SINGLE_LAB_API,\n} from \"../../../constants/api\";\nimport {Route} from \"react-router\";\nimport {Redirect} from \"react-router-dom\";\n\n\nexport default class AddLab extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            editData: this.props.editData ? this.props.editData : null\n        }\n    }\n\n    changeRedirect() {\n        var redirectVar = this.state.redirect;\n        this.setState({\n            redirect: !redirectVar,\n        });\n\n    }\n\n    componentDidMount() {\n        if (this.props.match.params.id) {\n            if (!this.state.editData) {\n                this.loadData();\n            }\n        }\n        this.getPatientListData();\n\n\n    }\n\n\n    loadData() {\n        let that = this;\n        let successFn = function (data) {\n            that.setState({\n                editData: data,\n            })\n        }\n        let errorFn = function () {\n\n        }\n        getAPI(interpolate(SINGLE_EXPENSES_API, [this.props.match.params.id]), successFn, errorFn);\n\n\n    }\n\n    getPatientListData() {\n        let that = this;\n        let successFn = function (data) {\n            that.setState({\n                patientListData: data\n            })\n        };\n        let errorFn = function () {\n\n        };\n        getAPI(PATIENTS_LIST, successFn, errorFn);\n    }\n\n\n    render() {\n\n        const patientOptions = []\n        if (this.state.patientListData && this.state.patientListData.length) {\n            this.state.patientListData.forEach(function (drug) {\n                patientOptions.push({label: (drug.name), value: drug.id});\n            })\n        }\n        const fields = [{\n            label: \"Job number \",\n            key: \"job_no\",\n            initialValue: this.state.editData ? this.state.editData.job_no : null,\n            type: INPUT_FIELD\n        }, {\n            label: \"Doctor Name \",\n            key: \"job_no\",\n            initialValue: this.state.editData ? this.state.editData.doctor_name : null,\n            type: INPUT_FIELD\n        }, {\n            label: \"Name \",\n            key: \"name\",\n            initialValue: this.state.editData ? this.state.editData.name : null,\n            type: INPUT_FIELD\n        }, {\n            label: \"Status \",\n            key: \"status\",\n            initialValue: this.state.editData ? this.state.editData.status : null,\n            type: INPUT_FIELD\n        }, {\n            label: \"Due Date\",\n            key: \"due_date\",\n            type: DATE_PICKER,\n            initialValue: this.state.editData ? this.state.editData.due_date : null,\n            format: \"YYYY/MM/DD HH:mm\"\n        }, {\n            label: \"patient\",\n            key: \"patient\",\n            type: SELECT_FIELD,\n            initialValue: this.state.editData ? this.state.editData.patient : null,\n            options: patientOptions\n        },];\n\n\n        let editformProp;\n        if (this.state.editBlogData) {\n            editformProp = {\n                successFn: function (data) {\n                    displayMessage(SUCCESS_MSG_TYPE, \"success\");\n                    console.log(data);\n                },\n                errorFn: function () {\n\n                },\n                action: interpolate(SINGLE_LAB_API, [this.props.match.params.id]),\n                method: \"put\",\n\n            }\n        }\n        const TestFormLayout = Form.create()(DynamicFieldsForm);\n\n        const formProp = {\n            successFn: function (data) {\n                displayMessage(SUCCESS_MSG_TYPE, \"success\");\n\n                console.log(data);\n            },\n            errorFn: function () {\n\n            },\n            action: LAB_API,\n            method: \"post\",\n        }\n        const defaultValues = [{\"key\": \"practice\", \"value\": this.props.active_practiceId}];\n        return <Row>\n            <Card>\n                <Route exact path='/inventory/lab/edit/:id'\n                       render={() => (this.props.match.params.id ?\n                           <TestFormLayout defaultValues={defaultValues} title=\"Edit Lab\"\n                                           changeRedirect={this.changeRedirect} formProp={editformProp}\n                                           fields={fields}/> : <Redirect to={'/inventory/lab'}/>)}/>\n                <Route exact path='/inventory/lab/add'\n                       render={() => <TestFormLayout title=\"Add lab\" changeRedirect={this.changeRedirect}\n                                                     formProp={formProp} fields={fields}/>}/>\n\n\n            </Card>\n            {this.state.redirect && <Redirect to={'/inventory/lab'}/>}\n        </Row>\n\n    }\n}\n","import {Button, Card, Icon} from \"antd\";\nimport React from \"react\";\nimport {getAPI} from \"../../../utils/common\";\nimport {LAB_API} from \"../../../constants/api\";\nimport {Route, Switch} from \"react-router\";\nimport AddLab from \"./AddLab\";\nimport {Link} from \"react-router-dom\";\n\nexport default class LabList extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            active_practiceId: this.props.active_practiceId,\n            lab: null,\n            loading:true\n        };\n        this.loadData = this.loadData.bind(this);\n    }\n\n    componentDidMount() {\n        this.loadData();\n    }\n\n    loadData() {\n        let that = this;\n        let successFn = function (data) {\n            that.setState({\n                lab: data,\n                loading:false\n            })\n        }\n        let errorFn = function () {\n            that.setState({\n                loading:false\n            })\n\n        }\n        getAPI(LAB_API, successFn, errorFn);\n    }\n\n    render() {\n        return <div><Switch>\n            <Route exact path='/inventory/lab/add'\n                   render={(route) => <AddLab {...this.state} {...route}/>}/>\n            <Route exact path='/inventory/expenses/lab/:id'\n                   render={(route) => <AddLab {...this.state} {...route}/>}/>\n            <Card loading={this.state.loading} title=\"Lab\" extra={<Link to={\"/inventory/lab/add\"}> <Button type=\"primary\"><Icon\n                type=\"plus\"/> Add</Button></Link>}>\n\n            </Card>\n        </Switch>\n        </div>\n    }\n}\n","import React from \"react\";\nimport {Card, Table} from \"antd\";\nimport {getAPI} from \"../../../utils/common\";\nimport {ACTIVITY_API} from \"../../../constants/api\";\n\nexport default class ActivityList extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            activity: null,\n            loading:true\n        }\n        this.loadActivityLog = this.loadActivityLog.bind(this)\n    }\n\n    componentWillMount() {\n        this.loadActivityLog();\n    }\n\n    loadActivityLog() {\n        let that = this;\n        let successFn = function (data) {\n            that.setState({\n                activity: data,\n                loading:false\n            })\n        }\n        let errorFn = function () {\n            that.setState({\n                loading:false\n            })\n\n        }\n        getAPI(ACTIVITY_API, successFn, errorFn);\n    }\n\n    render() {\n        return <Card title=\"Activity Log\">\n            <Table loading={this.state.loading} dataSource={this.state.activity}/>\n        </Card>\n    }\n}\n","import React from \"react\";\nimport {Card, Form, Row, Col, Input, Button, Select, Checkbox, InputNumber} from \"antd\";\nimport DynamicFieldsForm from \"../../common/DynamicFieldsForm\";\nimport {CHECKBOX_FIELD, INPUT_FIELD, SUCCESS_MSG_TYPE, NUMBER_FIELD, SELECT_FIELD} from \"../../../constants/dataKeys\";\nimport {\n    SINGLE_INVENTORY_ITEM_API,\n    TAXES,\n    MANUFACTURER_API,\n    VENDOR_API,\n    INVENTORY_ITEM_API,\n    INVENTORY_API,\n    DRUG_TYPE_API,\n    DRUG_UNIT_API, PRODUCT_MARGIN\n} from \"../../../constants/api\";\nimport {INVENTORY_ITEM_TYPE, DRUG, SUPPLIES, EQUIPMENT} from \"../../../constants/hardData\";\nimport {getAPI, putAPI, postAPI, displayMessage, interpolate} from \"../../../utils/common\";\nimport {Link, Redirect, Switch} from \"react-router-dom\";\nimport {Route} from \"react-router\";\nimport TextArea from \"antd/lib/input/TextArea\";\nimport {REQUIRED_FIELD_MESSAGE} from \"../../../constants/messages\";\n\nconst CheckboxGroup = Checkbox.Group;\n\nclass AddorEditInventoryItem extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            // editInventoryItem: this.props.editInventoryItem ? this.props.editInventoryItem : null,\n            taxes_list: this.props.taxes_list ? this.props.taxes_list : null,\n            manufacture_list: this.props.manufacture_list ? this.props.manufacture_list : null,\n            vendor_list: this.props.vendor_list ? this.props.vendor_list : null,\n            redirect: false,\n            type: this.props.editInventoryItem ? this.props.editInventoryItem : null,\n            drugUnitList: [],\n            drugTypeList: [],\n            retail_price: 0,\n            productMargin: [],\n            loading:false,\n        };\n        this.changeRedirect = this.changeRedirect.bind(this);\n    }\n\n    changeRedirect() {\n        var redirectVar = this.state.redirect;\n        this.setState({\n            redirect: !redirectVar,\n        });\n    }\n\n    componentDidMount() {\n        if (this.props.match.params.id) {\n            if (!this.state.editInventoryItem) {\n                this.loadData();\n            }\n        }\n        if (this.props.taxes_list == null) {\n            this.loadTaxes();\n        }\n        if (this.props.manufacture_list == null) {\n            this.loadManufactureList();\n        }\n        if (this.props.vendor_list == null) {\n            this.loadVendorList();\n        }\n        this.loadDrugType();\n        this.loadDrugUnit();\n        this.loadProductMargin();\n    }\n\n    loadProductMargin() {\n        let that = this;\n        let successFn = function (data) {\n            that.setState({\n                productMargin: data\n            })\n        }\n        let errorFn = function () {\n\n        }\n        getAPI(PRODUCT_MARGIN, successFn, errorFn);\n    }\n\n    loadTaxes() {\n        var that = this;\n        let successFn = function (data) {\n            that.setState({\n                taxes_list: data,\n            })\n        };\n        let errorFn = function () {\n        };\n        getAPI(interpolate(TAXES, [this.props.active_practiceId]), successFn, errorFn);\n\n    }\n\n    loadManufactureList() {\n        let that = this;\n        let successFn = function (data) {\n            that.setState({\n                manufacture_list: data\n            })\n        }\n        let errorFn = function () {\n\n        }\n        getAPI(MANUFACTURER_API, successFn, errorFn);\n    }\n\n    loadVendorList() {\n        let that = this;\n        let successFn = function (data) {\n            that.setState({\n                vendor_list: data\n            })\n        }\n        let errorFn = function () {\n\n        }\n        getAPI(interpolate(VENDOR_API, [this.props.active_practiceId]), successFn, errorFn);\n    }\n\n\n    loadData() {\n        let that = this;\n        let successFn = function (data) {\n            that.setState(function (prevState) {\n                let totalTax = 0;\n                data.taxes_data.forEach(function (tax) {\n                    totalTax += tax.tax_value;\n                });\n                let net_price = (data.retail_price * (1 + totalTax * 0.01)).toFixed(2);\n                return {\n                    editInventoryItem: {...data, net_price: net_price},\n                    type: data.item_type,\n                    retail_price: data.retail_price\n                }\n            })\n        }\n        let errorFn = function () {\n\n        }\n        if (this.props.match.params.id)\n            getAPI(interpolate(SINGLE_INVENTORY_ITEM_API, [this.props.match.params.id]), successFn, errorFn);\n\n    }\n\n    loadDrugType = () => {\n        let that = this;\n        let successFn = function (data) {\n            that.setState({\n                drugTypeList: data,\n            })\n        }\n        let errorFn = function () {\n\n        }\n        getAPI(interpolate(DRUG_TYPE_API, [this.props.active_practiceId]), successFn, errorFn);\n    }\n    onChangeHandeler = (e) => {\n        let that = this\n        that.setState({\n            type: e,\n        })\n    }\n\n    loadDrugUnit() {\n        let that = this;\n        let successFn = function (data) {\n            that.setState({\n                drugUnitList: data\n            })\n        }\n        let errorFn = function () {\n        }\n        getAPI(interpolate(DRUG_UNIT_API, [this.props.active_practiceId]), successFn, errorFn);\n    }\n\n    setFormParams = (type, value) => {\n        this.setState({\n            [type]: value\n        })\n    }\n\n    handleSubmit = (e) => {\n        e.preventDefault();\n        let that = this;\n        this.props.form.validateFields((err, formData) => {\n            if (!err) {\n                let reqData = {\n                    ...formData,\n                    retail_without_tax: that.state.retail_price,\n                    net_price: undefined,\n                    practice: this.props.active_practiceId,\n\n                }\n                if (this.state.editInventoryItem) {\n                    reqData.id = this.state.editInventoryItem.id\n                }\n\n                let successFn = function (data) {\n                    that.setState({\n                        redirect: true,\n\n\n                    });\n                    that.props.loadData();\n\n                };\n                let errorFn = function () {\n\n                };\n                if (!this.state.editInventoryItem) {\n                    postAPI(interpolate(INVENTORY_ITEM_API, [this.props.match.params.id]), reqData, successFn, errorFn);\n                } else {\n                    putAPI(interpolate(SINGLE_INVENTORY_ITEM_API, [this.props.match.params.id]), reqData, successFn, errorFn);\n                }\n\n            }\n        });\n    }\n    changeNetPrice = (value) => {\n        let that = this;\n        const {getFieldsValue, setFields} = this.props.form;\n        setTimeout(function () {\n            let values = getFieldsValue();\n            if (values.retail_with_tax) {\n                let totalTaxAmount = 0;\n                values.taxes.forEach(function (taxid) {\n                    that.state.taxes_list.forEach(function (taxObj) {\n                        if (taxObj.id == taxid)\n                            totalTaxAmount += taxObj.tax_value;\n                    })\n                });\n                let retailPrice = values.retail_with_tax / (1 + totalTaxAmount * 0.01);\n                that.setState({\n                    retail_price: retailPrice.toFixed(2)\n                })\n            } else {\n                that.setState({\n                    retail_price: 0\n                })\n            }\n        }, 1000);\n\n    }\n\n    render() {\n        let that = this;\n        const taxesOption = [];\n        if (this.state.taxes_list) {\n            this.state.taxes_list.forEach(function (drug) {\n                taxesOption.push({label: (drug.name + \"(\" + drug.tax_value + \"%)\"), value: drug.id});\n            })\n        }\n        const manufacturerOption = [];\n        if (this.state.manufacture_list) {\n            this.state.manufacture_list.forEach(function (manufacturer) {\n                manufacturerOption.push({label: (manufacturer.name), value: manufacturer.id});\n            })\n        }\n\n        const vendorOption = [];\n        if (this.state.vendor_list) {\n            this.state.vendor_list.forEach(function (vendor) {\n                vendorOption.push({label: (vendor.name), value: vendor.id});\n            })\n        }\n        const {getFieldDecorator} = this.props.form;\n\n        const formItemLayout = ({\n            labelCol: {span: 10},\n            wrapperCol: {span: 14},\n        });\n\n        return <Card title={this.state.editInventoryItem ? \"Edit Inventory Item\" : \"Add Inventory Item\"} loading={this.state.loading}>\n            <Row>\n                <Col span={18} >\n                    <Form onSubmit={this.handleSubmit}>\n                        <Form.Item label=\"Item Name\" {...formItemLayout}>\n                            {getFieldDecorator('name', {\n                                initialValue: this.state.editInventoryItem ? this.state.editInventoryItem.name : null,\n                                rules: [{required: true, message: REQUIRED_FIELD_MESSAGE}]\n                            })\n                            (<Input placeholder=\"Item Name\"/>)\n                            }\n                        </Form.Item>\n\n                        <Form.Item label=\"HSN\" {...formItemLayout}>\n                            {getFieldDecorator('code', {initialValue: this.state.editInventoryItem ? this.state.editInventoryItem.code : null})\n                            (<Input placeholder=\"HSN Number\"/>)\n                            }\n                        </Form.Item>\n                        {this.state.manufacturerType && this.state.manufacturerType == INPUT_FIELD ?\n                            <Form.Item key={'manufacturer_extra'} label={\"Manufacturer\"}  {...formItemLayout}>\n                                {getFieldDecorator(\"manufacturer_extra\", {\n                                    initialValue: that.state.editPrescreption ? that.state.editPrescreption.manufacturer_extra : null,\n                                    rules: [{\n                                        required: true,\n                                        message: REQUIRED_FIELD_MESSAGE\n                                    }]\n                                })(\n                                    <Input/>\n                                )}\n                                <a onClick={() => that.setFormParams('manufacturerType', SELECT_FIELD)}>Choose\n                                    Manufacturer</a>\n                            </Form.Item>\n                            : <Form.Item key={\"manufacturer\"} {...formItemLayout} label={\"Manufacturer\"}>\n                                {getFieldDecorator(\"manufacturer\", {\n                                    initialValue: this.state.editInventoryItem ? this.state.editInventoryItem.manufacturer : null,\n                                })(\n                                    <Select>\n                                        {manufacturerOption.map((option) => <Select.Option\n                                            value={option.value}>{option.label}</Select.Option>)}\n                                    </Select>\n                                )}\n                                <a onClick={() => that.setFormParams('manufacturerType', INPUT_FIELD)}>Add New\n                                    Manufacturer</a>\n                            </Form.Item>}\n                        <Form.Item label=\"Stocking Unit\" {...formItemLayout}>\n                            {getFieldDecorator('stocking_unit', {\n                                initialValue: this.state.editInventoryItem ? this.state.editInventoryItem.stocking_unit : null,\n                                rules: [{required: true, message: REQUIRED_FIELD_MESSAGE}],\n                            })\n                            (<Input placeholder=\"Example: Bottles, Strips etc.\"/>)\n                            }<p>(Make sure this is the same as the unit in which you dispense this item.)</p>\n                        </Form.Item>\n\n                        <Form.Item label=\"Re-Order Level\" {...formItemLayout}>\n                            {getFieldDecorator('re_order_level', {initialValue: this.state.editInventoryItem ? this.state.editInventoryItem.re_order_level : null})\n                            (<InputNumber placeholder=\"Re-Order Level\"/>)\n                            }\n                        </Form.Item>\n                        <Form.Item label=\"Net Price\" {...formItemLayout}>\n                            {getFieldDecorator('retail_with_tax', {\n                                initialValue: this.state.editInventoryItem ? this.state.editInventoryItem.retail_with_tax : null,\n                                rules: [{\n                                    required: true,\n                                    message: REQUIRED_FIELD_MESSAGE\n                                }]\n                            })\n                            (<InputNumber onChange={this.changeNetPrice}/>)\n                            }<span className=\"ant-form-text\">INR</span>\n                        </Form.Item>\n                        <Form.Item label=\"Tax\" {...formItemLayout}>\n                            {getFieldDecorator('taxes', {initialValue: this.state.editInventoryItem ? this.state.editInventoryItem.taxes : []})\n                            (<CheckboxGroup onChange={this.changeNetPrice}>\n                                {taxesOption.map((option) => <Checkbox\n                                    value={option.value}>{option.label}\n                                </Checkbox>)}\n                            </CheckboxGroup>)\n                            }\n                        </Form.Item>\n                        <Form.Item label=\"Retail Price\" {...formItemLayout}>\n                            <span className=\"ant-form-text\"><b>{that.state.retail_price}</b>&nbsp;INR</span>\n                        </Form.Item>\n\n                        <Form.Item key={\"margin\"} {...formItemLayout} label={\"MLM Margin\"}>\n                            {getFieldDecorator(\"margin\", {\n                                initialValue: this.state.editingProcedureData ? this.state.editingProcedureData.margin : null,\n                            })(\n                                <Select>\n                                    {this.state.productMargin.map((option) => <Select.Option\n                                        value={option.id}>{option.name}</Select.Option>)}\n                                </Select>\n                            )}\n                        </Form.Item>\n                        <Form.Item label=\"Item Type\" {...formItemLayout}>\n                            {getFieldDecorator('item_type', {\n                                initialValue: this.state.editInventoryItem ? this.state.editInventoryItem.item_type : null,\n                                rules: [{required: true, message: REQUIRED_FIELD_MESSAGE}],\n                            })\n                            (<Select placeholder=\"Item Type\" onChange={this.onChangeHandeler}>\n                                {INVENTORY_ITEM_TYPE.map((option) => <Select.Option\n                                    value={option.value}>{option.label}\n                                </Select.Option>)}\n                            </Select>)\n\n                            }\n                        </Form.Item>\n\n                        {this.state.type == DRUG ? <div>\n                                <Form.Item label=\"I prescribe this\" {...formItemLayout}>\n                                    {getFieldDecorator('perscribe_this', {\n                                        valuePropName: 'checked',\n                                        initialValue: this.state.editInventoryItem ? this.state.editInventoryItem.perscribe_this : false\n                                    })\n                                    (<Checkbox></Checkbox>)\n                                    }\n                                </Form.Item>\n                                {this.state.drugType && this.state.drugType == INPUT_FIELD ?\n                                    <Form.Item key={'drug_type_extra'} label={\"Medicine Type\"}  {...formItemLayout}>\n                                        {getFieldDecorator(\"drug_type_extra\", {\n                                            initialValue: that.state.editInventoryItem ? that.state.editInventoryItem.drug_type_extra : null,\n                                            rules: [{\n                                                required: true,\n                                                message: REQUIRED_FIELD_MESSAGE\n                                            }]\n                                        })(\n                                            <Input/>\n                                        )}\n                                        <a onClick={() => that.setFormParams('drugType', SELECT_FIELD)}>Choose Medicine\n                                            Type</a>\n                                    </Form.Item>\n                                    : <Form.Item key={\"drug_type\"} {...formItemLayout} label={\"Medicine Type\"}>\n                                        {getFieldDecorator(\"drug_type\", {\n                                            initialValue: this.state.editInventoryItem ? this.state.editInventoryItem.drug_type : null,\n                                            rules: [{\n                                                required: true,\n                                                message: REQUIRED_FIELD_MESSAGE\n                                            }]\n                                        })(\n                                            <Select>\n                                                {that.state.drugTypeList.map((option) => <Select.Option\n                                                    value={option.id}>{option.name}</Select.Option>)}\n                                            </Select>\n                                        )}\n                                        <a onClick={() => that.setFormParams('drugType', INPUT_FIELD)}>Add New Medicine\n                                            Type</a>\n                                    </Form.Item>}\n                                <Form.Item label=\"Strength\" {...formItemLayout}>\n                                    {getFieldDecorator('strength', {initialValue: this.state.editInventoryItem ? this.state.editInventoryItem.strength : null})\n                                    (<InputNumber/>)\n                                    }\n                                </Form.Item>\n                                {this.state.drugUnit && this.state.drugUnit == INPUT_FIELD ?\n                                    <Form.Item key={'unit_type_extra'} label={\"Strength Unit\"}  {...formItemLayout}>\n                                        {getFieldDecorator(\"unit_type_extra\", {\n                                            initialValue: that.state.editInventoryItem ? that.state.editInventoryItem.unit_type_extra : null,\n                                            rules: [{\n                                                required: true,\n                                                message: REQUIRED_FIELD_MESSAGE\n                                            }]\n                                        })(\n                                            <Input/>\n                                        )}\n                                        <a onClick={() => that.setFormParams('drugUnit', SELECT_FIELD)}>Choose Strength\n                                            Unit</a>\n                                    </Form.Item>\n                                    : <Form.Item key={\"stength_unit\"} {...formItemLayout} label={\"Strength Unit\"}>\n                                        {getFieldDecorator(\"stength_unit\", {\n                                            initialValue: this.state.editInventoryItem ? this.state.editInventoryItem.stength_unit : null,\n                                            rules: [{\n                                                required: true,\n                                                message: REQUIRED_FIELD_MESSAGE\n                                            }]\n                                        })(\n                                            <Select>\n                                                {that.state.drugUnitList.map((option) => <Select.Option\n                                                    value={option.id}>{option.name}</Select.Option>)}\n                                            </Select>\n                                        )}\n                                        <a onClick={() => that.setFormParams('drugUnit', INPUT_FIELD)}>Add New Strength\n                                            Unit</a>\n                                    </Form.Item>}\n                                <Form.Item label=\"Instructions\" {...formItemLayout}>\n                                    {getFieldDecorator('instructions', {initialValue: this.state.editInventoryItem ? this.state.editInventoryItem.instructions : null})\n                                    (<TextArea/>)\n                                    }\n                                </Form.Item>\n\n                            </div>\n\n                            : null}\n                        {this.state.type == SUPPLIES ? <div>\n                                <Form.Item label=\"I prescribe this\" {...formItemLayout}>\n                                    {getFieldDecorator('perscribe_this', {\n                                        valuePropName: 'checked',\n                                        initialValue: this.state.editInventoryItem ? this.state.editInventoryItem.perscribe_this : false\n                                    })\n                                    (<Checkbox></Checkbox>)\n                                    }\n                                </Form.Item>\n                                <Form.Item label=\"Strength Unit\" {...formItemLayout}>\n                                    {getFieldDecorator('strength', {initialValue: this.state.editInventoryItem ? this.state.editInventoryItem.strength : null})\n                                    (<Input/>)\n                                    }\n                                </Form.Item>\n\n                                {this.state.drugUnit && this.state.drugUnit == INPUT_FIELD ?\n                                    <Form.Item key={'unit_type_extra'} label={\"Strength Unit\"}  {...formItemLayout}>\n                                        {getFieldDecorator(\"unit_type_extra\", {\n                                            initialValue: that.state.editInventoryItem ? that.state.editInventoryItem.unit_type_extra : null,\n                                            rules: [{\n                                                required: true,\n                                                message: REQUIRED_FIELD_MESSAGE\n                                            }]\n                                        })(\n                                            <Input/>\n                                        )}\n                                        <a onClick={() => that.setFormParams('drugUnit', SELECT_FIELD)}>Choose Strength\n                                            Unit</a>\n                                    </Form.Item>\n                                    : <Form.Item key={\"stength_unit\"} {...formItemLayout} label={\"Strength Unit\"}>\n                                        {getFieldDecorator(\"stength_unit\", {\n                                            initialValue: this.state.editInventoryItem ? this.state.editInventoryItem.stength_unit : null,\n                                            rules: [{\n                                                required: true,\n                                                message: REQUIRED_FIELD_MESSAGE\n                                            }]\n                                        })(\n                                            <Select>\n                                                {that.state.drugUnitList.map((option) => <Select.Option\n                                                    value={option.id}>{option.name}</Select.Option>)}\n                                            </Select>\n                                        )}\n                                        <a onClick={() => that.setFormParams('drugUnit', INPUT_FIELD)}>Add New Strength\n                                            Unit</a>\n                                    </Form.Item>}\n\n                                <Form.Item label=\"Instructions\" {...formItemLayout}>\n                                    {getFieldDecorator('instructions', {initialValue: this.state.editInventoryItem ? this.state.editInventoryItem.instructions : null})\n                                    (<TextArea/>)\n                                    }\n                                </Form.Item>\n                            </div>\n                            : null}\n                        {this.state.type == EQUIPMENT ? <div>\n                                <Form.Item label=\"I prescribe this\" {...formItemLayout}>\n                                    {getFieldDecorator('perscribe_this', {\n                                        valuePropName: 'checked',\n                                        initialValue: this.state.editInventoryItem ? this.state.editInventoryItem.perscribe_this : null\n                                    })\n                                    (<Checkbox></Checkbox>)\n                                    }\n                                </Form.Item>\n                                <Form.Item label=\"Instructions\" {...formItemLayout}>\n                                    {getFieldDecorator('instructions', {initialValue: this.state.editInventoryItem ? this.state.editInventoryItem.instructions : null})\n                                    (<TextArea/>)\n                                    }\n                                </Form.Item>\n                            </div>\n\n                            : null}\n\n                        <Form.Item>\n                            <Button style={{margin: 5}} type=\"primary\" htmlType=\"submit\">\n                                Submit\n                            </Button>\n                            {that.props.history ?\n                                <Button style={{margin: 5}} onClick={() => that.props.history.goBack()}>\n                                    Cancel\n                                </Button> : null}\n                        </Form.Item>\n\n\n                    </Form>\n                </Col>\n            </Row>\n            {this.state.redirect && <Redirect to={'/inventory'}/>}\n        </Card>\n\n    }\n}\n\nexport default Form.create()(AddorEditInventoryItem);\n","import React from \"react\";\nimport {\n    Affix,\n    AutoComplete,\n    Button,\n    Card,\n    Col,\n    DatePicker, Divider,\n    Form,\n    Icon,\n    Input,\n    InputNumber,\n    List,\n    message,\n    Row,\n    Select, Spin,\n    Table,\n    Tabs,\n    Upload\n} from \"antd\";\nimport {displayMessage, getAPI, interpolate, makeURL, postAPI} from \"../../../utils/common\";\n\nimport {ADD_STOCK, CONSUME_STOCK, INVENTORY_ITEM_TYPE, TYPE_OF_CONSUMPTION} from \"../../../constants/hardData\";\nimport {\n    BULK_STOCK_ENTRY,\n    FILE_UPLOAD_API,\n    INVENTORY_ITEM_API,\n    SEARCH_THROUGH_QR,\n    SUPPLIER_API\n} from \"../../../constants/api\";\nimport moment from \"moment\";\n\nconst {Search} = Input;\nconst {MonthPicker} = DatePicker;\nconst TabPane = Tabs.TabPane;\n\nlet tableFormFields = {\n    _id: null,\n    quantity: 0,\n    batch: null\n};\n\nclass AddOrConsumeStock extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            items: {},\n            classType: props.type,\n            tableFormValues: [],\n            maxQuantityforConsume: {},\n            searchStrings: {},\n            tempValues: {},\n            supplierList: [],\n            customSupplier: false,\n            qrValue: '',\n            loading: true,\n        }\n        this.loadSupplierList = this.loadSupplierList.bind(this);\n    }\n\n    componentDidMount() {\n        this.loadInventoryItemList();\n        this.loadSupplierList();\n    }\n\n    changeSupplierType = (value) => {\n        this.setState({\n            customSupplier: !!value\n        })\n    }\n\n    loadSupplierList() {\n        let that = this;\n        let params = {practice: this.props.active_practiceId}\n        let successFn = function (data) {\n            that.setState({\n                supplierList: data\n            })\n        }\n        let errorFn = function () {\n\n        }\n        getAPI(interpolate(SUPPLIER_API, [this.props.active_practiceId]), successFn, errorFn, params);\n        // getAPI(SUPPLIER_API, successFn, errorFn, {\n        //     practice: this.props.active_practiceId\n        // })\n    }\n\n    loadInventoryItemList() {\n        let that = this;\n        INVENTORY_ITEM_TYPE.forEach(function (type) {\n            that.loadItemsList(type.value)\n        });\n    }\n\n    loadItemsList = (type, page = 1) => {\n        let that = this;\n        let successFn = function (recData) {\n            let data = recData;\n            that.setState(function (prevState) {\n                return {\n                    items: {\n                        ...prevState.items,\n                        [type]: {...prevState.items[type], ...data},\n                    },\n                    loading: false,\n                }\n            });\n        }\n        let errorFn = function () {\n        }\n        let params = {\n            maintain_inventory: true,\n            practice: this.props.active_practiceId,\n            item_type: type,\n            page\n        }\n        if (that.state.searchStrings[type]) {\n            params.item_name = that.state.searchStrings[type]\n        }\n        getAPI(INVENTORY_ITEM_API, successFn, errorFn, params);\n    }\n    remove = (k) => {\n        this.setState(function (prevState) {\n            let newTableFormValues = [];\n            prevState.tableFormValues.forEach(function (formValue) {\n                if (formValue._id != k)\n                    newTableFormValues.push(formValue);\n            });\n            console.log(prevState.tableFormValues, k);\n            return {\n                tableFormValues: newTableFormValues\n            }\n        });\n    }\n\n    add = (item, randId = Math.random().toFixed(7)) => {\n        this.setState(function (prevState) {\n            return {\n                tableFormValues: [{\n                    ...tableFormFields,\n                    ...item,\n                    _id: randId,\n                }, ...prevState.tableFormValues]\n            }\n        });\n    };\n\n    handleSubmit = (e) => {\n        let that = this;\n        this.setState({\n            loading: true,\n        });\n        if (e.keyCode == 13) {\n            return false;\n        }\n        e.preventDefault();\n        this.props.form.validateFields((err, values) => {\n            if (!err) {\n                let reqData = [];\n                that.state.tableFormValues.forEach(function (item) {\n                    let itemObject = {\n                        item_add_type: that.state.classType,\n                        inventory_item: item.id,\n                        quantity: values.quantity[item._id],\n                        batch_number: values.batch[item._id],\n                        date: moment(values.date).format('YYYY-MM-DD'),\n                        bill_number: values.bill_number,\n                        bill_file: values.file && values.file.file.response ? values.file.file.response.image_path : null\n                    };\n\n                    if (that.state.classType == ADD_STOCK) {\n                        itemObject = {\n                            ...itemObject,\n                            expiry_date: moment(values.expiry_date[item._id]).format('YYYY-MM-DD'),\n                            unit_cost: values.unit_cost[item._id],\n                            total_cost: values.unit_cost[item._id] * values.quantity[item._id],\n                        }\n                        if (values.supplier) {\n                            itemObject.supplier = values.supplier;\n                        } else if (values.supplier_name) {\n                            itemObject.supplier_name = values.supplier_name;\n                        }\n                    } else if (that.state.classType == CONSUME_STOCK) {\n                        itemObject.type_of_consumption = values.type_of_consumption;\n                    }\n                    reqData.push(itemObject);\n                });\n                reqData.date = moment(values.date).isValid() ? moment(values.date).format() : null;\n                if (that.state.customSupplier) {\n                    reqData.supplier_name = values.supplier_name;\n                } else {\n                    reqData.supplier = values.supplier;\n                }\n                let successFn = function (data) {\n\n                    displayMessage(\"Inventory updated successfully\");\n                    that.props.loadData();\n                    that.props.history.push('/inventory');\n                };\n                let errorFn = function () {\n                    that.setState({\n                        loading: false,\n                    });\n                };\n                postAPI(BULK_STOCK_ENTRY, reqData, successFn, errorFn);\n            }\n        });\n    };\n\n    changeMaxQuantityforConsume(recordId, batch) {\n        this.setState(function (prevState) {\n            let newMaxQuantityforConsume = {...prevState.maxQuantityforConsume}\n            prevState.tableFormValues.forEach(function (formValue) {\n                if (formValue._id == recordId)\n                    formValue.item_type_stock.item_stock.forEach(function (stock) {\n                        if (stock.batch_number == batch)\n                            newMaxQuantityforConsume[recordId] = stock.quantity || 0\n                    })\n            });\n            return {\n                maxQuantityforConsume: newMaxQuantityforConsume\n            }\n        });\n    }\n\n    searchValues = (type, value) => {\n        let that = this;\n        this.setState(function (prevState) {\n            let searchValues = {...prevState.searchStrings};\n            searchValues[type] = value;\n            return {searchStrings: searchValues}\n        }, function () {\n            that.loadItemsList(type);\n        });\n    }\n    filterValues = (type) => {\n        this.setState(function (prevState) {\n            let filteredItemOfGivenType = [];\n            if (prevState.items[type]) {\n                if (prevState.searchStrings[type]) {\n                    prevState.items[type].forEach(function (item) {\n                        if (item.name\n                            .toString()\n                            .toLowerCase()\n                            .includes(prevState.searchStrings[type].toLowerCase())) {\n                            filteredItemOfGivenType.push(item);\n                        }\n                    });\n                } else {\n                    filteredItemOfGivenType = prevState.items[type];\n                }\n            }\n            return {\n                filteredItems: {...prevState.filteredItems, [type]: filteredItemOfGivenType}\n            }\n        });\n    }\n    storeValue = (type, id, value) => {\n        let that = this;\n        this.setState(function (prevState) {\n            return {tempValues: {...prevState.tempValues, [type.toString() + id.toString()]: value}}\n        });\n        if (type == 'batch') {\n            let {setFieldsValue} = that.props.form;\n            that.state.tableFormValues.forEach(function (item) {\n                if (item._id == id) {\n                    if (item.item_type_stock.batch_number) {\n                        item.item_type_stock.batch_number.forEach(function (batch) {\n                            setFieldsValue({[`expiry_date[${id}]`]: batch.expiry_date && moment(batch.expiry_date).isValid() ? moment(batch.expiry_date) : null});\n                        })\n                    }\n                }\n            })\n\n        }\n    }\n    addItemThroughQR = (value) => {\n        let that = this;\n        that.setState({\n            loadingQr: true,\n        });\n        let qrSplitted = value.split('*');\n        let successFn = function (data) {\n            let item = data;\n            let {setFieldsValue, getFieldsValue, getFieldValue} = that.props.form;\n            let randomId = Math.random().toFixed(7);\n            let flag = true\n            that.state.tableFormValues.forEach(function (row) {\n                if (row.item_name == qrSplitted[0]) {\n                    let _id = row._id;\n                    let batch = getFieldsValue(`batch[${_id}]`);\n                    if (batch == qrSplitted[3]) {\n                        let quantity = getFieldsValue(`quantity[${_id}]`);\n                        flag = false\n                        setFieldsValue({\n                            [`quantity[${_id}]`]: quantity + 1\n                        });\n                        that.storeValue('quantity', _id, value);\n                    }\n                }\n            })\n            if (flag) {\n                that.add(data, randomId);\n                that.storeValue('batch', randomId, qrSplitted[1]);\n                that.storeValue('unit_cost', randomId, qrSplitted[3]);\n                let fieldsToBeSet = {\n                    [`batch[${randomId}]`]: qrSplitted[1],\n                    [`expiry_date[${randomId}]`]: moment(qrSplitted[2], 'MM/YY')\n                };\n                if (that.state.classType == CONSUME_STOCK)\n                    fieldsToBeSet[`unit_cost[${randomId}]`] = qrSplitted[3]\n                setFieldsValue(fieldsToBeSet)\n            }\n            console.log(getFieldsValue(), {\n                [`batch[${randomId}]`]: qrSplitted[0]\n            });\n            that.setState(function (prevState) {\n\n                // if (prevState.items && prevState.items[INVENTORY]) {\n                //     prevState.items[INVENTORY].forEach(function (inventItem) {\n                //         console.log(item.inventory_item)\n                //         if (inventItem.id == item.inventory_item) {\n                //             console.log(inventItem);\n                //             that.add({...inventItem, item_type: INVENTORY});\n                //\n                //         }\n                //     })\n                // }\n                return {\n                    loadingQr: false,\n                    qrValue: ''\n                }\n            });\n        }\n        let errorFn = function () {\n\n        }\n        getAPI(SEARCH_THROUGH_QR, successFn, errorFn, {qr: value, form: 'Inventory'})\n    }\n    setQrValue = (e) => {\n        let value = e.target.value;\n        this.setState({\n            qrValue: value\n        })\n    }\n\n    render() {\n        let that = this;\n        const {getFieldDecorator} = this.props.form;\n        const formItemLayout = {\n            labelCol: {\n                xs: {span: 24},\n                sm: {span: 4},\n            },\n            wrapperCol: {\n                xs: {span: 24},\n                sm: {span: 20},\n            },\n        };\n        const formItemLayoutWithOutLabel = {\n            labelCol: {\n                xs: {span: 24},\n                sm: {span: 4},\n            },\n            wrapperCol: {\n                xs: {span: 24},\n                sm: {span: 20},\n            },\n        };\n        const singleUploadprops = {\n            name: 'image',\n            data: {\n                name: 'hello'\n            },\n            action: makeURL(FILE_UPLOAD_API),\n            headers: {\n                authorization: 'authorization-text',\n            },\n            onChange(info) {\n                if (info.file.status !== 'uploading') {\n\n                }\n                if (info.file.status === 'done') {\n                    message.success(`${info.file.name} file uploaded successfully`);\n                } else if (info.file.status === 'error') {\n                    message.error(`${info.file.name} file upload failed.`);\n                }\n            },\n        };\n        getFieldDecorator('keys', {initialValue: []});\n        let consumeRow = [{\n            title: 'Item Name',\n            key: 'item_name',\n            dataIndex: 'name'\n        }];\n        if (this.state.classType == ADD_STOCK) {\n            consumeRow = consumeRow.concat([{\n                title: 'Quantity',\n                key: 'quantity',\n                dataIndex: 'quantity',\n                render: (item, record) => <Form.Item\n                    key={`quantity[${record._id}]`}\n                    {...formItemLayout}>\n                    {getFieldDecorator(`quantity[${record._id}]`, {\n                        validateTrigger: ['onChange', 'onBlur'],\n                        rules: [{\n                            required: true,\n                            message: \"This field is required.\",\n                        }],\n                    })(\n                        <InputNumber min={0} placeholder=\"quantity\"\n                                     onChange={(value) => this.storeValue('quantity', record._id, value)}/>\n                    )}\n                </Form.Item>\n            }, {\n                title: 'Batch',\n                key: 'batch',\n                dataIndex: 'batch',\n                render: (item, record) => <Form.Item\n                    key={`batch[${record._id}]`}\n                    {...formItemLayout}>\n                    {getFieldDecorator(`batch[${record._id}]`, {\n                        validateTrigger: ['onChange', 'onBlur'],\n                        rules: [{\n                            required: true,\n                            message: \"This field is required.\",\n                        }],\n                    })(\n                        <AutoComplete placeholder=\"Batch Number\"\n                                      onChange={(value) => this.storeValue('batch', record._id, value)}\n                                      dataSource={record.item_type_stock && record.item_type_stock.item_stock ? record.item_type_stock.item_stock.map(itemStock => itemStock.batch_number ? itemStock.batch_number : '--') : []}/>\n                    )}\n                </Form.Item>\n            }, {\n                title: 'Expiry Date',\n                key: 'expiry',\n                dataIndex: 'expiry',\n                render: (item, record) => <Form.Item\n                    key={`expiry_date[${record._id}]`}\n                    {...formItemLayout}>\n                    {getFieldDecorator(`expiry_date[${record._id}]`, {\n                        rules: [{\n                            required: true,\n                            message: \"This field is required.\",\n                        }],\n                        initialValue: moment(new Date())\n                    })(\n                        <MonthPicker/>\n                    )}\n                </Form.Item>\n            }, {\n                title: 'Unit Cost',\n                key: 'unit_cost',\n                dataIndex: 'unit_cost',\n                render: (item, record) => <Form.Item\n                    key={`unit_cost[${record._id}]`}\n                    {...formItemLayout}>\n                    {getFieldDecorator(`unit_cost[${record._id}]`, {\n                        // validateTrigger: ['onChange', 'onBlur'],\n                        rules: [{\n                            required: true,\n                            message: \"This field is required.\",\n                        }],\n                    })(\n                        <InputNumber placeholder=\"Unit Cost\"\n                                     onChange={(value) => this.storeValue('unit_cost', record._id, value)}/>\n                    )}\n                </Form.Item>\n            }, {\n                title: 'Total Cost',\n                key: 'total_cost',\n                dataIndex: 'total_cost',\n                render: (item, record) =>\n                    <span>{this.state.tempValues['unit_cost' + record._id] && this.state.tempValues['quantity' + record._id] ? this.state.tempValues['unit_cost' + record._id] * this.state.tempValues['quantity' + record._id] : '--'}</span>\n            }]);\n        } else if (this.state.classType == CONSUME_STOCK) {\n            consumeRow = consumeRow.concat([{\n                title: 'Batch',\n                key: 'batch',\n                dataIndex: 'batch',\n                render: (item, record) => <Form.Item\n                    key={`batch[${record._id}]`}\n                    {...formItemLayout}>\n                    {getFieldDecorator(`batch[${record._id}]`, {\n                        validateTrigger: ['onChange', 'onBlur'],\n                        rules: [{\n                            required: true,\n                            message: \"This field is required.\",\n                        }],\n                    })(\n                        <Select placeholder=\"Batch Number\"\n                                onChange={(value) => that.changeMaxQuantityforConsume(record._id, value)}>\n                            {record.item_type_stock && record.item_type_stock.item_stock && record.item_type_stock.item_stock.map(stock =>\n                                <Select.Option value={stock.batch_number}>\n                                    #{stock.batch_number} ({stock.quantity})\n                                </Select.Option>)}\n                        </Select>\n                    )}\n                </Form.Item>\n            }, {\n                title: 'Quantity',\n                key: 'quantity',\n                dataIndex: 'quantity',\n                render: (item, record) => <Form.Item\n                    key={`quantity[${record._id}]`}\n                    {...formItemLayout}>\n                    {getFieldDecorator(`quantity[${record._id}]`, {\n                        validateTrigger: ['onChange', 'onBlur'],\n                        rules: [{\n                            required: true,\n                            message: \"This field is required.\",\n                        }],\n                    })(\n                        <InputNumber min={0} max={this.state.maxQuantityforConsume[record._id]} placeholder=\"quantity\"/>\n                    )}\n                </Form.Item>\n            },]);\n        }\n        consumeRow = consumeRow.concat([{\n            title: 'Action',\n            key: '_id',\n            dataIndex: '_id',\n            render: (value, record) => <a onClick={() => that.remove(record._id)}>Delete</a>\n        }]);\n        return <div>\n            <Spin spinning={this.state.loading}>\n                <Card title={this.state.classType + \" Stock\"} extra={\n                    <Search\n                        loading={this.state.loadingQr}\n                        value={this.state.qrValue}\n                        onChange={this.setQrValue}\n                        placeholder=\"Search QR Code\"\n                        onSearch={this.addItemThroughQR}\n                        style={{width: 200}}\n                    />}>\n                    <Row gutter={16}>\n                        <Col span={7}>\n                            <Tabs size=\"small\" type=\"card\">\n                                {INVENTORY_ITEM_TYPE.map(itemType => <TabPane tab={itemType.label} key={itemType.value}>\n                                    <div style={{backgroundColor: '#ddd', padding: 8}}>\n                                        <Input.Search key={itemType.label}\n                                                      placeholder={\"Search in \" + itemType.label + \"...\"}\n                                                      onSearch={value => this.searchValues(itemType.label, value)}/>\n                                    </div>\n                                    <List size={\"small\"}\n                                          itemLayout=\"horizontal\"\n                                          dataSource={this.state.items && this.state.items[itemType.value] ? this.state.items[itemType.value].results : []}\n                                          renderItem={item => (\n                                              <List.Item>\n                                                  <List.Item.Meta\n                                                      title={item.name}\n                                                      description={item.item_type_stock.item_stock && item.item_type_stock.item_stock.map((stock) =>\n                                                          <span>#{stock.batch_number}({stock.quantity})<br/></span>)}/>\n                                                  <Button type=\"primary\" size=\"small\" shape=\"circle\"\n                                                          onClick={() => this.add(item)} icon={\"arrow-right\"}/>\n                                              </List.Item>)}/>\n                                    {this.state.items && this.state.items[itemType.value] ?\n                                        <div style={{textAlign: 'center'}}>\n                                            <a style={{margin: 5}}\n                                               disabled={!this.state.items[itemType.value].previous}\n                                               onClick={() => this.loadItemsList(itemType.value, this.state.items[itemType.value].previous)}>\n                                                <Icon type=\"left\"/>Previous\n                                            </a>\n                                            <Divider type={\"vertical\"}/>\n                                            <a style={{margin: 5}} disabled={!this.state.items[itemType.value].next}\n                                               onClick={() => this.loadItemsList(itemType.value, this.state.items[itemType.value].next)}>\n                                                Next<Icon type=\"right\"/>\n                                            </a>\n                                        </div> : null}\n                                </TabPane>)}\n                            </Tabs>\n                        </Col>\n                        <Col span={17}>\n                            <Form onSubmit={this.handleSubmit}>\n                                {this.state.classType == CONSUME_STOCK ?\n                                    <Row>\n                                        <Col span={16}>\n                                            <Form.Item\n                                                key={`type_of_consumption`}\n                                                label={\"Type of Consumption\"}\n                                                {...{\n                                                    labelCol: {span: 6},\n                                                    wrapperCol: {span: 14},\n                                                }}>\n                                                {getFieldDecorator(`type_of_consumption`, {\n                                                    validateTrigger: ['onChange', 'onBlur'],\n                                                    rules: [{\n                                                        required: true,\n                                                        message: \"This field is required.\",\n                                                    }],\n                                                })(\n                                                    <Select>\n                                                        {TYPE_OF_CONSUMPTION.map(item => <Select.Option\n                                                            value={item.value}>{item.label}</Select.Option>)}\n                                                    </Select>\n                                                )}\n                                            </Form.Item>\n                                        </Col>\n                                        {/*<Col span={8}>*/}\n                                        {/*<Search*/}\n                                        {/*loading={this.state.loadingQr}*/}\n                                        {/*value={this.state.qrValue}*/}\n                                        {/*onChange={this.setQrValue}*/}\n                                        {/*placeholder=\"Search QR Code\"*/}\n                                        {/*onSearch={this.addItemThroughQR}*/}\n                                        {/*style={{width: 200}}*/}\n                                        {/*/>*/}\n                                        {/*</Col>*/}\n                                    </Row>\n                                    : null}\n\n                                {/*{this.state.classType == CONSUME_STOCK ?*/}\n                                {/*<Form.Item*/}\n                                {/*key={`supplier`}*/}\n                                {/*label={\"Supplier\"}*/}\n                                {/*{...{*/}\n                                {/*labelCol: {span: 6},*/}\n                                {/*wrapperCol: {span: 14},*/}\n                                {/*}}>*/}\n                                {/*{getFieldDecorator(`addedOn`, {*/}\n                                {/*validateTrigger: ['onChange', 'onBlur'],*/}\n                                {/*rules: [{*/}\n                                {/*message: \"This field is required.\",*/}\n                                {/*}],*/}\n                                {/*})(*/}\n                                {/*<Select>*/}\n                                {/*/!*{this.state.suppliersList && this.state.suppliersList.map(item =>*!/*/}\n                                {/*/!*<Select.Option*!/*/}\n                                {/*/!*value={item.id}>{item.name}</Select.Option>)}*!/*/}\n                                {/*</Select>*/}\n                                {/*)}*/}\n                                {/*</Form.Item>*/}\n                                {/*: null}*/}\n\n                                <Table pagination={false}\n                                       bordered={true}\n                                       rowKey={record => record._id}\n                                       dataSource={this.state.tableFormValues}\n                                       columns={consumeRow}/>\n                                {/*<List>{formItems}</List>*/}\n\n                                <Affix offsetBottom={0}>\n                                    <Card>\n                                        <Row>\n                                            <Col span={8}>\n                                                <Form.Item {...formItemLayoutWithOutLabel}>\n                                                    <Button type=\"primary\" htmlType=\"submit\">Submit</Button>\n                                                    {that.props.history ?\n                                                        <Button style={{margin: 5}}\n                                                                onClick={() => that.props.history.goBack()}>\n                                                            Cancel\n                                                        </Button> : null}\n                                                </Form.Item>\n                                            </Col>\n                                            <Col span={8}>\n                                                <Form.Item\n                                                    key={`date`}\n                                                    label={this.state.classType == ADD_STOCK ? \"Added On\" : \"Consumed On\"}\n                                                    {...{\n                                                        labelCol: {span: 10},\n                                                        wrapperCol: {span: 14},\n                                                    }}>\n                                                    {getFieldDecorator(`date`, {\n                                                        // validateTrigger: ['onChange', 'onBlur'],\n                                                        rules: [{\n                                                            required: true,\n                                                            message: \"This field is required.\",\n                                                        }],\n                                                        initialValue: moment(),\n                                                    })(\n                                                        <DatePicker/>\n                                                    )}\n                                                </Form.Item>\n\n                                                <Form.Item\n                                                    key={`bill_number`}\n                                                    label='Bill Number'\n                                                    {...{\n                                                        labelCol: {span: 10},\n                                                        wrapperCol: {span: 14},\n                                                    }}>\n                                                    {getFieldDecorator(`bill_number`, {\n                                                        validateTrigger: ['onChange', 'onBlur'],\n                                                        rules: [{\n                                                            required: true,\n                                                            message: \"This field is required.\",\n                                                        }],\n\n                                                    })(\n                                                        <Input/>\n                                                    )}\n                                                </Form.Item>\n\n\n                                                {this.state.classType == ADD_STOCK ? <div>\n                                                    {this.state.customSupplier ?\n                                                        <Form.Item\n                                                            key={`supplier_name`}\n                                                            label={\"Supplier\"}\n                                                            {...{\n                                                                labelCol: {span: 10},\n                                                                wrapperCol: {span: 14},\n                                                            }}>\n                                                            {getFieldDecorator(`supplier_name`, {\n                                                                validateTrigger: ['onChange', 'onBlur'],\n                                                                rules: [{\n                                                                    required: true,\n                                                                    message: \"This field is required.\",\n                                                                }],\n                                                            })(\n                                                                <Input/>\n                                                            )}\n                                                            {this.state.customSupplier ?\n                                                                <a onClick={() => this.changeSupplierType(false)}>Cancel</a> : null}\n                                                        </Form.Item> : <Form.Item\n                                                            key={`supplier`}\n                                                            label={\"Supplier\"}\n                                                            {...{\n                                                                labelCol: {span: 10},\n                                                                wrapperCol: {span: 14},\n                                                            }}>\n                                                            {getFieldDecorator(`supplier`, {\n                                                                validateTrigger: ['onChange', 'onBlur'],\n                                                                rules: [{\n                                                                    required: true,\n                                                                    message: \"This field is required.\",\n                                                                }],\n                                                            })(<Select>\n                                                                {this.state.supplierList.map(item => <Select.Option\n                                                                    value={item.id}>\n                                                                    {item.name}\n                                                                </Select.Option>)}\n                                                            </Select>)}\n                                                            {this.state.customSupplier ? null :\n                                                                <a onClick={() => this.changeSupplierType(true)}>Add\n                                                                    New</a>}\n                                                        </Form.Item>} </div> : null}\n                                            </Col>\n                                            <Col span={6} offset={2}>\n                                                <Form.Item key={'file'} {...formItemLayout}>\n                                                    {getFieldDecorator('file', {})(\n                                                        <Upload {...singleUploadprops}>\n                                                            <Button>\n                                                                <Icon type=\"upload\"/> Select File\n                                                            </Button>\n\n                                                        </Upload>\n                                                    )}\n                                                </Form.Item>\n                                            </Col>\n                                            {this.state.classType == ADD_STOCK ?\n                                                <Col style={{textAlign: 'center'}} span={8}>\n\n                                                    <h3>Grand\n                                                        Total: <b>{this.state.tableFormValues.reduce(function (total, item) {\n                                                            if (that.state.tempValues['quantity' + item._id] && that.state.tempValues['unit_cost' + item._id]) {\n                                                                return total + (that.state.tempValues['quantity' + item._id] * that.state.tempValues['unit_cost' + item._id])\n                                                            }\n                                                            return total\n                                                        }, 0)}</b></h3>\n                                                </Col>\n                                                : null}\n                                        </Row>\n                                    </Card>\n                                </Affix>\n\n                            </Form>\n\n                        </Col>\n                    </Row>\n                </Card>\n            </Spin>\n        </div>\n\n    }\n}\n\nexport default Form.create()(AddOrConsumeStock);\n","import React from \"react\";\nimport {Button, Card, Col, Divider, Icon, Input, Modal, Popconfirm, Radio, Row, Spin, Table, Tag} from \"antd\";\nimport {getAPI, interpolate, putAPI, startLoadingMessage, stopLoadingMessage} from \"../../../utils/common\";\nimport {INVENTORY_ITEM_API, SINGLE_INVENTORY_ITEM_API, INVENTORY_ITEM_EXPORT} from \"../../../constants/api\";\nimport {Link, Route, Switch} from \"react-router-dom\";\nimport AddorEditInventoryItem from \"./AddorEditInventoryItem\";\nimport AddOrConsumeStock from \"./AddOrConsumeStock\"\nimport {ADD_STOCK, CONSUME_STOCK, INVENTORY_ITEM_TYPE} from \"../../../constants/hardData\"\nimport InfiniteFeedLoaderButton from \"../../common/InfiniteFeedLoaderButton\";\nimport moment from \"moment\";\nimport PermissionDenied from \"../../common/errors/PermissionDenied\";\nimport {\n    ASCENDING_ORDER,\n    ERROR_MSG_TYPE,\n    SUCCESS_MSG_TYPE,\n} from \"../../../constants/dataKeys\";\nimport {BACKEND_BASE_URL} from \"../../../config/connect\";\nimport Search from \"antd/es/input/Search\";\n\nexport default class InventoryItemList extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            inventoryItems: [], //All List\n            inventoryItemList: [], // Filtered List\n            stockModalVisibility: false,\n            itemTypeFilter: \"ALL\",\n            itemStockFilter: \"ALL\",\n            loading: true,\n            nextItemPage: null\n        }\n        this.loadData = this.loadData.bind(this);\n        this.showAddOrConsumeModal = this.showAddOrConsumeModal.bind(this);\n        this.setActionType = this.setActionType.bind(this);\n        this.changeFilter = this.changeFilter.bind(this);\n        this.deleteObject = this.deleteObject.bind(this);\n        this.excelExport = this.excelExport.bind(this);\n        this.pdfExport = this.pdfExport.bind(this);\n    }\n\n    componentDidMount() {\n        this.loadData();\n    }\n\n    loadData(page = 1) {\n        let that = this;\n        that.setState({\n            loading: true\n        });\n        let successFn = function (recData) {\n            let data = recData.results;\n            that.setState(function (prevState) {\n                if (recData.current == 1) {\n                    return {\n                        inventoryItems: data,\n                        loading: false,\n                        nextItemPage: recData.next\n                    }\n                } else {\n                    return {\n                        inventoryItems: [...prevState.inventoryItems, ...data],\n                        loading: false,\n                        nextItemPage: recData.next\n                    }\n                }\n\n            })\n        };\n        let errorFn = function () {\n            that.setState({\n                loading: false\n            })\n        };\n        let reqParams = {\n            maintain_inventory: true,\n            practice: this.props.active_practiceId,\n            page: page,\n            sort:ASCENDING_ORDER,\n            on:'total_quantity',\n        };\n        if (that.state.itemTypeFilter != 'ALL') {\n            reqParams.item_type = that.state.itemTypeFilter\n        }\n        if (that.state.itemStockFilter != 'ALL') {\n            reqParams.filter_type = that.state.itemStockFilter\n        }\n        if (that.state.filterItemName) {\n            reqParams.item_name = that.state.filterItemName\n        }\n        if (that.state.filterItemCode) {\n            reqParams.code = that.state.filterItemCode\n        }\n        getAPI(INVENTORY_ITEM_API, successFn, errorFn, reqParams);\n    }\n\n    deleteObject(value) {\n        var that = this;\n        let reqData = {\n            is_active: false\n        }\n        let successFn = function (data) {\n            that.loadData();\n        };\n        let errorFn = function () {\n        };\n        putAPI(interpolate(SINGLE_INVENTORY_ITEM_API, [value]), reqData, successFn, errorFn);\n\n    }\n\n    setActionType(type, item_Id) {\n        this.setState({\n            itemId: item_Id,\n            actionType: type,\n        })\n        this.showAddOrConsumeModal(true);\n    }\n\n    showAddOrConsumeModal(type) {\n        this.setState({\n            stockModalVisibility: type,\n        })\n    }\n\n    changeFilter = (e) => {\n        let that = this;\n        this.setState({\n            [e.target.name]: e.target.value\n        }, function () {\n            that.loadData()\n        })\n    }\n    changeInventoryFilters = (key, value) => {\n        let that = this;\n        that.setState( {\n            [key]: value\n        },function () {\n            that.loadData();\n        })\n    }\n\n    excelExport() {\n        let that = this;\n        let msg = startLoadingMessage(\"Generating Report...\");\n        let successFn = function (data) {\n            stopLoadingMessage(msg, SUCCESS_MSG_TYPE, \"Report Generated Successfully!!\");\n            if (data.report_csv)\n                window.open(BACKEND_BASE_URL + data.report_csv);\n        }\n        let errorFn = function () {\n            stopLoadingMessage(msg, ERROR_MSG_TYPE, \"Report Generation Failed!!\");\n        }\n        let reqParams = {\n            maintain_inventory: true,\n            practice: this.props.active_practiceId,\n            sort:ASCENDING_ORDER,\n            on:'total_quantity',\n        };\n        if (that.state.itemTypeFilter != 'ALL') {\n            reqParams.item_type = that.state.itemTypeFilter\n        }\n        if (that.state.itemStockFilter != 'ALL') {\n            reqParams.filter_type = that.state.itemStockFilter\n        }\n        if (that.state.filterItemName) {\n            reqParams.item_name = that.state.filterItemName\n        }\n        if (that.state.filterItemCode) {\n            reqParams.code = that.state.filterItemCode\n        }\n        getAPI(INVENTORY_ITEM_EXPORT, successFn, errorFn, reqParams);\n    }\n\n    pdfExport() {\n        let that = this;\n        let msg = startLoadingMessage(\"Generating Report...\");\n        let successFn = function (data) {\n            stopLoadingMessage(msg, SUCCESS_MSG_TYPE, \"Report Generated Successfully!!\");\n            if (data.report_pdf)\n                window.open(BACKEND_BASE_URL + data.report_pdf);\n        }\n        let errorFn = function () {\n            stopLoadingMessage(msg, ERROR_MSG_TYPE, \"Report Generation Failed!!\");\n        }\n        let reqParams = {\n            maintain_inventory: true,\n            practice: this.props.active_practiceId,\n            sort:ASCENDING_ORDER,\n            on:'total_quantity',\n        };\n        if (that.state.itemTypeFilter != 'ALL') {\n            reqParams.item_type = that.state.itemTypeFilter\n        }\n        if (that.state.itemStockFilter != 'ALL') {\n            reqParams.filter_type = that.state.itemStockFilter\n        }\n        if (that.state.filterItemName) {\n            reqParams.item_name = that.state.filterItemName\n        }\n        if (that.state.filterItemCode) {\n            reqParams.code = that.state.filterItemCode\n        }\n        getAPI(INVENTORY_ITEM_EXPORT, successFn, errorFn, reqParams);\n    }\n\n    render() {\n        const taxesdata = {};\n        if (this.state.taxes_list) {\n            this.state.taxes_list.forEach(function (tax) {\n                taxesdata[tax.id] = tax;\n            })\n        }\n        const manufacturerData = {}\n        if (this.state.manufacture_list) {\n            this.state.manufacture_list.forEach(function (manufacturer) {\n                manufacturerData[manufacturer.id] = manufacturer.name;\n            })\n        }\n        const vendorData = {}\n        if (this.state.vendor_list) {\n            this.state.vendor_list.forEach(function (vendor) {\n                vendorData[vendor.id] = vendor.name;\n            })\n        }\n        let that = this;\n        let columns = [{\n            title: 'Name',\n            dataIndex: 'name',\n            key: 'name',\n            // render: (value,record) => <span>{record.inventory_item.name}</span>\n        }, {\n            title: 'HSN',\n            dataIndex: 'code',\n            key: 'code',\n            // render: (value,record) => <span>{record.inventory_item.code}</span>\n        }, {\n            title: 'Inventory Stock',\n            dataIndex: 'total_quantity',\n            key: 'total_quantity',\n            render: (value, record) => <span>{value} {value <= record.re_order_level ?\n                <Tag color=\"#f50\">Low</Tag> : null}</span>\n\n        }, {\n            title: 'Expired Stock',\n            dataIndex: 'item_type_stock',\n            key: 'expired_stock',\n            export: function (item_type_stock, record) {\n                let totalStock = 0;\n                let currentDate = moment();\n                if (item_type_stock.item_stock)\n                    item_type_stock.item_stock.forEach(function (stock) {\n                        if (currentDate >= moment(stock.expiry_date, \"YYYY-MM-DD\"))\n                            totalStock += (Number.isInteger(stock.quantity) ? stock.quantity : 0)\n                    });\n                return totalStock;\n            },\n            render: function (item_type_stock, record) {\n                let totalStock = 0;\n                let currentDate = moment();\n                if (item_type_stock.item_stock)\n                    item_type_stock.item_stock.forEach(function (stock) {\n                        if (currentDate >= moment(stock.expiry_date, \"YYYY-MM-DD\"))\n                            totalStock += (Number.isInteger(stock.quantity) ? stock.quantity : 0)\n                    });\n                return <span>{totalStock}</span>;\n            }\n        }, {\n            title: 'Retail Price (INR)',\n            dataIndex: 'retail_without_tax',\n            key: 'retail_without_tax',\n            render: (value, record) => <span>{record.retail_without_tax}\n                </span>\n        }, {\n            title: 'Tax',\n            dataIndex: 'taxes',\n            key: 'taxes',\n            render: (value, record) => <span>\n                {record.taxes_data && record.taxes_data.map(tax =>\n                    <Tag>\n                        <small> {(tax ? tax.name + \"@\" + tax.tax_value + \"%\" : null)}</small>\n                    </Tag>\n                )}\n                </span>\n        }, {\n            title: \"MLM Margin\",\n            dataIndex: \"margin_data\",\n            key: \"margin\",\n            render: (margin) => (\n                <span>{margin ? margin.name : null}\n                </span>)\n        }, {\n            title: 'Item type',\n            dataIndex: 'item_type',\n            key: 'item_type',\n            // render: (value,record) => <span>{record.inventory_item.item_type}</span>\n        }, {\n            title: 'Reorder Level',\n            dataIndex: 're_order_level',\n            key: 're_order_level',\n            // render: (value, record) => <span>{record.inventory_item.re_order_level}</span>\n        }, {\n            title: 'Manufacturer',\n            key: 'manufacturer',\n            export: function (text, record) {\n                return record.manufacturer_data ? record.manufacturer_data.name : '';\n            },\n            render: (text, record) => (\n                <span> {record.manufacturer_data ? record.manufacturer_data.name : ''}</span>\n            )\n        }, {\n            title: 'Actions',\n            render: (item) => {\n                return <div>\n                    <Link to={\"/inventory/edit/\" + item.id}>Edit</Link>\n                    <Divider type=\"vertical\"/>\n                    {/* <Link to={\"/inventory/edit-item-type/\" + item.id}>Edit stock type </Link>\n                        <Divider type=\"vertical\"/> */}\n                    {item.total_quantity == 0 ?\n                        <Popconfirm title=\"Are you sure delete this item?\"\n                                    onConfirm={() => that.deleteObject(item.id)} okText=\"Yes\" cancelText=\"No\">\n                            <a>Delete</a>\n                        </Popconfirm> : <Tag color=\"red\">Can Not Delete</Tag>}\n                </div>\n            }\n        }];\n        return <div>\n            <Switch>\n                <Route path=\"/inventory/add\"\n                       render={(route) => (that.props.activePracticePermissions.AddInventoryItem || that.props.allowAllPermissions ?\n                           <AddorEditInventoryItem {...route} {...this.props} {...this.state}\n                                                   loadData={this.loadData}/> : <PermissionDenied/>)}/>\n\n                {/* <Route path=\"/inventory/edit-item-type/:id\"\n                       render={(route) => <AddOrConsumeStock key={ADD_STOCK}\n                       type={ADD_STOCK}\n                       loadData={this.loadData}\n                       {...this.state} {...route} {...this.props}/>}/> */}\n\n                <Route exact path='/inventory/edit/:id'\n                       render={(route) => (that.props.activePracticePermissions.AddInventoryItem || that.props.allowAllPermissions ?\n                           <AddorEditInventoryItem {...this.state} {...this.props} {...route}\n                                                   loadData={this.loadData}/> : <PermissionDenied/>)}/>\n\n                <Route exact path='/inventory/consume-stock'\n                       render={(route) => (that.props.activePracticePermissions.AddInventoryStock || that.props.allowAllPermissions ?\n                           <AddOrConsumeStock key={CONSUME_STOCK} type={CONSUME_STOCK}\n                                              loadData={this.loadData} {...this.state} {...route} {...this.props}/> :\n                           <PermissionDenied/>)}/>\n\n                <Route exact path='/inventory/add-stock'\n                       render={(route) => (that.props.activePracticePermissions.ConsumeInventoryStock || that.props.allowAllPermissions ?\n                           <AddOrConsumeStock key={ADD_STOCK} type={ADD_STOCK}\n                                              loadData={this.loadData}{...this.state} {...route} {...this.props}/> :\n                           <PermissionDenied/>)}/>\n\n                <Route>\n                    <Card title=\"Inventory List\"\n                          extra={<Button.Group>\n                              <Link to=\"/inventory/add\"><Button type=\"primary\"\n                                                                disabled={!that.props.activePracticePermissions.AddInventoryItem && !that.props.allowAllPermissions}><Icon\n                                  type=\"plus\"/> Add Item</Button></Link>\n\n                              <Link to=\"/inventory/add-stock\"> <Button\n                                  disabled={!that.props.activePracticePermissions.AddInventoryStock && !that.props.allowAllPermissions} type=\"primary\">Add\n                                  Stock</Button></Link>\n                              <Link to=\"/inventory/consume-stock\"><Button\n                                  disabled={!that.props.activePracticePermissions.ConsumeInventoryStock && !that.props.allowAllPermissions} type=\"primary\">Consume\n                                  Stock</Button></Link>\n                          </Button.Group>}>\n                        <Row>\n                            <Radio.Group name=\"itemTypeFilter\" size=\"small\" defaultValue={\"ALL\"} buttonStyle=\"solid\"\n                                         onChange={this.changeFilter} style={{margin: '10px'}}>\n                                <Radio.Button value={\"ALL\"}>ALL</Radio.Button>\n                                {INVENTORY_ITEM_TYPE.map(item =>\n                                    <Radio.Button value={item.value}>\n                                        {item.label}\n                                    </Radio.Button>)}\n                            </Radio.Group>\n                            <Radio.Group name=\"itemStockFilter\" size=\"small\" defaultValue={\"ALL\"} buttonStyle=\"solid\"\n                                         style={{margin: '10px', float: 'right'}} onChange={this.changeFilter}>\n                                <Radio.Button value={\"ALL\"}>ALL</Radio.Button>\n                                <Radio.Button value={\"Low\"}>Low</Radio.Button>\n                                <Radio.Button value={\"Expired\"}>Expired</Radio.Button>\n                            </Radio.Group>\n                        </Row>\n                        <Row gutter={16} style={{marginBottom: 10}}>\n                            <Col span={4}>\n                                <Button.Group size=\"small\">\n                                    <Button disabled={this.state.loading} type=\"primary\"\n                                            onClick={this.excelExport}><Icon\n                                        type=\"file-excel\"/> Excel</Button>\n                                    <Button disabled={this.state.loading} type=\"primary\" onClick={this.pdfExport}><Icon\n                                        type=\"file-pdf\"/> PDF</Button>\n                                </Button.Group>\n                            </Col>\n\n                            <Col span={2} style={{textAlign: \"right\"}}>\n                                <b> Item Name</b>\n                            </Col>\n                            <Col span={4}>\n                                <Input style={{width: '100%'}} value={this.state.filterItemName}\n                                       allowClear={true}\n                                       // disabled={this.state.loading}\n                                       placeholder={\"Item Name\"}\n                                       onChange={(e) => this.changeInventoryFilters('filterItemName', e.target.value)}/>\n                            </Col>\n                            <Col span={2} style={{textAlign: \"right\"}}>\n                                <b> HSN</b>\n                            </Col>\n                            <Col span={4}>\n                                <Input style={{width: '100%'}} value={this.state.filterItemCode}\n                                       allowClear={true}\n                                       // disabled={this.state.loading}\n                                       placeholder={\"HSN Number\"}\n                                       onChange={(e) => this.changeInventoryFilters('filterItemCode', e.target.value)}/>\n                            </Col>\n                            {/*<Col span={8}>*/}\n                            {/*    <Button type={\"primary\"} onClick={()=>this.loadData()}> Filter Items</Button>*/}\n                            {/*</Col>*/}\n\n\n                        </Row>\n\n                        <Row>\n                            <Table bordered={true}\n                                   pagination={false}\n                                   hideReport={true}\n                                   dataSource={this.state.inventoryItems.sort((a,b) =>parseInt(b.total_quantity) -parseInt(a.total_quantity))}\n                                   columns={columns}/>\n                            <Spin spinning={this.state.loading}>\n                                <Row/>\n                            </Spin>\n                            <InfiniteFeedLoaderButton\n                                loaderFunction={() => this.loadData(this.state.nextItemPage)}\n                                loading={this.state.loading}\n                                hidden={!this.state.nextItemPage}/>\n                        </Row>\n                        <Modal visible={this.state.stockModalVisibility}\n                               title={\"Stock\" + this.state.actionType}\n                               onOk={() => this.showAddOrConsumeModal(false)}\n                               onCancel={() => this.showAddOrConsumeModal(false)}\n                               footer={null}>\n                            <AddOrConsumeStock showAddOrConsumeModal={this.showAddOrConsumeModal}\n                                               itemId={this.state.itemId}\n                                               actionType={this.state.actionType}/>\n                        </Modal>\n                    </Card>\n                </Route>\n            </Switch>\n\n        </div>\n    }\n\n\n}\n","import React from \"react\";\nimport {Layout} from \"antd\";\nimport {Route, Switch} from \"react-router-dom\";\nimport VendorList from \"./vendor/VendorList\";\nimport ExpensesList from \"./expenses/ExpensesList\";\nimport ManufactureList from \"./manufacture/ManufactureList\";\nimport LabList from \"./labs/LabList\";\nimport ActivityList from \"./activities/ActivityList\";\nimport InventoryItemList from \"./inventoryItem/InventoryItemList\";\nimport PermissionDenied from \"../common/errors/PermissionDenied\";\n\nconst {Content} = Layout;\nexport default class InventoryHome extends React.Component {\n    constructor(props) {\n        super(props);\n    }\n\n    render() {\n        let that =this;\n        return <Content className=\"main-container\" style={{\n            margin: '24px 16px',\n            // padding: 24,\n            minHeight: 280,\n            // marginLeft: '200px'\n        }}>\n\n            <Switch>\n                <Route path=\"/inventory/vendor\" render={(route) =>(that.props.activePracticePermissions.ViewVendor || that.props.allowAllPermissions?\n                    <VendorList {...this.props} {...route}/>:<PermissionDenied/>)}/>\n                    \n                <Route path=\"/inventory/expenses\" render={(route) =>(that.props.activePracticePermissions.ViewExpenses || that.props.allowAllPermissions ?\n                    <ExpensesList {...this.props} {...route}/>:<PermissionDenied/>)}/>\n\n                <Route path=\"/inventory/manufacture\" render={(route) =>(that.props.activePracticePermissions.ViewManufacturer || that.props.allowAllPermissions?\n                    <ManufactureList {...that.props} {...this.state} {...route}/>:<PermissionDenied/>)}/>\n                <Route path=\"/inventory/lab\" render={(route) => (that.props.activePracticePermissions.Labs || that.props.allowAllPermissions ?\n                    <LabList {...this.props}/>:<PermissionDenied/>)}/>\n                <Route path=\"/inventory/activity\" render={(route) =>(that.props.activePracticePermissions.ViewActivities || that.props.allowAllPermissions ?\n                    <ActivityList {...this.props} {...route}/>:<PermissionDenied/>)}/>\n                <Route path=\"/inventory\" render={(route)=> (that.props.activePracticePermissions.ViewInventory || that.props.allowAllPermissions ?\n                    <InventoryItemList {...route} {...this.props}/>:<PermissionDenied/>)}/>\n            </Switch>\n        </Content>\n    }\n}\n"],"sourceRoot":""}