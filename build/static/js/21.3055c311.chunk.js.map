{"version":3,"sources":["app/components/inventory/vendor/AddVendor.js","app/components/inventory/vendor/VendorList.js","app/components/inventory/expenses/AddExpenses.js","app/components/inventory/expenses/ExpensesList.js","app/components/inventory/manufacture/AddManufacture.js","app/components/inventory/manufacture/ManufactureList.js","app/components/inventory/labs/AddLab.js","app/components/inventory/labs/LabList.js","app/components/inventory/activities/ActivityList.js","app/components/inventory/inventoryItem/AddorEditInventoryItem.js","app/components/inventory/inventoryItem/AddOrConsumeStock.js","app/components/inventory/inventoryItem/InventoryItemList.js","app/components/inventory/InventoryHome.js"],"names":["AddVendor","props","changeRedirect","redirectVar","state","redirect","setState","editData","this","match","params","id","loadData","that","getAPI","interpolate","SINGLE_VENDOR_API","data","editformProp","fields","label","key","initialValue","name","type","INPUT_FIELD","required","description","successFn","displayMessage","SUCCESS_MSG_TYPE","errorFn","action","method","TestFormLayout","create","DynamicFieldsForm","formProp","history","replace","VENDOR_API","active_practiceId","defaultValues","exact","path","render","route","title","to","React","Component","VendorList","vendors","bind","value","reqData","console","log","putAPI","vendorsColoumns","dataIndex","record","onConfirm","deleteVendor","okText","cancelText","disabled","activePracticePermissions","DeleteVendor","EditVendor","allowAllPermissions","PermissionDenied","extra","CustomizedTable","columns","dataSource","hideReport","ExportVendor","AddExpenses","loadExpensetypes","loadPaymentModes","loadVendors","PAYMENT_MODES","paymentModes","SINGLE_EXPENSES_API","EXPENSE_TYPE","expense_types","paymentModesOptions","forEach","drug","push","mode","expenseTypesOptions","vendorsOptions","expense_date","moment","DATE_PICKER","format","amount","NUMBER_FIELD","follow","SELECT_FIELD","options","expense_type","payment_mode","bank_name","TEXT_FIELD","minRows","maxRows","remark","EXPENSES_API","ExpensesList","changeExpenseFilters","loading","expenses","practice","selectedPaymentMode","selectedExpenseType","start","selectedStartDate","end","selectedEndDate","expenseTypes","subtract","loadExpenseTypes","deleted","deletedExpenses","deletedLoading","is_active","postAPI","showDeleted","expenseColoumns","export","text","EditExpenses","DeleteExpenses","deleteObject","gutter","style","marginBottom","span","textAlign","width","onChange","Option","map","item","allowClear","AddManufacture","SINGLE_MANUFACTURER_API","MANUFACTURER_API","EditManufacturer","ManufactureList","manufactures","deleteManufacture","reqDate","manufactureColoumns","DeleteManufacturer","ExportManufacturer","AddLab","getPatientListData","PATIENTS_LIST","patientListData","patientOptions","length","job_no","doctor_name","status","due_date","patient","editBlogData","SINGLE_LAB_API","LAB_API","LabList","lab","ActivityList","activity","loadActivityLog","ACTIVITY_API","CheckboxGroup","Group","AddorEditInventoryItem","loadDrugType","DRUG_TYPE_API","drugTypeList","onChangeHandeler","e","setFormParams","handleSubmit","preventDefault","form","validateFields","err","formData","retail_without_tax","retail_price","net_price","undefined","editInventoryItem","SINGLE_INVENTORY_ITEM_API","INVENTORY_ITEM_API","changeNetPrice","getFieldsValue","setFields","setTimeout","values","retail_with_tax","totalTaxAmount","taxes","taxid","taxes_list","taxObj","tax_value","retailPrice","toFixed","manufacture_list","vendor_list","drugUnitList","productMargin","loadTaxes","loadManufactureList","loadVendorList","loadDrugUnit","loadProductMargin","PRODUCT_MARGIN","TAXES","prevState","totalTax","taxes_data","tax","item_type","DRUG_UNIT_API","taxesOption","manufacturerOption","manufacturer","vendorOption","vendor","getFieldDecorator","formItemLayout","labelCol","wrapperCol","onSubmit","Item","rules","message","REQUIRED_FIELD_MESSAGE","placeholder","code","manufacturerType","editPrescreption","manufacturer_extra","onClick","option","stocking_unit","re_order_level","className","margin","INVENTORY_ITEM_TYPE","DRUG","valuePropName","perscribe_this","drugType","drug_type_extra","drug_type","strength","drugUnit","unit_type_extra","stength_unit","instructions","SUPPLIES","EQUIPMENT","htmlType","goBack","Search","MonthPicker","TabPane","tableFormFields","_id","quantity","batch","AddOrConsumeStock","changeSupplierType","customSupplier","loadItemsList","page","recData","items","maintain_inventory","searchStrings","item_name","remove","k","newTableFormValues","tableFormValues","formValue","add","randId","Math","random","keyCode","itemObject","item_add_type","classType","inventory_item","batch_number","date","bill_number","bill_file","file","response","image_path","ADD_STOCK","expiry_date","unit_cost","total_cost","supplier","supplier_name","CONSUME_STOCK","type_of_consumption","isValid","BULK_STOCK_ENTRY","searchValues","filterValues","filteredItemOfGivenType","toString","toLowerCase","includes","filteredItems","storeValue","tempValues","setFieldsValue","item_type_stock","addItemThroughQR","loadingQr","qrSplitted","split","SEARCH_THROUGH_QR","randomId","getFieldValue","flag","row","fieldsToBeSet","qrValue","qr","setQrValue","target","maxQuantityforConsume","supplierList","loadSupplierList","loadInventoryItemList","SUPPLIER_API","recordId","newMaxQuantityforConsume","item_stock","stock","xs","sm","singleUploadprops","makeURL","FILE_UPLOAD_API","headers","authorization","info","success","error","consumeRow","concat","validateTrigger","min","itemStock","Date","changeMaxQuantityforConsume","max","spinning","onSearch","size","itemType","tab","backgroundColor","padding","itemLayout","results","renderItem","Meta","total_quantity","shape","icon","previous","next","TYPE_OF_CONSUMPTION","pagination","bordered","rowKey","offsetBottom","offset","reduce","total","InventoryItemList","changeFilter","changeInventoryFilters","inventoryItemModalOpen","inventoryModal","inventoryItemObj","inventoryItemModalClose","inventoryItems","inventoryItemList","stockModalVisibility","itemTypeFilter","itemStockFilter","nextItemPage","showAddOrConsumeModal","setActionType","excelExport","pdfExport","current","reqParams","sort","ASCENDING_ORDER","on","filter_type","filterItemName","filterItemCode","filterMLM","item_Id","itemId","actionType","msg","startLoadingMessage","INVENTORY_ITEM_EXPORT","stopLoadingMessage","report_csv","window","open","BACKEND_BASE_URL","ERROR_MSG_TYPE","report_pdf","taxesdata","manufacturerData","vendorData","color","totalStock","currentDate","Number","isInteger","manufacturer_data","a","b","inventoryItemColumn","index","AddInventoryItem","AddInventoryStock","ConsumeInventoryStock","defaultValue","buttonStyle","Button","float","parseInt","InfiniteFeedLoaderButton","loaderFunction","hidden","visible","onOk","onCancel","footer","Content","InventoryHome","minHeight","ViewVendor","ViewExpenses","ViewManufacturer","Labs","ViewActivities","ViewInventory"],"mappings":"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","file":"static/js/21.3055c311.chunk.js","sourcesContent":["import {Card, Form, Row} from \"antd\";\nimport React from \"react\";\nimport {\n    INPUT_FIELD,\n    SUCCESS_MSG_TYPE,\n} from \"../../../constants/dataKeys\";\nimport DynamicFieldsForm from \"../../common/DynamicFieldsForm\";\nimport {displayMessage, getAPI, interpolate} from \"../../../utils/common\";\nimport {\n    SINGLE_VENDOR_API, VENDOR_API\n} from \"../../../constants/api\";\nimport {Route, Redirect} from \"react-router-dom\";\n\n\nexport default class AddVendor extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            editData: this.props.editData ? this.props.editData : null\n        }\n    }\n\n    changeRedirect = () => {\n        var redirectVar = this.state.redirect;\n        this.setState({\n            redirect: !redirectVar,\n        });\n    }\n\n    componentDidMount() {\n        if (this.props.match.params.id) {\n            if (!this.state.editData) {\n                this.loadData();\n            }\n        }\n    }\n\n    loadData() {\n        let that = this;\n        let successFn = function (data) {\n            that.setState({\n                editData: data,\n            })\n        }\n        let errorFn = function () {\n\n        }\n        getAPI(interpolate(SINGLE_VENDOR_API, [this.props.match.params.id]), successFn, errorFn);\n\n\n    }\n\n\n    render() {\n        let that = this;\n        const fields = [{\n            label: \"Name\",\n            key: \"name\",\n            initialValue: this.state.editData ? this.state.editData.name : null,\n            type: INPUT_FIELD,\n            required: true\n        }, {\n            label: \"Description\",\n            key: \"description\",\n            initialValue: this.state.editData ? this.state.editData.description : null,\n            type: INPUT_FIELD\n        }];\n\n\n        let editformProp;\n        if (this.state.editData) {\n            editformProp = {\n                successFn: function (data) {\n                    displayMessage(SUCCESS_MSG_TYPE, \"success\");\n                    that.props.loadData();\n                },\n                errorFn: function () {\n\n                },\n                action: interpolate(SINGLE_VENDOR_API, [this.props.match.params.id]),\n                method: \"put\",\n            }\n        }\n        const TestFormLayout = Form.create()(DynamicFieldsForm);\n\n        const formProp = {\n            successFn: function (data) {\n                displayMessage(SUCCESS_MSG_TYPE, \"success\");\n                that.props.loadData();\n                if (that.props.history){\n                    that.props.history.replace(\"/inventory/vendor\");\n                }\n            },\n            errorFn: function () {\n\n            },\n            action: interpolate(VENDOR_API, [that.props.active_practiceId]),\n            method: \"post\",\n        }\n        const defaultValues = [{\"key\": \"practice\", \"value\": this.props.active_practiceId}];\n        return <Row>\n            <Card>\n                <Route exact path='/inventory/vendor/edit/:id'\n                       render={(route) => (this.props.match.params.id ?\n                           <TestFormLayout defaultValues={defaultValues} title=\"Edit Vendor\"\n                                           changeRedirect={this.changeRedirect} formProp={editformProp}\n                                           {...route}\n                                           fields={fields}/> : <Redirect to={'/inventory/vendor'}/>)}/>\n                <Route exact path='/inventory/vendor/add'\n                       render={(route) => <TestFormLayout title=\"Add Vendor\" changeRedirect={this.changeRedirect}\n                                                     {...route}\n                                                     formProp={formProp} fields={fields}/>}/>\n            </Card>\n            {this.state.redirect && <Redirect to={'/inventory/vendor'}/>}\n        </Row>\n\n    }\n}\n","import {Button, Card, Icon,Popconfirm,Divider} from \"antd\";\nimport React from \"react\";\nimport {getAPI, interpolate,putAPI} from \"../../../utils/common\";\nimport {VENDOR_API ,SINGLE_VENDOR_API}from \"../../../constants/api\";\nimport {Route, Switch} from \"react-router\";\nimport AddVendor from \"./AddVendor\";\nimport {Link} from \"react-router-dom\";\nimport CustomizedTable from \"../../common/CustomizedTable\";\nimport PermissionDenied from \"../../common/errors/PermissionDenied\";\n\nexport default class VendorList extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            active_practiceId: this.props.active_practiceId,\n            vendors: null\n        };\n        this.loadData = this.loadData.bind(this);\n    }\n\n    componentDidMount() {\n        this.loadData();\n    }\n\n    loadData() {\n        let that = this;\n        let successFn = function (data) {\n            that.setState({\n                vendors: data\n            })\n        }\n        let errorFn = function () {\n\n        }\n        getAPI(interpolate(VENDOR_API, [this.props.active_practiceId]), successFn, errorFn);\n    }\n    deleteVendor(value){\n        var that = this;\n        let reqData={...value, 'is_active':false}\n        console.log(\"is_active\",reqData);\n        let successFn = function (data) {\n            that.loadData();\n            console.log(\"Deleted\");\n        }\n        let errorFn = function () {\n        };\n        putAPI(interpolate(SINGLE_VENDOR_API, [value]),reqData, successFn, errorFn);\n    }\n    render() {\n        let that = this;\n        const vendorsColoumns = [{\n            title: 'Name',\n            key: 'name',\n            dataIndex: 'name'\n        }, {\n            title: 'Details',\n            key: 'details',\n            dataIndex: 'description'\n        }, {\n            title: 'Action',\n            render: function (record) {\n                return <div>\n                    <Link to={'/inventory/vendor/edit/' + record.id}>Edit</Link>\n                    <Divider type=\"vertical\"/>\n                    <Popconfirm title=\"Are you sure delete this item?\"\n                                onConfirm={() => that.deleteVendor(record.id)} okText=\"Yes\" cancelText=\"No\">\n                       <a disabled={!that.props.activePracticePermissions.DeleteVendor}>Delete</a>\n                    </Popconfirm>\n\n                </div>\n            }\n        }];\n        return <div><Switch>\n            <Route exact path='/inventory/vendor/add'\n                   render={(route) =>(that.props.activePracticePermissions.EditVendor || that.props.allowAllPermissions ? <AddVendor {...this.state} {...route} loadData={that.loadData}/>:<PermissionDenied/>)}/>\n            <Route exact path='/inventory/vendor/edit/:id'\n                   render={(route) =>(that.props.activePracticePermissions.EditVendor || that.props.allowAllPermissions ? <AddVendor {...this.state} {...route} loadData={that.loadData}/>:<PermissionDenied/>)}/>\n            <Card title=\"Vendors\" extra={(that.props.activePracticePermissions.EditVendor?<Link to={\"/inventory/vendor/add\"}> <Button type=\"primary\"><Icon\n                type=\"plus\"/> Add</Button></Link>:null)}>\n                <CustomizedTable columns={vendorsColoumns} dataSource={this.state.vendors}  hideReport={!that.props.activePracticePermissions.ExportVendor}/>\n            </Card>\n        </Switch>\n        </div>\n    }\n}\n","import {Card, Form, Row} from \"antd\";\nimport React from \"react\";\nimport {\n    DATE_PICKER,\n    INPUT_FIELD, NUMBER_FIELD,\n    SELECT_FIELD,\n    SUCCESS_MSG_TYPE,\n    TEXT_FIELD,\n} from \"../../../constants/dataKeys\";\nimport DynamicFieldsForm from \"../../common/DynamicFieldsForm\";\nimport {displayMessage, getAPI, interpolate} from \"../../../utils/common\";\nimport {EXPENSE_TYPE, EXPENSES_API, PAYMENT_MODES, SINGLE_EXPENSES_API, VENDOR_API} from \"../../../constants/api\";\nimport {Route} from \"react-router\";\nimport {Redirect} from \"react-router-dom\";\nimport moment from \"moment\";\n\n\nexport default class AddExpenses extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            editData: this.props.editData ? this.props.editData : null\n        }\n    }\n\n    changeRedirect() {\n        var redirectVar = this.state.redirect;\n        this.setState({\n            redirect: !redirectVar,\n        });\n\n    }\n\n    componentDidMount() {\n        if (this.props.match.params.id) {\n            if (!this.state.editData) {\n                this.loadData();\n            }\n        }\n        this.loadExpensetypes();\n        this.loadPaymentModes();\n        this.loadVendors();\n\n\n    }\n\n    loadPaymentModes() {\n        var that = this;\n        let successFn = function (data) {\n            that.setState({\n                paymentModes: data,\n            })\n        };\n        let errorFn = function () {\n        };\n        getAPI(interpolate(PAYMENT_MODES, [this.props.active_practiceId]), successFn, errorFn);\n    }\n\n    loadData() {\n        let that = this;\n        let successFn = function (data) {\n            that.setState({\n                editData: data,\n            })\n        }\n        let errorFn = function () {\n\n        }\n        getAPI(interpolate(SINGLE_EXPENSES_API, [this.props.match.params.id]), successFn, errorFn);\n    }\n\n    loadExpensetypes() {\n        var that = this;\n        let successFn = function (data) {\n            that.setState({\n                expense_types: data,\n            })\n        };\n        let errorFn = function () {\n        };\n        getAPI(interpolate(EXPENSE_TYPE, [this.props.active_practiceId]), successFn, errorFn);\n    }\n\n    loadVendors() {\n        var that = this;\n        let successFn = function (data) {\n            that.setState({\n                vendors: data,\n            })\n        };\n        let errorFn = function () {\n        };\n        getAPI(interpolate(VENDOR_API, [this.props.active_practiceId]), successFn, errorFn);\n    }\n\n\n    render() {\n        const paymentModesOptions = []\n        if (this.state.paymentModes) {\n            this.state.paymentModes.forEach(function (drug) {\n                paymentModesOptions.push({label: (drug.mode), value: drug.id});\n            })\n        }\n        ;\n        const expenseTypesOptions = []\n        if (this.state.expense_types) {\n            this.state.expense_types.forEach(function (drug) {\n                expenseTypesOptions.push({label: (drug.name), value: drug.id});\n            })\n        }\n        const vendorsOptions = []\n        if (this.state.vendors) {\n            this.state.vendors.forEach(function (drug) {\n                vendorsOptions.push({label: (drug.name), value: drug.id});\n            })\n        }\n        const fields = [{\n            label: \"Expense Date\",\n            key: \"expense_date\",\n            required: true,\n            initialValue: this.state.editData ? this.state.editData.expense_date : moment(),\n            type: DATE_PICKER,\n            format: \"YYYY-MM-DD\"\n        }, {\n            label: \"Amount\",\n            key: \"amount\",\n            required: true,\n            initialValue: this.state.editData ? this.state.editData.amount : null,\n            type: NUMBER_FIELD,\n            follow:\"INR\"\n        }, {\n            label: \"Vendor\",\n            key: \"vendor\",\n            type: SELECT_FIELD,\n            initialValue: this.state.editData ? this.state.editData.vendors : null,\n            options: vendorsOptions\n        }, {\n            label: \"Expense type\",\n            key: \"expense_type\",\n            type: SELECT_FIELD,\n            initialValue: this.state.editData ? this.state.editData.expense_type.id : null,\n            options: expenseTypesOptions\n        }, {\n            label: \"Payment Mode\",\n            key: \"payment_mode\",\n            type: SELECT_FIELD,\n            required: true,\n            initialValue: this.state.editData ? this.state.editData.payment_mode.id : null,\n            options: paymentModesOptions\n        }, {\n            label: \"Bank Name\",\n            key: 'bank_name',\n            type: INPUT_FIELD,\n            initialValue: this.state.editData ? this.state.editData.bank_name : null,\n        }, {\n            label: \"Remark\",\n            key: 'remark',\n            type: TEXT_FIELD,\n            minRows: 2,\n            maxRows: 6,\n            initialValue: this.state.editData ? this.state.editData.remark : null,\n        },];\n\n\n        let editformProp;\n        let that = this;\n        if (this.state.editData) {\n            editformProp = {\n                successFn: function (data) {\n                    displayMessage(SUCCESS_MSG_TYPE, \"success\");\n                    that.props.loadData();\n                    that.changeRedirect();\n                    if (that.props.history){\n                        that.props.history.replace(\"/inventory/expenses\");\n                    }\n                },\n                errorFn: function () {\n\n                },\n                action: interpolate(SINGLE_EXPENSES_API, [this.props.match.params.id]),\n                method: \"put\",\n\n            }\n        }\n        const TestFormLayout = Form.create()(DynamicFieldsForm);\n\n        const formProp = {\n            successFn: function (data) {\n                displayMessage(SUCCESS_MSG_TYPE, \"success\");\n                that.props.loadData();\n                that.changeRedirect();\n                if (that.props.history){\n                    that.props.history.replace(\"/inventory/expenses\");\n                }\n            },\n            errorFn: function () {\n\n            },\n            action: EXPENSES_API,\n            method: \"post\",\n        }\n        const defaultValues = [{\"key\": \"practice\", \"value\": this.props.active_practiceId}];\n        return <Row>\n            <Card>\n                <Route exact path='/inventory/expenses/edit/:id'\n                       render={() => (this.props.match.params.id ?\n                           <TestFormLayout defaultValues={defaultValues} title=\"Edit Expense\"\n                                           changeRedirect={this.changeRedirect} formProp={editformProp}\n                                           fields={fields}/> : <Redirect to={'/inventory/expenses'}/>)}/>\n                <Route exact path='/inventory/expenses/add'\n                       render={() => <TestFormLayout title=\"Add Expenses\" changeRedirect={this.changeRedirect}\n                                                     formProp={formProp} fields={fields}\n                                                     defaultValues={defaultValues}/>}/>\n            </Card>\n            {this.state.redirect && <Redirect to={'/inventory/expenses'}/>}\n        </Row>\n\n    }\n}\n","import {Button, Card, Divider, Icon, Popconfirm, Row, Col, Select, DatePicker, Table} from \"antd\";\nimport React from \"react\";\nimport {getAPI, interpolate, postAPI} from \"../../../utils/common\";\nimport {EXPENSE_TYPE, EXPENSES_API, PAYMENT_MODES, SINGLE_EXPENSES_API} from \"../../../constants/api\";\nimport {Route, Switch} from \"react-router\";\nimport AddExpenses from \"./AddExpenses\";\nimport {Link} from \"react-router-dom\";\nimport moment from \"moment\";\nimport PermissionDenied from \"../../common/errors/PermissionDenied\";\n\nexport default class ExpensesList extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            active_practiceId: this.props.active_practiceId,\n            expenses: null,\n            expenseTypes: [],\n            loading: true,\n            paymentModes: [],\n            selectedExpenseType: null,\n            selectedPaymentMode: null,\n            selectedStartDate: moment().subtract(1, 'month'),\n            selectedEndDate: moment()\n        };\n        this.loadData = this.loadData.bind(this);\n    }\n\n    componentDidMount() {\n        this.loadExpenseTypes();\n        this.loadPaymentModes();\n        this.loadData();\n    }\n\n    loadExpenseTypes(deleted = false) {\n        var that = this;\n        let successFn = function (data) {\n            console.log(\"get table\");\n            if (deleted) {\n                that.setState({\n                    deletedExpenses: data,\n                    deletedLoading: false\n                })\n            } else {\n                that.setState({\n                    expenseTypes: data,\n                })\n            }\n        };\n        let errorFn = function () {\n        };\n        if (deleted) {\n            getAPI(interpolate(EXPENSE_TYPE, [this.props.active_practiceId]), successFn, errorFn, {deleted: true});\n        } else {\n            getAPI(interpolate(EXPENSE_TYPE, [this.props.active_practiceId]), successFn, errorFn);\n        }\n    }\n\n    loadPaymentModes() {\n        var that = this;\n        let successFn = function (data) {\n            console.log(\"get table\");\n            that.setState({\n                paymentModes: data,\n            })\n        };\n        let errorFn = function () {\n        };\n        getAPI(interpolate(PAYMENT_MODES, [this.props.active_practiceId]), successFn, errorFn);\n    }\n\n    changeExpenseFilters = (type, value) => {\n        let that = this;\n        this.setState({\n            [type]: value\n        }, function () {\n            that.loadData();\n        })\n    }\n    loadData = () => {\n        let that = this;\n        that.setState({\n            loading: true\n        })\n        let successFn = function (data) {\n            that.setState({\n                expenses: data,\n                loading: false\n            })\n            console.log(\"log data\", that.state.expenses)\n        }\n        let errorFn = function () {\n            that.setState({\n                loading: false\n            })\n\n        }\n        getAPI(EXPENSES_API, successFn, errorFn, {\n            practice:that.props.active_practiceId,\n            payment_mode: that.state.selectedPaymentMode,\n            expense_type: that.state.selectedExpenseType,\n            start: that.state.selectedStartDate.format(),\n            end: that.state.selectedEndDate.format(),\n        });\n    }\n\n    deleteObject(record, type) {\n        let that = this;\n        let reqData = record;\n        reqData.is_active = type;\n        let successFn = function (data) {\n            that.loadData();\n            if (that.state.showDeleted) {\n                that.loadData(true);\n            }\n        }\n        let errorFn = function () {\n        };\n        postAPI(interpolate(SINGLE_EXPENSES_API, [record.id]), reqData, successFn, errorFn)\n    }\n\n    render() {\n        let that = this;\n        const expenseColoumns = [{\n            title: 'Expense Date',\n            key: 'expense_date',\n            dataIndex: 'expense_date',\n            export: function (text) {\n                return moment(text).format('lll');\n            },\n            render: function (text) {\n                return moment(text).format('lll');\n            }\n        }, {\n            title: 'Expense Type',\n            key: 'expense_type',\n            dataIndex: 'expense_type.name',\n        }, {\n            title: 'Vendor',\n            key: 'vendor',\n            dataIndex: 'vendor.name'\n        }, {\n            title: 'Payment Mode',\n            key: 'payment_mode',\n            dataIndex: 'payment_mode.mode'\n        }, {\n            title: 'Amount',\n            key: 'amount',\n            dataIndex: 'amount'\n        }, {\n            title: 'Bank Name',\n            key: 'bank_name',\n            dataIndex: 'bank_name'\n        }, {\n            title: 'Remark',\n            key: 'remark',\n            dataIndex: 'remark'\n        }, {\n            title: 'Action',\n            render: function (record) {\n                return <div>\n                    {that.props.activePracticePermissions.EditExpenses || that.props.allowAllPermissions ?\n                        <Link to={'/inventory/expenses/edit/' + record.id}>Edit</Link> : null}\n                    <Divider type={\"vertical\"}/>\n                    {that.props.activePracticePermissions.DeleteExpenses || that.props.allowAllPermissions ?\n                        <Popconfirm title=\"Are you sure to delete this?\"\n                                    onConfirm={() => that.deleteObject(record, false)} okText=\"Yes\" cancelText=\"No\">\n                            <a>Delete</a>\n                        </Popconfirm> : null}\n                </div>\n            }\n        }]\n        return <div>\n            <Switch>\n                <Route exact path='/inventory/expenses/add'\n                       render={(route) => (that.props.activePracticePermissions.EditExpenses || that.props.allowAllPermissions ?\n                           <AddExpenses {...this.state} {...route} loadData={this.loadData}/> : <PermissionDenied/>)}/>\n                <Route exact path='/inventory/expenses/edit/:id'\n                       render={(route) => (that.props.activePracticePermissions.EditExpenses || that.props.allowAllPermissions ?\n                           <AddExpenses {...this.state} {...route} loadData={this.loadData}/> : <PermissionDenied/>)}/>\n                <Card title=\"Expenses\"\n                      extra={(that.props.activePracticePermissions.EditExpenses || that.props.allowAllPermissions ?\n                          <Link to={\"/inventory/expenses/add\"}> <Button type=\"primary\"><Icon\n                              type=\"plus\"/> Add</Button></Link> : <PermissionDenied/>)}>\n                    <Row gutter={16} style={{marginBottom: 10}}>\n                        <Col span={2} style={{textAlign: \"right\"}}>\n                            <b> Expense Types</b>\n                        </Col>\n                        <Col span={4}>\n                            <Select style={{width: '100%'}} value={this.state.selectedExpenseType}\n                                    disabled={this.state.loading}\n                                    onChange={(value) => this.changeExpenseFilters('selectedExpenseType', value)}>\n                                <Select.Option value={null}>--ALL EXPENSES--</Select.Option>\n                                {this.state.expenseTypes.map(item => <Select.Option\n                                    value={item.id}>{item.name}</Select.Option>)}\n                            </Select>\n                        </Col>\n                        <Col span={2} style={{textAlign: \"right\"}}>\n                            <b> Payment Modes</b>\n                        </Col>\n                        <Col span={4}>\n                            <Select style={{width: '100%'}} value={this.state.selectedPaymentMode}\n                                    disabled={this.state.loading}\n                                    onChange={(value) => this.changeExpenseFilters('selectedPaymentMode', value)}>\n                                <Select.Option value={null}>--ALL PAYMENT MODE--</Select.Option>\n                                {this.state.paymentModes.map(item => <Select.Option\n                                    value={item.id}>{item.mode}</Select.Option>)}\n                            </Select>\n                        </Col>\n\n                        <Col span={2} style={{textAlign: \"right\"}}>\n                            <b> From</b>\n                        </Col>\n                        <Col span={4}>\n                            <DatePicker value={this.state.selectedStartDate}\n                                        disabled={this.state.loading}\n                                        allowClear={false}\n                                        onChange={(value) => this.changeExpenseFilters('selectedStartDate', value)}/>\n                        </Col>\n                        <Col span={2} style={{textAlign: \"right\"}}>\n                            <b> To</b>\n                        </Col>\n                        <Col span={4}>\n                            <DatePicker value={this.state.selectedEndDate}\n                                        disabled={this.state.loading}\n                                        allowClear={false}\n                                        onChange={(value) => this.changeExpenseFilters('selectedEndDate', value)}/>\n                        </Col>\n                    </Row>\n                    <Table loading={this.state.loading} dataSource={this.state.expenses}\n                                     columns={expenseColoumns}/>\n                </Card>\n            </Switch>\n        </div>\n    }\n}\n","import {Card, Form, Row} from \"antd\";\nimport React from \"react\";\nimport {\n    INPUT_FIELD,\n    SUCCESS_MSG_TYPE,\n    TEXT_FIELD,\n} from \"../../../constants/dataKeys\";\nimport DynamicFieldsForm from \"../../common/DynamicFieldsForm\";\nimport {displayMessage, getAPI, interpolate} from \"../../../utils/common\";\nimport {\n    MANUFACTURER_API, SINGLE_MANUFACTURER_API, SINGLE_VENDOR_API\n} from \"../../../constants/api\";\nimport {Route} from \"react-router\";\nimport {Redirect} from \"react-router-dom\";\nimport PermissionDenied from \"../../common/errors/PermissionDenied\";\n\n\nexport default class AddManufacture extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            editData: this.props.editData ? this.props.editData : null\n        }\n    }\n\n    changeRedirect = () => {\n        var redirectVar = this.state.redirect;\n        this.setState({\n            redirect: !redirectVar,\n        });\n    }\n\n    componentDidMount() {\n        if (this.props.match.params.id) {\n            if (!this.state.editData) {\n                this.loadData();\n            }\n        }\n    }\n\n    loadData() {\n        let that = this;\n        let successFn = function (data) {\n            that.setState({\n                editData: data,\n            })\n        }\n        let errorFn = function () {\n\n        }\n        getAPI(interpolate(SINGLE_MANUFACTURER_API, [this.props.match.params.id]), successFn, errorFn);\n\n\n    }\n\n\n    render() {\n\n        let that = this;\n        const fields = [{\n            label: \"Name\",\n            key: \"name\",\n            initialValue: this.state.editData ? this.state.editData.name : null,\n            type: INPUT_FIELD\n        },{\n            label: 'Details',\n            key: 'description',\n            initialValue:this.state.editData?this.state.editData.description:null,\n            type:TEXT_FIELD\n        },\n        ];\n\n\n        let editformProp;\n        if (this.state.editData) {\n            editformProp = {\n                successFn: function (data) {\n                    displayMessage(SUCCESS_MSG_TYPE, \"success\");\n                    that.props.loadData();\n                    if (that.props.history){\n                        that.props.history.replace(\"/inventory/manufacture\");\n                    }\n                },\n                errorFn: function () {\n\n                },\n                action: interpolate(SINGLE_MANUFACTURER_API, [this.props.match.params.id]),\n                method: \"put\",\n\n            }\n        }\n        const TestFormLayout = Form.create()(DynamicFieldsForm);\n\n        const formProp = {\n            successFn: function (data) {\n                displayMessage(SUCCESS_MSG_TYPE, \"success\");\n                that.props.loadData();\n                if (that.props.history){\n                    that.props.history.replace(\"/inventory/manufacture\");\n                }\n            },\n            errorFn: function () {\n\n            },\n            action: MANUFACTURER_API,\n            method: \"post\",\n        }\n        const defaultValues = [{\"key\": \"practice\", \"value\": this.props.active_practiceId}];\n        return <Row>\n            <Card>\n                <Route  path='/inventory/manufacture/edit/:id'\n                       render={(route) => (this.props.match.params.id ?\n                           <TestFormLayout defaultValues={defaultValues} title=\"Edit Manufacturer\"\n                                           changeRedirect={this.changeRedirect} formProp={editformProp}\n                                           {...route}\n                                           fields={fields}/> : <Redirect to={'/inventory/manufacture'}/>)}/>\n                <Route exact path='/inventory/manufacture/add'\n                       render={(route) => (that.props.activePracticePermissions.EditManufacturer || that.props.allowAllPermissions ?\n                            <TestFormLayout title=\"Add Manufacturer\" changeRedirect={this.changeRedirect}{...route}\n                                formProp={formProp} fields={fields}/>:<PermissionDenied/>)}/>\n\n\n            </Card>\n            {this.state.redirect && <Redirect to={'/inventory/manufacture'}/>}\n        </Row>\n\n    }\n}\n","import {Button, Card,Icon,Divider,Popconfirm} from \"antd\";\nimport React from \"react\";\nimport {getAPI,deleteAPI,interpolate,putAPI} from \"../../../utils/common\";\nimport {MANUFACTURER_API,SINGLE_MANUFACTURER_API} from \"../../../constants/api\";\nimport {Route, Switch} from \"react-router\";\nimport AddManufacture from \"./AddManufacture\";\nimport {Link} from \"react-router-dom\";\nimport CustomizedTable from \"../../common/CustomizedTable\";\nimport PermissionDenied from \"../../common/errors/PermissionDenied\";\n\nexport default class ManufactureList extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            active_practiceId: this.props.active_practiceId,\n            manufactures: null,\n            loading:true\n        };\n        this.loadData = this.loadData.bind(this);\n        this.deleteManufacture =this.deleteManufacture.bind(this);\n    }\n\n    componentDidMount() {\n        this.loadData();\n    }\n\n    loadData() {\n        let that = this;\n        let successFn = function (data) {\n            that.setState({\n                manufactures: data,\n                loading:false\n            })\n        }\n        let errorFn = function () {\n            that.setState({\n                loading:false\n            })\n\n        }\n        getAPI(MANUFACTURER_API, successFn, errorFn);\n    }\n\n    deleteManufacture(value) {\n        var that = this;\n        let reqDate={...value,\n            'is_active':false\n        }\n        let successFn = function (data) {\n            that.setState({\n                loading:false\n            })\n            that.loadData();\n        };\n        let errorFn = function () {\n        };\n        putAPI(interpolate(SINGLE_MANUFACTURER_API, [value]), reqDate,successFn, errorFn);\n\n    }\n\n\n    render() {\n        \n        let that = this;\n        const manufactureColoumns = [{\n            title: 'Name',\n            key: 'name',\n            dataIndex: 'name'\n        }, {\n            title: 'Details',\n            key: 'details',\n            dataIndex: 'description'\n        }, {\n            title: 'Action',\n            render: function (record) {\n                return <div>\n                    {that.props.activePracticePermissions.EditManufacturer || that.props.allowAllPermissions ?\n                    <Link to={'/inventory/manufacture/edit/' + record.id}>Edit</Link>:null}\n                    <Divider type=\"vertical\"/>\n                    {that.props.activePracticePermissions.DeleteManufacturer || that.props.allowAllPermissions ?\n                    <Popconfirm title=\"Are you sure delete this item?\"\n                                onConfirm={() => that.deleteManufacture(record.id)} okText=\"Yes\" cancelText=\"No\">\n                        <a>Delete</a>\n                    </Popconfirm>:null}\n\n                    \n                </div>\n            }\n        }];\n        return <div><Switch>\n            <Route exact path='/inventory/manufacture/add'\n                   render={(route) =>(that.props.activePracticePermissions.EditManufacturer || that.props.allowAllPermissions ? <AddManufacture {...this.state} {...route} {...this.props} loadData={that.loadData}/>:<PermissionDenied/>)}/>\n            <Route  path='/inventory/manufacture/edit/:id'\n                   render={(route) =>(that.props.activePracticePermissions.EditManufacturer || that.props.allowAllPermissions ? <AddManufacture {...this.state}  {...this.props} {...route} loadData={that.loadData}/>:<PermissionDenied/>)}/>\n            <Card title=\"Manufacturers\" extra={<Link to={\"/inventory/manufacture/add\"}> <Button type=\"primary\" disabled={!that.props.activePracticePermissions.EditManufacturer}><Icon\n                type=\"plus\"/> Add</Button></Link>}>\n                <CustomizedTable loading={this.state.loading} dataSource={this.state.manufactures} columns={manufactureColoumns} hideReport={!that.props.activePracticePermissions.ExportManufacturer}/>\n            </Card>\n        </Switch>\n        </div>\n    }\n}\n","import {Card, Form, Row} from \"antd\";\nimport React from \"react\";\nimport {\n    DATE_PICKER,\n    INPUT_FIELD,\n    SELECT_FIELD,\n    SUCCESS_MSG_TYPE,\n} from \"../../../constants/dataKeys\";\nimport DynamicFieldsForm from \"../../common/DynamicFieldsForm\";\nimport {displayMessage, getAPI, interpolate} from \"../../../utils/common\";\nimport {\n    LAB_API, PATIENTS_LIST, SINGLE_EXPENSES_API, SINGLE_LAB_API,\n} from \"../../../constants/api\";\nimport {Route} from \"react-router\";\nimport {Redirect} from \"react-router-dom\";\n\n\nexport default class AddLab extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            editData: this.props.editData ? this.props.editData : null\n        }\n    }\n\n    changeRedirect() {\n        var redirectVar = this.state.redirect;\n        this.setState({\n            redirect: !redirectVar,\n        });\n\n    }\n\n    componentDidMount() {\n        if (this.props.match.params.id) {\n            if (!this.state.editData) {\n                this.loadData();\n            }\n        }\n        this.getPatientListData();\n\n\n    }\n\n\n    loadData() {\n        let that = this;\n        let successFn = function (data) {\n            that.setState({\n                editData: data,\n            })\n        }\n        let errorFn = function () {\n\n        }\n        getAPI(interpolate(SINGLE_EXPENSES_API, [this.props.match.params.id]), successFn, errorFn);\n\n\n    }\n\n    getPatientListData() {\n        let that = this;\n        let successFn = function (data) {\n            that.setState({\n                patientListData: data\n            })\n        };\n        let errorFn = function () {\n\n        };\n        getAPI(PATIENTS_LIST, successFn, errorFn);\n    }\n\n\n    render() {\n\n        const patientOptions = []\n        if (this.state.patientListData && this.state.patientListData.length) {\n            this.state.patientListData.forEach(function (drug) {\n                patientOptions.push({label: (drug.name), value: drug.id});\n            })\n        }\n        const fields = [{\n            label: \"Job number \",\n            key: \"job_no\",\n            initialValue: this.state.editData ? this.state.editData.job_no : null,\n            type: INPUT_FIELD\n        }, {\n            label: \"Doctor Name \",\n            key: \"job_no\",\n            initialValue: this.state.editData ? this.state.editData.doctor_name : null,\n            type: INPUT_FIELD\n        }, {\n            label: \"Name \",\n            key: \"name\",\n            initialValue: this.state.editData ? this.state.editData.name : null,\n            type: INPUT_FIELD\n        }, {\n            label: \"Status \",\n            key: \"status\",\n            initialValue: this.state.editData ? this.state.editData.status : null,\n            type: INPUT_FIELD\n        }, {\n            label: \"Due Date\",\n            key: \"due_date\",\n            type: DATE_PICKER,\n            initialValue: this.state.editData ? this.state.editData.due_date : null,\n            format: \"YYYY/MM/DD HH:mm\"\n        }, {\n            label: \"patient\",\n            key: \"patient\",\n            type: SELECT_FIELD,\n            initialValue: this.state.editData ? this.state.editData.patient : null,\n            options: patientOptions\n        },];\n\n\n        let editformProp;\n        if (this.state.editBlogData) {\n            editformProp = {\n                successFn: function (data) {\n                    displayMessage(SUCCESS_MSG_TYPE, \"success\");\n                    console.log(data);\n                },\n                errorFn: function () {\n\n                },\n                action: interpolate(SINGLE_LAB_API, [this.props.match.params.id]),\n                method: \"put\",\n\n            }\n        }\n        const TestFormLayout = Form.create()(DynamicFieldsForm);\n\n        const formProp = {\n            successFn: function (data) {\n                displayMessage(SUCCESS_MSG_TYPE, \"success\");\n\n                console.log(data);\n            },\n            errorFn: function () {\n\n            },\n            action: LAB_API,\n            method: \"post\",\n        }\n        const defaultValues = [{\"key\": \"practice\", \"value\": this.props.active_practiceId}];\n        return <Row>\n            <Card>\n                <Route exact path='/inventory/lab/edit/:id'\n                       render={() => (this.props.match.params.id ?\n                           <TestFormLayout defaultValues={defaultValues} title=\"Edit Lab\"\n                                           changeRedirect={this.changeRedirect} formProp={editformProp}\n                                           fields={fields}/> : <Redirect to={'/inventory/lab'}/>)}/>\n                <Route exact path='/inventory/lab/add'\n                       render={() => <TestFormLayout title=\"Add lab\" changeRedirect={this.changeRedirect}\n                                                     formProp={formProp} fields={fields}/>}/>\n\n\n            </Card>\n            {this.state.redirect && <Redirect to={'/inventory/lab'}/>}\n        </Row>\n\n    }\n}\n","import {Button, Card, Icon} from \"antd\";\nimport React from \"react\";\nimport {getAPI} from \"../../../utils/common\";\nimport {LAB_API} from \"../../../constants/api\";\nimport {Route, Switch} from \"react-router\";\nimport AddLab from \"./AddLab\";\nimport {Link} from \"react-router-dom\";\n\nexport default class LabList extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            active_practiceId: this.props.active_practiceId,\n            lab: null,\n            loading:true\n        };\n        this.loadData = this.loadData.bind(this);\n    }\n\n    componentDidMount() {\n        this.loadData();\n    }\n\n    loadData() {\n        let that = this;\n        let successFn = function (data) {\n            that.setState({\n                lab: data,\n                loading:false\n            })\n        }\n        let errorFn = function () {\n            that.setState({\n                loading:false\n            })\n\n        }\n        getAPI(LAB_API, successFn, errorFn);\n    }\n\n    render() {\n        return <div><Switch>\n            <Route exact path='/inventory/lab/add'\n                   render={(route) => <AddLab {...this.state} {...route}/>}/>\n            <Route exact path='/inventory/expenses/lab/:id'\n                   render={(route) => <AddLab {...this.state} {...route}/>}/>\n            <Card loading={this.state.loading} title=\"Lab\" extra={<Link to={\"/inventory/lab/add\"}> <Button type=\"primary\"><Icon\n                type=\"plus\"/> Add</Button></Link>}>\n\n            </Card>\n        </Switch>\n        </div>\n    }\n}\n","import React from \"react\";\nimport {Card, Table} from \"antd\";\nimport {getAPI} from \"../../../utils/common\";\nimport {ACTIVITY_API} from \"../../../constants/api\";\n\nexport default class ActivityList extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            activity: null,\n            loading:true\n        }\n        this.loadActivityLog = this.loadActivityLog.bind(this)\n    }\n\n    componentWillMount() {\n        this.loadActivityLog();\n    }\n\n    loadActivityLog() {\n        let that = this;\n        let successFn = function (data) {\n            that.setState({\n                activity: data,\n                loading:false\n            })\n        }\n        let errorFn = function () {\n            that.setState({\n                loading:false\n            })\n\n        }\n        getAPI(ACTIVITY_API, successFn, errorFn);\n    }\n\n    render() {\n        return <Card title=\"Activity Log\">\n            <Table loading={this.state.loading} dataSource={this.state.activity}/>\n        </Card>\n    }\n}\n","import React from \"react\";\nimport {Card, Form, Row, Col, Input, Button, Select, Checkbox, InputNumber} from \"antd\";\nimport DynamicFieldsForm from \"../../common/DynamicFieldsForm\";\nimport {CHECKBOX_FIELD, INPUT_FIELD, SUCCESS_MSG_TYPE, NUMBER_FIELD, SELECT_FIELD} from \"../../../constants/dataKeys\";\nimport {\n    SINGLE_INVENTORY_ITEM_API,\n    TAXES,\n    MANUFACTURER_API,\n    VENDOR_API,\n    INVENTORY_ITEM_API,\n    INVENTORY_API,\n    DRUG_TYPE_API,\n    DRUG_UNIT_API, PRODUCT_MARGIN\n} from \"../../../constants/api\";\nimport {INVENTORY_ITEM_TYPE, DRUG, SUPPLIES, EQUIPMENT} from \"../../../constants/hardData\";\nimport {getAPI, putAPI, postAPI, displayMessage, interpolate} from \"../../../utils/common\";\nimport {Link, Redirect, Switch} from \"react-router-dom\";\nimport {Route} from \"react-router\";\nimport TextArea from \"antd/lib/input/TextArea\";\nimport {REQUIRED_FIELD_MESSAGE} from \"../../../constants/messages\";\n\nconst CheckboxGroup = Checkbox.Group;\n\nclass AddorEditInventoryItem extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            // editInventoryItem: this.props.editInventoryItem ? this.props.editInventoryItem : null,\n            taxes_list: this.props.taxes_list ? this.props.taxes_list : null,\n            manufacture_list: this.props.manufacture_list ? this.props.manufacture_list : null,\n            vendor_list: this.props.vendor_list ? this.props.vendor_list : null,\n            redirect: false,\n            type: this.props.editInventoryItem ? this.props.editInventoryItem : null,\n            drugUnitList: [],\n            drugTypeList: [],\n            retail_price: 0,\n            productMargin: [],\n            loading:false,\n        };\n        this.changeRedirect = this.changeRedirect.bind(this);\n    }\n\n    changeRedirect() {\n        var redirectVar = this.state.redirect;\n        this.setState({\n            redirect: !redirectVar,\n        });\n    }\n\n    componentDidMount() {\n        if (this.props.match.params.id) {\n            if (!this.state.editInventoryItem) {\n                this.loadData();\n            }\n        }\n        if (this.props.taxes_list == null) {\n            this.loadTaxes();\n        }\n        if (this.props.manufacture_list == null) {\n            this.loadManufactureList();\n        }\n        if (this.props.vendor_list == null) {\n            this.loadVendorList();\n        }\n        this.loadDrugType();\n        this.loadDrugUnit();\n        this.loadProductMargin();\n    }\n\n    loadProductMargin() {\n        let that = this;\n        let successFn = function (data) {\n            that.setState({\n                productMargin: data\n            })\n        }\n        let errorFn = function () {\n\n        }\n        getAPI(PRODUCT_MARGIN, successFn, errorFn);\n    }\n\n    loadTaxes() {\n        var that = this;\n        let successFn = function (data) {\n            that.setState({\n                taxes_list: data,\n            })\n        };\n        let errorFn = function () {\n        };\n        getAPI(interpolate(TAXES, [this.props.active_practiceId]), successFn, errorFn);\n\n    }\n\n    loadManufactureList() {\n        let that = this;\n        let successFn = function (data) {\n            that.setState({\n                manufacture_list: data\n            })\n        }\n        let errorFn = function () {\n\n        }\n        getAPI(MANUFACTURER_API, successFn, errorFn);\n    }\n\n    loadVendorList() {\n        let that = this;\n        let successFn = function (data) {\n            that.setState({\n                vendor_list: data\n            })\n        }\n        let errorFn = function () {\n\n        }\n        getAPI(interpolate(VENDOR_API, [this.props.active_practiceId]), successFn, errorFn);\n    }\n\n\n    loadData() {\n        let that = this;\n        let successFn = function (data) {\n            that.setState(function (prevState) {\n                let totalTax = 0;\n                data.taxes_data.forEach(function (tax) {\n                    totalTax += tax.tax_value;\n                });\n                let net_price = (data.retail_price * (1 + totalTax * 0.01)).toFixed(2);\n                return {\n                    editInventoryItem: {...data, net_price: net_price},\n                    type: data.item_type,\n                    retail_price: data.retail_price\n                }\n            })\n        }\n        let errorFn = function () {\n\n        }\n        if (this.props.match.params.id)\n            getAPI(interpolate(SINGLE_INVENTORY_ITEM_API, [this.props.match.params.id]), successFn, errorFn);\n\n    }\n\n    loadDrugType = () => {\n        let that = this;\n        let successFn = function (data) {\n            that.setState({\n                drugTypeList: data,\n            })\n        }\n        let errorFn = function () {\n\n        }\n        getAPI(interpolate(DRUG_TYPE_API, [this.props.active_practiceId]), successFn, errorFn);\n    }\n    onChangeHandeler = (e) => {\n        let that = this\n        that.setState({\n            type: e,\n        })\n    }\n\n    loadDrugUnit() {\n        let that = this;\n        let successFn = function (data) {\n            that.setState({\n                drugUnitList: data\n            })\n        }\n        let errorFn = function () {\n        }\n        getAPI(interpolate(DRUG_UNIT_API, [this.props.active_practiceId]), successFn, errorFn);\n    }\n\n    setFormParams = (type, value) => {\n        this.setState({\n            [type]: value\n        })\n    }\n\n    handleSubmit = (e) => {\n        e.preventDefault();\n        let that = this;\n        this.props.form.validateFields((err, formData) => {\n            if (!err) {\n                let reqData = {\n                    ...formData,\n                    retail_without_tax: that.state.retail_price,\n                    net_price: undefined,\n                    practice: this.props.active_practiceId,\n\n                }\n                if (this.state.editInventoryItem) {\n                    reqData.id = this.state.editInventoryItem.id\n                }\n\n                let successFn = function (data) {\n                    that.setState({\n                        redirect: true,\n                    });\n                    that.props.loadData();\n                    that.props.history.replace('/inventory');\n                };\n                let errorFn = function () {\n\n                };\n                if (!this.state.editInventoryItem) {\n                    postAPI(interpolate(INVENTORY_ITEM_API, [this.props.match.params.id]), reqData, successFn, errorFn);\n                } else {\n                    putAPI(interpolate(SINGLE_INVENTORY_ITEM_API, [this.props.match.params.id]), reqData, successFn, errorFn);\n                }\n\n            }\n        });\n    }\n    changeNetPrice = (value) => {\n        let that = this;\n        const {getFieldsValue, setFields} = this.props.form;\n        setTimeout(function () {\n            let values = getFieldsValue();\n            if (values.retail_with_tax) {\n                let totalTaxAmount = 0;\n                values.taxes.forEach(function (taxid) {\n                    that.state.taxes_list.forEach(function (taxObj) {\n                        if (taxObj.id == taxid)\n                            totalTaxAmount += taxObj.tax_value;\n                    })\n                });\n                let retailPrice = values.retail_with_tax / (1 + totalTaxAmount * 0.01);\n                that.setState({\n                    retail_price: retailPrice.toFixed(2)\n                })\n            } else {\n                that.setState({\n                    retail_price: 0\n                })\n            }\n        }, 1000);\n\n    }\n\n    render() {\n        let that = this;\n        const taxesOption = [];\n        if (this.state.taxes_list) {\n            this.state.taxes_list.forEach(function (drug) {\n                taxesOption.push({label: (drug.name + \"(\" + drug.tax_value + \"%)\"), value: drug.id});\n            })\n        }\n        const manufacturerOption = [];\n        if (this.state.manufacture_list) {\n            this.state.manufacture_list.forEach(function (manufacturer) {\n                manufacturerOption.push({label: (manufacturer.name), value: manufacturer.id});\n            })\n        }\n\n        const vendorOption = [];\n        if (this.state.vendor_list) {\n            this.state.vendor_list.forEach(function (vendor) {\n                vendorOption.push({label: (vendor.name), value: vendor.id});\n            })\n        }\n        const {getFieldDecorator} = this.props.form;\n\n        const formItemLayout = ({\n            labelCol: {span: 10},\n            wrapperCol: {span: 14},\n        });\n\n        return <Card title={this.state.editInventoryItem ? \"Edit Inventory Item\" : \"Add Inventory Item\"} loading={this.state.loading}>\n            <Row>\n                <Col span={18} >\n                    <Form onSubmit={this.handleSubmit}>\n                        <Form.Item label=\"Item Name\" {...formItemLayout}>\n                            {getFieldDecorator('name', {\n                                initialValue: this.state.editInventoryItem ? this.state.editInventoryItem.name : null,\n                                rules: [{required: true, message: REQUIRED_FIELD_MESSAGE}]\n                            })\n                            (<Input placeholder=\"Item Name\"/>)\n                            }\n                        </Form.Item>\n\n                        <Form.Item label=\"HSN\" {...formItemLayout}>\n                            {getFieldDecorator('code', {initialValue: this.state.editInventoryItem ? this.state.editInventoryItem.code : null})\n                            (<Input placeholder=\"HSN Number\"/>)\n                            }\n                        </Form.Item>\n                        {this.state.manufacturerType && this.state.manufacturerType == INPUT_FIELD ?\n                            <Form.Item key={'manufacturer_extra'} label={\"Manufacturer\"}  {...formItemLayout}>\n                                {getFieldDecorator(\"manufacturer_extra\", {\n                                    initialValue: that.state.editPrescreption ? that.state.editPrescreption.manufacturer_extra : null,\n                                    rules: [{\n                                        required: true,\n                                        message: REQUIRED_FIELD_MESSAGE\n                                    }]\n                                })(\n                                    <Input/>\n                                )}\n                                <a onClick={() => that.setFormParams('manufacturerType', SELECT_FIELD)}>Choose\n                                    Manufacturer</a>\n                            </Form.Item>\n                            : <Form.Item key={\"manufacturer\"} {...formItemLayout} label={\"Manufacturer\"}>\n                                {getFieldDecorator(\"manufacturer\", {\n                                    initialValue: this.state.editInventoryItem ? this.state.editInventoryItem.manufacturer : null,\n                                })(\n                                    <Select>\n                                        {manufacturerOption.map((option) => <Select.Option\n                                            value={option.value}>{option.label}</Select.Option>)}\n                                    </Select>\n                                )}\n                                <a onClick={() => that.setFormParams('manufacturerType', INPUT_FIELD)}>Add New\n                                    Manufacturer</a>\n                            </Form.Item>}\n                        <Form.Item label=\"Stocking Unit\" {...formItemLayout}>\n                            {getFieldDecorator('stocking_unit', {\n                                initialValue: this.state.editInventoryItem ? this.state.editInventoryItem.stocking_unit : null,\n                                rules: [{required: true, message: REQUIRED_FIELD_MESSAGE}],\n                            })\n                            (<Input placeholder=\"Example: Bottles, Strips etc.\"/>)\n                            }<p>(Make sure this is the same as the unit in which you dispense this item.)</p>\n                        </Form.Item>\n\n                        <Form.Item label=\"Re-Order Level\" {...formItemLayout}>\n                            {getFieldDecorator('re_order_level', {initialValue: this.state.editInventoryItem ? this.state.editInventoryItem.re_order_level : null})\n                            (<InputNumber placeholder=\"Re-Order Level\"/>)\n                            }\n                        </Form.Item>\n                        <Form.Item label=\"Net Price\" {...formItemLayout}>\n                            {getFieldDecorator('retail_with_tax', {\n                                initialValue: this.state.editInventoryItem ? this.state.editInventoryItem.retail_with_tax : null,\n                                rules: [{\n                                    required: true,\n                                    message: REQUIRED_FIELD_MESSAGE\n                                }]\n                            })\n                            (<InputNumber onChange={this.changeNetPrice}/>)\n                            }<span className=\"ant-form-text\">INR</span>\n                        </Form.Item>\n                        <Form.Item label=\"Tax\" {...formItemLayout}>\n                            {getFieldDecorator('taxes', {initialValue: this.state.editInventoryItem ? this.state.editInventoryItem.taxes : []})\n                            (<CheckboxGroup onChange={this.changeNetPrice}>\n                                {taxesOption.map((option) => <Checkbox\n                                    value={option.value}>{option.label}\n                                </Checkbox>)}\n                            </CheckboxGroup>)\n                            }\n                        </Form.Item>\n                        <Form.Item label=\"Retail Price\" {...formItemLayout}>\n                            <span className=\"ant-form-text\"><b>{that.state.retail_price}</b>&nbsp;INR</span>\n                        </Form.Item>\n\n                        <Form.Item key={\"margin\"} {...formItemLayout} label={\"MLM Margin\"}>\n                            {getFieldDecorator(\"margin\", {\n                                initialValue: this.state.editInventoryItem ? this.state.editInventoryItem.margin : null,\n                            })(\n                                <Select>\n                                    {this.state.productMargin.map((option) => <Select.Option\n                                        value={option.id}>{option.name}</Select.Option>)}\n                                </Select>\n                            )}\n                        </Form.Item>\n                        <Form.Item label=\"Item Type\" {...formItemLayout}>\n                            {getFieldDecorator('item_type', {\n                                initialValue: this.state.editInventoryItem ? this.state.editInventoryItem.item_type : null,\n                                rules: [{required: true, message: REQUIRED_FIELD_MESSAGE}],\n                            })\n                            (<Select placeholder=\"Item Type\" onChange={this.onChangeHandeler}>\n                                {INVENTORY_ITEM_TYPE.map((option) => <Select.Option\n                                    value={option.value}>{option.label}\n                                </Select.Option>)}\n                            </Select>)\n\n                            }\n                        </Form.Item>\n\n                        {this.state.type == DRUG ? <div>\n                                <Form.Item label=\"I prescribe this\" {...formItemLayout}>\n                                    {getFieldDecorator('perscribe_this', {\n                                        valuePropName: 'checked',\n                                        initialValue: this.state.editInventoryItem ? this.state.editInventoryItem.perscribe_this : false\n                                    })\n                                    (<Checkbox></Checkbox>)\n                                    }\n                                </Form.Item>\n                                {this.state.drugType && this.state.drugType == INPUT_FIELD ?\n                                    <Form.Item key={'drug_type_extra'} label={\"Medicine Type\"}  {...formItemLayout}>\n                                        {getFieldDecorator(\"drug_type_extra\", {\n                                            initialValue: that.state.editInventoryItem ? that.state.editInventoryItem.drug_type_extra : null,\n                                            rules: [{\n                                                required: true,\n                                                message: REQUIRED_FIELD_MESSAGE\n                                            }]\n                                        })(\n                                            <Input/>\n                                        )}\n                                        <a onClick={() => that.setFormParams('drugType', SELECT_FIELD)}>Choose Medicine\n                                            Type</a>\n                                    </Form.Item>\n                                    : <Form.Item key={\"drug_type\"} {...formItemLayout} label={\"Medicine Type\"}>\n                                        {getFieldDecorator(\"drug_type\", {\n                                            initialValue: this.state.editInventoryItem ? this.state.editInventoryItem.drug_type : null,\n                                            rules: [{\n                                                required: true,\n                                                message: REQUIRED_FIELD_MESSAGE\n                                            }]\n                                        })(\n                                            <Select>\n                                                {that.state.drugTypeList.map((option) => <Select.Option\n                                                    value={option.id}>{option.name}</Select.Option>)}\n                                            </Select>\n                                        )}\n                                        <a onClick={() => that.setFormParams('drugType', INPUT_FIELD)}>Add New Medicine\n                                            Type</a>\n                                    </Form.Item>}\n                                <Form.Item label=\"Strength\" {...formItemLayout}>\n                                    {getFieldDecorator('strength', {initialValue: this.state.editInventoryItem ? this.state.editInventoryItem.strength : null})\n                                    (<InputNumber/>)\n                                    }\n                                </Form.Item>\n                                {this.state.drugUnit && this.state.drugUnit == INPUT_FIELD ?\n                                    <Form.Item key={'unit_type_extra'} label={\"Strength Unit\"}  {...formItemLayout}>\n                                        {getFieldDecorator(\"unit_type_extra\", {\n                                            initialValue: that.state.editInventoryItem ? that.state.editInventoryItem.unit_type_extra : null,\n                                            rules: [{\n                                                required: true,\n                                                message: REQUIRED_FIELD_MESSAGE\n                                            }]\n                                        })(\n                                            <Input/>\n                                        )}\n                                        <a onClick={() => that.setFormParams('drugUnit', SELECT_FIELD)}>Choose Strength\n                                            Unit</a>\n                                    </Form.Item>\n                                    : <Form.Item key={\"stength_unit\"} {...formItemLayout} label={\"Strength Unit\"}>\n                                        {getFieldDecorator(\"stength_unit\", {\n                                            initialValue: this.state.editInventoryItem ? this.state.editInventoryItem.stength_unit : null,\n                                            rules: [{\n                                                required: true,\n                                                message: REQUIRED_FIELD_MESSAGE\n                                            }]\n                                        })(\n                                            <Select>\n                                                {that.state.drugUnitList.map((option) => <Select.Option\n                                                    value={option.id}>{option.name}</Select.Option>)}\n                                            </Select>\n                                        )}\n                                        <a onClick={() => that.setFormParams('drugUnit', INPUT_FIELD)}>Add New Strength\n                                            Unit</a>\n                                    </Form.Item>}\n                                <Form.Item label=\"Instructions\" {...formItemLayout}>\n                                    {getFieldDecorator('instructions', {initialValue: this.state.editInventoryItem ? this.state.editInventoryItem.instructions : null})\n                                    (<TextArea/>)\n                                    }\n                                </Form.Item>\n\n                            </div>\n\n                            : null}\n                        {this.state.type == SUPPLIES ? <div>\n                                <Form.Item label=\"I prescribe this\" {...formItemLayout}>\n                                    {getFieldDecorator('perscribe_this', {\n                                        valuePropName: 'checked',\n                                        initialValue: this.state.editInventoryItem ? this.state.editInventoryItem.perscribe_this : false\n                                    })\n                                    (<Checkbox></Checkbox>)\n                                    }\n                                </Form.Item>\n                                <Form.Item label=\"Strength Unit\" {...formItemLayout}>\n                                    {getFieldDecorator('strength', {initialValue: this.state.editInventoryItem ? this.state.editInventoryItem.strength : null})\n                                    (<Input/>)\n                                    }\n                                </Form.Item>\n\n                                {this.state.drugUnit && this.state.drugUnit == INPUT_FIELD ?\n                                    <Form.Item key={'unit_type_extra'} label={\"Strength Unit\"}  {...formItemLayout}>\n                                        {getFieldDecorator(\"unit_type_extra\", {\n                                            initialValue: that.state.editInventoryItem ? that.state.editInventoryItem.unit_type_extra : null,\n                                            rules: [{\n                                                required: true,\n                                                message: REQUIRED_FIELD_MESSAGE\n                                            }]\n                                        })(\n                                            <Input/>\n                                        )}\n                                        <a onClick={() => that.setFormParams('drugUnit', SELECT_FIELD)}>Choose Strength\n                                            Unit</a>\n                                    </Form.Item>\n                                    : <Form.Item key={\"stength_unit\"} {...formItemLayout} label={\"Strength Unit\"}>\n                                        {getFieldDecorator(\"stength_unit\", {\n                                            initialValue: this.state.editInventoryItem ? this.state.editInventoryItem.stength_unit : null,\n                                            rules: [{\n                                                required: true,\n                                                message: REQUIRED_FIELD_MESSAGE\n                                            }]\n                                        })(\n                                            <Select>\n                                                {that.state.drugUnitList.map((option) => <Select.Option\n                                                    value={option.id}>{option.name}</Select.Option>)}\n                                            </Select>\n                                        )}\n                                        <a onClick={() => that.setFormParams('drugUnit', INPUT_FIELD)}>Add New Strength\n                                            Unit</a>\n                                    </Form.Item>}\n\n                                <Form.Item label=\"Instructions\" {...formItemLayout}>\n                                    {getFieldDecorator('instructions', {initialValue: this.state.editInventoryItem ? this.state.editInventoryItem.instructions : null})\n                                    (<TextArea/>)\n                                    }\n                                </Form.Item>\n                            </div>\n                            : null}\n                        {this.state.type == EQUIPMENT ? <div>\n                                <Form.Item label=\"I prescribe this\" {...formItemLayout}>\n                                    {getFieldDecorator('perscribe_this', {\n                                        valuePropName: 'checked',\n                                        initialValue: this.state.editInventoryItem ? this.state.editInventoryItem.perscribe_this : null\n                                    })\n                                    (<Checkbox></Checkbox>)\n                                    }\n                                </Form.Item>\n                                <Form.Item label=\"Instructions\" {...formItemLayout}>\n                                    {getFieldDecorator('instructions', {initialValue: this.state.editInventoryItem ? this.state.editInventoryItem.instructions : null})\n                                    (<TextArea/>)\n                                    }\n                                </Form.Item>\n                            </div>\n\n                            : null}\n\n                        <Form.Item>\n                            <Button style={{margin: 5}} type=\"primary\" htmlType=\"submit\">\n                                Submit\n                            </Button>\n                            {that.props.history ?\n                                <Button style={{margin: 5}} onClick={() => that.props.history.goBack()}>\n                                    Cancel\n                                </Button> : null}\n                        </Form.Item>\n\n\n                    </Form>\n                </Col>\n            </Row>\n            {this.state.redirect && <Redirect to={'/inventory'}/>}\n        </Card>\n\n    }\n}\n\nexport default Form.create()(AddorEditInventoryItem);\n","import React from \"react\";\nimport {\n    Affix,\n    AutoComplete,\n    Button,\n    Card,\n    Col,\n    DatePicker, Divider,\n    Form,\n    Icon,\n    Input,\n    InputNumber,\n    List,\n    message,\n    Row,\n    Select, Spin,\n    Table,\n    Tabs,\n    Upload\n} from \"antd\";\nimport {displayMessage, getAPI, interpolate, makeURL, postAPI} from \"../../../utils/common\";\n\nimport {ADD_STOCK, CONSUME_STOCK, INVENTORY_ITEM_TYPE, TYPE_OF_CONSUMPTION} from \"../../../constants/hardData\";\nimport {\n    BULK_STOCK_ENTRY,\n    FILE_UPLOAD_API,\n    INVENTORY_ITEM_API,\n    SEARCH_THROUGH_QR,\n    SUPPLIER_API\n} from \"../../../constants/api\";\nimport moment from \"moment\";\n\nconst {Search} = Input;\nconst {MonthPicker} = DatePicker;\nconst TabPane = Tabs.TabPane;\n\nlet tableFormFields = {\n    _id: null,\n    quantity: 0,\n    batch: null\n};\n\nclass AddOrConsumeStock extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            items: {},\n            classType: props.type,\n            tableFormValues: [],\n            maxQuantityforConsume: {},\n            searchStrings: {},\n            tempValues: {},\n            supplierList: [],\n            customSupplier: false,\n            qrValue: '',\n            loading: true,\n        }\n        this.loadSupplierList = this.loadSupplierList.bind(this);\n    }\n\n    componentDidMount() {\n        this.loadInventoryItemList();\n        this.loadSupplierList();\n    }\n\n    changeSupplierType = (value) => {\n        this.setState({\n            customSupplier: !!value\n        })\n    }\n\n    loadSupplierList() {\n        let that = this;\n        let params = {practice: this.props.active_practiceId}\n        let successFn = function (data) {\n            that.setState({\n                supplierList: data\n            })\n        }\n        let errorFn = function () {\n\n        }\n        getAPI(interpolate(SUPPLIER_API, [this.props.active_practiceId]), successFn, errorFn, params);\n        // getAPI(SUPPLIER_API, successFn, errorFn, {\n        //     practice: this.props.active_practiceId\n        // })\n    }\n\n    loadInventoryItemList() {\n        let that = this;\n        INVENTORY_ITEM_TYPE.forEach(function (type) {\n            that.loadItemsList(type.value)\n        });\n    }\n\n    loadItemsList = (type, page = 1) => {\n        let that = this;\n        let successFn = function (recData) {\n            let data = recData;\n            that.setState(function (prevState) {\n                return {\n                    items: {\n                        ...prevState.items,\n                        [type]: {...prevState.items[type], ...data},\n                    },\n                    loading: false,\n                }\n            });\n        }\n        let errorFn = function () {\n        }\n        let params = {\n            maintain_inventory: true,\n            practice: this.props.active_practiceId,\n            item_type: type,\n            page\n        }\n        if (that.state.searchStrings[type]) {\n            params.item_name = that.state.searchStrings[type]\n        }\n        getAPI(INVENTORY_ITEM_API, successFn, errorFn, params);\n    }\n    remove = (k) => {\n        this.setState(function (prevState) {\n            let newTableFormValues = [];\n            prevState.tableFormValues.forEach(function (formValue) {\n                if (formValue._id != k)\n                    newTableFormValues.push(formValue);\n            });\n            // console.log(prevState.tableFormValues, k);\n            return {\n                tableFormValues: newTableFormValues\n            }\n        });\n    }\n\n    add = (item, randId = Math.random().toFixed(7)) => {\n        this.setState(function (prevState) {\n            return {\n                tableFormValues: [{\n                    ...tableFormFields,\n                    ...item,\n                    _id: randId,\n                }, ...prevState.tableFormValues]\n            }\n        });\n    };\n\n    handleSubmit = (e) => {\n        let that = this;\n        this.setState({\n            loading: true,\n        });\n        if (e.keyCode == 13) {\n            return false;\n        }\n        e.preventDefault();\n        this.props.form.validateFields((err, values) => {\n            if (!err) {\n                let reqData = [];\n                that.state.tableFormValues.forEach(function (item) {\n                    let itemObject = {\n                        item_add_type: that.state.classType,\n                        inventory_item: item.id,\n                        quantity: values.quantity[item._id],\n                        batch_number: values.batch[item._id],\n                        date: moment(values.date).format('YYYY-MM-DD'),\n                        bill_number: values.bill_number,\n                        bill_file: values.file && values.file.file.response ? values.file.file.response.image_path : null\n                    };\n\n                    if (that.state.classType == ADD_STOCK) {\n                        itemObject = {\n                            ...itemObject,\n                            expiry_date: moment(values.expiry_date[item._id]).format('YYYY-MM-DD'),\n                            unit_cost: values.unit_cost[item._id],\n                            total_cost: values.unit_cost[item._id] * values.quantity[item._id],\n                        }\n                        if (values.supplier) {\n                            itemObject.supplier = values.supplier;\n                        } else if (values.supplier_name) {\n                            itemObject.supplier_name = values.supplier_name;\n                        }\n                    } else if (that.state.classType == CONSUME_STOCK) {\n                        itemObject.type_of_consumption = values.type_of_consumption;\n                    }\n                    reqData.push(itemObject);\n                });\n                reqData.date = moment(values.date).isValid() ? moment(values.date).format() : null;\n                if (that.state.customSupplier) {\n                    reqData.supplier_name = values.supplier_name;\n                } else {\n                    reqData.supplier = values.supplier;\n                }\n                let successFn = function (data) {\n\n                    displayMessage(\"Inventory updated successfully\");\n                    that.props.loadData();\n                    that.props.history.replace('/inventory');\n                };\n                let errorFn = function () {\n                    that.setState({\n                        loading: false,\n                    });\n                };\n                postAPI(BULK_STOCK_ENTRY, reqData, successFn, errorFn);\n            }\n        });\n    };\n\n    changeMaxQuantityforConsume(recordId, batch) {\n        this.setState(function (prevState) {\n            let newMaxQuantityforConsume = {...prevState.maxQuantityforConsume}\n            prevState.tableFormValues.forEach(function (formValue) {\n                if (formValue._id == recordId)\n                    formValue.item_type_stock.item_stock.forEach(function (stock) {\n                        if (stock.batch_number == batch)\n                            newMaxQuantityforConsume[recordId] = stock.quantity || 0\n                    })\n            });\n            return {\n                maxQuantityforConsume: newMaxQuantityforConsume\n            }\n        });\n    }\n\n    searchValues = (type, value) => {\n        let that = this;\n        this.setState(function (prevState) {\n            let searchValues = {...prevState.searchStrings};\n            searchValues[type] = value;\n            return {searchStrings: searchValues}\n        }, function () {\n            that.loadItemsList(type);\n        });\n    }\n    filterValues = (type) => {\n        this.setState(function (prevState) {\n            let filteredItemOfGivenType = [];\n            if (prevState.items[type]) {\n                if (prevState.searchStrings[type]) {\n                    prevState.items[type].forEach(function (item) {\n                        if (item.name\n                            .toString()\n                            .toLowerCase()\n                            .includes(prevState.searchStrings[type].toLowerCase())) {\n                            filteredItemOfGivenType.push(item);\n                        }\n                    });\n                } else {\n                    filteredItemOfGivenType = prevState.items[type];\n                }\n            }\n            return {\n                filteredItems: {...prevState.filteredItems, [type]: filteredItemOfGivenType}\n            }\n        });\n    }\n    storeValue = (type, id, value) => {\n        let that = this;\n        this.setState(function (prevState) {\n            return {tempValues: {...prevState.tempValues, [type.toString() + id.toString()]: value}}\n        });\n        if (type == 'batch') {\n            let {setFieldsValue} = that.props.form;\n            that.state.tableFormValues.forEach(function (item) {\n                if (item._id == id) {\n                    if (item.item_type_stock.batch_number) {\n                        item.item_type_stock.batch_number.forEach(function (batch) {\n                            setFieldsValue({[`expiry_date[${id}]`]: batch.expiry_date && moment(batch.expiry_date).isValid() ? moment(batch.expiry_date) : null});\n                        })\n                    }\n                }\n            })\n\n        }\n    }\n    addItemThroughQR = (value) => {\n        let that = this;\n        that.setState({\n            loadingQr: true,\n        });\n        let qrSplitted = value.split('*');\n        let successFn = function (data) {\n            let item = data;\n            let {setFieldsValue, getFieldsValue, getFieldValue} = that.props.form;\n            let randomId = Math.random().toFixed(7);\n            let flag = true\n            that.state.tableFormValues.forEach(function (row) {\n                if (row.item_name == qrSplitted[0]) {\n                    let _id = row._id;\n                    let batch = getFieldsValue(`batch[${_id}]`);\n                    if (batch == qrSplitted[3]) {\n                        let quantity = getFieldsValue(`quantity[${_id}]`);\n                        flag = false\n                        setFieldsValue({\n                            [`quantity[${_id}]`]: quantity + 1\n                        });\n                        that.storeValue('quantity', _id, value);\n                    }\n                }\n            })\n            if (flag) {\n                that.add(data, randomId);\n                that.storeValue('batch', randomId, qrSplitted[1]);\n                that.storeValue('unit_cost', randomId, qrSplitted[3]);\n                let fieldsToBeSet = {\n                    [`batch[${randomId}]`]: qrSplitted[1],\n                    [`expiry_date[${randomId}]`]: moment(qrSplitted[2], 'MM/YY')\n                };\n                if (that.state.classType == CONSUME_STOCK)\n                    fieldsToBeSet[`unit_cost[${randomId}]`] = qrSplitted[3]\n                setFieldsValue(fieldsToBeSet)\n            }\n            console.log(getFieldsValue(), {\n                [`batch[${randomId}]`]: qrSplitted[0]\n            });\n            that.setState(function (prevState) {\n\n                // if (prevState.items && prevState.items[INVENTORY]) {\n                //     prevState.items[INVENTORY].forEach(function (inventItem) {\n                //         console.log(item.inventory_item)\n                //         if (inventItem.id == item.inventory_item) {\n                //             console.log(inventItem);\n                //             that.add({...inventItem, item_type: INVENTORY});\n                //\n                //         }\n                //     })\n                // }\n                return {\n                    loadingQr: false,\n                    qrValue: ''\n                }\n            });\n        }\n        let errorFn = function () {\n\n        }\n        getAPI(SEARCH_THROUGH_QR, successFn, errorFn, {qr: value, form: 'Inventory'})\n    }\n    setQrValue = (e) => {\n        let value = e.target.value;\n        this.setState({\n            qrValue: value\n        })\n    }\n\n    render() {\n        let that = this;\n        const {getFieldDecorator} = this.props.form;\n        const formItemLayout = {\n            labelCol: {\n                xs: {span: 24},\n                sm: {span: 4},\n            },\n            wrapperCol: {\n                xs: {span: 24},\n                sm: {span: 20},\n            },\n        };\n        const formItemLayoutWithOutLabel = {\n            labelCol: {\n                xs: {span: 24},\n                sm: {span: 4},\n            },\n            wrapperCol: {\n                xs: {span: 24},\n                sm: {span: 20},\n            },\n        };\n        const singleUploadprops = {\n            name: 'image',\n            data: {\n                name: 'hello'\n            },\n            action: makeURL(FILE_UPLOAD_API),\n            headers: {\n                authorization: 'authorization-text',\n            },\n            onChange(info) {\n                if (info.file.status !== 'uploading') {\n\n                }\n                if (info.file.status === 'done') {\n                    message.success(`${info.file.name} file uploaded successfully`);\n                } else if (info.file.status === 'error') {\n                    message.error(`${info.file.name} file upload failed.`);\n                }\n            },\n        };\n        getFieldDecorator('keys', {initialValue: []});\n        let consumeRow = [{\n            title: 'Item Name',\n            key: 'item_name',\n            dataIndex: 'name'\n        }];\n        if (this.state.classType == ADD_STOCK) {\n            consumeRow = consumeRow.concat([{\n                title: 'Quantity',\n                key: 'quantity',\n                dataIndex: 'quantity',\n                render: (item, record) => <Form.Item\n                    key={`quantity[${record._id}]`}\n                    {...formItemLayout}>\n                    {getFieldDecorator(`quantity[${record._id}]`, {\n                        validateTrigger: ['onChange', 'onBlur'],\n                        rules: [{\n                            required: true,\n                            message: \"This field is required.\",\n                        }],\n                    })(\n                        <InputNumber min={0} placeholder=\"quantity\"\n                                     onChange={(value) => this.storeValue('quantity', record._id, value)}/>\n                    )}\n                </Form.Item>\n            }, {\n                title: 'Batch',\n                key: 'batch',\n                dataIndex: 'batch',\n                render: (item, record) => <Form.Item\n                    key={`batch[${record._id}]`}\n                    {...formItemLayout}>\n                    {getFieldDecorator(`batch[${record._id}]`, {\n                        validateTrigger: ['onChange', 'onBlur'],\n                        rules: [{\n                            required: true,\n                            message: \"This field is required.\",\n                        }],\n                    })(\n                        <AutoComplete placeholder=\"Batch Number\"\n                                      onChange={(value) => this.storeValue('batch', record._id, value)}\n                                      dataSource={record.item_type_stock && record.item_type_stock.item_stock ? record.item_type_stock.item_stock.map(itemStock => itemStock.batch_number ? itemStock.batch_number : '--') : []}/>\n                    )}\n                </Form.Item>\n            }, {\n                title: 'Expiry Date',\n                key: 'expiry',\n                dataIndex: 'expiry',\n                render: (item, record) => <Form.Item\n                    key={`expiry_date[${record._id}]`}\n                    {...formItemLayout}>\n                    {getFieldDecorator(`expiry_date[${record._id}]`, {\n                        rules: [{\n                            required: true,\n                            message: \"This field is required.\",\n                        }],\n                        initialValue: moment(new Date())\n                    })(\n                        <MonthPicker allowClear={false}/>\n                    )}\n                </Form.Item>\n            }, {\n                title: 'Unit Cost',\n                key: 'unit_cost',\n                dataIndex: 'unit_cost',\n                render: (item, record) => <Form.Item\n                    key={`unit_cost[${record._id}]`}\n                    {...formItemLayout}>\n                    {getFieldDecorator(`unit_cost[${record._id}]`, {\n                        // validateTrigger: ['onChange', 'onBlur'],\n                        rules: [{\n                            required: true,\n                            message: \"This field is required.\",\n                        }],\n                    })(\n                        <InputNumber placeholder=\"Unit Cost\"\n                                     onChange={(value) => this.storeValue('unit_cost', record._id, value)}/>\n                    )}\n                </Form.Item>\n            }, {\n                title: 'Total Cost',\n                key: 'total_cost',\n                dataIndex: 'total_cost',\n                render: (item, record) =>\n                    <span>{this.state.tempValues['unit_cost' + record._id] && this.state.tempValues['quantity' + record._id] ? this.state.tempValues['unit_cost' + record._id] * this.state.tempValues['quantity' + record._id] : '--'}</span>\n            }]);\n        } else if (this.state.classType == CONSUME_STOCK) {\n            consumeRow = consumeRow.concat([{\n                title: 'Batch',\n                key: 'batch',\n                dataIndex: 'batch',\n                render: (item, record) => <Form.Item\n                    key={`batch[${record._id}]`}\n                    {...formItemLayout}>\n                    {getFieldDecorator(`batch[${record._id}]`, {\n                        validateTrigger: ['onChange', 'onBlur'],\n                        rules: [{\n                            required: true,\n                            message: \"This field is required.\",\n                        }],\n                    })(\n                        <Select placeholder=\"Batch Number\"\n                                onChange={(value) => that.changeMaxQuantityforConsume(record._id, value)}>\n                            {record.item_type_stock && record.item_type_stock.item_stock && record.item_type_stock.item_stock.map(stock =>\n                                <Select.Option value={stock.batch_number}>\n                                    #{stock.batch_number} ({stock.quantity})\n                                </Select.Option>)}\n                        </Select>\n                    )}\n                </Form.Item>\n            }, {\n                title: 'Quantity',\n                key: 'quantity',\n                dataIndex: 'quantity',\n                render: (item, record) => <Form.Item\n                    key={`quantity[${record._id}]`}\n                    {...formItemLayout}>\n                    {getFieldDecorator(`quantity[${record._id}]`, {\n                        validateTrigger: ['onChange', 'onBlur'],\n                        rules: [{\n                            required: true,\n                            message: \"This field is required.\",\n                        }],\n                    })(\n                        <InputNumber min={0} max={this.state.maxQuantityforConsume[record._id]} placeholder=\"quantity\"/>\n                    )}\n                </Form.Item>\n            },]);\n        }\n        consumeRow = consumeRow.concat([{\n            title: 'Action',\n            key: '_id',\n            dataIndex: '_id',\n            render: (value, record) => <a onClick={() => that.remove(record._id)}>Delete</a>\n        }]);\n        return <div>\n            <Spin spinning={this.state.loading}>\n                <Card title={this.state.classType + \" Stock\"} extra={\n                    <Search\n                        loading={this.state.loadingQr}\n                        value={this.state.qrValue}\n                        onChange={this.setQrValue}\n                        placeholder=\"Search QR Code\"\n                        onSearch={this.addItemThroughQR}\n                        style={{width: 200}}\n                    />}>\n                    <Row gutter={16}>\n                        <Col span={7}>\n                            <Tabs size=\"small\" type=\"card\">\n                                {INVENTORY_ITEM_TYPE.map(itemType => <TabPane tab={itemType.label} key={itemType.value}>\n                                    <div style={{backgroundColor: '#ddd', padding: 8}}>\n                                        <Input.Search key={itemType.label}\n                                                      placeholder={\"Search in \" + itemType.label + \"...\"}\n                                                      onSearch={value => this.searchValues(itemType.label, value)}/>\n                                    </div>\n                                    <List size={\"small\"}\n                                          itemLayout=\"horizontal\"\n                                          dataSource={this.state.items && this.state.items[itemType.value] ? this.state.items[itemType.value].results : []}\n                                          renderItem={item => (\n                                              <List.Item>\n                                                  <List.Item.Meta\n                                                      title={item.name+\" (\"+item.total_quantity+\")\"}\n                                                      description={item.item_type_stock.item_stock && item.item_type_stock.item_stock.map((stock) =>\n                                                          <span>#{stock.batch_number}<br/></span>)}/>\n                                                  <Button type=\"primary\" size=\"small\" shape=\"circle\"\n                                                          onClick={() => this.add(item)} icon={\"arrow-right\"}/>\n                                              </List.Item>)}/>\n                                    {this.state.items && this.state.items[itemType.value] ?\n                                        <div style={{textAlign: 'center'}}>\n                                            <a style={{margin: 5}}\n                                               disabled={!this.state.items[itemType.value].previous}\n                                               onClick={() => this.loadItemsList(itemType.value, this.state.items[itemType.value].previous)}>\n                                                <Icon type=\"left\"/>Previous\n                                            </a>\n                                            <Divider type={\"vertical\"}/>\n                                            <a style={{margin: 5}} disabled={!this.state.items[itemType.value].next}\n                                               onClick={() => this.loadItemsList(itemType.value, this.state.items[itemType.value].next)}>\n                                                Next<Icon type=\"right\"/>\n                                            </a>\n                                        </div> : null}\n                                </TabPane>)}\n                            </Tabs>\n                        </Col>\n                        <Col span={17}>\n                            <Form onSubmit={this.handleSubmit}>\n                                {this.state.classType == CONSUME_STOCK ?\n                                    <Row>\n                                        <Col span={16}>\n                                            <Form.Item\n                                                key={`type_of_consumption`}\n                                                label={\"Type of Consumption\"}\n                                                {...{\n                                                    labelCol: {span: 6},\n                                                    wrapperCol: {span: 14},\n                                                }}>\n                                                {getFieldDecorator(`type_of_consumption`, {\n                                                    validateTrigger: ['onChange', 'onBlur'],\n                                                    rules: [{\n                                                        required: true,\n                                                        message: \"This field is required.\",\n                                                    }],\n                                                })(\n                                                    <Select>\n                                                        {TYPE_OF_CONSUMPTION.map(item => <Select.Option\n                                                            value={item.value}>{item.label}</Select.Option>)}\n                                                    </Select>\n                                                )}\n                                            </Form.Item>\n                                        </Col>\n                                        {/*<Col span={8}>*/}\n                                        {/*<Search*/}\n                                        {/*loading={this.state.loadingQr}*/}\n                                        {/*value={this.state.qrValue}*/}\n                                        {/*onChange={this.setQrValue}*/}\n                                        {/*placeholder=\"Search QR Code\"*/}\n                                        {/*onSearch={this.addItemThroughQR}*/}\n                                        {/*style={{width: 200}}*/}\n                                        {/*/>*/}\n                                        {/*</Col>*/}\n                                    </Row>\n                                    : null}\n\n                                {/*{this.state.classType == CONSUME_STOCK ?*/}\n                                {/*<Form.Item*/}\n                                {/*key={`supplier`}*/}\n                                {/*label={\"Supplier\"}*/}\n                                {/*{...{*/}\n                                {/*labelCol: {span: 6},*/}\n                                {/*wrapperCol: {span: 14},*/}\n                                {/*}}>*/}\n                                {/*{getFieldDecorator(`addedOn`, {*/}\n                                {/*validateTrigger: ['onChange', 'onBlur'],*/}\n                                {/*rules: [{*/}\n                                {/*message: \"This field is required.\",*/}\n                                {/*}],*/}\n                                {/*})(*/}\n                                {/*<Select>*/}\n                                {/*/!*{this.state.suppliersList && this.state.suppliersList.map(item =>*!/*/}\n                                {/*/!*<Select.Option*!/*/}\n                                {/*/!*value={item.id}>{item.name}</Select.Option>)}*!/*/}\n                                {/*</Select>*/}\n                                {/*)}*/}\n                                {/*</Form.Item>*/}\n                                {/*: null}*/}\n\n                                <Table pagination={false}\n                                       bordered={true}\n                                       rowKey={record => record._id}\n                                       dataSource={this.state.tableFormValues}\n                                       columns={consumeRow}/>\n                                {/*<List>{formItems}</List>*/}\n\n                                <Affix offsetBottom={0}>\n                                    <Card>\n                                        <Row>\n                                            <Col span={8}>\n                                                <Form.Item {...formItemLayoutWithOutLabel}>\n                                                    <Button type=\"primary\" htmlType=\"submit\">Submit</Button>\n                                                    {that.props.history ?\n                                                        <Button style={{margin: 5}}\n                                                                onClick={() => that.props.history.goBack()}>\n                                                            Cancel\n                                                        </Button> : null}\n                                                </Form.Item>\n                                            </Col>\n                                            <Col span={8}>\n                                                <Form.Item\n                                                    key={`date`}\n                                                    label={this.state.classType == ADD_STOCK ? \"Added On\" : \"Consumed On\"}\n                                                    {...{\n                                                        labelCol: {span: 10},\n                                                        wrapperCol: {span: 14},\n                                                    }}>\n                                                    {getFieldDecorator(`date`, {\n                                                        // validateTrigger: ['onChange', 'onBlur'],\n                                                        rules: [{\n                                                            required: true,\n                                                            message: \"This field is required.\",\n                                                        }],\n                                                        initialValue: moment(),\n                                                    })(\n                                                        <DatePicker allowClear={false}/>\n                                                    )}\n                                                </Form.Item>\n\n                                                <Form.Item\n                                                    key={`bill_number`}\n                                                    label='Bill Number'\n                                                    {...{\n                                                        labelCol: {span: 10},\n                                                        wrapperCol: {span: 14},\n                                                    }}>\n                                                    {getFieldDecorator(`bill_number`, {\n                                                        validateTrigger: ['onChange', 'onBlur'],\n                                                        rules: [{\n                                                            required: true,\n                                                            message: \"This field is required.\",\n                                                        }],\n\n                                                    })(\n                                                        <Input/>\n                                                    )}\n                                                </Form.Item>\n\n\n                                                {this.state.classType == ADD_STOCK ? <div>\n                                                    {this.state.customSupplier ?\n                                                        <Form.Item\n                                                            key={`supplier_name`}\n                                                            label={\"Supplier\"}\n                                                            {...{\n                                                                labelCol: {span: 10},\n                                                                wrapperCol: {span: 14},\n                                                            }}>\n                                                            {getFieldDecorator(`supplier_name`, {\n                                                                validateTrigger: ['onChange', 'onBlur'],\n                                                                rules: [{\n                                                                    required: true,\n                                                                    message: \"This field is required.\",\n                                                                }],\n                                                            })(\n                                                                <Input/>\n                                                            )}\n                                                            {this.state.customSupplier ?\n                                                                <a onClick={() => this.changeSupplierType(false)}>Cancel</a> : null}\n                                                        </Form.Item> : <Form.Item\n                                                            key={`supplier`}\n                                                            label={\"Supplier\"}\n                                                            {...{\n                                                                labelCol: {span: 10},\n                                                                wrapperCol: {span: 14},\n                                                            }}>\n                                                            {getFieldDecorator(`supplier`, {\n                                                                validateTrigger: ['onChange', 'onBlur'],\n                                                                rules: [{\n                                                                    required: true,\n                                                                    message: \"This field is required.\",\n                                                                }],\n                                                            })(<Select>\n                                                                {this.state.supplierList.map(item => <Select.Option\n                                                                    value={item.id}>\n                                                                    {item.name}\n                                                                </Select.Option>)}\n                                                            </Select>)}\n                                                            {this.state.customSupplier ? null :\n                                                                <a onClick={() => this.changeSupplierType(true)}>Add\n                                                                    New</a>}\n                                                        </Form.Item>} </div> : null}\n                                            </Col>\n                                            <Col span={6} offset={2}>\n                                                <Form.Item key={'file'} {...formItemLayout}>\n                                                    {getFieldDecorator('file', {})(\n                                                        <Upload {...singleUploadprops}>\n                                                            <Button>\n                                                                <Icon type=\"upload\"/> Select File\n                                                            </Button>\n\n                                                        </Upload>\n                                                    )}\n                                                </Form.Item>\n                                            </Col>\n                                            {this.state.classType == ADD_STOCK ?\n                                                <Col style={{textAlign: 'center'}} span={8}>\n\n                                                    <h3>Grand\n                                                        Total: <b>{this.state.tableFormValues.reduce(function (total, item) {\n                                                            if (that.state.tempValues['quantity' + item._id] && that.state.tempValues['unit_cost' + item._id]) {\n                                                                return total + (that.state.tempValues['quantity' + item._id] * that.state.tempValues['unit_cost' + item._id])\n                                                            }\n                                                            return total\n                                                        }, 0)}</b></h3>\n                                                </Col>\n                                                : null}\n                                        </Row>\n                                    </Card>\n                                </Affix>\n\n                            </Form>\n\n                        </Col>\n                    </Row>\n                </Card>\n            </Spin>\n        </div>\n\n    }\n}\n\nexport default Form.create()(AddOrConsumeStock);\n","import React from \"react\";\nimport {Button, Card, Col, Divider, Icon, Input, Modal, Popconfirm, Radio, Row, Select, Spin, Table, Tag} from \"antd\";\nimport {getAPI, interpolate, putAPI, startLoadingMessage, stopLoadingMessage} from \"../../../utils/common\";\nimport {\n    INVENTORY_ITEM_API,\n    SINGLE_INVENTORY_ITEM_API,\n    INVENTORY_ITEM_EXPORT,\n    PRODUCT_MARGIN\n} from \"../../../constants/api\";\nimport {Link, Route, Switch} from \"react-router-dom\";\nimport AddorEditInventoryItem from \"./AddorEditInventoryItem\";\nimport AddOrConsumeStock from \"./AddOrConsumeStock\"\nimport {ADD_STOCK, CONSUME_STOCK, INVENTORY_ITEM_TYPE} from \"../../../constants/hardData\"\nimport InfiniteFeedLoaderButton from \"../../common/InfiniteFeedLoaderButton\";\nimport moment from \"moment\";\nimport PermissionDenied from \"../../common/errors/PermissionDenied\";\nimport {\n    ASCENDING_ORDER,\n    ERROR_MSG_TYPE,\n    SUCCESS_MSG_TYPE,\n} from \"../../../constants/dataKeys\";\nimport {BACKEND_BASE_URL} from \"../../../config/connect\";\nimport Search from \"antd/es/input/Search\";\n\nexport default class InventoryItemList extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            inventoryItems: [], //All List\n            inventoryItemList: [], // Filtered List\n            stockModalVisibility: false,\n            itemTypeFilter: \"ALL\",\n            itemStockFilter: \"ALL\",\n            loading: true,\n            nextItemPage: null,\n            productMargin:[],\n            inventoryModal:false,\n            inventoryItemObj:null\n        }\n        this.loadData = this.loadData.bind(this);\n        this.showAddOrConsumeModal = this.showAddOrConsumeModal.bind(this);\n        this.setActionType = this.setActionType.bind(this);\n        this.changeFilter = this.changeFilter.bind(this);\n        this.deleteObject = this.deleteObject.bind(this);\n        this.excelExport = this.excelExport.bind(this);\n        this.pdfExport = this.pdfExport.bind(this);\n    }\n\n    componentDidMount() {\n        this.loadData();\n        this.loadProductMargin();\n    }\n    loadProductMargin=() =>{\n        let that = this;\n        let successFn = function (data) {\n            that.setState({\n                productMargin: data\n            })\n        }\n        let errorFn = function () {\n\n        }\n        getAPI(PRODUCT_MARGIN, successFn, errorFn);\n    }\n    loadData(page = 1) {\n        let that = this;\n        that.setState({\n            loading: true\n        });\n        let successFn = function (recData) {\n            let data = recData.results;\n            that.setState(function (prevState) {\n                if (recData.current == 1) {\n                    return {\n                        inventoryItems: data,\n                        loading: false,\n                        nextItemPage: recData.next\n                    }\n                } else {\n                    return {\n                        inventoryItems: [...prevState.inventoryItems, ...data],\n                        loading: false,\n                        nextItemPage: recData.next\n                    }\n                }\n\n            })\n        };\n        let errorFn = function () {\n            that.setState({\n                loading: false\n            })\n        };\n        let reqParams = {\n            maintain_inventory: true,\n            practice: this.props.active_practiceId,\n            page: page,\n            sort:ASCENDING_ORDER,\n            on:'total_quantity',\n        };\n        if (that.state.itemTypeFilter != 'ALL') {\n            reqParams.item_type = that.state.itemTypeFilter\n        }\n        if (that.state.itemStockFilter != 'ALL') {\n            reqParams.filter_type = that.state.itemStockFilter\n        }\n        if (that.state.filterItemName) {\n            reqParams.item_name = that.state.filterItemName\n        }\n        if (that.state.filterItemCode) {\n            reqParams.code = that.state.filterItemCode\n        }\n        if (that.state.filterMLM) {\n            reqParams.margin = that.state.filterMLM\n        }\n        getAPI(INVENTORY_ITEM_API, successFn, errorFn, reqParams);\n    }\n\n    deleteObject(value) {\n        var that = this;\n        let reqData = {\n            is_active: false\n        }\n        let successFn = function (data) {\n            that.loadData();\n        };\n        let errorFn = function () {\n        };\n        putAPI(interpolate(SINGLE_INVENTORY_ITEM_API, [value]), reqData, successFn, errorFn);\n\n    }\n\n    setActionType(type, item_Id) {\n        this.setState({\n            itemId: item_Id,\n            actionType: type,\n        })\n        this.showAddOrConsumeModal(true);\n    }\n\n    showAddOrConsumeModal(type) {\n        this.setState({\n            stockModalVisibility: type,\n        })\n    }\n\n    changeFilter = (e) => {\n        let that = this;\n        this.setState({\n            [e.target.name]: e.target.value\n        }, function () {\n            that.loadData()\n        })\n    }\n    changeInventoryFilters = (key, value) => {\n        let that = this;\n        that.setState( {\n            [key]: value\n        },function () {\n            that.loadData();\n        })\n    }\n\n    excelExport() {\n        let that = this;\n        let msg = startLoadingMessage(\"Generating Report...\");\n        let successFn = function (data) {\n            stopLoadingMessage(msg, SUCCESS_MSG_TYPE, \"Report Generated Successfully!!\");\n            if (data.report_csv)\n                window.open(BACKEND_BASE_URL + data.report_csv);\n        }\n        let errorFn = function () {\n            stopLoadingMessage(msg, ERROR_MSG_TYPE, \"Report Generation Failed!!\");\n        }\n        let reqParams = {\n            maintain_inventory: true,\n            practice: this.props.active_practiceId,\n            sort:ASCENDING_ORDER,\n            on:'total_quantity',\n        };\n        if (that.state.itemTypeFilter != 'ALL') {\n            reqParams.item_type = that.state.itemTypeFilter\n        }\n        if (that.state.itemStockFilter != 'ALL') {\n            reqParams.filter_type = that.state.itemStockFilter\n        }\n        if (that.state.filterItemName) {\n            reqParams.item_name = that.state.filterItemName\n        }\n        if (that.state.filterItemCode) {\n            reqParams.code = that.state.filterItemCode\n        }\n        if (that.state.filterMLM) {\n            reqParams.margin = that.state.filterMLM\n        }\n        getAPI(INVENTORY_ITEM_EXPORT, successFn, errorFn, reqParams);\n    }\n\n    pdfExport() {\n        let that = this;\n        let msg = startLoadingMessage(\"Generating Report...\");\n        let successFn = function (data) {\n            stopLoadingMessage(msg, SUCCESS_MSG_TYPE, \"Report Generated Successfully!!\");\n            if (data.report_pdf)\n                window.open(BACKEND_BASE_URL + data.report_pdf);\n        }\n        let errorFn = function () {\n            stopLoadingMessage(msg, ERROR_MSG_TYPE, \"Report Generation Failed!!\");\n        }\n        let reqParams = {\n            maintain_inventory: true,\n            practice: this.props.active_practiceId,\n            sort:ASCENDING_ORDER,\n            on:'total_quantity',\n        };\n        if (that.state.itemTypeFilter != 'ALL') {\n            reqParams.item_type = that.state.itemTypeFilter\n        }\n        if (that.state.itemStockFilter != 'ALL') {\n            reqParams.filter_type = that.state.itemStockFilter\n        }\n        if (that.state.filterItemName) {\n            reqParams.item_name = that.state.filterItemName\n        }\n        if (that.state.filterItemCode) {\n            reqParams.code = that.state.filterItemCode\n        }\n        if (that.state.filterMLM) {\n            reqParams.margin = that.state.filterMLM\n        }\n        getAPI(INVENTORY_ITEM_EXPORT, successFn, errorFn, reqParams);\n    }\n    inventoryItemModalOpen =(item)=>{\n        this.setState({\n            inventoryModal:true,\n            inventoryItemObj:item\n        })\n    }\n\n    inventoryItemModalClose =()=>{\n        this.setState({\n            inventoryModal:false,\n        })\n    }\n\n\n\n    render() {\n        const taxesdata = {};\n        if (this.state.taxes_list) {\n            this.state.taxes_list.forEach(function (tax) {\n                taxesdata[tax.id] = tax;\n            })\n        }\n        const manufacturerData = {}\n        if (this.state.manufacture_list) {\n            this.state.manufacture_list.forEach(function (manufacturer) {\n                manufacturerData[manufacturer.id] = manufacturer.name;\n            })\n        }\n        const vendorData = {}\n        if (this.state.vendor_list) {\n            this.state.vendor_list.forEach(function (vendor) {\n                vendorData[vendor.id] = vendor.name;\n            })\n        }\n        let that = this;\n        let columns = [{\n            title: 'Name',\n            dataIndex: 'name',\n            key: 'name',\n            render: (value,record) => <a onClick={()=>this.inventoryItemModalOpen(record)}><span>{record.name}</span></a>\n        }, {\n            title: 'HSN',\n            dataIndex: 'code',\n            key: 'code',\n            // render: (value,record) => <span>{record.inventory_item.code}</span>\n        }, {\n            title: 'Inventory Stock',\n            dataIndex: 'total_quantity',\n            key: 'total_quantity',\n            render: (value, record) => <span>{value} {value <= record.re_order_level ?\n                <Tag color=\"#f50\">Low</Tag> : null}</span>\n\n        }, {\n            title: 'Expired Stock',\n            dataIndex: 'item_type_stock',\n            key: 'expired_stock',\n            export: function (item_type_stock, record) {\n                let totalStock = 0;\n                let currentDate = moment();\n                if (item_type_stock.item_stock)\n                    item_type_stock.item_stock.forEach(function (stock) {\n                        if (currentDate >= moment(stock.expiry_date, \"YYYY-MM-DD\"))\n                            totalStock += (Number.isInteger(stock.quantity) ? stock.quantity : 0)\n                    });\n                return totalStock;\n            },\n            render: function (item_type_stock, record) {\n                let totalStock = 0;\n                let currentDate = moment();\n                if (item_type_stock.item_stock)\n                    item_type_stock.item_stock.forEach(function (stock) {\n                        if (currentDate >= moment(stock.expiry_date, \"YYYY-MM-DD\"))\n                            totalStock += (Number.isInteger(stock.quantity) ? stock.quantity : 0)\n                    });\n                return <span>{totalStock}</span>;\n            }\n        }, {\n            title: 'Retail Price (INR)',\n            dataIndex: 'retail_without_tax',\n            key: 'retail_without_tax',\n            render: (value, record) => <span>{record.retail_without_tax}\n                </span>\n        }, {\n            title: 'Tax',\n            dataIndex: 'taxes',\n            key: 'taxes',\n            render: (value, record) => <span>\n                {record.taxes_data && record.taxes_data.map(tax =>\n                    <Tag>\n                        <small> {(tax ? tax.name + \"@\" + tax.tax_value + \"%\" : null)}</small>\n                    </Tag>\n                )}\n                </span>\n        }, {\n            title: \"MLM Margin\",\n            dataIndex: \"margin_data\",\n            key: \"margin\",\n            render: (margin) => (\n                <span>{margin ? margin.name : null}\n                </span>)\n        }, {\n            title: 'Item type',\n            dataIndex: 'item_type',\n            key: 'item_type',\n            // render: (value,record) => <span>{record.inventory_item.item_type}</span>\n        }, {\n            title: 'Reorder Level',\n            dataIndex: 're_order_level',\n            key: 're_order_level',\n            // render: (value, record) => <span>{record.inventory_item.re_order_level}</span>\n        }, {\n            title: 'Manufacturer',\n            key: 'manufacturer',\n            export: function (text, record) {\n                return record.manufacturer_data ? record.manufacturer_data.name : '';\n            },\n            render: (text, record) => (\n                <span> {record.manufacturer_data ? record.manufacturer_data.name : ''}</span>\n            )\n        }, {\n            title: 'Stock Cost (INR)',\n            key: 'stock_cost',\n            // export: function (text, record) {\n            //     return record.manufacturer_data ? record.manufacturer_data.name : '';\n            // },\n            render: (text, record) => (\n                <span> {record.item_type_stock && record.item_type_stock.item_stock ? record.item_type_stock.item_stock.reduce((a, b) => a + (b.unit_cost * b.quantity), 0) : ''}</span>\n            )\n        }, {\n            title: 'Actions',\n            render: (item) => {\n                return <div>\n                    <Link to={\"/inventory/edit/\" + item.id}>Edit</Link>\n                    <Divider type=\"vertical\"/>\n                    {/* <Link to={\"/inventory/edit-item-type/\" + item.id}>Edit stock type </Link>\n                        <Divider type=\"vertical\"/> */}\n                    {item.total_quantity == 0 ?\n                        <Popconfirm title=\"Are you sure delete this item?\"\n                                    onConfirm={() => that.deleteObject(item.id)} okText=\"Yes\" cancelText=\"No\">\n                            <a>Delete</a>\n                        </Popconfirm> : <Tag color=\"red\">Can Not Delete</Tag>}\n                </div>\n            }\n        }];\n\n        const inventoryItemColumn =[\n            {\n                title:'S.No',\n                key:'s_no',\n                render:(item , record ,index)=><span>{index+1}</span>\n            },\n            {\n                title:'Batch Number',\n                dataIndex:'batch_number',\n                key:\"batch_number\",\n            },\n            {\n                title:'Quantity',\n                dataIndex:'quantity',\n                key:'quantity',\n\n            },\n            {\n                title:'Stock Cost(INR)',\n                key:'stock_cost',\n                render:(item, record) =><span>{(record.quantity * record.unit_cost).toFixed(2)}</span>\n            },{\n                title:'Expiry Date',\n                key:'expiry_date',\n                render:(item, record)=><span>{moment(record.expiry_date).format('DD-MM-YYYY')}</span>\n            }\n        ]\n        return <div>\n            <Switch>\n                <Route path=\"/inventory/add\"\n                       render={(route) => (that.props.activePracticePermissions.AddInventoryItem || that.props.allowAllPermissions ?\n                           <AddorEditInventoryItem {...route} {...this.props} {...this.state}\n                                                   loadData={this.loadData}/> : <PermissionDenied/>)}/>\n\n                {/* <Route path=\"/inventory/edit-item-type/:id\"\n                       render={(route) => <AddOrConsumeStock key={ADD_STOCK}\n                       type={ADD_STOCK}\n                       loadData={this.loadData}\n                       {...this.state} {...route} {...this.props}/>}/> */}\n\n                <Route exact path='/inventory/edit/:id'\n                       render={(route) => (that.props.activePracticePermissions.AddInventoryItem || that.props.allowAllPermissions ?\n                           <AddorEditInventoryItem {...this.state} {...this.props} {...route}\n                                                   loadData={this.loadData}/> : <PermissionDenied/>)}/>\n\n                <Route exact path='/inventory/consume-stock'\n                       render={(route) => (that.props.activePracticePermissions.AddInventoryStock || that.props.allowAllPermissions ?\n                           <AddOrConsumeStock key={CONSUME_STOCK} type={CONSUME_STOCK}\n                                              loadData={this.loadData} {...this.state} {...route} {...this.props}/> :\n                           <PermissionDenied/>)}/>\n\n                <Route exact path='/inventory/add-stock'\n                       render={(route) => (that.props.activePracticePermissions.ConsumeInventoryStock || that.props.allowAllPermissions ?\n                           <AddOrConsumeStock key={ADD_STOCK} type={ADD_STOCK}\n                                              loadData={this.loadData}{...this.state} {...route} {...this.props}/> :\n                           <PermissionDenied/>)}/>\n\n                <Route>\n                    <Card title=\"Inventory List\"\n                          extra={<Button.Group>\n                              <Link to=\"/inventory/add\"><Button type=\"primary\"\n                                                                disabled={!that.props.activePracticePermissions.AddInventoryItem && !that.props.allowAllPermissions}><Icon\n                                  type=\"plus\"/> Add Item</Button></Link>\n\n                              <Link to=\"/inventory/add-stock\"> <Button\n                                  disabled={!that.props.activePracticePermissions.AddInventoryStock && !that.props.allowAllPermissions} type=\"primary\">Add\n                                  Stock</Button></Link>\n                              <Link to=\"/inventory/consume-stock\"><Button\n                                  disabled={!that.props.activePracticePermissions.ConsumeInventoryStock && !that.props.allowAllPermissions} type=\"primary\">Consume\n                                  Stock</Button></Link>\n                          </Button.Group>}>\n                        <Row>\n                            <Radio.Group name=\"itemTypeFilter\" size=\"small\" defaultValue={\"ALL\"} buttonStyle=\"solid\"\n                                         onChange={this.changeFilter} style={{margin: '10px'}}>\n                                <Radio.Button value={\"ALL\"}>ALL</Radio.Button>\n                                {INVENTORY_ITEM_TYPE.map(item =>\n                                    <Radio.Button value={item.value}>\n                                        {item.label}\n                                    </Radio.Button>)}\n                            </Radio.Group>\n                            <Radio.Group name=\"itemStockFilter\" size=\"small\" defaultValue={\"ALL\"} buttonStyle=\"solid\"\n                                         style={{margin: '10px', float: 'right'}} onChange={this.changeFilter}>\n                                <Radio.Button value={\"ALL\"}>ALL</Radio.Button>\n                                <Radio.Button value={\"Low\"}>Low</Radio.Button>\n                                <Radio.Button value={\"Expired\"}>Expired</Radio.Button>\n                            </Radio.Group>\n                        </Row>\n                        <Row gutter={16} style={{marginBottom: 10}}>\n                            <Col span={4}>\n                                <Button.Group size=\"small\">\n                                    <Button disabled={this.state.loading} type=\"primary\"\n                                            onClick={this.excelExport}><Icon\n                                        type=\"file-excel\"/> Excel</Button>\n                                    <Button disabled={this.state.loading} type=\"primary\" onClick={this.pdfExport}><Icon\n                                        type=\"file-pdf\"/> PDF</Button>\n                                </Button.Group>\n                            </Col>\n\n                            <Col span={2} style={{textAlign: \"right\"}}>\n                                <b> Item Name</b>\n                            </Col>\n                            <Col span={4}>\n                                <Input style={{width: '100%'}} value={this.state.filterItemName}\n                                       allowClear={true}\n                                       // disabled={this.state.loading}\n                                       placeholder={\"Item Name\"}\n                                       onChange={(e) => this.changeInventoryFilters('filterItemName', e.target.value)}/>\n                            </Col>\n                            <Col span={2} style={{textAlign: \"right\"}}>\n                                <b> HSN</b>\n                            </Col>\n                            <Col span={4}>\n                                <Input style={{width: '100%'}} value={this.state.filterItemCode}\n                                       allowClear={true}\n                                       // disabled={this.state.loading}\n                                       placeholder={\"HSN Number\"}\n                                       onChange={(e) => this.changeInventoryFilters('filterItemCode', e.target.value)}/>\n                            </Col>\n                            <Col span={2} style={{textAlign: \"right\"}}>\n                                <b> MLM</b>\n                            </Col>\n                            <Col span={4}>\n                                <Select style={{width: '100%'}} value={this.state.filterMLM} allowClear={true}\n                                    // disabled={this.state.loading}\n                                        placeholder={\"MLM Margin\"}\n                                        onChange={(e) => this.changeInventoryFilters('filterMLM', e)}>\n                                    {this.state.productMargin.map(item=><Select.Option value={item.id}>{item.name}</Select.Option>)}\n                                </Select>\n                            </Col>\n                            {/*<Col span={8}>*/}\n                            {/*    <Button type={\"primary\"} onClick={()=>this.loadData()}> Filter Items</Button>*/}\n                            {/*</Col>*/}\n\n\n                        </Row>\n\n                        <Row>\n                            <Table bordered={true}\n                                   pagination={false}\n                                   hideReport={true}\n                                   dataSource={this.state.inventoryItems.sort((a,b) =>parseInt(b.total_quantity) -parseInt(a.total_quantity))}\n                                   columns={columns}/>\n                            <Spin spinning={this.state.loading}>\n                                <Row/>\n                            </Spin>\n                            <InfiniteFeedLoaderButton\n                                loaderFunction={() => this.loadData(this.state.nextItemPage)}\n                                loading={this.state.loading}\n                                hidden={!this.state.nextItemPage}/>\n                        </Row>\n                        <Modal visible={this.state.stockModalVisibility}\n                               title={\"Stock\" + this.state.actionType}\n                               onOk={() => this.showAddOrConsumeModal(false)}\n                               onCancel={() => this.showAddOrConsumeModal(false)}\n                               footer={null}>\n                            <AddOrConsumeStock showAddOrConsumeModal={this.showAddOrConsumeModal}\n                                               itemId={this.state.itemId}\n                                               actionType={this.state.actionType}/>\n                        </Modal>\n\n                        <Modal\n                            title={this.state.inventoryItemObj?this.state.inventoryItemObj.name + ' ' + 'Details':''}\n                            visible={this.state.inventoryModal}\n                            onCancel={this.inventoryItemModalClose}\n                            footer={null}\n                        >\n                            <Table dataSource={this.state.inventoryItemObj?this.state.inventoryItemObj.item_type_stock.item_stock:[]}\n                               columns={inventoryItemColumn} pagination={false}\n                            />\n                        </Modal>\n                    </Card>\n                </Route>\n            </Switch>\n\n        </div>\n    }\n\n\n}\n","import React from \"react\";\nimport {Layout} from \"antd\";\nimport {Route, Switch} from \"react-router-dom\";\nimport VendorList from \"./vendor/VendorList\";\nimport ExpensesList from \"./expenses/ExpensesList\";\nimport ManufactureList from \"./manufacture/ManufactureList\";\nimport LabList from \"./labs/LabList\";\nimport ActivityList from \"./activities/ActivityList\";\nimport InventoryItemList from \"./inventoryItem/InventoryItemList\";\nimport PermissionDenied from \"../common/errors/PermissionDenied\";\n\nconst {Content} = Layout;\nexport default class InventoryHome extends React.Component {\n    constructor(props) {\n        super(props);\n    }\n\n    render() {\n        let that =this;\n        return <Content className=\"main-container\" style={{\n            margin: '24px 16px',\n            // padding: 24,\n            minHeight: 280,\n            // marginLeft: '200px'\n        }}>\n\n            <Switch>\n                <Route path=\"/inventory/vendor\" render={(route) =>(that.props.activePracticePermissions.ViewVendor || that.props.allowAllPermissions?\n                    <VendorList {...this.props} {...route}/>:<PermissionDenied/>)}/>\n                    \n                <Route path=\"/inventory/expenses\" render={(route) =>(that.props.activePracticePermissions.ViewExpenses || that.props.allowAllPermissions ?\n                    <ExpensesList {...this.props} {...route}/>:<PermissionDenied/>)}/>\n\n                <Route path=\"/inventory/manufacture\" render={(route) =>(that.props.activePracticePermissions.ViewManufacturer || that.props.allowAllPermissions?\n                    <ManufactureList {...that.props} {...this.state} {...route}/>:<PermissionDenied/>)}/>\n                <Route path=\"/inventory/lab\" render={(route) => (that.props.activePracticePermissions.Labs || that.props.allowAllPermissions ?\n                    <LabList {...this.props}/>:<PermissionDenied/>)}/>\n                <Route path=\"/inventory/activity\" render={(route) =>(that.props.activePracticePermissions.ViewActivities || that.props.allowAllPermissions ?\n                    <ActivityList {...this.props} {...route}/>:<PermissionDenied/>)}/>\n                <Route path=\"/inventory\" render={(route)=> (that.props.activePracticePermissions.ViewInventory || that.props.allowAllPermissions ?\n                    <InventoryItemList {...route} {...this.props}/>:<PermissionDenied/>)}/>\n            </Switch>\n        </Content>\n    }\n}\n"],"sourceRoot":""}