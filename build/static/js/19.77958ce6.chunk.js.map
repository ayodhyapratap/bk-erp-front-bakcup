{"version":3,"sources":["app/components/settings/options/practice-detail/PracticeDetails.js","app/components/settings/options/practice-staff/DoctorTiming.js","app/components/settings/options/practice-staff/PracticeStaff.js","app/components/settings/options/practice-staff/AddEditDoctor.js","app/components/settings/options/practice-staff/AddEditStaff.js","app/components/settings/options/practice-detail/AddPracticeDetails.js","app/components/settings/options/communication-settings/WishSMS.js","app/components/settings/options/communication-settings/AppointmentSMS.js","app/components/settings/options/communication-settings/Emails.js","app/components/settings/options/communication-settings/CommunicationSettings.js","app/components/settings/options/procedure-catalog/EditProcedure.js","app/components/settings/options/procedure-catalog/AddProcedure.js","app/components/settings/options/procedure-catalog/AddorEditProcedure.js","app/components/settings/options/procedure-catalog/RecentProcedure.js","app/components/settings/options/billing/PaymentModes.js","app/components/settings/options/billing/TaxCatalog.js","app/components/settings/options/billing/CancelledInvoice.js","app/components/settings/options/billing/BillingSettings.js","app/components/settings/options/emr/TableData.js","app/components/settings/options/emr/VitalSigns.js","app/components/settings/options/emr/EMRSettings.js","app/components/settings/options/practice-detail/EditPracticeDetail.js","app/components/settings/options/prescriptions/AddorEditPrescriptionForm.js","app/components/settings/options/prescriptions/Prescriptions.js","app/components/settings/options/prescriptions/AddPrescription.js","app/components/settings/options/expenses-types/ExpensesTypes.js","app/components/settings/options/medical-history/MedicalHistory.js","app/components/settings/options/calendar/PracticeTimings.js","app/components/settings/options/calendar/AppointmentCategories.js","app/components/settings/options/calendar/CalendarSettings.js","app/components/settings/SettingSider.js","app/components/settings/options/mlm/MLMGenerate.js","app/components/settings/options/mlm/MlmBase.js","app/components/settings/options/printout/PrintSettings.js","app/components/settings/options/printout/Printout.js","app/components/settings/options/integration/IntegrationHome.js","app/components/settings/options/mailPDF/MailPDFSettings.js","app/components/settings/options/bed-packages/AddorEditBedPackages.js","app/components/settings/options/bed-packages/BedPackages.js","app/components/settings/options/roomtypes/RoomTypes.js","app/components/settings/options/loyalty/AddOffer.js","app/components/settings/options/loyalty/Offers.js","app/components/settings/options/loyalty/AddMembership.js","app/components/settings/options/loyalty/Membership.js","app/components/settings/options/loyalty/promo-code/AddOrEdiPromoCode.js","app/components/settings/options/loyalty/promo-code/PromoCode.js","app/components/settings/options/loyalty/LoyaltySettings.js","app/components/settings/options/labs/AddorEditLab.js","app/components/settings/options/labs/LabTest.js","app/components/settings/options/labs/AddorEditLabPanel.js","app/components/settings/options/labs/LabPanel.js","app/components/settings/options/labs/LabTracking.js","app/components/settings/options/medicine-packages/AddorEditMedicinePackages.js","app/components/settings/options/medicine-packages/MedicinePackages.js","app/components/settings/options/disease-list/DiseaseList.js","app/components/settings/options/agent-roles/AgentRoles.js","app/components/settings/options/agents/AddOrEditAgent.js","app/components/settings/options/agents/AgentList.js","app/components/settings/SettingsDash.js","app/utils/export.js","app/components/common/CustomizedTable.js","app/components/common/InfiniteFeedLoaderButton.js","app/components/patients/wallet-ledger/PatientWalletLedger.js"],"names":["PracticeDetails","Meta","props","showModal","item","setState","visible","practice","handleCancel","state","practiceList","specialisations","loading","deletePractice","bind","this","admin_practiceData","that","getAPI","ALL_PRACTICE","data","forEach","speciality","id","console","log","value","postAPI","interpolate","PRACTICE_DELETE","refreshClinicData","columns","title","dataIndex","key","render","text","record","href","onClick","to","type","length","onConfirm","okText","cancelText","style","float","pagination","dataSource","closable","width","onCancel","footer","icon","shape","position","top","right","paddingBottom","span","offset","logo","size","src","makeFileURL","ProfileTables","label","name","tagline","email","contact","website","gstin","specialisation","address","locality","React","Component","gutter","DoctorTiming","loadData","DOCTOR_VISIT_TIMING_API","active_practiceId","visting_hour_same_week","openPracticeDays","twoSessions","dataObject","DAY_KEYS","dayKey","is_two_sessions","timings","displayMessage","WARNING_MSG_TYPE","doctor","doctorId","handleSubmit","e","preventDefault","form","validateFieldsAndScroll","err","values","reqData","first_start_time","moment","format","first_end_time","second_start_time","second_end_time","history","goBack","SUCCESS_MSG_TYPE","changeVistingHourSameWeek","target","checked","changeOpenPracticeDays","prevState","changePracticeTwoSessions","match","params","docId","formItemLayout","formLayout","labelCol","wrapperCol","getFieldDecorator","onSubmit","Item","valuePropName","initialValue","rules","message","REQUIRED_FIELD_MESSAGE","onChange","margin","required","map","replace","c","toUpperCase","htmlType","create","Column","TabPane","ColumnGroup","confirm","momentTime","timeStr","getAllPermissions","ALL_PERMISSIONS","allPermissions","practice_permissions","allGlobalPermissions","global_permissions","handleClick","current","loadDoctorsTiming","doctorList","practice_doctors","timingObject","dataObj","doctorsTiming","join","changeTab","defaultActiveTab","push","toggleEnableStaffPractice","staff","ENABLE_STAFF_IN_PRACTICE","is_active","admin_StaffData","toggleAllPermissions","permissionsArray","permission","permObject","codename","currentUser","editPermissions","successFn","bulkEditLoading","errorFn","onOk","UPDATE_BULK_PERMISSIONS","permissions","practice_staff","roles","permissionEditModal","location","hash","setPermission","staffRoles","sendPractice","SET_USER_PERMISSION","patchAPI","SET_SPECIFIC_USER_PERMISSION","undefined","user","USER_PRACTICE_PERMISSIONS","putAPI","SINGLE_PRACTICE_STAFF_API","STAFF_ROLES","PRACTICESTAFF","usersdata","role","DOCTORS_ROLE","all","loggedInUserPractices","Object","keys","doctorColumns","is_superuser","color","defaultChecked","last_login","fromNow","disabled","in_practice","deleteStaff","staffColumns","notification_doctor_columns","confirmation_sms","schedule_sms","confirmation_email","online_appointment_sms","notification_staff_columns","path","route","defaultActiveKey","tab","marginRight","CustomizedTable","visitObj","visitTime","spinning","reduce","a","b","display","AddEditDoctor","redirect","editStaff","changeRedirect","loadEditPracticeStaff","doctorid","redirectVar","editformProp","fields","placeholder","first_name","INPUT_FIELD","mobile","EMAIL_FIELD","registration_number","calendar_colour","COLOR_PICKER","SINGLE_CHECKBOX_FIELD","formProp","action","ALL_PRACTICE_STAFF","method","defaultValues","TestFormLayout","DynamicFieldsForm","exact","AddEditStaff","staffid","SELECT_FIELD","options","ROLES","AddPracticeDetails","countries","SMS_LANGUAGE_CONFIG_PARAM","EXTRA_DATA","country","loadConfigParameters","specialisationsOptions","SINGLE_IMAGE_UPLOAD_FIELD","allowWebcam","activePracticeData","language","WishSMS","loadWishSMS","COMMUNICATONS_API","wishsmsData","birthday_wish_sms","extra","follow","birthday_wish_text","minRows","SMS_FIELD","APPOINTMENT_CONFIRMATION_SMS_TAG_OPTIONS","anniversary_wish_sms","anniversary_wish_text","online_appointment_text","AppointmentSMS","handleChangeLanguage","contact_number","sms_clinic_name","appointment_confirmation_sms","appointment_confirmation_text","appointment_cancellation_sms","appointment_cancellation_text","appointment_reminder_sms","appointment_reminder_text","send_on_day_of_appointment","send_on_day_of_appointment_time","isValid","TIME_PICKER","follow_up_reminder_sms","follow_up_reminder_sms_text","send_follow_up_reminder_time","payment_sms","payment_sms_text","promo_code_text","LABEL_FIELD","promo_code_value_text","PROMO_CODE_RUPEE_SMS_TAG_OPTIONS","promo_code_precent_text","PROMO_CODE_SMS_TAG_OPTIONS","lab_order_confirmation_sms","lab_order_confirmation_text","lab_order_due_on_sms","lab_order_result_sms","lab_order_reminder_sms","defaultValue","sms_language","option","Option","Emails","EMAIL_COMMUNICATONS_API","email_clinic_name","clinic_logo","appointment_confirmation_email","appointment_confirmation_email_text","MAIL_TEMPLATE_FIELD","DIVIDER_FIELD","appointment_cancellation_email","appointment_cancellation_email_text","appointment_reminder_email","send_before_day_of_appointment","followup_reminder_email","appointment_reminder_email_text","birthday_wish_email","birthday_wish_email_text","lab_order_confirmation_email","lab_order_confirmation_email_text","lab_order_due_date_email","lab_order_due_date_email_text","lab_order_result_email","alab_order_result_email_text","anniversary_wish_email","anniversary_wish_email_text","CommunicationSettings","AddorEditProcedure","changeNetPrice","getFieldsValue","setFields","setTimeout","cost_with_tax","totalTaxAmount","taxes","taxid","taxObj","tax_value","retailPrice","retail_price","toFixed","validateFields","cost","editingProcedureData","PROCEDURE_CATEGORY","procedure_category","productMargin","loadTaxes","loadProcedures","loadProductMargin","search","pairValueArray","substr","split","urlInitialValue","setFieldsValue","keyValue","isNaN","toString","indexOf","parseInt","parseFloat","PRODUCT_MARGIN","TAXES","className","Group","tax","under","default_notes","RecentProcedure","changeSearchValue","searchString","page","results","next","url","editProcedure","deleteObject","activePracticePermissions","SettingsProcedureCatalog","allowAllPermissions","PermissionDenied","InfiniteFeedLoaderButton","hidden","loaderFunction","PaymentModes","modes","PAYMENT_MODES","editingId","editingmode","mode","editingType","payment_type","editingFee","fee","editPayment","PAYMENT_TYPES","NUMBER_FIELD","min","editfields","editFormDefaultValues","TaxCatalog","editingName","editingValue","max","CancelledInvoice","practiceDetail","PRACTICE","hide_cancelled_invoice","hide_cancelled_return","hide_cancelled_payment","BillingSettings","TableData","editFunction","VitalSigns","vitalSign","loadVitalSign","EMR_VITAL_SIGNS","temperature_unit","DEFAULT_TEMPERATURE_IN","Temp_in","temperature_method","DEFAULT_TEMPERATURE_METHOD","TempMethod","blood_pressure_method","DEFAULT_BP_METHOD","BPMETHOD","EMRSettings","EMR_COMPLAINTS","EMR_OBSERVATIONS","EMR_DIAGNOSES","EMR_INVESTIGATIONS","EMR_TREATMENTNOTES","EMR_MEDICATION","EMR_FILETAGS","EditPracticeDetail","practiceId","City","pincode","invoice_prefix","payment_prefix","return_prefix","AddorEditPrescriptionForm","setFormParams","maintain_inventory","item_type","DRUG","editPrescreption","INVENTORY_ITEM_API","drugTypeList","drugUnitList","editCatalog","loadDrugType","loadDrugUnit","DRUG_TYPE_API","DRUG_UNIT_API","drugType","drug_type_extra","drug_type","strength","drugUnit","unit_type_extra","stength_unit","instructions","Prescriptions","catalog","loadMorePrescriptions","loadInitialData","ExpensesTypes","showDeletedExpenses","showDeleted","deletedLoading","expenses","deletedExpenses","deleted","EXPENSE_TYPE","editTax","MedicalHistory","showDeletedMedicalHistory","deletedHistory","MEDICAL_HISTORY","dayKeys","PracticeTimings","CALENDER_SETTINGS","today_first_day","calendar_slot","allowClear","AppointmentCategories","appointmentCategories","loadAppointmentCategories","APPOINTMENT_CATEGORIES","obj","intToRGB","hashCode","editCategory","CalendarSettings","Sider","SettingSider","trigger","collapsible","overflow","minHeight","background","defaultSelectedKeys","ItemGroup","SettingsPracticeDetail","SettingsCommunincations","SettingsCalendar","SettingsPracticeStaff","SettingsAgents","SettingsAgentRoles","SettingsBilling","SettingsLoyalty","SettingsMLMSettings","SettingsEMR","SettingsPrescriptions","SettingsLabs","SettingsPrintouts","SettingsMedicalHistory","SettingsExpenseTypes","SettingsRoomTypes","SettingsBedPackages","SettingsMedicinePackages","SettingsDiseaseList","MLMGenerate","comissions","margin_name","level_count","i","level","commision_percent","editId","changePassLoading","GENERATE_MLM_COMMISSON","details","add","level_name","nextKeys","getFieldValue","concat","setLevelCount","editRecord","editRecordMargins","loadRoles","roleId","loadMlmData","AGENT_ROLES","xs","sm","validateTrigger","bordered","Panel","MlmBase","mlmItems","SINGLE_PRODUCT_MARGIN","rolesdata","datasource","roledata","accordion","marginType","index","header","editObject","marginTop","rowKey","TextArea","radioTabList","CUSTOMIZE_PAPER_TYPE","radioTab","Button","PrintSettings","changeFormType","selectedFormType","formData","file","response","image_path","print_setting","logo_path","save_for_all","sub_type","SAVE_ALL_PRINT_SETTINGS","PRACTICE_PRINT_SETTING_API","handleFormEditSettings","editedPrintSettings","loadPDF","report","window","open","BACKEND_BASE_URL","onchangeHandle","is_patient_not","resetFields","md","lg","pageSizeOptionList","PAPER_SIZE","pageSize","headerInclude","HEADER_INCLUDE","header_include","logoType","LOGO_TYPE","logo_type","logoAlignment","LOGO_ALIGMENT","logo_alignment","logoInclude","LOGO_INCLUDE","logo_include","singleUploadprops","makeURL","FILE_UPLOAD_API","headers","authorization","info","status","fileList","success","error","pageOrientation","PATIENT_DETAILS_LIST","patient_details","PAGE_ORIENTATION","printer_type","PRINTER_TYPE","printerType","PreviewParamsURL","editedObject","encodeURIComponent","textAlign","buttonStyle","page_size","page_orientation","page_print_type","page_margin_top","page_margin_left","page_margin_bottom","page_margin_right","header_text","header_left_text","header_right_text","EXCLUDE_PATIENT_DOB","footer_margin_top","footer_text","rows","footer_left_text","footer_right_text","PRINT_PREVIEW_RENDER","backgroundColor","padding","height","boxShadow","Printout","setRandomKey","randomKey","Math","random","activeKey","EMR_TYPE","EMR_SUB_TYPE","BILLING_TYPE","BILLING_SUB_TYPE","IntegrationHome","integrateData","SAVE_CREDENTIALS","taskIntegrateFormFields","login","PASSWORD_FIELD","password","taskIntegrateFormProp","MailPDFSettings","AddorEditBedPackages","loadRequiredData","ROOM_TYPE","roomTypes","editPackage","BedPackageForm","no_of_days","normal_price","normal_tax_value","tatkal_price","tatkal_tax_value","image","room","MULTI_SELECT_FIELD","description","TEXT_FIELD","formProps","BED_PACKAGES","BedPackages","packages","alt","maxWidth","maxHeight","RoomTypes","rooms","deletedRooms","editObj","normal_seats","tatkal_seats","AddOffer","OFFERS","beforeSubmit","Offers","offers","AddMembership","MEMBERSHIP_API","formDefaultValues","AddForm","Membership","membership","AddOrEdiPromoCode","loadPatient","SEARCH_PATIENT","patientList","PROMO_CODE","editPromoCode","CURRENCY_TYPE","showSearch","onSearch","filterOption","custom_id","PromoCode","promoCode","nextPage","SINGLE_PROMO_CODE","sendSMS","SEND_PROMO_CODE_SMS","expiry_date","LoyaltySettings","AddorEditLab","editFields","editTest","instruction","LABTEST_API","LabTest","tests","editLabs","deleteTest","product_margin","onChangeHandler","panelCost","onChangeSelect","selectedTest","testObject","removeLabPanel","LABPANEL_API","loadTests","JSON","stringify","testKeys","TotalCost","testOption","test","paddingLeft","LabPanel","labPanel","loadLabPanel","editPanels","deleteLabPanel","subColumns","AddorEditLabPanel","expandedRowRender","LabTracking","AddorEditMedicinePackages","MedicinePackageForm","final_price","MEDICINE_PACKAGES","MedicinePackages","DiseaseList","diseases","DISEASE_LIST","AgentRoles","FormItem","AddOrEditAgent","saving","referal","is_agent","aadhar_upload","is_approved","userDetails","PATIENT_PROFILE","editAgentData","PATIENTS_LIST","handlePatientSelect","event","userListData","agentRoles","getPatient","searchPatient","loadAgentRoles","formPatients","avatar","charAt","PatientPhoneNumber","hideMobile","defaultActiveFirstOption","showArrow","onSelect","referer_data","referer","referer_code","showWallet","showAgentData","payAgentModal","payAgentData","approveAgent","approvalLoading","agentList","agent","approved","total","count","apiParams","export","patient","role_data","hideExport","PayAgentForm","layout","minWidth","centered","PatientWalletLedger","currentPatient","closeIcon","WALLET_LEDGER","confirmText","DATE_PICKER","Content","SettingsDash","collapsed","PracticeStaff","SettingsEmailPDFSettings","component","Error404","makeCSVString","dataArray","printColumn","str","line","column","dataRow","downloadCSV","fileName","cCode","fName","bArr","charCodeAt","blob","Blob","Uint8Array","navigator","msSaveBlob","link","document","createElement","download","URL","createObjectURL","setAttribute","visibility","body","appendChild","click","removeChild","revokeObjectURL","getColumnSearchProps","filterDropdown","setSelectedKeys","selectedKeys","clearFilters","ref","node","searchInput","onPressEnter","handleSearch","marginBottom","handleReset","filterIcon","filtered","onFilter","toLowerCase","includes","onFilterDropdownVisibleChange","select","highlightStyle","searchWords","searchText","autoEscape","textToHighlight","excelExport","pdfExport","newProps","excelColumns","dataKey","dataArrayForExcel","dataObjectToPush","pdf","jsPDF","addPDFHeader","autoTable","startY","autoTableEndPosY","headerStyle","bodyStyles","setFontSize","addPDFFooter","save","exportToPDF","exportToExcel","hideReport","pageSizeOptions","showSizeChanger","showQuickJumper","showTotal","range","startLoading","startMakingExtraLabels","extraLoadingLabel","Text","loadPatientWallet","AGENT_WALLET","walletAmount","pendingAmount","ledger","start","selectedStartDate","startOf","end","selectedEndDate","endOf","agents","selectedAgents","loadSumData","ledgerDetails","WALLET_LEDGER_SUM","changeExpenseFilters","subtract","loadAgents","MY_AGENTS","is_cancelled","delete","prefix","non_refundable","precision","credit","debit"],"mappings":"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","file":"static/js/19.77958ce6.chunk.js","sourcesContent":["import React from \"react\";\nimport {Avatar, Button, Card, Col, Divider, Icon, Modal, Popconfirm, Row, Table} from \"antd\";\nimport {Link} from \"react-router-dom\";\nimport {ALL_PRACTICE, PRACTICE_DELETE} from \"../../../../constants/api\";\nimport {getAPI, interpolate, makeFileURL, postAPI} from \"../../../../utils/common\";\n\nconst {Meta} = Card;\n\nclass PracticeDetails extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            practiceList: [],\n            specialisations: null,\n            loading: true,\n            visible: false,\n            practice: {}\n\n        };\n        this.deletePractice = this.deletePractice.bind(this);\n    }\n\n    componentDidMount() {\n        // this.props.refreshClinicData();\n        this.admin_practiceData();\n    }\n\n    admin_practiceData() {\n        const that = this;\n        const successFn = function (data) {\n            const specialisations = {};\n            data[0].specialisations.forEach(function (speciality) {\n                specialisations[speciality.id] = speciality\n            });\n            console.log(specialisations);\n\n            that.setState({\n                practiceList: data,\n                specialisations,\n                loading: false\n            })\n        };\n        const errorFn = function () {\n            that.setState({\n                loading: false\n            })\n        };\n        getAPI(ALL_PRACTICE, successFn, errorFn);\n\n    }\n\n    // clinicData(){\n    //   let  practice=loggedInUserPractices();\n    //   console.log(practice);\n    //   var practiceKeys = Object.keys(practice);\n    //   let practiceArray = [];\n    //   practiceKeys.forEach(function(key){\n    //     let successFn = function (data) {\n    //       practiceArray.push(data)\n    //       console.log(practiceArray);\n    //     }\n    //     let errorFn = function () {\n    //     };\n    //     getAPI(interpolate(PRACTICE,[key]), successFn, errorFn);\n    //\n    //   });\n    //   this.setState({\n    //     practiceList:practiceArray\n    //   })\n    //\n    // }\n\n    deletePractice(value) {\n        const that = this;\n        const successFn = function (data) {\n            console.log(\"data\");\n            that.admin_practiceData();\n            if (that.props.refreshClinicData)\n                that.props.refreshClinicData();\n        };\n        const errorFn = function () {\n        };\n        postAPI(interpolate(PRACTICE_DELETE, [value]), {}, successFn, errorFn);\n\n    }\n\n    showModal = (item) => {\n        this.setState(function () {\n            return {visible: true, practice: item}\n        });\n    };\n\n    handleCancel = () => {\n        this.setState({visible: false});\n    };\n\n    render() {\n        const that = this;\n        const columns = [{\n            title: 'Name',\n            dataIndex: 'name',\n            key: 'name',\n            render: (text, record) => <a href=\"#\" onClick={() => this.showModal(record)}>{text}</a>,\n        }, {\n            title: 'Tagline',\n            dataIndex: 'tagline',\n            key: 'tagline',\n        }, {\n            title: 'Address',\n            dataIndex: 'address',\n            key: 'address',\n        }, {\n            title: 'Specialisation',\n            key: 'specialisation',\n            dataIndex: 'specialisation',\n        },{\n            title:'SMS Language',\n            dataIndex:'language',\n            key:'language',\n            // render:(item,record)=>\n        }, {\n            title: 'Action',\n            key: 'action',\n            render: (text, record) => (\n                <span>\n                <Link to={`/settings/clinics/${  record.id  }/edit`}>Edit</Link>\n                <Divider type=\"vertical\" />\n                    {that.props.practiceList.length > 1 ? (\n<Popconfirm\n  title=\"Are you sure delete this Practice?\"\n  onConfirm={() => this.deletePractice(record.id)}\n  okText=\"Yes\"\n  cancelText=\"No\"\n>\n                        <a>Delete</a>\n</Popconfirm>\n) : null}\n                </span>\n            ),\n        }];\n\n        return (\n<Row>\n            <h2>Practice Details\n                <Link to=\"/settings/clinics/add\">\n                    <Button type=\"primary\" style={{float: 'right'}}>\n                        <Icon type=\"plus\" />&nbsp;Add\n                    </Button>\n                </Link>\n            </h2>\n            <Card loading={this.state.loading}>\n                <Table pagination={false} columns={columns} dataSource={this.state.practiceList} />\n            </Card>\n            <Modal\n              visible={this.state.visible}\n              closable={false}\n              width={600}\n              onCancel={this.handleCancel}\n              footer={null}\n            >\n                <Button\n                  icon=\"close\"\n                  type=\"danger\"\n                  shape=\"circle\"\n                  style={{position: 'absolute', top: '-50px', right: 0}}\n                  onClick={this.handleCancel}\n                />\n                {/* <Card > */}\n                <Row style={{paddingBottom: \"25px\"}}>\n                    <Col span={12} offset={10}>\n                        {this.state.practice.logo ?\n                            <Avatar shape=\"square\" size=\"large\" src={makeFileURL(this.state.practice.logo)} />\n\n                            : null}\n\n                    </Col>\n                </Row>\n\n\n                <ProfileTables label=\"Practice Name : \" value={this.state.practice.name} />\n                <ProfileTables label=\"Tagline : \" value={this.state.practice.tagline} />\n                <ProfileTables label=\"Email Id: \" value={this.state.practice.email} />\n                <ProfileTables label=\"Contact Number : \" value={this.state.practice.contact} />\n                <ProfileTables label=\"Website : \" value={this.state.practice.website} />\n                <ProfileTables label=\"GSTIN : \" value={this.state.practice.gstin} />\n                <ProfileTables label=\"Specialisation\" value={this.state.practice.specialisation} />\n                {ProfileTables({\n                    label: 'Address',\n                    value: this.state.practice.address ? this.state.practice.address : `${'' + ' '}${  this.state.practice.locality}` ? this.state.practice.locality : `${'' + ' '}${  this.state.practice.city}` ? this.state.practice.city : `${''\n                    + ' '}${  this.state.practice.state}` ? this.state.practice.state : `${'' + ' '}${  this.state.practice.country}` ? this.state.practice.country : `${'' + ' '}${  this.state.practice.pincode}` ? this.state.practice.pincode : ''\n                })}\n\n\n                {/* </Card> */}\n\n\n            </Modal>\n</Row>\n)\n    }\n}\n\nexport default PracticeDetails;\n\nfunction ProfileTables(props) {\n    return (\n<Row gutter={16}>\n        <Col span={8}>\n            <p><b>{props.label}</b></p>\n        </Col>\n        <Col span={16}>{props.value}</Col>\n</Row>\n)\n\n}\n","import React from \"react\";\nimport {Form, Card, Divider, Checkbox, Row, Col, TimePicker, Button} from \"antd\";\nimport {Redirect} from \"react-router-dom\";\nimport moment from \"moment/moment\";\nimport {REQUIRED_FIELD_MESSAGE} from \"../../../../constants/messages\";\nimport {displayMessage, getAPI, interpolate, postAPI} from \"../../../../utils/common\";\nimport {CALENDER_SETTINGS, DOCTOR_VISIT_TIMING_API} from \"../../../../constants/api\";\nimport {SUCCESS_MSG_TYPE, WARNING_MSG_TYPE} from \"../../../../constants/dataKeys\";\nimport {DAY_KEYS} from \"../../../../constants/hardData\";\n\nclass DoctorTiming extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            doctorId: this.props.match.params.docId,\n            timings: null,\n            openPracticeDays: {},\n            visting_hour_same_week: true,\n            twoSessions: {},\n            loading:true,\n        }\n\n    }\n\n    componentDidMount() {\n        if (this.state.doctorId) {\n            this.loadData();\n        }\n    }\n\n    loadData = () => {\n        const that = this;\n        const successFn = function (data) {\n            let visting_hour_same_week = true;\n            const openPracticeDays = {};\n            const twoSessions = {};\n            if (data.length && data[0]) {\n                const dataObject = data[0]\n                DAY_KEYS.forEach(function (dayKey) {\n                    openPracticeDays[dayKey] = dataObject[dayKey];\n                    twoSessions[`is_two_sessions_${dayKey}`] = dataObject[`is_two_sessions_${dayKey}`];\n                });\n                visting_hour_same_week = dataObject.visting_hour_same_week;\n                twoSessions.is_two_sessions = dataObject.is_two_sessions;\n            }\n            if (data.length) {\n                that.setState({\n                    timings: data[0],\n                    visting_hour_same_week,\n                    openPracticeDays,\n                    twoSessions,\n                    loading:false,\n                })\n            } else {\n                that.setState({\n                    timings: {},\n                    visting_hour_same_week,\n                    openPracticeDays,\n                    twoSessions,\n                    loading:false,\n                })\n                displayMessage(WARNING_MSG_TYPE, \"Doctors visit timing is empty\");\n            }\n        }\n        const errorFn = function () {\n\n        }\n        getAPI(interpolate(DOCTOR_VISIT_TIMING_API, [this.props.active_practiceId]), successFn, errorFn, {\n            doctor: this.state.doctorId\n        });\n    }\n\n    handleSubmit = (e) => {\n        const that = this;\n        e.preventDefault();\n        this.props.form.validateFieldsAndScroll((err, values) => {\n                if (!err) {\n                    console.log(values);\n                    const reqData = {...values};\n                    if (reqData.first_start_time) {\n                        reqData.first_start_time = moment(reqData.first_start_time).format('HH:mm');\n                    }\n                    if (reqData.first_end_time) {\n                        reqData.first_end_time = moment(reqData.first_end_time).format('HH:mm');\n                    }\n                    if (reqData.second_start_time) {\n                        reqData.second_start_time = moment(reqData.second_start_time).format('HH:mm');\n                    }\n                    if (reqData.second_end_time) {\n                        reqData.second_end_time = moment(reqData.second_end_time).format('HH:mm');\n                    }\n                    reqData.doctor = that.state.doctorId;\n                    DAY_KEYS.forEach(function (dayKey) {\n                        if (reqData[`first_start_time_${dayKey}`]) {\n                            reqData[`first_start_time_${dayKey}`] = moment(reqData[`first_start_time_${dayKey}`]).format('HH:mm');\n                        }\n                        if (reqData[`first_end_time_${dayKey}`]) {\n                            reqData[`first_end_time_${dayKey}`] = moment(reqData[`first_end_time_${dayKey}`]).format('HH:mm');\n                        }\n                        if (reqData[`second_start_time_${dayKey}`]) {\n                            reqData[`second_start_time_${dayKey}`] = moment(reqData[`second_start_time_${dayKey}`]).format('HH:mm');\n                        }\n                        if (reqData[`second_end_time_${dayKey}`]) {\n                            reqData[`second_end_time_${dayKey}`] = moment(reqData[`second_end_time_${dayKey}`]).format('HH:mm');\n                        }\n                    });\n                    if (that.state.timings) {\n                        reqData.id = that.state.timings.id\n                    }\n                    const successFn = function (data) {\n                        that.setState({\n                            loading:true,\n                        });\n                        that.props.history.goBack();\n                        if (that.props.loadData)\n                            that.props.loadData();\n                        displayMessage(SUCCESS_MSG_TYPE, \"Doctor Timings Saved successfully!!\");\n                    };\n                    const errorFn = function () {\n\n                    };\n                    postAPI(interpolate(DOCTOR_VISIT_TIMING_API, [this.props.active_practiceId]), reqData, successFn, errorFn);\n                }\n            }\n        )\n    }\n\n    changeVistingHourSameWeek = (e) => {\n        console.log(e.target)\n        this.setState({\n            [e.target.id]: e.target.checked\n        })\n    }\n\n    changeOpenPracticeDays = (type, value) => {\n        this.setState(function (prevState) {\n            return {openPracticeDays: {...prevState.openPracticeDays, [type]: value}}\n        })\n    }\n\n    changePracticeTwoSessions = (type, value) => {\n        this.setState(function (prevState) {\n            return {twoSessions: {...prevState.twoSessions, [type]: value}}\n        })\n    }\n\n    render() {\n        if (!this.state.doctorId) {\n            return <Redirect to=\"/settings/clinics-staff\" />\n        } if (!this.state.timings) {\n            return <Card loading />\n        } \n\n            const that = this;\n            const formItemLayout = (this.props.formLayout ? this.props.formLayout : {\n                labelCol: {span: 12},\n                wrapperCol: {span: 12},\n            });\n            const {getFieldDecorator} = this.props.form;\n            return (\n<div>\n                <Card loading={this.state.loading}>\n                    <Form onSubmit={this.handleSubmit}>\n                        <Form.Item key=\"visting_hour_same_week\" {...formItemLayout}>\n                            {getFieldDecorator(\"visting_hour_same_week\", {\n                                valuePropName: 'checked',\n                                initialValue: that.state.timings ? that.state.visting_hour_same_week : false\n                            }, {\n                                rules: [{message: REQUIRED_FIELD_MESSAGE}],\n                            })(\n                                <Checkbox onChange={this.changeVistingHourSameWeek}>\n                                    Visiting hours are  same for all working days in a week\n                                </Checkbox>\n                            )}\n                        </Form.Item>\n                        <Divider style={{margin: 4}} />\n                        {this.state.visting_hour_same_week ? (\n                            <div>\n                                <Row>\n                                    <Col span={4} />\n                                    <Col span={18}>\n                                        <Form.Item key=\"is_two_sessions\" {...formItemLayout}>\n                                            {getFieldDecorator(\"is_two_sessions\", {\n                                                valuePropName: 'checked',\n                                                initialValue: that.state.timings ? that.state.timings.is_two_sessions || that.state.twoSessions.is_two_sessions : false\n                                            }, {\n                                                rules: [{message: REQUIRED_FIELD_MESSAGE}],\n                                            })(\n                                                <Checkbox\n                                                  onChange={(e) => this.changePracticeTwoSessions(\"is_two_sessions\", e.target.checked)}\n                                                >\n                                                    Practice operates in two sessions.\n                                                </Checkbox>\n                                            )}\n                                        </Form.Item>\n                                        <Row gutter={16}>\n                                            <Col span={12}>\n                                                <Form.Item\n                                                  key=\"first_start_time\"\n                                                  label=\"Practice Starts At\"\n                                                  {...formItemLayout}\n                                                >\n                                                    {getFieldDecorator(\"first_start_time\", {\n                                                        initialValue: that.state.timings && that.state.timings.first_start_time ? moment(that.state.timings.first_start_time, \"HH:mm\") : null,\n                                                        rules: [{required: true, message: REQUIRED_FIELD_MESSAGE}],\n                                                    })(\n                                                        <TimePicker format=\"HH:mm\" />\n                                                    )}\n                                                </Form.Item>\n                                            </Col>\n                                            {that.state.twoSessions.is_two_sessions ? (\n<div>\n                                                <Col span={12}>\n                                                    <Form.Item\n                                                      key=\"first_end_time\"\n                                                      label=\"Lunch At\"\n                                                      {...formItemLayout}\n                                                    >\n                                                        {getFieldDecorator(\"first_end_time\", {\n                                                            initialValue: that.state.timings && that.state.timings.first_end_time ? moment(that.state.timings.first_end_time, \"HH:mm\") : null,\n                                                            rules: [{required: true, message: REQUIRED_FIELD_MESSAGE}],\n                                                        })(\n                                                            <TimePicker format=\"HH:mm\" />\n                                                        )}\n                                                    </Form.Item>\n                                                </Col>\n                                                <Col span={12}>\n                                                    <Form.Item\n                                                      key=\"second_start_time\"\n                                                      label=\"Resume At\"\n                                                      {...formItemLayout}\n                                                    >\n                                                        {getFieldDecorator(\"second_start_time\", {\n                                                            initialValue: that.state.timings && that.state.timings.second_start_time ? moment(that.state.timings.second_start_time, \"HH:mm\") : null,\n                                                            rules: [{required: true, message: REQUIRED_FIELD_MESSAGE}],\n                                                        })(\n                                                            <TimePicker format=\"HH:mm\" />\n                                                        )}\n                                                    </Form.Item>\n                                                </Col>\n</div>\n) : null}\n\n                                            <Col span={12}>\n                                                <Form.Item\n                                                  key=\"second_end_time\"\n                                                  label=\"Practice Ends At\"\n                                                  {...formItemLayout}\n                                                >\n                                                    {getFieldDecorator(\"second_end_time\", {\n                                                        initialValue: that.state.timings && that.state.timings.second_end_time ? moment(that.state.timings.second_end_time, \"HH:mm\") : null,\n                                                        rules: [{required: true, message: REQUIRED_FIELD_MESSAGE}],\n                                                    })(\n                                                        <TimePicker format=\"HH:mm\" />\n                                                    )}\n                                                </Form.Item>\n                                            </Col>\n                                        </Row>\n                                    </Col>\n                                </Row>\n                                <Divider style={{margin: 4}} />\n                            </div>\n                          ) : DAY_KEYS.map(dayKey => (\n<div key={dayKey}>\n                                <Row>\n                                    <Col span={4}>\n                                        <h4>{dayKey.replace(/^\\w/, c => c.toUpperCase())}</h4>\n                                    </Col>\n\n                                    <Col span={18}>\n                                        <Form.Item key={`${dayKey}`} {...formItemLayout}>\n                                            {getFieldDecorator(`${dayKey}`, {\n                                                valuePropName: 'checked',\n                                                initialValue: that.state.timings ? that.state.timings[`${dayKey}`] || that.state.openPracticeDays[dayKey] : false\n                                            }, {\n                                                rules: [{message: REQUIRED_FIELD_MESSAGE}],\n                                            })(\n                                                <Checkbox\n                                                  onChange={(e) => that.changeOpenPracticeDays(dayKey, e.target.checked)}\n                                                >\n                                                    {`Practice is open on ${dayKey.replace(/^\\w/, c => c.toUpperCase())}`}\n                                                </Checkbox>\n                                            )}\n                                        </Form.Item>\n                                        {that.state.openPracticeDays[dayKey] ? (\n<div>\n                                                <Form.Item key={`is_two_sessions_${dayKey}`} {...formItemLayout}>\n                                                    {getFieldDecorator(`is_two_sessions_${dayKey}`, {\n                                                        valuePropName: 'checked',\n                                                        initialValue: that.state.timings ? that.state.timings[`is_two_sessions_${dayKey}`] || that.state.twoSessions[`is_two_sessions_${dayKey}`] : false\n                                                    }, {\n                                                        rules: [{message: REQUIRED_FIELD_MESSAGE}],\n                                                    })(\n                                                        <Checkbox\n                                                          onChange={(e) => this.changePracticeTwoSessions(`is_two_sessions_${dayKey}`, e.target.checked)}\n                                                        >\n                                                            Practice operates in two sessions.\n                                                        </Checkbox>\n                                                    )}\n                                                </Form.Item>\n                                                <Row gutter={16}>\n                                                    <Col span={12}>\n                                                        <Form.Item\n                                                          key={`first_start_time_${dayKey}`}\n                                                          label=\"Practice Starts At\"\n                                                          {...formItemLayout}\n                                                        >\n                                                            {getFieldDecorator(`first_start_time_${dayKey}`, {\n                                                                initialValue: that.state.timings && that.state.timings[`first_start_time_${dayKey}`] ? moment(that.state.timings[`first_start_time_${dayKey}`], \"HH:mm\") : null,\n                                                                rules: [{required: true, message: REQUIRED_FIELD_MESSAGE}],\n                                                            })(\n                                                                <TimePicker format=\"HH:mm\" />\n                                                            )}\n                                                        </Form.Item>\n                                                    </Col>\n                                                    {that.state.twoSessions[`is_two_sessions_${dayKey}`] ? (\n<div>\n                                                        <Col span={12}>\n                                                            <Form.Item\n                                                              key={`first_end_time_${dayKey}`}\n                                                              label=\"Lunch At\"\n                                                              {...formItemLayout}\n                                                            >\n                                                                {getFieldDecorator(`first_end_time_${dayKey}`, {\n                                                                    initialValue: that.state.timings && that.state.timings[`first_end_time_${dayKey}`] ? moment(that.state.timings[`first_end_time_${dayKey}`], \"HH:mm\") : null,\n                                                                    rules: [{\n                                                                        required: true,\n                                                                        message: REQUIRED_FIELD_MESSAGE\n                                                                    }],\n                                                                })(\n                                                                    <TimePicker format=\"HH:mm\" />\n                                                                )}\n                                                            </Form.Item>\n                                                        </Col>\n                                                        <Col span={12}>\n                                                            <Form.Item\n                                                              key={`second_start_time_${dayKey}`}\n                                                              label=\"Resume At\"\n                                                              {...formItemLayout}\n                                                            >\n                                                                {getFieldDecorator(`second_start_time_${dayKey}`, {\n                                                                    initialValue: that.state.timings && that.state.timings[`second_start_time_${dayKey}`] ? moment(that.state.timings[`second_start_time_${dayKey}`], \"HH:mm\") : null,\n                                                                    rules: [{\n                                                                        required: true,\n                                                                        message: REQUIRED_FIELD_MESSAGE\n                                                                    }],\n                                                                })(\n                                                                    <TimePicker format=\"HH:mm\" />\n                                                                )}\n                                                            </Form.Item>\n                                                        </Col>\n</div>\n) : null}\n                                                    <Col span={12}>\n                                                        <Form.Item\n                                                          key={`second_end_time_${dayKey}`}\n                                                          label=\"Practice Ends At\"\n                                                          {...formItemLayout}\n                                                        >\n                                                            {getFieldDecorator(`second_end_time_${dayKey}`, {\n                                                                initialValue: that.state.timings && that.state.timings[`second_end_time_${dayKey}`] ? moment(that.state.timings[`second_end_time_${dayKey}`], \"HH:mm\") : null,\n                                                                rules: [{required: true, message: REQUIRED_FIELD_MESSAGE}],\n                                                            })(\n                                                                <TimePicker format=\"HH:mm\" />\n                                                            )}\n                                                        </Form.Item>\n                                                    </Col>\n                                                </Row>\n</div>\n)\n                                            : null}\n                                    </Col>\n                                </Row>\n                                <Divider style={{margin: 4}} />\n</div>\n))}\n                        <Form.Item {...formItemLayout}>\n                            <Button loading={that.state.loading} type=\"primary\" htmlType=\"submit\" style={{margin: 5}}>\n                                Submit\n                            </Button>\n                            {that.props.history ? (\n                                <Button style={{margin: 5}} onClick={() => that.props.history.goBack()}>\n                                    Cancel\n                                </Button>\n                              ) : null}\n                        </Form.Item>\n                    </Form>\n                </Card>\n</div>\n)\n        \n    }\n}\n\nexport default Form.create()(DoctorTiming);\n","import React from \"react\";\nimport {\n    Button,\n    Checkbox,\n    Card,\n    Form,\n    Icon,\n    Tabs,\n    Divider,\n    Tag,\n    Row,\n    Table,\n    Modal,\n    Popconfirm,\n    Switch as AntSwitch, Spin\n} from \"antd\";\nimport {Link, Route, Switch} from \"react-router-dom\";\nimport moment from \"moment\";\nimport DynamicFieldsForm from \"../../../common/DynamicFieldsForm\";\nimport {\n    CHECKBOX_FIELD,\n    DOCTORS_ROLE,\n    INPUT_FIELD,\n    RADIO_FIELD,\n    SELECT_FIELD,\n    SUCCESS_MSG_TYPE\n} from \"../../../../constants/dataKeys\";\nimport {\n    PRACTICESTAFF,\n    STAFF_ROLES,\n    ALL_PRACTICE_STAFF,\n    ALL_PRACTICE_DOCTORS,\n    SINGLE_PRACTICE_STAFF_API,\n    USER_PRACTICE_PERMISSIONS,\n    SET_USER_PERMISSION,\n    SET_SPECIFIC_USER_PERMISSION,\n    DOCTOR_VISIT_TIMING_API, ENABLE_STAFF_IN_PRACTICE, ALL_PERMISSIONS, UPDATE_BULK_PERMISSIONS\n} from \"../../../../constants/api\"\nimport {deleteAPI, displayMessage, getAPI, interpolate, patchAPI, postAPI, putAPI} from \"../../../../utils/common\";\nimport {getAllPermissions, loggedInUserPractices} from \"../../../../utils/auth\";\nimport DoctorTiming from \"./DoctorTiming\";\nimport {DAY_KEYS} from \"../../../../constants/hardData\";\nimport CustomizedTable from \"../../../common/CustomizedTable\";\n\nconst {Column, ColumnGroup} = Table;\nconst {TabPane} = Tabs;\nconst {confirm} = Modal;\n\nclass PracticeDetails extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            current: 'staff',\n            practice_staff: [],\n            practice_doctors: [],\n            roles: null,\n            permissionEditModal: false,\n            editPermissions: {},\n            allPermissions: [],\n            allGlobalPermissions: [],\n            loading: true,\n            defaultActiveTab: this.props.location.hash,\n            doctorsTiming: {},\n            bulkEditLoading: false\n        }\n        this.setPermission = this.setPermission.bind(this);\n        this.staffRoles()\n        this.loadData = this.loadData.bind(this);\n    }\n\n    componentDidMount() {\n        this.getAllPermissions();\n        this.loadData();\n    }\n\n    setPermission(codename, name, e, sendPractice) {\n        const that = this;\n        const value = e.target.checked;\n        this.setState(function (prevState) {\n            const permission = {...prevState.editPermissions[codename]}\n            permission.loading = true;\n            return {editPermissions: {...prevState.editPermissions, [codename]: permission}}\n        });\n        if (value) {\n            const reqData = {\n                \"name\": name,\n                \"codename\": codename,\n                \"is_active\": true,\n                \"practice\": sendPractice ? that.props.active_practiceId : null,\n                \"staff\": that.state.currentUser\n            }\n            const successFn = function (data) {\n                that.setState(function (prevState) {\n                    return {editPermissions: {...prevState.editPermissions, [codename]: data}}\n                })\n            }\n            const errorFn = function () {\n            }\n            postAPI(SET_USER_PERMISSION, reqData, successFn, errorFn);\n        } else if (that.state.editPermissions[codename].id) {\n                const reqData = {\n                    // \"name\": null,\n                    // \"codename\": codename,\n                    \"is_active\": false,\n                    // \"practice\": that.props.active_practiceId,\n                    // \"user\": that.state.currentUser\n                }\n                const successFn = function (data) {\n                    that.setState(function (prevState) {\n                        return {editPermissions: {...prevState.editPermissions, [data.codename]: undefined}}\n                    })\n                }\n                const errorFn = function () {\n\n                }\n                patchAPI(interpolate(SET_SPECIFIC_USER_PERMISSION, [that.state.editPermissions[codename].id]), reqData, successFn, errorFn);\n            } else {\n\n            }\n    }\n\n    getAllPermissions = () => {\n        const that = this;\n        const successFn = function (data) {\n            that.setState({\n                allPermissions: data.practice_permissions,\n                allGlobalPermissions: data.global_permissions\n            })\n        }\n        const errorFn = function () {\n        }\n        getAPI(ALL_PERMISSIONS, successFn, errorFn);\n    }\n\n    editPermissions(user) {\n        const that = this;\n        if (!user) {\n            that.setState({\n                permissionEditModal: false,\n            });\n            return true\n        }\n\n        that.setState({\n            permissionEditModal: true,\n            editPermissions: [],\n            currentUser: user\n        });\n        const successFn = function (data) {\n            const permissions = {}\n            data.forEach(function (item) {\n                permissions[item.codename] = item\n            })\n            that.setState({\n                editPermissions: permissions\n            })\n        }\n        const errorFn = function () {\n        }\n        getAPI(interpolate(USER_PRACTICE_PERMISSIONS, [user, that.props.active_practiceId]), successFn, errorFn);\n    }\n\n    loadData() {\n        this.admin_StaffData();\n    }\n\n    deleteStaff(value) {\n        const that = this;\n        const reqData = {\n            is_active: false,\n        }\n        const successFn = function (data) {\n\n            that.loadData();\n        };\n        const errorFn = function () {\n        };\n        putAPI(interpolate(SINGLE_PRACTICE_STAFF_API, [value]), reqData, successFn, errorFn);\n    }\n\n    staffRoles() {\n        const that = this;\n        const successFn = function (data) {\n            that.setState({\n                roles: data,\n            })\n        }\n        const errorFn = function () {\n        }\n        getAPI(STAFF_ROLES, successFn, errorFn)\n    }\n\n    admin_StaffData() {\n        const that = this;\n        const successFn = function (data) {\n            const doctor = [];\n            const staff = [];\n            data.staff.forEach(function (usersdata) {\n                if (usersdata.role == DOCTORS_ROLE) {\n                    doctor.push({...usersdata.user,...usersdata});\n                } else {\n                    staff.push({...usersdata.user,...usersdata});\n                }\n            })\n            that.setState({\n                practice_doctors: doctor,\n                practice_staff: staff,\n                loading: false\n            }, function () {\n                that.loadDoctorsTiming();\n            })\n        };\n        const errorFn = function () {\n            that.setState({\n                loading: false\n            })\n        };\n        getAPI(interpolate(PRACTICESTAFF, [this.props.active_practiceId]), successFn, errorFn, {all: true});\n    }\n\n\n    clinicData() {\n        const practice = loggedInUserPractices();\n        const practiceKeys = Object.keys(practice);\n        const that = this;\n        const successFn = function (data) {\n            const doctor = [];\n            const staff = [];\n            data.staff.forEach(function (usersdata) {\n                if (usersdata.role == DOCTORS_ROLE) {\n                    doctor.push({...usersdata.user,...usersdata});\n                } else {\n                    staff.push({...usersdata.user,...usersdata});\n                }\n            })\n            that.setState({\n                practice_doctors: doctor,\n                practice_staff: staff,\n            }, function () {\n                that.loadDoctorsTiming();\n            })\n        }\n        const errorFn = function () {\n        };\n        getAPI(interpolate(PRACTICESTAFF, [this.props.active_practiceId]), successFn, errorFn);\n\n    }\n\n    handleClick = (e) => {\n        this.setState({\n            current: e.key,\n        });\n    }\n\n    loadDoctorsTiming = () => {\n        const that = this;\n        const doctorList = that.state.practice_doctors.map(doctor => doctor.id);\n        const successFn = function (data) {\n            that.setState(function (prevState) {\n                const timingObject = {}\n                data.forEach(function (dataObj) {\n                    timingObject[dataObj.doctor.id] = dataObj\n                })\n                return {doctorsTiming: timingObject}\n            })\n        }\n        const errorFn = function () {\n\n        }\n        getAPI(interpolate(DOCTOR_VISIT_TIMING_API, [this.props.active_practiceId]), successFn, errorFn, {\n            doctor: doctorList.join(',')\n        });\n    }\n\n    changeTab = (key) => {\n        this.setState({\n            defaultActiveTab: key\n        });\n        this.props.history.push(`/settings/clinics-staff${  key}`);\n    }\n\n    toggleEnableStaffPractice = (staff, e) => {\n        const that = this;\n        const successFn = function (data) {\n            if (e)\n                displayMessage(SUCCESS_MSG_TYPE, \"Staff enabled for this practice successfully!!\")\n            else\n                displayMessage(SUCCESS_MSG_TYPE, \"Staff disabled for this practice successfully!!\")\n            that.admin_StaffData();\n        }\n        const errorFn = function () {\n\n        }\n        postAPI(interpolate(ENABLE_STAFF_IN_PRACTICE, [staff]), {\n            practice: that.props.active_practiceId,\n            is_active: !!e\n        }, successFn, errorFn)\n    }\n\n    toggleAllPermissions = (type, value) => {\n        const that = this;\n        const permissionsArray = [];\n\n        if (type == 'LOCAL') {\n            that.state.allPermissions.forEach(function (permission) {\n                const permObject = {\n                    \"name\": permission.name,\n                    \"codename\": permission.codename,\n                    \"is_active\": !!value,\n                    \"practice\": that.props.active_practiceId,\n                    \"staff\": that.state.currentUser\n                };\n                if (that.state.editPermissions[permission.codename]) {\n                    permObject.id = that.state.editPermissions[permission.codename].id;\n                }\n                permissionsArray.push(permObject);\n            });\n        }\n        if (type == 'GLOBAL') {\n            that.state.allGlobalPermissions.forEach(function (permission) {\n                const permObject = {\n                    \"name\": permission.name,\n                    \"codename\": permission.codename,\n                    \"is_active\": !!value,\n                    // \"practice\": that.props.active_practiceId,\n                    \"staff\": that.state.currentUser\n                };\n                if (that.state.editPermissions[permission.codename]) {\n                    permObject.id = that.state.editPermissions[permission.codename].id;\n                }\n                permissionsArray.push(permObject);\n            });\n        }\n        const successFn = function (data) {\n            that.editPermissions(that.state.currentUser);\n            that.setState({\n                bulkEditLoading: false\n            });\n        }\n        const errorFn = function () {\n            that.setState({\n                bulkEditLoading: false\n            });\n        }\n        confirm({\n            title: 'Are you sure to select all permissions for this user?',\n            onOk() {\n                that.setState({\n                    bulkEditLoading: type\n                });\n                postAPI(UPDATE_BULK_PERMISSIONS, {permissions: permissionsArray}, successFn, errorFn);\n            },\n            onCancel() {\n                return false;\n            },\n        })\n\n    }\n\n    render() {\n        const that = this;\n        const doctorColumns = [{\n            title: \"Name\",\n            dataIndex: 'first_name',\n            key: \"first_name\",\n        }, {\n            title: \"Email\",\n            dataIndex: \"email\",\n            key: \"email\",\n            render: (value, record) => (record.user && record.user.is_active ? record.user.email : value)\n        }, {\n            title: \"Mobile\",\n            dataIndex: \"mobile\",\n            key: \"mobile\",\n        }, {\n            title: \"Registration Number\",\n            dataIndex: \"registration_number\",\n            key: \"registration_number\",\n        }, {\n            title: \"Enable Staff\",\n            dataIndex: \"in_practice\",\n            key: \"enable_staff\",\n            render: (item, record) => (record.user && record.user.is_superuser ?\n                <Tag color=\"red\">Not Allowed</Tag> :\n                <AntSwitch defaultChecked={!!item} onChange={(e) => that.toggleEnableStaffPractice(record.id, e)} />)\n        }, {\n            title: \"Last Login\",\n            key: \"user\",\n            render: (text, record) => (record.user && record.user.is_active ? (record.user.last_login ? moment(record.user.last_login).fromNow() : '--') :\n                <Tag color=\"#f50\">Activation Pending</Tag>),\n        }, {\n            title: \"Action\",\n            key: \"action\",\n            render (text, record) {\n                return (\n<span>\n            <Link to={`/settings/clinics-staff/${  record.id  }/edit`}>\n              <a>Edit</a>\n            </Link>\n                     <Divider type=\"vertical\" />\n                    {record.user && record.user.is_superuser ?\n                        <Tag color=\"red\">SuperUser</Tag> : (\n                        <>\n                            <a\n                              onClick={() => that.editPermissions(record.id)}\n                              disabled={!record.in_practice}\n                            >Permissions\n                            </a>\n                            <Divider type=\"vertical\" />\n                            <Popconfirm\n                              title=\"Are you sure delete this staff?\"\n                              onConfirm={() => that.deleteStaff(record.id)}\n                              okText=\"Yes\"\n                              cancelText=\"No\"\n                            >\n                                <a>Delete</a>\n                            </Popconfirm>\n                        </>\n                      )}\n</span>\n)\n            }\n        }];\n\n        const staffColumns = [{\n            title: \"Name\",\n            dataIndex: \"first_name\",\n            key: \"name\",\n        }, {\n            title: \"Email\",\n            dataIndex: \"email\",\n            key: \"email\",\n            render: (value, record) => (record.user && record.user.is_active ? record.user.email : value)\n        }, {\n            title: \"Mobile\",\n            dataIndex: \"mobile\",\n            key: \"mobile\",\n        }, {\n            title: \"Enable Staff\",\n            dataIndex: \"in_practice\",\n            key: \"enable_staff\",\n            render: (item, record) => (record.user && record.user.is_superuser ?\n                <Tag color=\"red\">Not Allowed</Tag> :\n                <AntSwitch defaultChecked={!!item} onChange={(e) => that.toggleEnableStaffPractice(record.id, e)} />)\n        }, {\n            title: \"Last Login\",\n            key: \"user\",\n            render: (text, record) => (record.user && record.user.is_active ? (record.user.last_login ? moment(record.user.last_login).fromNow() : '--') :\n                <Tag color=\"#f50\">Activation Pending</Tag>),\n        }, {\n            title: \"Action\",\n            key: \"action\",\n            render (text, record) {\n                return (\n<span>\n            <Link to={`/settings/clinics-staff/staff/${  record.id  }/edit`}>\n              <a>Edit</a>\n            </Link>\n                     <Divider type=\"vertical\" />\n                    {record.user && record.user.is_superuser ?\n                        <Tag color=\"red\">SuperUser</Tag> : (\n                        <>\n                            <a\n                              onClick={() => that.editPermissions(record.id)}\n                              disabled={!record.in_practice}\n                            >Permissions\n                            </a>\n                            <Divider type=\"vertical\" />\n                            <Popconfirm\n                              title=\"Are you sure delete this staff?\"\n                              onConfirm={() => that.deleteStaff(record.id)}\n                              okText=\"Yes\"\n                              cancelText=\"No\"\n                            >\n                                <a>Delete</a>\n                            </Popconfirm>\n                        </>\n                      )}\n</span>\n)\n            }\n        }];\n\n        const notification_doctor_columns = [{\n            title: \"Name\",\n            dataIndex: \"user.first_name\",\n            key: \"name\",\n        }, {\n            title: \"Confirmation SMS\",\n            dataIndex: \"confirmation_sms\",\n            key: \"confirmation_sms\",\n            render: confirmation_sms => (\n                <span>\n            <Checkbox\n              checked={confirmation_sms}\n            />\n                </span>\n),\n        }, {\n            title: \"Schedule SMS\",\n            dataIndex: \"schedule_sms\",\n            key: \"schedule_sms\",\n            render: schedule_sms => (\n                <span>\n            <Checkbox checked={schedule_sms} />\n                </span>\n)\n        }, {\n            title: \"Confirmation EMAIL\",\n            dataIndex: \"confirmation_email\",\n            key: \"confirmation_email\",\n            render: confirmation_email => (\n                <span>\n            <Checkbox checked={confirmation_email} />\n                </span>\n)\n        }, {\n            title: \"Online Appointment SMS\",\n            dataIndex: \"online_appointment_sms\",\n            key: \"online_appointment_sms\",\n            render: online_appointment_sms => (\n                <Checkbox checked={online_appointment_sms} />\n            )\n        }, {\n            title: \"Action\",\n            key: \"action\",\n            render (text, record) {\n                return (\n<span>\n            <Link to={`/settings/clinics-staff/${  record.id  }/edit`}>\n              <a>Edit</a>\n            </Link>\n</span>\n)\n            }\n        }];\n\n        const notification_staff_columns = [{\n            title: \"Name\",\n            dataIndex: \"user.first_name\",\n            key: \"name\",\n        }, {\n            title: \"Confirmation SMS\",\n            dataIndex: \"confirmation_sms\",\n            key: \"confirmation_sms\",\n            render: confirmation_sms => (\n                <span>\n            <Checkbox\n              checked={confirmation_sms}\n            />\n                </span>\n),\n        }, {\n            title: \"Schedule SMS\",\n            dataIndex: \"schedule_sms\",\n            key: \"schedule_sms\",\n            render: schedule_sms => (\n                <span>\n            <Checkbox checked={schedule_sms} />\n                </span>\n)\n        }, {\n            title: \"Confirmation EMAIL\",\n            dataIndex: \"confirmation_email\",\n            key: \"confirmation_email\",\n            render: confirmation_email => (\n                <span>\n            <Checkbox checked={confirmation_email} />\n                </span>\n)\n        }, {\n            title: \"Online Appointment SMS\",\n            dataIndex: \"online_appointment_sms\",\n            key: \"online_appointment_sms\",\n            render: online_appointment_sms => (\n                <Checkbox checked={online_appointment_sms} />\n            )\n        }, {\n            title: \"Action\",\n            key: \"action\",\n            render (text, record) {\n                return (record.user && record.is_superuser ?\n                    <Tag> Not Allowed</Tag> : (\n                    <span>\n            <Link to={`/settings/clinics-staff/staff/${  record.id  }/edit`}>\n              <a>Edit</a>\n            </Link>\n                    </span>\n                  ))\n            }\n        }];\n        return (\n<Row>\n            <h2>Practice Staff</h2>\n            <Switch>\n                <Route\n                  path=\"/settings/clinics-staff/:docId/edit-timing\"\n                  render={(route) => <DoctorTiming {...this.props} {...route} loadData={that.loadData} />}\n                />\n                <Route>\n                    <Card>\n                        <Tabs defaultActiveKey={this.state.defaultActiveTab} onChange={this.changeTab}>\n                            <TabPane tab={<span><Icon type=\"user-add\" />Manage Staff</span>} key=\"#staff\">\n                                <h2>Doctors\n                                    <Link to=\"/settings/clinics-staff/adddoctor\">\n                                        <Button type=\"primary\" style={{float: 'right'}}>\n                                            <Icon type=\"plus\" />&nbsp;Add Doctor\n                                        </Button>\n                                    </Link>\n                                    <Link to=\"/settings/clinics-staff/addstaff\">\n                                        <Button type=\"primary\" style={{float: 'right', marginRight: '5px'}}>\n                                            <Icon type=\"plus\" />&nbsp;Add Staff\n                                        </Button>\n                                    </Link>\n                                </h2>\n\n                                <CustomizedTable\n                                  loading={this.state.loading}\n                                  pagination={false}\n                                  columns={doctorColumns}\n                                  dataSource={this.state.practice_doctors}\n                                />\n                                <Divider />\n                                <h2>Staff </h2>\n                                <CustomizedTable\n                                  loading={this.state.loading}\n                                  pagination={false}\n                                  columns={staffColumns}\n                                  dataSource={this.state.practice_staff}\n                                />\n                            </TabPane>\n                            <TabPane tab={<span><Icon type=\"team\" />Staff Notification</span>} key=\"#notification\">\n                                <h2>Doctors</h2>\n                                <Table\n                                  loading={this.state.loading}\n                                  pagination={false}\n                                  columns={notification_doctor_columns}\n                                  dataSource={this.state.practice_doctors}\n                                />\n                                <Divider />\n                                <h2>Staff</h2>\n                                <Table\n                                  loading={this.state.loading}\n                                  pagination={false}\n                                  columns={notification_staff_columns}\n                                  dataSource={this.state.practice_staff}\n                                />\n                            </TabPane>\n                            <TabPane tab={<span><Icon type=\"schedule\" />Doctors visit Timing</span>} key=\"#timing\">\n                                <Table loading={this.state.loading} dataSource={this.state.practice_doctors}>\n                                    <Column\n                                      title=\"Name\"\n                                      dataIndex=\"user.first_name\"\n                                      key=\"name\"\n                                    />\n                                    <Column\n                                      title=\"Visit Timing\"\n                                      dataIndex=\"loginstatus\"\n                                      key=\"VisitTiming\"\n                                      render={(text, record) => visitTime(that.state.doctorsTiming[record.id])}\n                                    />\n                                    <Column\n                                      title=\"Action\"\n                                      key=\"action\"\n                                      render={(text, record) => (\n                                                <Link to={`/settings/clinics-staff/${  record.id  }/edit-timing`}>\n                                                    <a>Edit Timing</a>\n                                                </Link>\n                                            )}\n                                    />\n                                </Table>\n                            </TabPane>\n                        </Tabs>\n                        <Modal\n                          title=\"Edit Permissions\"\n                          visible={this.state.permissionEditModal}\n                          onCancel={() => this.editPermissions()}\n                          footer={null}\n                        >\n                            <Spin spinning={this.state.bulkEditLoading == 'LOCAL'}>\n                                <Row>\n                                    <h3>\n                                        <Checkbox\n                                          checked={that.state.allPermissions.length && that.state.allPermissions.reduce((a, b) => a && b && that.state.editPermissions[a.codename] && that.state.editPermissions[b.codename])}\n                                          onClick={(e) => this.toggleAllPermissions('LOCAL', e.target.checked)}\n                                        >Select\n                                            All\n                                            Permissions\n                                        </Checkbox>\n                                    </h3>\n                                </Row>\n                                {that.state.allPermissions.map(item => (\n<Row>\n                                    <Checkbox\n                                      value={item.codename}\n                                      checked={that.state.editPermissions[item.codename]}\n                                      disabled={that.state.editPermissions[item.codename] && that.state.editPermissions[item.codename].loading}\n                                      onClick={(e) => this.setPermission(item.codename, item.name, e, true)}\n                                    >{item.id} {item.name}\n                                    </Checkbox>\n</Row>\n))}\n                            </Spin>\n                            <Divider>Global Permissions</Divider>\n                            <Spin spinning={this.state.bulkEditLoading == 'GLOBAL'}>\n                                <Row>\n                                    <h3>\n                                        <Checkbox\n                                          checked={that.state.allGlobalPermissions.length && that.state.allGlobalPermissions.reduce((a, b) => a && b && that.state.editPermissions[a.codename] && that.state.editPermissions[b.codename])}\n                                          onClick={(e) => this.toggleAllPermissions('GLOBAL', e.target.checked)}\n                                        >Select\n                                            All\n                                            Permissions\n                                        </Checkbox>\n                                    </h3>\n                                </Row>\n                                {that.state.allGlobalPermissions.map(item => (\n<Row>\n                                    <Checkbox\n                                      value={item.codename}\n                                      checked={that.state.editPermissions[item.codename]}\n                                      disabled={that.state.editPermissions[item.codename] && that.state.editPermissions[item.codename].loading}\n                                      onClick={(e) => this.setPermission(item.codename, item.name, e, false)}\n                                      style={{display: 'list-item'}}\n                                    >{item.id} {item.name}\n                                    </Checkbox>\n</Row>\n))}\n                            </Spin>\n                        </Modal>\n                    </Card>\n                </Route>\n            </Switch>\n\n</Row>\n)\n    }\n}\n\nfunction visitTime(visitObj) {\n    if (visitObj) {\n        return (visitObj.visting_hour_same_week ? (\n            <span>\n                <b>Mon-Sun : </b>{momentTime(visitObj.first_start_time)}\n                {visitObj.is_two_sessions ? `-${  momentTime(visitObj.first_end_time)  } ||LUNCH|| ${  momentTime(visitObj.second_start_time)}` : null}\n                -{momentTime(visitObj.second_end_time)}\n            </span>\n          )\n            : DAY_KEYS.map(dayKey =>\n                visitObj[dayKey] ? (\n<span>\n                        <b>{dayKey} : </b>\n                    {momentTime(visitObj[`first_start_time_${dayKey}`])}\n                    {visitObj[`is_two_sessions_${dayKey}`] ? `-${  momentTime(visitObj[`first_end_time_${dayKey}`])  }||LUNCH||${  momentTime(visitObj[`second_start_time_${dayKey}`])}` : null}\n                    -{momentTime(visitObj[`second_end_time_${dayKey}`])}\n                    <br />\n</span>\n) : null\n            ))\n    }\n    return null\n}\n\n\nfunction momentTime(timeStr) {\n    return moment(timeStr, \"HH:mm\").format(\"HH:mm\")\n}\n\nexport default PracticeDetails;\n","import React from \"react\";\nimport {Button, Card, Form, Icon, Row} from \"antd\";\nimport {Redirect} from 'react-router-dom'\nimport {Route} from \"react-router\";\nimport DynamicFieldsForm from \"../../../common/DynamicFieldsForm\";\nimport {\n    CHECKBOX_FIELD,\n    SUCCESS_MSG_TYPE,\n    INPUT_FIELD,\n    RADIO_FIELD,\n    SELECT_FIELD,\n    SINGLE_CHECKBOX_FIELD,\n    COLOR_PICKER,\n    EMAIL_FIELD\n} from \"../../../../constants/dataKeys\";\nimport {ALL_PRACTICE_STAFF, DRUG_CATALOG, SINGLE_PRACTICE_STAFF_API, STAFF_ROLES} from \"../../../../constants/api\";\nimport {getAPI, displayMessage, interpolate} from \"../../../../utils/common\";\n\nclass AddEditDoctor extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            redirect: false,\n            editStaff: null,\n            roles: [],\n\n\n        }\n        this.changeRedirect = this.changeRedirect.bind(this);\n        this.loadEditPracticeStaff = this.loadEditPracticeStaff.bind(this);\n        if (this.props.match.params.doctorid) {\n            this.loadEditPracticeStaff();\n        }\n        this.staffRoles();\n    }\n\n    staffRoles() {\n        const that = this;\n        const successFn = function (data) {\n            that.setState({\n                roles: data\n            })\n        }\n        const errorFn = function () {\n        }\n        getAPI(STAFF_ROLES, successFn, errorFn)\n    }\n\n    loadEditPracticeStaff() {\n        const {doctorid} = this.props.match.params;\n        console.log(doctorid)\n        const that = this;\n        const successFn = function (data) {\n            that.setState({\n                editStaff: data,\n            })\n        };\n        const errorFn = function () {\n            that.setState({\n            })\n        }\n        getAPI(interpolate(SINGLE_PRACTICE_STAFF_API, [doctorid]), successFn, errorFn)\n\n    }\n\n    changeRedirect() {\n        const redirectVar = this.state.redirect;\n        this.setState({\n            redirect: !redirectVar,\n        });\n    }\n\n    render() {\n        const that = this;\n\n        const fields = [\n            {\n                label: \"Doctor\",\n                key: \"user.first_name\",\n                required: true,\n                placeholder:\"Doctor Name\",\n                initialValue: this.state.editStaff ? this.state.editStaff.user.first_name : null,\n                type: INPUT_FIELD\n            }, {\n                label: \"Mobile Number\",\n                key: \"user.mobile\",\n                placeholder:\"Mobile Number\",\n                required: true,\n                initialValue: this.state.editStaff ? this.state.editStaff.user.mobile : null,\n                type: INPUT_FIELD,\n                // disabled: !!this.state.editStaff\n            }, {\n                label: \"Email Id\",\n                key: \"user.email\",\n                placeholder:\"Email Id\",\n                required: true,\n                // disabled: !!this.state.editStaff,\n                initialValue: this.state.editStaff ? this.state.editStaff.user.email : null,\n                type: EMAIL_FIELD\n            }, {\n                label: \"Registration Number\",\n                key: \"registration_number\",\n                placeholder:\"Registration Number\",\n                initialValue: this.state.editStaff ? this.state.editStaff.registration_number : null,\n                type: INPUT_FIELD\n            },\n            // {\n            //     label: \"Role\",\n            //     key: \"role\",\n            //     required: true,\n            //     initialValue: this.state.editStaff ? this.state.editStaff.role : null,\n            //     type: SELECT_FIELD,\n            //     options: this.state.roles.map(role => ({label: role.name, value: [role.id]}))\n            // },\n            {\n                label: \"Calendar Colour\",\n                key: \"calendar_colour\",\n                initialValue: this.state.editStaff ? this.state.editStaff.calendar_colour : null,\n                type: COLOR_PICKER,\n                required:true\n\n            }, {\n                label: \"Schedule SMS\",\n                key: \"schedule_sms\",\n                initialValue: this.state.editStaff ? this.state.editStaff.schedule_sms : false,\n                type: SINGLE_CHECKBOX_FIELD,\n            }, {\n                label: \"Confirmation SMS\",\n                key: \"confirmation_sms\",\n                initialValue: this.state.editStaff ? this.state.editStaff.confirmation_sms : false,\n                type: SINGLE_CHECKBOX_FIELD,\n            }, {\n                label: \"Confirmation Email\",\n                key: \"confirmation_email\",\n                initialValue: this.state.editStaff ? this.state.editStaff.confirmation_email : false,\n                type: SINGLE_CHECKBOX_FIELD,\n            }, {\n                label: \"Online Appointment SMS\",\n                key: \"online_appointment_sms\",\n                initialValue: this.state.editStaff ? this.state.editStaff.online_appointment_sms : false,\n                type: SINGLE_CHECKBOX_FIELD,\n            },]\n        const formProp = {\n            successFn (data) {\n                displayMessage(SUCCESS_MSG_TYPE, \"success\");\n                that.setState({\n                    redirect: true\n\n                });\n                that.props.loadData();\n                if (that.props.history){\n                    that.props.history.replace(\"/settings/clinics-staff\");\n                }\n            },\n            errorFn () {\n\n            },\n            action: ALL_PRACTICE_STAFF,\n            method: \"post\",\n        }\n        let editformProp;\n        if (this.state.editStaff) {\n\n            editformProp = {\n                successFn (data) {\n                    displayMessage(SUCCESS_MSG_TYPE, \"success\");\n                    that.setState({\n                        redirect: true,\n                    });\n                    that.props.loadData();\n                    if (that.props.history){\n                        that.props.history.replace(\"/settings/clinics-staff\");\n                    }\n                },\n                errorFn () {\n\n                },\n                action: interpolate(SINGLE_PRACTICE_STAFF_API, [that.props.match.params.doctorid]),\n                method: \"put\",\n            }\n        }\n        const defaultValues = [{key:'role',value:[3]}];\n\n        const TestFormLayout = Form.create()(DynamicFieldsForm);\n        return (\n<Row>\n            <Card>\n                <Route\n                  exact\n                  path='/settings/clinics-staff/:doctorid/edit'\n                  render={(route) => (this.props.match.params.doctorid ? (\n                           <TestFormLayout\n                             defaultValues={defaultValues}\n                             title=\"Edit Doctor\"\n                             changeRedirect={this.changeRedirect}\n                             formProp={editformProp}\n                             fields={fields}\n                             {...route}\n                           />\n                         ) : <Redirect to=\"/settings/clinics-staff\" />)}\n                />\n\n                <Route\n                  exact\n                  path='/settings/clinics-staff/adddoctor'\n                  render={(route) => (\n<TestFormLayout\n  defaultValues={defaultValues}\n  changeRedirect={this.changeRedirect}\n  title=\"Add Doctor \"\n  formProp={formProp}\n  fields={fields}\n  {...route}\n/>\n)}\n                />\n            </Card>\n            {this.state.redirect && <Redirect to='/settings/clinics-staff' />}\n\n</Row>\n)\n    }\n}\n\nexport default AddEditDoctor;\n","import React from \"react\";\nimport {Button, Card, Form, Icon, Row} from \"antd\";\nimport {Redirect} from 'react-router-dom'\nimport {Route} from \"react-router\";\nimport DynamicFieldsForm from \"../../../common/DynamicFieldsForm\";\nimport {\n    CHECKBOX_FIELD,\n    SUCCESS_MSG_TYPE,\n    INPUT_FIELD,\n    RADIO_FIELD,\n    SELECT_FIELD,\n    SINGLE_CHECKBOX_FIELD,\n    COLOR_PICKER,\n    EMAIL_FIELD\n} from \"../../../../constants/dataKeys\";\nimport {ALL_PRACTICE_STAFF, DRUG_CATALOG, SINGLE_PRACTICE_STAFF_API, STAFF_ROLES} from \"../../../../constants/api\";\nimport {getAPI, displayMessage, interpolate} from \"../../../../utils/common\";\nimport {ROLES} from \"../../../../constants/hardData\";\n\nclass AddEditStaff extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            redirect: false,\n            editStaff: null,\n            // roles: [],\n\n\n        }\n        this.changeRedirect = this.changeRedirect.bind(this);\n        this.loadEditPracticeStaff = this.loadEditPracticeStaff.bind(this);\n        if (this.props.match.params.staffid) {\n            this.loadEditPracticeStaff();\n        }\n        // this.staffRoles();\n    }\n\n    // staffRoles() {\n    //     let that = this;\n    //     let successFn = function (data) {\n    //         that.setState({\n    //             roles: data,\n    //         })\n    //     }\n    //     let errorFn = function () {\n    //     }\n    //     getAPI(STAFF_ROLES, successFn, errorFn)\n    // }\n\n    loadEditPracticeStaff() {\n        const {staffid} = this.props.match.params;\n        console.log(staffid)\n        const that = this;\n        const successFn = function (data) {\n            that.setState({\n                editStaff: data,\n            })\n        };\n        const errorFn = function () {\n            that.setState({\n            })\n        }\n        getAPI(interpolate(SINGLE_PRACTICE_STAFF_API, [staffid]), successFn, errorFn)\n\n    }\n\n    changeRedirect() {\n        const redirectVar = this.state.redirect;\n        this.setState({\n            redirect: !redirectVar,\n        });\n    }\n\n    render() {\n        const that = this;\n        const fields = [\n            {\n                label: \"Staff Name\",\n                key: \"user.first_name\",\n                required: true,\n                placeholder:\"Staff Name\",\n                initialValue: this.state.editStaff ? this.state.editStaff.user.first_name : null,\n                type: INPUT_FIELD\n            }, {\n                label: \"Mobile Number\",\n                key: \"user.mobile\",\n                placeholder:\"Mobile Number\",\n                required: true,\n                initialValue: this.state.editStaff ? this.state.editStaff.user.mobile : null,\n                type: INPUT_FIELD,\n                // disabled: !!this.state.editStaff\n            }, {\n                label: \"Email Id\",\n                key: \"user.email\",\n                placeholder:\"Email Id\",\n                required: true,\n                // disabled: !!this.state.editStaff,\n                initialValue: this.state.editStaff ? this.state.editStaff.user.email : null,\n                type: EMAIL_FIELD\n            },{\n                label: \"Role\",\n                key: \"role\",\n                required: true,\n                initialValue: this.state.editStaff ? [this.state.editStaff.role] : null,\n                type: SELECT_FIELD,\n                options: ROLES.map(role => ({label: role.label, value: [role.value]}))\n            }, {\n                label: \"Schedule SMS\",\n                key: \"schedule_sms\",\n                initialValue: this.state.editStaff ? this.state.editStaff.schedule_sms : false,\n                type: SINGLE_CHECKBOX_FIELD,\n            }, {\n                label: \"Confirmation SMS\",\n                key: \"confirmation_sms\",\n                initialValue: this.state.editStaff ? this.state.editStaff.confirmation_sms : false,\n                type: SINGLE_CHECKBOX_FIELD,\n            }, {\n                label: \"Confirmation Email\",\n                key: \"confirmation_email\",\n                initialValue: this.state.editStaff ? this.state.editStaff.confirmation_email : false,\n                type: SINGLE_CHECKBOX_FIELD,\n            }, {\n                label: \"Online Appointment SMS\",\n                key: \"online_appointment_sms\",\n                initialValue: this.state.editStaff ? this.state.editStaff.online_appointment_sms : false,\n                type: SINGLE_CHECKBOX_FIELD,\n            },]\n        const formProp = {\n            successFn (data) {\n                displayMessage(SUCCESS_MSG_TYPE, \"success\");\n                that.setState({\n                    redirect: true\n\n                });\n                that.props.loadData();\n                if (that.props.history){\n                    that.props.history.replace(\"/settings/clinics-staff\");\n                }\n            },\n            errorFn () {\n\n            },\n            action: ALL_PRACTICE_STAFF,\n            method: \"post\",\n        }\n        let editformProp;\n        if (this.state.editStaff) {\n\n            editformProp = {\n                successFn (data) {\n                    displayMessage(SUCCESS_MSG_TYPE, \"success\");\n                    that.setState({\n                        redirect: true,\n                    });\n                    that.props.loadData();\n                    if (that.props.history){\n                        that.props.history.replace(\"/settings/clinics-staff\");\n                    }\n                },\n                errorFn () {\n\n                },\n                action: interpolate(SINGLE_PRACTICE_STAFF_API, [that.props.match.params.staffid]),\n                method: \"put\",\n            }\n        }\n        const defaultValues = [];\n\n        const TestFormLayout = Form.create()(DynamicFieldsForm);\n        return (\n<Row>\n            <Card>\n                <Route\n                  exact\n                  path='/settings/clinics-staff/staff/:staffid/edit'\n                  render={(route) => (this.props.match.params.staffid ? (\n                           <TestFormLayout\n                             defaultValues={defaultValues}\n                             title=\"Edit Staff\"\n                             changeRedirect={this.changeRedirect}\n                             formProp={editformProp}\n                             fields={fields}\n                             {...route}\n                           />\n                         ) : <Redirect to=\"/settings/clinics-staff\" />)}\n                />\n\n                <Route\n                  exact\n                  path='/settings/clinics-staff/addstaff'\n                  render={(route) => (\n<TestFormLayout\n  defaultValues={defaultValues}\n  changeRedirect={this.changeRedirect}\n  title=\"Add Staff \"\n  formProp={formProp}\n  fields={fields}\n  {...route}\n/>\n)}\n                />\n            </Card>\n            {this.state.redirect && <Redirect to='/settings/clinics-staff' />}\n\n</Row>\n)\n    }\n}\n\nexport default AddEditStaff;\n","import React from \"react\";\nimport {Card, Form, Row} from \"antd\";\nimport {Redirect} from 'react-router-dom'\nimport DynamicFieldsForm from \"../../../common/DynamicFieldsForm\";\nimport {\n    EMAIL_FIELD,\n    INPUT_FIELD,\n    SELECT_FIELD,\n    SINGLE_IMAGE_UPLOAD_FIELD,\n    SUCCESS_MSG_TYPE\n} from \"../../../../constants/dataKeys\";\nimport {ALL_PRACTICE, EXTRA_DATA} from \"../../../../constants/api\";\nimport {displayMessage, getAPI} from \"../../../../utils/common\";\nimport {LANGUAGE, SMS_LANGUAGE_CONFIG_PARAM} from \"../../../../constants/hardData\";\nimport {loadConfigParameters} from \"../../../../utils/clinicUtils\";\n\n\nclass AddPracticeDetails extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            redirect: false,\n            specialisations: null,\n            countries: null,\n            [SMS_LANGUAGE_CONFIG_PARAM]: []\n        }\n        this.changeRedirect = this.changeRedirect.bind(this);\n    }\n\n    componentDidMount() {\n        const that = this;\n        const successFn = function (data) {\n            const specialisations = {};\n            data.specialisation.forEach(function (speciality) {\n                specialisations[speciality.id] = speciality\n            });\n            console.log(specialisations);\n\n            that.setState({\n                specialisations: data.specialisation,\n                countries: data.country,\n            })\n        };\n        const errorFn = function () {\n        };\n        getAPI(EXTRA_DATA, successFn, errorFn);\n        loadConfigParameters(this, [SMS_LANGUAGE_CONFIG_PARAM]);\n    }\n\n    changeRedirect() {\n        const redirectVar = this.state.redirect;\n        this.setState({\n            redirect: !redirectVar,\n        });\n    }\n\n    render() {\n\n        const specialisationsOptions = []\n        if (this.state.specialisations) {\n            this.state.specialisations.forEach(function (specialisation) {\n                specialisationsOptions.push({label: (specialisation.name), value: specialisation.id});\n            })\n        }\n        const fields = [{\n            label: \"Practice Logo\",\n            key: \"logo\",\n            type: SINGLE_IMAGE_UPLOAD_FIELD,\n            allowWebcam: false\n        }, {\n            label: \"Practice Name\",\n            key: \"name\",\n            placeholder: \"Practice Name\",\n            required: true,\n            type: INPUT_FIELD\n        }, {\n            label: \"Practice Tagline\",\n            key: \"tagline\",\n            placeholder: \"Practice Tagline\",\n            required: true,\n            type: INPUT_FIELD\n        }, {\n            label: \"Practice Specialisation\",\n            key: \"specialisation\",\n            placeholder: \"Practice Specialisation\",\n            type: INPUT_FIELD,\n            // options: specialisationsOptions,\n        }, {\n            label: \"Practice Street Address\",\n            key: \"address\",\n            placeholder: \"Practice Street Address\",\n            type: INPUT_FIELD\n        }, {\n            label: \"Practice Locality\",\n            key: \"locality\",\n            placeholder: \"Practice Locality\",\n            type: INPUT_FIELD\n        }, {\n            label: \"Practice Country\",\n            key: \"country\",\n            placeholder: \"Practice Country\",\n            type: INPUT_FIELD,\n        }, {\n            label: \"Practice State\",\n            key: \"state\",\n            placeholder: \"Practice State\",\n            type: INPUT_FIELD,\n        }, {\n            label: \"Practice City\",\n            key: \"city\",\n            placeholder: \"Practice City\",\n            type: INPUT_FIELD,\n        }, {\n            label: \"Practice PINCODE\",\n            key: \"pincode\",\n            placeholder: \"Practice PINCODE\",\n            type: INPUT_FIELD\n        }, {\n            label: \"Practice Contact Number\",\n            key: \"contact\",\n            placeholder: \"Practice Contact Number\",\n            type: INPUT_FIELD\n        }, {\n            label: \"Practice Email\",\n            key: \"email\",\n            placeholder: \"Practice Email\",\n            type: EMAIL_FIELD\n        }, {\n            label: \"SMS Language\",\n            key: \"language\",\n            placeholder: 'SMS Language',\n            initialValue: this.props.activePracticeData.language ? this.props.activePracticeData.language : [],\n            type: SELECT_FIELD,\n            options: this.state[SMS_LANGUAGE_CONFIG_PARAM].map(item => {\n                return {label: item, value: item}\n            }),\n        }, {\n            label: \"Practice Website\",\n            key: \"website\",\n            placeholder: \"Practice Website\",\n            type: INPUT_FIELD\n        }, {\n            label: \"GSTIN\",\n            key: \"gstin\",\n            placeholder: \"GSTIN\",\n            type: INPUT_FIELD\n        }, {\n            label: \"Invoice Prefix\",\n            placeholder: \"DEL/INV/\",\n            key: \"invoice_prefix\",\n            type: INPUT_FIELD,\n            required: true\n        }, {\n            label: \"Payment Prefix\",\n            placeholder: \"DEL/RCPT/\",\n            key: \"payment_prefix\",\n            type: INPUT_FIELD,\n            required: true\n        },\n            {\n                label: \"Return Prefix\",\n                placeholder: \"DEL/RET/\",\n                key: \"return_prefix\",\n                type: INPUT_FIELD,\n                required: true\n            }];\n\n        const formProp = {\n            successFn (data) {\n                displayMessage(SUCCESS_MSG_TYPE, \"success\")\n                if (this.props.history){\n                    this.props.history.replace('/settings/clinics')\n                }\n            },\n            errorFn () {\n\n            },\n            action: ALL_PRACTICE,\n            method: \"post\",\n        }\n\n        const TestFormLayout = Form.create()(DynamicFieldsForm);\n        return (\n<Row>\n            <Card>\n                <TestFormLayout\n                  title=\"Practice Details\"\n                  changeRedirect={this.changeRedirect}\n                  formProp={formProp}\n                  fields={fields}\n                  {...this.props}\n                />\n            </Card>\n            {this.state.redirect && <Redirect to='/settings/clinics' />}\n</Row>\n)\n    }\n}\n\nexport default AddPracticeDetails;\n","import React from \"react\";\nimport {Form} from \"antd\";\nimport DynamicFieldsForm from \"../../../common/DynamicFieldsForm\";\nimport {SMS_FIELD, SUCCESS_MSG_TYPE, SINGLE_CHECKBOX_FIELD} from \"../../../../constants/dataKeys\";\nimport {APPOINTMENT_CONFIRMATION_SMS_TAG_OPTIONS} from \"../../../../constants/hardData\";\nimport {displayMessage, interpolate, getAPI} from \"../../../../utils/common\";\nimport {COMMUNICATONS_API} from \"../../../../constants/api\";\n\n\nclass WishSMS extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n\n        }\n        this.loadWishSMS =this.loadWishSMS.bind(this);\n    }\n\n    componentDidMount() {\n        this.loadWishSMS();\n    }\n\n    loadWishSMS(){\n        const that=this;\n        const successFn =function(data){\n            that.setState({\n                wishsmsData:data[data.length-1]\n            })\n        }\n        const errorFn= function() {\n            \n        }\n        getAPI(interpolate(COMMUNICATONS_API, [this.props.active_practiceId]), successFn, errorFn);\n\n    }\n\n    render() {\n        console.log(\"wishSMS\",this.state.wishsmsData)\n        const that = this;\n        const fields = [{\n            key: \"birthday_wish_sms\",\n            initialValue: this.state.wishsmsData ? this.state.wishsmsData.birthday_wish_sms : false,\n            type: SINGLE_CHECKBOX_FIELD,\n            extra: \"This SMS is sent to the Patient on the morning of their birthday\",\n            follow: <b>BIRTHDAY WISH SMS</b>\n        }, {\n            key: \"birthday_wish_text\",\n            placeholder: \"{clinic}{patient}}\",\n            initialValue: this.state.wishsmsData ? this.state.wishsmsData.birthday_wish_text : ' ',\n            minRows: 4,\n            type: SMS_FIELD,\n            options: APPOINTMENT_CONFIRMATION_SMS_TAG_OPTIONS,\n\n        }, {\n            key: \"anniversary_wish_sms\",\n            initialValue: this.state.wishsmsData ? this.state.wishsmsData.anniversary_wish_sms : false,\n            type: SINGLE_CHECKBOX_FIELD,\n            extra: \"This SMS is sent to the Patient on the morning of their anniversary\",\n            follow: <b>ANNIVERSARY WISH SMS</b>\n        }, {\n            key: \"anniversary_wish_text\",\n            placeholder: \"{anniversary}\",\n            initialValue:this.state.wishsmsData ? this.state.wishsmsData.anniversary_wish_text :' ',\n            minRows: 4,\n            type: SMS_FIELD,\n            options: APPOINTMENT_CONFIRMATION_SMS_TAG_OPTIONS\n        }, {\n            key: \"online_appointment_sms\",\n            type: SINGLE_CHECKBOX_FIELD,\n            initialValue:this.state.wishsmsData ? this.state.wishsmsData.online_appointment_sms:false,\n            extra: \"This SMS is sent to the Patient when they request an appointment on your practice marketing page\",\n            follow: <b>ONLINE APPOINTMENT SMS</b>\n        }, {\n            key: \"online_appointment_text\",\n            placeholder: \"{online appointment}\",\n            initialValue:this.state.wishsmsData ? this.state.wishsmsData.online_appointment_text :' ',\n            minRows: 4,\n            type: SMS_FIELD,\n            options: APPOINTMENT_CONFIRMATION_SMS_TAG_OPTIONS\n        }];\n        const formProp = {\n            successFn (data) {\n                displayMessage(SUCCESS_MSG_TYPE, \"success\");\n            },\n            errorFn () {\n\n            },\n            action: interpolate(COMMUNICATONS_API, [that.props.active_practiceId]),\n            method: \"post\",\n        };\n        const defaultValues = [{\"key\": \"practice\", \"value\": this.props.active_practiceId},\n            {\"key\": \"id\",\"value\": this.state.wishsmsData ? this.state.wishsmsData.id : null,}\n        ];\n\n        const TestFormLayout = Form.create()(DynamicFieldsForm);\n        return (\n<div>\n            <TestFormLayout\n              formProp={formProp}\n              defaultValues={defaultValues}\n              fields={fields}\n            />\n</div>\n)\n    }\n}\n\nexport default WishSMS;\n","import React from \"react\";\nimport {Col, Form, Row, Select} from \"antd\";\nimport moment from \"moment\";\nimport DynamicFieldsForm from \"../../../common/DynamicFieldsForm\";\nimport {\n    SUCCESS_MSG_TYPE,\n    INPUT_FIELD, SMS_FIELD, SINGLE_CHECKBOX_FIELD, TIME_PICKER, SELECT_FIELD, LABEL_FIELD\n} from \"../../../../constants/dataKeys\";\nimport {COMMUNICATONS_API} from \"../../../../constants/api\"\nimport {getAPI, displayMessage, interpolate} from \"../../../../utils/common\";\nimport {\n    APPOINTMENT_CONFIRMATION_SMS_TAG_OPTIONS,\n    LANGUAGE,\n    PROMO_CODE_RUPEE_SMS_TAG_OPTIONS,\n    PROMO_CODE_SMS_TAG_OPTIONS,\n    SMS_LANGUAGE_CONFIG_PARAM\n} from \"../../../../constants/hardData\";\nimport {loadConfigParameters} from \"../../../../utils/clinicUtils\";\n\n\nclass AppointmentSMS extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            redirect: false,\n            data: null,\n            language: this.props.activePracticeData && this.props.activePracticeData.language ? this.props.activePracticeData.language : '',\n            [SMS_LANGUAGE_CONFIG_PARAM]:[]\n        };\n        this.loadData = this.loadData.bind(this);\n    }\n\n    componentDidMount() {\n        this.loadData();\n        loadConfigParameters(this, [SMS_LANGUAGE_CONFIG_PARAM]);\n    }\n\n    loadData() {\n        const that = this;\n        const reqData = {};\n        const successFn = function (data) {\n            console.log(\"length\", data.length - 1);\n            that.setState({\n                data: data[data.length - 1],\n            })\n        };\n        const errorFn = function () {\n        };\n        if (that.state.language) {\n            reqData.language = that.state.language;\n        }\n        getAPI(interpolate(COMMUNICATONS_API, [this.props.active_practiceId]), successFn, errorFn, reqData);\n    }\n\n    changeRedirect() {\n        const redirectVar = this.state.redirect;\n        this.setState({\n            redirect: !redirectVar,\n        });\n    }\n\n    handleChangeLanguage = (type, value) => {\n        const that = this;\n        that.setState({\n            [type]: value,\n        }, function () {\n            that.loadData();\n        })\n    };\n\n    render() {\n        const that = this;\n        const fields = [\n            //     {\n            //     label: \"SMS Language\",\n            //     key: \"sms_language\",\n            //     placeholder:\"SMS Language\",\n            //     initialValue: this.state.data && this.state.data.sms_language? this.state.data.sms_language : this.props.activePracticeData.language,\n            //     extra: \"SMS to Patients will be sent in this language\",\n            //     type: SELECT_FIELD,\n            //     options:LANGUAGE,\n            //     // onchange:()\n            // },\n            {\n                label: \"Contact Number\",\n                key: \"contact_number\",\n                placeholder: \"Contact Number\",\n                initialValue: this.state.data ? this.state.data.contact_number : ' ',\n                extra: \"Maximum 15 characters & represented as {{CLINICCONTACTNUMBER}}\",\n                type: INPUT_FIELD\n            }, {\n                label: \"Email\",\n                key: \"email\",\n                placeholder: \"Email Address\",\n                initialValue: this.state.data ? this.state.data.email : ' ',\n                extra: \"All replies by Patients for emails will be sent to this address\",\n                type: INPUT_FIELD\n            }, {\n                label: \"SMS clinic Name\",\n                key: \"sms_clinic_name\",\n                placeholder: \"Clinic Name\",\n                initialValue: this.state.data ? this.state.data.sms_clinic_name : ' ',\n                extra: \"{{CLINIC}} will use this name.\",\n                type: INPUT_FIELD,\n            }, {\n                key: \"appointment_confirmation_sms\",\n                placeholder: \"Appointment Confirmation SMS Text\",\n                initialValue: this.state.data ? this.state.data.appointment_confirmation_sms : false,\n                type: SINGLE_CHECKBOX_FIELD,\n                extra: \"SMS is sent to the Patient on successfully adding an appointment\",\n                follow: <b>APPOINTMENT CONFIRMATION SMS</b>\n            }, {\n                key: \"appointment_confirmation_text\",\n                placeholder: \"Appointment Cancellation SMS Text\",\n                initialValue: this.state.data ? this.state.data.appointment_confirmation_text : null,\n                minRows: 4,\n                type: SMS_FIELD,\n                options: APPOINTMENT_CONFIRMATION_SMS_TAG_OPTIONS\n            }, {\n                key: \"appointment_cancellation_sms\",\n                initialValue: this.state.data ? this.state.data.appointment_cancellation_sms : false,\n                type: SINGLE_CHECKBOX_FIELD,\n                extra: \"SMS is sent to the Patient when the appointment is cancelled\",\n                follow: <b>APPOINTMENT CANCELLATION SMS</b>\n            }, {\n                key: \"appointment_cancellation_text\",\n                placeholder: \"Appointment Cancellation SMS Text\",\n                initialValue: this.state.data ? this.state.data.appointment_cancellation_text : null,\n                minRows: 4,\n                type: SMS_FIELD,\n                options: APPOINTMENT_CONFIRMATION_SMS_TAG_OPTIONS\n            }, {\n                key: \"appointment_reminder_sms\",\n                placeholder: \"Appointment Reminder SMS Text\",\n                initialValue: this.state.data ? this.state.data.appointment_reminder_sms : false,\n                type: SINGLE_CHECKBOX_FIELD,\n                extra: \"This SMS is automatically sent to the Patient at selected time & date before the appointment.\",\n                follow: <b>APPOINTMENT REMINDER SMS</b>\n            }, {\n                key: \"appointment_reminder_text\",\n                placeholder: \"Appointment Reminder SMS Text\",\n                initialValue: this.state.data ? this.state.data.appointment_reminder_text : null,\n                minRows: 4,\n                type: SMS_FIELD,\n                options: APPOINTMENT_CONFIRMATION_SMS_TAG_OPTIONS\n            }, {\n                key: \"send_on_day_of_appointment\",\n                initialValue: this.state.data ? this.state.data.send_on_day_of_appointment : false,\n                type: SINGLE_CHECKBOX_FIELD,\n                follow: \"Send reminder SMS on the day of appointment at 7:30 AM\",\n            }, {\n                key: \"send_on_day_of_appointment\",\n                initialValue: this.state.data ? this.state.data.send_on_day_of_appointment : false,\n                follow: \"Send reminder SMS on the day before the appointment at\",\n                type: SINGLE_CHECKBOX_FIELD,\n            }, {\n                key: \"send_on_day_of_appointment_time\",\n                initialValue: this.state.data && moment(this.state.data.send_on_day_of_appointment_time).isValid() ? moment(this.state.data.send_on_day_of_appointment_time) : null,\n                type: TIME_PICKER\n            }, {\n                key: \"follow_up_reminder_sms\",\n                initialValue: this.state.data ? this.state.data.follow_up_reminder_sms : false,\n                type: SINGLE_CHECKBOX_FIELD,\n                extra: \"This SMS is sent to the Patient on the morning of the followup sms.\",\n                follow: <b>FOLLOW UP REMINDER SMS</b>\n            }, {\n                key: \"follow_up_reminder_sms_text\",\n                placeholder: \"Follow-up Reminder SMS Text\",\n                initialValue: this.state.data ? this.state.data.follow_up_reminder_sms_text : null,\n                minRows: 4,\n                type: SMS_FIELD,\n                options: APPOINTMENT_CONFIRMATION_SMS_TAG_OPTIONS\n            }, {\n                key: \"send_follow_up_reminder_time\",\n                initialValue: this.state.data ? this.state.data.send_follow_up_reminder_time : null,\n                extra: \"Time to Send follow-up SMS after the last appointment.\",\n                type: SELECT_FIELD,\n                options: [{label: '1 Month', value: 1}, {label: '3 Month', value: 3}, {label: '6 Month', value: 6}]\n            }, {\n                key: \"payment_sms\",\n                initialValue: this.state.data ? this.state.data.payment_sms : false,\n                type: SINGLE_CHECKBOX_FIELD,\n                extra: \"This SMS is sent to the Patient when payment is received.\",\n                follow: <b>PAYMENT SMS</b>\n            }, {\n                key: \"payment_sms_text\",\n                placeholder: \"Payment SMS Text\",\n                initialValue: this.state.data ? this.state.data.payment_sms_text : null,\n                minRows: 4,\n                type: SMS_FIELD,\n                options: APPOINTMENT_CONFIRMATION_SMS_TAG_OPTIONS\n            }, {\n                key: \"promo_code_text\",\n                initialValue: this.state.data ? this.state.data.promo_code_text : false,\n                type: LABEL_FIELD,\n                extra: \"This SMS is sent to the Patient for promo code.\",\n                follow: <b>Promo Code Fixed Rupee SMS Text</b>\n            }, {\n                key: \"promo_code_value_text\",\n                placeholder: \"Promo Code Fixed Rupee SMS Text\",\n                initialValue: this.state.data ? this.state.data.promo_code_value_text : null,\n                minRows: 4,\n                type: SMS_FIELD,\n                options: PROMO_CODE_RUPEE_SMS_TAG_OPTIONS\n            },{\n                key: \"promo_code_text\",\n                initialValue: this.state.data ? this.state.data.promo_code_text : false,\n                type: LABEL_FIELD,\n                extra: \"This SMS is sent to the Patient for promo code.\",\n                follow: <b>Promo Code Percent Discount SMS Text</b>\n            },{\n                key: \"promo_code_precent_text\",\n                placeholder: \"Promo Code Percent Discount SMS Text\",\n                initialValue: this.state.data ? this.state.data.promo_code_precent_text : null,\n                minRows: 4,\n                type: SMS_FIELD,\n                options: PROMO_CODE_SMS_TAG_OPTIONS\n            },\n            {\n                key: \"lab_order_confirmation_sms\",\n                initialValue: this.state.data ? this.state.data.lab_order_confirmation_sms : false,\n                type: SINGLE_CHECKBOX_FIELD,\n                extra: \"This SMS is sent to the Patient when he is prescribed a lab order.\",\n                follow: <b>LAB ORDER CONFIRMATION SMS</b>\n            }, {\n                key: \"lab_order_confirmation_text\",\n                placeholder: \"Lab Order Confirmation SMS Text\",\n                initialValue: this.state.data ? this.state.data.lab_order_confirmation_text : null,\n                minRows: 4,\n                type: SMS_FIELD,\n                options: APPOINTMENT_CONFIRMATION_SMS_TAG_OPTIONS\n            }, {\n                key: \"lab_order_due_on_sms\",\n                placeholder: \"Lab Order Due On SMS Text\",\n                initialValue: this.state.data ? this.state.data.lab_order_due_on_sms : false,\n                extra: \"This SMS is sent to the Patient informing lab order due date\",\n                type: SINGLE_CHECKBOX_FIELD,\n                follow: <b>LAB ORDER DUE ON SMS</b>\n            }, {\n                key: \"lab_order_result_sms\",\n                initialValue: this.state.data ? this.state.data.lab_order_result_sms : false,\n                extra: \"This SMS is sent to the Patient when lab order results are ready\",\n                type: SINGLE_CHECKBOX_FIELD,\n                follow: <b>LAB ORDER RESULT SMS</b>\n            }, {\n                key: \"lab_order_reminder_sms\",\n                initialValue: this.state.data ? this.state.data.lab_order_reminder_sms : false,\n                type: SINGLE_CHECKBOX_FIELD,\n                extra: \"This reminder SMS is sent to the Patient\",\n                follow: <b>LAB ORDER REMINDER SMS</b>\n            },];\n        const formProp = {\n            successFn (data) {\n                displayMessage(SUCCESS_MSG_TYPE, \"success\");\n                that.loadData();\n            },\n            errorFn () {\n\n            },\n            action: interpolate(COMMUNICATONS_API, [that.props.active_practiceId]),\n            method: \"post\",\n        };\n        const defaultValues = [\n            {\"key\": \"practice\", \"value\": this.props.active_practiceId},\n            {\"key\": \"id\", \"value\": this.state.data ? this.state.data.id : null},\n            {\"key\": \"sms_language\", \"value\": this.state.language}\n        ];\n\n        const TestFormLayout = Form.create()(DynamicFieldsForm);\n        return (\n<div>\n            <Row>\n                <Col span={8}>\n                    <span style={{float: 'right', color: 'rgba(0, 0, 0, 0.85)'}}>SMS Language : &nbsp;</span>\n                </Col>\n                <Col span={8}>\n                    <Select\n                      defaultValue={this.data && this.data.sms_language ? this.data.sms_language : that.state.language}\n                      style={{width: 220}}\n                      onChange={(value) => this.handleChangeLanguage('language', value)}\n                    >\n                        {this.state[SMS_LANGUAGE_CONFIG_PARAM].map((option) => (\n<Select.Option value={option}>\n                            {option}\n</Select.Option>\n))}\n                    </Select>\n                    <br />\n                    <span>SMS to Patients will be sent in this language</span>\n                </Col>\n\n            </Row>\n\n            <TestFormLayout\n              formProp={formProp}\n              defaultValues={defaultValues}\n              fields={fields}\n              {...this.props}\n            />\n</div>\n)\n    }\n}\n\nexport default AppointmentSMS;\n","import React from \"react\";\nimport {Form} from \"antd\";\nimport moment from \"moment/moment\";\nimport DynamicFieldsForm from \"../../../common/DynamicFieldsForm\";\nimport {\n    DIVIDER_FIELD,\n    SUCCESS_MSG_TYPE,\n    SINGLE_CHECKBOX_FIELD, TIME_PICKER, MAIL_TEMPLATE_FIELD, INPUT_FIELD, SINGLE_IMAGE_UPLOAD_FIELD\n} from \"../../../../constants/dataKeys\";\nimport {EMAIL_COMMUNICATONS_API} from \"../../../../constants/api\"\nimport {getAPI, displayMessage, interpolate} from \"../../../../utils/common\";\nimport {APPOINTMENT_CONFIRMATION_SMS_TAG_OPTIONS} from \"../../../../constants/hardData\";\n\n\nclass Emails extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {};\n        this.loadData = this.loadData.bind(this);\n    }\n\n    componentDidMount() {\n        this.loadData();\n    }\n\n    loadData() {\n        const that = this;\n        const successFn = function (data) {\n            that.setState({\n                data: data[0],\n            })\n        };\n        const errorFn = function () {\n        };\n        getAPI(interpolate(EMAIL_COMMUNICATONS_API, [this.props.active_practiceId]), successFn, errorFn);\n    }\n\n    render() {\n        const that = this;\n        const fields = [{\n            label: \"Contact Number\",\n            key: \"contact_number\",\n            placeholder: \"Contact Number\",\n            initialValue: this.state.data ? this.state.data.contact_number : ' ',\n            extra: \"Maximum 15 characters & represented as {{CLINICCONTACTNUMBER}}\",\n            type: INPUT_FIELD\n        }, {\n            label: \"Email\",\n            key: \"email\",\n            placeholder: \"Email Address\",\n            initialValue: this.state.data ? this.state.data.email : ' ',\n            extra: \"All replies by Patients for emails will be sent to this address\",\n            type: INPUT_FIELD\n        },{\n            label: \"SMS clinic Name\",\n            key: \"email_clinic_name\",\n            placeholder: \"Clinic Name\",\n            initialValue: this.state.data ? this.state.data.email_clinic_name : ' ',\n            extra: \"{{CLINIC}} will use this name.\",\n            type: INPUT_FIELD,\n        },{\n            label:'Clinic Logo',\n            key:'clinic_logo',\n            initialValue: this.state.data ? this.state.data.clinic_logo : ' ',\n            type:SINGLE_IMAGE_UPLOAD_FIELD\n        },{\n            key: \"appointment_confirmation_email\",\n            initialValue: this.state.data ? this.state.data.appointment_confirmation_email : false,\n            type: SINGLE_CHECKBOX_FIELD,\n            follow: <b>APPOINTMENT CONFIRMATION EMAIL</b>,\n            options: [],\n            extra: \"Email is sent to the Patient on successfully adding an appointment\"\n        }, {\n            key: \"appointment_confirmation_email_text\",\n            initialValue: this.state.data ? this.state.data.appointment_confirmation_email_text : '',\n            type: MAIL_TEMPLATE_FIELD,\n            options: APPOINTMENT_CONFIRMATION_SMS_TAG_OPTIONS,\n        }, {\n            type: DIVIDER_FIELD\n        }, {\n            key: \"appointment_cancellation_email\",\n            initialValue: this.state.data ? this.state.data.appointment_cancellation_email : false,\n            type: SINGLE_CHECKBOX_FIELD,\n            follow: <b>APPOINTMENT CANCELLATION EMAIL</b>,\n            extra: \"Email is sent to the Patient when the appointment is cancelled\"\n        }, {\n            key: \"appointment_cancellation_email_text\",\n            initialValue: this.state.data ? this.state.data.appointment_cancellation_email_text : '',\n            type: MAIL_TEMPLATE_FIELD,\n            options: APPOINTMENT_CONFIRMATION_SMS_TAG_OPTIONS,\n        }, {\n            type: DIVIDER_FIELD\n        }, {\n            key: \"appointment_reminder_email\",\n            initialValue: this.state.data ? this.state.data.appointment_reminder_email : false,\n            type: SINGLE_CHECKBOX_FIELD,\n            follow: <b>APPOINTMENT REMINDER EMAIL</b>,\n            extra: \"Email is sent to the Patient on the morning of the appointment date\"\n        }, {\n            key: \"send_on_day_of_appointment\",\n            initialValue: this.state.data ? this.state.data.send_on_day_of_appointment : false,\n            type: SINGLE_CHECKBOX_FIELD,\n            follow: \"Send reminder SMS on the day of appointment at 7:30 AM\",\n        }, {\n            key: \"send_before_day_of_appointment\",\n            initialValue: this.state.data ? this.state.data.send_before_day_of_appointment : false,\n            follow: \"Send reminder SMS on the day before the appointment at\",\n            type: SINGLE_CHECKBOX_FIELD,\n        }, {\n            key: \"send_on_day_of_appointment_time\",\n            initialValue: this.state.data && moment(this.state.data.send_on_day_of_appointment_time).isValid() ? moment(this.state.data.send_on_day_of_appointment_time) : null,\n            type: TIME_PICKER\n        },\n        //     {\n        //     key: \"appointment_cancellation_email_text\",\n        //     initialValue: this.state.data ? this.state.data.appointment_cancellation_email_text : '',\n        //     type: MAIL_TEMPLATE_FIELD,\n        //     options: APPOINTMENT_CONFIRMATION_SMS_TAG_OPTIONS,\n        // },\n            {\n            type: DIVIDER_FIELD\n        }, {\n            key: \"followup_reminder_email\",\n            initialValue: this.state.data ? this.state.data.followup_reminder_email : false,\n            type: SINGLE_CHECKBOX_FIELD,\n            follow: <b>FOLLOW-UP REMINDER EMAIL</b>,\n            extra: \"Email is sent to the Patient on the morning of their planned follow-up date\"\n        }, {\n            key: \"appointment_reminder_email_text\",\n            initialValue: this.state.data ? this.state.data.appointment_reminder_email_text : '',\n            type: MAIL_TEMPLATE_FIELD,\n            options: APPOINTMENT_CONFIRMATION_SMS_TAG_OPTIONS,\n        }, {\n            type: DIVIDER_FIELD\n        }, {\n            key: \"birthday_wish_email\",\n            initialValue: this.state.data ? this.state.data.birthday_wish_email : false,\n            type: SINGLE_CHECKBOX_FIELD,\n            follow: <b>BIRTHDAY WISH EMAIL</b>,\n            extra: \"Email is sent to the Patient on the morning of their birthday\"\n        }, {\n            key: \"birthday_wish_email_text\",\n            initialValue: this.state.data ? this.state.data.birthday_wish_email_text : '',\n            type: MAIL_TEMPLATE_FIELD,\n            options: APPOINTMENT_CONFIRMATION_SMS_TAG_OPTIONS,\n        }, {\n            type: DIVIDER_FIELD\n        }, {\n            key: \"lab_order_confirmation_email\",\n            initialValue: this.state.data ? this.state.data.lab_order_confirmation_email : false,\n            type: SINGLE_CHECKBOX_FIELD,\n            follow: <b>LAB ORDER CONFIRMATION EMAIL</b>,\n            extra: \"Email is sent to the Patient when he is prescribed a Lab Order\"\n        }, {\n            key: \"lab_order_confirmation_email_text\",\n            initialValue: this.state.data ? this.state.data.lab_order_confirmation_email_text : '',\n            type: MAIL_TEMPLATE_FIELD,\n            options: APPOINTMENT_CONFIRMATION_SMS_TAG_OPTIONS,\n        }, {\n            type: DIVIDER_FIELD\n        }, {\n            key: \"lab_order_due_date_email\",\n            initialValue: this.state.data ? this.state.data.lab_order_due_date_email : false,\n            type: SINGLE_CHECKBOX_FIELD,\n            follow: <b>LAB ORDER DUE DATE EMAIL</b>,\n            extra: \"Email is sent to the Patient when due date is entered for a Lab Order\"\n        }, {\n            key: \"lab_order_due_date_email_text\",\n            initialValue: this.state.data ? this.state.data.lab_order_due_date_email_text : '',\n            type: MAIL_TEMPLATE_FIELD,\n            options: APPOINTMENT_CONFIRMATION_SMS_TAG_OPTIONS,\n        }, {\n            type: DIVIDER_FIELD\n        }, {\n            key: \"lab_order_result_email\",\n            initialValue: this.state.data ? this.state.data.lab_order_result_email : false,\n            type: SINGLE_CHECKBOX_FIELD,\n            follow: <b>LAB ORDER RESULT EMAIL</b>,\n            extra: \"Email is sent to the Patient when result for a Lab Order is ready\"\n        }, {\n            key: \"alab_order_result_email_text\",\n            initialValue: this.state.data ? this.state.data.alab_order_result_email_text : '',\n            type: MAIL_TEMPLATE_FIELD,\n            options: APPOINTMENT_CONFIRMATION_SMS_TAG_OPTIONS,\n        }, {\n            type: DIVIDER_FIELD\n        }, {\n            key: \"anniversary_wish_email\",\n            initialValue: this.state.data ? this.state.data.anniversary_wish_email : false,\n            type: SINGLE_CHECKBOX_FIELD,\n            follow: <b>ANNIVERSARY WISH EMAIL</b>,\n            extra: \"Email is sent to the Patient on the morning of their anniversary\"\n        }, {\n            key: \"anniversary_wish_email_text\",\n            initialValue: this.state.data ? this.state.data.anniversary_wish_email_text : '',\n            type: MAIL_TEMPLATE_FIELD,\n            options: APPOINTMENT_CONFIRMATION_SMS_TAG_OPTIONS,\n        }];\n\n        const formProp = {\n            successFn (data) {\n                displayMessage(SUCCESS_MSG_TYPE, \"Communication Settings Saved Successfully!!\");\n                console.log(\"form\",data);\n            },\n            errorFn () {\n\n            },\n            action: interpolate(EMAIL_COMMUNICATONS_API, [that.props.active_practiceId]),\n            method: \"post\",\n        };\n\n        const defaultValues = [{\"key\": \"practice\", \"value\": this.props.active_practiceId, \"is_active\": false}, {\n            \"key\": \"id\",\n            \"value\": this.state.data ? this.state.data.id : null,\n        }];\n\n        const TestFormLayout = Form.create()(DynamicFieldsForm);\n        return (\n<div>\n            <TestFormLayout\n              formProp={formProp}\n              defaultValues={defaultValues}\n              fields={fields}\n              {...this.props}\n            />\n</div>\n)\n    }\n}\n\nexport default Emails;\n","import React from \"react\";\nimport {Form, Button, Card, Icon, Tabs, Divider, Tag, Row, Table} from \"antd\";\nimport WishSMS from \"./WishSMS\";\nimport AppointmentSMS from \"./AppointmentSMS\";\nimport Emails from \"./Emails\";\n\n\nconst {TabPane} = Tabs;\n\n\nclass CommunicationSettings extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            // loading:false\n        }\n    }\n\n    render() {\n        return (\n<div>\n            <Row>\n                <h2>Communication Settings</h2>\n                <Card>\n                    <Tabs defaultActiveKey=\"appointmentsms\">\n                        <TabPane\n                          tab={<span><Icon type=\"schedule\" />Appointment & FollowUp SMS</span>}\n                          key=\"appointmentsms\"\n                        >\n                            <AppointmentSMS {...this.props} />\n                        </TabPane>\n                        <TabPane tab={<span><Icon type=\"mail\" />Emails</span>} key=\"emails\">\n                            <Emails {...this.props} />\n                        </TabPane>\n                        <TabPane tab={<span><Icon type=\"android\" />Wish SMS</span>} key=\"wishsms\">\n                            <WishSMS {...this.props} />\n                        </TabPane>\n                    </Tabs>\n                </Card>\n            </Row>\n</div>\n)\n    }\n}\n\nexport default CommunicationSettings;\n","import React from \"react\";\nimport {Form, Card, message} from \"antd\";\nimport {Redirect} from \"react-router-dom\";\nimport DynamicFieldsForm from \"../../../common/DynamicFieldsForm\";\nimport {\n    CHECKBOX_FIELD,\n    SUCCESS_MSG_TYPE,\n    INPUT_FIELD,\n    RADIO_FIELD,\n    SELECT_FIELD,\n    NUMBER_FIELD\n} from \"../../../../constants/dataKeys\";\nimport {PROCEDURE_CATEGORY, PRODUCT_MARGIN, TAXES} from \"../../../../constants/api\"\nimport {getAPI, displayMessage, interpolate} from \"../../../../utils/common\";\n\nclass EditProcedure extends React.Component {\n    constructor(props) {\n\n        super(props);\n        this.state = {\n            taxes: [],\n            procedure_category: [],\n            redirect: false,\n            productMargin: [],\n            editingProcedureData: this.props.editingProcedureData,\n            loading: true\n        }\n        this.loadTaxes = this.loadTaxes.bind(this);\n        this.loadProcedures = this.loadProcedures.bind(this)\n        this.loadTaxes();\n        this.loadProductMargin();\n    }\n\n    loadProductMargin() {\n        const that = this;\n        const successFn = function (data) {\n            that.setState({\n                productMargin: data,\n                loading: false\n            })\n        }\n        const errorFn = function () {\n\n        }\n        getAPI(PRODUCT_MARGIN, successFn, errorFn);\n    }\n\n    changeRedirect() {\n        const redirectVar = this.state.redirect;\n        this.setState({\n            redirect: !redirectVar,\n        });\n    }\n\n    componentDidMount() {\n        this.setState({\n            procedure_category: this.props.procedure_category,\n\n        })\n        if (this.props.match.params.id != null) {\n\n\n            //     this.loadProcedures(this.props.match.params.id);\n\n        }\n    }\n\n    loadProcedures(id) {\n        const that = this;\n        const url = `${interpolate(PROCEDURE_CATEGORY, [this.props.active_practiceId])}`;\n\n        const successFn = function (data) {\n            console.log(\"get table\", data);\n            that.setState({\n                procedure_category: data,\n                loading: false\n            })\n        };\n        const errorFn = function () {\n            this.setState({\n                loading: false\n            })\n        };\n\n        getAPI(url, successFn, errorFn);\n    }\n\n    loadTaxes() {\n        const that = this;\n        const successFn = function (data) {\n            console.log(data.map(tax => Object.create({\n                    label: tax.name + (tax.tax_value ? `(${  tax.tax_value  }%)` : ''),\n                    value: tax.id\n                })\n            ));\n            that.setState({\n                taxes: data\n            })\n        }\n        const errorFn = function () {\n        }\n        getAPI(interpolate(TAXES, [this.props.active_practiceId]), successFn, errorFn);\n    }\n\n    render() {\n        const that = this;\n        const formFields = [{\n            label: \"Procedure Name\",\n            key: \"name\",\n            required: true,\n            initialValue: this.state.editingProcedureData ? this.state.editingProcedureData.name : null,\n            type: INPUT_FIELD\n        }, {\n            label: \"Procedure Cost\",\n            key: \"cost\",\n            follow: \"INR\",\n            initialValue: this.state.editingProcedureData ? this.state.editingProcedureData.cost : null,\n            required: true,\n            type: NUMBER_FIELD,\n        }, {\n            label: \"Applicable Taxes\",\n            key: \"taxes\",\n            initialValue: this.state.editingProcedureData ? this.state.editingProcedureData.taxes : null,\n            type: CHECKBOX_FIELD,\n            options: this.state.taxes.map(tax => Object.create({\n                    label: tax.name + (tax.tax_value ? `(${  tax.tax_value  }%)` : ''),\n                    value: tax.id\n                })\n            )\n        },\n        //     {\n        //     label: 'MLM Margin Type',\n        //     type: SELECT_FIELD,\n        //     initialValue: (this.state.editFields ? this.state.editFields.margin : null),\n        //     key: 'margin',\n        //     required: true,\n        //     options: that.state.productMargin.map(margin => ({label: margin.name, value: margin.id}))\n        // },\n            {\n            label: \"Add Under\",\n            key: \"under\",\n            type: SELECT_FIELD,\n            options: [{\n                label: \"None\",\n                value: null\n            }].concat(this.state.procedure_category.map(procedure => Object.create({\n                label: procedure.name,\n                value: procedure.id\n            }))),\n            initialValue: this.state.editingProcedureData ? this.state.editingProcedureData.under : null,\n        }, {\n            label: \"Default Note\",\n            key: \"default_notes\",\n            initialValue: this.state.editingProcedureData ? this.state.editingProcedureData.default_notes : null,\n            type: INPUT_FIELD\n        },];\n        const formProp = {\n            successFn (data) {\n                displayMessage(SUCCESS_MSG_TYPE, 'success');\n                that.changeRedirect();\n                that.props.loadProcedures();\n                if (that.props.history){\n                    that.props.history.replace(\"/settings/procedures\");\n                }\n            },\n            errorFn () {\n\n            },\n            action: interpolate(PROCEDURE_CATEGORY, [this.props.active_practiceId]),\n            method: \"post\",\n        }\n        let defaultValues;\n        if (this.props.editingProcedureData) {\n            defaultValues = [{\"key\": \"id\", \"value\": this.props.editingProcedureData.id}];\n        }\n        const TestFormLayout = Form.create()(DynamicFieldsForm);\n        return (\n<div>{that.props.editingProcedureData ? (\n<Card loading={that.state.loading}>\n            <TestFormLayout\n              {...this.props}\n              title=\"Edit Procedure\"\n              defaultValues={defaultValues}\n              changeRedirect={this.changeRedirect}\n              formProp={formProp}\n              fields={formFields}\n            />\n            {this.state.redirect && <Redirect to='/settings/procedures' />}\n</Card>\n) : <Redirect to='/settings/procedures' />}\n</div>\n)\n    }\n}\n\nexport default EditProcedure;\n","import React from \"react\";\nimport {Form, Card, message} from \"antd\";\nimport {Redirect} from \"react-router-dom\";\nimport DynamicFieldsForm from \"../../../common/DynamicFieldsForm\";\nimport {\n    CHECKBOX_FIELD,\n    SUCCESS_MSG_TYPE,\n    INPUT_FIELD,\n    RADIO_FIELD,\n    SELECT_FIELD,\n    NUMBER_FIELD\n} from \"../../../../constants/dataKeys\";\nimport {PROCEDURE_CATEGORY, PRODUCT_MARGIN, TAXES} from \"../../../../constants/api\"\nimport {getAPI, displayMessage, interpolate} from \"../../../../utils/common\";\n\nclass AddProcedure extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            taxes: [],\n            procedure_category: [],\n            redirect: false,\n            productMargin: []\n        }\n        this.loadTaxes = this.loadTaxes.bind(this);\n        this.loadProcedures = this.loadProcedures.bind(this)\n\n    }\n\n    componentDidMount(){\n        this.loadTaxes();\n        this.loadProcedures();\n        this.loadProductMargin();\n    }\n\n    changeRedirect() {\n        const redirectVar = this.state.redirect;\n        this.setState({\n            redirect: !redirectVar,\n        });\n    }\n\n    loadProductMargin() {\n        const that = this;\n        const successFn = function (data) {\n            that.setState({\n                productMargin: data\n            })\n        }\n        const errorFn = function () {\n\n        }\n        getAPI(PRODUCT_MARGIN, successFn, errorFn);\n    }\n\n    loadProcedures() {\n        const that = this;\n        const successFn = function (data) {\n            console.log(\"get table\");\n            that.setState({\n                procedure_category: data,\n            })\n        };\n        const errorFn = function () {\n        };\n        getAPI(interpolate(PROCEDURE_CATEGORY, [this.props.active_practiceId]), successFn, errorFn);\n    }\n\n    loadTaxes() {\n        const that = this;\n        const successFn = function (data) {\n            console.log(data.map(tax => Object.create({\n                    label: tax.name,\n                    value: tax.id\n                })\n            ));\n            that.setState({\n                taxes: data\n            })\n        }\n        const errorFn = function () {\n        }\n        getAPI(interpolate(TAXES, [this.props.active_practiceId]), successFn, errorFn);\n    }\n\n    render() {\n        const that = this;\n        const formFields = [{\n            label: \"Procedure Name\",\n            key: \"name\",\n            placeholder:\"Procedure Name\",\n            required: true,\n            type: INPUT_FIELD\n        }, {\n            label: \"Procedure Cost\",\n            key: \"cost\",\n            follow: \"INR\",\n            required: true,\n            type: NUMBER_FIELD,\n        }, {\n            label: \"Applicable Taxes\",\n            key: \"taxes\",\n            type: CHECKBOX_FIELD,\n            options: this.state.taxes.map(tax => Object.create({\n                    label: tax.name + (tax.tax_value ? `(${  tax.tax_value  }%)` : ''),\n                    value: tax.id\n                })\n            )\n        },\n        //     {\n        //     label: 'MLM Margin Type',\n        //     type: SELECT_FIELD,\n        //     initialValue: (this.state.editFields ? this.state.editFields.margin : null),\n        //     key: 'margin',\n        //     required: true,\n        //     options: that.state.productMargin.map(margin => ({label: margin.name, value: margin.id}))\n        // },\n            {\n            label: \"Add Under\",\n            key: \"under\",\n            type: SELECT_FIELD,\n            options: [{\n                label: \"None\",\n                value: null\n            }].concat(this.state.procedure_category.map(procedure => Object.create({\n                label: procedure.name,\n                value: procedure.id\n            }))),\n            initialValue: null\n        }, {\n            label: \"Default Note\",\n            key: \"default_notes\",\n            type: INPUT_FIELD\n        },];\n        const formProp = {\n            successFn (data) {\n                displayMessage(SUCCESS_MSG_TYPE, 'success');\n                that.changeRedirect();\n                if (that.props.history){\n                    that.props.history.replace(\"/settings/procedures\");\n                }\n            },\n            errorFn () {\n\n            },\n            action: interpolate(PROCEDURE_CATEGORY, [this.props.active_practiceId]),\n            method: \"post\",\n        }\n\n        const TestFormLayout = Form.create()(DynamicFieldsForm);\n        return (\n<div>\n            <Card>\n                <TestFormLayout\n                  title=\"Add Procedure\"\n                  changeRedirect={this.changeRedirect}\n                  formProp={formProp}\n                  {...this.props}\n                  fields={formFields}\n                />\n                {this.state.redirect && <Redirect to='/settings/procedures' />}\n            </Card>\n</div>\n)\n    }\n}\n\nexport default AddProcedure;\n","import React from 'react';\nimport {Button, Card, Checkbox, Form, Input, InputNumber, Select} from \"antd\";\nimport {displayMessage, getAPI, interpolate, postAPI} from \"../../../../utils/common\";\nimport {PROCEDURE_CATEGORY, PRODUCT_MARGIN, TAXES} from \"../../../../constants/api\";\nimport {REQUIRED_FIELD_MESSAGE} from \"../../../../constants/messages\";\nimport {INPUT_FIELD, SUCCESS_MSG_TYPE} from \"../../../../constants/dataKeys\";\n\nclass AddorEditProcedure extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            editingProcedureData: this.props.editingProcedureData ? this.props.editingProcedureData : null,\n            taxes: [],\n            procedure_category: [],\n            redirect: false,\n            productMargin: [],\n            retail_price : 0\n        }\n        this.loadTaxes = this.loadTaxes.bind(this);\n        this.loadProcedures = this.loadProcedures.bind(this)\n    }\n\n    componentDidMount() {\n        this.loadTaxes();\n        this.loadProcedures();\n        this.loadProductMargin();\n        if(this.props.editingProcedureData){\n            this.setState({\n                retail_price : this.props.editingProcedureData.cost\n            });\n        }\n        if (this.props.history && this.props.history.location.search) {\n            const pairValueArray = this.props.history.location.search.substr(1).split('&');\n            if (pairValueArray.length) {\n                const urlInitialValue = {};\n                const {setFieldsValue} = this.props.form;\n                pairValueArray.forEach(function (item) {\n                    const keyValue = item.split('=');\n                    if (keyValue && keyValue.length == 2) {\n                        if (!isNaN(keyValue[1]) && keyValue[1].toString().indexOf('.') != -1) {\n                            urlInitialValue[keyValue[0]] = parseFloat(keyValue[1]);\n                            setFieldsValue({\n                                [keyValue[0]]: parseFloat(keyValue[1])\n                            })\n                        } else if (!isNaN(keyValue[1])) {\n                            urlInitialValue[keyValue[0]] = parseInt(keyValue[1]);\n                            setFieldsValue({\n                                [keyValue[0]]: parseInt(keyValue[1])\n                            })\n                        } else {\n                            urlInitialValue[keyValue[0]] = keyValue[1];\n                            setFieldsValue({\n                                [keyValue[0]]: keyValue[1]\n                            })\n                        }\n                    }\n                });\n            }\n        }\n    }\n\n    loadProductMargin() {\n        const that = this;\n        const successFn = function (data) {\n            that.setState({\n                productMargin: data\n            })\n        }\n        const errorFn = function () {\n\n        }\n        getAPI(PRODUCT_MARGIN, successFn, errorFn);\n    }\n\n\n    loadProcedures() {\n        const that = this;\n        const successFn = function (data) {\n            that.setState({\n                procedure_category: data,\n            })\n        };\n        const errorFn = function () {\n        };\n        getAPI(interpolate(PROCEDURE_CATEGORY, [this.props.active_practiceId]), successFn, errorFn,{pagination:false});\n    }\n\n    loadTaxes() {\n        const that = this;\n        const successFn = function (data) {\n            that.setState({\n                taxes: data\n            })\n        }\n        const errorFn = function () {\n        }\n        getAPI(interpolate(TAXES, [this.props.active_practiceId]), successFn, errorFn);\n    }\n\n    changeNetPrice = (value) => {\n        const that = this;\n        const {getFieldsValue, setFields} = this.props.form;\n        setTimeout(function () {\n            const values = getFieldsValue();\n            if (values.cost_with_tax) {\n                let totalTaxAmount = 0;\n                values.taxes.forEach(function (taxid) {\n                    that.state.taxes.forEach(function (taxObj) {\n                        if (taxObj.id == taxid)\n                            totalTaxAmount += taxObj.tax_value;\n                    })\n                });\n                const retailPrice = values.cost_with_tax / (1 + totalTaxAmount * 0.01);\n                that.setState({\n                    retail_price: retailPrice.toFixed(2)\n                })\n            } else {\n                that.setState({\n                    retail_price: 0\n                })\n            }\n        }, 1000);\n\n    }\n\n    handleSubmit = (e) => {\n        const that = this;\n        e.preventDefault();\n        this.props.form.validateFields((err, values) => {\n            if (!err) {\n                const reqData = {\n                    ...values,\n                    cost: that.state.retail_price\n                }\n                const successFn = function (data) {\n                    displayMessage(SUCCESS_MSG_TYPE, 'Procedure Updated Successfully!!');\n                    if (that.props.loadData)\n                        that.props.loadData();\n                    that.props.history.replace(\"settings/procedures\");\n                }\n                const errorFn = function () {\n\n                }\n                if(this.state.editingProcedureData){\n                    reqData.id = this.state.editingProcedureData.id\n                }\n                postAPI(interpolate(PROCEDURE_CATEGORY, [this.props.active_practiceId]), reqData, successFn, errorFn)\n            }\n        })\n    }\n\n    render() {\n        const that = this;\n        const formItemLayout = ({\n            labelCol: {span: 8},\n            wrapperCol: {span: 14},\n        });\n        const {getFieldDecorator} = this.props.form;\n        return (\n<div>\n            <Card>\n                <Form onSubmit={this.handleSubmit}>\n                    <h2>{this.state.editingProcedureData ? \"Edit Procedures\" : \"Add Procedures\"}</h2>\n                    <Form.Item label=\"Procedure Name\" {...formItemLayout}>\n                        {getFieldDecorator('name', {\n                            initialValue: this.state.editingProcedureData ? this.state.editingProcedureData.name : null,\n                            rules: [{required: true, message: REQUIRED_FIELD_MESSAGE}]\n                        })\n                        (<Input placeholder=\"Procedure Name\" />)}\n                    </Form.Item>\n                    <Form.Item label=\"Procedure Net Price\" {...formItemLayout}>\n                        {getFieldDecorator('cost_with_tax', {\n                            initialValue: this.state.editingProcedureData ? this.state.editingProcedureData.cost_with_tax : null,\n                            rules: [{\n                                required: true,\n                                message: REQUIRED_FIELD_MESSAGE\n                            }]\n                        })\n                        (<InputNumber onChange={this.changeNetPrice} />)}<span className=\"ant-form-text\">INR</span>\n                    </Form.Item>\n                    <Form.Item label=\"Tax\" {...formItemLayout}>\n                        {getFieldDecorator('taxes', {initialValue: this.state.editingProcedureData && this.state.editingProcedureData.taxes? this.state.editingProcedureData.taxes.map(item => item.id) : []})\n                        (<Checkbox.Group onChange={this.changeNetPrice}>\n                            {this.state.taxes.map((tax) => (\n<Checkbox\n  value={tax.id}\n>{tax.name + (tax.tax_value ? `(${  tax.tax_value  }%)` : '')}\n</Checkbox>\n))}\n                         </Checkbox.Group>)}\n                    </Form.Item>\n                    <Form.Item label=\"Procedure Retail Price\" {...formItemLayout}>\n                        <span className=\"ant-form-text\"><b>{that.state.retail_price}</b>&nbsp;INR</span>\n                    </Form.Item>\n                    <Form.Item key=\"margin\" {...formItemLayout} label=\"MLM Margin\">\n                        {getFieldDecorator(\"margin\", {\n                            initialValue: this.state.editingProcedureData && this.state.editingProcedureData.margin ? this.state.editingProcedureData.margin.id : null,\n                        })(\n                            <Select>\n                                {this.state.productMargin.map((option) => (\n<Select.Option\n  value={option.id}\n>{option.name}\n</Select.Option>\n))}\n                            </Select>\n                        )}\n                    </Form.Item>\n                    <Form.Item key=\"under\" {...formItemLayout} label=\"Add Under\">\n                        {getFieldDecorator(\"under\", {\n                            initialValue: this.state.editingProcedureData ? this.state.editingProcedureData.under : null,\n                        })(\n                            <Select>\n                                {this.state.procedure_category.map((option) => (\n<Select.Option\n  value={option.id}\n>{option.name}\n</Select.Option>\n))}\n                            </Select>\n                        )}\n                    </Form.Item>\n                    <Form.Item label=\"Default Note\" {...formItemLayout}>\n                        {getFieldDecorator('default_notes', {\n                            initialValue: this.state.editingProcedureData ? this.state.editingProcedureData.default_notes : null,\n                            rules: [{required: true, message: REQUIRED_FIELD_MESSAGE}]\n                        })\n                        (<Input placeholder=\"Default Note\" />)}\n                    </Form.Item>\n                    <Form.Item>\n                        <Button style={{margin: 5}} type=\"primary\" htmlType=\"submit\">\n                            Submit\n                        </Button>\n                        {that.props.history ? (\n                            <Button style={{margin: 5}} onClick={() => that.props.history.goBack()}>\n                                Cancel\n                            </Button>\n                          ) : null}\n                    </Form.Item>\n                </Form>\n            </Card>\n</div>\n)\n    }\n}\n\nexport default Form.create()(AddorEditProcedure);\n","import React from \"react\";\nimport {Button, Card, Icon, Tabs, Divider, Tag, Row, Table, Popconfirm, Input} from \"antd\";\nimport {Route, Link, Switch} from \"react-router-dom\";\nimport {Redirect} from \"react-router\";\nimport {PROCEDURE_CATEGORY} from \"../../../../constants/api\"\nimport {getAPI, interpolate, postAPI} from \"../../../../utils/common\";\nimport EditProcedure from \"./EditProcedure\";\nimport PermissionDenied from \"../../../common/errors/PermissionDenied\";\nimport CustomizedTable from \"../../../common/CustomizedTable\";\nimport AddProcedure from \"./AddProcedure\";\nimport AddorEditProcedure from \"./AddorEditProcedure\";\nimport InfiniteFeedLoaderButton from \"../../../common/InfiniteFeedLoaderButton\";\n\n\nconst {Column, ColumnGroup} = Table;\nconst {TabPane} = Tabs;\n\nclass RecentProcedure extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            current: 'staff',\n            procedure_category: null,\n            editingProcedureData: null,\n            loading: true\n        };\n        this.loadProcedures = this.loadProcedures.bind(this);\n    }\n\n    componentDidMount() {\n        this.loadProcedures();\n    }\n\n    loadProcedures(page = 1) {\n        const that = this;\n        const params = {\n            page\n        }\n        if (this.state.searchString) {\n            params.name = this.state.searchString\n        }\n        const successFn = function (data) {\n            if (data.current == 1 && that.state.searchString == params.name)\n                that.setState({\n                    procedure_category: data.results,\n                    next: data.next,\n                    loading: false\n                })\n            else\n                that.setState(function (prevState) {\n                    return {\n                        procedure_category: [...prevState.procedure_category, ...data.results],\n                        next: data.next,\n                        loading: false\n                    }\n                })\n        };\n        const errorFn = function () {\n        };\n\n        getAPI(interpolate(PROCEDURE_CATEGORY, [this.props.active_practiceId]), successFn, errorFn, params);\n    }\n\n\n    handleClick = (e) => {\n        this.setState({\n            current: e.key,\n        });\n    }\n\n    deleteObject(record) {\n        const that = this;\n        const reqData = {\n            id: record.id,\n            is_active: false\n        };\n        reqData.is_active = false;\n        const successFn = function (data) {\n            that.loadProcedures();\n        }\n        const errorFn = function () {\n        };\n        postAPI(interpolate(PROCEDURE_CATEGORY, [this.props.active_practiceId]), reqData, successFn, errorFn)\n    }\n\n    editProcedure(record) {\n        this.setState({\n            editingProcedureData: record,\n            loading: false\n        });\n        const url = `/settings/procedures/${  record.id  }/editprocedure`;\n        this.props.history.push(url);\n\n    }\n\n    changeSearchValue = (value) => {\n        this.setState({\n            searchString: value\n        }, function () {\n            this.loadProcedures();\n        })\n    }\n\n    render() {\n        const that = this;\n        const columns = [{\n            title: \"Procedure Name\",\n            dataIndex: \"name\",\n            key: \"name\",\n        }, {\n            title: \"Procedure Unit Cost\",\n            dataIndex: \"cost_with_tax\",\n            key: \"cost\"\n        }, {\n            title: \"MLM Margin\",\n            dataIndex: \"margin\",\n            key: \"margin\",\n            render: (taxes) => (\n                <span>{taxes ? taxes.name : null}\n                </span>\n)\n        }, {\n            title: \"Applicable Taxes\",\n            dataIndex: \"taxes\",\n            key: \"taxes\",\n            render: (taxes) => (\n                <span>\n                                    {taxes && taxes.length ? taxes.map(tax =>\n                                        <Tag> {tax.name}|<b>{tax.tax_value}%</b></Tag>) : null}\n                </span>\n            )\n        }, {\n            title: \"Standard Notes\",\n            dataIndex: \"default_notes\",\n            key: \"default_notes\"\n        }, {\n            title: \"Action\",\n            key: \"action\",\n            render: (text, record) => (\n                <span>\n                    <Link\n                      to={`/settings/procedures/addprocedure?under=${  record.id}`}\n                    >Add SubCategory\n                    </Link>\n                        <Divider type=\"vertical\" />\n                        <a onClick={() => this.editProcedure(record)}>Edit</a>\n                        <Divider type=\"vertical\" />\n                        <Popconfirm\n                          title=\"Are you sure delete this?\"\n                          onConfirm={() => that.deleteObject(record)}\n                          okText=\"Yes\"\n                          cancelText=\"No\"\n                        >\n                        <a>Delete</a>\n                        </Popconfirm>\n                </span>\n)\n        }];\n        return (\n<Switch>\n            <Route\n              path=\"/settings/procedures/addprocedure\"\n              render={(route) => (this.props.activePracticePermissions.SettingsProcedureCatalog || this.props.allowAllPermissions ?\n                           <AddorEditProcedure {...this.props} {...route} loadData={this.loadProcedures} /> :\n                           <PermissionDenied />\n                   )}\n            />\n            <Route\n              exact\n              path=\"/settings/procedures/:id/editprocedure\"\n              render={(route) => (that.props.activePracticePermissions.SettingsProcedureCatalog || that.props.allowAllPermissions ?\n                           (that.state.editingProcedureData ? (\n                               <AddorEditProcedure\n                                 {...this.state}\n                                 {...this.props}\n                                 {...route}\n                                 loadData={this.loadProcedures}\n                               />\n                             ) :\n                               <Redirect to=\"/settings/procedures\" />) : <PermissionDenied />\n                   )}\n            />\n            <Route>\n                <Row>\n                    <h2>Procedures Catalog\n                        <Link to=\"/settings/procedures/addprocedure\">\n                            <Button type=\"primary\" style={{float: 'right'}}>\n                                <Icon type=\"plus\" />&nbsp;Add Procedure\n                            </Button>\n                        </Link>\n                    </h2>\n                    <Card>\n                        <div className=\"row mar-b-10\">\n                            <div className=\"col-md-12\">\n                                <Input\n                                  onChange={(e) => this.changeSearchValue(e.target.value)}\n                                  value={this.state.searchString}\n                                  style={{width: 200}}\n                                  placeholder=\"Search Procedure...\"\n                                />\n                            </div>\n                        </div>\n                        <Table\n                          columns={columns}\n                          pagination={false}\n                          dataSource={this.state.procedure_category}\n                        />\n                        <InfiniteFeedLoaderButton\n                          loading={this.state.loading}\n                          hidden={!this.state.next}\n                          loaderFunction={() => this.loadProcedures(this.state.next)}\n                        />\n\n                    </Card>\n                </Row>\n            </Route>\n</Switch>\n)\n    }\n}\n\nexport default RecentProcedure;\n","import React from \"react\";\nimport {Button, Modal, Form, Table, Divider, Popconfirm} from \"antd\";\nimport DynamicFieldsForm from \"../../../common/DynamicFieldsForm\";\nimport {\n    SUCCESS_MSG_TYPE,\n    INPUT_FIELD,\n    NUMBER_FIELD,\n    SELECT_FIELD\n} from \"../../../../constants/dataKeys\";\nimport {PAYMENT_MODES} from \"../../../../constants/api\"\nimport {getAPI, displayMessage, interpolate, postAPI} from \"../../../../utils/common\";\nimport {PAYMENT_TYPES} from \"../../../../constants/hardData\";\nimport CustomizedTable from \"../../../common/CustomizedTable\";\n\nclass PaymentModes extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            redirect: false,\n            visible: false,\n            modes: null,\n        }\n        this.loadData = this.loadData.bind(this);\n    }\n\n    componentDidMount() {\n        this.loadData();\n    }\n\n    loadData() {\n        const that = this;\n        const successFn = function (data) {\n            console.log(\"get table\");\n            that.setState({\n                modes: data,\n            })\n        };\n        const errorFn = function () {\n        };\n        getAPI(interpolate(PAYMENT_MODES, [this.props.active_practiceId]), successFn, errorFn);\n    }\n\n    changeRedirect() {\n        const redirectVar = this.state.redirect;\n        this.setState({\n            redirect: !redirectVar,\n        });\n    }\n\n    editPayment(value) {\n        this.setState({\n            editingId: value.id,\n            editingmode: value.mode,\n            editingType: value.payment_type,\n            editingFee: value.fee,\n            visible: true,\n        })\n    }\n\n    handleCancel = () => {\n        this.setState({visible: false});\n    }\n\n    deleteObject(record) {\n        const that = this;\n        const reqData = record;\n        reqData.is_active = false;\n        const successFn = function (data) {\n            that.loadData();\n        }\n        const errorFn = function () {\n        };\n        postAPI(interpolate(PAYMENT_MODES, [this.props.active_practiceId]), reqData, successFn, errorFn)\n    }\n\n    render() {\n        const that = this;\n        const columns = [{\n            title: 'Mode of Payment',\n            placeholder:\"\",\n            dataIndex: 'mode',\n            key: 'mode',\n        }, {\n            title: 'Payment Type',\n            dataIndex: 'payment_type',\n            key: 'payment_type',\n        }, {\n            title: 'Fees',\n            dataIndex: 'fee',\n            key: 'fee',\n            render: (text, record) => (<span>{text} %</span>)\n        }, {\n            title: 'Action',\n            key: 'action',\n            render: (text, record) => (\n                <span>\n              <a onClick={() => this.editPayment(record)}>Edit</a>\n                    <Divider type=\"vertical\" />\n                    <Popconfirm\n                      title=\"Are you sure delete this payment mode?\"\n                      onConfirm={() => that.deleteObject(record)}\n                      okText=\"Yes\"\n                      cancelText=\"No\"\n                    >\n                      <a>Delete</a>\n                    </Popconfirm>\n                </span>\n            ),\n        }];\n        const fields = [{\n            label: \"Mode of payment\",\n            key: \"mode\",\n            required: true,\n            type: INPUT_FIELD\n        }, {\n            label: \"Payment Type\",\n            key: \"payment_type\",\n            required: true,\n            type: SELECT_FIELD,\n            options: PAYMENT_TYPES\n        }, {\n            label: \"Vendor Fee\",\n            key: \"fee\",\n            required: true,\n            type: NUMBER_FIELD,\n            min: 0,\n            follow: '%'\n        },];\n        const editfields = [{\n            label: \"Mode of payment\",\n            key: \"mode\",\n            required: true,\n            initialValue: this.state.editingmode,\n            type: INPUT_FIELD\n        }, {\n            label: \"Payment Type\",\n            key: \"payment_type\",\n            required: true,\n            initialValue: this.state.editingType,\n            type: SELECT_FIELD,\n            options: PAYMENT_TYPES\n        }, {\n            label: \"Vendor Fee\",\n            key: \"fee\",\n            required: true,\n            initialValue: this.state.editingFee,\n            type: NUMBER_FIELD,\n            min: 0,\n            follow: '%'\n        },];\n        const formProp = {\n            successFn (data) {\n                that.handleCancel();\n                that.loadData();\n                console.log(data);\n                console.log(\"sucess\");\n                displayMessage(SUCCESS_MSG_TYPE, \"sucess\")\n            },\n            errorFn () {\n\n            },\n            action: interpolate(PAYMENT_MODES, [this.props.active_practiceId]),\n            method: \"post\",\n        }\n        const defaultValues = [{\"key\": \"practice\", \"value\": this.props.active_practiceId}];\n        const editFormDefaultValues = [{\"key\": \"practice\", \"value\": this.props.active_practiceId}, {\n            \"key\": \"id\",\n            \"value\": this.state.editingId\n        }];\n\n        const TestFormLayout = Form.create()(DynamicFieldsForm);\n        return (\n<div>\n            <TestFormLayout defaultValues={defaultValues} formProp={formProp} fields={fields} {...this.props} />\n            <Divider />\n            <CustomizedTable columns={columns} dataSource={this.state.modes} />\n            <Modal\n              title=\"Edit Payment Mode\"\n              visible={this.state.visible}\n              footer={null}\n              onCancel={this.handleCancel}\n            >\n                <TestFormLayout defaultValues={editFormDefaultValues} formProp={formProp} fields={editfields} />\n                <Button key=\"back\" onClick={this.handleCancel}>Return</Button>\n            </Modal>\n</div>\n)\n    }\n}\n\nexport default PaymentModes;\n","import React from \"react\";\nimport {Button, Modal, Card, Form, Icon, Row, Table, Divider, Popconfirm} from \"antd\";\nimport {Link} from \"react-router-dom\";\nimport DynamicFieldsForm from \"../../../common/DynamicFieldsForm\";\nimport {\n    SUCCESS_MSG_TYPE,\n    CHECKBOX_FIELD,\n    INPUT_FIELD,\n    RADIO_FIELD,\n    NUMBER_FIELD,\n    SELECT_FIELD\n} from \"../../../../constants/dataKeys\";\nimport {PAYMENT_MODES, TAXES} from \"../../../../constants/api\"\nimport {getAPI, displayMessage, interpolate, postAPI} from \"../../../../utils/common\";\nimport CustomizedTable from \"../../../common/CustomizedTable\";\n\nclass TaxCatalog extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            redirect: false,\n            visible: false,\n            taxes: null,\n            loading:true\n        };\n        this.loadData = this.loadData.bind(this);\n        this.deleteObject = this.deleteObject.bind(this);\n\n    }\n\n    componentDidMount() {\n        this.loadData();\n    }\n\n    loadData() {\n        const that = this;\n        const successFn = function (data) {\n            console.log(\"get table\");\n            that.setState({\n                taxes: data,\n                loading:false\n            })\n        };\n        const errorFn = function () {\n            that.setState({\n                loading:false\n            })\n        };\n        getAPI(interpolate(TAXES, [this.props.active_practiceId]), successFn, errorFn);\n    }\n\n    changeRedirect() {\n        const redirectVar = this.state.redirect;\n        this.setState({\n            redirect: !redirectVar,\n        });\n    }\n\n    editTax(value) {\n        this.setState({\n            editingId: value.id,\n            editingName: value.name,\n            editingValue: value.tax_value,\n\n            visible: true,\n        })\n    }\n\n    handleCancel = () => {\n        this.setState({visible: false});\n    }\n\n    deleteObject(record) {\n        const that = this;\n        const reqData = record;\n        reqData.is_active = false;\n        const successFn = function (data) {\n            that.loadData();\n        }\n        const errorFn = function () {\n        };\n        postAPI(interpolate(TAXES, [this.props.active_practiceId]), reqData, successFn, errorFn)\n    }\n\n    render() {\n        const that = this;\n        const columns = [{\n            title: 'Name',\n            dataIndex: 'name',\n            key: 'name',\n        }, {\n            title: 'Tax Value',\n            dataIndex: 'tax_value',\n            key: 'tax_value',\n            render: (text, record) => (<span>{text} %</span>)\n        }, {\n            title: 'Actions',\n            key: 'action',\n            render: (text, record) => (\n                <span>\n              {/* <a onClick={() => this.editTax(record)}>  Edit</a> */}\n                {/* <Divider type=\"vertical\"/> */}\n                    <Popconfirm\n                      title=\"Are you sure delete this?\"\n                      onConfirm={() => that.deleteObject(record)}\n                      okText=\"Yes\"\n                      cancelText=\"No\"\n                    >\n                      <a>Delete</a>\n                    </Popconfirm>\n                </span>\n            ),\n        }];\n        const fields = [{\n            label: \"Tax name\",\n            key: \"name\",\n            placeholder:\"Tax Name\",\n            required: true,\n            type: INPUT_FIELD\n        }, {\n            label: \"Tax Value\",\n            key: \"tax_value\",\n            follow: \"%\",\n            max: 100,\n            min: 0,\n            required: true,\n            type: NUMBER_FIELD\n        },];\n        const editfields = [{\n            label: \"Tax name\",\n            key: \"name\",\n            required: true,\n            initialValue: this.state.editingName,\n            type: INPUT_FIELD\n        }, {\n            label: \"Tax Value\",\n            key: \"tax_value\",\n            follow: \"%\",\n            max: 100,\n            min: 0,\n            required: true,\n            initialValue: this.state.editingValue,\n\n            type: NUMBER_FIELD\n        },];\n        const formProp = {\n            successFn (data) {\n                that.handleCancel();\n                that.loadData();\n                console.log(data);\n                console.log(\"sucess\");\n                displayMessage(SUCCESS_MSG_TYPE, \"success\")\n            },\n            errorFn () {\n\n            },\n            action: interpolate(TAXES, [this.props.active_practiceId]),\n            method: \"post\",\n        }\n        const defaultValues = [{\"key\": \"practice\", \"value\": this.props.active_practiceId}];\n        const editFormDefaultValues = [{\"key\": \"practice\", \"value\": this.props.active_practiceId}, {\n            \"key\": \"id\",\n            \"value\": this.state.editingId\n        }];\n        const TestFormLayout = Form.create()(DynamicFieldsForm);\n        return (\n<div>\n            <TestFormLayout defaultValues={defaultValues} formProp={formProp} fields={fields} {...this.props} />\n            <Divider />\n            <CustomizedTable loading={this.state.loading} columns={columns} dataSource={this.state.taxes} />\n            <Modal\n              title=\"Edit Tax\"\n              visible={this.state.visible}\n              footer={null}\n              onCancel={this.handleCancel}\n            >\n                <TestFormLayout defaultValues={editFormDefaultValues} formProp={formProp} fields={editfields} />\n                <Button key=\"back\" onClick={this.handleCancel}>Return</Button>,\n\n            </Modal>\n</div>\n)\n    }\n}\n\nexport default TaxCatalog;\n","import React from \"react\";\nimport {Form} from \"antd\";\nimport DynamicFieldsForm from \"../../../common/DynamicFieldsForm\";\nimport {\n    CHECKBOX_FIELD,\n    INPUT_FIELD,\n    RADIO_FIELD,\n    SELECT_FIELD,\n    SINGLE_CHECKBOX_FIELD, SUCCESS_MSG_TYPE\n} from \"../../../../constants/dataKeys\";\nimport {displayMessage, getAPI, interpolate} from \"../../../../utils/common\";\nimport {PRACTICE} from \"../../../../constants/api\";\n\nclass CancelledInvoice extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            practiceDetail: {}\n        }\n    }\n\n    componentDidMount() {\n        const that = this;\n        const successFn = function (data) {\n            const {countries} = data;\n            that.setState({\n                countries,\n                practiceDetail: data,\n            })\n        };\n        const errorFn = function () {\n        };\n        getAPI(interpolate(PRACTICE, [this.props.active_practiceId]), successFn, errorFn);\n\n    }\n\n    render() {\n        const fields = [{\n            key: \"hide_cancelled_invoice\",\n            type: SINGLE_CHECKBOX_FIELD,\n            follow:<b>Hide Cancelled Invoice</b>,\n            initialValue: this.state.practiceDetail ? this.state.practiceDetail.hide_cancelled_invoice : false,\n        },{\n            key: \"hide_cancelled_return\",\n            type: SINGLE_CHECKBOX_FIELD,\n            follow:<b>Hide Cancelled Return Invoice</b>,\n            initialValue: this.state.practiceDetail ? this.state.practiceDetail.hide_cancelled_return : false,\n        }, {\n            key: \"hide_cancelled_payment\",\n            type: SINGLE_CHECKBOX_FIELD,\n            follow:<b>Hide Cancelled Payments</b>,\n            initialValue: this.state.practiceDetail ? this.state.practiceDetail.hide_cancelled_payment : false\n        }];\n        const formProp = {\n            successFn (data) {\n                displayMessage(SUCCESS_MSG_TYPE, \"Settings Saved Successfuly!!\");\n            },\n            errorFn () {\n\n            },\n            action: interpolate(PRACTICE, [this.props.active_practiceId]),\n            method: \"put\",\n        };\n        const TestFormLayout = Form.create()(DynamicFieldsForm);\n        const defaultValue = [{key: 'id', value: this.props.active_practiceId}];\n        return (\n<div>\n            <TestFormLayout formProp={formProp} fields={fields} {...this.props} defaultValues={defaultValue} />\n</div>\n)\n    }\n}\n\nexport default CancelledInvoice;\n","import React from \"react\";\nimport {Form, Button, Card, Icon, Tabs, Divider, Tag, Row, Table} from \"antd\";\nimport PaymentModes from \"./PaymentModes\";\nimport TaxCatalog from \"./TaxCatalog\";\nimport CancelledInvoice from \"./CancelledInvoice\";\n\nconst {TabPane} = Tabs;\n\n\nclass BillingSettings extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            defaultActiveKey: this.props.location.hash\n        }\n    }\n\n\n    render() {\n        return (\n<div>\n            <Row>\n                <h2>Billing</h2>\n                <Card>\n                    <Tabs defaultActiveKey={this.state.defaultActiveKey}>\n                        <TabPane tab={<span><Icon type=\"cluster\" />Tax Catalog</span>} key=\"#taxcatalog\">\n                            <TaxCatalog {...this.state} {...this.props} />\n                        </TabPane>\n                        <TabPane tab={<span><Icon type=\"dollar\" />Accepted Modes of payment </span>} key=\"#paymentmodes\">\n                            <PaymentModes {...this.props} />\n                        </TabPane>\n                        <TabPane tab={<span><Icon type=\"block\" />Cancelled Invoice</span>} key=\"cancelledinvoice\">\n                            <CancelledInvoice {...this.state} {...this.props} />\n                        </TabPane>\n                    </Tabs>\n\n                </Card>\n            </Row>\n</div>\n)\n    }\n}\n\nexport default BillingSettings;\n","import React from \"react\";\nimport {Button, Modal, Card, Form, Icon, Row, Table, Divider, Popconfirm} from \"antd\";\nimport {Link} from \"react-router-dom\";\nimport DynamicFieldsForm from \"../../../common/DynamicFieldsForm\";\nimport {\n    CHECKBOX_FIELD,\n    SUCCESS_MSG_TYPE,\n    INPUT_FIELD,\n    RADIO_FIELD,\n    NUMBER_FIELD,\n    SELECT_FIELD\n} from \"../../../../constants/dataKeys\";\nimport {TAXES} from \"../../../../constants/api\"\nimport {getAPI, displayMessage, interpolate, postAPI} from \"../../../../utils/common\";\nimport CustomizedTable from \"../../../common/CustomizedTable\";\n\nclass TableData extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            redirect: false,\n            visible: false,\n            data: null,\n            loading:true\n        }\n        this.loadData = this.loadData.bind(this);\n        this.deleteObject = this.deleteObject.bind(this);\n    }\n\n    componentDidMount() {\n        this.loadData();\n    }\n\n    loadData() {\n        const that = this;\n        const successFn = function (data) {\n            that.setState({\n                data,\n                loading:false\n            })\n        };\n        const errorFn = function () {\n            that.setState({\n                loading:false\n            })\n        };\n        getAPI(interpolate(this.props.id, [this.props.active_practiceId]), successFn, errorFn);\n    }\n\n    changeRedirect() {\n        const redirectVar = this.state.redirect;\n        this.setState({\n            redirect: !redirectVar,\n        });\n    }\n\n    editFunction(value) {\n        this.setState({\n            editingId: value.id,\n            editingName: value.name,\n            visible: true,\n            loading:false\n        })\n    }\n\n    handleCancel = () => {\n        this.setState({visible: false});\n    }\n\n    deleteObject(record) {\n        const that = this;\n        const reqData = record;\n        reqData.is_active = false;\n        const successFn = function (data) {\n            that.loadData();\n        }\n        const errorFn = function () {\n        };\n        postAPI(interpolate(this.props.id, [this.props.active_practiceId]), reqData, successFn, errorFn)\n    }\n\n    render() {\n        const that = this;\n        const columns = [{\n            title: 'Name',\n            dataIndex: 'name',\n            key: 'name',\n        }, {\n            title: 'Action',\n            key: 'action',\n            render: (text, record) => (\n                <span>\n              <a onClick={() => this.editFunction(record)}>  Edit</a>\n                <Divider type=\"vertical\" />\n                    <Popconfirm\n                      title=\"Are you sure delete this item?\"\n                      onConfirm={() => that.deleteObject(record)}\n                      okText=\"Yes\"\n                      cancelText=\"No\"\n                    >\n                      <a>Delete</a>\n                    </Popconfirm>\n                </span>\n            ),\n        }];\n        const fields = [{\n            label: this.props.name,\n            key: \"name\",\n            required: true,\n            type: INPUT_FIELD\n        },];\n        const editfields = [\n\n            {\n                label: this.props.name,\n                key: \"name\",\n                required: true,\n                initialValue: this.state.editingName,\n                type: INPUT_FIELD\n            },];\n        const formProp = {\n            successFn (data) {\n                that.handleCancel();\n                that.loadData();\n                console.log(data);\n                console.log(\"sucess\");\n                displayMessage(SUCCESS_MSG_TYPE, \"success\")\n\n            },\n            errorFn () {\n\n            },\n            action: interpolate(this.props.id, [this.props.active_practiceId]),\n            method: \"post\",\n        };\n        const defaultValues = [{\"key\": \"practice\", \"value\": this.props.active_practiceId}]\n        const editFormDefaultValues = [{\"key\": \"practice\", \"value\": this.props.active_practiceId}, {\n            \"key\": \"id\",\n            \"value\": this.state.editingId\n        }]\n\n        const TestFormLayout = Form.create()(DynamicFieldsForm);\n        return (\n<div>\n            <TestFormLayout defaultValues={defaultValues} formProp={formProp} fields={fields} />\n            <Divider />\n            <CustomizedTable loading={this.state.loading} columns={columns} dataSource={this.state.data} />\n            <Modal\n              title={`Edit ${  this.props.name}`}\n              visible={this.state.visible}\n              footer={null}\n              onCancel={this.handleCancel}\n            >\n                <TestFormLayout defaultValues={editFormDefaultValues} formProp={formProp} fields={editfields} />\n                <Button key=\"back\" onClick={this.handleCancel}>Return</Button>,\n\n            </Modal>\n</div>\n)\n    }\n}\n\nexport default TableData;\n","import React from \"react\";\nimport {Card, Form, Divider, Row,Popconfirm,Table} from \"antd\";\nimport DynamicFieldsForm from \"../../../common/DynamicFieldsForm\";\nimport {SUCCESS_MSG_TYPE,SELECT_FIELD} from \"../../../../constants/dataKeys\";\nimport {VITAL_SIGNS_API, EMR_VITAL_SIGNS} from \"../../../../constants/api\"\nimport {getAPI, interpolate, displayMessage} from \"../../../../utils/common\";\n// import CustomizedTable from \"../../../common/CustomizedTable\";\nimport {DEFAULT_TEMPERATURE_IN,DEFAULT_BP_METHOD,DEFAULT_TEMPERATURE_METHOD} from \"../../../../constants/hardData\";\n\nclass VitalSigns extends React.Component {  \n    constructor(props) {\n        super(props);\n\n        this.state = {\n            redirect: false,\n            vitalSign: null,\n        }\n        this.changeRedirect = this.changeRedirect.bind(this);\n        this.loadVitalSign =this.loadVitalSign.bind(this);\n\n    }\n\n    componentDidMount() {\n        this.loadVitalSign();\n    }\n\n    changeRedirect() {\n        const redirectVar = this.state.redirect;\n        this.setState({\n            redirect: !redirectVar,\n        });\n    }\n\n    loadVitalSign(){\n        const that=this;\n        const successFn =function (data){\n            that.setState({\n                vitalSign:data[data.length-1]\n            })\n        }\n        const errorFn = function(){\n            that.setState({\n\n            })\n        }\n        getAPI(interpolate(EMR_VITAL_SIGNS, [that.props.active_practiceId]), successFn, errorFn);\n    }\n\n    render() {\n        const fields = [{\n            label: \"Default temperature measurement in\",\n            key: \"temperature_unit\",\n            type: SELECT_FIELD,\n            initialValue:this.state.vitalSign ? this.state.vitalSign.temperature_unit:null,\n            options: DEFAULT_TEMPERATURE_IN.map(Temp_in => ({label: Temp_in.label, value: Temp_in.value}))\n        }, {\n            label: \"Default temperature measurement method\",\n            key: \"temperature_method\",\n            type: SELECT_FIELD,\n            initialValue:this.state.vitalSign ? this.state.vitalSign.temperature_method:null,\n            options: DEFAULT_TEMPERATURE_METHOD.map(TempMethod =>({label:TempMethod.label ,value:TempMethod.value}))\n        },{\n            label: \"Default blood pressure measurement method\",\n            key: \"blood_pressure_method\",\n            initialValue:this.state.vitalSign ? this.state.vitalSign.blood_pressure_method:null,\n            type: SELECT_FIELD,\n            options:DEFAULT_BP_METHOD.map(BPMETHOD =>({label:BPMETHOD.label , value:BPMETHOD.value}))\n        }];\n\n        const defaultValues = [{ key: 'practice', value: this.props.active_practiceId}, {\n            \"key\": \"id\",\n            \"value\": this.state.vitalSign ? this.state.vitalSign.id : null,\n        }];\n\n        const TestFormLayout = Form.create()(DynamicFieldsForm);\n    \n        const formProp = {\n            successFn (data) {\n                displayMessage(SUCCESS_MSG_TYPE, \"success\")\n            },\n            errorFn () {\n\n            },\n            action: interpolate(EMR_VITAL_SIGNS, [this.props.active_practiceId]),\n            method: \"post\",\n        }\n\n        return (\n<Row>\n                <TestFormLayout defaultValues={defaultValues} formProp={formProp} fields={fields} />\n</Row>\n)\n\n    }\n}\n\nexport default VitalSigns;\n","import React from \"react\";\nimport {Form, Button, Card, Icon, Tabs, Divider, Tag, Row, Table} from \"antd\";\nimport DynamicFieldsForm from \"../../../common/DynamicFieldsForm\";\nimport {CHECKBOX_FIELD, INPUT_FIELD, RADIO_FIELD, SELECT_FIELD} from \"../../../../constants/dataKeys\";\nimport TableData from \"./TableData\";\nimport {\n    EMR_DIAGNOSES,\n    EMR_FILETAGS,\n    EMR_COMPLAINTS,\n    EMR_OBSERVATIONS,\n    EMR_INVESTIGATIONS,\n    EMR_TREATMENTNOTES,\n    EMR_VITAL_SIGNS, EMR_MEDICATION\n} from \"../../../../constants/api\"\nimport VITALSINGS from \"./VitalSigns\";\n\nconst {TabPane} = Tabs;\n\n\nclass EMRSettings extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            defaultActiveKey: this.props.location.hash\n        }\n    }\n\n    render() {\n        console.log(\"propss\",this.props)\n        return (\n<div>\n            <Row>\n                <h2>EMR Settings</h2>\n                <Card>\n                    <Tabs defaultActiveKey={this.state.defaultActiveKey}>\n                        <TabPane tab={<span><Icon type=\"sound\" />Complaints</span>} key=\"#complaints\">\n                            <TableData {...this.props} id={EMR_COMPLAINTS} name=\"Complaints\" />\n                        </TabPane>\n                        <TabPane tab={<span><Icon type=\"eye\" />Observations</span>} key=\"#observations\">\n                            <TableData {...this.props} id={EMR_OBSERVATIONS} name=\"Observations\" />\n                        </TabPane>\n                        <TabPane tab={<span><Icon type=\"plus-square\" />Diagnoses</span>} key=\"#diagnoses\">\n                            <TableData {...this.props} id={EMR_DIAGNOSES} name=\"Diagnoses\" />\n                        </TabPane>\n                        <TabPane tab={<span><Icon type=\"laptop\" />Investigations</span>} key=\"#investigations\">\n                            <TableData {...this.props} id={EMR_INVESTIGATIONS} name=\"Investigations\" />\n                        </TabPane>\n                        <TabPane tab={<span><Icon type=\"solution\" />Notes</span>} key=\"#treatmentnotes\">\n                            <TableData {...this.props} id={EMR_TREATMENTNOTES} name=\"Treatment Notes\" />\n                        </TabPane>\n                        <TabPane tab={<span><Icon type=\"medicine-box\" />Medication</span>} key=\"#medication\">\n                            <TableData {...this.props} id={EMR_MEDICATION} name=\"Medication\" />\n                        </TabPane>\n                        <TabPane tab={<span><Icon type=\"file\" />File Labels</span>} key=\"#filetags\">\n                            <TableData {...this.props} id={EMR_FILETAGS} name=\"File Labels\" />\n                        </TabPane>\n                        <TabPane tab={<span><Icon type=\"heart\" />Vital Signs</span>} key=\"#vitalsigns\">\n                            <VITALSINGS {...this.props} />\n                        </TabPane>\n                    </Tabs>\n\n                </Card>\n            </Row>\n</div>\n)\n    }\n}\n\nexport default EMRSettings;\n","import React from \"react\";\nimport {Button, Card, Form, Icon, Row} from \"antd\";\nimport {Redirect} from 'react-router-dom'\nimport DynamicFieldsForm from \"../../../common/DynamicFieldsForm\";\nimport {\n    CHECKBOX_FIELD,\n    EMAIL_FIELD,\n    SUCCESS_MSG_TYPE,\n    INPUT_FIELD,\n    RADIO_FIELD,\n    SELECT_FIELD,\n    SINGLE_IMAGE_UPLOAD_FIELD, NUMBER_FIELD\n} from \"../../../../constants/dataKeys\";\nimport {PRACTICE} from \"../../../../constants/api\";\nimport {getAPI, displayMessage, interpolate} from \"../../../../utils/common\";\nimport {LANGUAGE, SMS_LANGUAGE_CONFIG_PARAM} from \"../../../../constants/hardData\";\nimport {loadConfigParameters} from \"../../../../utils/clinicUtils\";\n\n\nclass EditPracticeDetail extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            practiceDetail: null,\n            countries: null,\n            [SMS_LANGUAGE_CONFIG_PARAM]: []\n        };\n        this.changeRedirect = this.changeRedirect.bind(this);\n\n    }\n\n    changeRedirect() {\n        const redirectVar = this.state.redirect;\n        this.setState({\n            redirect: !redirectVar,\n        });\n    }\n\n    componentDidMount() {\n        const that = this;\n        const successFn = function (data) {\n            const {countries} = data;\n            that.setState({\n                countries,\n                practiceDetail: data,\n            })\n        };\n        const errorFn = function () {\n        };\n        getAPI(interpolate(PRACTICE, [this.props.practiceId]), successFn, errorFn);\n        loadConfigParameters(this, [SMS_LANGUAGE_CONFIG_PARAM])\n    }\n\n\n    render() {\n        const specialisationsOptions = [];\n        if (this.state.practiceDetail) {\n            this.state.practiceDetail.specialisations.forEach(function (specialisation) {\n                specialisationsOptions.push({label: (specialisation.name), value: specialisation.id});\n            })\n        }\n\n\n        if (this.state.practiceDetail) {\n            const fields = [{\n                label: \"Practice Logo\",\n                key: \"logo\",\n                type: SINGLE_IMAGE_UPLOAD_FIELD,\n                initialValue: this.state.practiceDetail.logo,\n                allowWebcam: false\n            }, {\n                label: \"Practice Name\",\n                key: \"name\",\n                required: true,\n                placeholder: \"Practice Name\",\n                initialValue: this.state.practiceDetail.name,\n                type: INPUT_FIELD\n            }, {\n                label: \"Practice Tagline\",\n                key: \"tagline\",\n                placeholder: \"Practice Tagline\",\n                required: true,\n                initialValue: this.state.practiceDetail.tagline,\n                type: INPUT_FIELD\n            }, {\n                label: \"Practice Specialisation\",\n                key: \"specialisation\",\n                placeholder: \"Practice Specialisation\",\n                initialValue: this.state.practiceDetail.specialisation,\n                type: INPUT_FIELD,\n                // options: specialisationsOptions\n            }, {\n                label: \"Practice Street Address\",\n                key: \"address\",\n                placeholder: \"Practice Street Address\",\n                initialValue: this.state.practiceDetail.address,\n                type: INPUT_FIELD\n            }, {\n                label: \"Practice locality\",\n                initialValue: this.state.practiceDetail.locality,\n                key: \"locality\",\n                placeholder: \"Practice Locality\",\n                type: INPUT_FIELD\n            }, {\n                label: \"Practice City\",\n                initialValue: this.state.practiceDetail.City,\n                placeholder: \"Practice City\",\n                key: \"city\",\n                type: INPUT_FIELD,\n                //     options: [{label: \"Hello\", value: \"1\"}, {label: \"New\", value: \"13\"}, {label: \"World\", value: \"14\"}]\n            }, {\n                label: \"Practice state\",\n                key: \"state\",\n                placeholder: \"Practice State\",\n                initialValue: this.state.practiceDetail.state,\n                type: INPUT_FIELD,\n                // options: [{label: \"Hello\", value: \"1\"}, {label: \"New\", value: \"13\"}, {label: \"World\", value: \"14\"}]\n            }, {\n                label: \"Practice Country\",\n                key: \"country\",\n                placeholder: \"Practice Country\",\n                initialValue: this.state.practiceDetail.country,\n                type: INPUT_FIELD,\n            }, {\n                label: \"Practice PINCODE\",\n                key: \"pincode\",\n                placeholder: \"Practice PINCODE\",\n                initialValue: this.state.practiceDetail.pincode,\n                type: INPUT_FIELD\n            }, {\n                label: \"Practice Contact Number\",\n                key: \"contact\",\n                placeholder: \"Practice Contact Number\",\n                initialValue: this.state.practiceDetail.contact,\n                type: INPUT_FIELD\n            }, {\n                label: \"Practice Email\",\n                key: \"email\",\n                placeholder: \"Practice Email\",\n                initialValue: this.state.practiceDetail.email,\n                type: EMAIL_FIELD\n            }, {\n                label: \"SMS Language\",\n                key: \"language\",\n                placeholder: 'SMS Language',\n                initialValue: this.state.practiceDetail && this.state.practiceDetail.language ? this.state.practiceDetail.language : this.props.activePracticeData.language,\n                type: SELECT_FIELD,\n                options: this.state[SMS_LANGUAGE_CONFIG_PARAM].map(item => {\n                    return {label: item, value: item}\n                }),\n            }, {\n                label: \"Practice website\",\n                key: \"website\",\n                placeholder: \"Practice Website\",\n                initialValue: this.state.practiceDetail.website,\n                type: INPUT_FIELD\n            }, {\n                label: \"GSTIN\",\n                initialValue: this.state.practiceDetail.gstin,\n                placeholder: \"GSTIN\",\n                key: \"gstin\",\n                type: INPUT_FIELD\n            }, {\n                label: \"Invoice Prefix\",\n                initialValue: this.state.practiceDetail.invoice_prefix,\n                placeholder: \"DEL/INV/\",\n                key: \"invoice_prefix\",\n                type: INPUT_FIELD,\n                required: true\n            }, {\n                label: \"Payment Prefix\",\n                initialValue: this.state.practiceDetail.payment_prefix,\n                placeholder: \"DEL/RCPT/\",\n                key: \"payment_prefix\",\n                type: INPUT_FIELD,\n                required: true\n            }, {\n                label: \"Return Prefix\",\n                placeholder: \"DEL/RET/\",\n                initialValue: this.state.practiceDetail.return_prefix,\n                key: \"return_prefix\",\n                type: INPUT_FIELD,\n                required: true\n            }];\n            const TestFormLayout = Form.create()(DynamicFieldsForm);\n            const formProp = {\n                successFn (data) {\n                    displayMessage(SUCCESS_MSG_TYPE, \"success\");\n                    if (this.props.history){\n                        this.props.history.replace('/settings/clinics')\n                    }\n                },\n                errorFn () {\n\n                },\n                action: interpolate(PRACTICE, [this.props.practiceId]),\n                method: \"put\",\n            };\n\n\n            return (\n<Row>\n                <Card>\n                    <TestFormLayout\n                      title=\"Edit Practice Details\"\n                      changeRedirect={this.changeRedirect}\n                      formProp={formProp}\n                      fields={fields}\n                      {...this.props}\n                    />\n                    {this.state.redirect && <Redirect to='/settings/clinics' />}\n                </Card>\n</Row>\n)\n        } return <Card loading />\n    }\n}\n\nexport default EditPracticeDetail;\n","import React from \"react\";\nimport {Form, Input, Select, InputNumber, Button, Card} from \"antd\";\nimport moment from \"moment/moment\";\nimport {REQUIRED_FIELD_MESSAGE} from \"../../../../constants/messages\";\nimport {displayMessage, getAPI, interpolate, postAPI} from \"../../../../utils/common\";\nimport {DRUG_TYPE_API, DRUG_UNIT_API, INVENTORY_ITEM_API} from \"../../../../constants/api\";\nimport {\n    DATE_PICKER,\n    INPUT_FIELD, MULTI_IMAGE_UPLOAD_FIELD,\n    NUMBER_FIELD,\n    SELECT_FIELD,\n    SINGLE_IMAGE_UPLOAD_FIELD, SUCCESS_MSG_TYPE, TIME_PICKER,\n} from \"../../../../constants/dataKeys\";\nimport {DRUG} from \"../../../../constants/hardData\";\n\nclass AddorEditPrescriptionForm extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            drugTypeList: [],\n            drugUnitList: [],\n            editPrescreption: this.props.editCatalog ? this.props.editCatalog : null\n        }\n    }\n\n    componentWillMount() {\n        this.loadDrugType();\n        this.loadDrugUnit();\n    }\n\n    loadDrugType() {\n        const that = this;\n        const successFn = function (data) {\n            that.setState({\n                drugTypeList: data\n            })\n        }\n        const errorFn = function () {\n        }\n        getAPI(interpolate(DRUG_TYPE_API, [this.props.active_practiceId]), successFn, errorFn);\n    }\n\n    loadDrugUnit() {\n        const that = this;\n        const successFn = function (data) {\n            that.setState({\n                drugUnitList: data\n            })\n        }\n        const errorFn = function () {\n        }\n        getAPI(interpolate(DRUG_UNIT_API, [this.props.active_practiceId]), successFn, errorFn);\n    }\n\n    setFormParams = (type, value) => {\n        this.setState({\n            [type]: value\n        })\n    }\n\n    handleSubmit = (option) => {\n        const that = this;\n        this.props.form.validateFieldsAndScroll((err, values) => {\n            if (!err) {\n                // console.log(values);\n            }\n            const reqData = {\n                ...values,\n                practice: that.props.active_practiceId,\n                maintain_inventory: option,\n                item_type: DRUG\n            }\n            if (that.state.editPrescreption) {\n                reqData.id = that.state.editPrescreption.id;\n            }\n            const successFn = function (data) {\n\n                displayMessage(SUCCESS_MSG_TYPE, \"success\")\n                that.props.loadData();\n                const url = '/settings/prescriptions';\n                that.props.history.replace(url);\n            }\n            const errorFn = function () {\n\n            }\n\n            postAPI(INVENTORY_ITEM_API, reqData, successFn, errorFn)\n        });\n    }\n\n    render() {\n        const that = this;\n        const formItemLayout = (this.props.formLayout ? this.props.formLayout : {\n            labelCol: {span: 6},\n            wrapperCol: {span: 14},\n        });\n        const {getFieldDecorator} = this.props.form;\n        return (\n<Card>\n            <Form>\n                <h2>{this.props.title}</h2>\n                <Form.Item key=\"name\" label=\"Name\" {...formItemLayout}>\n                    {getFieldDecorator('name', {\n                        initialValue: that.state.editPrescreption ? that.state.editPrescreption.name : null,\n                        rules: [{\n                            required: true,\n                            message: REQUIRED_FIELD_MESSAGE\n                        }]\n                    })(\n                        <Input placeholder=\"Medicine Name\" />\n                    )}\n                </Form.Item>\n                {this.state.drugType && this.state.drugType == INPUT_FIELD ? (\n                    <Form.Item key=\"drug_type_extra\" label=\"Medicine Type\" {...formItemLayout}>\n                        {getFieldDecorator(\"drug_type_extra\", {\n                            initialValue: that.state.editPrescreption ? that.state.editPrescreption.drug_type_extra : null,\n                            rules: [{\n                                required: true,\n                                message: REQUIRED_FIELD_MESSAGE\n                            }]\n                        })(\n                            <Input />\n                        )}\n                        <a onClick={() => that.setFormParams('drugType', SELECT_FIELD)}>Choose Medicine Type</a>\n                    </Form.Item>\n                  )\n                    : (\n<Form.Item key=\"drug_type\" {...formItemLayout} label=\"Medicine Type\">\n                        {getFieldDecorator(\"drug_type\", {\n                            initialValue: this.state.editPrescreption ? this.state.editPrescreption.drug_type : null,\n                            rules: [{\n                                required: true,\n                                message: REQUIRED_FIELD_MESSAGE\n                            }]\n                        })(\n                            <Select>\n                                {that.state.drugTypeList.map((option) => (\n<Select.Option\n  value={option.id}\n>{option.name}\n</Select.Option>\n))}\n                            </Select>\n                        )}\n                        <a onClick={() => that.setFormParams('drugType', INPUT_FIELD)}>Add New Medicine Type</a>\n</Form.Item>\n)}\n                <Form.Item\n                  key=\"strength\"\n                  {...formItemLayout}\n                  label=\"Dosage\"\n                >\n                    {getFieldDecorator(\"strength\", {\n                        initialValue: that.state.editPrescreption ? that.state.editPrescreption.strength : null,\n                        rules: [{\n                            required: true,\n                            message: REQUIRED_FIELD_MESSAGE\n                        }]\n                    })(\n                        <InputNumber min={0} />\n                    )}\n                </Form.Item>\n                {this.state.drugUnit && this.state.drugUnit == INPUT_FIELD ? (\n                    <Form.Item key=\"unit_type_extra\" label=\"Medicine Unit\" {...formItemLayout}>\n                        {getFieldDecorator(\"unit_type_extra\", {\n                            initialValue: that.state.editPrescreption ? that.state.editPrescreption.unit_type_extra : null,\n                            rules: [{\n                                required: true,\n                                message: REQUIRED_FIELD_MESSAGE\n                            }]\n                        })(\n                            <Input />\n                        )}\n                        <a onClick={() => that.setFormParams('drugUnit', SELECT_FIELD)}>Choose Medicine Unit</a>\n                    </Form.Item>\n                  )\n                    : (\n<Form.Item key=\"stength_unit\" {...formItemLayout} label=\"Medicine Unit\">\n                        {getFieldDecorator(\"stength_unit\", {\n                            initialValue: this.state.editPrescreption ? this.state.editPrescreption.stength_unit : null,\n                            rules: [{\n                                required: true,\n                                message: REQUIRED_FIELD_MESSAGE\n                            }]\n                        })(\n                            <Select>\n                                {that.state.drugUnitList.map((option) => (\n<Select.Option\n  value={option.id}\n>{option.name}\n</Select.Option>\n))}\n                            </Select>\n                        )}\n                        <a onClick={() => that.setFormParams('drugUnit', INPUT_FIELD)}>Add New Medicine Unit</a>\n</Form.Item>\n)}\n                <Form.Item key=\"instructions\" {...formItemLayout} label=\"Instructions\">\n                    {getFieldDecorator(\"instructions\", {\n                        initialValue: that.state.editPrescreption ? that.state.editPrescreption.instructions : null\n                    })(\n                        <Input />\n                    )}\n                </Form.Item>\n                <Form.Item {...formItemLayout}>\n                    <Button onClick={() => this.handleSubmit(false)}>Save Medicine</Button>\n                    &nbsp;&nbsp;&nbsp;\n                    <Button onClick={() => this.handleSubmit(true)} type=\"primary\">Save & Add to Inventory</Button>\n                    &nbsp;&nbsp;&nbsp;\n                    {that.props.history ? (\n                        <Button onClick={() => that.props.history.goBack()}>\n                            Cancel\n                        </Button>\n                      ) : null}\n                </Form.Item>\n            </Form>\n</Card>\n)\n    }\n}\n\nexport default Form.create()(AddorEditPrescriptionForm);\n","import React from \"react\";\nimport {Button, Card, Divider, Form, Icon, Popconfirm, Row, Table} from \"antd\";\nimport {Link, Redirect, Route, Switch} from \"react-router-dom\";\nimport {DRUG_CATALOG, INVENTORY_ITEM_API,} from \"../../../../constants/api\";\nimport {getAPI, interpolate, postAPI} from \"../../../../utils/common\";\nimport AddPrescription from \"./AddPrescription\";\nimport {DRUG} from \"../../../../constants/hardData\";\nimport AddorEditPrescriptionForm from \"./AddorEditPrescriptionForm\";\nimport InfiniteFeedLoaderButton from \"../../../common/InfiniteFeedLoaderButton\";\nimport CustomizedTable from \"../../../common/CustomizedTable\";\n\nclass Prescriptions extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            catalog: null,\n            editCatalog: {},\n            loading: true,\n            loadMorePrescriptions: null,\n        }\n        this.loadData = this.loadData.bind(this);\n        this.deleteObject = this.deleteObject.bind(this);\n        this.loadInitialData = this.loadInitialData.bind(this);\n    }\n\n    componentDidMount() {\n        this.loadData();\n    }\n\n    loadData() {\n        const that = this;\n        const successFn = function (data) {\n            console.log(\"get table\");\n            that.setState({\n                catalog: data.results,\n                loadMorePrescriptions: data.next,\n                loading: false\n            })\n        };\n        const errorFn = function () {\n            that.setState({\n                loading: false\n            })\n        };\n        getAPI(INVENTORY_ITEM_API, successFn, errorFn, {\n            practice: this.props.active_practiceId,\n            item_type: DRUG,\n            maintain_inventory: false,\n            page: that.state.loadMorePrescriptions || 1\n        });\n    }\n\n    loadInitialData() {\n        const that = this;\n        this.setState({\n            loadMorePrescriptions: null\n        }, function () {\n            that.loadData();\n        })\n    }\n\n    deleteObject(record) {\n        const that = this;\n        const reqData = record;\n        reqData.is_active = false;\n        const successFn = function (data) {\n            that.loadData();\n        }\n        const errorFn = function () {\n        }\n        postAPI(INVENTORY_ITEM_API, reqData, successFn, errorFn);\n    }\n\n    editCatalog(record) {\n        this.setState({\n            editCatalog: record,\n            loading: false\n        });\n        this.props.history.push('/settings/prescriptions/edit')\n    }\n\n    render() {\n        const that = this;\n        const columns = [{\n            title: 'Name',\n            dataIndex: 'name',\n            key: 'code',\n        }, {\n            title: 'Dosage',\n            dataIndex: 'strength',\n            key: 'strength',\n            render: (strength, record) => <span>{strength}&nbsp;{record.stength_unit}</span>\n        }, {\n            title: 'Medicine Instructions',\n            dataIndex: 'instructions',\n            key: 'instructions',\n        }, {\n            title: 'Action',\n            key: 'action',\n            render: (text, record) => (\n                <span>\n                    <a onClick={() => this.editCatalog(record)}>\n                Edit</a>\n                <Divider type=\"vertical\" />\n                  <Popconfirm\n                    title=\"Are you sure delete this prescription?\"\n                    onConfirm={() => that.deleteObject(record)}\n                    okText=\"Yes\"\n                    cancelText=\"No\"\n                  >\n                      <a>Delete</a>\n                  </Popconfirm>\n                </span>\n            ),\n        }];\n        return (\n<Row>\n            <Switch>\n                <Route\n                  exact\n                  path=\"/settings/prescriptions/add\"\n                  render={() => <AddorEditPrescriptionForm {...this.props} loadData={this.loadInitialData} title=\"Add Prescription\" />}\n                />\n                <Route\n                  exact\n                  path=\"/settings/prescriptions/edit\"\n                  render={(route) => (this.state.editCatalog.id ? (\n<AddorEditPrescriptionForm\n  {...this.state}\n  title=\"Edit Prescription\"\n  loadData={this.loadInitialData}\n  {...this.props}\n  {...route}\n/>\n) :\n                           <Redirect to=\"/settings/prescriptions/\" />)}\n                />\n                <Route>\n                    <div>\n                        <h2>All presciptions\n                            <Link to=\"/settings/prescriptions/add\">\n                                <Button type=\"primary\" style={{float: 'right'}}>\n                                    <Icon type=\"plus\" />&nbsp;Add\n                                </Button>\n                            </Link>\n                        </h2>\n                        <Card>\n                            <CustomizedTable\n                              loading={this.state.loading}\n                              columns={columns}\n                              dataSource={this.state.catalog}\n                              pagination={false}\n                            />\n                        </Card>\n                        <InfiniteFeedLoaderButton\n                          loaderFunction={this.loadData}\n                          loading={this.state.loading}\n                          hidden={!this.state.loadMorePrescriptions}\n                        />\n                    </div>\n                </Route>\n            </Switch>\n</Row>\n)\n    }\n}\n\nexport default Prescriptions;\n","import React from \"react\";\nimport {Form, Card, message} from \"antd\";\nimport {Redirect, Route} from 'react-router-dom'\nimport DynamicFieldsForm from \"../../../common/DynamicFieldsForm\";\nimport {\n    CHECKBOX_FIELD,\n    SUCCESS_MSG_TYPE,\n    INPUT_FIELD,\n    RADIO_FIELD,\n    NUMBER_FIELD,\n    SELECT_FIELD\n} from \"../../../../constants/dataKeys\";\nimport {DRUG_CATALOG, DRUG_TYPE_API, INVENTORY_ITEM_API, OFFERS, SINGLE_DRUG_CATALOG} from \"../../../../constants/api\";\nimport {getAPI, displayMessage, deleteAPI, interpolate} from \"../../../../utils/common\";\nimport {DRUG} from \"../../../../constants/hardData\";\nimport AddorEditPrescriptionForm from \"./AddorEditPrescriptionForm\";\n\n\nclass AddPrescription extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            redirect: false,\n            editPrescreption: this.props.editCatalog ? this.props.editCatalog : null,\n            drugTypeList: []\n\n        }\n        this.changeRedirect = this.changeRedirect.bind(this);\n        this.setFormParams = this.setFormParams.bind(this);\n        this.loadDrugType = this.loadDrugType.bind(this);\n    }\n\n    componentWillMount() {\n        this.loadDrugType();\n        const that = this;\n        if (this.props.match.params.drugId) {\n            const successFn = function (data) {\n                that.setState({\n                    editPrescreption: data\n                })\n            };\n            const errorFn = function () {\n            };\n            getAPI(interpolate(SINGLE_DRUG_CATALOG, [this.props.active_practiceId, this.props.match.params.drugId]), successFn, errorFn);\n        }\n    }\n\n    changeRedirect() {\n        const redirectVar = this.state.redirect;\n        this.setState({\n            redirect: !redirectVar,\n        });\n    }\n\n    loadDrugType() {\n        const that = this;\n        const successFn = function (data) {\n            that.setState({\n                drugTypeList: data\n            })\n        }\n        const errorFn = function () {\n        }\n        getAPI(DRUG_TYPE_API, successFn, errorFn);\n    }\n\n    setFormParams(type, value) {\n        this.setState({\n            [type]: value\n        })\n    }\n\n    render() {\n        const drugTypeOptions = []\n        if (this.state.drugType) {\n            this.state.drugType.forEach(function (drug) {\n                drugTypeOptions.push({label: (drug.name), value: drug.id});\n            })\n        }\n        const that = this;\n        const drugTypeField = (this.state.drugType && this.state.drugType == INPUT_FIELD ?\n            {\n                label: \"Drug Type\",\n                key: \"drug_type_extra\",\n                required: true,\n                initialValue: this.state.editPrescreption ? this.state.editPrescreption.drug_type_extra : null,\n                type: INPUT_FIELD,\n                follow: <a onClick={() => that.setFormParams('drugType', SELECT_FIELD)}>Choose Drug Type</a>\n            } : {\n                label: \"Drug Type\",\n                key: \"drug_type\",\n                required: true,\n                initialValue: this.state.editPrescreption ? this.state.editPrescreption.drug_type : null,\n                type: SELECT_FIELD,\n                options: that.state.drugTypeList.map(drug => ({label: drug.name, value: drug.id})),\n                follow: <a onClick={() => that.setFormParams('drugType', INPUT_FIELD)}>Add New Drug Type</a>\n            });\n        const drugUnitField = (this.state.drugUnit && this.state.drugUnit == INPUT_FIELD ?\n            {\n                label: \"Dosage Unit\",\n                key: \"unit_type_extra\",\n                required: true,\n                initialValue: this.state.editPrescreption ? this.state.editPrescreption.unit_type_extra : null,\n                type: INPUT_FIELD,\n                follow: <a onClick={() => that.setFormParams('drugUnit', SELECT_FIELD)}>Choose Drug Type</a>\n            } : {\n                label: \"Dosage Unit\",\n                key: \"stength_unit\",\n                required: true,\n                initialValue: this.state.editPrescreption ? this.state.editPrescreption.stength_unit : null,\n                type: SELECT_FIELD,\n                options: that.state.drugTypeList.map(drug => ({label: drug.name, value: drug.id})),\n                follow: <a onClick={() => that.setFormParams('drugUnit', INPUT_FIELD)}>Add New Drug Unit</a>\n            });\n        const fields = [{\n            label: \"Name\",\n            key: \"name\",\n            initialValue: this.state.editPrescreption ? this.state.editPrescreption.name : null,\n            required: true,\n            type: INPUT_FIELD\n        }, drugTypeField, {\n            label: \"Dosage\",\n            key: \"strength\",\n            required: true,\n            initialValue: this.state.editPrescreption ? this.state.editPrescreption.strength : null,\n            type: NUMBER_FIELD\n        }, drugUnitField, {\n            label: \"Instructions \",\n            key: \"instructions\",\n            required: true,\n            initialValue: this.state.editPrescreption ? this.state.editPrescreption.instructions : null,\n            type: INPUT_FIELD\n        },];\n        // const formProp={\n        //   successFn:function(data){\n        //     console.log(data);\n        //     displayMessage(SUCCESS_MSG_TYPE, \"success\")\n        //\n        //   },\n        //   errorFn:function(){\n        //\n        //   },\n        //   action: interpolate(OFFERS,[this.props.active_practiceId]),\n        //   method: \"post\",\n        // }\n        const formProp = {\n            successFn (data) {\n                // console.log(data);\n                displayMessage(SUCCESS_MSG_TYPE, \"success\")\n                that.props.loadData();\n                if (that.props.history){\n                    that.props.history.replace(\"/settings/prescriptions\");\n                }\n            },\n            errorFn () {\n\n            },\n            // onFieldsDataChange:\n            // },\n            action: INVENTORY_ITEM_API,\n            method: \"post\",\n        }\n        const TestFormLayout = Form.create({\n            onValuesChange (props, changedValues, allValues) {\n                // console.log(changedValues, allValues);\n                that.setState(function (prevState) {\n                    return {editPrescreption: {...prevState.editPrescreption, ...changedValues}}\n                });\n            }\n        })(DynamicFieldsForm);\n        const defaultValues = [{key: 'practice', value: this.props.active_practiceId}, {key: 'item_type', value: DRUG}];\n        if (this.state.editPrescreption) {\n            defaultValues.push({key: 'id', value: this.state.editPrescreption.id})\n        }\n        return (\n<div>\n            <Card>\n                <Route\n                  exact\n                  path=\"/settings/prescriptions/add\"\n                  render={() => (\n<AddorEditPrescriptionForm\n  key=\"Add Prescriptions\"\n  title=\"Add Prescriptions\"\n  formProp={formProp}\n  changeRedirect={this.changeRedirect}\n  fields={fields}\n/>\n)}\n                />\n                <Route\n                  exact\n                  path=\"/settings/prescriptions/edit\"\n                  render={(route) => this.state.editPrescreption && this.state.editPrescreption.id ? (\n                           <TestFormLayout\n                             key=\"Edit Prescriptions\"\n                             title=\"Edit Prescriptions\"\n                             defaultValues={defaultValues}\n                             formProp={formProp}\n                             changeRedirect={this.changeRedirect}\n                             fields={fields}\n                           />\n                         ) : null}\n                />\n\n                {this.state.redirect && <Redirect to='/settings/prescriptions' />}\n\n            </Card>\n</div>\n)\n    }\n}\n\nexport default AddPrescription;\n","import React from \"react\";\nimport {Button, Modal, Card, Form, Icon, Row, Table, Divider, Popconfirm} from \"antd\";\nimport {Link} from \"react-router-dom\";\nimport DynamicFieldsForm from \"../../../common/DynamicFieldsForm\";\nimport {\n    SUCCESS_MSG_TYPE,\n    CHECKBOX_FIELD,\n    INPUT_FIELD,\n    RADIO_FIELD,\n    NUMBER_FIELD,\n    SELECT_FIELD\n} from \"../../../../constants/dataKeys\";\nimport {EXPENSE_TYPE} from \"../../../../constants/api\"\nimport {getAPI, displayMessage, interpolate, postAPI} from \"../../../../utils/common\";\nimport CustomizedTable from \"../../../common/CustomizedTable\";\n\nclass ExpensesTypes extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            redirect: false,\n            visible: false,\n            expenses: null,\n            loading: true,\n            showDeleted: false,\n            deletedLoading: false,\n            deletedExpenses: []\n        };\n        this.loadData = this.loadData.bind(this);\n        this.deleteObject = this.deleteObject.bind(this);\n\n    }\n\n    componentDidMount() {\n        this.loadData();\n    }\n\n    loadData(deleted = false) {\n        const that = this;\n        const successFn = function (data) {\n            console.log(\"get table\");\n            if (deleted) {\n                that.setState({\n                    deletedExpenses: data,\n                    deletedLoading: false\n                })\n            } else {\n                that.setState({\n                    expenses: data,\n                    loading: false\n                })\n            }\n        };\n        const errorFn = function () {\n        };\n        if (deleted) {\n            getAPI(interpolate(EXPENSE_TYPE, [this.props.active_practiceId]), successFn, errorFn, {deleted: true});\n        } else {\n            getAPI(interpolate(EXPENSE_TYPE, [this.props.active_practiceId]), successFn, errorFn);\n        }\n    }\n\n    changeRedirect() {\n        const redirectVar = this.state.redirect;\n        this.setState({\n            redirect: !redirectVar,\n        });\n    }\n\n    editTax(value) {\n        this.setState({\n            editingId: value.id,\n            editingName: value.name,\n            editingValue: value.tax_value,\n            loading: false,\n            visible: true,\n        })\n    }\n\n    handleCancel = () => {\n        this.setState({visible: false});\n    }\n\n    deleteObject(record, type) {\n        const that = this;\n        const reqData = record;\n        reqData.is_active = type;\n        const successFn = function (data) {\n            that.loadData();\n            if (that.state.showDeleted) {\n                that.loadData(true);\n            }\n        }\n        const errorFn = function () {\n        };\n        postAPI(interpolate(EXPENSE_TYPE, [this.props.active_practiceId]), reqData, successFn, errorFn)\n    }\n\n    showDeletedExpenses = () => {\n        this.setState({\n            showDeleted: true,\n            deletedLoading: true\n        });\n        this.loadData(true)\n    }\n\n    render() {\n        const that = this;\n        const columns = [{\n            title: 'Expense Type',\n            dataIndex: 'name',\n            key: 'name',\n        }, {\n            title: 'Action',\n            key: 'action',\n            render: (text, record) => (\n                record.is_active ? (\n<span>\n\n              <a onClick={() => this.editTax(record)}>  Edit</a>\n                <Divider type=\"vertical\" />\n                <Popconfirm\n                  title=\"Are you sure to delete this?\"\n                  onConfirm={() => that.deleteObject(record, false)}\n                  okText=\"Yes\"\n                  cancelText=\"No\"\n                >\n                  <a>Delete</a>\n                </Popconfirm>\n</span>\n) : (\n<span>\n                    <Popconfirm\n                      title=\"Are you sure to show this?\"\n                      onConfirm={() => that.deleteObject(record, true)}\n                      okText=\"Yes\"\n                      cancelText=\"No\"\n                    >\n                  <a>Show</a>\n                    </Popconfirm>\n</span>\n)\n            ),\n        }];\n        const fields = [{\n            label: \"Expense Type\",\n            key: \"name\",\n            placeholder: 'Expense Type',\n            required: true,\n            type: INPUT_FIELD\n        },];\n        const editfields = [{\n            label: \"Expense Type\",\n            key: \"name\",\n            required: true,\n            initialValue: this.state.editingName,\n            type: INPUT_FIELD\n        },];\n        const formProp = {\n            successFn (data) {\n                that.handleCancel();\n                that.loadData();\n                displayMessage(SUCCESS_MSG_TYPE, \"success\")\n            },\n            errorFn () {\n\n            },\n            action: interpolate(EXPENSE_TYPE, [this.props.active_practiceId]),\n            method: \"post\",\n        }\n        const defaultValues = [{\"key\": \"practice\", \"value\": this.props.active_practiceId}];\n        const editFormDefaultValues = [{\"key\": \"practice\", \"value\": this.props.active_practiceId}, {\n            \"key\": \"id\",\n            \"value\": this.state.editingId\n        }];\n        const TestFormLayout = Form.create()(DynamicFieldsForm);\n        return (\n<div>\n            <h2>Expense Types</h2>\n            <Card>\n                <TestFormLayout defaultValues={defaultValues} formProp={formProp} fields={fields} />\n                <Divider />\n                <CustomizedTable loading={this.state.loading} columns={columns} dataSource={this.state.expenses} />\n                {this.state.showDeleted ? (\n                    <div>\n                        <CustomizedTable\n                          loading={this.state.deletedLoading}\n                          columns={columns}\n                          dataSource={this.state.deletedExpenses}\n                        />\n                    </div>\n                  ) :\n                    <h4><a onClick={() => this.showDeletedExpenses()}>Show Deleted Expense Types</a></h4>}\n            </Card>\n            <Modal\n              title=\"Edit Expense Type\"\n              visible={this.state.visible}\n              footer={null}\n              onCancel={this.handleCancel}\n            >\n                <TestFormLayout\n                  defaultValues={editFormDefaultValues}\n                  formProp={formProp}\n                  fields={editfields}\n                />\n                <Button key=\"back\" onClick={this.handleCancel}>Return</Button>\n            </Modal>\n</div>\n)\n    }\n}\n\nexport default ExpensesTypes;\n","import React from \"react\";\nimport {Button, Modal, Card, Form, Icon, Row, Table, Divider, Popconfirm} from \"antd\";\nimport {Link} from \"react-router-dom\";\nimport DynamicFieldsForm from \"../../../common/DynamicFieldsForm\";\nimport {\n    SUCCESS_MSG_TYPE,\n    CHECKBOX_FIELD,\n    INPUT_FIELD,\n    RADIO_FIELD,\n    NUMBER_FIELD,\n    SELECT_FIELD\n} from \"../../../../constants/dataKeys\";\nimport {MEDICAL_HISTORY} from \"../../../../constants/api\"\nimport {getAPI, displayMessage, interpolate, postAPI} from \"../../../../utils/common\";\nimport CustomizedTable from \"../../../common/CustomizedTable\";\n\nclass MedicalHistory extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            redirect: false,\n            visible: false,\n            history: null,\n            loading: true,\n            deletedHistory: [],\n            showDeleted: false,\n            deletedLoading: false\n        };\n        this.loadData = this.loadData.bind(this);\n        this.deleteObject = this.deleteObject.bind(this);\n\n    }\n\n    componentDidMount() {\n        this.loadData();\n    }\n\n    loadData(deleted = false) {\n        const that = this;\n        const successFn = function (data) {\n            console.log(\"get table\");\n            if (deleted) {\n                that.setState({\n                    deletedHistory: data,\n                    deletedLoading: false\n                })\n            } else {\n                that.setState({\n                    history: data,\n                    loading: false\n                })\n            }\n        };\n        const errorFn = function () {\n            that.setState({\n                loading: false\n            })\n        };\n        if (deleted) {\n            getAPI(interpolate(MEDICAL_HISTORY, [this.props.active_practiceId]), successFn, errorFn, {deleted: true});\n        } else {\n            getAPI(interpolate(MEDICAL_HISTORY, [this.props.active_practiceId]), successFn, errorFn);\n        }\n    }\n\n    changeRedirect() {\n        const redirectVar = this.state.redirect;\n        this.setState({\n            redirect: !redirectVar,\n        });\n    }\n\n    editTax(value) {\n        this.setState({\n            editingId: value.id,\n            editingName: value.name,\n            visible: true,\n            loading: false\n        })\n    }\n\n    handleCancel = () => {\n        this.setState({visible: false});\n    }\n\n    deleteObject(record,type) {\n        const that = this;\n        const reqData = record;\n        reqData.is_active = type;\n        const successFn = function (data) {\n            that.loadData();\n            if (that.state.showDeleted) {\n                that.loadData(true);\n            }\n        }\n        const errorFn = function () {\n        };\n        postAPI(interpolate(MEDICAL_HISTORY, [this.props.active_practiceId]), reqData, successFn, errorFn)\n    }\n\n    showDeletedMedicalHistory = () => {\n        this.setState({\n            showDeleted: true,\n            deletedLoading: true\n        });\n        this.loadData(true)\n    }\n\n    render() {\n        const that = this;\n        const columns = [{\n            title: 'Medical History',\n            dataIndex: 'name',\n            key: 'name',\n        }, {\n            title: 'Action',\n            key: 'action',\n            render: (text, record) => (\n                record.is_active?(\n<span>\n\n              <a onClick={() => this.editTax(record)}>  Edit</a>\n                <Divider type=\"vertical\" />\n                <Popconfirm\n                  title=\"Are you sure to delete this?\"\n                  onConfirm={() => that.deleteObject(record,false)}\n                  okText=\"Yes\"\n                  cancelText=\"No\"\n                >\n                  <a>Delete</a>\n                </Popconfirm>\n</span>\n) : (\n<span>\n                    <Popconfirm\n                      title=\"Are you sure to show this?\"\n                      onConfirm={() => that.deleteObject(record,true)}\n                      okText=\"Yes\"\n                      cancelText=\"No\"\n                    >\n                  <a>Show</a>\n                    </Popconfirm>\n</span>\n)\n            ),\n        }];\n        const fields = [{\n            label: \"Medical History\",\n            key: \"name\",\n            required: true,\n            type: INPUT_FIELD\n        },];\n        const editfields = [{\n            label: \"Medical history \",\n            key: \"name\",\n            required: true,\n            initialValue: this.state.editingName,\n            type: INPUT_FIELD\n        },];\n        const formProp = {\n            successFn (data) {\n                that.handleCancel();\n                that.loadData();\n                console.log(data);\n                console.log(\"sucess\");\n                displayMessage(SUCCESS_MSG_TYPE, \"success\")\n            },\n            errorFn () {\n\n            },\n            action: interpolate(MEDICAL_HISTORY, [this.props.active_practiceId]),\n            method: \"post\",\n        }\n        const defaultValues = [];\n        const editFormDefaultValues = [{\"key\": \"id\", \"value\": this.state.editingId}];\n        const TestFormLayout = Form.create()(DynamicFieldsForm);\n        return (\n<div>\n            <h2>Medical History</h2>\n            <Card>\n                <TestFormLayout defaultValues={defaultValues} formProp={formProp} fields={fields} />\n                <Divider />\n                <CustomizedTable loading={this.state.loading} columns={columns} dataSource={this.state.history} />\n                {this.state.showDeleted ? (\n                    <div>\n                        <CustomizedTable\n                          loading={this.state.deletedLoading}\n                          columns={columns}\n                          dataSource={this.state.deletedHistory}\n                        />\n                    </div>\n                  ) :\n                    <h4><a onClick={() => this.showDeletedMedicalHistory()}>Show Deleted Medical History</a></h4>}\n            </Card>\n            <Modal\n              title=\"Basic Modal\"\n              visible={this.state.visible}\n              footer={null}\n            >\n                <TestFormLayout\n                  title=\"Change history\"\n                  defaultValues={editFormDefaultValues}\n                  formProp={formProp}\n                  fields={editfields}\n                />\n                <Button key=\"back\" onClick={this.handleCancel}>Return</Button>,\n\n            </Modal>\n</div>\n)\n    }\n}\n\nexport default MedicalHistory;\n","import React from \"react\";\nimport {Button, Modal, Card, Form, Icon, Row, Table, Divider, Checkbox, InputNumber, Col, TimePicker} from \"antd\";\nimport {Link} from \"react-router-dom\";\nimport moment from \"moment/moment\";\nimport {\n    SUCCESS_MSG_TYPE,\n} from \"../../../../constants/dataKeys\";\nimport {CALENDER_SETTINGS} from \"../../../../constants/api\"\nimport {getAPI, displayMessage, interpolate, postAPI} from \"../../../../utils/common\";\nimport {REQUIRED_FIELD_MESSAGE} from \"../../../../constants/messages\";\n\nconst dayKeys = ['monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday', 'sunday'];\n\nclass PracticeTimings extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            redirect: false,\n            visible: false,\n            timings: null,\n            loading: true,\n            visting_hour_same_week: true,\n            openPracticeDays: {},\n            twoSessions: {}\n        };\n        this.loadData = this.loadData.bind(this);\n\n    }\n\n    componentDidMount() {\n        this.loadData();\n    }\n\n    loadData() {\n        const that = this;\n        const successFn = function (data) {\n            let visting_hour_same_week = true;\n            const openPracticeDays = {};\n            const twoSessions = {};\n            if (data.length && data[0]) {\n                const dataObject = data[0]\n                dayKeys.forEach(function (dayKey) {\n                    openPracticeDays[dayKey] = dataObject[dayKey];\n                    twoSessions[`is_two_sessions_${dayKey}`] = dataObject[`is_two_sessions_${dayKey}`];\n                });\n                visting_hour_same_week = dataObject.visting_hour_same_week;\n                twoSessions.is_two_sessions = dataObject.is_two_sessions;\n            }\n            that.setState({\n                timings: data[0],\n                visting_hour_same_week,\n                openPracticeDays,\n                twoSessions,\n                loading: false\n            })\n        };\n        const errorFn = function () {\n            that.setState({\n                timings: {},\n                loading: false\n            })\n        };\n        getAPI(interpolate(CALENDER_SETTINGS, [this.props.active_practiceId]), successFn, errorFn);\n    }\n\n    changeRedirect() {\n        const redirectVar = this.state.redirect;\n        this.setState({\n            redirect: !redirectVar,\n        });\n    }\n\n    changeVistingHourSameWeek = (e) => {\n        console.log(e.target)\n        this.setState({\n            [e.target.id]: e.target.checked\n        })\n    }\n\n    changeOpenPracticeDays = (type, value) => {\n        this.setState(function (prevState) {\n            return {openPracticeDays: {...prevState.openPracticeDays, [type]: value}}\n        })\n    }\n\n    changePracticeTwoSessions = (type, value) => {\n        this.setState(function (prevState) {\n            return {twoSessions: {...prevState.twoSessions, [type]: value}}\n        })\n    }\n\n    handleSubmit = (e) => {\n        const that = this;\n        e.preventDefault();\n        this.props.form.validateFieldsAndScroll((err, values) => {\n                if (!err) {\n                    console.log(values);\n                    const reqData = {...values};\n                    if (reqData.first_start_time) {\n                        reqData.first_start_time = moment(reqData.first_start_time).format('HH:mm');\n                    }\n                    if (reqData.first_end_time) {\n                        reqData.first_end_time = moment(reqData.first_end_time).format('HH:mm');\n                    }\n                    if (reqData.second_start_time) {\n                        reqData.second_start_time = moment(reqData.second_start_time).format('HH:mm');\n                    }\n                    if (reqData.second_end_time) {\n                        reqData.second_end_time = moment(reqData.second_end_time).format('HH:mm');\n                    }\n                    dayKeys.forEach(function (dayKey) {\n                        if (reqData[`first_start_time_${dayKey}`]) {\n                            reqData[`first_start_time_${dayKey}`] = moment(reqData[`first_start_time_${dayKey}`]).format('HH:mm');\n                        }\n                        if (reqData[`first_end_time_${dayKey}`]) {\n                            reqData[`first_end_time_${dayKey}`] = moment(reqData[`first_end_time_${dayKey}`]).format('HH:mm');\n                        }\n                        if (reqData[`second_start_time_${dayKey}`]) {\n                            reqData[`second_start_time_${dayKey}`] = moment(reqData[`second_start_time_${dayKey}`]).format('HH:mm');\n                        }\n                        if (reqData[`second_end_time_${dayKey}`]) {\n                            reqData[`second_end_time_${dayKey}`] = moment(reqData[`second_end_time_${dayKey}`]).format('HH:mm');\n                        }\n                    });\n                    if (that.state.timings) {\n                        reqData.id = that.state.timings.id\n                    }\n                    const successFn = function (data) {\n                        that.loadData();\n                        displayMessage(SUCCESS_MSG_TYPE, \"Calendar Timings Saved successfully!!\");\n                    };\n                    const errorFn = function () {\n\n                    };\n                    postAPI(interpolate(CALENDER_SETTINGS, [this.props.active_practiceId]), reqData, successFn, errorFn);\n                }\n            }\n        )\n    }\n\n    render() {\n\n        const that = this;\n        const formItemLayout = (this.props.formLayout ? this.props.formLayout : {\n            labelCol: {span: 12},\n            wrapperCol: {span: 12},\n        });\n        const {getFieldDecorator} = this.props.form;\n        return (\n<div>\n            <Form onSubmit={this.handleSubmit}>\n                <Form.Item key=\"today_first_day\" {...formItemLayout}>\n                    {getFieldDecorator(\"today_first_day\", {\n                        valuePropName: 'checked',\n                        initialValue: that.state.timings ? that.state.timings.today_first_day : false\n                    }, {\n                        rules: [{message: REQUIRED_FIELD_MESSAGE}],\n                    })(\n                        <Checkbox>Always show today as first day on my calendar\n                        </Checkbox>\n                    )}\n                </Form.Item>\n                <Form.Item\n                  key=\"calendar_slot\"\n                  {...formItemLayout}\n                  label=\"Show Calendar Slots of\"\n                >\n                    {getFieldDecorator(\"calendar_slot\", {\n                        initialValue: that.state.timings ? that.state.timings.calendar_slot : null,\n                        rules: [{\n                            required: true,\n                            message: REQUIRED_FIELD_MESSAGE\n                        }]\n                    })(\n                        <InputNumber min={5} />\n                    )}\n                    <span className=\"ant-form-text\">mins.</span>\n                </Form.Item>\n                <Form.Item key=\"visting_hour_same_week\" {...formItemLayout}>\n                    {getFieldDecorator(\"visting_hour_same_week\", {\n                        valuePropName: 'checked',\n                        initialValue: that.state.timings ? that.state.timings.visting_hour_same_week : false\n                    }, {\n                        rules: [{message: REQUIRED_FIELD_MESSAGE}],\n                    })(\n                        <Checkbox onChange={this.changeVistingHourSameWeek}>\n                            Visiting hours are  same for all working days in a week\n                        </Checkbox>\n                    )}\n                </Form.Item>\n                <Divider style={{margin: 4}} />\n                {this.state.visting_hour_same_week ? (\n                    <div>\n                        <Row>\n                            <Col span={4} />\n                            <Col span={18}>\n                                <Form.Item key=\"is_two_sessions\" {...formItemLayout}>\n                                    {getFieldDecorator(\"is_two_sessions\", {\n                                        valuePropName: 'checked',\n                                        initialValue: that.state.timings ? that.state.timings.is_two_sessions || that.state.twoSessions.is_two_sessions : false\n                                    }, {\n                                        rules: [{message: REQUIRED_FIELD_MESSAGE}],\n                                    })(\n                                        <Checkbox\n                                          onChange={(e) => this.changePracticeTwoSessions(\"is_two_sessions\", e.target.checked)}\n                                        >\n                                            Practice operates in two sessions.\n                                        </Checkbox>\n                                    )}\n                                </Form.Item>\n                                <Row gutter={16}>\n                                    <Col span={12}>\n                                        <Form.Item\n                                          key=\"first_start_time\"\n                                          label=\"Practice Starts At\"\n                                          {...formItemLayout}\n                                        >\n                                            {getFieldDecorator(\"first_start_time\", {\n                                                initialValue: that.state.timings && that.state.timings.first_start_time ? moment(that.state.timings.first_start_time, \"HH:mm\") : null,\n                                                rules: [{required: true, message: REQUIRED_FIELD_MESSAGE}],\n                                            })(\n                                                <TimePicker format=\"HH:mm\" allowClear={false} />\n                                            )}\n                                        </Form.Item>\n                                    </Col>\n                                    {that.state.twoSessions.is_two_sessions ? (\n<div>\n                                        <Col span={12}>\n                                            <Form.Item\n                                              key=\"first_end_time\"\n                                              label=\"Lunch At\"\n                                              {...formItemLayout}\n                                            >\n                                                {getFieldDecorator(\"first_end_time\", {\n                                                    initialValue: that.state.timings && that.state.timings.first_end_time ? moment(that.state.timings.first_end_time, \"HH:mm\") : null,\n                                                    rules: [{required: true, message: REQUIRED_FIELD_MESSAGE}],\n                                                })(\n                                                    <TimePicker format=\"HH:mm\" allowClear={false} />\n                                                )}\n                                            </Form.Item>\n                                        </Col>\n                                        <Col span={12}>\n                                            <Form.Item\n                                              key=\"second_start_time\"\n                                              label=\"Resume At\"\n                                              {...formItemLayout}\n                                            >\n                                                {getFieldDecorator(\"second_start_time\", {\n                                                    initialValue: that.state.timings && that.state.timings.second_start_time ? moment(that.state.timings.second_start_time, \"HH:mm\") : null,\n                                                    rules: [{required: true, message: REQUIRED_FIELD_MESSAGE}],\n                                                })(\n                                                    <TimePicker format=\"HH:mm\" allowClear={false} />\n                                                )}\n                                            </Form.Item>\n                                        </Col>\n</div>\n) : null}\n\n                                    <Col span={12}>\n                                        <Form.Item\n                                          key=\"second_end_time\"\n                                          label=\"Practice Ends At\"\n                                          {...formItemLayout}\n                                        >\n                                            {getFieldDecorator(\"second_end_time\", {\n                                                initialValue: that.state.timings && that.state.timings.second_end_time ? moment(that.state.timings.second_end_time, \"HH:mm\") : null,\n                                                rules: [{required: true, message: REQUIRED_FIELD_MESSAGE}],\n                                            })(\n                                                <TimePicker format=\"HH:mm\" allowClear={false} />\n                                            )}\n                                        </Form.Item>\n                                    </Col>\n                                </Row>\n                            </Col>\n                        </Row>\n                        <Divider style={{margin: 4}} />\n                    </div>\n                  ) : dayKeys.map(dayKey => (\n<div key={dayKey}>\n                        <Row>\n                            <Col span={4}>\n                                <h4>{dayKey.replace(/^\\w/, c => c.toUpperCase())}</h4>\n                            </Col>\n\n                            <Col span={18}>\n                                <Form.Item key={`${dayKey}`} {...formItemLayout}>\n                                    {getFieldDecorator(`${dayKey}`, {\n                                        valuePropName: 'checked',\n                                        initialValue: that.state.timings ? that.state.timings[`${dayKey}`] || that.state.openPracticeDays[dayKey] : false\n                                    }, {\n                                        rules: [{message: REQUIRED_FIELD_MESSAGE}],\n                                    })(\n                                        <Checkbox\n                                          onChange={(e) => that.changeOpenPracticeDays(dayKey, e.target.checked)}\n                                        >\n                                            {`Practice is open on ${dayKey.replace(/^\\w/, c => c.toUpperCase())}`}\n                                        </Checkbox>\n                                    )}\n                                </Form.Item>\n                                {that.state.openPracticeDays[dayKey] ? (\n<div>\n                                        <Form.Item key={`is_two_sessions_${dayKey}`} {...formItemLayout}>\n                                            {getFieldDecorator(`is_two_sessions_${dayKey}`, {\n                                                valuePropName: 'checked',\n                                                initialValue: that.state.timings ? that.state.timings[`is_two_sessions_${dayKey}`] || that.state.twoSessions[`is_two_sessions_${dayKey}`] : false\n                                            }, {\n                                                rules: [{message: REQUIRED_FIELD_MESSAGE}],\n                                            })(\n                                                <Checkbox\n                                                  onChange={(e) => this.changePracticeTwoSessions(`is_two_sessions_${dayKey}`, e.target.checked)}\n                                                >\n                                                    Practice operates in two sessions.\n                                                </Checkbox>\n                                            )}\n                                        </Form.Item>\n                                        <Row gutter={16}>\n                                            <Col span={12}>\n                                                <Form.Item\n                                                  key={`first_start_time_${dayKey}`}\n                                                  label=\"Practice Starts At\"\n                                                  {...formItemLayout}\n                                                >\n                                                    {getFieldDecorator(`first_start_time_${dayKey}`, {\n                                                        initialValue: that.state.timings && that.state.timings[`first_start_time_${dayKey}`] ? moment(that.state.timings[`first_start_time_${dayKey}`], \"HH:mm\") : null,\n                                                        rules: [{required: true, message: REQUIRED_FIELD_MESSAGE}],\n                                                    })(\n                                                        <TimePicker format=\"HH:mm\" allowClear={false} />\n                                                    )}\n                                                </Form.Item>\n                                            </Col>\n                                            {that.state.twoSessions[`is_two_sessions_${dayKey}`] ? (\n<div>\n                                                <Col span={12}>\n                                                    <Form.Item\n                                                      key={`first_end_time_${dayKey}`}\n                                                      label=\"Lunch At\"\n                                                      {...formItemLayout}\n                                                    >\n                                                        {getFieldDecorator(`first_end_time_${dayKey}`, {\n                                                            initialValue: that.state.timings && that.state.timings[`first_end_time_${dayKey}`] ? moment(that.state.timings[`first_end_time_${dayKey}`], \"HH:mm\") : null,\n                                                            rules: [{required: true, message: REQUIRED_FIELD_MESSAGE}],\n                                                        })(\n                                                            <TimePicker format=\"HH:mm\" allowClear={false} />\n                                                        )}\n                                                    </Form.Item>\n                                                </Col>\n                                                <Col span={12}>\n                                                    <Form.Item\n                                                      key={`second_start_time_${dayKey}`}\n                                                      label=\"Resume At\"\n                                                      {...formItemLayout}\n                                                    >\n                                                        {getFieldDecorator(`second_start_time_${dayKey}`, {\n                                                            initialValue: that.state.timings && that.state.timings[`second_start_time_${dayKey}`] ? moment(that.state.timings[`second_start_time_${dayKey}`], \"HH:mm\") : null,\n                                                            rules: [{required: true, message: REQUIRED_FIELD_MESSAGE}],\n                                                        })(\n                                                            <TimePicker format=\"HH:mm\" allowClear={false} />\n                                                        )}\n                                                    </Form.Item>\n                                                </Col>\n</div>\n) : null}\n                                            <Col span={12}>\n                                                <Form.Item\n                                                  key={`second_end_time_${dayKey}`}\n                                                  label=\"Practice Ends At\"\n                                                  {...formItemLayout}\n                                                >\n                                                    {getFieldDecorator(`second_end_time_${dayKey}`, {\n                                                        initialValue: that.state.timings && that.state.timings[`second_end_time_${dayKey}`] ? moment(that.state.timings[`second_end_time_${dayKey}`], \"HH:mm\") : null,\n                                                        rules: [{required: true, message: REQUIRED_FIELD_MESSAGE}],\n                                                    })(\n                                                        <TimePicker format=\"HH:mm\" allowClear={false} />\n                                                    )}\n                                                </Form.Item>\n                                            </Col>\n                                        </Row>\n</div>\n)\n                                    : null}\n                            </Col>\n                        </Row>\n                        <Divider style={{margin: 4}} />\n</div>\n))}\n                <Form.Item {...formItemLayout}>\n                    <Button loading={that.state.loading} type=\"primary\" htmlType=\"submit\" style={{margin: 5}}>\n                        Submit\n                    </Button>\n                    {that.props.history ? (\n                        <Button style={{margin: 5}} onClick={() => that.props.history.goBack()}>\n                            Cancel\n                        </Button>\n                      ) : null}\n                </Form.Item>\n            </Form>\n</div>\n)\n    }\n\n}\n\nexport default Form.create()(PracticeTimings);\n","import React from \"react\";\nimport {Button, Modal, Card, Form, Icon, Row, Table, Divider, Popconfirm, Tag} from \"antd\";\nimport {Link} from \"react-router-dom\";\nimport DynamicFieldsForm from \"../../../common/DynamicFieldsForm\";\nimport {\n    SUCCESS_MSG_TYPE,\n    CHECKBOX_FIELD,\n    INPUT_FIELD,\n    RADIO_FIELD,\n    NUMBER_FIELD,\n    SELECT_FIELD\n} from \"../../../../constants/dataKeys\";\nimport {APPOINTMENT_CATEGORIES} from \"../../../../constants/api\"\nimport {getAPI, displayMessage, interpolate, postAPI} from \"../../../../utils/common\";\nimport CustomizedTable from \"../../../common/CustomizedTable\";\nimport {hashCode, intToRGB} from \"../../../../utils/clinicUtils\";\n\nclass AppointmentCategories extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            redirect: false,\n            visible: false,\n            appointmentCategories: null,\n            loading: true\n        };\n        this.loadAppointmentCategories = this.loadAppointmentCategories.bind(this);\n        this.deleteObject = this.deleteObject.bind(this);\n\n    }\n\n    componentDidMount() {\n        this.loadAppointmentCategories();\n    }\n\n    loadAppointmentCategories() {\n        const that = this;\n        const successFn = function (data) {\n            that.setState(function (prevState) {\n                data.forEach(function (obj) {\n                    obj.color = intToRGB(hashCode(obj.name))\n                });\n                return {\n                    appointmentCategories: data,\n                    loading: false\n                }\n            })\n        }\n        const errorFn = function () {\n\n        }\n        getAPI(interpolate(APPOINTMENT_CATEGORIES, [this.props.active_practiceId]), successFn, errorFn)\n    }\n\n    changeRedirect() {\n        const redirectVar = this.state.redirect;\n        this.setState({\n            redirect: !redirectVar,\n        });\n    }\n\n    editCategory(value) {\n        this.setState({\n            editingId: value.id,\n            editingName: value.name,\n            visible: true,\n            loading: false\n        })\n    }\n\n    deleteObject(record) {\n        const that = this;\n        const reqData = record;\n        reqData.is_active = false;\n        const successFn = function (data) {\n            that.loadAppointmentCategories();\n        }\n        const errorFn = function () {\n        };\n        postAPI(interpolate(APPOINTMENT_CATEGORIES, [this.props.active_practiceId]), reqData, successFn, errorFn)\n    }\n\n    handleCancel = () => {\n        this.setState({visible: false});\n    }\n\n\n    render() {\n        const that = this;\n        const columns = [{\n            // title: 'Name',\n            dataIndex: 'color',\n            key: 'color',\n            render: (color) => <Tag color={`#${  color}`}>#</Tag>\n        }, {\n            title: 'Name',\n            dataIndex: 'name',\n            key: 'name',\n        }, {\n            title: 'Action',\n            key: 'action',\n            render: (text, record) => (\n                <span>\n              <a onClick={() => this.editCategory(record)}>  Edit</a>\n                <Divider type=\"vertical\" />\n                <Popconfirm\n                  title=\"Are you sure delete this?\"\n                  onConfirm={() => that.deleteObject(record)}\n                  okText=\"Yes\"\n                  cancelText=\"No\"\n                >\n                  <a>Delete</a>\n                </Popconfirm>\n                </span>\n            ),\n        }];\n        const fields = [{\n            label: \"Category name\",\n            key: \"name\",\n            placeholder:\"Category Name\",\n            required: true,\n            type: INPUT_FIELD\n        },];\n        const editfields = [{\n            label: \"Category name\",\n            key: \"name\",\n            required: true,\n            initialValue: this.state.editingName,\n            type: INPUT_FIELD\n        },];\n        const formProp = {\n            successFn (data) {\n                that.handleCancel();\n                that.loadAppointmentCategories();\n                console.log(data);\n                console.log(\"sucess\");\n                displayMessage(SUCCESS_MSG_TYPE, \"success\")\n            },\n            errorFn () {\n\n            },\n            action: interpolate(APPOINTMENT_CATEGORIES, [this.props.active_practiceId]),\n            method: \"post\",\n        }\n        const defaultValues = [];\n        const editFormDefaultValues = [{\"key\": \"id\", \"value\": this.state.editingId}];\n        const TestFormLayout = Form.create()(DynamicFieldsForm);\n        return (\n<div>\n            <TestFormLayout defaultValues={defaultValues} formProp={formProp} fields={fields} {...this.props} />\n            <Divider />\n            <CustomizedTable\n              loading={this.state.loading}\n              columns={columns}\n              dataSource={this.state.appointmentCategories}\n            />\n            <Modal\n              title=\"Edit Appointment Category\"\n              visible={this.state.visible}\n              footer={null}\n              onCancel={this.handleCancel}\n            >\n                <TestFormLayout defaultValues={editFormDefaultValues} formProp={formProp} fields={editfields} />\n                <Button key=\"back\" onClick={this.handleCancel}>Return</Button>,\n\n            </Modal>\n</div>\n)\n    }\n}\n\nexport default AppointmentCategories;\n","import React from \"react\";\nimport {Form, Button, Card, Icon, Tabs, Divider, Tag, Row, Table} from \"antd\";\nimport {Link} from \"react-router-dom\";\nimport DynamicFieldsForm from \"../../../common/DynamicFieldsForm\";\nimport {CHECKBOX_FIELD, INPUT_FIELD, RADIO_FIELD, SELECT_FIELD} from \"../../../../constants/dataKeys\";\nimport PracticeTimings from \"./PracticeTimings\";\n// import CancelledInvoice from \"./CancelledInvoice\";\nimport AppointmentCategories from \"./AppointmentCategories\";\nimport {TAXES} from \"../../../../constants/api\"\nimport {getAPI, interpolate} from \"../../../../utils/common\";\n\nconst {TabPane} = Tabs;\n\n\nclass CalendarSettings extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            loading: true,\n            defaultActiveKey: this.props.location.hash\n        }\n    }\n\n    render() {\n        return (\n<div>\n            <h2>Calendar Settings</h2>\n            <Row>\n                <Card>\n                    <Tabs defaultActiveKey={this.state.defaultActiveKey}>\n                        <TabPane tab={<span><Icon type=\"schedule\" />Calender Timings Settings</span>} key=\"#timings\">\n                            <PracticeTimings {...this.state} {...this.props} />\n                        </TabPane>\n                        <TabPane\n                          tab={<span><Icon type=\"reconciliation\" />Appointment Categories</span>}\n                          key=\"#categories\"\n                        >\n                            <AppointmentCategories {...this.props} />\n                        </TabPane>\n                    </Tabs>\n                </Card>\n            </Row>\n</div>\n)\n    }\n}\n\nexport default CalendarSettings;\n","import React from \"react\";\nimport {Divider, Icon, Layout, Menu} from 'antd';\nimport {Link} from 'react-router-dom';\n\n\nconst {Sider} = Layout;\n\nclass SettingSider extends React.Component {\n\n    render() {\n        return (\n<Sider\n  trigger={null}\n  collapsible\n  style={{overflow: 'auto', minHeight: '100vh', background: '#fff'}}\n>\n\n            <Menu mode=\"inline\" defaultSelectedKeys={['5']}>\n                <Menu.ItemGroup key=\"g1\" title={<Divider style={{margin: '0px'}}>Practice Settings</Divider>}>\n                    {this.props.activePracticePermissions.SettingsPracticeDetail ? (\n<Menu.Item key=\"5\">\n                        <Link to=\"/settings/clinics\">\n                            <Icon type=\"shop\" />Practice Details\n                        </Link>\n</Menu.Item>\n) : null}\n\n                    {this.props.activePracticePermissions.SettingsCommunincations ? (\n<Menu.Item key=\"7\">\n                        <Link to=\"/settings/communication-settings\">\n                            <Icon type=\"message\" />Communication\n                        </Link>\n</Menu.Item>\n) : null}\n                    {this.props.activePracticePermissions.SettingsCalendar ? (\n<Menu.Item key=\"17\">\n                        <Link to=\"/settings/calendarsettings#timings\">\n                            <Icon type=\"schedule\" />Calendar\n                        </Link>\n</Menu.Item>\n) : null}\n                    {this.props.activePracticePermissions.SettingsPracticeStaff ? (\n<Menu.Item key=\"6\">\n                        <Link to=\"/settings/clinics-staff\">\n                            <Icon type=\"team\" />Practice Staff\n                        </Link>\n</Menu.Item>\n) : null}\n                    {/* {this.props.activePracticePermissions.ZoomUser? */}\n                    {/*    <Menu.Item key={'35'}> */}\n                    {/*        <Link to=\"/settings/zoom-user\"> */}\n                    {/*            <Icon type={\"user\"}/> */}\n                    {/*            <span className=\"nav-text\">Zoom User</span> */}\n                    {/*        </Link> */}\n                    {/*    </Menu.Item>:null} */}\n\n                    {this.props.activePracticePermissions.SettingsAgents || this.props.allowAllPermissions? (\n                    <Menu.Item key=\"32\">\n                        <Link to=\"/settings/agents\">\n                            <Icon type=\"usergroup-add\" />\n                            <span className=\"nav-text\">Advisor</span>\n                        </Link>\n                    </Menu.Item>\n                  ):null}\n\n                    {this.props.activePracticePermissions.SettingsAgentRoles || this.props.allowAllPermissions? (\n                    <Menu.Item key=\"33\">\n                        <Link to=\"/settings/agent-roles\">\n                            <Icon type=\"apartment\" />\n                            <span className=\"nav-text\">Advisor Roles</span>\n                        </Link>\n                    </Menu.Item>\n                  ):null}\n\n                    {this.props.activePracticePermissions.SettingsProcedureCatalog ? (\n<Menu.Item key=\"8\">\n                        <Link to=\"/settings/procedures\">\n                            <Icon type=\"folder-open\" />Procedure\n                            Catalog\n                        </Link>\n</Menu.Item>\n) : null}\n                    {this.props.activePracticePermissions.SettingsBilling ? (\n<Menu.Item key=\"9\">\n                        <Link to=\"/settings/billing#taxcatalog\">\n                            <Icon type=\"audit\" />Billing\n                        </Link>\n</Menu.Item>\n) : null}\n                    {this.props.activePracticePermissions.SettingsLoyalty ? (\n<Menu.Item key=\"10\">\n                        <Link to=\"/settings/loyalty\">\n                            <Icon type=\"trophy\" />Loyalty\n                        </Link>\n</Menu.Item>\n) : null}\n\n\n\n                    {this.props.activePracticePermissions.SettingsMLMSettings ? (\n<Menu.Item key=\"30\">\n                        <Link to=\"/settings/mlm\">\n                            <Icon type=\"wallet\" />\n                            <span className=\"nav-text\">MLM</span>\n                        </Link>\n</Menu.Item>\n) : null}\n                    {/* <Menu.Item key=\"11\"><Link to=\"/settings/contacts\"> Contacts</Link></Menu.Item> */}\n                    {this.props.activePracticePermissions.SettingsEMR ? (\n<Menu.Item key=\"12\">\n                        <Link to=\"/settings/emr#complaints\">\n                            <Icon type=\"file-text\" /> EMR\n                        </Link>\n</Menu.Item>\n) : null}\n                    {this.props.activePracticePermissions.SettingsPrescriptions ? (\n<Menu.Item key=\"13\">\n                        <Link to=\"/settings/prescriptions\">\n                            <Icon type=\"file-text\" /> Prescriptions\n                        </Link>\n</Menu.Item>\n) : null}\n                    {this.props.activePracticePermissions.SettingsLabs ? (\n<Menu.Item key=\"14\">\n                        <Link to=\"/settings/labs\">\n                            <Icon type=\"experiment\" />Labs\n                        </Link>\n</Menu.Item>\n) : null}\n                    {this.props.activePracticePermissions.SettingsPrintouts ? (\n                        <Menu.Item key=\"18\">\n                            <Link to=\"/settings/printout\">\n                                <Icon type=\"printer\" /> Printout\n                            </Link>\n                        </Menu.Item>\n                      ) : null}\n                    {/* {this.props.activePracticePermissions.SettingsEmailPDFSettings ? */}\n                    {/*    <Menu.Item key=\"21\"> */}\n                    {/*        <Link to=\"/settings/mailpdfsettings\"> */}\n                    {/*            <Icon type=\"mail\"/> Email PDF Settings */}\n                    {/*        </Link> */}\n                    {/*    </Menu.Item> : null} */}\n                    {this.props.activePracticePermissions.SettingsMedicalHistory ? (\n<Menu.Item key=\"15\">\n                        <Link to=\"/settings/medical-history\">\n                            <Icon type=\"medicine-box\" /> Medical History\n                        </Link>\n</Menu.Item>\n) : null}\n                    {this.props.activePracticePermissions.SettingsExpenseTypes ? (\n<Menu.Item key=\"16\">\n                        <Link to=\"/settings/expense-types\">\n                            <Icon type=\"dollar\" /> Expense Types\n                        </Link>\n</Menu.Item>\n) : null}\n\n                    <Menu.Item key=\"20\">\n                        <Link to=\"/settings/integration\">\n                            <Icon type=\"link\" /> My Integrations\n                        </Link>\n                    </Menu.Item>\n                </Menu.ItemGroup>\n                <Menu.ItemGroup key=\"g2\" title={<Divider style={{margin: '0px'}}>Bed & Medicine</Divider>}>\n                {this.props.activePracticePermissions.SettingsRoomTypes ? (\n                    <Menu.Item key=\"22\">\n                        <Link to=\"/settings/roomtypes\">\n                            <Icon type=\"apartment\" /> Room Types\n                        </Link>\n                    </Menu.Item>\n                  )\n                :null}\n\n                {this.props.activePracticePermissions.SettingsBedPackages ? (\n                    <Menu.Item key=\"23\">\n                        <Link to=\"/settings/bed-packages\">\n                            <Icon type=\"box-plot\" /> Bed Packages\n                        </Link>\n                    </Menu.Item>\n                  )\n                :null}\n\n                {this.props.activePracticePermissions.SettingsMedicinePackages ? (\n                    <Menu.Item key=\"24\">\n                        <Link to=\"/settings/medicine-packages\">\n                            <Icon type=\"medicine-box\" /> Medicine Packages\n                        </Link>\n                    </Menu.Item>\n                  )\n                :null}\n\n                {this.props.activePracticePermissions.SettingsDiseaseList ? (\n                    <Menu.Item key=\"25\">\n                        <Link to=\"/settings/diseases\">\n                            <Icon type=\"apartment\" /> Disease List\n                        </Link>\n                    </Menu.Item>\n                  )\n                :null}\n                </Menu.ItemGroup>\n\n\n            </Menu>\n\n</Sider>\n)\n    }\n}\n\nexport default SettingSider;\n","import {\n    Form, Input, Button, Card, Table, InputNumber\n} from 'antd';\nimport React from \"react\";\nimport {Redirect} from 'react-router-dom';\nimport {\n    AGENT_ROLES,\n    GENERATE_MLM_COMMISSON,\n} from \"../../../../constants/api\"\nimport {displayMessage, getAPI, postAPI} from \"../../../../utils/common\";\nimport {SUCCESS_MSG_TYPE} from \"../../../../constants/dataKeys\";\n\nclass MLMGenerate extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            redirect: false,\n            level_count: 3,\n            margin: null,\n            editRecord: (this.props.editRecord ? this.props.editRecord : null),\n            editId: (this.props.editId ? this.props.editId : null),\n            loading: true,\n            editRecordMargins: {}\n        }\n        this.changeRedirect = this.changeRedirect.bind(this);\n    }\n\n    componentDidMount() {\n        this.loadRoles();\n        if (this.state.editRecord && this.state.editId) {\n            const editRecordMargins = {}\n            this.state.editRecord.forEach(function (record) {\n                editRecordMargins[record.roleId] = record;\n            });\n            this.setState({\n                editRecordMargins\n            })\n            this.loadMlmData();\n\n        }\n        // this.loadProductlevels();\n    }\n\n    loadMlmData() {\n        const that = this;\n        const successFn = function (data) {\n            data.map(function (item) {\n                if (item.id === that.props.editId) {\n                    that.setState({\n                        margin: item,\n                        loading: false\n                    }, function () {\n                        that.setLevelCount(item.level_count)\n                    })\n                }\n                \n            })\n\n        }\n        const errorFn = function () {\n            that.setState({\n                loading: true\n            })\n\n        }\n        getAPI(GENERATE_MLM_COMMISSON, successFn, errorFn);\n    }\n\n    loadRoles() {\n        const that = this;\n        const successFn = function (data) {\n            that.setState({\n                staffRoles: data,\n                loading: false\n            })\n        }\n        const errorFn = function () {\n            that.setState({\n                loading: false\n            })\n\n        }\n\n        getAPI(AGENT_ROLES, successFn, errorFn);\n    }\n\n    handleSubmit = (e) => {\n        e.preventDefault();\n        const that = this;\n        this.props.form.validateFieldsAndScroll((err, values) => {\n            let reqData = {};\n            reqData = {\n                comissions: [],\n                name: values.margin_name,\n                level_count: values.level_count,\n            };\n            for (let i = 1; i <= that.state.level_count; i++) {\n                this.state.staffRoles.forEach(function (role) {\n                    reqData.comissions.push({\n                        level: i,\n                        role: role.id,\n                        commision_percent: values[i][role.id]\n                    })\n                });\n            }\n\n            if (that.state.editId) {\n                reqData.id = that.state.editId;\n            }\n\n            if (!err) {\n                that.setState({changePassLoading: true, redirect: true});\n                const successFn = function (data) {\n                    displayMessage(SUCCESS_MSG_TYPE, data.details);\n                    that.props.loadData();\n                    if (that.props.history) {\n                        that.props.history.replace(\"/settings/mlm\");\n                    }\n                };\n                const errorFn = function () {\n                };\n                postAPI(GENERATE_MLM_COMMISSON, reqData, successFn, errorFn);\n            }\n        });\n    };\n\n    changeRedirect() {\n        const redirectVar = this.state.redirect;\n        this.setState({\n            redirect: !redirectVar,\n        });\n    }\n\n\n    add = (level_name) => {\n        const {form} = this.props;\n        // can use data-binding to get\n        const keys = form.getFieldValue('keys');\n        const nextKeys = keys.concat(level_name);\n        // can use data-binding to set\n        // important! notify form to detect changes\n        form.setFieldsValue({\n            keys: nextKeys,\n        });\n    }\n\n    setLevelCount = (e) => {\n        const that = this;\n        that.setState({\n            level_count: e < 5 ? e : 5\n        })\n    }\n\n    render() {\n        const {getFieldDecorator} = this.props.form;\n        const formItemLayout = {\n            labelCol: {\n                xs: {span: 24},\n                sm: {span: 4},\n            },\n            wrapperCol: {\n                xs: {span: 24},\n                sm: {span: 20},\n            },\n        };\n        getFieldDecorator('keys', {initialValue: []});\n        const columns = [{\n            title: 'Roles',\n            dataIndex: 'name',\n            key: 'name'\n        }];\n        if (this.state.level_count)\n            for (let i = 1; i <= this.state.level_count; i++) {\n                columns.push({\n                    title: `Level ${i}`,\n                    dataIndex: `Level ${i}`,\n                    key: `Level ${i}`,\n                    render: (item, record) => (\n                        <Form.Item\n                          {...formItemLayout}\n                            // label={k}\n                          required\n                          key={`${i}[${record.id}]`}\n                        >\n                            {getFieldDecorator(`${i}[${record.id}]`, {\n                                validateTrigger: ['onChange', 'onBlur'],\n                                initialValue: (this.state.editRecordMargins && this.state.editRecordMargins[record.id] ? this.state.editRecordMargins[record.id][i] : null)\n                            })(\n                                <InputNumber min={0} placeholder=\"Percent Commission\" />\n                            )}\n                        </Form.Item>\n                    )\n                })\n            }\n\n        return (\n            <Card title=\"Manage MLM Commission\">\n                <Form onSubmit={this.handleSubmit} className=\"login-form\">\n                    <Form.Item\n                      {...formItemLayout}\n                      label=\"Margin Name\"\n                      required\n                      key=\"margin_name\"\n                    >\n                        {getFieldDecorator(`margin_name`, {\n                            validateTrigger: ['onChange', 'onBlur'],\n                            initialValue: (this.state.margin ? this.state.margin.name : null)\n                        })(\n                            <Input placeholder=\"Margin Type Name\" />\n                        )}\n                    </Form.Item>\n                    <Form.Item\n                      {...formItemLayout}\n                      label=\"No of Levels\"\n                      required={false}\n                      key=\"level_count\"\n\n                    >\n                        {getFieldDecorator(`level_count`, {\n                            validateTrigger: ['onChange', 'onBlur'],\n                            initialValue: this.state.level_count\n                        })(\n                            <InputNumber min={1} max={5} placeholder=\"Level Count\" onChange={this.setLevelCount} />\n                        )}\n                    </Form.Item>\n                    <Table\n                      loading={this.state.loading}\n                      bordered\n                      pagination={false}\n                      columns={columns}\n                      dataSource={this.state.staffRoles}\n                    />\n                    <Form.Item>\n                        <br />\n                        <Button type=\"primary\" htmlType=\"submit\" className=\"login-form-button\">\n                            Set MLM Commissions\n                        </Button>\n                    </Form.Item>\n                </Form>\n                {this.state.redirect && <Redirect to='/settings/mlm' />}\n            </Card>\n\n        );\n    }\n}\n\nexport default Form.create()(MLMGenerate);\n","\nimport React from \"react\";\nimport {Button, Card, Icon, Table, Tabs, Row, Popconfirm,Collapse} from \"antd\";\nimport {Link, Route, Switch} from \"react-router-dom\";\nimport {getAPI, interpolate, postAPI, patchAPI, deleteAPI, putAPI} from \"../../../../utils/common\";\nimport MLMGenerate from \"./MLMGenerate\"\nimport {\n    PRODUCT_MARGIN,\n    ROLE_COMMISION,\n    SINGLE_PRODUCT_MARGIN,\n    AGENT_ROLES,\n    GENERATE_MLM_COMMISSON\n} from \"../../../../constants/api\";\n\nconst {TabPane} = Tabs;\nconst {Panel} = Collapse;\nexport default class MlmBase extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            mlmItems: [],\n            productMargin: [],\n            active_practiceId: this.props.active_practiceId,\n            loading: true\n        };\n        this.loadMlmData = this.loadMlmData.bind(this);\n        this.deleteObject = this.deleteObject.bind(this);\n        this.loadRoles = this.loadRoles.bind(this);\n        this.loadData = this.loadData.bind(this);\n    }\n\n    componentDidMount() {\n        this.loadData();\n    }\n\n    loadData() {\n        this.loadMlmData();\n        this.loadRoles();\n        this.loadProductMargin();\n    }\n\n    loadMlmData() {\n        const that = this;\n        const successFn = function (data) {\n            that.setState({\n                mlmItems: data,\n                loading: false\n            })\n        };\n        const errorFn = function () {\n            that.setState({\n                loading: false\n            })\n\n        };\n        getAPI(GENERATE_MLM_COMMISSON, successFn, errorFn);\n    }\n\n    loadRoles() {\n        const that = this;\n        const successFn = function (data) {\n            that.setState({\n                staffRoles: data,\n                loading: false\n            })\n        };\n        const errorFn = function () {\n            that.setState({\n                loading: false\n            })\n        };\n        getAPI(AGENT_ROLES, successFn, errorFn);\n    }\n\n    loadProductMargin() {\n        const that = this;\n        const successFn = function (data) {\n            that.setState({\n                productMargin: data\n            })\n        };\n        const errorFn = function () {\n\n        };\n        getAPI(PRODUCT_MARGIN, successFn, errorFn);\n    }\n\n    editObject(id, record) {\n        this.setState({\n            editId: id,\n            editRecord: record,\n            loading: false\n        }, function () {\n            this.props.history.push('/settings/mlm/edit');\n        })\n    }\n\n    deleteObject(record) {\n        const that = this;\n        const reqData = {...record, is_active: false};\n        reqData.is_active = false;\n        const successFn = function (data) {\n            that.loadData();\n        };\n        const errorFn = function () {\n        };\n        putAPI(interpolate(SINGLE_PRODUCT_MARGIN, [record.id]), reqData, successFn, errorFn);\n    }\n\n    changeRedirect() {\n        const redirectVar = this.state.redirect;\n        this.setState({\n            redirect: !redirectVar,\n        });\n    }\n\n    render() {\n        const that = this;\n        const rolesdata = {}\n        if (this.state.staffRoles) {\n            this.state.staffRoles.forEach(function (role) {\n                rolesdata[role.id] = role.name;\n            })\n        }\n        const columns = {};\n\n        that.state.productMargin.forEach(function (productMargin) {\n            columns[productMargin.id] = [{\n                title: 'Role',\n                key: 'role',\n                dataIndex: 'role',\n            }];\n            for (let level = 1; level <= productMargin.level_count; level++) {\n                columns[productMargin.id].push({\n                    title: `Level ${  level}`,\n                    key: level,\n                    dataIndex: level,\n                    render: (value) => <span>{value}%</span>\n                })\n            }\n        })\n\n\n        const datasource = {};\n\n        that.state.mlmItems.forEach(function (productMargin) {\n            datasource[productMargin.id] = [];\n\n            if (that.state.staffRoles) {\n                that.state.staffRoles.forEach(function (role) {\n                    const roledata = {\"role\": role.name, roleId: role.id};\n                    if (productMargin.level_count) {\n                        for (let level = 1; level <= productMargin.level_count; level++) {\n                            if (productMargin.comissions) {\n                                for (let i = 0; i < productMargin.comissions.length; i++) {\n                                    const item = productMargin.comissions[i];\n                                    if (item.margin == productMargin.id && item.level == level && role.id == item.role) {\n                                        roledata[level] = item.commision_percent;\n                                        break;\n                                    }\n                                }\n                            }\n                        }\n                    }\n\n                    datasource[productMargin.id].push(roledata);\n                })\n            }\n        });\n        return (\n<div>\n            <Switch>\n                <Route\n                  exact\n                  path=\"/settings/mlm/generate\"\n                  render={(route) => (\n<MLMGenerate\n  {...route}\n  loadData={this.loadData}\n/>\n)}\n                />\n                {this.state.editId && this.state.editRecord ? (\n                    <Route\n                      exact\n                      path=\"/settings/mlm/edit\"\n                      render={(route) => (\n<MLMGenerate\n  {...route}\n  key={this.state.editId}\n  loadData={this.loadData}\n  {...this.state}\n/>\n)}\n                    />\n                  ) : null}\n                <Route>\n                    <div>\n                        <h2>MLM Commissions\n                            <Link to=\"/settings/mlm/generate\">\n                                <Button type=\"primary\" style={{float: 'right'}}>\n                                    <Icon type=\"plus\" />&nbsp;Add\n                                </Button>\n                            </Link>\n                        </h2>\n                        <Card>\n                            {this.state.productMargin ? (\n<Collapse defaultActiveKey={['0']} accordion>\n                                {this.state.productMargin.map((marginType, index) => (\n                                    <Panel\n                                      header={marginType.name}\n                                      key={index}\n                                      extra={[<Button.Group size=\"small\">\n                                               <Button\n                                                 type=\"primary\"\n                                                 onClick={() => this.editObject(marginType.id, datasource[marginType.id])}\n                                               ><Icon\n                                                 type=\"edit\"\n                                               /> Edit\n                                               </Button>\n\n                                               <Popconfirm\n                                                 title=\"Are you sure delete this item?\"\n                                                 onConfirm={() => that.deleteObject(marginType)}\n                                                 okText=\"Yes\"\n                                                 cancelText=\"No\"\n                                               >\n                                                   <Button type=\"danger\"><Icon type=\"delete\" /> Delete</Button>\n                                               </Popconfirm>\n                                              </Button.Group>]}\n                                    >\n                                        <Table\n                                          loading={this.state.loading}\n                                          pagination={false}\n                                          style={{marginTop: 10}}\n                                          dataSource={datasource[marginType.id]}\n                                          rowKey=\"role\"\n                                          columns={columns[marginType.id]}\n                                          bordered\n                                        />\n                                    </Panel>\n                                  ))}\n</Collapse>\n) : <h4>No MLM Data</h4>}\n\n\n                            {/* {this.state.productMargin ?\n                                <Tabs type=\"card\">\n                                    {this.state.productMargin.map(marginType =>\n                                        <TabPane tab={marginType.name} key={marginType.id}>\n                                            <Row>\n                                                <br/>\n                                                <h2>\n                                                    {marginType.name}\n                                                    <Button.Group style={{float: 'right'}}>\n                                                        <Button type=\"primary\"\n                                                                onClick={() => this.editObject(marginType.id, datasource[marginType.id])}><Icon\n                                                            type=\"edit\"/> Edit</Button>\n                                                        <Popconfirm title=\"Are you sure delete this item?\"\n                                                                    onConfirm={() => that.deleteObject(marginType)} okText=\"Yes\" cancelText=\"No\">\n                                                            <Button type=\"danger\"><Icon type=\"delete\"/> Delete</Button>\n                                                        </Popconfirm>\n\n                                                    </Button.Group>\n                                                </h2>\n                                            </Row>\n                                            <Table loading={this.state.loading} pagination={false}\n                                                   style={{marginTop: 10}}\n                                                   dataSource={datasource[marginType.id]}\n                                                   rowKey=\"role\"\n                                                   columns={columns[marginType.id]}\n                                                   bordered/>\n                                        </TabPane>)}\n                                </Tabs> : <h4>No MLM Data</h4>} */}\n\n                        </Card>\n                    </div>\n                </Route>\n            </Switch>\n\n</div>\n)\n    }\n}\n","import React from 'react';\nimport {Row, Form, Col, Radio, Input, Divider, Select, InputNumber, Icon, Button, Upload, Checkbox,message} from \"antd\";\nimport {\n    CUSTOMIZE_PAPER_TYPE,\n    EXCLUDE_PATIENT_DOB, HEADER_INCLUDE, LOGO_ALIGMENT, LOGO_INCLUDE, LOGO_TYPE,\n    PAGE_ORIENTATION, PAPER_SIZE, PATIENT_DETAILS_LIST,\n    PRINTER_TYPE\n} from \"../../../../constants/hardData\";\nimport {displayMessage, getAPI, interpolate, makeURL, postAPI} from \"../../../../utils/common\";\nimport {\n    CLINIC_NOTES_PDF,\n    FILE_UPLOAD_API,\n    PRACTICE_PRINT_SETTING_API,\n    PRINT_PREVIEW_RENDER,\n    SAVE_ALL_PRINT_SETTINGS\n} from \"../../../../constants/api\";\n\nimport {SINGLE_IMAGE_UPLOAD_FIELD, SUCCESS_MSG_TYPE} from \"../../../../constants/dataKeys\";\nimport {BACKEND_BASE_URL} from \"../../../../config/connect\";\n\nconst {TextArea} = Input;\nconst radioTabList = CUSTOMIZE_PAPER_TYPE.map((radioTab) => <Radio.Button value={radioTab}>{radioTab}</Radio.Button>);\n\n\nclass PrintSettings extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            type: this.props.type,\n            sub_type: this.props.sub_type,\n            selectedFormType: 'PAGE',\n            print_setting: {},\n            editedPrintSettings: {},\n        }\n        this.loadData = this.loadData.bind(this);\n    }\n\n    componentDidMount() {\n        this.loadData();\n    }\n\n    changeFormType = (e) => {\n        this.setState({\n            selectedFormType: e.target.value\n        })\n\n    }\n\n    loadData() {\n        const that = this;\n        const successFn = function (data) {\n            if (data.length)\n                that.setState({\n                    print_setting: data[0],\n                });\n        };\n        const errorFn = function () {\n        };\n        getAPI(interpolate(PRACTICE_PRINT_SETTING_API, [this.props.active_practiceId, that.state.type, that.state.sub_type]), successFn, errorFn);\n    }\n\n    handleSubmit = (e) => {\n        console.log(e);\n        e.preventDefault();\n        const that = this;\n\n        this.props.form.validateFields((err, formData) => {\n            console.log(formData);\n            if (!err) {\n                let reqData = {\n                    type: that.state.type,\n                    ...formData\n                }\n\n                const key = \"logo_path\";\n                if (reqData[key] && formData[key].file && formData[key].file.response)\n                    reqData[key] = formData[key].file.response.image_path;\n                else\n                    reqData[key] = that.state.print_setting.logo_path;\n\n                if (!reqData.save_for_all) {\n                    reqData = {\n                        ...reqData,\n                        sub_type: that.state.sub_type,\n                        id: that.state.print_setting.id\n                    }\n                }\n                delete reqData.save_for_all;\n                const successFn = function (data) {\n                    displayMessage(SUCCESS_MSG_TYPE, \"Settings Saved Successfully!!\");\n                };\n                const errorFn = function () {\n                };\n                if (formData.save_for_all) {\n                    postAPI(interpolate(SAVE_ALL_PRINT_SETTINGS, [this.props.active_practiceId]), reqData, successFn, errorFn);\n                } else {\n                    postAPI(interpolate(PRACTICE_PRINT_SETTING_API, [this.props.active_practiceId, that.state.type, that.state.sub_type]), reqData, successFn, errorFn);\n                }\n            }\n        });\n    }\n\n    handleFormEditSettings = (type, value) => {\n        this.setState(function (prevState) {\n            return {editedPrintSettings: {...prevState.editedPrintSettings, [type]: value}}\n        })\n    }\n\n    loadPDF = (path) => {\n        const that = this;\n        const successFn = function (data) {\n            if (data.report)\n                window.open(BACKEND_BASE_URL + data.report);\n        }\n        const errorFn = function () {\n\n        }\n        getAPI(path, successFn, errorFn);\n    }\n\n    onchangeHandle=(type ,value)=>{\n        const that=this;\n        this.setState({\n            [type]:value\n        }\n        ,function(){\n            if(this.state.is_patient_not){\n                this.props.form.resetFields()\n            }\n        }\n        )\n    }\n\n    render() {\n        console.log(this.state)\n        const that = this;\n        const formItemLayout = {\n            labelCol: {\n                xs: {span: 8},\n                sm: {span: 8},\n                md: {span: 8},\n                lg: {span: 8},\n            },\n            wrapperCol: {\n                xs: {span: 16},\n                sm: {span: 16},\n                md: {span: 16},\n                lg: {span: 16},\n            },\n        };\n        const pageSizeOptionList = PAPER_SIZE.map((pageSize) => (\n<Select.Option\n  value={pageSize}\n>{pageSize}\n</Select.Option>\n))\n        const headerInclude = HEADER_INCLUDE.map((header_include) => (\n<Radio\n  value={header_include.value}\n>{header_include.title}\n</Radio>\n))\n        const logoType = LOGO_TYPE.map((logo_type) => <Radio value={logo_type.value}>{logo_type.value}</Radio>)\n        const logoAlignment = LOGO_ALIGMENT.map((logo_alignment) => (\n<Radio\n  value={logo_alignment.value}\n>{logo_alignment.value}\n</Radio>\n))\n        const logoInclude = LOGO_INCLUDE.map((logo_include) => (\n<Radio\n  value={logo_include.value}\n>{logo_include.title}\n</Radio>\n))\n        const singleUploadprops = {\n            name: 'image',\n            data: {\n                name: 'hello',\n                // logo_path:file.response.image_path,\n            },\n            action: makeURL(FILE_UPLOAD_API),\n            headers: {\n                authorization: 'authorization-text',\n            },\n            onChange(info) {\n                if (info.file.status !== 'uploading') {\n                    console.log(info.file, info.fileList);\n                }\n                if (info.file.status === 'done') {\n                    message.success(`${info.file.name} file uploaded successfully`);\n                } else if (info.file.status === 'error') {\n                    message.error(`${info.file.name} file upload failed.`);\n                }\n            },\n\n        };\n        const patientDetailsList = PATIENT_DETAILS_LIST.map((patient_details) => (\n<li>\n            <Checkbox value={patient_details.value}>{patient_details.value}</Checkbox>\n</li>\n))\n        const pageOrientation = PAGE_ORIENTATION.map((pageOrientation) => (\n<Radio\n  value={pageOrientation.value}\n>{pageOrientation.value}\n</Radio>\n))\n        const printer_type = PRINTER_TYPE.map((printerType) => (\n<Radio\n  value={printerType.value}\n>{printerType.value}\n</Radio>\n))\n        let PreviewParamsURL = `?preview=true&type=${  this.props.type  }&sub_type=${  this.props.sub_type}`;\n\n        if (this.state.print_setting) {\n            const editedObject = {...this.state.print_setting, ...this.state.editedPrintSettings};\n            const keys = Object.keys(editedObject);\n            keys.forEach(function (key) {\n                if (editedObject[key])\n                    PreviewParamsURL += `&${  key  }=${  encodeURIComponent(editedObject[key])}`\n            });\n\n        }\n        const {getFieldDecorator} = this.props.form;\n        return (\n<Row>\n                <Col span={24}>\n                    <Form onSubmit={this.handleSubmit}>\n\n\n                        <div className=\"div_padding_top\">\n                            <Row gutter={16}>\n                                <Col span={12}>\n                                    <div style={{textAlign: 'center'}}>\n                                        <Radio.Group\n                                          buttonStyle=\"solid\"\n                                          size=\"small\"\n                                          onChange={this.changeFormType}\n                                          defaultValue={this.state.selectedFormType}\n                                        >\n                                            {radioTabList}\n                                        </Radio.Group>\n                                        <br />\n                                    </div>\n                                    <div hidden={this.state.selectedFormType != 'PAGE'}>\n\n                                        <h2>Page Setup</h2>\n                                        <Form.Item key=\"page_size\" {...formItemLayout} label=\"Paper Size\">\n                                            {getFieldDecorator('page_size', {\n                                                initialValue: this.state.print_setting.page_size\n                                            })(<Select\n                                              style={{width: '100%'}}\n                                              onChange={(value) => this.handleFormEditSettings('page_size', value)}\n                                            >\n                                                {pageSizeOptionList}\n                                               </Select>)}\n                                        </Form.Item>\n\n                                        <Form.Item label=\"Orientation\" {...formItemLayout}>\n                                            {getFieldDecorator('page_orientation', {\n                                                initialValue: this.state.print_setting.page_orientation\n                                            })(<Radio.Group\n                                              onChange={(e) => this.handleFormEditSettings('orientation', e.target.value)}\n                                            >\n                                                    {pageOrientation}\n                                               </Radio.Group>\n                                            )}\n                                        </Form.Item>\n\n                                        <Form.Item label={(<span>Printer Type&nbsp;</span>)} {...formItemLayout}>\n                                            {getFieldDecorator('page_print_type', {\n                                                initialValue: this.state.print_setting.page_print_type\n                                            })(<Radio.Group\n                                              onChange={(e) => this.handleFormEditSettings('printerType', e.target.value)}\n                                            >\n                                                    {printer_type}\n                                               </Radio.Group>\n                                            )}\n\n                                        </Form.Item>\n\n                                        <Form.Item\n                                          key=\"page_margin_top\"\n                                          label={(<span>Top Margin</span>)}\n                                          {...formItemLayout}\n                                        >\n                                            {getFieldDecorator('page_margin_top', {\n                                                initialValue: this.state.print_setting.page_margin_top\n                                            })(\n                                                <InputNumber\n                                                  min={0}\n                                                  max={10}\n                                                  onChange={(value) => this.handleFormEditSettings('page_margin_top', value)}\n                                                />\n                                            )}\n                                            <span className=\"ant-form-text\">Inches</span>\n                                        </Form.Item>\n\n                                        <Form.Item\n                                          key=\"page_margin_left\"\n                                          label={(<span>Left Margin</span>)}\n                                          {...formItemLayout}\n                                        >\n                                            {getFieldDecorator('page_margin_left', {\n                                                initialValue: this.state.print_setting.page_margin_left\n                                            })(\n                                                <InputNumber\n                                                  min={0}\n                                                  max={10}\n                                                  onChange={(value) => this.handleFormEditSettings('page_margin_left', value)}\n                                                />\n                                            )}\n                                            <span className=\"ant-form-text\">Inches</span>\n                                        </Form.Item>\n\n                                        <Form.Item\n                                          key=\"page_margin_bottom\"\n                                          label={(<span>Bottom Margin</span>)}\n                                          {...formItemLayout}\n                                        >\n                                            {getFieldDecorator('page_margin_bottom', {\n                                                initialValue: this.state.print_setting.page_margin_bottom\n                                            })(\n                                                <InputNumber\n                                                  min={0}\n                                                  max={10}\n                                                  onChange={(value) => this.handleFormEditSettings('page_margin_bottom', value)}\n                                                />\n                                            )}\n                                            <span className=\"ant-form-text\">Inches</span>\n                                        </Form.Item>\n\n                                        <Form.Item\n                                          key=\"page_margin_right\"\n                                          label={(<span>Right Margin</span>)}\n                                          {...formItemLayout}\n                                        >\n                                            {getFieldDecorator('page_margin_right', {\n                                                initialValue: this.state.print_setting.page_margin_right\n                                            })(\n                                                <InputNumber\n                                                  min={0}\n                                                  max={10}\n                                                  onChange={(value) => this.handleFormEditSettings('page_margin_right', value)}\n                                                />\n                                            )}\n                                            <span className=\"ant-form-text\">Inches</span>\n                                        </Form.Item>\n                                    </div>\n                                    <div hidden={this.state.selectedFormType != 'HEADER'}>\n                                        <h2>Customize Header</h2>\n\n                                        <Form.Item\n                                          key=\"header_include\"\n                                          {...formItemLayout}\n                                          label={(<span>Include Header&nbsp;</span>)}\n                                        >\n                                            {getFieldDecorator('header_include', {initialValue: this.state.print_setting.header_include})\n                                            (\n                                                <Radio.Group\n                                                  onChange={(e) => this.handleFormEditSettings('header_include', e.target.value)}\n                                                >\n                                                    {headerInclude}\n                                                </Radio.Group>\n                                            )}\n                                        </Form.Item>\n\n                                        <Form.Item\n                                          key=\"header_text\"\n                                          {...formItemLayout}\n                                          label={(<span>Header&nbsp;</span>)}\n                                        >\n                                            {getFieldDecorator('header_text', {\n                                                initialValue: this.state.print_setting.header_text\n                                            })(\n                                                <Input\n                                                  onChange={(e) => this.handleFormEditSettings('header_text', e.target.value)}\n                                                />\n                                            )}\n                                        </Form.Item>\n                                        <Form.Item\n                                          key=\"header_left_text\"\n                                          {...formItemLayout}\n                                          label={(<span>Left Text&nbsp;</span>)}\n                                        >\n                                            {getFieldDecorator('header_left_text', {\n                                                initialValue: this.state.print_setting.header_left_text\n                                            })(\n                                                <TextArea\n                                                  onChange={(e) => this.handleFormEditSettings('header_left_text', e.target.value)}\n                                                />\n                                            )}\n                                        </Form.Item>\n\n                                        <Form.Item\n                                          key=\"header_right_text\"\n                                          {...formItemLayout}\n                                          label={(<span>Right Text&nbsp;</span>)}\n                                        >\n                                            {getFieldDecorator('header_right_text', {initialValue: this.state.print_setting.header_right_text})\n                                            (<TextArea\n                                              onChange={(e) => this.handleFormEditSettings('header_right_text', e.target.value)}\n                                            />)}\n                                        </Form.Item>\n\n                                        <Form.Item\n                                          key=\"logo_include\"\n                                          {...formItemLayout}\n                                          label={(<span>Include Logo&nbsp;</span>)}\n                                        >\n                                            {getFieldDecorator('logo_include', {initialValue: this.state.print_setting.logo_include})\n                                            (\n                                                <Radio.Group\n                                                  onChange={(e) => this.handleFormEditSettings('logo_include', e.target.value)}\n                                                >\n                                                    {logoInclude}\n                                                </Radio.Group>\n                                            )}\n                                        </Form.Item>\n\n                                        <Form.Item\n                                          key=\"logo_path\"\n                                          {...formItemLayout}\n                                          label={(<span>Logo&nbsp;</span>)}\n                                        >\n                                            {getFieldDecorator('logo_path')\n                                            (<Upload {...singleUploadprops}>\n                                                <Button>\n                                                    <Icon type=\"upload\" /> Click to Upload\n                                                </Button>\n                                             </Upload>)}\n                                            {/* <Avatar style={{backgroundColor: this.state.color}} size=\"large\"> */}\n                                            {/* {this.state.user} */}\n                                            {/* </Avatar> */}\n\n                                        </Form.Item>\n\n                                        <Form.Item\n                                          key=\"logo_type\"\n                                          {...formItemLayout}\n                                          label={(<span>Type&nbsp;</span>)}\n                                        >\n                                            {getFieldDecorator('logo_type', {initialValue: this.state.print_setting.logo_type})(\n                                                <Radio.Group\n                                                  onChange={(e) => this.handleFormEditSettings('logo_type', e.target.value)}\n                                                >\n                                                    {logoType}\n                                                </Radio.Group>\n                                            )}\n                                        </Form.Item>\n\n                                        <Form.Item\n                                          key=\"logo_alignment\"\n                                          {...formItemLayout}\n                                          label={(<span>Alignment&nbsp;</span>)}\n                                        >\n                                            {getFieldDecorator('logo_alignment', {initialValue: this.state.print_setting.logo_alignment})\n                                            (\n                                                <Radio.Group\n                                                  onChange={(e) => this.handleFormEditSettings('logo_alignment', e.target.value)}\n                                                >\n                                                    {logoAlignment}\n                                                </Radio.Group>\n                                            )}\n                                        </Form.Item>\n                                    </div>\n                                    <div hidden={this.state.selectedFormType != 'PATIENT'}>\n                                        <h2>Customize Patient Details</h2>\n                                        <Form.Item>\n                                            {getFieldDecorator('patient_details', {})(\n                                                <Checkbox onChange={(e)=>this.onchangeHandle('is_patient_not',e.target.checked)}>Show Patient Details</Checkbox>)}\n                                           \n                                        </Form.Item>\n                                            <ul className=\"subLists\">\n                                                <Form.Item>\n                                                    {getFieldDecorator('exclude_history', {})(\n                                                        <Checkbox>Exclude Mediacal History</Checkbox>)}\n                                                \n                                                </Form.Item>\n\n                                                <Form.Item>\n                                                    {getFieldDecorator('exclude_phone', {})(\n                                                        <Checkbox>Exclude Patient Number</Checkbox>)}\n                                                \n                                                </Form.Item>\n                                                <Form.Item>\n                                                    {getFieldDecorator('exclude_email', {})(\n                                                        <Checkbox>Exclude Patient Email Id</Checkbox>)}\n                                                \n                                                </Form.Item>\n\n                                                <Form.Item>\n                                                    {getFieldDecorator('exclude_address', {})(\n                                                        <Checkbox>Exclude address</Checkbox>)}\n                                                \n                                                </Form.Item>\n                                                <Form.Item>\n                                                    {getFieldDecorator('exclude_blood_group', {})(\n                                                        <Checkbox>Exclude Blood Group</Checkbox>)}\n                                                \n                                                </Form.Item>\n                                                <Form.Item>\n                                                    {getFieldDecorator('exclude_gender_dob', {})(\n                                                        <Checkbox>{EXCLUDE_PATIENT_DOB}</Checkbox>\n                                                    )}\n                                                \n                                                </Form.Item>\n                                            </ul>\n                                       \n                                    </div>\n                                    <div hidden={this.state.selectedFormType != 'FOOTER'}>\n                                        <h2>Footer Setup</h2>\n                                        <Form.Item\n                                          key=\"footer_margin_top\"\n                                          {...formItemLayout}\n                                          label={(<span>Top Margin&nbsp;</span>)}\n                                        >\n                                            {getFieldDecorator('footer_margin_top', {\n                                                initialValue: this.state.print_setting.footer_margin_top\n                                            })(\n                                                <InputNumber\n                                                  min={0}\n                                                  max={10}\n                                                  onChange={(value) => this.handleFormEditSettings('footer_margin_top', value)}\n                                                />\n                                            )}\n                                            <span className=\"ant-form-text\">Inches</span>\n                                        </Form.Item>\n                                        <Form.Item\n                                          key=\"footer_text\"\n                                          {...formItemLayout}\n                                          label={(<span>Full Width Content&nbsp;</span>)}\n                                        >\n                                            {getFieldDecorator('footer_text', {\n                                                initialValue: this.state.print_setting.footer_text\n                                            })(\n                                                <TextArea\n                                                  rows={3}\n                                                  onChange={(e) => this.handleFormEditSettings('footer_text', e.target.value)}\n                                                />\n                                            )}\n                                        </Form.Item>\n\n                                        <Form.Item\n                                          key=\"footer_left_text\"\n                                          {...formItemLayout}\n                                          label={(<span>Left Signature&nbsp;</span>)}\n                                        >\n                                            {getFieldDecorator('footer_left_text', {\n                                                initialValue: this.state.print_setting.footer_left_text\n                                            })(\n                                                <TextArea\n                                                  onChange={(e) => this.handleFormEditSettings('footer_left_text', e.target.value)}\n                                                />\n                                            )}\n                                        </Form.Item>\n\n                                        <Form.Item\n                                          key=\"footer_right_text\"\n                                          {...formItemLayout}\n                                          label={(<span>Right Signature&nbsp;</span>)}\n                                        >\n                                            {getFieldDecorator('footer_right_text', {\n                                                initialValue: this.state.print_setting.footer_right_text\n                                            })(\n                                                <TextArea\n                                                  onChange={(e) => this.handleFormEditSettings('footer_right_text', e.target.value)}\n                                                />\n                                            )}\n                                        </Form.Item>\n\n                                    </div>\n                                    <Row>\n                                        <Divider />\n                                        <Form.Item {...formItemLayout} key=\"save_for_all\">\n                                            {getFieldDecorator('save_for_all', {})(\n                                                <Checkbox>\n                                                    <b> Save for all</b>\n                                                </Checkbox>\n                                            )}\n                                        </Form.Item>\n                                        <Form.Item>\n                                            <Button\n                                              style={{margin: 5}}\n                                              type=\"primary\"\n                                              htmlType=\"submit\"\n                                              value=\"ALL\"\n                                            >Save\n                                            </Button>\n                                            <Button\n                                              style={{margin: 5}}\n                                              onClick={() => this.loadPDF(`${PRINT_PREVIEW_RENDER + PreviewParamsURL  }&pdf=1`)}\n                                            >Show\n                                                Print Preview\n                                            </Button>\n                                        </Form.Item>\n                                    </Row>\n                                </Col>\n                                <Col span={12} style={{textAlign: 'center'}}>\n                                    <div style={{\n                                        position: 'absolute',\n                                        backgroundColor: 'black',\n                                        color: 'white',\n                                        padding: 10,\n                                        right: 20,\n                                        top: 50\n                                    }}\n                                    >\n                                        <b>PREVIEW</b>\n                                    </div>\n                                    <iframe\n                                      src={makeURL(PRINT_PREVIEW_RENDER + PreviewParamsURL)}\n                                      style={{\n                                            width: '100%',\n                                            height: '100%',\n                                            minHeight: '600px',\n                                            boxShadow: '-2px 0px 4px #B8B8B8'\n                                        }}\n                                    />\n                                </Col>\n\n                            </Row>\n                        </div>\n                    </Form>\n                </Col>\n</Row>\n        );\n\n    }\n\n}\n\nexport default Form.create()(PrintSettings);\n","import React from 'react';\nimport {Button, Tabs, Divider, Table, Card, Icon, Radio, Tag} from \"antd\";\nimport PrintSettings from \"./PrintSettings\";\nimport {PRESCRIPTION} from \"../../../../constants/dataKeys\";\nimport {\n    EMR_TYPE,\n    BILLING_TYPE,\n    EMR_SUB_TYPE,\n    BILLING_SUB_TYPE,\n    CUSTOMIZE_PAPER_TYPE\n} from \"../../../../constants/hardData\";\n\nconst {TabPane} = Tabs;\n\nclass Printout extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            randomKey: Math.random(),\n            activeKey: 'a'\n        }\n    }\n\n    setRandomKey = (key) => {\n        console.log(key)\n        this.setState({\n            randomKey: Math.random(),\n            activeKey: key\n        })\n    }\n\n    render() {\n        const that = this;\n        return (\n<div>\n            <h2>Print Settings</h2>\n            <Tabs defaultActiveKey={EMR_TYPE} size=\"small\" type=\"card\">\n                <TabPane tab={<span><Icon type=\"calculator\" />{EMR_TYPE}</span>} key={EMR_TYPE}>\n                    <Card>\n                        <h4>\n                            <div>\n                                <Tabs size=\"small\" onChange={this.setRandomKey}>\n                                    {EMR_SUB_TYPE.map((item, i) => {\n                                        return (\n<TabPane tab={item.title} key={i}>\n                                            <PrintSettings\n                                              key={(i.toString() == that.state.activeKey.toString() ? item.title + that.state.randomKey : item.title)}\n                                              sub_type={item.title}\n                                              active_practiceId={this.props.active_practiceId}\n                                              type=\"EMR\"\n                                            />\n</TabPane>\n)\n                                    })}\n                                </Tabs>\n                            </div>\n                        </h4>\n                    </Card>\n                </TabPane>\n                <TabPane tab={<span><Icon type=\"audit\" />{BILLING_TYPE}</span>} key={BILLING_TYPE}>\n                    <Card>\n                        <h4>\n                            <div>\n                                <Tabs size=\"small\" onChange={this.setRandomKey}>\n                                    {BILLING_SUB_TYPE.map((item, i) => {\n                                        return (\n<TabPane tab={item.title} key={i}>\n                                            <PrintSettings\n                                              key={(i.toString() == that.state.activeKey.toString() ? item.title + that.state.randomKey : item.title)}\n                                              sub_type={item.title}\n                                              active_practiceId={this.props.active_practiceId}\n                                              type=\"BILLING\"\n                                            />\n</TabPane>\n)\n                                    })}\n                                </Tabs>\n\n                            </div>\n                        </h4>\n                    </Card>\n                </TabPane>\n            </Tabs>\n</div>\n);\n    }\n}\n\nexport default Printout;\n","import React from \"react\";\nimport {Card, Icon, Row, Tabs,Form} from \"antd\";\nimport {INPUT_FIELD, PASSWORD_FIELD} from \"../../../../constants/dataKeys\";\n\nimport DynamicFieldsForm from \"../../../common/DynamicFieldsForm\";\nimport {getAPI, interpolate} from \"../../../../utils/common\";\nimport {EXPENSE_TYPE, SAVE_CREDENTIALS} from \"../../../../constants/api\";\n\nconst {TabPane} = Tabs;\nexport default class IntegrationHome extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            integrateData: [],\n            loading: true,\n        }\n        this.loadData = this.loadData.bind(this);\n    }\n\n    componentWillMount() {\n       const that=this;\n        if (that.props){\n            this.loadData();\n        }\n\n    }\n\n    loadData(){\n        const that=this;\n        const successFn=function (data) {\n            that.setState({\n                integrateData:data,\n                loading:false\n            })\n        }\n        const errorFn=function () {\n            that.setState({\n                loading:false\n            })\n        }\n        getAPI(interpolate(SAVE_CREDENTIALS,[that.props.user.id]),successFn ,errorFn)\n    }\n\n    render() {\n        const that = this;\n        const taskIntegrateFormFields = [{\n            key: 'login',\n            type: INPUT_FIELD,\n            initialValue: this.state.integrateData.login,\n            required: true,\n            label: \"Email Id\"\n        }, {\n            key: 'password',\n            type: PASSWORD_FIELD,\n            initialValue: this.state.integrateData.password,\n            required: true,\n            label: \"Password\"\n        }];\n        const taskIntegrateFormProp = {\n            method : 'post',\n            successFn(data){\n                that.loadData();\n            },\n            errorFn (){\n\n            },\n            action: interpolate(SAVE_CREDENTIALS, [this.props.user.id]),\n        };\n        const TestFormLayout = Form.create()(DynamicFieldsForm);\n        return (\n<Row>\n            <Card>\n                <h2>My Integrations</h2>\n                <Tabs>\n                    <TabPane tab={<span><Icon type=\"check-circle\" />Task Tracker</span>} key=\"Complaints\">\n                        <TestFormLayout fields={taskIntegrateFormFields} formProp={taskIntegrateFormProp} />\n                    </TabPane>\n                    {/* <TabPane tab={<span><Icon type=\"phone\"/>Calling</span>} key=\"observations\"> */}\n                    {/*    /!*<TableData {...this.props} id={EMR_OBSERVATIONS} name=\"Observations\"/>*!/ */}\n                    {/* </TabPane> */}\n                </Tabs>\n\n            </Card>\n</Row>\n)\n    }\n}\n","import React from \"react\";\nimport {Card} from 'antd';\nimport PrintSettings from \"../printout/PrintSettings\";\n\nexport default class MailPDFSettings extends React.Component {\n    constructor(props) {\n        super(props);\n\n    }\n\n    render() {\n        return (\n<div>\n            <h2>Email PDF Settings</h2>\n            <Card>\n                <PrintSettings\n                  sub_type=\"INVOICE\"\n                  active_practiceId={this.props.active_practiceId}\n                  type=\"MAIL\"\n                />\n            </Card>\n</div>\n)\n    }\n}\n","import React from \"react\";\nimport {Card, Form} from \"antd\";\nimport DynamicFieldsForm from \"../../../common/DynamicFieldsForm\";\nimport {\n    INPUT_FIELD,\n    MULTI_SELECT_FIELD,\n    NUMBER_FIELD,\n    SELECT_FIELD,\n    SINGLE_IMAGE_UPLOAD_FIELD,\n    SUCCESS_MSG_TYPE,\n    TEXT_FIELD\n} from \"../../../../constants/dataKeys\";\nimport {displayMessage, getAPI, interpolate} from \"../../../../utils/common\";\nimport {BED_PACKAGES, ROOM_TYPE, TAXES} from \"../../../../constants/api\";\n\nexport default class AddorEditBedPackages extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            editPackage: this.props.editPackage ? this.props.editPackage : null,\n            roomTypes: [],\n            taxes: []\n        }\n    }\n\n    componentDidMount() {\n        this.loadRequiredData();\n        this.loadTaxes();\n    }\n\n    loadRequiredData = () => {\n        const that = this;\n        const successFn = function (data) {\n            that.setState({\n                roomTypes: data,\n            })\n        };\n        const errorFn = function () {\n        };\n        getAPI(interpolate(ROOM_TYPE, [this.props.active_practiceId]), successFn, errorFn);\n\n    }\n\n    loadTaxes() {\n        const that = this;\n        const successFn = function (data) {\n            that.setState({\n                taxes: data,\n            })\n        };\n        const errorFn = function () {\n        };\n        getAPI(interpolate(TAXES, [this.props.active_practiceId]), successFn, errorFn);\n\n    }\n\n    render() {\n        const that = this;\n        const BedPackageForm = Form.create()(DynamicFieldsForm);\n        const fields = [{\n            label: \"Package Name\",\n            key: 'name',\n            required: true,\n            initialValue: this.props.editPackage ? this.props.editPackage.name : null,\n            type: INPUT_FIELD\n        }, {\n            label: \"Days of Booking\",\n            key: 'no_of_days',\n            required: true,\n            initialValue: this.props.editPackage ? this.props.editPackage.no_of_days : null,\n            type: NUMBER_FIELD,\n            follow: 'INR'\n        }, {\n            label: \"Normal Price\",\n            key: 'normal_price',\n            required: true,\n            initialValue: this.props.editPackage ? (this.props.editPackage.normal_price + this.props.editPackage.normal_tax_value).toFixed(2) : null,\n            type: NUMBER_FIELD,\n            follow: 'INR',\n        }, {\n            label: \"Tatkal Price\",\n            key: 'tatkal_price',\n            required: true,\n            initialValue: this.props.editPackage ? (this.props.editPackage.tatkal_price + this.props.editPackage.tatkal_tax_value).toFixed(2) : null,\n            type: NUMBER_FIELD,\n            follow: 'INR'\n        }, {\n            label: \"Image\",\n            key: 'image',\n            initialValue: this.props.editPackage ? this.props.editPackage.image : null,\n            type: SINGLE_IMAGE_UPLOAD_FIELD,\n        }, {\n            label: \"Room Type\",\n            key: 'room',\n            required: true,\n            initialValue: this.props.editPackage ? this.props.editPackage.room : null,\n            type: SELECT_FIELD,\n            options: this.state.roomTypes.map(room => Object.create({label: room.name, value: room.id}))\n        }, {\n            label: \"Taxes\",\n            key: 'taxes',\n            initialValue: this.props.editPackage && this.props.editPackage.taxes ? this.props.editPackage.taxes.map(item => item.id) : [],\n            type: MULTI_SELECT_FIELD,\n            options: this.state.taxes.map(tax => Object.create({\n                label: `${tax.name  }(${  tax.tax_value  }%)`,\n                value: tax.id\n            }))\n        },{\n            label:'Description',\n            key:'description',\n            initialValue:this.props.editPackage  ?this.props.editPackage.description:'',\n            type:TEXT_FIELD,\n            minRows:3,\n\n        }];\n        const formProps = {\n            method: \"post\",\n            action: interpolate(BED_PACKAGES, [this.props.active_practiceId]),\n            successFn () {\n                displayMessage(SUCCESS_MSG_TYPE, \"Package Saved Successfully\");\n                if (that.props.loadData)\n                    that.props.loadData();\n                that.props.history.replace('/settings/bed-packages');\n            }, errorFn () {\n\n            }\n        }\n        const defaultValues = [];\n        if (this.state.editPackage) {\n            defaultValues.push({key: 'id', value: this.state.editPackage.id})\n        }\n        return (\n<div>\n            <Card>\n                <BedPackageForm\n                  fields={fields}\n                  formProp={formProps}\n                  defaultValues={defaultValues}\n                  title={this.state.editPackage ? \"Edit Bed Package\" : \"Add Bed Packages\"}\n                  {...this.props}\n                />\n            </Card>\n</div>\n)\n    }\n}\n","import React from \"react\";\nimport {Button, Card, Divider, Icon, Popconfirm} from 'antd';\nimport {Link, Redirect, Route, Switch} from \"react-router-dom\";\nimport CustomizedTable from \"../../../common/CustomizedTable\";\nimport AddorEditBedPackages from \"./AddorEditBedPackages\";\nimport {getAPI, interpolate, makeFileURL, postAPI} from \"../../../../utils/common\";\nimport {BED_PACKAGES} from \"../../../../constants/api\";\n\nexport default class BedPackages extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            loading: false,\n            packages: []\n        }\n    }\n\n    componentDidMount() {\n        this.loadData();\n    }\n\n    loadData = () => {\n        const that = this;\n        const successFn = function (data) {\n            that.setState({\n                loading: false,\n                packages: data\n            })\n        }\n        const errorFn = function () {\n            that.setState({\n                loading: false,\n            })\n        }\n        getAPI(interpolate(BED_PACKAGES, [this.props.active_practiceId]), successFn, errorFn);\n    }\n\n    deleteObject(record) {\n        const that = this;\n        const reqData = record;\n        reqData.is_active = false;\n        const successFn = function (data) {\n            that.loadData();\n        }\n        const errorFn = function () {\n        }\n        postAPI(interpolate(BED_PACKAGES, [this.props.active_practiceId]), reqData, successFn, errorFn);\n    }\n\n    editObject = (record) => {\n        this.setState({\n            editPackage: record,\n            loading: false\n        });\n        this.props.history.push('/settings/bed-packages/edit')\n    }\n\n    render() {\n        const that = this;\n        const columns = [{\n            dataIndex: 'image',\n            key: 'image',\n            render: (value) => value ?\n                <img src={makeFileURL(value)} alt=\"\" style={{maxWidth: 200, maxHeight: 100}} /> : null\n        }, {\n            title: \"Package Name\",\n            dataIndex: 'name',\n            key: 'name'\n        }, {\n            title: \"Days\",\n            dataIndex: 'no_of_days',\n            key: 'no_of_days'\n        }, {\n            title: \"Normal Price+tax (INR)\",\n            dataIndex: 'normal_price',\n            key: 'normal_price',\n            render: (value, record) => (<p>{(record.normal_price + record.normal_tax_value).toFixed(2)}</p>\n\n            ),\n        }, {\n            title: \"Tatkal Price+tax (INR)\",\n            dataIndex: 'tatkal_price',\n            key: 'tatkal_price',\n            render: (value, record) => (<p>{(record.tatkal_price + record.tatkal_tax_value).toFixed(2)}</p>)\n        },{\n            title:'Description',\n            dataIndex:'description',\n            key:'description'\n        }, {\n            title: 'Action',\n            key: 'action',\n            render: (text, record) => (\n                <span>\n                    <a onClick={() => this.editObject(record)}>\n                Edit</a>\n                <Divider type=\"vertical\" />\n                  <Popconfirm\n                    title=\"Are you sure delete this prescription?\"\n                    onConfirm={() => that.deleteObject(record)}\n                    okText=\"Yes\"\n                    cancelText=\"No\"\n                  >\n                      <a>Delete</a>\n                  </Popconfirm>\n                </span>\n            ),\n        }]\n        return (\n<Switch>\n            <Route\n              path=\"/settings/bed-packages/add\"\n              render={(route) => (\n<AddorEditBedPackages\n  {...this.props}\n  {...route}\n  loadData={this.loadData}\n/>\n)}\n            />\n            <Route\n              path=\"/settings/bed-packages/edit\"\n              render={(route) => (this.state.editPackage ?\n                       <AddorEditBedPackages {...this.state} {...this.props} {...route} loadData={this.loadData} /> :\n                       <Redirect to=\"/settings/bed-packages\" />)}\n            />\n            <Route>\n                <Card\n                  title={(\n<h4>Bed Packages <Link to=\"/settings/bed-packages/add\"><Button\n  style={{float: 'right'}}\n  type=\"primary\"\n><Icon\n  type=\"plus\"\n/> Add\n                                                       </Button>\n                 </Link>\n</h4>\n)}\n                >\n                    <CustomizedTable\n                      dataSource={this.state.packages}\n                      loading={this.state.loading}\n                      columns={columns}\n                    />\n                </Card>\n            </Route>\n</Switch>\n)\n    }\n}\n","import React from \"react\";\nimport {Button, Card, Divider, Form, Modal, Popconfirm} from \"antd\";\nimport DynamicFieldsForm from \"../../../common/DynamicFieldsForm\";\nimport {INPUT_FIELD, NUMBER_FIELD, SUCCESS_MSG_TYPE} from \"../../../../constants/dataKeys\";\nimport {ROOM_TYPE} from \"../../../../constants/api\";\nimport {displayMessage, getAPI, interpolate, postAPI} from \"../../../../utils/common\";\nimport CustomizedTable from \"../../../common/CustomizedTable\";\n\nclass RoomTypes extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            redirect: false,\n            visible: false,\n            rooms: null,\n            loading: true,\n            showDeleted: false,\n            deletedLoading: false,\n            deletedRooms: [],\n            editObj: {}\n        };\n        this.loadData = this.loadData.bind(this);\n        this.deleteObject = this.deleteObject.bind(this);\n\n    }\n\n    componentDidMount() {\n        this.loadData();\n    }\n\n    loadData(deleted = false) {\n        const that = this;\n        const successFn = function (data) {\n            console.log(\"get table\");\n            if (deleted) {\n                that.setState({\n                    deletedRooms: data,\n                    deletedLoading: false\n                })\n            } else {\n                that.setState({\n                    rooms: data,\n                    loading: false\n                })\n            }\n        };\n        const errorFn = function () {\n            if (deleted) {\n                that.setState({\n                    deletedLoading: false\n                })\n            } else {\n                that.setState({\n                    loading: false\n                })\n            }\n        };\n        if (deleted) {\n            getAPI(interpolate(ROOM_TYPE, [this.props.active_practiceId]), successFn, errorFn, {\n                deleted: true,\n                practice: this.props.active_practiceId\n            });\n        } else {\n            getAPI(interpolate(ROOM_TYPE, [this.props.active_practiceId]), successFn, errorFn);\n        }\n    }\n\n    changeRedirect() {\n        const redirectVar = this.state.redirect;\n        this.setState({\n            redirect: !redirectVar,\n        });\n    }\n\n    editTax(value) {\n        this.setState({\n            editObj: value,\n            visible: true\n        })\n    }\n\n    handleCancel = () => {\n        this.setState({visible: false});\n    }\n\n    deleteObject(record, type) {\n        const that = this;\n        const reqData = record;\n        reqData.is_active = type;\n        const successFn = function (data) {\n            that.loadData();\n            if (that.state.showDeleted) {\n                that.loadData(true);\n            }\n        }\n        const errorFn = function () {\n        };\n        postAPI(interpolate(ROOM_TYPE, [this.props.active_practiceId]), reqData, successFn, errorFn)\n    }\n\n    showDeletedExpenses = () => {\n        this.setState({\n            showDeleted: true,\n            deletedLoading: true\n        });\n        this.loadData(true)\n    }\n\n    render() {\n        const that = this;\n        const columns = [{\n            title: 'Room Type',\n            dataIndex: 'name',\n            key: 'name',\n        },{\n            title: 'Normal Bed Count',\n            dataIndex: 'normal_seats',\n            key: 'normal_seats',\n        },{\n            title: 'Tatkal Bed Count',\n            dataIndex: 'tatkal_seats',\n            key: 'tatkal_seats',\n        }, {\n            title: 'Action',\n            key: 'action',\n            render: (text, record) => (\n                record.is_active ? (\n<span>\n\n              <a onClick={() => this.editTax(record)}>  Edit</a>\n                <Divider type=\"vertical\" />\n                <Popconfirm\n                  title=\"Are you sure to delete this?\"\n                  onConfirm={() => that.deleteObject(record, false)}\n                  okText=\"Yes\"\n                  cancelText=\"No\"\n                >\n                  <a>Delete</a>\n                </Popconfirm>\n</span>\n) : (\n<span>\n                    <Popconfirm\n                      title=\"Are you sure show this?\"\n                      onConfirm={() => that.deleteObject(record, true)}\n                      okText=\"Yes\"\n                      cancelText=\"No\"\n                    >\n                  <a>Show</a>\n                    </Popconfirm>\n</span>\n)\n            ),\n        }];\n        const fields = [{\n            label: \"Room Type\",\n            key: \"name\",\n            required: true,\n            type: INPUT_FIELD\n        }, {\n            label: \"Normal Bed Count\",\n            key: \"normal_seats\",\n            required: true,\n            type: NUMBER_FIELD,\n            min: 0\n        }, {\n            label: \"Tatkal Bed Count\",\n            key: \"tatkal_seats\",\n            required: true,\n            type: NUMBER_FIELD,\n            min: 0\n        },];\n        const editfields = [{\n            label: \"Room Type\",\n            key: \"name\",\n            required: true,\n            initialValue: this.state.editObj.name,\n            type: INPUT_FIELD\n        }, {\n            label: \"Normal Bed Count\",\n            key: \"normal_seats\",\n            required: true,\n            initialValue: this.state.editObj.normal_seats,\n            type: NUMBER_FIELD,\n            min: 0\n        }, {\n            label: \"Tatkal Bed Count\",\n            required: true,\n            initialValue: this.state.editObj.tatkal_seats,\n            key: \"tatkal_seats\",\n            type: NUMBER_FIELD,\n            min: 0\n        },];\n        const formProp = {\n            successFn (data) {\n                that.handleCancel();\n                that.loadData();\n                console.log(data);\n                console.log(\"sucess\");\n                displayMessage(SUCCESS_MSG_TYPE, \"success\");\n            },\n            errorFn () {\n\n            },\n            action: interpolate(ROOM_TYPE, [this.props.active_practiceId]),\n            method: \"post\",\n        }\n        const defaultValues = [{\"key\": \"practice\", \"value\": this.props.active_practiceId}];\n        const editFormDefaultValues = [{\"key\": \"practice\", \"value\": this.props.active_practiceId}, {\n            \"key\": \"id\",\n            \"value\": this.state.editObj.id\n        }];\n        const TestFormLayout = Form.create()(DynamicFieldsForm);\n        return (\n<div>\n            <h2>Room Types</h2>\n            <Card>\n                <TestFormLayout defaultValues={defaultValues} formProp={formProp} fields={fields} />\n                <Divider />\n                <CustomizedTable loading={this.state.loading} columns={columns} dataSource={this.state.rooms} />\n                {/* {this.state.showDeleted ? */}\n                {/* <div> */}\n                {/* <CustomizedTable loading={this.state.deletedLoading} columns={columns} */}\n                {/* dataSource={this.state.deletedExpenses}/> */}\n                {/* </div> : */}\n                {/* <h4><a onClick={() => this.showDeletedExpenses()}>Show Deleted Expenses</a></h4>} */}\n            </Card>\n            <Modal\n              visible={this.state.visible}\n              footer={null}\n              onCancel={this.handleCancel}\n            >\n\n                <TestFormLayout\n                  title=\"Edit Room Type\"\n                  defaultValues={editFormDefaultValues}\n                  formProp={formProp}\n                  fields={editfields}\n                />\n                <Button key=\"back\" onClick={this.handleCancel}>Return</Button>,\n\n            </Modal>\n</div>\n)\n    }\n}\n\nexport default RoomTypes;\n","import React from \"react\";\nimport {Form, Card, message} from \"antd\";\nimport {Redirect} from 'react-router-dom'\nimport DynamicFieldsForm from \"../../../common/DynamicFieldsForm\";\nimport {\n    CHECKBOX_FIELD,\n    SUCCESS_MSG_TYPE,\n    INPUT_FIELD,\n    RADIO_FIELD,\n    NUMBER_FIELD,\n    SELECT_FIELD\n} from \"../../../../constants/dataKeys\";\nimport {OFFERS} from \"../../../../constants/api\";\nimport {getAPI, displayMessage, deleteAPI, interpolate} from \"../../../../utils/common\";\n\n\nclass AddOffer extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            redirect: false,\n            fields: [{\n                label: \"Offer Name \",\n                key: \"code\",\n                placeholder:\"Offer Name\",\n                required: true,\n                type: INPUT_FIELD\n            }, {\n                label: \"Description \",\n                key: \"description\",\n                placeholder:\"E.g. 20% off on all services\",\n                type: INPUT_FIELD\n            }, {\n                label: \"Discount\",\n                key: \"discount\",\n                required: true,\n                type: NUMBER_FIELD,\n                // follow:'%'\n            }, {\n                label: \"Discount Unit\",\n                key: 'unit',\n                required: true,\n                options: [{label: 'Percent', value: '%'}, {label: 'Rupees', value: 'INR'}],\n                type: SELECT_FIELD,\n                initialValue: '%'\n            }]\n        }\n        this.changeRedirect = this.changeRedirect.bind(this);\n\n    }\n\n    changeRedirect() {\n        const redirectVar = this.state.redirect;\n        this.setState({\n            redirect: !redirectVar,\n        });\n    }\n\n    render() {\n        const that = this;\n        const formProp = {\n            successFn (data) {\n                displayMessage(SUCCESS_MSG_TYPE, \"success\")\n                if (that.props.loadData)\n                    that.props.loadData();\n                if (that.props.history){\n                    that.props.history.replace(\"/settings/loyalty\");\n                }\n            },\n            errorFn () {\n\n            },\n            action: interpolate(OFFERS, [this.props.active_practiceId]),\n            method: \"post\",\n            beforeSubmit (data) {\n                console.log(data)\n            }\n        }\n        const TestFormLayout = Form.create()(DynamicFieldsForm);\n        return (\n<div>\n            <TestFormLayout\n              formProp={formProp}\n              fields={this.state.fields}\n              {...this.props}\n            />\n            {this.state.redirect && <Redirect to='/settings/loyalty' />}\n\n</div>\n)\n    }\n}\n\nexport default AddOffer;\n","import React from \"react\";\nimport {Button, Card, Divider, Icon, Popconfirm, Row,} from \"antd\";\nimport {Link} from \"react-router-dom\";\nimport {OFFERS} from \"../../../../constants/api\";\nimport {getAPI, interpolate, postAPI} from \"../../../../utils/common\";\nimport CustomizedTable from \"../../../common/CustomizedTable\";\nimport AddOffer from \"./AddOffer\";\n\nclass Offers extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            offers: null,\n            loading: true\n        }\n        this.loadData = this.loadData.bind(this);\n        this.deleteObject = this.deleteObject.bind(this);\n    }\n\n    componentWillMount() {\n        this.loadData()\n    }\n\n    loadData() {\n        const that = this;\n        const successFn = function (data) {\n            console.log(\"get table\");\n            that.setState({\n                offers: data,\n                loading: false\n            })\n        };\n        const errorFn = function () {\n            that.setState({\n                loading: true\n            })\n        };\n        getAPI(interpolate(OFFERS, [this.props.active_practiceId]), successFn, errorFn);\n    }\n\n    deleteObject(record) {\n        const that = this;\n        const reqData = record;\n        reqData.is_active = false;\n        const successFn = function (data) {\n            that.loadData();\n        }\n        const errorFn = function () {\n        }\n        postAPI(interpolate(OFFERS, [this.props.active_practiceId]), reqData, successFn, errorFn);\n    }\n\n    render() {\n        const that = this;\n        const columns = [{\n            title: 'Name',\n            dataIndex: 'code',\n            key: 'code',\n        }, {\n            title: 'Description',\n            dataIndex: 'description',\n            key: 'description',\n        }, {\n            title: 'Discount',\n            dataIndex: 'discount',\n            key: 'discount',\n        }, {\n            title: 'Discount Unit',\n            dataIndex: 'unit',\n            key: 'unit'\n        }, {\n            title: 'Action',\n            key: 'action',\n            render: (text, record) => (\n                <Popconfirm\n                  title=\"Are you sure delete this Offer?\"\n                  onConfirm={() => that.deleteObject(record)}\n                  okText=\"Yes\"\n                  cancelText=\"No\"\n                >\n                    <a>\n                        Delete\n                    </a>\n                </Popconfirm>\n            ),\n        }];\n        return (\n<Row>\n            {/* <h2>All Offers */}\n            {/* <Link to=\"/settings/loyalty/add\"> */}\n            {/* <Button type=\"primary\" style={{float: 'right'}}> */}\n            {/* <Icon type=\"plus\"/>&nbsp;Add */}\n            {/* </Button> */}\n            {/* </Link> */}\n            {/* </h2> */}\n            <AddOffer {...this.props} loadData={this.loadData} />\n            <Divider />\n            <CustomizedTable loading={this.state.loading} columns={columns} dataSource={this.state.offers} />\n</Row>\n)\n    }\n}\n\nexport default Offers;\n","import React from \"react\";\nimport {Form, Row} from 'antd';\nimport DynamicFieldsForm from \"../../../common/DynamicFieldsForm\";\nimport {INPUT_FIELD, NUMBER_FIELD, SUCCESS_MSG_TYPE} from \"../../../../constants/dataKeys\";\nimport {MEMBERSHIP_API, OFFERS} from \"../../../../constants/api\";\nimport {displayMessage, interpolate} from \"../../../../utils/common\";\n\nexport default class AddMembership extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {}\n    }\n\n    render() {\n        const fields = [{\n            label: \"Membership Name \",\n            key: \"name\",\n            placeholder:\"Membership Name\",\n            required: true,\n            type: INPUT_FIELD\n        }, {\n            label: \"Fee\",\n            key: \"fee\",\n            required: true,\n            type: NUMBER_FIELD,\n            follow: 'INR'\n        }, {\n            label: \"Benefit\",\n            key: \"benefit\",\n            required: true,\n            type: NUMBER_FIELD,\n            follow: '%'\n        }, {\n            label: \"Validity\",\n            key: 'validity',\n            required: true,\n            type: NUMBER_FIELD,\n            follow: 'Months',\n\n        }];\n        const that = this;\n        const formProp = {\n            successFn (data) {\n                displayMessage(SUCCESS_MSG_TYPE, \"success\")\n                if (that.props.loadData)\n                    that.props.loadData();\n                if (that.props.history){\n                    that.props.history.replace(\"/settings/loyalty\");\n                }\n            },\n            errorFn () {\n\n            },\n            action: interpolate(MEMBERSHIP_API, [this.props.active_practiceId]),\n            method: \"post\",\n        };\n        const formDefaultValues = [{\"key\": \"practice\", \"value\": this.state.active_practiceId}];\n        const AddForm = Form.create()(DynamicFieldsForm);\n        return (\n<Row>\n            <AddForm fields={fields} formProp={formProp} defaultValues={formDefaultValues} {...this.props} />\n</Row>\n)\n    }\n}\n","import React from \"react\";\nimport {Divider, Popconfirm, Row} from 'antd';\nimport CustomizedTable from \"../../../common/CustomizedTable\";\nimport {getAPI, interpolate, postAPI, putAPI} from \"../../../../utils/common\";\nimport {MEMBERSHIP_API, OFFERS} from \"../../../../constants/api\";\nimport AddMembership from \"./AddMembership\";\n\nexport default class Membership extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            membership: []\n        }\n    }\n\n    componentDidMount() {\n        this.loadData();\n    }\n\n    loadData = () => {\n        const that = this;\n        const successFn = function (data) {\n            that.setState({\n                membership: data\n            })\n        }\n        const errorFn = function () {\n\n        }\n        getAPI(MEMBERSHIP_API, successFn, errorFn);\n    }\n\n    deleteObject(record) {\n        const that = this;\n        const reqData = {\n            is_active:false,\n            id:record.id,\n        };\n        const successFn = function (data) {\n            that.loadData();\n        }\n        const errorFn = function () {\n        }\n        postAPI(MEMBERSHIP_API, reqData, successFn, errorFn);\n    }\n\n    render() {\n        const that = this;\n        const columns = [{\n            title: 'Name',\n            dataIndex: 'name',\n            key: 'name',\n        }, {\n            title: 'Fee (INR)',\n            dataIndex: 'fee',\n            key: 'fee',\n        }, {\n            title: 'Benefit (%)',\n            dataIndex: 'benefit',\n            key: 'benefit',\n        }, {\n            title: 'Validity (Months)',\n            dataIndex: 'validity',\n            key: 'validity'\n        }, {\n            title: 'Action',\n            key: 'action',\n            render: (text, record) => (\n                <Popconfirm\n                  title=\"Are you sure delete this prescription?\"\n                  onConfirm={() => that.deleteObject(record)}\n                  okText=\"Yes\"\n                  cancelText=\"No\"\n                >\n                    <a>\n                        Delete\n                    </a>\n                </Popconfirm>\n            ),\n        }];\n        return (\n<Row>\n            <AddMembership {...this.props} loadData={this.loadData} />\n            <Divider />\n            <CustomizedTable loading={this.state.loading} columns={columns} dataSource={this.state.membership} />\n</Row>\n)\n    }\n}\n","import React from \"react\";\nimport {Alert, Button, Card, DatePicker, Form, Input, InputNumber, Row, Select} from \"antd\";\nimport moment from \"moment\";\nimport {displayMessage, getAPI, interpolate, postAPI} from \"../../../../../utils/common\";\nimport {PROMO_CODE, SEARCH_PATIENT} from \"../../../../../constants/api\";\nimport {CURRENCY_TYPE} from \"../../../../../constants/hardData\";\nimport {SUCCESS_MSG_TYPE} from \"../../../../../constants/dataKeys\";\n\nclass AddOrEdiPromoCode extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            editPromoCode: [],\n            patientList: [],\n            loading: false,\n        };\n    }\n\n\n    loadPatient = (value) => {\n        const that = this;\n        const successFn = function (data) {\n            if (data.results.length > 0) {\n                that.setState({\n                    patientList: data.results,\n                })\n            }\n        };\n        const errorFn = function () {\n        };\n        if (value) {\n            getAPI(interpolate(SEARCH_PATIENT, [value]), successFn, errorFn);\n        }\n\n    };\n\n    handleSubmit = (e) => {\n        const that = this;\n        that.setState({\n            loading: true\n        });\n        e.preventDefault();\n        this.props.form.validateFields((err, values) => {\n            if (!err) {\n                const reqData = values;\n                reqData.practice = that.props.active_practiceId;\n                const successFn = function (data) {\n                    that.setState({\n                        loading: false,\n                    });\n                    displayMessage(SUCCESS_MSG_TYPE, \"Successfully Created!\")\n                    that.props.form.resetFields();\n                    that.props.loadData();\n                    if (that.props.history){\n                        that.props.history.replace(\"/settings/loyalty\");\n                    }\n                };\n                const errorFn = function () {\n\n                };\n\n                postAPI(PROMO_CODE, reqData, successFn, errorFn)\n\n            }\n        })\n    };\n\n    render() {\n        const {patientList} = this.state;\n\n        const formItemLayout = {\n            labelCol: {span: 8},\n            wrapperCol: {span: 14},\n        };\n        const {getFieldDecorator} = this.props.form;\n\n\n        return (\n<div>\n                <Form onSubmit={this.handleSubmit}>\n                    <Form.Item label=\"Promo Code\" {...formItemLayout} key=\"promo_code\">\n                        {getFieldDecorator('promo_code', {initialValue: ''})\n                        (<Input placeholder=\"Promo Code\" />)}\n                    </Form.Item>\n\n                    <Form.Item label=\"Promo Code Value\" {...formItemLayout} key=\"code_value\">\n                        {getFieldDecorator('code_value', {initialValue: ''})\n                        (<InputNumber placeholder=\"Promo Code Value\" />)}\n                    </Form.Item>\n\n                    <Form.Item label=\"Code Type\" {...formItemLayout} key=\"code_type\">\n                        {getFieldDecorator('code_type', {initialValue: ''})\n                        (<Select placeholder=\"Code Type\" style={{width: '100%'}}>\n\n                            {CURRENCY_TYPE.map(option => (\n                                <Select.Option\n                                  value={option.value}\n                                >{option.label} ({option.value})\n                                </Select.Option>\n))}\n                         </Select>)}\n                    </Form.Item>\n\n                    <Form.Item label=\"Min Order\" {...formItemLayout} key=\"minimum_order\">\n                        {getFieldDecorator('minimum_order', {initialValue: ''})\n                        (<InputNumber placeholder=\"Min Order\" />)}\n                    </Form.Item>\n\n                    <Form.Item label=\"Max Discount\" {...formItemLayout} key=\"maximum_discount\">\n                        {getFieldDecorator('maximum_discount', {initialValue: ''})\n                        (<InputNumber placeholder=\"Min Order\" />)}\n                    </Form.Item>\n\n                    <Form.Item label=\"Expiry Date\" {...formItemLayout} key=\"expiry_date\">\n\n                        {getFieldDecorator('expiry_date', {initialValue: moment()})\n                        (<DatePicker format=\"YYYY/MM/DD\" allowClear={false} />)}\n                    </Form.Item>\n\n\n                    <Form.Item label=\"Patients\" {...formItemLayout} key=\"patient\">\n                        {getFieldDecorator('patients', {initialValue: []})\n                        (<Select\n                          mode=\"multiple\"\n                          placeholder=\"Select Patient\"\n                          style={{width: '100%'}}\n                          showSearch\n                          onSearch={this.loadPatient}\n                          filterOption={false}\n                        >\n                            {patientList.map(option => (\n                                <Select.Option\n                                  value={option.id}\n                                >{option.user.first_name} ({option.custom_id})\n                                </Select.Option>\n))}\n                         </Select>)}\n                        <span className=\"ant-form-text\">If no patient is selected, promo code will be available to all patients.</span>\n                    </Form.Item>\n\n                    <Form.Item {...formItemLayout}>\n                        <Button type=\"primary\" htmlType=\"submit\" style={{margin: 5}}>\n                            Submit\n                        </Button>\n                        {this.props.history ? (\n                            <Button style={{margin: 5}} onClick={() => this.props.history.goBack()}>\n                                Cancel\n                            </Button>\n                          ) : null}\n                    </Form.Item>\n\n                </Form>\n</div>\n        )\n    }\n}\n\nexport default Form.create()(AddOrEdiPromoCode);\n","import React from \"react\";\nimport {Divider, Popconfirm, Row, Table} from \"antd\";\nimport moment from \"moment\";\nimport AddOrEdiPromoCode from \"./AddOrEdiPromoCode\";\nimport {getAPI, interpolate, postAPI, putAPI} from \"../../../../../utils/common\";\nimport {PROMO_CODE, SEND_PROMO_CODE_SMS, SINGLE_PROMO_CODE} from \"../../../../../constants/api\";\nimport InfiniteFeedLoaderButton from \"../../../../common/InfiniteFeedLoaderButton\";\n\n\nexport default class PromoCode extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            loading: false,\n            promoCode: [],\n        };\n\n    }\n\n    componentWillMount() {\n        this.loadData();\n    }\n\n    loadData = (page = 1) => {\n        const that = this;\n        this.setState({\n            loading: true,\n        });\n\n        const successFn = function (data) {\n            that.setState({\n                promoCode: data.results,\n                nextPage: data.next,\n                loading: false,\n            })\n        };\n        const errorFn = function () {\n            that.setState({\n                loading: false,\n            })\n        };\n\n        getAPI(interpolate(PROMO_CODE, [this.props.active_practiceId]), successFn, errorFn, {\n            page,\n            practice: this.props.active_practiceId\n        });\n    };\n\n    deleteObject = (record) => {\n        const that = this;\n        const reqData = {\n            // id:record.id,\n            is_active: false\n        };\n        const successFn = function (data) {\n            that.loadData();\n        };\n\n        const errorFn = function () {\n\n        };\n        putAPI(interpolate(SINGLE_PROMO_CODE, [record.id]), reqData, successFn, errorFn);\n    };\n\n    sendSMS = (record) => {\n        const that = this;\n\n        const successFn = function (data) {\n            that.loadData();\n        };\n\n        const errorFn = function () {\n\n        };\n        getAPI(interpolate(SEND_PROMO_CODE_SMS, [record.id]),  successFn, errorFn);\n    };\n\n    render() {\n        const {promoCode, loading} = this.state;\n\n        const columns = [\n            {\n                title: 'Code Name',\n                dataIndex: 'promo_code',\n                key: 'promo_code',\n            }, {\n                title: 'Promo Code Value',\n                dataIndex: 'code_value',\n                key: 'code_value',\n            }, {\n                title: 'Type',\n                dataIndex: 'code_type',\n                key: 'code_type',\n            }, {\n                title: 'Min Order',\n                dataIndex: 'minimum_order',\n                key: 'minimum_order',\n\n            }, {\n                title: 'Max Discount',\n                dataIndex: 'maximum_discount',\n                key: 'maximum_discount',\n\n            }, {\n                title: 'Expiry Date',\n                dataIndex: 'expiry_date',\n                render: (item, record) => (moment(record.expiry_date).format('YYYY-MM-DD'))\n            }, {\n                title: 'Action',\n                render: (text, record) => (\n                    <div>\n                        <Popconfirm\n                          title=\"Are you sure send SMS for this promo code?\"\n                          onConfirm={() => this.sendSMS(record)}\n                          okText=\"Yes\"\n                          cancelText=\"No\"\n                        >\n                            <a>\n                                Send SMS\n                            </a>\n                        </Popconfirm>\n                        <Divider type=\"vertical\" />\n                        <Popconfirm\n                          title=\"Are you sure delete this promo code?\"\n                          onConfirm={() => this.deleteObject(record)}\n                          okText=\"Yes\"\n                          cancelText=\"No\"\n                        >\n                            <a>\n                                Delete\n                            </a>\n                        </Popconfirm>\n                    </div>\n                ),\n            }\n\n        ];\n        return (\n            <Row>\n                <AddOrEdiPromoCode {...this.props} loadData={this.loadData} />\n                <Divider />\n                <Table loading={loading} columns={columns} dataSource={promoCode} pagination={false} />\n                <InfiniteFeedLoaderButton\n                  loading={this.state.loading}\n                  hidden={!this.state.nextPage}\n                  loaderFunction={() => this.loadData(this.state.nextPage)}\n                />\n            </Row>\n        )\n    }\n}\n\n","import React from \"react\";\nimport {Card, Tabs, Row, Icon} from 'antd';\nimport Offers from \"./Offers\";\nimport Membership from \"./Membership\";\nimport PromoCode from \"./promo-code/PromoCode\";\n\nconst {TabPane} = Tabs;\n\nexport default class LoyaltySettings extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {}\n    }\n\n    render() {\n        return (\n<Row>\n            <h2>Loyalty Settings</h2>\n            <Card>\n                <Tabs>\n                    <TabPane tab={<span><Icon type=\"percentage\" />Offers</span>} key=\"#offers\">\n                        <Offers {...this.props} />\n                    </TabPane>\n\n                    <TabPane tab={<span><Icon type=\"pound\" />Membership</span>} key=\"#membership\">\n                        <Membership {...this.props} />\n                    </TabPane>\n\n                    <TabPane tab={<span><Icon type=\"pound\" />Promo Code</span>} key=\"#promocode\">\n                        <PromoCode {...this.props} />\n                    </TabPane>\n                </Tabs>\n            </Card>\n</Row>\n)\n    }\n}\n","import React from \"react\";\nimport {Card, Divider, Row,Form} from \"antd\";\nimport {Redirect, Route} from \"react-router-dom\";\nimport DynamicFieldsForm from \"../../../common/DynamicFieldsForm\";\n\nimport {\n    INPUT_FIELD,\n    NUMBER_FIELD,\n    SELECT_FIELD,\n    SUCCESS_MSG_TYPE, TEXT_FIELD\n} from \"../../../../constants/dataKeys\";\nimport {displayMessage, getAPI, interpolate} from \"../../../../utils/common\";\nimport {LABTEST_API, PRODUCT_MARGIN} from \"../../../../constants/api\";\n\nexport default class AddorEditLab extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            redirect: false,\n            editFields: (this.props.editTest ? this.props.editTest : null),\n            productMargin: []\n        }\n        this.changeRedirect = this.changeRedirect.bind(this);\n        this.loadProductMargin();\n    }\n\n    changeRedirect() {\n        const redirectVar = this.state.redirect;\n        this.setState({\n            redirect: !redirectVar,\n            editFields: {},\n        });\n    }\n\n    loadProductMargin() {\n        const that = this;\n        const successFn = function (data) {\n            that.setState({\n                productMargin: data\n            })\n        }\n        const errorFn = function () {\n\n        }\n        getAPI(PRODUCT_MARGIN, successFn, errorFn);\n    }\n\n    render() {\n        const that = this;\n        const TestFormLayout = Form.create()(DynamicFieldsForm);\n        const fields = [{\n            label: \"Test Name\",\n            key: \"name\",\n            placeholder:\"Test Name\",\n            type: INPUT_FIELD,\n            initialValue: (this.state.editFields ? this.state.editFields.name : null),\n            required: true\n        }, {\n            label: \"Cost\",\n            key: \"cost\",\n            type: NUMBER_FIELD,\n            initialValue: (this.state.editFields ? this.state.editFields.cost : null),\n            required: true,\n            follow: 'INR',\n            min: 1\n        }, {\n            label: 'MLM Margin Type',\n            type: SELECT_FIELD,\n            initialValue: (this.state.editFields ? this.state.editFields.margin : null),\n            key: 'margin',\n            required: true,\n            options: that.state.productMargin.map(margin => ({label: margin.name, value: margin.id}))\n        }, {\n            label: \"Instructions\",\n            key: \"instruction\",\n            placeholder:\"Test Instructions\",\n            initialValue: (this.state.editFields ? this.state.editFields.instruction : null),\n            type: TEXT_FIELD,\n        }];\n        const formProp = {\n            successFn (data) {\n                displayMessage(SUCCESS_MSG_TYPE, \"success\")\n                that.props.loadData();\n                if (that.props.history){\n                    that.props.history.replace(\"/settings/labs\");\n                }\n            },\n            errorFn () {\n\n            },\n            action: interpolate(LABTEST_API, [that.props.active_practiceId]),\n            method: \"post\",\n        };\n        const defaultValues = [];\n        if (this.state.editFields)\n            defaultValues.push({'key': 'id', 'value': this.state.editFields.id});\n        return (\n<Row>\n            <Route\n              exact\n              path='/settings/labs/add'\n              render={(route) => (\n<TestFormLayout\n  title=\"Add Lab\"\n  changeRedirect={this.changeRedirect}\n  formProp={formProp}\n  fields={fields}\n  {...route}\n/>\n)}\n            />\n            <Route\n              exact\n              path='/settings/labs/edit'\n              render={(route) => (this.state.editFields ? (\n                       <TestFormLayout\n                         title=\"Add Lab\"\n                         defaultValues={defaultValues}\n                         changeRedirect={this.changeRedirect}\n                         {...route}\n                         formProp={formProp}\n                         fields={fields}\n                       />\n                     ) : <Redirect to=\"/settings/labs\" />)}\n            />\n            <Divider />\n            {this.state.redirect && <Redirect to=\"/settings/labs\" />}\n</Row>\n)\n    }\n}\n","import React from \"react\";\nimport {Button, Card, Divider, Form, Icon, Popconfirm, Row, Table} from \"antd\";\nimport {Link, Route, Switch} from \"react-router-dom\";\nimport DynamicFieldsForm from \"../../../common/DynamicFieldsForm\";\nimport {CHECKBOX_FIELD, INPUT_FIELD, RADIO_FIELD, SELECT_FIELD} from \"../../../../constants/dataKeys\";\nimport {LABTEST_API, OFFERS, PRODUCT_MARGIN} from \"../../../../constants/api\";\nimport {getAPI, deleteAPI, interpolate, postAPI} from \"../../../../utils/common\";\nimport AddorEditLab from \"./AddorEditLab\";\nimport CustomizedTable from \"../../../common/CustomizedTable\";\nimport InfiniteFeedLoaderButton from \"../../../common/InfiniteFeedLoaderButton\";\n\nclass LabTest extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            tests: null,\n            editTest: null,\n            loading: true,\n            productMargin: null\n        };\n        this.editLabs = this.editLabs.bind(this);\n        this.loadData = this.loadData.bind(this);\n        this.deleteTest = this.deleteTest.bind(this);\n        this.loadProductMargin = this.loadProductMargin.bind(this);\n    }\n\n    componentDidMount() {\n        this.loadData();\n        this.loadProductMargin();\n    }\n\n    loadData(page=1) {\n        const that = this;\n        const successFn = function (data) {\n            console.log(\"get table\");\n            if(data.current)\n            that.setState({\n                next:data.next,\n                tests: data.results,\n                loading: false\n            })\n            else{\n                that.setState(function(prevState){return {\n                    next: data.next,\n                    tests: [...prevState.tests,...data.results],\n                    loading: false\n                }})\n            }\n        };\n        const errorFn = function () {\n            that.setState({\n                loading: false\n            })\n        };\n        getAPI(interpolate(LABTEST_API, [that.props.active_practiceId]), successFn, errorFn);\n    }\n\n    editLabs(record) {\n        const that = this;\n        this.setState({\n            editTest: record,\n            loading: false\n        }, function () {\n            that.props.history.push('/settings/labs/edit');\n        })\n\n\n    }\n\n    deleteTest(record) {\n        const that = this;\n        const reqData = record;\n        reqData.is_active = false;\n        const successFn = function (data) {\n            that.loadData();\n        }\n        const errorFn = function () {\n        }\n        postAPI(interpolate(LABTEST_API, [this.props.active_practiceId]), reqData, successFn, errorFn);\n    }\n\n    loadProductMargin() {\n        const that = this;\n        const successFn = function (data) {\n            that.setState({\n                productMargin: data\n            })\n        }\n        const errorFn = function () {\n\n        }\n        getAPI(PRODUCT_MARGIN, successFn, errorFn);\n    }\n\n    render() {\n        const that = this;\n        const product_margin = {}\n        if (this.state.productMargin) {\n            this.state.productMargin.forEach(function (margin) {\n                product_margin[margin.id] = (margin.name)\n            })\n        }\n        const columns = [{\n            title: 'Name',\n            dataIndex: 'name',\n            key: 'code',\n        }, {\n            title: 'Cost',\n            dataIndex: 'cost',\n            key: 'cost',\n        }, {\n            title: ' Test Instructions',\n            dataIndex: 'instruction',\n            key: 'instruction',\n        }, {\n            title: ' MLM Margin',\n            key: 'margin',\n            render: (text, record) => (\n                <span> {product_margin[record.margin]}</span>\n            )\n        }, {\n            title: 'Action',\n            key: 'action',\n            render: (text, record) => (\n                <span><a onClick={() => that.editLabs(record)}>\n                Edit\n                      </a>\n                <Divider type=\"vertical\" />\n                    <Popconfirm\n                      title=\"Are you sure delete this test?\"\n                      onConfirm={() => that.deleteTest(record)}\n                      okText=\"Yes\"\n                      cancelText=\"No\"\n                    >\n                        <a>Delete</a>\n                    </Popconfirm>\n                </span>\n            ),\n        }];\n        return (\n<Row>\n            <Route\n              exact\n              path=\"/settings/labs/add\"\n              render={(route) => (\n<AddorEditLab\n  {...that.state}\n  loadData={this.loadData}\n  {...this.props}\n  {...route}\n/>\n)}\n            />\n            <Route\n              exact\n              path=\"/settings/labs/edit\"\n              render={(route) => (\n<AddorEditLab\n  {...that.state}\n  loadData={this.loadData}\n  {...this.props}\n  {...route}\n/>\n)}\n            />\n            <Route exact path=\"/settings/labs\">\n                <div>\n                    <Row>\n                        <h2>\n                            <Link to=\"/settings/labs/add\">\n                                <Button type=\"primary\" style={{float: 'right'}}>\n                                    <Icon type=\"plus\" />&nbsp;Add\n                                </Button>\n                            </Link>\n                        </h2>\n                    </Row>\n                    <CustomizedTable columns={columns} dataSource={this.state.tests} pagination={false} />\n                    <InfiniteFeedLoaderButton loading={this.state.loading} hidden={!this.state.next} loaderFunction={()=>this.loadData(this.state.next)} />\n                </div>\n            </Route>\n\n</Row>\n)\n    }\n}\n\nexport default LabTest;\n","import React from \"react\";\nimport {Card, Divider, Row, Col, Input,Button,InputNumber,Select,Form} from \"antd\";\nimport {Redirect, Route} from \"react-router-dom\";\nimport DynamicFieldsForm from \"../../../common/DynamicFieldsForm\";\nimport {LABTEST_API,LABPANEL_API} from \"../../../../constants/api\";\nimport {displayMessage, getAPI,postAPI ,interpolate,} from \"../../../../utils/common\";\n\nimport {WARNING_MSG_TYPE} from \"../../../../constants/dataKeys\";\n\nconst { Option } = Select;\nclass AddorEditLab extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n           panelCost:0,\n           tests:[],\n           selectedTest:{},\n        //    redirect:false,\n        };\n        this.loadTests = this.loadTests.bind(this);\n        this.handleCancel = this.handleCancel.bind(this);\n    }\n\n    componentDidMount() {\n        this.loadTests();\n    }\n\n    loadTests(){\n        const that = this;\n        const successFn = function (data) {\n            that.setState({\n                tests: data.results,\n                loading: false\n            })\n            console.log(JSON.stringify(that.state.tests));\n        };\n        const errorFn = function () {\n            that.setState({\n                loading: false\n            })\n        };\n        getAPI(interpolate(LABTEST_API, [that.props.active_practiceId]), successFn, errorFn);\n    }\n\n\n    onChangeHandler=(value)=>{\n        this.setState({\n\n            panelCost:value,\n        })\n    }\n\n    onChangeSelect = (e)=>{\n        this.setState(function(prevState){\n            if(prevState.selectedTest[e]){\n                displayMessage(WARNING_MSG_TYPE, \"Item Already Added\");\n                return {};\n            }\n            let testObject = null;\n            for(let i=0;i<prevState.tests.length;i++){\n                if(prevState.tests[i].id==e){\n                    testObject = prevState.tests[i];\n                    break;\n                }\n            }\n            if(testObject){\n                return {selectedTest:{...prevState.selectedTest,[e]:testObject}}\n            }\n          return {}\n\n\n        })\n\n    }\n\n    removeLabPanel = (id) => {\n        this.setState(function (prevState) {\n            return {\n\n            }\n        });\n        console.log(\"id\",id)\n    }\n\n    handleSubmit = (e) => {\n        e.preventDefault();\n        const that = this;\n        this.props.form.validateFields((err, formData) => {\n            if (!err) {\n                const reqData = {...formData ,tests:Object.keys(this.state.selectedTest)}\n                console.log(\"test\", reqData);\n                const successFn = function (data) {\n                    if (that.props.history){\n                        that.props.history.replace(\"/settings/labs\");\n                    }\n                };\n                const errorFn = function () {\n                };\n                postAPI(interpolate(LABPANEL_API, [that.props.active_practiceId]), reqData, successFn, errorFn);\n            }\n        });\n    }\n\n    onChangeCostCalculate(){\n\n    }\n\n    handleCancel(){\n        this.props.history.push('/settings/labs');\n    }\n\n    render() {\n        const that = this;\n        const formItemLayout = {\n            labelCol: {\n                xs: {span: 8},\n                sm: {span: 8},\n                md: {span: 8},\n                lg: {span: 8},\n            },\n            wrapperCol: {\n                xs: {span: 16},\n                sm: {span: 16},\n                md: {span: 16},\n                lg: {span: 16},\n            },\n        };\n        const testKeys = Object.keys(this.state.selectedTest);\n        let TotalCost =0;\n         testKeys.forEach(function(key){TotalCost+=parseInt(that.state.selectedTest[key].cost)});\n        const {getFieldDecorator} = this.props.form;\n        const testOption = this.state.tests.map((test) => <Select.Option value={test.id}>{test.name}</Select.Option>)\n        return (\n<Row>\n            <Col span={18}>\n                <Form onSubmit={this.handleSubmit}>\n                    <Form.Item label=\"Panel Name\" {...formItemLayout}>\n                        {getFieldDecorator('name', {\n\n                        })(\n                        <Input />\n                        )}\n                    </Form.Item>\n\n                    <Form.Item label={(<span>Test Name</span>)} {...formItemLayout}>\n                        <Select style={{width:'100%'}} onChange={this.onChangeSelect}>\n                            {testOption}\n                        </Select>\n\n                        <div>{testKeys ? testKeys.map((key)=>(\n<p key={key}>{that.state.selectedTest[key].name} <span style={{paddingLeft: '50%'}}>{this.state.selectedTest[key].cost}</span>\n                           <Button\n                             icon=\"close\"\n                             style={{float:'right'}}\n                             onClick={() => this.removeLabPanel(that.state.selectedTest[key].id)}\n                             type=\"danger\"\n                             shape=\"circle\"\n                             size=\"small\"\n                           />\n</p>\n)): null}\n                        </div>\n                    </Form.Item>\n\n                    <Form.Item label={(<span>Panel Cost</span>)} {...formItemLayout}>\n                        {getFieldDecorator('cost', {\n                            initialValue:TotalCost,\n                            // onChange:this.onChangeHandler,\n\n                        })(\n                            <InputNumber />\n\n                        )}\n                         <span className=\"ant-form-text\"> Total : {typeof TotalCost === 'number'  ? TotalCost : 0}</span>\n                    </Form.Item>\n\n                    <Form.Item>\n                        <Button type=\"primary\" htmlType=\"submit\">Submit</Button>\n                        &nbsp;&nbsp;&nbsp;\n                        <Button onClick={this.handleCancel}>Cancel</Button>\n                    </Form.Item>\n                </Form>\n            </Col>\n\n\n</Row>\n)\n    }\n}\nexport default Form.create()(AddorEditLab);\n","import React from \"react\";\nimport {Button, Card, Divider, Form, Icon, Popconfirm, Row, Table} from \"antd\";\nimport {Link, Route, Switch} from \"react-router-dom\";\nimport DynamicFieldsForm from \"../../../common/DynamicFieldsForm\";\nimport {CHECKBOX_FIELD, INPUT_FIELD, RADIO_FIELD, SELECT_FIELD} from \"../../../../constants/dataKeys\";\nimport {LABPANEL_API} from \"../../../../constants/api\";\nimport {getAPI, postAPI, interpolate,} from \"../../../../utils/common\";\nimport AddorEditLabPanel from \"./AddorEditLabPanel\";\nimport CustomizedTable from \"../../../common/CustomizedTable\";\n\nexport default class LabPanel extends React.Component{\n    constructor(props){\n        super(props);\n        this.state = {\n            labPanel:null,\n            editTest:null,\n            selectedTest:{},\n        }\n        this.loadLabPanel = this.loadLabPanel.bind(this);\n        this.editPanels = this.editPanels.bind(this);\n    }\n\n    componentDidMount() {\n        this.loadLabPanel();\n    }\n\n    loadLabPanel(){\n        const that =this;\n        const successFn=function(data){\n            that.setState({\n                labPanel:data,\n                loading:false\n            })\n        };\n        const errorFn = function(){\n            that.setState({\n\n            })\n        };\n        getAPI(interpolate(LABPANEL_API, [that.props.active_practiceId]), successFn, errorFn);\n    }\n\n    editPanels(record) {\n        const that = this;\n        this.setState({\n            editTest: record,\n            loading: false\n        }, function () {\n            that.props.history.push('/settings/labs/edit');\n        })\n\n\n    }\n\n    deleteLabPanel(record) {\n        const that = this;\n        const reqData = {...record, is_active:false,\n            tests:Object.keys(this.state.selectedTest)\n        }\n        const successFn = function (data) {\n            that.loadLabPanel();\n        }\n        const errorFn = function () {\n        }\n        postAPI(interpolate(LABPANEL_API, [this.props.active_practiceId]), reqData, successFn, errorFn);\n    }\n\n    render() {\n        const that = this;\n        const product_margin = {}\n        if (this.state.productMargin) {\n            this.state.productMargin.forEach(function (margin) {\n                product_margin[margin.id] = (margin.name)\n            })\n        }\n        const columns = [{\n            title: 'Name',\n            dataIndex: 'name',\n            key: 'code',\n        }, {\n            title: 'Cost',\n            dataIndex: 'cost',\n            key: 'cost',\n        }, {\n            title: 'Action',\n            key: 'action',\n            render: (text, record) => (\n                <span><a onClick={() => that.editPanels(record)}>\n                Edit\n                      </a>\n                <Divider type=\"vertical\" />\n                    <Popconfirm\n                      title=\"Are you sure delete this test?\"\n                      onConfirm={() => that.deleteLabPanel(record)}\n                      okText=\"Yes\"\n                      cancelText=\"No\"\n                    >\n                        <a>Delete</a>\n                    </Popconfirm>\n                </span>\n            ),\n        }];\n\n        const subColumns =[{\n            title: 'Name',\n            dataIndex: 'name',\n            key: 'code',\n        }, {\n            title: 'Cost',\n            dataIndex: 'cost',\n            key: 'cost',\n        }, {\n            title: ' Test Instructions',\n            dataIndex: 'instruction',\n            key: 'instruction',\n        }];\n        return (\n<Row>\n            <Route\n              exact\n              path=\"/settings/labs/add\"\n              render={(route) => (\n<AddorEditLabPanel\n  {...that.state}\n  loadData={this.loadData}\n  {...this.props}\n  {...route}\n/>\n)}\n            />\n            <Route\n              exact\n              path=\"/settings/labs/edit\"\n              render={(route) => (\n<AddorEditLabPanel\n  {...that.state}\n  loadData={this.loadData}\n  {...this.props}\n  {...route}\n/>\n)}\n            />\n            <Route exact path=\"/settings/labs\">\n                <div>\n                    <Row>\n                        <h2>\n                            <Link to=\"/settings/labs/add\">\n                                <Button type=\"primary\" style={{float: 'right'}}>\n                                    <Icon type=\"plus\" />&nbsp;Add\n                                </Button>\n                            </Link>\n                        </h2>\n                    </Row>\n                    <CustomizedTable loading={this.state.loading} columns={columns} expandedRowRender={record => <Card><Table pagination={false} columns={subColumns} dataSource={record.tests} /></Card>} dataSource={this.state.labPanel} />\n                </div>\n            </Route>\n\n</Row>\n)\n    }\n}\n\n","import React from \"react\";\nimport {Card, Tabs} from 'antd';\nimport LabTest from \"./LabTest\";\nimport LabPanel from \"./LabPanel\";\n\nconst {TabPane} = Tabs;\nexport default class LabTracking extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {}\n    }\n\n    render() {\n        return (\n<div>\n            <h2>Lab Tracking</h2>\n            <Card>\n                <Tabs>\n                    <TabPane key=\"labTests\" tab=\"Lab Tests\">\n                        <LabTest {...this.props} />\n                    </TabPane>\n                    <TabPane key=\"labPanels\" tab=\"Lab Panels\">\n                        <LabPanel {...this.props} />\n                    </TabPane>\n                </Tabs>\n            </Card>\n</div>\n)\n    }\n}\n","import React from \"react\";\nimport {Form, Card} from \"antd\";\nimport DynamicFieldsForm from \"../../../common/DynamicFieldsForm\";\nimport {\n    INPUT_FIELD, MULTI_SELECT_FIELD,\n    NUMBER_FIELD,\n    SELECT_FIELD,\n    SINGLE_IMAGE_UPLOAD_FIELD,\n    SUCCESS_MSG_TYPE\n} from \"../../../../constants/dataKeys\";\nimport {displayMessage, getAPI, interpolate} from \"../../../../utils/common\";\nimport {BED_PACKAGES, MEDICINE_PACKAGES, ROOM_TYPE, TAXES} from \"../../../../constants/api\";\n\nexport default class AddorEditMedicinePackages extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            editPackage: this.props.editPackage ? this.props.editPackage : null,\n            taxes: []\n        }\n    }\n\n    componentDidMount() {\n        this.loadRequiredData();\n    }\n\n    loadRequiredData = () => {\n        const that = this;\n        const successFn = function (data) {\n            that.setState({\n                taxes: data,\n            })\n        };\n        const errorFn = function () {\n        };\n        getAPI(interpolate(TAXES, [this.props.active_practiceId]), successFn, errorFn);\n\n    }\n\n    render() {\n        const that = this;\n        const MedicinePackageForm = Form.create()(DynamicFieldsForm);\n        const fields = [{\n            label: \"Package Name\",\n            key: 'name',\n            required: true,\n            initialValue: this.props.editPackage ? this.props.editPackage.name : null,\n            type: INPUT_FIELD\n        }, {\n            label: \"Image\",\n            key: 'image',\n            initialValue: this.props.editPackage ? this.props.editPackage.image : null,\n            type: SINGLE_IMAGE_UPLOAD_FIELD,\n        }, {\n            label: \"Days of Booking\",\n            key: 'no_of_days',\n            required: true,\n            initialValue: this.props.editPackage ? this.props.editPackage.no_of_days : null,\n            type: NUMBER_FIELD,\n            follow: 'INR'\n        }, {\n            label: \"Price\",\n            key: 'price',\n            required: true,\n            initialValue: this.props.editPackage ? this.props.editPackage.final_price : null,\n            type: NUMBER_FIELD,\n            follow: 'INR'\n        },\n        // {\n        //     label: \"Final Price\",\n        //     key: 'final_price',\n        //     required: true,\n        //     initialValue: this.props.editPackage ? this.props.editPackage.final_price : null,\n        //     type: NUMBER_FIELD,\n        //     follow: 'INR'\n        // },\n         {\n            label: \"Taxes\",\n            key: 'taxes',\n            initialValue: this.props.editPackage && this.props.editPackage.taxes ? this.props.editPackage.taxes.map(item => item.id) : [],\n            type: MULTI_SELECT_FIELD,\n            options: this.state.taxes.map(tax => Object.create({\n                label: `${tax.name  }(${  tax.tax_value  }%)`,\n                value: tax.id\n            }))\n        }];\n        const formProps = {\n            method: \"post\",\n            action: interpolate(MEDICINE_PACKAGES, [this.props.active_practiceId]),\n            successFn () {\n                displayMessage(SUCCESS_MSG_TYPE, \"Package Saved Successfully\");\n                if (that.props.loadData)\n                    that.props.loadData();\n                that.props.history.replace('/settings/medicine-packages');\n            }, errorFn () {\n\n            }\n        }\n        const defaultValues = [];\n        if (this.state.editPackage) {\n            defaultValues.push({key: 'id', value: this.state.editPackage.id})\n        }\n        return (\n<div>\n            <Card>\n                <MedicinePackageForm\n                  fields={fields}\n                  formProp={formProps}\n                  defaultValues={defaultValues}\n                  title={this.state.editPackage ? \"Edit Medicine Package\" : \"Add Medicine Packages\"}\n                  {...this.props}\n                />\n            </Card>\n</div>\n)\n    }\n}\n","import React from \"react\";\nimport {Button, Card, Divider, Icon, Popconfirm} from 'antd';\nimport {Link, Redirect, Route, Switch} from \"react-router-dom\";\nimport CustomizedTable from \"../../../common/CustomizedTable\";\nimport {getAPI, interpolate, makeFileURL, postAPI} from \"../../../../utils/common\";\nimport {MEDICINE_PACKAGES} from \"../../../../constants/api\";\nimport AddorEditMedicinePackages from \"./AddorEditMedicinePackages\";\n\nexport default class MedicinePackages extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            loading: false,\n            packages: []\n        }\n    }\n\n    componentDidMount() {\n        this.loadData();\n    }\n\n    loadData = () => {\n        const that = this;\n        const successFn = function (data) {\n            that.setState({\n                loading: false,\n                packages: data\n            })\n        }\n        const errorFn = function () {\n            that.setState({\n                loading: false,\n            })\n        }\n        getAPI(interpolate(MEDICINE_PACKAGES, [this.props.active_practiceId]), successFn, errorFn);\n    }\n\n    deleteObject(record) {\n        const that = this;\n        const reqData = record;\n        reqData.is_active = false;\n        const successFn = function (data) {\n            that.loadData();\n        }\n        const errorFn = function () {\n        }\n        postAPI(interpolate(MEDICINE_PACKAGES, [this.props.active_practiceId]), reqData, successFn, errorFn);\n    }\n\n    editObject = (record) => {\n        this.setState({\n            editPackage: record,\n            loading: false\n        });\n        this.props.history.push('/settings/medicine-packages/edit')\n    }\n\n    render() {\n        const that = this;\n        const columns = [{\n            dataIndex: 'image',\n            key: 'image',\n            render: (value) => value ?\n                <img src={makeFileURL(value)} alt=\"\" style={{maxWidth: 200, maxHeight: 100}} /> : null\n        },{\n            title: \"Package Name\",\n            dataIndex: 'name',\n            key: 'name'\n        }, {\n            title: \"Days\",\n            dataIndex: 'no_of_days',\n            key: 'no_of_days'\n        }, {\n            title: \"Price (INR) + Tax\",\n            dataIndex: 'final_price',\n            key: 'price'\n        },\n        // {\n        //     title: \"Final Price (INR)\",\n        //     dataIndex: 'final_price',\n        //     key: 'final_price'\n        // },\n         {\n            title: 'Action',\n            key: 'action',\n            render: (text, record) => (\n                <span>\n                    <a onClick={() => this.editObject(record)}>\n                Edit</a>\n                <Divider type=\"vertical\" />\n                  <Popconfirm\n                    title=\"Are you sure delete this item?\"\n                    onConfirm={() => that.deleteObject(record)}\n                    okText=\"Yes\"\n                    cancelText=\"No\"\n                  >\n                      <a>Delete</a>\n                  </Popconfirm>\n                </span>\n            ),\n        }]\n        return (\n<Switch>\n            <Route\n              path=\"/settings/medicine-packages/add\"\n              render={(route) => (\n<AddorEditMedicinePackages\n  {...this.props}\n  {...route}\n  loadData={this.loadData}\n/>\n)}\n            />\n            <Route\n              path=\"/settings/medicine-packages/edit\"\n              render={(route) => (this.state.editPackage ? (\n                       <AddorEditMedicinePackages\n                         {...this.state}\n                         {...this.props}\n                         {...route}\n                         loadData={this.loadData}\n                       />\n                     ) :\n                       <Redirect to=\"/settings/medicine-packages\" />)}\n            />\n            <Route>\n                <Card\n                  title={(\n<h4>Medicine Packages <Link to=\"/settings/medicine-packages/add\"><Button\n  style={{float: 'right'}}\n  type=\"primary\"\n><Icon\n  type=\"plus\"\n/> Add\n                                                                 </Button>\n                      </Link>\n</h4>\n)}\n                >\n                    <CustomizedTable\n                      dataSource={this.state.packages}\n                      loading={this.state.loading}\n                      columns={columns}\n                    />\n                </Card>\n            </Route>\n</Switch>\n)\n    }\n}\n","import React from \"react\";\nimport {Button, Card, Divider, Form, Modal, Popconfirm} from \"antd\";\nimport DynamicFieldsForm from \"../../../common/DynamicFieldsForm\";\nimport {INPUT_FIELD, NUMBER_FIELD, SUCCESS_MSG_TYPE} from \"../../../../constants/dataKeys\";\nimport {DISEASE_LIST, ROOM_TYPE} from \"../../../../constants/api\";\nimport {displayMessage, getAPI, interpolate, postAPI} from \"../../../../utils/common\";\nimport CustomizedTable from \"../../../common/CustomizedTable\";\n\nclass DiseaseList extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            redirect: false,\n            visible: false,\n            diseases: null,\n            loading: true,\n            showDeleted: false,\n            deletedLoading: false,\n            deletedRooms: [],\n            editObj: {}\n        };\n        this.loadData = this.loadData.bind(this);\n        this.deleteObject = this.deleteObject.bind(this);\n\n    }\n\n    componentDidMount() {\n        this.loadData();\n    }\n\n    loadData(deleted = false) {\n        const that = this;\n        const successFn = function (data) {\n            console.log(\"get table\");\n            if (deleted) {\n                that.setState({\n                    deletedRooms: data,\n                    deletedLoading: false\n                })\n            } else {\n                that.setState({\n                    diseases: data,\n                    loading: false\n                })\n            }\n        };\n        const errorFn = function () {\n            if (deleted) {\n                that.setState({\n                    deletedLoading: false\n                })\n            } else {\n                that.setState({\n                    loading: false\n                })\n            }\n        };\n        if (deleted) {\n            getAPI(interpolate(DISEASE_LIST, [this.props.active_practiceId]), successFn, errorFn, {\n                deleted: true,\n                practice: this.props.active_practiceId\n            });\n        } else {\n            getAPI(interpolate(DISEASE_LIST, [this.props.active_practiceId]), successFn, errorFn);\n        }\n    }\n\n    changeRedirect() {\n        const redirectVar = this.state.redirect;\n        this.setState({\n            redirect: !redirectVar,\n        });\n    }\n\n    editTax(value) {\n        this.setState({\n            editObj: value,\n            visible: true\n        })\n    }\n\n    handleCancel = () => {\n        this.setState({visible: false});\n    }\n\n    deleteObject(record, type) {\n        const that = this;\n        const reqData = record;\n        reqData.is_active = type;\n        const successFn = function (data) {\n            that.loadData();\n            if (that.state.showDeleted) {\n                that.loadData(true);\n            }\n        }\n        const errorFn = function () {\n        };\n        postAPI(interpolate(DISEASE_LIST, [this.props.active_practiceId]), reqData, successFn, errorFn)\n    }\n\n    showDeletedExpenses = () => {\n        this.setState({\n            showDeleted: true,\n            deletedLoading: true\n        });\n        this.loadData(true)\n    }\n\n    render() {\n        const that = this;\n        const columns = [{\n            title: 'Disease',\n            dataIndex: 'name',\n            key: 'name',\n        }, {\n            title: 'Action',\n            key: 'action',\n            render: (text, record) => (\n                record.is_active ? (\n<span>\n\n              <a onClick={() => this.editTax(record)}>  Edit</a>\n                <Divider type=\"vertical\" />\n                <Popconfirm\n                  title=\"Are you sure to delete this?\"\n                  onConfirm={() => that.deleteObject(record, false)}\n                  okText=\"Yes\"\n                  cancelText=\"No\"\n                >\n                  <a>Delete</a>\n                </Popconfirm>\n</span>\n) : (\n<span>\n                    <Popconfirm\n                      title=\"Are you sure show this?\"\n                      onConfirm={() => that.deleteObject(record, true)}\n                      okText=\"Yes\"\n                      cancelText=\"No\"\n                    >\n                  <a>Show</a>\n                    </Popconfirm>\n</span>\n)\n            ),\n        }];\n        const fields = [{\n            label: \"Disease\",\n            key: \"name\",\n            required: true,\n            type: INPUT_FIELD\n        },];\n        const editfields = [{\n            label: \"Disease\",\n            key: \"name\",\n            required: true,\n            initialValue: this.state.editObj.name,\n            type: INPUT_FIELD\n        },];\n        const formProp = {\n            successFn (data) {\n                that.handleCancel();\n                that.loadData();\n                console.log(data);\n                console.log(\"sucess\");\n                displayMessage(SUCCESS_MSG_TYPE, \"success\");\n            },\n            errorFn () {\n\n            },\n            action: interpolate(DISEASE_LIST, [this.props.active_practiceId]),\n            method: \"post\",\n        }\n        const defaultValues = [{\"key\": \"practice\", \"value\": this.props.active_practiceId}];\n        const editFormDefaultValues = [{\"key\": \"practice\", \"value\": this.props.active_practiceId}, {\n            \"key\": \"id\",\n            \"value\": this.state.editObj.id\n        }];\n        const TestFormLayout = Form.create()(DynamicFieldsForm);\n        return (\n<div>\n            <h2>Disease List</h2>\n            <Card>\n                <TestFormLayout defaultValues={defaultValues} formProp={formProp} fields={fields} />\n                <Divider />\n                <CustomizedTable loading={this.state.loading} columns={columns} dataSource={this.state.diseases} />\n                {/* {this.state.showDeleted ? */}\n                {/* <div> */}\n                {/* <CustomizedTable loading={this.state.deletedLoading} columns={columns} */}\n                {/* dataSource={this.state.deletedExpenses}/> */}\n                {/* </div> : */}\n                {/* <h4><a onClick={() => this.showDeletedExpenses()}>Show Deleted Expenses</a></h4>} */}\n            </Card>\n            <Modal\n              visible={this.state.visible}\n              footer={null}\n              onCancel={this.handleCancel}\n            >\n\n                <TestFormLayout\n                  title=\"Edit Disease\"\n                  defaultValues={editFormDefaultValues}\n                  formProp={formProp}\n                  fields={editfields}\n                />\n                <Button key=\"back\" onClick={this.handleCancel}>Return</Button>,\n\n            </Modal>\n</div>\n)\n    }\n}\n\nexport default DiseaseList;\n","import React from \"react\";\nimport {Button, Modal, Card, Form, Icon, Row, Table, Divider, Popconfirm} from \"antd\";\nimport {Link} from \"react-router-dom\";\nimport DynamicFieldsForm from \"../../../common/DynamicFieldsForm\";\nimport {\n    CHECKBOX_FIELD,\n    SUCCESS_MSG_TYPE,\n    INPUT_FIELD,\n    RADIO_FIELD,\n    NUMBER_FIELD,\n    SELECT_FIELD\n} from \"../../../../constants/dataKeys\";\nimport {AGENT_ROLES} from \"../../../../constants/api\"\nimport {getAPI, displayMessage, interpolate, postAPI} from \"../../../../utils/common\";\n\nclass AgentRoles extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            redirect: false,\n            visible: false,\n            data: null,\n            loading:true\n        }\n        this.loadData = this.loadData.bind(this);\n        this.deleteObject = this.deleteObject.bind(this);\n    }\n\n    componentDidMount() {\n        this.loadData();\n    }\n\n    loadData() {\n        const that = this;\n        const successFn = function (data) {\n            that.setState({\n                data,\n                loading:false\n            })\n        };\n        const errorFn = function () {\n            that.setState({\n                loading:false\n            })\n        };\n        getAPI(interpolate(AGENT_ROLES, [this.props.active_practiceId]), successFn, errorFn);\n    }\n\n    changeRedirect() {\n        const redirectVar = this.state.redirect;\n        this.setState({\n            redirect: !redirectVar,\n        });\n    }\n\n    editFunction(value) {\n        this.setState({\n            editingId: value.id,\n            editingName: value.name,\n            visible: true,\n            loading:false\n        })\n    }\n\n    handleCancel = () => {\n        this.setState({visible: false});\n    }\n\n    deleteObject(record) {\n        const that = this;\n        const reqData = record;\n        reqData.is_active = false;\n        const successFn = function (data) {\n            that.loadData();\n        }\n        const errorFn = function () {\n        };\n        postAPI(interpolate(AGENT_ROLES, [this.props.active_practiceId]), reqData, successFn, errorFn)\n    }\n\n    render() {\n        const that = this;\n        const columns = [{\n            title: 'Name',\n            dataIndex: 'name',\n            key: 'name',\n        }, {\n            title: 'Action',\n            key: 'action',\n            render: (text, record) => (\n                <span>\n              <a onClick={() => this.editFunction(record)}>  Edit</a>\n                {/* <Divider type=\"vertical\"/>\n                    <Popconfirm title=\"Are you sure delete this item?\"\n                                onConfirm={() => that.deleteObject(record)} okText=\"Yes\" cancelText=\"No\">\n                      <a>Delete</a>\n                  </Popconfirm> */}\n                </span>\n            ),\n        }];\n        const fields = [{\n            label:\"Role Name\",\n            key: \"name\",\n            placeholder:\"Advisor roles\",\n            required: true,\n            type: INPUT_FIELD\n        },];\n        const editfields = [{\n            label:\"Role Name\",\n            key: \"name\",\n            required: true,\n            initialValue: this.state.editingName,\n            type: INPUT_FIELD\n        }];\n        const formProp = {\n            successFn (data) {\n                that.handleCancel();\n                that.loadData();\n                console.log(\"sucess\");\n                displayMessage(SUCCESS_MSG_TYPE, \"success\")\n\n            },\n            errorFn () {\n\n            },\n            action: interpolate(AGENT_ROLES, [this.props.active_practiceId]),\n            method: \"post\",\n        };\n        const defaultValues = [{\"key\": \"practice\", \"value\": this.props.active_practiceId}]\n        const editFormDefaultValues = [{\"key\": \"practice\", \"value\": this.props.active_practiceId}, {\n            \"key\": \"id\",\n            \"value\": this.state.editingId\n        }]\n\n        const TestFormLayout = Form.create()(DynamicFieldsForm);\n        return (\n<Card title='Add Advisor Roles'>\n            <TestFormLayout defaultValues={defaultValues} formProp={formProp} fields={fields} />\n            <Divider />\n            <Table loading={this.state.loading} columns={columns} dataSource={this.state.data} />\n            <Modal\n              title=\"Edit Advisor Roles\"\n              visible={this.state.visible}\n              footer={null}\n              onCancel={this.handleCancel}\n            >\n                <TestFormLayout defaultValues={editFormDefaultValues} formProp={formProp} fields={editfields} />\n                <Button key=\"back\" onClick={this.handleCancel}>Return</Button>\n            </Modal>\n</Card>\n)\n    }\n}\n\nexport default AgentRoles;\n","import React from \"react\";\nimport {\n    AutoComplete,\n    Avatar,\n    Button,\n    Card,\n    Icon,\n    Form,\n    Input,\n    Upload,\n    List,\n    Select,\n    Spin, message,\n} from 'antd';\nimport {REQUIRED_FIELD_MESSAGE} from \"../../../../constants/messages\";\nimport {SUCCESS_MSG_TYPE} from \"../../../../constants/dataKeys\";\nimport {\n    PATIENTS_LIST,\n    SEARCH_PATIENT,\n    PATIENT_PROFILE, AGENT_ROLES, FILE_UPLOAD_API,\n} from \"../../../../constants/api\"\nimport {displayMessage, getAPI, interpolate, makeFileURL, makeURL, postAPI, putAPI} from \"../../../../utils/common\";\nimport {hideMobile} from \"../../../../utils/permissionUtils\";\n\nconst FormItem = Form.Item;\nconst {Meta} = Card;\n\nclass AddOrEditAgent extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            redirect: false,\n            saving: false,\n            userListData: [],\n            agentRoles: [],\n\n\n        }\n        this.changeRedirect = this.changeRedirect.bind(this);\n        this.getPatient = this.getPatient.bind(this);\n        this.searchPatient = this.searchPatient.bind(this);\n        this.loadAgentRoles = this.loadAgentRoles.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n    }\n\n    componentDidMount() {\n        this.getPatient();\n        this.loadAgentRoles();\n    }\n\n\n    getPatient() {\n        const that = this;\n\n        const successFn = function (data) {\n            that.setState({\n                userListData: data.results,\n            })\n        };\n        const errorFn = function () {\n\n        };\n        getAPI(PATIENTS_LIST, successFn, errorFn);\n    }\n\n    loadAgentRoles() {\n        const that = this;\n        const successFn = function (data) {\n            that.setState({\n                agentRoles: data,\n                loading: false\n            })\n        };\n        const errorFn = function () {\n            that.setState({\n                loading: false\n            })\n        };\n        getAPI(AGENT_ROLES, successFn, errorFn);\n\n    }\n\n    changeRedirect() {\n        const redirectVar = this.state.redirect;\n        this.setState({\n            redirect: !redirectVar,\n        });\n    }\n\n    searchPatient(value) {\n        const that = this;\n        const successFn = function (data) {\n            if (data) {\n                that.setState({\n                    userListData: data.results\n                })\n\n            }\n        };\n        const errorFn = function () {\n        };\n        if (value){\n            getAPI(interpolate(SEARCH_PATIENT, [value]), successFn, errorFn);\n        }\n\n    }\n\n    handleSubmit = (e) => {\n        const that = this;\n        e.preventDefault();\n        this.props.form.validateFields((err, values) => {\n            if (!err) {\n                that.setState({\n                    saving: true\n                });\n\n                const reqData = {\n                    user: {},\n                    referal: values.referal,\n                    role: values.role,\n                    is_agent: true,\n                    aadhar_upload: values.aadhar_upload && values.aadhar_upload.file && values.aadhar_upload.file.response ? values.aadhar_upload.file.response.image_path : values.aadhar_upload,\n                    is_approved: true,\n                    practice: this.props.active_practiceId\n                };\n                // if (this.props.editAgentData || !reqData.referal) {\n                //     delete reqData.referal;\n                // }\n                if (!this.state.userDetails) {\n                    reqData.user.first_name = values.first_name;\n                    reqData.user.email = values.email;\n                    reqData.user.mobile = values.mobile;\n                } else {\n                    reqData.user = this.state.userDetails.user;\n                }\n                const successFn = function (data) {\n                    that.setState({\n                        saving: false\n                    });\n                    if (that.props.loadData){\n                        that.props.loadData();\n                    }\n\n                    if (that.props.history){\n                        that.props.history.replace(\"/settings/agents\");\n                    }\n                    if (data) {\n                        displayMessage(SUCCESS_MSG_TYPE, \"Agent Created Successfully\");\n                    }\n                };\n                const errorFn = function () {\n                    that.setState({\n                        saving: false\n                    });\n                };\n\n                if (this.state.userDetails) {\n                    putAPI(interpolate(PATIENT_PROFILE, [this.state.userDetails.id]), reqData, successFn, errorFn);\n                } else if (this.props.editAgentData) {\n                    putAPI(interpolate(PATIENT_PROFILE, [this.props.editAgentData.id]), reqData, successFn, errorFn);\n                } else {\n                    postAPI(interpolate(PATIENTS_LIST, [this.props.active_practiceId]), reqData, successFn, errorFn);\n                }\n            }\n        });\n\n    }\n\n    handlePatientSelect = (event) => {\n        if (event) {\n            const that = this;\n            const successFn = function (data) {\n                that.setState({\n                    userDetails: data\n                });\n            };\n            const errorFn = function () {\n            };\n            getAPI(interpolate(PATIENT_PROFILE, [event]), successFn, errorFn);\n        }\n    }\n\n    handleClick = (e) => {\n\n        this.setState({\n            userDetails: null\n        })\n\n    }\n\n\n    render() {\n        const that = this;\n        const formItemLayout = (this.props.formLayout ? this.props.formLayout : {\n            labelCol: {span: 6},\n            wrapperCol: {span: 14},\n        });\n        const formPatients = (this.props.formLayout ? this.props.formLayout : {\n            wrapperCol: {offset: 6, span: 14},\n        });\n        const {getFieldDecorator} = this.props.form;\n        const singleUploadprops = {\n            name: 'image',\n            data: {\n                name: 'hello'\n            },\n            action: makeURL(FILE_UPLOAD_API),\n            headers: {\n                authorization: 'authorization-text',\n            },\n            onChange(info) {\n                if (info.file.status !== 'uploading') {\n                    console.log(info.file, info.fileList);\n                }\n                if (info.file.status === 'done') {\n                    message.success(`${info.file.name} file uploaded successfully`);\n                } else if (info.file.status === 'error') {\n                    message.error(`${info.file.name} file upload failed.`);\n                }\n            },\n        };\n        return (\n<Card>\n            <Spin spinning={this.state.saving}>\n                <Form onSubmit={this.handleSubmit}>\n                    {this.props.title ? <h2>{this.props.title}</h2> : null}\n\n                    {that.state.userDetails ? (\n                        <FormItem key=\"id\" value={this.state.userDetails.id} {...formPatients}>\n                            <Card bordered={false} style={{background: '#ECECEC'}}>\n                                <Meta\n                                  avatar={(this.state.userDetails.image ? <Avatar src={makeFileURL(this.state.userDetails.image)} /> : (\n                                        <Avatar style={{backgroundColor: '#87d068'}}>\n                                            {this.state.userDetails.user.first_name ? this.state.userDetails.user.first_name.charAt(0) :\n                                                <Icon type=\"user\" />}\n                                        </Avatar>\n                                      ))}\n                                  title={this.state.userDetails.user.first_name}\n                                  description={(\n                                        <span>{that.props.activePracticePermissions.PatientPhoneNumber ? this.state.userDetails.user.mobile : hideMobile(this.state.userDetails.user.mobile)}<br />\n                                    <Button type=\"primary\" style={{float: 'right'}} onClick={this.handleClick}>Select Different</Button>\n                                        </span>\n                                      )}\n                                />\n\n\n                            </Card>\n                        </FormItem>\n                      )\n                        : (\n<div>\n                            <FormItem key=\"name\" label=\"Advisor Name\" {...formItemLayout}>\n                                {getFieldDecorator(\"first_name\", {\n                                    initialValue: that.props.editAgentData ? that.props.editAgentData.user.first_name : ''\n                                })(\n                                    <AutoComplete\n                                      placeholder=\"Advisor Name\"\n                                      showSearch\n                                      disabled={!!that.props.editAgentData}\n                                      onSearch={this.searchPatient}\n                                      defaultActiveFirstOption={false}\n                                      showArrow={false}\n                                      filterOption={false}\n                                      onSelect={this.handlePatientSelect}\n                                    >\n                                        {this.state.userListData.map((option) => (\n<AutoComplete.Option\n  value={option.id.toString()}\n>\n                                            <List.Item style={{padding: 0}}>\n                                                <List.Item.Meta\n                                                  avatar={(option.image ? <Avatar src={makeFileURL(option.image)} /> : (\n                                                        <Avatar style={{backgroundColor: '#87d068'}}>\n                                                            {option.user.first_name ? option.user.first_name.charAt(0) :\n                                                                <Icon type=\"user\" />}\n                                                        </Avatar>\n                                                      ))}\n                                                  title={`${option.user.first_name  } (ID:${  option.custom_id?option.custom_id:option.user.id  })`}\n                                                  description={that.props.activePracticePermissions.PatientPhoneNumber ? option.user.mobile : hideMobile(option.user.mobile)}\n\n                                                />\n                                            </List.Item>\n</AutoComplete.Option>\n))}\n                                    </AutoComplete>\n                                )}\n                            </FormItem>\n                            <FormItem key=\"mobile\" label=\"Mobile Number\" {...formItemLayout}>\n                                {getFieldDecorator(\"mobile\", {\n                                    initialValue: that.props.editAgentData ? that.props.editAgentData.user.mobile : null,\n                                    rules: [{required: true, message: REQUIRED_FIELD_MESSAGE}],\n                                })(\n                                    <Input placeholder=\"Mobile Number\" disabled={!!that.props.editAgentData} />\n                                )}\n                            </FormItem>\n                            <FormItem key=\"email\" label=\"Email Address\" {...formItemLayout}>\n                                {getFieldDecorator(\"email\", {\n                                    initialValue: that.props.editAgentData ? that.props.editAgentData.user.email : null,\n                                    rules: [{type: 'email', message: 'The input is not valid E-mail!'},\n                                        {required: true, message: REQUIRED_FIELD_MESSAGE}],\n                                })(\n                                    <Input placeholder=\"Email Address\" disabled={!!that.props.editAgentData} />\n                                )}\n                            </FormItem>\n                            {this.state.editAgentData ? null : (\n                                <FormItem key=\"referal\" label=\"Referer Code\" {...formItemLayout}>\n                                    {getFieldDecorator(\"referal\", {\n                                        initialValue: that.props.editAgentData && that.props.editAgentData.user.referer_data.referer ? that.props.editAgentData.user.referer_data.referer.referer_code : null,\n\n                                    })(\n                                        <Input placeholder=\"Referer Code\" />\n                                    )}\n                                </FormItem>\n                              )}\n\n</div>\n)}\n\n                    <FormItem key=\"role\" {...formItemLayout} label=\"Role Type\">\n                        {getFieldDecorator(\"role\", {initialValue: that.props.editAgentData && that.props.editAgentData.role ? that.props.editAgentData.role : null}, {\n                            rules: [{required: true, message: REQUIRED_FIELD_MESSAGE}],\n                        })(\n                            <Select>\n                                {this.state.agentRoles.map((option) => (\n<Select.Option\n  value={option.id}\n>{option.name}\n</Select.Option>\n))}\n                            </Select>\n                        )}\n                    </FormItem>\n                    <FormItem label=\"Document Upload\" {...formItemLayout}>\n                        {getFieldDecorator(\"aadhar_upload\",{initialValue: that.props.editAgentData && that.props.editAgentData.aadhar_upload ? that.props.editAgentData.aadhar_upload : null,\n                            rules: [{required: true, message: REQUIRED_FIELD_MESSAGE}],\n                            valuePropName: \"aadhar_upload\",\n                        })(\n                            <Upload {...singleUploadprops}>\n                                <Button>\n                                    <Icon type=\"upload\" /> Click to Upload\n                                </Button>\n                                {that.props.editAgentData && that.props.editAgentData.aadhar_upload ? (\n                                    <img\n                                      src={makeFileURL(that.props.editAgentData.aadhar_upload)}\n                                      style={{maxWidth: '100%'}}\n                                    />\n                                  ) : null}\n                            </Upload>\n                        )}\n                    </FormItem>\n\n                    <FormItem {...formItemLayout}>\n                        <Button type=\"primary\" htmlType=\"submit\" style={{margin: 5}}>\n                            Submit\n                        </Button>\n                        {that.props.history ? (\n                            <Button style={{margin: 5}} onClick={() => that.props.history.goBack()}>\n                                Cancel\n                            </Button>\n                          ) : null}\n                    </FormItem>\n                </Form>\n            </Spin>\n</Card>\n)\n    }\n}\n\nexport default Form.create()(AddOrEditAgent)\n","import React from \"react\";\nimport {Button, Modal, Card, Form, Icon, Row, Table, Divider, Popconfirm, Tag, Select, Col} from \"antd\";\nimport {Link, Route, Switch} from \"react-router-dom\";\nimport moment from \"moment\";\nimport {\n    SUCCESS_MSG_TYPE,\n    INPUT_FIELD, WARNING_MSG_TYPE, NUMBER_FIELD, DATE_PICKER,\n} from \"../../../../constants/dataKeys\";\nimport {AGENT_ROLES, ALL_PRACTICE, PATIENT_PROFILE, PATIENTS_LIST, WALLET_LEDGER} from \"../../../../constants/api\"\nimport {getAPI, displayMessage, interpolate, postAPI, putAPI, makeFileURL} from \"../../../../utils/common\";\nimport AddOrEditAgent from \"./AddOrEditAgent\";\nimport CustomizedTable from \"../../../common/CustomizedTable\";\nimport InfiniteFeedLoaderButton from \"../../../common/InfiniteFeedLoaderButton\";\nimport PatientWalletLedger from \"../../../patients/wallet-ledger/PatientWalletLedger\";\nimport DynamicFieldsForm from \"../../../common/DynamicFieldsForm\";\n\n// import Col from \"antd/es/grid/col\";\n\nclass AgentRoles extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            redirect: false,\n            visible: false,\n            data: null,\n            loading: true,\n            agentRoles: [],\n            practiceList: [],\n            approved: null,\n            showAgentData: null\n        };\n        this.loadData = this.loadData.bind(this);\n        this.deleteObject = this.deleteObject.bind(this);\n        this.loadAgentRoles = this.loadAgentRoles.bind(this);\n    }\n\n    componentDidMount() {\n        this.loadData();\n        this.loadAgentRoles();\n    }\n\n    loadAgentRoles() {\n        const that = this;\n        const successFn = function (data) {\n            that.setState({\n                agentRoles: data,\n            })\n        };\n        const errorFn = function () {\n        };\n        getAPI(AGENT_ROLES, successFn, errorFn);\n\n    }\n\n    loadData(page = 1) {\n        const that = this;\n        this.setState({\n            loading: true\n        })\n        const successFn = function (data) {\n            if (data.current == 1) {\n                that.setState({\n                    data: data.results,\n                    total: data.count,\n                    nextPage: data.next,\n                    loading: false\n                })\n            } else {\n                that.setState(function (prevState) {\n                    return {\n                        data: [...prevState.data, ...data.results],\n                        total: data.count,\n                        nextPage: data.next,\n                        loading: false\n                    }\n                })\n            }\n        };\n        const errorFn = function () {\n            that.setState({\n                loading: false\n            })\n        };\n        const apiParams = {\n            agent: true,\n            page\n        }\n        if (that.state.role)\n            apiParams.role = that.state.role;\n        if (that.state.approved != null) {\n            apiParams.approved = !!that.state.approved;\n        }\n        apiParams.practice = this.props.active_practiceId;\n\n        getAPI(PATIENTS_LIST, successFn, errorFn, apiParams);\n    }\n\n    changeRedirect() {\n        const redirectVar = this.state.redirect;\n        this.setState({\n            redirect: !redirectVar,\n        });\n    }\n\n    handleCancel = () => {\n        this.setState({visible: false});\n    }\n\n    editObject(record) {\n        this.setState({\n            editAgentData: record,\n            loading: false\n        });\n\n        this.props.history.push(`/settings/agents/${  record.id  }/edit`)\n\n    }\n\n    showWallet = (record) => {\n        this.setState({\n            showAgentData: record,\n        });\n    }\n\n    payAgentModal = (record) => {\n        this.setState({\n            payAgentData: record,\n        });\n    }\n\n    deleteObject(record) {\n        const that = this;\n        const reqData = {'id': record.id, is_agent: false}\n        const successFn = function (data) {\n            that.setState({\n                loading: false,\n            })\n            that.loadData();\n        }\n        const errorFn = function () {\n        };\n        putAPI(interpolate(PATIENT_PROFILE, [record.id]), reqData, successFn, errorFn)\n    }\n\n    approveAgent = (record) => {\n        const that = this;\n\n        const reqData = {'id': record.id, is_approved: true};\n        const successFn = function (data) {\n            displayMessage(SUCCESS_MSG_TYPE, \"Agent Approved Successfully!\");\n            that.setState(function (prevState) {\n                const agentList = [];\n                prevState.data.forEach(function (agent) {\n                    if (agent.id == record.id) {\n                        agent.is_approved = true\n                    }\n                    agentList.push(agent);\n                });\n                return {\n                    data: agentList,\n                    approvalLoading: false\n                }\n            })\n        }\n        const errorFn = function () {\n            that.setState({\n                approvalLoading: false\n            })\n        };\n        if (record.role) {\n            that.setState({\n                approvalLoading: true\n            })\n            putAPI(interpolate(PATIENT_PROFILE, [record.id]), reqData, successFn, errorFn)\n        } else {\n            displayMessage(WARNING_MSG_TYPE, \"Kindly assign the role before approving!\")\n        }\n    }\n\n    // handleChange=(key,value)=>{\n    //     console.log(\"type\",key,value)\n    //     this.props.form.setFieldsValue({\n    //         [key]: value,\n    //     });\n    // }\n    handleSubmit = (e) => {\n        const that = this;\n        e.preventDefault();\n        this.props.form.validateFieldsAndScroll((err, values) => {\n\n            if (!err) {\n                that.setState({\n                    role: values.role,\n                    approved: values.approved,\n                }, function () {\n                    that.loadData();\n                })\n            }\n        })\n    }\n\n\n    render() {\n        const that = this;\n        let i = 1;\n        const {getFieldDecorator} = this.props.form;\n        const columns = [{\n            title: 'S. No',\n            key: 'sno',\n            dataIndex: 'sno',\n            render: (item, record) => <span> {i++}</span>,\n            export: (item, record, index) => index + 1,\n        }, {\n            title: 'Name',\n            dataIndex: 'user.first_name',\n            key: 'name',\n            render: (value, record) => <Link to={`/patient/${  record.id  }/profile`}>{value}</Link>,\n            export: (item, record) => (record.user.first_name),\n        }, {\n            title: 'Email',\n            dataIndex: 'user.email',\n            key: 'email',\n            export: (item, record) => (record.user.email),\n        }, {\n            title: 'Mobile',\n            dataIndex: 'user.mobile',\n            key: 'mobile',\n            export: (item, record) => (record.user.mobile),\n        }, {\n            title: 'Referrer',\n            dataIndex: 'user.referer_data.referer.first_name',\n            key: 'referrer',\n            render: (value, record) => (value && record.user.referer_data.patient ?\n                <Link to={`/patient/${  record.user.referer_data.patient  }/profile`}>{value}</Link> : '--'),\n            export: (item, record) => (record.user.referer ? record.user.referer_data.referer.first_name : '--'),\n        }, {\n            title: 'Role',\n            dataIndex: 'role_data.name',\n            key: 'role_data',\n            export: (item, record) => (record.role_data.name),\n        }, {\n            title: 'Aadhar',\n            dataIndex: 'aadhar_id',\n            key: 'aadhar_id',\n            export: (value) => (value),\n        }, {\n            title: 'Document',\n            dataIndex: 'aadhar_upload',\n            key: 'aadhar_upload',\n            hideExport: true,\n            render: (value) => (value ? <a target=\"_blank\" href={makeFileURL(value)}>Open Document</a> : '--')\n        }, {\n            title: 'Status',\n            dataIndex: 'is_approved',\n            key: 'is_approved',\n            render: (value, record) => (\n                value ? <Tag color=\"#87d068\">Approved</Tag> : (\n<Popconfirm\n  title=\"Are you sure approve this Advisor?\"\n  onConfirm={() => that.approveAgent(record)}\n  okText=\"Yes\"\n  cancelText=\"No\"\n>\n                    <a href=\"#\" disabled={that.state.approvalLoading}>Approve</a>\n</Popconfirm>\n)\n            )\n        }, {\n            title: 'Action',\n            key: 'action',\n            hideExport: true,\n            render: (text, record) => (\n                <span>\n                     <a onClick={() => this.showWallet(record)}>  Wallet</a>\n                    <Divider type=\"vertical\" />\n              <a onClick={() => this.payAgentModal(record)}>  Pay Out</a>\n                    <Divider type=\"vertical\" />\n              <a onClick={() => this.editObject(record)}>  Edit</a>\n                <Divider type=\"vertical\" />\n                    <Popconfirm\n                      title=\"Are you sure delete this item?\"\n                      onConfirm={() => that.deleteObject(record)}\n                      okText=\"Yes\"\n                      cancelText=\"No\"\n                    >\n                      <a>Delete</a>\n                    </Popconfirm>\n                </span>\n            ),\n        }];\n        const status = [\n            {label: 'Approved', value: true},\n            {label: 'Pending', value: false},\n            {label: 'All', value: null}\n        ];\n        const PayAgentForm = Form.create()(DynamicFieldsForm);\n        return (\n<Switch>\n            <Route\n              exact\n              path=\"/settings/agents/add\"\n              render={(route) => (\n<AddOrEditAgent\n  {...this.props}\n  title=\"Create Advisor\"\n  loadData={this.loadData}\n/>\n)}\n            />\n\n            <Route\n              exact\n              path=\"/settings/agents/:id/edit\"\n              render={(route) => (\n<AddOrEditAgent\n  {...this.props}\n  {...this.state}\n  title=\"Edit Advisor\"\n  loadData={this.loadData}\n/>\n)}\n            />\n            <Route>\n                <Card title={(\n<h4>Advisor <Link to=\"/settings/agents/add\">\n                    <Button style={{float: 'right'}} type=\"primary\"><Icon type=\"plus\" />\n                        Add\n                    </Button>\n            </Link>\n</h4>\n)}\n                >\n                    <Row>\n                        <Col style={{float: \"right\"}}>\n                            <Form layout=\"inline\" onSubmit={this.handleSubmit}>\n                                <Form.Item key=\"role\" label=\"Advisor Role\">\n                                    {getFieldDecorator(\"role\", {initialValue: this.state.agentRoles ? this.state.agentRoles.id : ''},\n                                    )(\n                                        <Select placeholder=\"Advisor Role\" style={{minWidth: 150}} allowClear>\n                                            {this.state.agentRoles.map((option) => (\n<Select.Option\n  value={option.id}\n>{option.name}\n</Select.Option>\n))}\n                                        </Select>\n                                    )}\n                                </Form.Item>\n\n                                <Form.Item key=\"approved\" label=\"Status\">\n                                    {getFieldDecorator(\"approved\", {initialValue: this.state.approved ? this.state.approved : null},\n                                    )(\n                                        <Select placeholder=\"status\" style={{minWidth: 150}}>\n                                            {status.map(item => (\n<Select.Option\n  value={item.value}\n>\n                                                {item.label}\n</Select.Option>\n))}\n                                        </Select>\n                                    )}\n                                </Form.Item>\n\n                                <Form.Item>\n                                    <Button type=\"primary\" htmlType=\"submit\" style={{margin: 5}}>\n                                        Submit\n                                    </Button>\n                                </Form.Item>\n                            </Form>\n                        </Col>\n                    </Row>\n\n                    <CustomizedTable\n                      loading={this.state.loading}\n                      columns={columns}\n                      dataSource={this.state.data}\n                      pagination={false}\n                    />\n                    <InfiniteFeedLoaderButton\n                      loading={this.state.loading}\n                      loaderFunction={() => that.loadData(that.state.nextPage)}\n                      hidden={!this.state.nextPage}\n                    />\n                    <Modal\n                      visible={this.state.showAgentData}\n                      closable={false}\n                      centered\n                      width={1000}\n                      footer={null}\n                      style={{top: 60}}\n                    >\n                        <Button\n                          type=\"primary\"\n                          style={{position: 'absolute', top: '-50px'}}\n                          onClick={() => this.payAgentModal(this.state.showAgentData)}\n                        >Pay Out\n                        </Button>\n                        <Button\n                          icon=\"close\"\n                          type=\"danger\"\n                          shape=\"circle\"\n                          style={{position: 'absolute', top: '-50px', right: 0}}\n                          onClick={() => this.showWallet(null)}\n                        />\n                        {this.state.showAgentData ? (\n                            <PatientWalletLedger\n                              currentPatient={this.state.showAgentData}\n                              key={this.state.showAgentData ? this.state.showAgentData.id + this.state.payAgentData : null}\n                            />\n                          ) : null}\n                    </Modal>\n                    <Modal\n                      visible={this.state.payAgentData}\n                      closable={false}\n                      centered\n                      footer={null}\n                      closeIcon={null}\n                      style={{top: 60}}\n                    >\n                        <Button\n                          icon=\"close\"\n                          type=\"danger\"\n                          shape=\"circle\"\n                          style={{position: 'absolute', top: '-50px', right: 0}}\n                          onClick={() => this.payAgentModal(null)}\n                        />\n                        {this.state.payAgentData ? (\n<div>\n                            <h2>Pay {this.state.payAgentData.user.first_name}</h2>\n                            <PayAgentForm\n                              formProp={{\n                                method: 'post',\n                                action: WALLET_LEDGER,\n                                successFn () {\n                                    that.payAgentModal(null)\n                                },\n                                errorFn () {\n\n                                },\n                                confirm: true,\n                                confirmText: \"Are you sure to pay out this advisor?\"\n                            }}\n                              fields={[{\n                                              label: 'Amount',\n                                              key: 'amount',\n                                              type: NUMBER_FIELD,\n                                              required: true,\n                                              follow: 'INR'\n                                          }, {\n                                              label: 'Date',\n                                              key: 'date',\n                                              type: DATE_PICKER,\n                                              required: true,\n                                              format: 'YYYY-MM-DD',\n                                              initialValue: moment()\n                                          }, {\n                                              label: 'Comments',\n                                              key: 'comments',\n                                              type: INPUT_FIELD,\n                                              required: true,\n                                              extra: 'Comments for this transaction'\n                                          }]}\n                              defaultValues={[{\n                                key: 'ledger_type',\n                                value: 'Payout',\n                            }, {\n                                key: 'amount_type',\n                                value: 'Non Refundable',\n                            }, {\n                                key: 'practice',\n                                value: this.props.active_practiceId\n                            }, {\n                                key: 'is_mlm',\n                                value: false\n                            }, {\n                                key: 'is_cancelled',\n                                value: false\n                            }, {\n                                key: 'patient',\n                                value: this.state.payAgentData.id\n                            }, {\n                                key: 'staff',\n                                value: this.props.user.id\n                            }]}\n                            />\n</div>\n) : null}\n                    </Modal>\n                </Card>\n            </Route>\n\n</Switch>\n)\n\n\n    }\n}\n\nexport default Form.create()(AgentRoles);\n","import React from \"react\";\nimport {Route, Switch} from 'react-router-dom';\nimport {Layout} from \"antd\";\nimport PracticeDetails from \"./options/practice-detail/PracticeDetails\"\nimport PracticeStaff from \"./options/practice-staff/PracticeStaff\";\nimport AddEditDoctor from \"./options/practice-staff/AddEditDoctor\";\nimport AddEditStaff from \"./options/practice-staff/AddEditStaff\";\nimport AddPracticeDetails from \"./options/practice-detail/AddPracticeDetails\";\nimport CommunicationSettings from \"./options/communication-settings/CommunicationSettings\";\nimport RecentProcedure from \"./options/procedure-catalog/RecentProcedure\";\nimport AddProcedure from \"./options/procedure-catalog/AddProcedure\";\nimport BillingSettings from \"./options/billing/BillingSettings\";\nimport EMRSettings from \"./options/emr/EMRSettings\";\nimport EditPracticeDetail from \"./options/practice-detail/EditPracticeDetail\";\nimport Prescriptions from \"./options/prescriptions/Prescriptions\";\nimport ExpensesTypes from \"./options/expenses-types/ExpensesTypes\";\nimport MedicalHistory from \"./options/medical-history/MedicalHistory\";\nimport Error404 from \"../common/errors/Error404\";\nimport CalendarSettings from \"./options/calendar/CalendarSettings\"\nimport SettingSider from \"./SettingSider\";\nimport PermissionDenied from \"../common/errors/PermissionDenied\";\nimport MlmBase from \"./options/mlm/MlmBase\";\nimport Printout from \"./options/printout/Printout\";\nimport IntegrationHome from \"./options/integration/IntegrationHome\";\nimport MailPDFSettings from \"./options/mailPDF/MailPDFSettings\";\nimport BedPackages from \"./options/bed-packages/BedPackages\";\nimport RoomTypes from \"./options/roomtypes/RoomTypes\";\nimport LoyaltySettings from \"./options/loyalty/LoyaltySettings\";\nimport LabTracking from \"./options/labs/LabTracking\";\nimport MedicinePackages from \"./options/medicine-packages/MedicinePackages\";\nimport DiseaseList from \"./options/disease-list/DiseaseList\";\nimport AgentRolesList from \"./options/agent-roles/AgentRoles\";\nimport AgentsList from \"./options/agents/AgentList\";\n// import ZoomUser from \"./options/zoom-user/ZoomUser\";\n\nconst {Content} = Layout;\n\n\nclass SettingsDash extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            collapsed: false,\n        };\n    }\n\n    render() {\n        return (\n<Content\n  className=\"main-container\"\n  style={{\n                            // margin: '24px 16px',\n                            // padding: 24,\n                            minHeight: 280,\n                            // marginLeft: '200px'\n                        }}\n>\n            <Layout>\n                <SettingSider {...this.props} />\n                <Content style={{\n                    margin: '24px 16px',\n                    // padding: 24,\n                    minHeight: 280,\n                    // marginLeft: '200px'\n                }}\n                >\n                    <Switch>\n\n                            <Route\n                              exact\n                              path=\"/settings/clinics-staff/adddoctor\"\n                              render={(route) => (this.props.activePracticePermissions.SettingsPracticeStaff || this.props.allowAllPermissions ?\n                                          <AddEditDoctor {...this.props} {...route} /> : <PermissionDenied />\n                                   )}\n                            />\n                            <Route\n                              exact\n                              path=\"/settings/clinics-staff/:doctorid/edit\"\n                              render={(route) => (this.props.activePracticePermissions.SettingsPracticeStaff || this.props.allowAllPermissions ?\n                                          <AddEditDoctor {...this.props} {...route} /> : <PermissionDenied />\n                                   )}\n                            />\n\n                            <Route\n                              exact\n                              path=\"/settings/clinics-staff/addstaff\"\n                              render={(route) => (this.props.activePracticePermissions.SettingsPracticeStaff || this.props.allowAllPermissions ?\n                                          <AddEditStaff {...this.props} {...route} /> : <PermissionDenied />\n                                   )}\n                            />\n                            <Route\n                              exact\n                              path=\"/settings/clinics-staff/staff/:staffid/edit\"\n                              render={(route) => (this.props.activePracticePermissions.SettingsPracticeStaff || this.props.allowAllPermissions ?\n                                          <AddEditStaff {...this.props} {...route} /> : <PermissionDenied />\n                                   )}\n                            />\n                        <Route\n                          path=\"/settings/clinics-staff\"\n                          render={(route) => (this.props.activePracticePermissions.SettingsPracticeStaff || this.props.allowAllPermissions ?\n                                       <PracticeStaff {...this.props} {...route} /> : <PermissionDenied />\n                               )}\n                        />\n                        <Route\n                          exact\n                          path=\"/settings/clinics\"\n                          render={(route) => (this.props.activePracticePermissions.SettingsPracticeDetail || this.props.allowAllPermissions ?\n                                       <PracticeDetails {...this.props} {...route} /> : <PermissionDenied />\n                               )}\n                        />\n                        <Route\n                          exact\n                          path=\"/settings/clinics/add\"\n                          render={(route) => (this.props.activePracticePermissions.SettingsPracticeDetail || this.props.allowAllPermissions ?\n                                       <AddPracticeDetails {...this.props} {...route} /> : <PermissionDenied />\n                               )}\n                        />\n                        <Route\n                          exact\n                          path=\"/settings/clinics/:id/edit\"\n                          render={(route) => (this.props.activePracticePermissions.SettingsPracticeDetail || this.props.allowAllPermissions ? (\n                                       <EditPracticeDetail\n                                         {...this.props}\n                                         practiceId={route.match.params.id}\n                                         {...route}\n                                       />\n                                     ) :\n                                       <PermissionDenied />\n                               )}\n                        />\n                        <Route\n                          exact\n                          path=\"/settings/communication-settings\"\n                          render={(route) => (this.props.activePracticePermissions.SettingsCommunincations || this.props.allowAllPermissions ?\n                                       <CommunicationSettings {...this.props} {...route} /> : <PermissionDenied />\n                               )}\n                        />\n                        <Route\n                          exact\n                          path=\"/settings/calendarsettings\"\n                          render={(route) => (this.props.activePracticePermissions.SettingsCalendar || this.props.allowAllPermissions ?\n                                       <CalendarSettings {...this.props} {...route} /> : <PermissionDenied />\n                               )}\n                        />\n                        <Route\n                          path=\"/settings/procedures\"\n                          render={(route) => (this.props.activePracticePermissions.SettingsProcedureCatalog || this.props.allowAllPermissions ?\n                                       <RecentProcedure {...this.props} {...route} /> : <PermissionDenied />\n                               )}\n                        />\n                        <Route\n                          path=\"/settings/billing\"\n                          render={(route) => (this.props.activePracticePermissions.SettingsBilling || this.props.allowAllPermissions ?\n                                       <BillingSettings {...this.props} {...route} /> : <PermissionDenied />\n                               )}\n                        />\n                        <Route\n                          exact\n                          path=\"/settings/loyalty\"\n                          render={(route) => (this.props.activePracticePermissions.SettingsLoyalty || this.props.allowAllPermissions ?\n                                       <LoyaltySettings {...this.props} /> : <PermissionDenied />\n                               )}\n                        />\n                        <Route\n                          path=\"/settings/emr\"\n                          render={(route) => (this.props.activePracticePermissions.SettingsEMR || this.props.allowAllPermissions ?\n                                       <EMRSettings {...this.props} {...route} /> : <PermissionDenied />\n                               )}\n                        />\n                        {/* <Route exact path=\"/settings/loyalty/add\" */}\n                        {/* render={(route) => (this.props.activePracticePermissions.SettingsLoyalty || this.props.allowAllPermissions ? */}\n                        {/* <AddOffer  {...this.props} {...route}/> : <PermissionDenied/> */}\n                        {/* )}/> */}\n                        <Route\n                          path=\"/settings/prescriptions\"\n                          render={(route) => (this.props.activePracticePermissions.SettingsPrescriptions || this.props.allowAllPermissions ?\n                                       <Prescriptions {...this.props} {...route} /> : <PermissionDenied />\n                               )}\n                        />\n                        <Route\n                          exact\n                          path=\"/settings/expense-types\"\n                          render={(route) => (this.props.activePracticePermissions.SettingsExpenseTypes || this.props.allowAllPermissions ?\n                                       <ExpensesTypes {...this.props} /> : <PermissionDenied />\n                               )}\n                        />\n                        <Route\n                          path=\"/settings/labs\"\n                          render={(route) => (this.props.activePracticePermissions.SettingsLabs || this.props.allowAllPermissions ?\n                                       <LabTracking {...this.props} {...route} /> : <PermissionDenied />\n                               )}\n                        />\n                        <Route\n                          exact\n                          path=\"/settings/medical-history\"\n                          render={(route) => (this.props.activePracticePermissions.SettingsMedicalHistory || this.props.allowAllPermissions ?\n                                       <MedicalHistory {...this.props} /> : <PermissionDenied />\n                               )}\n                        />\n                        <Route\n                          path=\"/settings/agents\"\n                          render={(route) =>(this.props.activePracticePermissions.SettingsAgents || this.props.allowAllPermissions ?\n                               <AgentsList {...this.state} {...this.props} {...route} key={this.state.active_practiceId} />:<PermissionDenied />)}\n                        />\n\n                        <Route\n                          path=\"/settings/agent-roles\"\n                          render={(route) =>(this.props.activePracticePermissions.SettingsAgentRoles || this.props.allowAllPermissions ?\n                                   <AgentRolesList {...this.state} {...this.props} {...route} key={this.state.active_practiceId} />:<PermissionDenied />)}\n\n                        />\n                        <Route\n                          path=\"/settings/mlm\"\n                          render={(route) => (this.props.activePracticePermissions.SettingsMLMSettings || this.props.allowAllPermissions ? (\n                                       <MlmBase\n                                         {...this.state}\n                                         {...this.props}\n                                         {...route}\n                                         key={this.state.active_practiceId}\n                                       />\n                                     ) : <PermissionDenied />\n                               )}\n                        />\n                        <Route\n                          path=\"/settings/printout\"\n                          render={(route) => (this.props.activePracticePermissions.SettingsPrintouts || this.props.allowAllPermissions ? (\n                                   <Printout\n                                     {...this.state}\n                                     {...route}\n                                     {...this.props}\n                                     key={this.state.active_practiceId}\n                                   />\n                                 ) : <PermissionDenied />\n                               )}\n                        />\n                        <Route\n                          path=\"/settings/mailpdfsettings\"\n                          render={(route) => (this.props.activePracticePermissions.SettingsEmailPDFSettings || this.props.allowAllPermissions ? (\n                                   <MailPDFSettings\n                                     {...this.state}\n                                     {...route}\n                                     {...this.props}\n                                   />\n                                 ) : <PermissionDenied />\n                               )}\n                        />\n                        <Route\n                          path=\"/settings/integration\"\n                          render={(route) => (\n<IntegrationHome\n  {...this.state}\n  {...this.props}\n  {...route}\n/>\n)}\n                        />\n                        <Route\n                          exact\n                          path=\"/settings/roomtypes\"\n                          render={(route) => (this.props.activePracticePermissions.SettingsRoomTypes || this.props.allowAllPermissions ?\n                                       <RoomTypes {...this.props} /> : <PermissionDenied />\n                               )}\n                        />\n                        <Route\n                          exact\n                          path=\"/settings/diseases\"\n                          render={(route) => (this.props.activePracticePermissions.SettingsDiseaseList || this.props.allowAllPermissions ?\n                                       <DiseaseList {...this.props} /> : <PermissionDenied />\n                               )}\n                        />\n                        <Route\n                          path=\"/settings/bed-packages\"\n                          render={(route) => (this.props.activePracticePermissions.SettingsBedPackages || this.props.allowAllPermissions ?\n                                   <BedPackages {...this.state} {...this.props} {...route} />:<PermissionDenied />)}\n                        />\n                                   \n                        <Route\n                          path=\"/settings/medicine-packages\"\n                          render={(route) =>(this.props.activePracticePermissions.SettingsMedicinePackages || this.props.allowAllPermissions ?\n                                   <MedicinePackages {...this.state} {...this.props} {...route} />:<PermissionDenied />)}\n                        />\n\n                        {/* <Route path=\"/settings/zoom-user\" */}\n                        {/*       render={(route) =>(this.props.activePracticePermissions.SettingsMedicinePackages || this.props.allowAllPermissions ? */}\n                        {/*           <ZoomUser {...this.state} {...this.props} {...route}/>:<PermissionDenied/>)}/> */}\n\n                        {/* <Route path=\"/zoom-user\" render={(route)=><ZoomUser  {...this.state} */}\n                        {/*                                                     {...this.props} */}\n                        {/*                                                     {...route} */}\n                        {/*                                                     key={that.state.active_practiceId}/>}/> */}\n                        <Route component={Error404} />\n                    </Switch>\n                </Content>\n            </Layout>\n</Content>\n)\n    }\n}\n\nexport default SettingsDash;\n","import jsPDF from 'jspdf';\nimport \"jspdf-autotable\";\n\nexport const exportToExcel = function (columns, dataArray, fileName = \"download\") {\n    const str = makeCSVString(columns, dataArray);\n    downloadCSV(str, fileName)\n}\n\nexport const makeCSVString = function (columns, dataArray, printColumn = true) {\n    let str = '';\n    let line = [];\n    if (printColumn) {\n        columns.forEach(function (column) {\n            line.push(column);\n        });\n        str += line.join(',');\n        str += '\\r\\n';\n    }\n    dataArray.forEach(function (dataRow) {\n        line = [];\n        columns.forEach(function (column) {\n            if (dataRow[column])\n                line.push(dataRow[column]);\n            else\n                line.push('--');\n        });\n\n        str += line.join(',');\n        str += '\\r\\n';\n    });\n    return str;\n}\n\nexport const downloadCSV = function (str, fileName) {\n    const fName = `${fileName  }.csv`;\n    let cCode; const bArr = [];\n    bArr.push(255, 254);\n    for (let i = 0; i < str.length; ++i) {\n        cCode = str.charCodeAt(i);\n        // eslint-disable-next-line\n        bArr.push(cCode & 0xff);\n        // eslint-disable-next-line\n        bArr.push(cCode / 256 >>> 0);\n    }\n\n    const blob = new Blob([new Uint8Array(bArr)], {type: 'text/csv;charset=UTF-16LE;'});\n    if (navigator.msSaveBlob) {\n        navigator.msSaveBlob(blob, fName);\n    } else {\n        const link = document.createElement(\"a\");\n        if (link.download !== undefined) {\n            const url = window.URL.createObjectURL(blob);\n            link.setAttribute(\"href\", url);\n            link.setAttribute(\"download\", fName);\n            link.style.visibility = 'hidden';\n            document.body.appendChild(link);\n            link.click();\n            document.body.removeChild(link);\n            window.URL.revokeObjectURL(url);\n        }\n    }\n    // window.open(\"data:text/csv;charset=utf-8,\" + encodeURI(str));\n}\n\nexport const exportToPDF = function (columns, dataArray, fileName) {\n    // eslint-disable-next-line\n    const pdf = new jsPDF('p', 'mm', 'a4');\n    addPDFHeader(pdf);\n\n\n    const rows = Object.create(dataArray);\n    pdf.autoTable(columns, rows, {\n        margin: {top: 35},\n        startY: pdf.autoTableEndPosY() + 20,\n        headerStyle: {\n            overflow: 'linebreak'\n        },\n        bodyStyles: {\n            overflow: 'linebreak'\n        }\n    });\n    addPDFFooter(pdf);\n    pdf.save(`${fileName}.pdf`)\n}\n\nfunction addPDFHeader(pdf) {\n    pdf.line(10, 20, 200, 20);\n}\n\n\nfunction addPDFFooter(pdf) {\n    pdf.line(10, 270, 200, 270);\n    pdf.setFontSize(8);\n    pdf.text(10, 275, 'This is a computer generated report.');\n}\n","import React from \"react\";\nimport {Button, Col, Icon, Input, Modal, Row, Table, Tag} from \"antd\";\nimport moment from \"moment\";\nimport Highlighter from 'react-highlight-words';\nimport * as _ from \"lodash\";\nimport {exportToExcel, exportToPDF} from \"../../utils/export\";\nimport {interpolate} from \"../../utils/common\";\nimport {CLINIC_NOTES_PDF} from \"../../constants/api\";\nimport {sendMail} from \"../../utils/clinicUtils\";\n\nexport default class CustomizedTable extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            ...props,\n            searchText: '',\n        };\n        this.excelExport = this.excelExport.bind(this);\n        this.pdfExport = this.pdfExport.bind(this);\n    }\n\n    componentWillReceiveProps(newProps) {\n        if (newProps.columns != this.state.columns || newProps.dataSource != this.state.dataSource || newProps.loading != this.state.loading) {\n            this.setState({...newProps});\n        }\n    }\n\n    pdfExport() {\n        const that = this;\n        const excelColumns = [];\n            that.state.columns.forEach(function(item) {\n                if(!item.hideExport)\n                    excelColumns.push({title: item.title, dataKey: item.title})\n            });\n        const dataArrayForExcel = [];\n        that.state.dataSource.forEach(function (dataRow,index) {\n            const dataObjectToPush = {};\n            that.state.columns.forEach(function (column) {\n                if (column.export) {\n                    dataObjectToPush[column.title] = column.export(dataRow[column.dataIndex], dataRow,index);\n                } else {\n                    dataObjectToPush[column.title] = dataRow[column.dataIndex];\n                }\n            });\n            dataArrayForExcel.push(dataObjectToPush);\n        });\n        exportToPDF(excelColumns, dataArrayForExcel, `Export${  moment()}`, true);\n    }\n\n    excelExport() {\n        const that = this;\n        const excelColumns = [];\n        that.state.columns.forEach(function(item) {\n            if(!item.hideExport)\n                excelColumns.push(item.title)\n        });\n        const dataArrayForExcel = [];\n        that.state.dataSource.forEach(function (dataRow,index) {\n            const dataObjectToPush = {};\n            that.state.columns.forEach(function (column) {\n                if (column.export) {\n                    dataObjectToPush[column.title] = column.export(dataRow[column.dataIndex], dataRow,index);\n                } else {\n                    dataObjectToPush[column.title] = dataRow[column.dataIndex];\n                }\n            });\n            dataArrayForExcel.push(dataObjectToPush);\n        });\n        exportToExcel(excelColumns, dataArrayForExcel, `Export${  moment()}`);\n    }\n\n\n    getColumnSearchProps = dataIndex => ({\n        filterDropdown: ({setSelectedKeys, selectedKeys, confirm, clearFilters}) => (\n            <div style={{padding: 8}}>\n                <Input\n                  ref={node => {\n                        this.searchInput = node;\n                    }}\n                  placeholder={`Search ${dataIndex}`}\n                  value={selectedKeys[0]}\n                  onChange={e => setSelectedKeys(e.target.value ? [e.target.value] : [])}\n                  onPressEnter={() => this.handleSearch(selectedKeys, confirm)}\n                  style={{width: 188, marginBottom: 8, display: 'block'}}\n                />\n                <Button\n                  type=\"primary\"\n                  onClick={() => this.handleSearch(selectedKeys, confirm)}\n                  icon=\"search\"\n                  size=\"small\"\n                  style={{width: 90, marginRight: 8}}\n                >\n                    Search\n                </Button>\n                <Button onClick={() => this.handleReset(clearFilters)} size=\"small\" style={{width: 90}}>\n                    Reset\n                </Button>\n            </div>\n        ),\n        filterIcon: filtered => (<Icon type=\"search\" style={{color: filtered ? '#1890ff' : undefined}} />),\n        onFilter: (value, record) =>\n            record[dataIndex] != null ? record[dataIndex]\n                .toString()\n                .toLowerCase()\n                .includes(value.toLowerCase()) : '',\n        onFilterDropdownVisibleChange: visible => {\n            if (visible) {\n                setTimeout(() => this.searchInput.select());\n            }\n        },\n        render: text => (\n            <Highlighter\n              highlightStyle={{backgroundColor: '#ffc069', padding: 0}}\n              searchWords={[this.state.searchText]}\n              autoEscape\n              textToHighlight={text ? text.toString() : ''}\n            />\n        ),\n    });\n\n    handleSearch = (selectedKeys, confirm) => {\n        confirm();\n        this.setState({searchText: selectedKeys[0]});\n    };\n\n    handleReset = clearFilters => {\n        clearFilters();\n        this.setState({searchText: ''});\n    };\n\n    render() {\n        const that = this;\n        const columns = this.state.columns.map(item => {\n                if (!item.render)\n                    return {...item, ...that.getColumnSearchProps(item.dataIndex)}\n                return {...item};\n            }\n        )\n        return (\n<div>\n            {this.props.hideReport ? null : (\n                <Row>\n                    <Col>\n                        <Button.Group size=\"small\">\n                            <Button disabled={this.state.loading} type=\"primary\" onClick={this.excelExport}><Icon\n                              type=\"file-excel\"\n                            /> Excel\n                            </Button>\n                            <Button disabled={this.state.loading} type=\"primary\" onClick={this.pdfExport}><Icon\n                              type=\"file-pdf\"\n                            /> PDF\n                            </Button>\n\n                        </Button.Group>\n                    </Col>\n                </Row>\n              )}\n            <Row>\n                <Table\n                  pagination={{\n                    position: 'both',\n                    pageSizeOptions: ['10', '20', '30', '40', '50', '100'],\n                    showSizeChanger: true,\n                    showQuickJumper: true,\n                    size: \"small\",\n                    showTotal (total, range) {\n                        return <Tag>Showing <b>{range[0]}</b> to <b>{range[1]}</b> of <b>{total}</b> items</Tag>\n                    }\n                }}\n                  {...this.state}\n                  columns={columns}\n                />\n\n\n            </Row>\n</div>\n)\n    }\n\n}\n","import {Button, Row, Spin} from \"antd\";\nimport React from \"react\";\n\nexport default class InfiniteFeedLoaderButton extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            extraLoadingLabel: '',\n        }\n    }\n\n    startLoading = () => {\n        if (this.props.loaderFunction) {\n            this.props.loaderFunction();\n            this.startMakingExtraLabels();\n        }\n    }\n\n    startMakingExtraLabels = () => {\n        const that = this;\n        this.setState(function (prevState) {\n            if (prevState.extraLoadingLabel.length > 2) {\n                return {extraLoadingLabel: ''}\n            } \n                return {extraLoadingLabel: `${prevState.extraLoadingLabel  }.`}\n            \n        }, function () {\n            if (that.props.loading)\n                setTimeout(function () {\n                    that.startMakingExtraLabels();\n                }, 500)\n        })\n    }\n\n    render() {\n        if (this.props.loading) {\n            return (\n<Spin spinning={this.props.loading}>\n                <Row style={{minHeight: 200}} />\n</Spin>\n)\n        }\n        if (this.props.hidden) {\n            return (\n<Row>\n                <div style={{textAlign: 'center', margin: '15px 0px'}}>\n                    <small>No More Data Found</small>\n                </div>\n</Row>\n)\n        }\n        return (\n<Row>\n            <div style={{textAlign: 'center', margin: '15px 0px'}}>\n                <Button type=\"primary\" onClick={this.startLoading} loading={this.props.loading}>\n                    {this.props.loading ? `Loading${  this.state.extraLoadingLabel}` : 'Load More'}\n                </Button>\n            </div>\n</Row>\n)\n    }\n}\n","import React from \"react\";\nimport {Card, Col, DatePicker, Icon, Row, Select, Statistic, Typography} from \"antd\";\nimport moment from \"moment\";\nimport CustomizedTable from \"../../common/CustomizedTable\";\nimport {getAPI, interpolate} from \"../../../utils/common\";\nimport {AGENT_WALLET, MY_AGENTS, WALLET_LEDGER, WALLET_LEDGER_SUM} from \"../../../constants/api\";\nimport InfiniteFeedLoaderButton from \"../../common/InfiniteFeedLoaderButton\";\n\nconst {Text} = Typography;\nexport default class PatientWalletLedger extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            ledger: [],\n            ledgerDetails:{},\n            loading: false,\n            walletAmount: null,\n            selectedStartDate: moment().subtract(1, 'month'),\n            selectedEndDate: moment(),\n            agents: [],\n            selectedAgents: []\n        }\n    }\n\n    componentDidMount() {\n        this.loadData();\n        this.loadPatientWallet();\n        this.loadAgents();\n        this.loadSumData();\n    }\n\n    loadPatientWallet = () => {\n        const that = this;\n        if (this.props.currentPatient && this.props.currentPatient.id) {\n            const successFn = function (data) {\n                if (data.length)\n                    that.setState({\n                        walletAmount: data[0]\n                    })\n            }\n            const errorFn = function () {\n\n            }\n            getAPI(interpolate(AGENT_WALLET, [this.props.currentPatient.id]), successFn, errorFn);\n        } else {\n            this.setState({\n                pendingAmount: null\n            })\n        }\n    }\n\n    loadData = (page = 1) => {\n        const that = this;\n        this.setState({\n            loading: true\n        })\n        const successFn = function (data) {\n            if (data.current == 1) {\n                that.setState({\n                    ledger: data.results,\n                    loading: false,\n                    nextPage: data.next\n                })\n            } else {\n                that.setState(function (prevState) {\n                    return {\n                        ledger: [...prevState.ledger, ...data.results],\n                        loading: false,\n                        nextPage: data.next\n                    }\n                })\n            }\n        }\n        const errorFn = function () {\n            that.setState({\n                loading: false\n            })\n        }\n        const params = {\n            page,\n            start: this.state.selectedStartDate.startOf('day').format(),\n            end: this.state.selectedEndDate.endOf('day').format(),\n            agents: this.state.selectedAgents.join(',')\n        }\n        if (this.state.selectedAgents)\n            params.agents = this.state.selectedAgents.join(',');\n        getAPI(interpolate(WALLET_LEDGER, [this.props.currentPatient.id]), successFn, errorFn, params);\n    }\n\n    loadSumData = (page = 1) => {\n        const that = this;\n\n        const successFn = function (data) {\n                that.setState({\n                    ledgerDetails: data,\n                    nextPage: data.next\n                })\n\n        }\n        const errorFn = function () {\n        }\n        const params = {\n            page,\n            start: this.state.selectedStartDate.format(),\n            end: this.state.selectedEndDate.format(),\n            agents: this.state.selectedAgents.join(',')\n        }\n        if (this.state.selectedAgents)\n            params.agents = this.state.selectedAgents.join(',');\n        getAPI(interpolate(WALLET_LEDGER_SUM, [this.props.currentPatient.id]), successFn, errorFn, params);\n    }\n\n    loadAgents() {\n        const that = this;\n        const successFn = function (data) {\n            that.setState({\n                agents: data,\n            })\n        };\n        const errorFn = function () {\n        };\n        const apiParams = {\n            agent: true,\n            pagination: false\n        }\n        getAPI(interpolate(MY_AGENTS, [this.props.currentPatient.id]), successFn, errorFn, apiParams);\n    }\n\n    changeExpenseFilters = (type, value) => {\n        const that = this;\n        this.setState({\n            [type]: value\n        }, function () {\n            that.loadData(1);\n        })\n    }\n\n    render() {\n        const columns = [{\n            title: 'Date',\n            dataIndex: 'created_at',\n            key: 'created_at',\n            render: (value) => moment(value).format('LLL')\n        }, {\n            title: 'Patient',\n            dataIndex: 'received_from',\n            key: 'received_from',\n            render: (value, record) => value ? <Text>{value.user.first_name} ({value.custom_id})</Text> : '--'\n        }, , {\n            title: 'Refered By',\n            dataIndex: 'received_from.user.referer_data',\n            key: 'received_from.user.referer_data',\n            render: (value, record) => value && value.referer ? <Text>{value.referer.first_name} ({value.custom_id})</Text> : '--'\n        }, {\n            title: 'Ledger Comment',\n            dataIndex: 'comments',\n            key: 'comments',\n            render: (value, record) => record.is_cancelled ? <Text delete>{value}</Text> : value\n        },\n            //     {\n            //     title: 'Amount Type',\n            //     dataIndex: 'amount_type',\n            //     key: 'amount_type',\n            //     render: (value, record) => record.is_cancelled ? <Text delete>{value}</Text> : value\n            // },\n            {\n                title: 'Cr/Dr',\n                dataIndex: 'ledger_type',\n                key: 'ledger_type',\n                render: (value, record) => record.is_cancelled ? <Text delete>{value}</Text> : value\n            }, {\n                title: 'Amount',\n                dataIndex: 'amount',\n                key: 'amount',\n                render: (value, record) => record.is_cancelled ?\n                    <Text delete>{value.toFixed(2)}</Text> : value.toFixed(2)\n            }];\n        return (\n<div>\n            <Card title=\"Wallet Ledger\">\n                <Row gutter={16} style={{marginBottom: 10}}>\n                    <Col span={2} style={{textAlign: \"right\"}}>\n                        <b> Agents</b>\n                    </Col>\n                    <Col span={4}>\n                        <Select\n                          style={{width: '100%'}}\n                          value={this.state.selectedAgents}\n                          mode=\"multiple\"\n                          disabled={this.state.loading}\n                          onChange={(value) => this.changeExpenseFilters('selectedAgents', value)}\n                        >\n                            {this.state.agents.map(item => (\n<Select.Option\n  value={item.id}\n>{item.user.first_name}\n</Select.Option>\n))}\n                        </Select>\n                    </Col>\n                    {/* <Col span={2} style={{textAlign: \"right\"}}> */}\n                    {/*    <b> Payment Modes</b> */}\n                    {/* </Col> */}\n                    {/* <Col span={4}> */}\n                    {/*    <Select style={{width: '100%'}} value={this.state.selectedPaymentMode} */}\n                    {/*            disabled={this.state.loading} */}\n                    {/*            onChange={(value) => this.changeExpenseFilters('selectedPaymentMode', value)}> */}\n                    {/*        <Select.Option value={null}>--ALL PAYMENT MODE--</Select.Option> */}\n                    {/*        {this.state.paymentModes.map(item => <Select.Option */}\n                    {/*            value={item.id}>{item.mode}</Select.Option>)} */}\n                    {/*    </Select> */}\n                    {/* </Col> */}\n\n                    <Col span={2} style={{textAlign: \"right\"}}>\n                        <b> From</b>\n                    </Col>\n                    <Col span={4}>\n                        <DatePicker\n                          value={this.state.selectedStartDate}\n                          disabled={this.state.loading}\n                          allowClear={false}\n                          onChange={(value) => this.changeExpenseFilters('selectedStartDate', value)}\n                        />\n                    </Col>\n                    <Col span={2} style={{textAlign: \"right\"}}>\n                        <b> To</b>\n                    </Col>\n                    <Col span={4}>\n                        <DatePicker\n                          value={this.state.selectedEndDate}\n                          disabled={this.state.loading}\n                          allowClear={false}\n                          onChange={(value) => this.changeExpenseFilters('selectedEndDate', value)}\n                        />\n                    </Col>\n                </Row>\n                {this.state.walletAmount ? (\n                    <Row style={{textAlign: 'center', marginBottom: 10}}>\n                        {/* <Col span={12}> */}\n                        {/*    <Statistic title={\"\"} prefix={<Icon type={\"wallet\"}/>} */}\n                        {/*               value={this.state.walletAmount.refundable_amount}/> */}\n                        {/* </Col> */}\n                        <Col span={24}>\n                            <Statistic\n                              title=\"Wallet Total\"\n                              prefix={<Icon type=\"wallet\" />}\n                              value={this.state.walletAmount.non_refundable}\n                              precision={2}\n                            />\n                        </Col>\n                    </Row>\n                  ) : null}\n                <CustomizedTable\n                  dataSource={this.state.ledger}\n                  loading={this.state.loading}\n                  columns={columns}\n                  hideReport\n                  pagination={false}\n                />\n                <InfiniteFeedLoaderButton\n                  loading={this.state.loading}\n                  hidden={!this.state.nextPage}\n                  loaderFunction={() => this.loadData(this.state.nextPage)}\n                />\n                <Row style={{textAlign: 'center', marginBottom: 10}}>\n                    <Col span={8}>\n                        <Statistic title=\"Credit\" value={this.state.ledgerDetails.credit} precision={2} />\n                    </Col>\n                    <Col span={8}>\n                        <Statistic title=\"Debit\" value={this.state.ledgerDetails.debit} precision={2} />\n                    </Col>\n                    <Col span={8}>\n                        <Statistic title=\"Profit\" value={this.state.ledgerDetails.credit-this.state.ledgerDetails.debit} precision={2} />\n                    </Col>\n                </Row>\n            </Card>\n</div>\n)\n    }\n}\n"],"sourceRoot":""}