{"version":3,"sources":["app/components/core/AppHeader.js","app/components/core/AppSider.js","app/components/auth/forms/ChangePasswordForm.js","app/components/auth/Profile.js","app/components/patients/patient/PrintPatientForm.js","app/components/calendar/BlockCalendar.js","app/components/core/SuggestionBox.js","crashHandling/ErrorBoundary.js","crashHandling/utils/crashHandlingUtils.js","app/components/core/AppBase.js","app/utils/clinicUtils.js","app/components/common/DynamicFieldsForm.js","app/constants/hardData.js","app/utils/permissionUtils.js","app/components/common/errors/PermissionDenied.js","app/components/common/WebCamField.js","app/assets/img/kidneycarelogo.png","app/components/common/errors/Error404.js","app/components/calendar/EventPatientPopover.js","app/components/calendar/CreateAppointmentForm.js","app/components/calendar/CreateAppointment.js"],"names":["Header","AppHeader","props","searchPatient","value","that","setState","prevState","searchPatientString","getAPI","interpolate","SEARCH_PATIENT","data","patientListData","results","switchPortal","SAVE_CREDENTIALS","user","id","setUserCredentials","login","password","displayMessage","ERROR_MSG_TYPE","handlePatientSelect","event","history","push","replace","CUSTOM_STRING_SEPERATOR","state","email","msg","startLoadingMessage","sessionStorage","removeItem","reqData","getItem","postOuterAPI","CREDENTIALS","success","stopLoadingMessage","SUCCESS_MSG_TYPE","setItem","token","window","open","this","userMenu","Item","key","to","Divider","onClick","logout","style","background","padding","boxShadow","zIndex","float","margin","className","type","collapsed","toggleSider","mode","lineHeight","placeholder","showSearch","dropdownMatchSelectWidth","dropdownStyle","width","onSearch","defaultActiveFirstOption","showArrow","filterOption","onSelect","map","option","Option","toString","Meta","avatar","image","src","makeFileURL","backgroundColor","first_name","charAt","title","description","activePracticePermissions","PatientPhoneNumber","mobile","hideMobile","custom_id","Group","AddPatient","allowAllPermissions","MergePatients","onChange","switchPractice","defaultValue","active_practiceId","maxWidth","practiceList","practice","name","is_superuser","color","overlay","placement","icon","React","Component","Sider","SubMenu","AppSider","ItemGroup","onOpenChange","openKeys","latestOpenKey","find","indexOf","onHotKeyDown","bind","keyNm","console","log","keyName","OUTER_KEYS_HOTKEYS","onKeyDown","trigger","collapsible","breakpoint","onBreakpoint","broken","onCollapse","Applogo","alt","defaultSelectedKeys","theme","ViewCalendar","currentPatient","WebAdmin","FormItem","ChangePasswordForm","handleSubmit","e","preventDefault","form","validateFieldsAndScroll","err","values","changePassLoading","OLD_PASSWORD","oldPass","NEW_PASSWORD","newPass","postAPI","CHANGE_PASSWORD","message","handleConfirmBlur","target","confirmDirty","compareToFirstPassword","rule","callback","getFieldValue","validateToNextPassword","validatePassword","formItemLayout","labelCol","span","wrapperCol","getFieldDecorator","onSubmit","label","rules","required","prefix","validator","onBlur","loading","htmlType","Content","Profile","USER_DATA","userProfile","ChangePasswordLayout","create","minHeight","size","dataSource","activePracticeData","permissions_data","renderItem","item","gutter","UsersRow","marginBottom","textAlign","PrintPatientForm","setTimeout","print","newProps","httpEquiv","content","marginTop","borderBottom","logo","fontSize","address","locality","city","pincode","contact","website","colSpan","display","BlockCalendar","changeParamsForBlockedAppointments","blockedAppointmentParams","retrieveBlockingAppointments","block_from","block_to","APPOINTMENT_PERPRACTICE_API","blockingAppointments","start","moment","format","end","doctor","validateFields","BLOCK_CALENDAR","practiceDoctors","loadDoctors","initialValue","REQUIRED_FIELD_MESSAGE","showTime","use12Hours","allowClear","goBack","apppointment","status","CANCELLED_STATUS","border","borderRadius","textDecoration","borderLeft","practice_doctors","doctors_object","calendar_colour","AppointmentCard","changeAppointmentStatus","appointment","EventPatientPopover","appointmentId","schedule_at","patient","doctor_data","TextArea","SuggestionBox","onClose","close","SUGGESTIONS","visible","layout","autosize","minRows","maxRows","marginRight","ErrorBoundary","redirectToHome","location","hasError","error","errorInfo","crashData","hostname","text","componentStack","pathname","loggedInUser","CONFIG","prodDomain","crashHandling","slack","sendOnProduction","sendOnDevelopment","webHookUrl","logErrorToSlackChannel","subTitle","extra","children","Calendar","loadable","ReportsHome","WebAdminHome","InventoryHome","MeetingBooking","SettingsDash","PatientHome","AppBase","showDrawer","loggedInactivePractice","loggedInUserPractices","specialisations","loadingPermissions","activeData","successFn","permissions","practice_permissions","forEach","permission","codename","global_permissions","errorFn","activePracticeObj","practiceObj","length","setCurrentPractice","loadUserDetails","practiceId","spinning","tip","height","position","right","bottom","shape","path","render","route","exact","PermissionDenied","match","params","refreshClinicData","ViewMeeting","component","Error404","confirm","PRACTICESTAFF","selectedDoctor","staff","usersdata","role","parseInt","DOCTORS_ROLE","patientSettingMenu","hashCode","str","hash","i","charCodeAt","intToRGB","c","toUpperCase","substring","loadConfigParameters","parameters","join","CONFIG_API","loadMailingUserListForReportsMail","MAILING_USERS_LIST","mailingUsersList","sendReportMail","url","successMsg","errorMsg","mail_to","okText","okType","cancelText","onOk","SUCCESS","MAIL_SEND_MSG","MAIL_SEND_ERROR_MSG","onCancel","sendMail","RadioGroup","CheckboxGroup","DynamicFieldsForm","fieldDecorators","field","formData","urlInitialValues","MULTI_SELECT_FIELD","defaultValues","object","colorPickerKey","colorPickerColor","fields","formFields","SINGLE_IMAGE_UPLOAD_FIELD","file","response","image_path","MULTI_IMAGE_UPLOAD_FIELD","fileList","TIME_PICKER","DATE_PICKER","DATE_TIME_PICKER","isValid","QUILL_TEXT_FIELD","editorState","draftToHtml","convertToRaw","getCurrentContent","formProp","beforeSend","confirmText","submitForm","addMailTemplateTag","currentHtml","EditorState","createWithContent","ContentState","createFromBlockArray","htmlToDraft","toggleWebCam","webCamState","getImageandUpload","fieldKey","FormData","append","FILE_UPLOAD_BASE64","setFieldsValue","onEditorStateChange","authorisation","disabled","countryOptions","stateOptions","cityOptions","smsFields","resetFormData","colorChange","loadCountryData","addSMSTag","nextProps","COUNTRY_FIELD","search","pairValueArray","substr","split","urlInitialValue","keyValue","isNaN","parseFloat","changeRedirect","headers","Authorization","undefined","method","action","putAPI","hex","states","country","cities","EXTRA_DATA","prevValue","formLayout","PASSWORD_FIELD","INPUT_FIELD","follow","SELECT_FIELD","options","RADIO_FIELD","CHECKBOX_FIELD","SINGLE_CHECKBOX_FIELD","valuePropName","NUMBER_FIELD","min","max","TEXT_FIELD","inputChange","SMS_FIELD","MAIL_TEMPLATE_FIELD","createEmpty","preview","maxHeight","overflowY","dangerouslySetInnerHTML","__html","COLOR_PICKER","singleUploadprops","makeURL","FILE_UPLOAD_API","authorization","info","allowWebcam","Math","random","footer","getScreenShot","multiuploadprops","img","setAddressField","STATE_FIELD","EMAIL_FIELD","CITY_FIELD","DIVIDER_FIELD","LABEL_FIELD","PAYMENT_TYPES","PAYMENT_OFFLINE_MODE","DISEASE_TYPES","DRUG","EQUIPMENT","SUPPLIES","PROCEDURES","PRESCRIPTIONS","INVENTORY","INVENTORY_ITEM_TYPE","ADD_STOCK","CONSUME_STOCK","APPOINTMENT_CONFIRMATION_SMS_TAG_OPTIONS","EMR_TYPE","BILLING_TYPE","EMR_SUB_TYPE","BILLING_SUB_TYPE","CUSTOMIZE_PAPER_TYPE","PAPER_SIZE","PAGE_ORIENTATION","PRINTER_TYPE","HEADER_INCLUDE","LOGO_TYPE","LOGO_ALIGMENT","LOGO_INCLUDE","PATIENT_DETAILS_LIST","EXCLUDE_PATIENT_DOB","SMS_ENABLE","EMAIL_ENABLE","BIRTHDAY_SMS_ENABLE","DURATIONS_UNIT","DOSE_REQUIRED","SCHEDULE_STATUS","WAITING_STATUS","ENGAGED_STATUS","CHECKOUT_STATUS","TYPE_OF_CONSUMPTION","DAY_KEYS","NOTES","DEFAULT_TEMPERATURE_IN","DEFAULT_TEMPERATURE_METHOD","DEFAULT_BP_METHOD","APPOINTMENT_STATUS","PAYMENT_STATUS","OPD_IPD","ROLES","PATIENTS_RELATED_REPORT","DAILY_NEW_PATIENTS","EXPIRING_MEMBERSHIP","PATIENTS_FIRST_APPOINTMENT","MONTHLY_NEW_PATIENTS","NEW_MEMBERSHIP","ACTIVE_PATIENTS","FOLLOW_UP","MEDICINE","APPOINTMENT_RELATED_REPORT","APPOINTMENT_FOR_EACH_CATEGORY","CANCELLATION_NUMBERS","AVERAGE_WAITING_ENGAGED_TIME_DAY_WISE","AVERAGE_WAITING_ENGAGED_TIME_MONTH_WISE","DAILY_APPOINTMENT_COUNT","APPOINTMENT_FOR_EACH_DOCTOR","MONTHLY_APPOINTMENT_COUNT","APPOINTMENT_FOR_EACH_PATIENT_GROUP","APPOINTMENT_FOR_PATIENT_CONVERSION","EMR_RELATED_REPORT","DAILY_TREATMENT_COUNT","TREATMENTS_FOR_EACH_DOCTOR","MONTHLY_TREATMENT_COUNT","TREATMENT_FOR_EACH_CATEGORY","AMOUNT_DUE_RELATED_REPORT","AGEING_AMOUNT_DUE","AMOUNT_DUE_PER_DOCTOR","BLOOD_GROUPS","EXPENSE_RELATED_REPORT","DAILY_EXPENSES","EXPENSES_EACH_TYPE","MONTHLY_EXPENSES","INVENTORY_RELATED_REPORT","DAILY_INVENTORY","MONTHLY_INVENTORY","TOP_INVENTORY","BED_BOOKING_RELATED_REPORT","DAILY_BOOKING_COUNT","MONTHLY_BOOKING_COUNT","MEDICINE_USAGE_COUNT","BED_BOOKING_PACKAGE_COUNT","MLM_RELATED_REPORT","MARGIN_TYPE_WISE","WALLET_BALANCE_AMOUNT","AGENT_TREE_VIEW","PAYMENT_RELATED_REPORT","PAYMENT_RECEIVED_PATIENT_GROUP","PATIENTS_UNSETTLED_ADVANCE","MODE_OF_PAYMENTS","PAYMENT_RECEIVED_PER_DAY","PAYMENT_RECEIVED_PER_DOCTOR","PAYMENT_RECEIVED_PER_MONTH","INCOME_RELATED_REPORT","DAILY_INCOME","MONTHLY_INCOME","TAXED_INCOME","DOCTOR_EACH_INCOME","PROCEDURE_INCOME","PATIENT_GROUPS_INCOME","PRODUCT_INCOME","INVOICE_RELATED_REPORT","DAILY_WISE_RETURN_INVOICE","MONTHLY_WISE_RETURN_INVOICE","RETURN_INVOICE_FOR_EACH_TAX","RETURN_INVOICE_FOR_EACH_PROCEDURE","RETURN_INVOICE_FOR_EACH_PRODUCT","RETURN_INVOICE_FOR_EACH_DOCTOR","RETURN_INVOICE_FOR_EACH_PATIENT_GROUPS","SCHEDULE_OF_INVOICES","DISCOUNT","SCHEDULE_OF_PAYMENT","PATIENT_AGE","INNER_KEYS_HOTKEYS","ADVANCED_SEARCH","HAS_AGE","HAS_DOB","HAS_AADHAR_ID","HAS_EMAIL","HAS_GENDER","HAS_PINCODE","HAS_STREET","REFERED_BY_AGENT","GENDER_OPTION","CURRENCY_TYPE","ROUTES_TO_HIDE_PATIENT_SIDE_PANEL","PROMO_CODE_SMS_TAG_OPTIONS","PROMO_CODE_RUPEE_SMS_TAG_OPTIONS","BLOOD_GROUP_CONFIG_PARAM","PATIENT_SOURCE_CONFIG_PARAM","SMS_LANGUAGE_CONFIG_PARAM","FAMILY_RELATION_CONFIG_PARAM","GENDER_CONFIG_PARAM","INCOME_TYPE","PDF_FILE_EXTENSION","repeat","hideEmail","WebCamField","setRef","webcam","capture","imageSrc","getScreenshot","audio","ref","videoConstraints","facingMode","screenshotFormat","module","exports","loadAppointmentDetails","APPOINTMENT_API","updateAppointmentStatus","currentStatus","targetStatus","waiting","engaged","checkout","gender","slot","from","showStatusTimeline","overflow","ChangeAppointmentStatus","category_data","first_appointment","EditAppointment","onConfirm","CreateAppointmentForm","loadPracticeTiming","CALENDER_SETTINGS","dataObject","timing","dayKey","visting_hour_same_week","startTime","first_start_time","endTime","second_end_time","is_two_sessions","lunch","lunchStartTime","first_end_time","lunchEndTime","second_start_time","calendarTimings","findOutsidePracticeTiming","loadDoctorsTiming","timeToCheckBlock","DOCTOR_VISIT_TIMING_API","doctorTimings","findOutsideDoctorTiming","setBlockedTiming","loadAppointmentList","findBlockedTiming","blockRow","practiceBlock","doctorBlock","cal_fdate","cal_tdate","add","flag","dayValue","toLowerCase","daysTimings","practiceOutsideAvailableTiming","doctorOutsideAvailableTiming","saving","patientDetails","patient_name","patient_email","patient_mobile","loadData","ALL_APPOINTMENT_API","PATIENT_PROFILE","handleClick","redirect","appointmentCategories","procedure_category","treatmentNotes","practice_staff","appointmentDetail","procedureObjectsById","loadProcedureCategory","loadTreatmentNotes","loadAppointment","loadAppointmentCategories","appointmentid","PROCEDURE_CATEGORY","obj","pagination","EMR_TREATMENTNOTES","APPOINTMENT_CATEGORIES","redirectVar","current","apiParams","start_time","end_time","APPOINTMENT_SCHEDULE","appointmentList","formPatients","offset","treatmentNotesOption","drug","categoryOptions","category","appointmentTime","Date","showIcon","listStyle","paddingLeft","paddingRight","marginLeft","bordered","notes","CreateAppointment","TestFormLayout"],"mappings":"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","file":"static/js/12.8ec38ec6.chunk.js","sourcesContent":["import React from \"react\";\nimport {AutoComplete, Avatar, Button, Dropdown, Icon, Layout, List, Menu, Select, Tag} from \"antd\";\nimport {Link, Redirect} from 'react-router-dom';\nimport axios from \"axios\";\nimport {\n    displayMessage,\n    getAPI,\n    handleErrorResponse,\n    interpolate,\n    makeFileURL,\n    makeURL,\n    postOuterAPI, startLoadingMessage, stopLoadingMessage\n} from \"../../utils/common\";\nimport {CREDENTIALS, PATIENT_PROFILE, SAVE_CREDENTIALS, SEARCH_PATIENT, SWITCH_PORTAL} from \"../../constants/api\";\nimport {hideMobile} from \"../../utils/permissionUtils\";\nimport {getAuthToken} from \"../../utils/auth\";\nimport {ERROR_MSG_TYPE, SUCCESS_MSG_TYPE} from \"../../constants/dataKeys\";\nimport {CUSTOM_STRING_SEPERATOR} from \"../../constants/hardData\";\n\nconst {Header} = Layout;\n\nclass AppHeader extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            patientListData: [],\n            // searchPatientString: null,\n            // loading:false\n        }\n    }\n\n    searchPatient = (value) => {\n        const that = this;\n        this.setState(function (prevState) {\n            return {\n                searchPatientString: value\n            }\n        });\n        const successFn = function (data) {\n            that.setState(function (prevState) {\n                if (prevState.searchPatientString == value)\n                    return {\n                        patientListData: [...data.results],\n                    }\n                return {}\n            })\n        };\n        const errorFn = function (data) {\n            that.setState({\n                searchPatientString: null,\n            })\n        };\n        if (value) {\n            getAPI(interpolate(SEARCH_PATIENT, [value]), successFn, errorFn);\n        }\n\n    };\n\n    setUserCredentials(email, password) {\n        const that = this;\n        const msg = startLoadingMessage(\"Waiting for authentication from server...\");\n        sessionStorage.removeItem('token');\n        const reqData = {\n            email,\n            password\n        };\n        const successFn = function (data) {\n            if (data.success) {\n                stopLoadingMessage(msg, SUCCESS_MSG_TYPE, \" Authentication Successfully!!\");\n                sessionStorage.setItem(\"token\", data.token);\n            }\n            if (sessionStorage.getItem('token')) {\n                window.open('/task/');\n            } else {\n                stopLoadingMessage(msg, ERROR_MSG_TYPE, \"Authentication failed. User not found.\");\n            }\n\n        };\n        const errorFn = function () {\n\n        };\n        if (sessionStorage.getItem('token') == null) {\n            postOuterAPI(CREDENTIALS, reqData, successFn, errorFn);\n        }\n\n    };\n\n    switchPortal = () => {\n        const that = this;\n        const successFn = function (data) {\n            if (data) {\n                that.setUserCredentials(data.login, data.password);\n                // that.setUserCredentials(data.email,data.password);\n            }\n\n        };\n        const errorFn = function () {\n            displayMessage(ERROR_MSG_TYPE, \"Something went wrong.\");\n        };\n\n        getAPI(interpolate(SAVE_CREDENTIALS, [that.props.user.id]), successFn, errorFn);\n    };\n\n\n    handlePatientSelect = (event) => {\n        if (event) {\n            this.props.history.push(`/patient/${  event.replace(CUSTOM_STRING_SEPERATOR, '')  }/profile`);\n            this.setState({\n                searchPatientString: null,\n            });\n        }\n    }\n\n    render() {\n        const that = this;\n        const userMenu = (\n            <Menu>\n                <Menu.Item key=\"profile\">\n                    <Link to=\"/profile\">Profile</Link>\n                </Menu.Item>\n                <Menu.Divider />\n                <Menu.Item key=\"website\" onClick={this.switchPortal}>\n                    <small>Switch to Tasks ></small>\n                </Menu.Item>\n                <Menu.Divider />\n                <Menu.Item key=\"logout\">\n                    <a onClick={this.props.logout}>Log out</a>\n                </Menu.Item>\n            </Menu>\n        );\n        return (\n<Header style={{background: '#fff', padding: 0, boxShadow: '0 2px 4px 0 rgba(38,50,69,.2)', zIndex: 1}}>\n            <div style={{float: 'left', margin: '0px 20px'}}>\n                <Icon\n                  className=\"trigger\"\n                  type={this.props.collapsed ? 'menu-unfold' : 'menu-fold'}\n                  onClick={() => this.props.toggleSider(!this.props.collapsed)}\n                />\n            </div>\n            <Menu\n              mode=\"horizontal\"\n              style={{lineHeight: '64px'}}\n            >\n                <Menu.Item key=\"5\">\n                    <AutoComplete\n                      placeholder=\"Patient Name\"\n                      showSearch\n                      dropdownMatchSelectWidth={false}\n                      dropdownStyle={{width: 400}}\n                      onSearch={this.searchPatient}\n                      defaultActiveFirstOption={false}\n                      showArrow={false}\n                      value={this.state.searchPatientString}\n                      filterOption={false}\n                      onSelect={this.handlePatientSelect}\n                    >\n                        {this.state.patientListData.map((option) => (\n<AutoComplete.Option\n  value={option.id.toString() + CUSTOM_STRING_SEPERATOR}\n>\n                            <List.Item style={{padding: 0}}>\n                                <List.Item.Meta\n                                  avatar={(option.image ? <Avatar src={makeFileURL(option.image)} /> : (\n                                        <Avatar style={{backgroundColor: '#87d068'}}>\n                                            {option.user.first_name ? option.user.first_name.charAt(0) :\n                                                <Icon type=\"user\" />}\n                                        </Avatar>\n                                      ))}\n                                  title={option.user.first_name}\n                                  description={that.props.activePracticePermissions.PatientPhoneNumber ? option.user.mobile : hideMobile(option.user.mobile)}\n                                />\n                                <div>{option.custom_id ? option.custom_id : option.user.id}</div>\n                            </List.Item>\n</AutoComplete.Option>\n))}\n                    </AutoComplete>\n                </Menu.Item>\n                <Menu.Item key=\"4\">\n                    <Button.Group>\n                        {that.props.activePracticePermissions.AddPatient || that.props.allowAllPermissions ? (\n                            <Link to=\"/patients/profile/add\">\n                                <Button type=\"primary\">\n                                    <Icon type=\"plus\" />Add Patient\n                                </Button>\n                            </Link>\n                          ) : null}\n                        {that.props.activePracticePermissions.MergePatients || that.props.allowAllPermissions ? (\n                            <Link to=\"/patients/merge\">\n                                <Button type=\"primary\">\n                                    <Icon type=\"user-add\" />Merge Patients\n                                </Button>\n                            </Link>\n                          ) : null}\n                    </Button.Group>\n                </Menu.Item>\n                <Menu.Item key=\"3\">\n                    <Select\n                      onChange={this.props.switchPractice}\n                      defaultValue={this.props.active_practiceId}\n                      value={this.props.active_practiceId}\n                      style={{width: '300px', maxWidth: '70vw'}}\n                    >\n                        {this.props.practiceList && this.props.practiceList.map((option) => (\n<Select.Option\n  key={option.practice.id}\n  value={option.practice.id}\n>{option.practice.name}\n</Select.Option>\n))}\n                    </Select>\n                </Menu.Item>\n                {/* <Menu.Item key=\"3\"><Search */}\n                {/* placeholder=\"Search\" */}\n                {/* onSearch={value => console.log(value)} */}\n                {/* style={{width: 200}} */}\n                {/* /></Menu.Item> */}\n\n                <div style={{float: 'right', margin: '0px 20px'}}>\n                    {this.props.user && this.props.user.is_superuser ? <Tag color=\"red\">SuperUser</Tag> : null}\n                    <Dropdown overlay={userMenu} placement=\"bottomRight\">\n\n                        <Avatar style={{backgroundColor: '#87d068'}} icon=\"user\" />\n                    </Dropdown>\n                </div>\n\n            </Menu>\n</Header>\n)\n    }\n}\n\nexport default AppHeader;\n","import React from \"react\";\nimport {Divider, Icon, Layout, Menu} from 'antd';\nimport {Link} from 'react-router-dom';\nimport Hotkeys from \"react-hot-keys\";\nimport Applogo from '../../assets/img/kidneycarelogo.png'\nimport {OUTER_KEYS_HOTKEYS} from \"../../constants/hardData\";\n\nconst {Sider} = Layout;\nconst {SubMenu} = Menu;\nconst MenuItemGroup = Menu.ItemGroup;\n\nclass AppSider extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            openKeys: [],\n        }\n        this.onHotKeyDown = this.onHotKeyDown.bind(this);\n    }\n\n    onOpenChange = (openKeys) => {\n        const rootSubmenuKeys = ['sub1', 'sub2'];\n        const latestOpenKey = openKeys.find(key => this.state.openKeys.indexOf(key) === -1);\n        if (rootSubmenuKeys.indexOf(latestOpenKey) === -1) {\n            this.setState({openKeys});\n        } else {\n            this.setState({\n                openKeys: latestOpenKey ? [latestOpenKey] : [],\n            });\n        }\n    };\n\n    onHotKeyDown(keyNm) {\n        console.log(keyNm);\n        const that = this;\n        switch (keyNm) {\n            case 'alt+c':\n                that.props.history.push(\"/calendar\");\n                break;\n            case 'alt+p':\n                that.props.history.push(\"/patients/profile\");\n                break;\n            case 'alt+r':\n                that.props.history.push(\"/reports/appointments\");\n                break;\n            case 'alt+s':\n                that.props.history.push('/settings/clinics');\n                break;\n            case 'alt+b':\n                that.props.history.push(\"/inventory\");\n                break;\n            case 'alt+w':\n                that.props.history.push(\"/web/videos\");\n                break;\n        }\n    }\n\n\n    render() {\n        const that = this;\n        return (\n<Hotkeys keyName={OUTER_KEYS_HOTKEYS} onKeyDown={(value) => this.onHotKeyDown(value)}>\n            <Sider\n                // style={{background: '#fff'}}\n              trigger={null}\n              collapsible\n              collapsed={this.props.collapsed}\n              style={{zIndex: 1}}\n              breakpoint=\"xxl\"\n                // collapsedWidth=\"0\"\n              onBreakpoint={(broken) => {\n                    // console.log(broken);\n                    that.props.toggleSider(broken);\n                }}\n              onCollapse={(collapsed, type) => {\n                    // console.log(collapsed, type);\n                }}\n            >\n                <img src={Applogo} alt=\"\" style={{width: '100%', padding: '20px'}} />\n\n                <Menu\n                  mode=\"inline\"\n                  defaultSelectedKeys={['1']}\n                  openKeys={this.state.openKeys}\n                  onOpenChange={this.onOpenChange}\n                  theme=\"dark\"\n                >\n                    {this.props.activePracticePermissions.ViewCalendar ? (\n                        <Menu.Item key=\"1\">\n                            <Link to=\"/calendar\">\n                                <Icon type=\"schedule\" />\n                                <span className=\"nav-text\"><span\n                                  className=\"shortcutLetterHighlight\"\n                                >C\n                                                           </span>alendar\n                                </span>\n                            </Link>\n                        </Menu.Item>\n                      ) : null}\n                    <Menu.Item key=\"26\">\n                        <Link\n                          to={this.props.currentPatient ? `/patient/${  this.props.currentPatient.id  }/profile` : \"/patients/profile\"}\n                        >\n                            <Icon type=\"user\" />\n                            <span className=\"nav-text\"><span\n                              className=\"shortcutLetterHighlight\"\n                            >P\n                                                       </span>atients\n                            </span>\n                        </Link>\n                    </Menu.Item>\n                    <Menu.Item key=\"27\">\n                        <Link to=\"/reports/appointments\">\n                            <Icon type=\"bar-chart\" />\n                            <span className=\"nav-text\"><span className=\"shortcutLetterHighlight\">R</span>eports</span>\n                        </Link>\n                    </Menu.Item>\n                    <Menu.Item key=\"5\">\n                        <Link to=\"/settings/clinics\">\n                            <Icon type=\"setting\" />\n                            <span className=\"nav-text\"><span\n                              className=\"shortcutLetterHighlight\"\n                            >S\n                                                       </span>ettings\n                            </span>\n                        </Link>\n                    </Menu.Item>\n                    <SubMenu\n                      key=\"sub1\"\n                      title={<span><Icon type=\"gold\" /><span><span className=\"shortcutLetterHighlight\">B</span>ack Office</span></span>}\n                    >\n                        <Menu.Item key=\"6\">\n                            <Link to=\"/inventory/expenses\">\n                                <Icon type=\"credit-card\" />\n                                <span className=\"nav-text\">Expenses</span>\n                            </Link>\n                        </Menu.Item>\n                        <Menu.Item key=\"7\">\n                            <Link to=\"/inventory/activity\">\n                                <Icon type=\"bell\" />\n                                <span className=\"nav-text\">Activities</span>\n                            </Link>\n                        </Menu.Item>\n                        <Menu.Item key=\"8\">\n                            <Link to=\"/inventory/manufacture\">\n                                <Icon type=\"database\" />\n                                <span className=\"nav-text\">Manufacturers</span>\n                            </Link>\n                        </Menu.Item>\n                        <Menu.Item key=\"42\">\n                            <Link to=\"/inventory/vendor\">\n                                <Icon type=\"database\" />\n                                <span className=\"nav-text\">Vendor</span>\n                            </Link>\n                        </Menu.Item>\n                        <Menu.Item key=\"9\">\n                            <Link to=\"/inventory/lab\">\n                                <Icon type=\"experiment\" />\n                                <span className=\"nav-text\">Labs</span>\n                            </Link>\n                        </Menu.Item>\n                        <Menu.Item key=\"10\">\n                            <Link to=\"/inventory\">\n                                <Icon type=\"gold\" />\n                                <span className=\"nav-text\">Inventory</span>\n                            </Link>\n                        </Menu.Item>\n                    </SubMenu>\n                    {this.props.activePracticePermissions.WebAdmin ? (\n                        <Menu.Item key=\"web-1\">\n                            <Link to=\"/web/videos\">\n                                <Icon type=\"google\" />\n                                <span className=\"nav-text\"><span className=\"shortcutLetterHighlight\">W</span>eb Admin</span>\n                            </Link>\n                        </Menu.Item>\n                      )\n                        : null}\n                        <Menu.Item key=\"11\">\n                            <Link to=\"/meeting-booking\">\n                                <Icon type=\"reconciliation\" />\n                                <span className=\"nav-text\">Meeting Booking</span>\n                            </Link>\n                        </Menu.Item>\n                    {/* <Menu.Item key={'12'}> */}\n                    {/*    <Link to=\"/alternate-medicine\"> */}\n                    {/*        <Icon type={\"swap\"}/> */}\n                    {/*        <span className=\"nav-text\">Alternate Medicines</span> */}\n                    {/*    </Link> */}\n                    {/* </Menu.Item> */}\n                </Menu>\n            </Sider>\n</Hotkeys>\n)\n    }\n}\n\nexport default AppSider;\n","import React from \"react\";\nimport {Button, Form, Icon, message, Input} from \"antd\";\nimport {postAPI, putAPI, validatePassword} from \"../../../utils/common\";\nimport {CHANGE_PASSWORD} from \"../../../constants/api\";\nimport {NEW_PASSWORD, OLD_PASSWORD} from \"../../../constants/formLabels\";\n\nconst FormItem = Form.Item;\nexport default class ChangePasswordForm extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            confirmDirty: false,\n            changePassLoading: false\n\n        };\n        this.handleSubmit = this.handleSubmit.bind(this);\n    }\n\n    handleSubmit = (e) => {\n        e.preventDefault();\n        const that = this;\n        this.props.form.validateFieldsAndScroll((err, values) => {\n            if (!err) {\n                that.setState({\n                    changePassLoading: true\n                });\n                const data = {\n                    [OLD_PASSWORD]: values.oldPass,\n                    [NEW_PASSWORD]: values.newPass,\n                };\n                const successFn = function (data) {\n                    message.success(data.message);\n                    that.setState({\n                        changePassLoading: false\n                    });\n                };\n                const errorFn = function () {\n                    that.setState({\n                        changePassLoading: false\n                    });\n                };\n                postAPI(CHANGE_PASSWORD, data, successFn, errorFn);\n            }\n        });\n    };\n\n    handleConfirmBlur = (e) => {\n        const {value} = e.target;\n        this.setState({confirmDirty: this.state.confirmDirty || !!value});\n    };\n\n    compareToFirstPassword = (rule, value, callback) => {\n        const {form} = this.props;\n        if (value && value != form.getFieldValue('newPass')) {\n            callback('Two passwords that you enter is inconsistent!');\n        } else {\n            callback();\n        }\n    };\n\n    validateToNextPassword = (rule, value, callback) => {\n        callback(validatePassword(rule, value, callback));\n    };\n\n    render() {\n        const formItemLayout = {\n            labelCol: {span: 6},\n            wrapperCol: {span: 14},\n        };\n        const {getFieldDecorator} = this.props.form;\n        return (\n            <Form onSubmit={this.handleSubmit}>\n                <FormItem label=\"Old Password\" {...formItemLayout}>\n                    {getFieldDecorator('oldPass', {\n                        rules: [{required: true, message: 'Please enter your old Password!'}],\n                    })(\n                        <Input\n                          prefix={<Icon type=\"lock\" style={{color: 'rgba(0,0,0,.25)'}} />}\n                          type=\"password\"\n                          placeholder=\"Old Password\"\n                        />\n                    )}\n                </FormItem>\n                <FormItem label=\"New Password\" {...formItemLayout}>\n                    {getFieldDecorator('newPass', {\n                        rules: [{\n                            required: true, message: 'Please enter your new Password!'\n                        }, {\n                            validator: this.validateToNextPassword\n                        }]\n                    })(\n                        <Input\n                          prefix={<Icon type=\"lock\" style={{color: 'rgba(0,0,0,.25)'}} />}\n                          type=\"password\"\n                          placeholder=\"New Password\"\n                        />\n                    )}\n                </FormItem>\n                <FormItem label=\"Confirm Password\" {...formItemLayout}>\n                    {getFieldDecorator('confirmPass', {\n                        rules: [{required: true, message: 'Please confirm your new Password!'}, {\n                            validator: this.compareToFirstPassword\n                        }],\n                    })(\n                        <Input\n                          prefix={<Icon type=\"lock\" style={{color: 'rgba(0,0,0,.25)'}} />}\n                          type=\"password\"\n                          placeholder=\"Confirm Password\"\n                          onBlur={this.handleConfirmBlur}\n                        />\n                    )}\n                </FormItem>\n                <FormItem>\n                    <Button\n                      loading={this.state.changePassLoading}\n                      type=\"primary\"\n                      htmlType=\"submit\"\n                      className=\"login-form-button\"\n                    >\n                        Change Password\n                    </Button>\n                </FormItem>\n            </Form>\n        );\n    }\n}\n","import {Card, Col, Form, List, Row, Divider,Layout} from \"antd\";\nimport React from \"react\";\nimport ChangePasswordForm from \"./forms/ChangePasswordForm\";\n\nimport {getAPI, interpolate} from \"../../utils/common\";\nimport {USER_DATA} from \"../../constants/api\";\n\nconst {Content} = Layout;\nexport default class Profile extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {};\n        console.log(this.state);\n    }\n\n    loadProfile() {\n        const that = this;\n        const successFn = function (data) {\n            that.setState({\n                userProfile: data,\n                loading: false\n            });\n        };\n        const errorFn = function () {\n            that.setState({\n                loading: false\n            })\n        };\n        getAPI(USER_DATA, successFn, errorFn);\n    }\n\n    render() {\n        const that = this;\n        const ChangePasswordLayout = Form.create()(ChangePasswordForm);\n        return (\n<Content\n  className=\"main-container\"\n  style={{\n            margin: '24px 16px',\n            // padding: 24,\n            minHeight: 280,\n            // marginLeft: '200px'\n        }}\n>\n            <Row>\n                <Col span={12}>\n                    <Card title=\"Change Password\">\n                        <ChangePasswordLayout />\n                    </Card>\n                </Col>\n                <Col span={12}>\n                    <Card title=\"My Permissions\">\n                        <List\n                          size=\"small\"\n                          dataSource={that.props.activePracticeData ? that.props.activePracticeData.permissions_data : []}\n                          renderItem={item => <List.Item>{item.name}</List.Item>}\n                        />\n                    </Card>\n                </Col>\n                <Divider />\n                <Col span={12}>\n                    <Card title=\"My Profile\">\n                        <Row gutter={16}>\n                            <Col span={6}>\n                                <UsersRow label=\"Name \" value={this.props.user.first_name} />\n                                <UsersRow label=\"Email Id \" value={this.props.user.email} />\n                                <UsersRow label=\"Contact No.\" value={this.props.user.mobile} />\n                            </Col>\n                        </Row>\n                    </Card>\n                </Col>\n            </Row>\n</Content>\n)\n    }\n}\n\nfunction UsersRow(props) {\n    return (\n<Row gutter={16} style={{marginBottom: '5px'}}>\n        <Col span={12} style={{textAlign: 'right'}}>{props.label}:</Col>\n        <Col span={12}><strong>{props.value}</strong></Col>\n</Row>\n)\n}\n","import React from \"react\";\nimport '../../../assets/printpatientform.css';\nimport {makeFileURL} from \"../../../utils/common\";\n\n\nexport default class PrintPatientForm extends React.Component {\n    constructor(props) {\n        super(props);\n    }\n\n    componentDidMount() {\n        if (this.props.activePracticeData) {\n            setTimeout(function () {\n                window.print();\n            }, 1000)\n\n        }\n    }\n\n    componentWillReceiveProps(newProps) {\n        if (newProps.activePracticeData) {\n            setTimeout(function () {\n                window.print();\n            }, 1000)\n\n        }\n    }\n\n    render() {\n        if (this.props.activePracticeData)\n            return (\n<html className=\"PrintPatientForm\">\n            <meta httpEquiv=\"Content-Type\" content=\"text/html; charset=utf-8\" />\n            <body style={{margin: '0 auto', marginTop: '20px'}}>\n            <div style={{margin: \"0px 10%\"}}>\n\n                <table style={{borderBottom: \"1px solid #000\", width: '100%'}}>\n                    <tr>\n                        <td style={{width: '150px'}}>\n                            <img\n                              style={{width:'150px'}}\n                              src={makeFileURL(this.props.activePracticeData.logo)}\n                            />\n                        </td>\n                        <td>\n                            <h2 style={{margin: \"5px\"}}>{this.props.activePracticeData.name}</h2>\n                            <p style={{margin: \"5px\", fontSize: \"11px\"}}>{this.props.activePracticeData.address}<br />{this.props.activePracticeData.locality}<br />{this.props.activePracticeData.city}, {this.props.activePracticeData.state}-\n                                {this.props.activePracticeData.pincode}\n                            </p>\n                            <div style={{margin: \"5px\", fontSize: \"11px\"}}>\n                                Email : <strong>{this.props.activePracticeData.email}</strong>\n                                <br />\n\n                                Phone : <strong>{this.props.activePracticeData.contact}</strong>\n                                <br />\n\n                                Website : <strong>{this.props.activePracticeData.website}</strong>\n                                <br />\n                            </div>\n                        </td>\n                    </tr>\n                </table>\n\n\n                <h3 className=\"centeralign\">\n                    Patient Information \n                </h3>\n                <table>\n                    <tr>\n                        <td colSpan=\"2\">\n                            <h4>Personal Details</h4>\n                        </td>\n                    </tr>\n                    <tr>\n                        <td className=\"rightalign\" style={{width: '30%'}}>Name</td>\n                        <td>\n                            <div className=\"textfield\" />\n                        </td>\n                    </tr>\n                    <tr>\n                        <td className=\"rightalign\">Patient ID</td>\n                        <td>\n                            <div className=\"textfield\" />\n                            <span className=\"leftrightmargin_10\">(official use)</span>\n                        </td>\n                    </tr>\n                    <tr id=\"nationalid\" style={{display: \"none\"}}>\n                        <td className=\"rightalign\">\n                            <span id=\"nationalidlabel\" />\n                        </td>\n                        <td>\n                            <div className=\"textfield\" />\n                        </td>\n                    </tr>\n                    <tr>\n                        <td className=\"rightalign\">Mobile Number</td>\n                        <td>\n                            <div className=\"textfield\" />\n                        </td>\n                    </tr>\n\n                    <tr>\n                        <td colSpan=\"2\">\n                            <h4>Contact Details</h4>\n                        </td>\n                    </tr>\n                    <tr>\n                        <td className=\"rightalign\">Email</td>\n                        <td>\n                            <div className=\"textfield\" />\n                        </td>\n                    </tr>\n                    <tr>\n                        <td className=\"rightalign\">Land-line Number(s)</td>\n                        <td>\n                            <div className=\"textfield\" />\n                        </td>\n                    </tr>\n                    <tr>\n                        <td className=\"rightalign\">Address</td>\n                        <td>\n                            <div className=\"textarea\" />\n                        </td>\n                    </tr>\n\n                    <tr>\n                        <td colSpan=\"2\">\n                            <h4>General Details</h4>\n                        </td>\n                    </tr>\n                    <tr>\n                        <td className=\"rightalign\">Gender</td>\n                        <td>\n                            <div className=\"radio\" />\n                            <label>Male </label>\n                            <div className=\"radio\" />\n                            <label>Female </label>\n                        </td>\n                    </tr>\n                    <tr>\n                        <td className=\"rightalign\">Blood Group</td>\n                        <td>\n                            <div className=\"textfield\" />\n                        </td>\n                    </tr>\n                    <tr>\n                        <td className=\"rightalign\">Date of Birth / Age</td>\n                        <td>\n                            <div className=\"textfield\" />\n                        </td>\n                    </tr>\n\n\n                </table>\n                <p>I hereby declare that the information provided above is true and correct to the best of my knowledge.\n                    I give consent to the performance of medical / surgical / anesthesia / diagnostic procedure /\n                    treatment to be performed upon myself at B.K. Arogyam & Research Pvt Ltd. I will pay in full any\n                    cost of treatment or insurance co-payments according to the office's financial policy. \n                </p>\n                <div className=\"date\">Date</div>\n                <div className=\"signature\">Patient's Signature</div>\n            </div>\n            </body>\n</html>\n)\n        return null;\n    }\n}\n","import React from \"react\";\nimport moment from \"moment\";\nimport {Form, Card, Row, Col,Popover, List,Button, DatePicker,TimePicker,Input,Select,Divider} from \"antd\";\nimport { tag } from \"postcss-selector-parser\";\nimport {\n    DATE_PICKER,\n    DATE_TIME_PICKER, DOCTORS_ROLE,\n    ERROR_MSG_TYPE,\n    INPUT_FIELD,\n    SELECT_FIELD,\n    TIME_PICKER\n} from \"../../constants/dataKeys\";\nimport DynamicFieldsForm from \"../common/DynamicFieldsForm\";\nimport {APPOINTMENT_PERPRACTICE_API, BLOCK_CALENDAR, PRACTICESTAFF} from \"../../constants/api\";\nimport {displayMessage, getAPI, interpolate,postAPI} from \"../../utils/common\";\nimport { loadDoctors } from \"../../utils/clinicUtils\";\nimport {\n    CANCELLED_STATUS,\n    CHECKOUT_STATUS,\n    ENGAGED_STATUS,\n    SCHEDULE_STATUS,\n    WAITING_STATUS\n} from \"../../constants/hardData\";\nimport EventPatientPopover from \"./EventPatientPopover\";\nimport {REQUIRED_FIELD_MESSAGE} from \"../../constants/messages\";\n\nclass BlockCalendar extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            practiceDoctors: [],\n            blockedAppointmentParams: {\n                block_from:moment(),\n                block_to:moment(),\n            }\n        };\n        loadDoctors(this);\n    }\n\n    // componentDidMount() {\n    //\n    // }\n    changeParamsForBlockedAppointments = (type, value) => {\n        const that = this;\n        this.setState(function (prevState) {\n            return {\n                blockedAppointmentParams: {\n                    ...prevState.blockedAppointmentParams,\n                    [type]: value\n                }\n            }\n        }, function () {\n            // if (valueObj.block_from && valueObj.block_to)\n            that.retrieveBlockingAppointments();\n        })\n    }\n\n    retrieveBlockingAppointments = () => {\n        const that = this;\n        that.setState({\n            loading: true\n        });\n        const successFn = function (data) {\n            that.setState(function (prevState) {\n                return {\n                    blockingAppointments: data,\n                    loading: false\n                }\n            });\n        }\n        const errorFn = function () {\n            that.setState({\n                loading: false\n            })\n        }\n        if (this.state.blockedAppointmentParams.block_from && this.state.blockedAppointmentParams.block_to)\n            getAPI(interpolate(APPOINTMENT_PERPRACTICE_API, [this.props.active_practiceId]), successFn, errorFn, {\n                start: moment(that.state.blockedAppointmentParams.block_from).format('YYYY-MM-DD'),\n                end: moment(that.state.blockedAppointmentParams.block_to).format('YYYY-MM-DD'),\n                doctor:that.state.blockedAppointmentParams.doctor,\n            });\n    }\n\n    handleSubmit =(e)=>{\n        const that=this;\n        e.preventDefault();\n        let reqData={}\n        this.props.form.validateFields((err, values) => {\n            if (!err) {\n                reqData = {...values,\n                    practice:this.props.active_practiceId,\n                    // block_from:moment(that.state.blockedAppointmentParams.block_from).format('YYYY-MM-DD'),\n                    // block_to:moment(that.state.blockedAppointmentParams.block_to).format('YYYY-MM-DD'),\n\n                };\n\n            }\n        });\n\n        const successFn =function(data){\n            if (that.props.history){\n                that.props.history.replace('/calendar');\n            }\n        };\n        const errorFn=function(){\n\n        };\n        postAPI(BLOCK_CALENDAR,reqData,successFn,errorFn)\n    };\n\n    render(){\n        const that = this;\n        const {getFieldDecorator} = this.props.form;\n\n        const formItemLayout = ({\n            labelCol: {span: 6},\n            wrapperCol: {span: 4},\n        });\n        //\n        // let doctorArray=this.state.practiceDoctors;\n        // let loginUser =that.props.user;\n        // const doctorId={};\n        // let flag=true;\n        // doctorArray.forEach(function (items) {\n        //     if (items.user.id == loginUser.id){\n        //         doctorId.id=that.loginUser.id;\n        //         flag=false;\n        //         return false;\n        //     }\n        // },function () {\n        //     doctorId.id=doctorArray[0].user.id\n        // });\n\n        return(\n<Card title=\"Block Calendar\">\n                <Row>\n                    <Col span={18}>\n                        <Form onSubmit={this.handleSubmit}>\n                            <Form.Item label=\"Block From\" {...formItemLayout}>\n                                {getFieldDecorator('block_from',{initialValue:moment(),rules: [{ required: true, message: REQUIRED_FIELD_MESSAGE }]})\n                                (<DatePicker showTime={{use12Hours: true}} format=\"YYYY-MM-DD hh:mm a\" allowClear={false} onChange={(value)=>this.changeParamsForBlockedAppointments('block_from',value)} />)}\n                            </Form.Item>\n\n                            <Form.Item label=\"Block To\" {...formItemLayout}>\n                                {getFieldDecorator('block_to',{initialValue:moment(),rules: [{ required: true, message: REQUIRED_FIELD_MESSAGE }],})\n                                (<DatePicker showTime={{ use12Hours: true }} format=\"YYYY-MM-DD hh:mm a\" allowClear={false} onChange={(value)=>this.changeParamsForBlockedAppointments('block_to',value)} />)}\n                            </Form.Item>\n\n                            <Form.Item label=\"Event Name\" {...formItemLayout}>\n                                {getFieldDecorator('event', {})\n                                (<Input placeholder=\"Event Name\" />)}\n                            </Form.Item>\n\n                            <Form.Item label=\"Doctor\" {...formItemLayout}>\n                                {getFieldDecorator('doctor', {initialValue:6})\n                                (<Select placeholder=\"Doctor List\" onChange={(value) => this.changeParamsForBlockedAppointments(\"doctor\", value)}>\n                                    {this.state.practiceDoctors.map((option) => (\n<Select.Option\n  value={option.id}\n  key={option.id}\n>{option.user.first_name}\n</Select.Option>\n))}\n                                 </Select>)}\n                            </Form.Item>\n\n                            <Form.Item>\n                                <Button style={{margin: 5}} type=\"primary\" htmlType=\"submit\">\n                                    Submit\n                                </Button>\n                                {that.props.history ? (\n                                    <Button style={{margin: 5}} onClick={() => that.props.history.goBack()}>\n                                        Cancel\n                                    </Button>\n                                  ) : null}\n                            </Form.Item>\n\n                        </Form>\n                    </Col>\n\n                    <Col span={6}>\n                        <List\n                          size=\"small\"\n                          dataSource={this.state.blockingAppointments}\n                          renderItem={(apppointment) => (apppointment.status == CANCELLED_STATUS ? <div /> : (\n<List.Item\n  color=\"transparent\"\n  style={{padding: 0}}\n>\n                                <div\n                                  style={{\n                                        border: '1px solid #ddd',\n                                        borderRadius: '5px',\n                                        textDecoration: (apppointment.status == CANCELLED_STATUS ? 'line-through' : 'inherit'),\n                                        backgroundColor: (apppointment.status == CANCELLED_STATUS ? '#aaa' : '#eee'),\n                                        width: '100%',\n                                        marginTop: '2px',\n                                        borderLeft: `5px solid${  apppointment.doctor && that.state.practice_doctors && that.state.practice_doctors[apppointment.doctor] ? that.props.doctors_object[apppointment.doctor].calendar_colour : 'transparent'}`\n                                    }}\n                                >\n                                    <AppointmentCard\n                                      {...apppointment}\n                                      changeAppointmentStatus={this.changeAppointmentStatus}\n                                      {...this.props}\n                                    />\n                                </div>\n</List.Item>\n))}\n                        />\n                    </Col>\n                </Row>\n\n</Card>\n\n        )\n    }\n}\nexport default Form.create()(BlockCalendar);\n\nfunction AppointmentCard(appointment) {\n    return (\n<div style={{width: '100%'}}>\n\n        <p style={{marginBottom: 0}}>\n        <Divider type=\"vertical\" />\n            <Popover\n              placement=\"right\"\n              content={(\n<EventPatientPopover\n  appointmentId={appointment.id}\n  key={appointment.id}\n  {...appointment}\n/>\n)}\n            >\n            <span\n              style={{width: 'calc(100% - 60px)'}}\n            ><b>{moment(appointment.schedule_at).format(\"LLL\")}</b>&nbsp;\n                {appointment.patient.user.first_name}\n            </span>\n            <p style={{color:appointment.doctor_data ?appointment.doctor_data.calendar_colour:null}}><Divider type=\"vertical\" /><span>{appointment.doctor_data ? appointment.doctor_data.user.first_name:null}</span></p>\n            </Popover>\n        </p>\n</div>\n);\n}\n","import React from \"react\";\nimport {Layout, Spin, Button, Drawer, Row, Col, Form, Input, Divider, Modal} from \"antd\";\nimport {SUGGESTIONS} from \"../../constants/api\";\nimport {displayMessage, interpolate, postAPI} from \"../../utils/common\";\nimport {SUCCESS_MSG_TYPE} from \"../../constants/dataKeys\";\n\nconst {TextArea} = Input;\n\nclass SuggestionBox extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {};\n\n    }\n\n\n    onClose = () => {\n        const that = this;\n        that.props.close();\n    };\n\n    handleSubmit = (e) => {\n        e.preventDefault();\n        const that = this;\n        this.props.form.validateFieldsAndScroll((err, values) => {\n            if (!err) {\n                const reqData = {\n                    ...values,\n                }\n                const successFn = function (data) {\n                    displayMessage(SUCCESS_MSG_TYPE, \"Save Your Suggestions\");\n                    that.props.close();\n\n                }\n                const errorFn = function () {\n\n                }\n                postAPI(SUGGESTIONS, reqData, successFn, errorFn);\n            }\n\n        })\n    };\n\n    render() {\n        const that = this;\n        const {getFieldDecorator} = this.props.form;\n        return (\n<div>\n            <Modal\n              title=\"Your Suggestion\"\n              width={720}\n              onClose={this.onClose}\n              visible={that.props.visible}\n            >\n\n                <Form layout=\"vertical\" onSubmit={this.handleSubmit}>\n                    <Row gutter={16}>\n                        <Col span={12}>\n                            <Form.Item label=\"Name\">\n                                {getFieldDecorator('name', {\n                                    rules: [{required: true, message: 'Please enter  name'}],\n                                })(<Input placeholder=\"Please enter user name\" />)}\n                            </Form.Item>\n                        </Col>\n                        <Col span={12}>\n                            <Form.Item label=\"Email\">\n                                {getFieldDecorator('email', {\n                                    rules: [{required: true, message: 'Please enter Email'}],\n                                })(\n                                    <Input\n                                      style={{width: '100%'}}\n                                      placeholder=\"Please enter Email\"\n                                    />,\n                                )}\n                            </Form.Item>\n                        </Col>\n                    </Row>\n\n                    <Row gutter={16}>\n                        <Col span={12}>\n                            <Form.Item label=\"Mobile\">\n                                {getFieldDecorator('mobile')\n                                (<Input placeholder=\"Please enter Mobile\" />)}\n                            </Form.Item>\n                        </Col>\n                        <Col span={12}>\n                            <Form.Item label=\"Subject\">\n                                {getFieldDecorator('subject')(\n                                    <Input\n                                      style={{width: '100%'}}\n                                      placeholder=\"Please enter Email\"\n                                    />,\n                                )}\n                            </Form.Item>\n                        </Col>\n                    </Row>\n                    <Row gutter={16}>\n                        <Col span={24}>\n                            <Form.Item label=\"Description\">\n                                {getFieldDecorator('description')\n                                (<TextArea\n                                  placeholder=\"Please enter description\"\n                                  autosize={{minRows: 4, maxRows: 6}}\n                                />)}\n                            </Form.Item>\n                        </Col>\n                    </Row>\n                    <Divider />\n                    <div\n                      style={{\n                            textAlign: '-webkit-center',\n                        }}\n                    >\n                        <Button onClick={this.onClose} style={{marginRight: 8}}>\n                            Cancel\n                        </Button>\n                        <Button htmlType=\"submit\" onSubmit={this.handleSubmit} type=\"primary\">\n                            Submit\n                        </Button>\n                    </div>\n                </Form>\n\n            </Modal>\n</div>\n)\n\n    }\n}\n\nexport default Form.create()(SuggestionBox);\n","import React from \"react\";\nimport {Button, Result} from \"antd\";\nimport {logErrorToSlackChannel} from \"./utils/crashHandlingUtils\";\n\nexport default class ErrorBoundary extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {hasError: false};\n    }\n\n    static getDerivedStateFromError(error) {\n        // Update state so the next render will show the fallback UI.\n        return {hasError: true};\n    }\n\n    componentDidCatch(error, errorInfo) {\n        // You can also log the error to an error reporting service\n\n        logErrorToSlackChannel(error, errorInfo);\n    }\n\n    redirectToHome = () => {\n        window.location.replace(\"/\");\n    }\n\n    render() {\n        const that = this;\n        if (this.state.hasError) {\n            return (\n<Result\n  status=\"500\"\n  title=\"500\"\n  subTitle=\"Sorry, something went wrong.\"\n  extra={<Button type=\"primary\" onClick={this.redirectToHome}>Back Home</Button>}\n/>\n);\n        }\n\n        return this.props.children;\n    }\n}","import moment from \"moment\";\nimport lockr from \"lockr\";\nimport {postOuterAPI} from \"../../app/utils/common\";\nimport CONFIG from \"../../app.config\";\nimport {loggedInUser} from \"../../app/utils/auth\";\n\nexport const logErrorToSlackChannel = function (error, errorInfo) {\n    const crashData = {\n        \"text\": error.toString(),\n        \"attachments\": [\n            {\n                \"color\": \"#36a64f\",\n                \"author_name\": window.location.hostname,\n                \"author_link\": \"http://flickr.com/bobby/\",\n                \"author_icon\": `${window.location.hostname  }/favicon.ico`,\n                \"title\": \"BK ERP Admin Application Crash Error\",\n                text: errorInfo.componentStack,\n                \"fields\": [\n                    {\n                        \"title\": \"Priority\",\n                        \"value\": \"High\",\n                        \"short\": false\n                    }, {\n                        \"title\": \"Domain\",\n                        \"value\": window.location.hostname,\n                        \"short\": false\n                    }, {\n                        \"title\": \"Path\",\n                        \"value\": window.location.pathname,\n                        \"short\": false\n                    }, {\n                        \"title\": \"User\",\n                        \"value\": loggedInUser(),\n                        \"short\": false\n                    }\n                ],\n                \"ts\": new moment().format('X')\n            }\n        ]\n    }\n    const successFn = function () {\n        console.log(\"The above error has been notified to devs.\");\n    }\n    const errorFn = function () {\n        console.log(\"The above error notifications failed\");\n    }\n    if ((CONFIG.prodDomain && CONFIG.crashHandling.slack.sendOnProduction && CONFIG.prodDomain.indexOf(window.location.hostname) > -1) || CONFIG.crashHandling.slack.sendOnDevelopment) {\n        postOuterAPI(CONFIG.crashHandling.slack.webHookUrl, crashData, successFn, errorFn, {\n            'Content-type': 'application/x-www-form-urlencoded'\n        });\n    }\n}","import React from \"react\";\nimport {Route, Switch} from \"react-router-dom\";\nimport {Layout, Spin, Button} from \"antd\";\nimport loadable from '@loadable/component';\nimport AppHeader from \"./AppHeader\";\nimport AppSider from \"./AppSider\";\nimport {loadUserDetails, loggedInactivePractice, loggedInUserPractices, setCurrentPractice} from \"../../utils/auth\";\nimport Error404 from \"../common/errors/Error404\";\nimport Profile from \"../auth/Profile\";\nimport PrintPatientForm from \"../patients/patient/PrintPatientForm\";\nimport CreateAppointment from \"../calendar/CreateAppointment\";\nimport BlockCalendar from \"../calendar/BlockCalendar\";\nimport PermissionDenied from \"../common/errors/PermissionDenied\";\nimport SuggestionBox from \"./SuggestionBox\";\nimport ErrorBoundary from \"../../../crashHandling/ErrorBoundary\";\n\nconst Calendar = loadable(() => import('../calendar/Calendar'));\nconst ReportsHome = loadable(() => import('../reports/ReportsHome'));\nconst WebAdminHome = loadable(() => import('../webAdmin/WebAdminHome'));\nconst InventoryHome = loadable(() => import('../inventory/InventoryHome'));\nconst MeetingBooking = loadable(() => import('../conference/meeting/MeetingBooking'));\nconst SettingsDash = loadable(() => import('../settings/SettingsDash'));\nconst PatientHome = loadable(() => import('../patients/PatientHome'));\n\nclass AppBase extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            collapsed: false,\n            active_practiceId: loggedInactivePractice(),\n            practiceList: loggedInUserPractices(),\n            activePracticeData: null,\n            activePracticePermissions: {},\n            specialisations: null,\n            allowAllPermissions: false,\n            loadingPermissions: false,\n            visible: false,\n\n        };\n        this.activeData = this.activeData.bind(this);\n        // this.clinicData = this.clinicData.bind(this);\n        this.switchPractice = this.switchPractice.bind(this);\n\n\n    }\n\n    componentDidMount() {\n        this.activeData();\n\n    }\n\n\n    toggleSider = (option) => {\n        this.setState({\n            collapsed: !!option,\n        });\n    }\n\n    activeData() {\n        const that = this;\n        const successFn = function (data) {\n            that.setState(function (prevState) {\n                const permissions = {};\n                data.practice_permissions.forEach(function (permission) {\n                    permissions[permission.codename] = permission;\n                });\n                data.global_permissions.forEach(function (permission) {\n                    permissions[permission.codename] = permission;\n                });\n                return {\n                    activePracticePermissions: permissions,\n                    loadingPermissions: false,\n                    practiceList: loggedInUserPractices(),\n                }\n            }, function () {\n                // that.clinicData();\n            });\n        }\n        const errorFn = function () {\n            that.setState({\n                loadingPermissions: false\n            })\n        }\n\n        that.setState(function (prevState) {\n            let activePracticeObj = null;\n            prevState.practiceList.forEach(function (practiceObj) {\n                if (practiceObj.practice.id == prevState.active_practiceId) {\n                    activePracticeObj = practiceObj.practice\n                }\n            });\n            if (activePracticeObj || !prevState.practiceList.length)\n                return {\n                    activePracticeData: activePracticeObj,\n                    loadingPermissions: true\n                }\n            setCurrentPractice(prevState.practiceList[0].practice.id);\n            return {\n                activePracticeData: prevState.practiceList[0].practice,\n                active_practiceId: prevState.practiceList[0].practice.id,\n                loadingPermissions: true\n            }\n        }, function () {\n            loadUserDetails(that.state.active_practiceId, successFn, errorFn);\n        })\n\n\n    }\n\n    switchPractice(practiceId) {\n        const that = this;\n        that.setState(function (prevState) {\n            return {\n                active_practiceId: practiceId,\n            }\n        }, function () {\n            setCurrentPractice(practiceId);\n            that.activeData();\n        });\n\n\n    }\n\n    showDrawer = () => {\n        this.setState({\n            visible: true,\n        });\n    };\n\n    onClose = () => {\n        this.setState({\n            visible: false,\n        });\n    };\n\n\n    render() {\n        const that = this;\n\n        if (this.state.loadingPermissions) {\n            return (\n                <Spin spinning={this.state.loadingPermissions} tip=\"Loading Permissions....\">\n                    <div style={{width: '100vw', height: '100vh'}} />\n                </Spin>\n            )\n        }\n        return (\n            <Layout style={{minHeight: '100vh'}}>\n                <ErrorBoundary>\n                    <div style={{\n                        position: 'fixed', right: '29px',\n                        bottom: '23px', zIndex: '20'\n                    }}\n                    >\n                        <Button type=\"primary\" shape=\"circle\" icon=\"mail\" size=\"large\" onClick={this.showDrawer} />\n                    </div>\n                    <Switch>\n                        <Route\n                          path=\"/patients/patientprintform\"\n                          render={(route) => <PrintPatientForm {...this.state} key={that.state.active_practiceId} />}\n                        />\n                        <Route>\n                            <Layout>\n                                <AppSider\n                                  toggleSider={this.toggleSider}\n                                  {...this.state}\n                                  key={that.state.active_practiceId}\n                                  {...this.props}\n                                />\n                                <Layout>\n                                    <AppHeader\n                                      {...this.props}\n                                      {...this.state}\n                                      switchPractice={this.switchPractice}\n                                      toggleSider={this.toggleSider}\n                                    />\n                                    <Switch>\n                                        {this.state.activePracticePermissions.WebAdmin ? (\n                                                <Route\n                                                  path=\"/web\"\n                                                  render={(route) => (\n                                                        <WebAdminHome\n                                                          {...this.state}\n                                                          {...this.props}\n                                                          {...route}\n                                                          key={that.state.active_practiceId}\n                                                        />\n                                                    )}\n                                                />\n                                            )\n                                            : null}\n\n                                        <Route\n                                          exact\n                                          path=\"/calendar/blockcalendar\"\n                                          render={(route) => (that.state.activePracticePermissions.BlockCalendar || that.state.allowAllPermissions ?\n                                                <BlockCalendar {...this.state} {...this.props} {...route} /> :\n                                                <PermissionDenied />)}\n                                        />\n                                        <Route\n                                          path=\"/calendar\"\n                                          render={(route) => (that.state.activePracticePermissions.ViewCalendar ? (\n                                                <Calendar\n                                                  {...that.state}\n                                                  {...that.props}\n                                                  {...route}\n                                                  key={that.state.active_practiceId}\n                                                />\n                                            ) : <PermissionDenied />)}\n                                        />\n                                        <Route\n                                          path=\"/patient/:id\"\n                                          render={(route) => (\n                                                <PatientHome\n                                                  {...this.state}\n                                                  {...this.props}\n                                                  {...route}\n                                                  key={`${that.state.active_practiceId}|${route.match.params.id}`}\n                                                />\n                                            )}\n                                        />\n\n                                        <Route\n                                          path=\"/settings\"\n                                          render={(route) => (\n                                                <SettingsDash\n                                                  {...this.state}\n                                                  {...this.props}\n                                                  {...route}\n                                                  key={that.state.active_practiceId}\n                                                  refreshClinicData={this.activeData}\n                                                />\n                                            )}\n                                        />\n                                        <Route\n                                          path=\"/inventory\"\n                                          render={(route) => (\n                                                <InventoryHome\n                                                  {...this.state}\n                                                  {...this.props}\n                                                  {...route}\n                                                  key={that.state.active_practiceId}\n                                                />\n                                            )}\n                                        />\n                                        <Route\n                                          path=\"/reports/:type\"\n                                          render={(route) => (\n                                                <ReportsHome\n                                                  {...this.state}\n                                                  {...this.props}\n                                                  {...route}\n                                                  key={that.state.active_practiceId}\n                                                />\n                                            )}\n                                        />\n\n                                        <Route\n                                          path=\"/profile\"\n                                          render={(route) => (\n                                                <Profile\n                                                  {...this.state}\n                                                  {...this.props}\n                                                  {...route}\n                                                  key={that.state.active_practiceId}\n                                                />\n                                            )}\n                                        />\n\n                                        <Route\n                                          path=\"/meeting-booking\"\n                                          render={(route) => (this.state.activePracticePermissions.ViewMeeting || this.state.allowAllPermissions ? (\n                                                    <MeetingBooking\n                                                      {...this.state}\n                                                      {...this.props}\n                                                      {...route}\n                                                      key={that.state.active_practiceId}\n                                                    />\n                                                ) :\n                                                <PermissionDenied />)}\n                                        />\n                                        {/* <Route path=\"/alternate-medicine\" render={(route)=>(this.state.activePracticePermissions.ManageMedicineConversion || this.state.allowAllPermissions? */}\n                                        {/*    <AlternateMedicineHome  {...this.state} {...this.props} {...route} */}\n                                        {/*                     key={that.state.active_practiceId}/>:<PermissionDenied/>)}/> */}\n\n                                        {this.state.activePracticePermissions.ViewCalendar ? (\n                                            <Route\n                                              exact\n                                              path=\"/\"\n                                              render={(route) => (\n                                                    <Calendar\n                                                      {...this.state}\n                                                      {...this.props}\n                                                      {...route}\n                                                      key={that.state.active_practiceId}\n                                                    />\n                                                )}\n                                            />\n                                        ) : null}\n\n\n                                        <Route\n                                          path=\"/\"\n                                          render={(route) => (\n                                                <PatientHome\n                                                  {...this.state}\n                                                  {...this.props}\n                                                  {...route}\n                                                  key={that.state.active_practiceId}\n                                                />\n                                            )}\n                                        />\n\n\n                                        <Route component={Error404} />\n\n                                    </Switch>\n                                    {/* <AppFooter/> */}\n                                </Layout>\n                            </Layout>\n                        </Route>\n                    </Switch>\n                    <SuggestionBox {...this.state} close={this.onClose} />\n                </ErrorBoundary>\n            </Layout>\n        )\n            ;\n    }\n}\n\nexport default AppBase;\n","import React from 'react';\nimport {Link} from \"react-router-dom\";\nimport {Form, Input, Menu, Modal} from 'antd';\nimport {CONFIG_API, MAILING_USERS_LIST, PRACTICESTAFF} from \"../constants/api\";\nimport {displayMessage, getAPI, interpolate} from \"./common\";\nimport {DOCTORS_ROLE, ERROR_MSG_TYPE} from \"../constants/dataKeys\";\nimport {MAIL_SEND_ERROR_MSG, MAIL_SEND_MSG, SUCCESS} from \"../constants/messages\";\n\nconst { confirm } = Modal;\nexport const loadDoctors = function (that) {\n    const successFn = function (data) {\n        const doctor = [];\n        let selectedDoctor = {};\n        data.staff.forEach(function (usersdata) {\n\n            if (usersdata.role.indexOf(parseInt(DOCTORS_ROLE)) > -1 || usersdata.role.indexOf(DOCTORS_ROLE) > -1) {\n                doctor.push(usersdata);\n                if (that.props.user.id == usersdata.user.id) {\n                    selectedDoctor = usersdata;\n                }\n            }\n        });\n        that.setState({\n            practiceDoctors: doctor,\n            selectedDoctor: (doctor.length && !selectedDoctor.id ? doctor[0] : selectedDoctor)\n        });\n    };\n    const errorFn = function () {\n    };\n    getAPI(interpolate(PRACTICESTAFF, [that.props.active_practiceId]), successFn, errorFn);\n}\n\nexport const patientSettingMenu = (\n<Menu>\n        <Menu.Item key=\"1\">\n            <Link to=\"/settings/prescriptions\">\n                Add/Edit Drugs\n            </Link>\n        </Menu.Item>\n        <Menu.Item key=\"2\">\n            <Link to=\"/settings/procedures\">\n                Add/Edit Procedures\n            </Link>\n        </Menu.Item>\n        <Menu.Item key=\"3\">\n            <Link to=\"/settings/emr#treatmentnotes\">\n                Add/Edit Clinical Notes\n            </Link>\n        </Menu.Item>\n        <Menu.Item key=\"4\">\n            <Link to=\"/settings/printout\">\n                Modify EMR/Billing Printout\n            </Link>\n        </Menu.Item>\n        <Menu.Item key=\"5\">\n            <Link to=\"/settings/billing#taxcatalog\">\n                Add/Edit taxes\n            </Link>\n        </Menu.Item>\n        <Menu.Item key=\"6\">\n            <Link to=\"/settings/billing#paymentmodes\">\n                Add/Edit Payment Modes\n            </Link>\n        </Menu.Item>\n</Menu>\n);\n\nexport const hashCode = function (str) { // java String#hashCode\n    let hash = 0;\n    for (let i = 0; i < str.length; i++) {\n        hash = str.charCodeAt(i) + ((hash << 6) - hash);\n        hash = (hash >> 6) + hash\n    }\n    return hash;\n}\n\nexport const intToRGB = function (i) {\n    const c = (i & 0x00FFFFFF)\n        .toString(16)\n        .toUpperCase();\n\n    return \"00000\".substring(0, 6 - c.length) + c;\n}\n\nexport const loadConfigParameters = function (that, params = []) {\n    const successFn = function (data) {\n        that.setState({\n            ...data\n        });\n    };\n    const errorFn = function () {\n\n    };\n    const parameters = params.join(',');\n    getAPI(CONFIG_API, successFn, errorFn, {parameters});\n}\n\nexport const loadMailingUserListForReportsMail = function (that) {\n    const successFn = function (data) {\n        that.setState({\n            mailingUsersList: data\n        })\n    }\n    const errorFn = function () {\n\n    }\n    getAPI(MAILING_USERS_LIST, successFn, errorFn)\n}\n\nexport const sendReportMail = function(url,params,successMsg, errorMsg){\n    confirm({\n        title: 'Are you sure send mail?',\n        content: `Email Id :${ params.mail_to}`,\n        okText: 'Yes',\n        okType: 'danger',\n        cancelText: 'No',\n        onOk() {\n            const successFn = function (data){\n                if (successMsg){\n                    displayMessage(SUCCESS,`${MAIL_SEND_MSG  }to${ params.mail_to}`)\n                }\n\n            }\n            const errorFn = function (){\n                if (errorMsg){\n                    displayMessage(ERROR_MSG_TYPE,MAIL_SEND_ERROR_MSG)\n                }\n\n\n            }\n            getAPI(url,successFn,errorFn,params);\n        },\n        onCancel() {\n        },\n    });\n\n}\n\nexport const sendMail= function (url, params) {\n\n    const successFn = function (data){\n\n    };\n    const errorFn = function (){\n\n    };\n    getAPI(url,successFn,errorFn,params);\n}\n","import React from \"react\";\nimport {\n    Button,\n    Checkbox,\n    DatePicker,\n    Divider,\n    Form,\n    Icon,\n    Input,\n    InputNumber,\n    message,\n    Modal,\n    Radio,\n    Select,\n    Tag,\n    TimePicker,\n    Upload,\n    Avatar,\n} from \"antd\";\nimport moment from \"moment\";\nimport SwatchesPicker from 'react-color/lib/Swatches';\nimport WebCamField from \"./WebCamField\";\nimport {Editor} from 'react-draft-wysiwyg';\nimport '../../../../node_modules/react-draft-wysiwyg/dist/react-draft-wysiwyg.css';\nimport {ContentState, convertToRaw, EditorState} from 'draft-js';\nimport draftToHtml from 'draftjs-to-html';\nimport htmlToDraft from 'html-to-draftjs';\nimport {EXTRA_DATA, FILE_UPLOAD_API, FILE_UPLOAD_BASE64} from \"../../constants/api\";\nimport {displayMessage, getAPI, makeFileURL, makeURL, postAPI, putAPI} from \"../../utils/common\";\nimport {REQUIRED_FIELD_MESSAGE} from \"../../constants/messages\";\nimport {\n    CHECKBOX_FIELD,\n    CITY_FIELD,\n    COLOR_PICKER,\n    COUNTRY_FIELD,\n    DATE_PICKER,\n    DATE_TIME_PICKER,\n    DIVIDER_FIELD,\n    EMAIL_FIELD,\n    INPUT_FIELD, LABEL_FIELD,\n    MAIL_TEMPLATE_FIELD,\n    MULTI_IMAGE_UPLOAD_FIELD,\n    MULTI_SELECT_FIELD,\n    NUMBER_FIELD,\n    PASSWORD_FIELD,\n    QUILL_TEXT_FIELD,\n    RADIO_FIELD,\n    SELECT_FIELD,\n    SINGLE_CHECKBOX_FIELD,\n    SINGLE_IMAGE_UPLOAD_FIELD,\n    SMS_FIELD,\n    STATE_FIELD,\n    SUCCESS_MSG_TYPE,\n    TEXT_FIELD,\n    TIME_PICKER\n} from \"../../constants/dataKeys\";\n\nconst {TextArea} = Input;\nconst FormItem = Form.Item;\nconst RadioGroup = Radio.Group;\nconst CheckboxGroup = Checkbox.Group;\n\n\nclass DynamicFieldsForm extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            fields: this.props.fields, // Fields data to create the form\n            formData: {},\n            formProp: {authorisation: true, ...this.props.formProp},    // Form data to send on form submission\n            disabled: false,\n            loading: false,\n            countryOptions: [],\n            stateOptions: [],\n            cityOptions: [],\n            smsFields: {},\n            urlInitialValues: {},\n            webCamState: {},\n            editorState: {}\n        }\n        this.resetFormData = this.resetFormData.bind(this);\n        this.submitForm = this.submitForm.bind(this);\n        this.colorChange = this.colorChange.bind(this);\n        this.loadCountryData = this.loadCountryData.bind(this);\n        this.addSMSTag = this.addSMSTag.bind(this);\n        // this.onFormFieldDataChange = this.onFormFieldDataChange.bind(this)\n    }\n\n    componentWillReceiveProps(nextProps) {\n    }\n\n    fieldDecorators = (field, formData) => {\n        const {urlInitialValues} = this.state;\n        if (field.type == MULTI_SELECT_FIELD) {\n            return {\n                initialValue: formData[field.key] ? formData[field.key] : (urlInitialValues[field.key] ? urlInitialValues[field.key] : formData[field.key]),\n                rules: [{\n                    required: field.required,\n                    message: REQUIRED_FIELD_MESSAGE,\n                    type: 'array'\n                }]\n            }\n        }\n\n        return {\n            initialValue: formData[field.key] ? formData[field.key] : (urlInitialValues[field.key] ? urlInitialValues[field.key] : formData[field.key]),\n            rules: [{\n                required: field.required,\n                message: REQUIRED_FIELD_MESSAGE\n            }]\n        }\n    }\n\n    componentDidMount() {\n        const that = this;\n        this.resetFormData();\n        this.props.fields.forEach(function (field) {\n            if (field.type == COUNTRY_FIELD) {\n                that.loadCountryData();\n            }\n        });\n        if (this.props.history && this.props.history.location.search) {\n            const pairValueArray = this.props.history.location.search.substr(1).split('&');\n            if (pairValueArray.length) {\n                const urlInitialValue = {};\n                pairValueArray.forEach(function (item) {\n                    const keyValue = item.split('=');\n                    if (keyValue && keyValue.length == 2) {\n                        if (!isNaN(keyValue[1]) && keyValue[1].toString().indexOf('.') != -1) {\n                            urlInitialValue[keyValue[0]] = parseFloat(keyValue[1]);\n                        } else if (!isNaN(keyValue[1])) {\n                            urlInitialValue[keyValue[0]] = parseInt(keyValue[1]);\n                        } else {\n                            urlInitialValue[keyValue[0]] = keyValue[1];\n                        }\n                    }\n                });\n                this.setState({\n                    urlInitialValues: urlInitialValue\n                })\n            }\n        }\n    }\n\n    resetFormData() {\n        const formData = {};\n        this.state.fields.forEach(function (field) {\n            formData[field.key] = field.initialValue\n        });\n        this.setState({\n            formData\n        })\n    }\n\n    // onFormFieldDataChange() {\n    //     if (this.props.formProp.onFieldsDataChange) {\n    //         let values = this.props.form.getFieldsValue();\n    //         console.log(values);\n    //         this.props.formProp.onFieldsDataChange(values);\n    //     }\n    // }\n\n    handleSubmit = (e) => {\n        const that = this;\n        e.preventDefault();\n        this.props.form.validateFieldsAndScroll((err, values) => {\n            if (!err) {\n                if (this.props.defaultValues) {\n                    this.props.defaultValues.forEach(function (object) {\n                        // values[object.key] = object.value;\n                        values = {[object.key]: object.value, ...values}\n                    })\n                }\n                if (this.state.colorPickerKey) {\n                    values[this.state.colorPickerKey] = this.state.colorPickerColor;\n                }\n                that.props.fields.forEach(function (formFields) {\n                    if (formFields.type == SINGLE_IMAGE_UPLOAD_FIELD) {\n                        const {key} = formFields;\n                        if (values[key] && values[key].file && values[key].file.response)\n                            values[key] = values[key].file.response.image_path;\n                        else\n                            values[key] = formFields.initialValue;\n                    } else if (formFields.type == MULTI_IMAGE_UPLOAD_FIELD) {\n                        const {key} = formFields;\n                        if (values[key] && values[key].file && values[key].file.response)\n                            values[key] = values[key].fileList.map(file => file.response.id);\n                        else\n                            values[key] = formFields.initialValue;\n                    } else if (formFields.type == TIME_PICKER || formFields.type == DATE_PICKER || formFields.type == DATE_TIME_PICKER) {\n                        const {key} = formFields;\n                        if (formFields.format) {\n                            values[key] = moment(values[key]).isValid() ? moment(values[key]).format(formFields.format) : null;\n                        }\n                    } else if (formFields.type == QUILL_TEXT_FIELD) {\n                        const {key} = formFields;\n                        values[key] = that.state.editorState[key] ? draftToHtml(convertToRaw(that.state.editorState[key].getCurrentContent())) : formFields.initialValue;\n                    }\n                });\n                if (that.state.formProp.beforeSend) {\n                    values = that.state.formProp.beforeSend(values);\n                }\n                if (that.state.formProp.confirm) {\n                    Modal.confirm({\n                        title: that.state.formProp.confirmText || \"Are you sure to submit?\",\n                        onOk () {\n                            that.submitForm(values);\n                        },\n                        onCancel () {\n\n                        }\n                    })\n                } else {\n                    that.submitForm(values);\n                }\n\n            }\n        });\n    }\n\n    submitForm(data) {\n        const that = this;\n        this.setState({\n            disabled: true,\n            loading: true,\n        });\n        const successFn = function (data) {\n            that.state.formProp.successFn(data);\n            that.setState({\n                disabled: false,\n                loading: false,\n            });\n            if (that.props.changeRedirect) {\n                that.props.changeRedirect();\n            }\n        };\n        const errorFn = function () {\n            that.state.formProp.errorFn();\n            that.setState({\n                disabled: false,\n                loading: false,\n            });\n        };\n        const headers = {};\n        if (!that.state.formProp.authorisation) {\n            headers.Authorization = undefined;\n        }\n        if (this.props.formProp.method == \"post\") {\n            postAPI(this.props.formProp.action, data, successFn, errorFn, {...headers});\n        } else if (this.props.formProp.method == \"put\") {\n            putAPI(this.props.formProp.action, data, successFn, errorFn, {...headers});\n        }\n    }\n\n    colorChange(color, key) {\n        const that = this;\n        this.setState({\n            colorPickerKey: key,\n            colorPickerColor: color.hex,\n        }, function () {\n            that.props.form.setFieldsValue({[key]: color.hex})\n        });\n    }\n\n    setAddressField(type, value) {\n        if (type == 'country') {\n            this.setState(function (prevState) {\n                let states = []\n                prevState.countryOptions.forEach(function (country) {\n                    if (country.id == value) {\n                        states = country.states\n                    }\n                })\n                return {stateOptions: states}\n            })\n        } else {\n            this.setState(function (prevState) {\n                let cities = [];\n                prevState.stateOptions.forEach(function (state) {\n                    if (state.id == value) {\n                        cities = state.cities\n                    }\n                })\n                return {cityOptions: cities}\n            })\n        }\n    }\n\n    loadCountryData() {\n        const that = this;\n        const successFn = function (data) {\n            that.setState({\n                countryOptions: data.country,\n            })\n        };\n        const errorFn = function () {\n        };\n        getAPI(EXTRA_DATA, successFn, errorFn);\n    }\n\n    addSMSTag(key, value) {\n        const that = this;\n        const prevValue = that.props.form.getFieldValue(key) || '';\n        that.props.form.setFieldsValue({\n            [key]: prevValue + value\n        });\n    }\n\n    addMailTemplateTag = (key, value) => {\n        const that = this;\n        this.setState(function (prevState) {\n            let currentHtml = prevState.editorState[key] ? draftToHtml(convertToRaw(prevState.editorState[key].getCurrentContent())) : '';\n            currentHtml += value;\n            return {\n                editorState: {\n                    ...prevState.editorState,\n                    [key]: EditorState.createWithContent(ContentState.createFromBlockArray(htmlToDraft(currentHtml)))\n                }\n            }\n        })\n    }\n\n    toggleWebCam = (type, value) => {\n        this.setState(function (prevState) {\n            return {\n                webCamState: {...prevState.webCamState, [type]: value}\n            }\n        })\n    }\n\n    getImageandUpload = (fieldKey, image) => {\n        const that = this;\n        const reqData = new FormData();\n\n        reqData.append('image', image);\n        reqData.append('name', 'file');\n\n        const successFn = function (data) {\n            that.props.form.setFieldsValue({[fieldKey]: {file: {response: data}}});\n            displayMessage(SUCCESS_MSG_TYPE, \"Image Captured and processed.\");\n            that.setState(function (prevState) {\n                return {\n                    webCamState: {...prevState.webCamState, [fieldKey]: false}\n                }\n            })\n        }\n        const errorFn = function () {\n\n        }\n        postAPI(FILE_UPLOAD_BASE64, reqData, successFn, errorFn, {\n            'content-type': 'multipart/form-data'\n        });\n\n    }\n\n    onEditorStateChange = (key, editorState) => {\n        this.setState(function (prevState) {\n            return {\n                editorState: {...prevState.editorState, [key]: editorState}\n\n            }\n        });\n    };\n\n    render() {\n        const that = this;\n        const formItemLayout = (this.props.formLayout ? this.props.formLayout : {\n            labelCol: {span: 8},\n            wrapperCol: {span: 14},\n        });\n        const {getFieldDecorator} = this.props.form;\n        return (\n<div>\n            <Form onSubmit={this.handleSubmit}>\n                {this.props.title ? <h2>{this.props.title}</h2> : null}\n                {this.state.fields ? this.state.fields.map(function (field) {\n                    switch (field.type) {\n                        case PASSWORD_FIELD:\n                            return (\n<Form.Item\n  key={field.key}\n  label={field.label}\n  {...formItemLayout}\n  extra={field.extra}\n>\n                                {getFieldDecorator(field.key, that.fieldDecorators(field, that.state.formData))(\n                                    <Input\n                                      prefix={<Icon type=\"lock\" style={{color: 'rgba(0,0,0,.25)'}} />}\n                                      type=\"password\"\n                                      placeholder={field.placeholder}\n                                      onChange={(e) => function () {\n                                               if (field.onChange)\n                                                   field.onChange(e)\n                                           }}\n                                      disabled={field.disabled ? field.disabled : that.state.disabled}\n                                    />\n                                )}\n</Form.Item>\n);\n                        case INPUT_FIELD:\n                            return (\n<FormItem\n  key={field.key}\n  label={field.label}\n  {...formItemLayout}\n  extra={field.extra}\n>\n                                {getFieldDecorator(field.key, that.fieldDecorators(field, that.state.formData))(\n                                    <Input\n                                      placeholder={field.placeholder}\n                                      onChange={(e) => function () {\n                                               if (field.onChange)\n                                                   field.onChange(e)\n                                           }}\n                                      disabled={field.disabled ? field.disabled : that.state.disabled}\n                                    />\n                                )}\n                                {field.follow ? <span className=\"ant-form-text\">{field.follow}</span> : null}\n</FormItem>\n);\n                        case SELECT_FIELD:\n                            return (\n<FormItem\n  key={field.key}\n  {...formItemLayout}\n  label={field.label}\n  extra={field.extra}\n>\n                                {getFieldDecorator(field.key, that.fieldDecorators(field, that.state.formData))(\n                                    <Select\n                                      placeholder={field.placeholder}\n                                      disabled={field.disabled ? field.disabled : that.state.disabled}\n                                      mode={field.mode ? field.mode : \"default\"}\n                                    >\n                                        {field.options.map((option) => (\n<Select.Option\n  value={option.value}\n>{option.label}\n</Select.Option>\n))}\n                                    </Select>\n                                )}\n                                {field.follow ? <span className=\"ant-form-text\">{field.follow}</span> : null}\n</FormItem>\n);\n                        case MULTI_SELECT_FIELD:\n                            return (\n<FormItem\n  key={field.key}\n  {...formItemLayout}\n  label={field.label}\n  extra={field.extra}\n>\n                                {getFieldDecorator(field.key, {...that.fieldDecorators(field, that.state.formData)})(\n                                    <Select\n                                      mode=\"multiple\"\n                                      placeholder={field.placeholder}\n                                      showSearch={field.showSearch ? field.showSearch : null}\n                                      disabled={field.disabled ? field.disabled : that.state.disabled}\n                                    >\n                                        {field.options.map((option) => (\n<Select.Option\n  value={option.value}\n>{option.label}\n</Select.Option>\n))}\n                                    </Select>\n                                )}\n                                {field.follow ? <span className=\"ant-form-text\">{field.follow}</span> : null}\n</FormItem>\n);\n                        case RADIO_FIELD:\n                            return (\n<FormItem\n  key={field.key}\n  label={field.label}\n  {...formItemLayout}\n  extra={field.extra}\n>\n                                {getFieldDecorator(field.key, that.fieldDecorators(field, that.state.formData))(\n                                    <RadioGroup disabled={field.disabled ? field.disabled : that.state.disabled}>\n                                        {field.options.map((option) => (\n<Radio\n  value={option.value}\n>{option.label}\n</Radio>\n))}\n                                    </RadioGroup>\n                                )}\n</FormItem>\n);\n                        case CHECKBOX_FIELD:\n                            return (\n<FormItem\n  key={field.key}\n  label={field.label}\n  {...formItemLayout}\n  extra={field.extra}\n>\n                                {getFieldDecorator(field.key, that.fieldDecorators(field, that.state.formData))(\n                                    <CheckboxGroup\n                                      options={field.options}\n                                      disabled={field.disabled ? field.disabled : that.state.disabled}\n                                    />\n                                )}\n</FormItem>\n);\n                        case SINGLE_CHECKBOX_FIELD:\n                            return (\n<FormItem\n  key={field.key}\n  label={field.label}\n  {...formItemLayout}\n  extra={field.extra}\n>\n                                {getFieldDecorator(field.key, {\n                                        valuePropName: 'checked',\n                                        initialValue: field.initialValue\n                                    },\n                                    {\n                                        rules: [{required: field.required, message: REQUIRED_FIELD_MESSAGE}],\n                                    })(\n                                    <Checkbox\n                                      disabled={field.disabled ? field.disabled : that.state.disabled}\n                                    >{field.follow}\n                                    </Checkbox>\n                                )}\n</FormItem>\n);\n                        case NUMBER_FIELD:\n                            return (\n<FormItem\n  key={field.key}\n  {...formItemLayout}\n  label={field.label}\n  extra={field.extra}\n>\n                                {getFieldDecorator(field.key, that.fieldDecorators(field, that.state.formData))(\n                                    <InputNumber\n                                      min={field.min}\n                                      max={field.max}\n                                      disabled={field.disabled ? field.disabled : that.state.disabled}\n                                    />\n                                )}\n                                <span className=\"ant-form-text\">{field.follow}</span>\n</FormItem>\n);\n                        case DATE_PICKER:\n                            return (\n<FormItem\n  key={field.key}\n  label={field.label}\n  {...formItemLayout}\n  extra={field.extra}\n>\n                                {getFieldDecorator(field.key,\n                                    {\n                                        initialValue: field.initialValue ? moment(field.initialValue) : null,\n                                        rules: [{required: field.required, message: REQUIRED_FIELD_MESSAGE}],\n                                    })(\n                                    <DatePicker format={field.format} allowClear={false} />\n                                )}\n</FormItem>\n);\n                        case DATE_TIME_PICKER:\n                            return (\n<FormItem\n  key={field.key}\n  label={field.label}\n  {...formItemLayout}\n  extra={field.extra}\n>\n                                {getFieldDecorator(field.key,\n                                    {initialValue: field.initialValue ? moment(field.initialValue) : null},\n                                    {\n                                        rules: [{required: field.required, message: REQUIRED_FIELD_MESSAGE}],\n                                    })(\n                                    <DatePicker\n                                      format={field.format}\n                                      showTime\n                                      onChange={(e) => (field.onChange ?\n                                        field.onChange(e) :\n                                        function () {\n                                        })}\n                                    />\n                                )}\n</FormItem>\n);\n                        case TEXT_FIELD:\n                            return (\n<div key={field.key}>\n                                <FormItem key={field.key} label={field.label} {...formItemLayout} extra={field.extra}>\n                                    {getFieldDecorator(field.key, that.fieldDecorators(field, that.state.formData))(\n                                        <TextArea\n                                          autosize={{minRows: field.minRows, maxRows: field.maxRows}}\n                                          placeholder={field.placeholder}\n                                          disabled={field.disabled ? field.disabled : that.state.disabled}\n                                          onChange={that.inputChange}\n                                        />\n                                    )}\n\n                                </FormItem>\n</div>\n);\n                        case SMS_FIELD:\n                            return (\n<div>\n                                <FormItem key={field.key} label={field.label} {...formItemLayout} extra={field.extra}>\n                                    {getFieldDecorator(field.key, that.fieldDecorators(field, that.state.formData))(\n                                        <TextArea\n                                          autosize={{minRows: field.minRows, maxRows: field.maxRows}}\n                                          placeholder={field.placeholder}\n                                          disabled={field.disabled ? field.disabled : that.state.disabled}\n                                        />\n                                    )}\n                                    {field.options && field.options.map(item => (\n                                        <Tag\n                                          color=\"#108ee9\"\n                                          onClick={() => that.addSMSTag(field.key, item.value)}\n                                        >{item.label}\n                                        </Tag>\n                                      ))}\n                                </FormItem>\n</div>\n);\n                        case MAIL_TEMPLATE_FIELD:\n                            return (\n<div>\n                                <FormItem key={field.key} label={field.label} {...formItemLayout} extra={field.extra}>\n                                    {getFieldDecorator(field.key, {\n                                        initialValue: (field.initialValue && field.initialValue.length ? field.initialValue : ''),\n                                        rules: [{\n                                            required: field.required,\n                                            message: REQUIRED_FIELD_MESSAGE\n                                        }]\n                                    })(\n                                        <div style={{border: '1px solid #eee'}}>\n                                            <Editor\n                                              editorState={(that.state.editorState[field.key] ? that.state.editorState[field.key] : (field.initialValue ? EditorState.createWithContent(ContentState.createFromBlockArray(htmlToDraft(field.initialValue))) : EditorState.createEmpty()))}\n                                              onEditorStateChange={(editorState) => that.onEditorStateChange(field.key, editorState)}\n                                            />\n                                            {/* // <ReactQuill theme=\"snow\" placeholder={field.placeholder}/> */}\n                                        </div>\n                                    )}\n                                    {field.options && field.options.map(item => (\n                                        <Tag\n                                          color=\"#108ee9\"\n                                          onClick={() => that.addMailTemplateTag(field.key, item.value)}\n                                        >{item.label}\n                                        </Tag>\n                                      ))}\n                                    {field.preview ? (\n<div>\n                                        <Divider>Preview</Divider>\n                                        <div\n                                          style={{maxHeight: 200, overflowY: 'scroll'}}\n                                          dangerouslySetInnerHTML={{__html: `${that.state.editorState[field.key] ? draftToHtml(convertToRaw(that.state.editorState[field.key].getCurrentContent())) : field.initialValue}` || ''}}\n                                        />\n                                        <Divider />\n</div>\n) : null}\n                                    {/* <div dangerouslySetInnerHTML={{__html: field.initialValue}}/> */}\n                                </FormItem>\n</div>\n);\n                        case QUILL_TEXT_FIELD:\n                            return (\n<div>\n                                <FormItem key={field.key} label={field.label} {...formItemLayout} extra={field.extra}>\n                                    {getFieldDecorator(field.key, {\n                                        initialValue: (field.initialValue && field.initialValue.length ? field.initialValue : ''),\n                                        rules: []\n                                    })(\n                                        <div style={{border: '1px solid #eee'}}>\n                                            <Editor\n                                              editorState={(that.state.editorState[field.key] ? that.state.editorState[field.key] : (field.initialValue ? EditorState.createWithContent(ContentState.createFromBlockArray(htmlToDraft(field.initialValue))) : EditorState.createEmpty()))}\n                                              onEditorStateChange={(editorState) => that.onEditorStateChange(field.key, editorState)}\n                                            />\n                                            {/* // <ReactQuill theme=\"snow\" placeholder={field.placeholder}/> */}\n                                        </div>\n                                    )}\n                                    {field.preview ? (\n<div>\n                                        <Divider>Preview</Divider>\n                                        <div\n                                          style={{maxHeight: 200, overflowY: 'scroll'}}\n                                          dangerouslySetInnerHTML={{__html: `${that.state.editorState[field.key] ? draftToHtml(convertToRaw(that.state.editorState[field.key].getCurrentContent())) : field.initialValue}` || ''}}\n                                        />\n                                        <Divider />\n</div>\n) : null}\n                                    {/* <div dangerouslySetInnerHTML={{__html: field.initialValue}}/> */}\n                                </FormItem>\n</div>\n);\n                        case TIME_PICKER:\n                            return (\n<FormItem\n  key={field.key}\n  label={field.label}\n  {...formItemLayout}\n  extra={field.extra}\n>\n                                {getFieldDecorator(field.key, {\n                                    initialValue: field.initialValue ? moment(field.initialValue, field.format) : null,\n                                    rules: [{required: field.required, message: REQUIRED_FIELD_MESSAGE}],\n                                })(\n                                    <TimePicker format={field.format} />\n                                )}\n</FormItem>\n);\n                        case COLOR_PICKER:\n                            return (\n<FormItem\n  key={field.key}\n  label={field.label}\n  {...formItemLayout}\n  extra={field.extra}\n>\n                                {getFieldDecorator(field.key, that.fieldDecorators(field, that.state.formData))(\n                                    <div>\n                                        <SwatchesPicker\n                                          style={{width: '100%'}}\n                                          onChange={(color) => that.colorChange(color, field.key)}\n                                        />\n                                        {that.state.colorPickerKey ? (\n<div style={{\n                                            margin: '10px',\n                                            backgroundColor: that.state.colorPickerColor,\n                                            height: '40px',\n                                            width: '40px'\n                                        }}\n/>\n) : (that.state.formData[field.key] ? (\n<div style={{\n                                            margin: '10px',\n                                            backgroundColor: that.state.formData[field.key],\n                                            height: '40px',\n                                            width: '40px'\n                                        }}\n/>\n) : null)}\n                                    </div>\n                                )}\n</FormItem>\n);\n                        case SINGLE_IMAGE_UPLOAD_FIELD:\n                            const singleUploadprops = {\n                                name: 'image',\n                                data: {\n                                    name: 'hello'\n                                },\n                                action: makeURL(FILE_UPLOAD_API),\n                                headers: {\n                                    authorization: 'authorization-text',\n                                },\n                                onChange(info) {\n                                    if (info.file.status !== 'uploading') {\n                                    }\n                                    if (info.file.status === 'done') {\n                                        message.success(`${info.file.name} file uploaded successfully`);\n                                    } else if (info.file.status === 'error') {\n                                        message.error(`${info.file.name} file upload failed.`);\n                                    }\n                                },\n                            };\n                            return (\n<Form.Item key={field.key} {...formItemLayout} label={field.label}>\n                                {getFieldDecorator(field.key, that.fieldDecorators(field, that.state.formData), {valuePropName: field.key,})(\n                                    <Upload {...singleUploadprops}>\n                                        <Button>\n                                            <Icon type=\"upload\" /> Select File\n                                        </Button>\n                                        {field.initialValue ?\n                                            // <img src={makeFileURL(field.initialValue)}\n                                            //      style={{maxWidth: '100%'}}/> \n                                            <Avatar size={64} src={makeFileURL(field.initialValue)} />\n                                            : null}\n                                    </Upload>\n                                )}\n                                {field.allowWebcam ? (\n<span className=\"ant-form-text\">\n                                    <a onClick={() => that.toggleWebCam(field.key, Math.random())}>\n                                        Open Webcam\n                                    </a>\n</span>\n) : null}\n                                <Modal\n                                  footer={null}\n                                  onCancel={() => that.toggleWebCam(field.key, false)}\n                                  visible={!!that.state.webCamState[field.key]}\n                                  width={680}\n                                  key={that.state.webCamState[field.key]}\n                                >\n                                    <WebCamField getScreenShot={(value) => that.getImageandUpload(field.key, value)} />\n                                </Modal>\n</Form.Item>\n);\n                        case MULTI_IMAGE_UPLOAD_FIELD:\n                            const multiuploadprops = {\n                                name: 'image',\n                                data: {\n                                    name: 'hello'\n                                },\n                                action: makeURL(FILE_UPLOAD_API),\n                                headers: {\n                                    authorization: 'authorization-text',\n                                },\n                                onChange(info) {\n                                    if (info.file.status !== 'uploading') {\n                                        // console.log(info.file, info.fileList);\n                                    }\n                                    if (info.file.status === 'done') {\n                                        message.success(`${info.file.name} file uploaded successfully`);\n                                    } else if (info.file.status === 'error') {\n                                        message.error(`${info.file.name} file upload failed.`);\n                                    }\n                                },\n                            };\n                            return (\n<Form.Item key={field.key} {...formItemLayout} label={field.label}>\n                                {getFieldDecorator(field.key, {valuePropName: field.key,})(\n                                    <Upload {...multiuploadprops}>\n                                        <Button>\n                                            <Icon type=\"upload\" /> Select File\n                                        </Button>\n                                        {field.initialValue && field.initialValue.length ?\n                                            field.initialValue.map(img => (\n<img\n  src={img}\n  style={{maxWidth: '100%'}}\n/>\n)) : null}\n                                    </Upload>\n                                )}\n</Form.Item>\n);\n                        case COUNTRY_FIELD:\n                            return (\n<FormItem\n  key={field.key}\n  {...formItemLayout}\n  label={field.label}\n  extra={field.extra}\n>\n                                {getFieldDecorator(field.key, that.fieldDecorators(field, that.state.formData))(\n                                    <Select\n                                      placeholder={field.placeholder}\n                                      disabled={field.disabled ? field.disabled : that.state.disabled}\n                                      mode={field.mode ? field.mode : \"default\"}\n                                      onChange={(value) => that.setAddressField('country', value)}\n                                    >\n                                        {that.state.countryOptions.map((option) => (\n<Select.Option\n  value={option.id}\n>{option.name}\n</Select.Option>\n))}\n                                    </Select>\n                                )}\n</FormItem>\n);\n                        case STATE_FIELD:\n                            return (\n<FormItem\n  key={field.key}\n  {...formItemLayout}\n  label={field.label}\n  extra={field.extra}\n>\n                                {getFieldDecorator(field.key, that.fieldDecorators(field, that.state.formData))(\n                                    <Select\n                                      placeholder={field.placeholder}\n                                      disabled={field.disabled ? field.disabled : that.state.disabled}\n                                      mode={field.mode ? field.mode : \"default\"}\n                                      onChange={(value) => that.setAddressField('state', value)}\n                                    >\n                                        {that.state.stateOptions.map((option) => (\n<Select.Option\n  value={option.id}\n>{option.name}\n</Select.Option>\n))}\n                                    </Select>\n                                )}\n</FormItem>\n);\n\n                        case EMAIL_FIELD:\n                            return (\n<Form.Item\n  key={field.key}\n  {...formItemLayout}\n  label={field.label}\n  extra={field.extra}\n>\n                                {getFieldDecorator(field.key, {\n                                    initialValue: that.state.formData[field.key],\n                                    rules: [{\n                                        type: 'email', message: 'The input is not valid E-mail!',\n                                    }, {\n                                        required: true, message: 'Please input your E-mail!',\n                                    }],\n                                })(\n                                    <Input\n                                      placeholder={field.placeholder}\n                                      disabled={field.disabled ? field.disabled : that.state.disabled}\n                                      onChange={that.inputChange}\n                                    />\n                                )}\n</Form.Item>\n)\n\n                        case CITY_FIELD:\n                            return (\n<FormItem\n  key={field.key}\n  {...formItemLayout}\n  label={field.label}\n  extra={field.extra}\n>\n                                {getFieldDecorator(field.key, that.fieldDecorators(field, that.state.formData))(\n                                    <Select\n                                      placeholder={field.placeholder}\n                                      disabled={field.disabled ? field.disabled : that.state.disabled}\n                                      mode={field.mode ? field.mode : \"default\"}\n                                    >\n                                        {that.state.cityOptions.map((option) => (\n<Select.Option\n  value={option.id}\n>{option.name}\n</Select.Option>\n))}\n                                    </Select>\n                                )}\n</FormItem>\n);\n                        case DIVIDER_FIELD :\n                            return <Divider style={{margin: 4}} />\n\n\n                        case LABEL_FIELD :\n                            return (\n<FormItem\n  key={field.key}\n  {...formItemLayout}\n  label={field.label}\n  extra={field.extra}\n>\n\n                                {field.follow ? <span className=\"ant-form-text\">{field.follow}</span> : null}\n\n</FormItem>\n);\n                        default:\n                            return null;\n                    }\n                }) : null}\n                <FormItem {...formItemLayout}>\n                    {/* <Button onClick={this.resetFormData}>Reset</Button> */}\n                    <Button loading={that.state.loading} type=\"primary\" htmlType=\"submit\" style={{margin: 5}}>\n                        Submit\n                    </Button>\n                    {that.props.history ? (\n                        <Button style={{margin: 5}} onClick={() => that.props.history.goBack()}>\n                            Cancel\n                        </Button>\n                      ) : null}\n                </FormItem>\n            </Form>\n</div>\n)\n    }\n}\n\nexport default DynamicFieldsForm;\n","import {\n    APPOINTMENT_FOR_EACH_CATEGORY,\n    CANCELLATION_NUMBERS,\n    AVERAGE_WAITING_ENGAGED_TIME_DAY_WISE,\n    AVERAGE_WAITING_ENGAGED_TIME_MONTH_WISE,\n    REASONS_FOR_CANCELLATIONS,\n    DAILY_APPOINTMENT_COUNT,\n    APPOINTMENT_FOR_EACH_DOCTOR,\n    MONTHLY_APPOINTMENT_COUNT,\n    APPOINTMENT_FOR_EACH_PATIENT_GROUP,\n    NEW_PATIENTS,\n    DAILY_NEW_PATIENTS,\n    PATIENTS_FIRST_APPOINTMENT,\n    MONTHLY_NEW_PATIENTS,\n    NEW_MEMBERSHIP,\n    EXPIRING_MEMBERSHIP,\n    AGEING_AMOUNT_DUE,\n    AMOUNT_DUE_PER_DOCTOR,\n    AMOUNT_DUE_PER_PROCEDURE,\n    UNSETTLED_INVOICE,\n    DAILY_TREATMENT_COUNT,\n    TREATMENTS_FOR_EACH_DOCTOR,\n    MONTHLY_TREATMENT_COUNT,\n    TREATMENT_FOR_EACH_CATEGORY,\n    DAILY_EXPENSES,\n    MONTHLY_EXPENSES,\n    EXPENSES_EACH_TYPE,\n    DAILY_INVENTORY,\n    MONTHLY_INVENTORY,\n    TOP_INVENTORY,\n    DAILY_BOOKING_COUNT,\n    MONTHLY_BOOKING_COUNT,\n    MEDICINE_USAGE_COUNT,\n    BED_BOOKING_PACKAGE_COUNT,\n    MARGIN_TYPE_WISE,\n    PRODUCT_WISE,\n    TRANSFERED_AMOUNT,\n    WALLET_BALANCE_AMOUNT,\n    CREDIT_AMOUNT_PER_DOCTOR,\n    PAYMENT_REFUND,\n    PATIENTS_UNSETTLED_ADVANCE,\n    PAYMENT_RECEIVED_PATIENT_GROUP,\n    MODE_OF_PAYMENTS,\n    PAYMENT_RECEIVED_PER_DAY,\n    PAYMENT_RECEIVED_PER_DOCTOR,\n    PAYMENT_RECEIVED_PER_MONTH,\n    PAYMENT_SETTLEMENT,\n    PAYMENT_SETTLEMENT_PER_DOCTOR,\n    CREDIT_NOTES,\n    ACTIVE_PATIENTS,\n    AGENT_TREE_VIEW,\n    FOLLOW_UP,\n    MEDICINE,\n    ALL_INVOICE,\n    DAILY_INCOME,\n    MONTHLY_INCOME,\n    TAXED_INCOME,\n    PATIENT_GROUPS_INCOME,\n    PRODUCT_INCOME,\n    PROCEDURE_INCOME,\n    DOCTOR_EACH_INCOME,\n    APPOINTMENT_FOR_PATIENT_CONVERSION,\n    ALL_INVOICE_RETURN,\n    DAILY_WISE_INVOICE,\n    MONTHLY_WISE_INCOME,\n    RETURN_ITEMS,\n    RETURN_INVOICE_FOR_EACH_PROCEDURE,\n    RETURN_INVOICE_FOR_EACH_DOCTOR,\n    RETURN_INVOICE_FOR_EACH_PRODUCT,\n    RETURN_INVOICE_FOR_EACH_PATIENT_GROUPS,\n    RETURN_INVOICE_FOR_EACH_TAX, MONTHLY_WISE_RETURN_INVOICE, DAILY_WISE_RETURN_INVOICE, PAYMENT_UNSETTLEMENT\n} from \"./dataKeys\";\n\nexport const PAYMENT_TYPES = [\n    {label: 'cash', value: 'cash'},\n    {label: 'cheque', value: 'cheque'},\n    {label: 'card', value: 'card'},\n    {label: 'netbanking', value: 'netbanking'},\n    {label: 'unknown', value: 'unknown'},\n]\n\nexport const PAYMENT_OFFLINE_MODE = 'Cash';\n\nexport const DISEASE_TYPES = [\n    {label: 'Kidney Disease', value: 'Kidney Disease'},\n    {label: 'Cancer Disease', value: 'Cancer Disease'},\n    {label: 'Other Disease', value: 'Other Disease'}\n];\nexport const DRUG = \"Medicine\";\nexport const EQUIPMENT = \"Equipment\";\nexport const SUPPLIES = \"Supplies\";\nexport const PROCEDURES = \"Procedure\";\nexport const PRESCRIPTIONS = \"Prescriptions\";\nexport const INVENTORY = \"Inventory\";\n\n\nexport const INVOICE_ITEM_TYPE = [\n    {label: PROCEDURES, value: PROCEDURES},\n    {label: PRESCRIPTIONS, value: PRESCRIPTIONS},\n    {label: INVENTORY, value: INVENTORY}\n];\nexport const INVENTORY_ITEM_TYPE = [\n    {label: DRUG, value: DRUG},\n    {label: EQUIPMENT, value: EQUIPMENT},\n    {label: SUPPLIES, value: SUPPLIES}\n];\n\n\nexport const ADD_STOCK = \"ADD\";\nexport const CONSUME_STOCK = \"CONSUME\";\n\nexport const APPOINTMENT_CONFIRMATION_SMS_TAG_OPTIONS = [\n    {\n        label: \"PATIENT ID\",\n        value: \"{{PATIENT_ID}}\"\n    }, {\n        label: \"CLINIC CONTACT\",\n        value: \"{{CLINICCONTACTNUMBER}}\"\n    }, {\n        label: \"CLINIC NAME\",\n        value: \"{{CLINIC}}\"\n    }, {\n        label: \"PATIENT NAME\",\n        value: \"{{PATIENT}}\"\n    }, {\n        label: \"APPOINTMENT CATEGORY\",\n        value: \"{{CATEGORY}}\"\n    }, {\n        label: \"DATE\",\n        value: \"{{DATE}}\"\n    }, {\n        label: \"TIME\",\n        value: \"{{TIME}}\"\n    }];\n\nexport const EMR_TYPE = \"EMR\";\nexport const BILLING_TYPE = \"BILLING\";\n\nexport const EMR_SUB_TYPE = [\n    {title: 'PRESCRIPTION'},\n    {title: 'TREATMENT PLAN'},\n    {title: 'CASE SHEET'},\n    {title: 'MEDICAL LEAVE'},\n    {title: 'REPORT MANUAL'},\n    {title: 'LAB ORDER'},\n    // {title: 'LAB ORDER RESULT'},\n    {title: 'CLINICAL NOTES'}\n];\nexport const BILLING_SUB_TYPE = [\n    {title: 'INVOICE'},\n    {title: 'BOOKING'},\n    {title: 'RECEIPTS'},\n    {title: 'RETURN'}\n];\n\nexport const CUSTOMIZE_PAPER_TYPE = [\n    'PAGE', 'HEADER', 'PATIENT', 'FOOTER'\n];\n\nexport const PAPER_SIZE = ['A2', 'A3', 'A4', 'A5'];\n\nexport const PAGE_ORIENTATION = [\n    {value: 'PORTRAIT'},\n    {value: 'LANDSCAPE'}\n];\n\nexport const PRINTER_TYPE = [\n    {value: 'COLOR'},\n    {value: 'BLACK'}\n];\nexport const HEADER_INCLUDE = [\n    {title: 'Yes', value: true},\n    {title: 'No , I already have a letter head.', value: false}\n];\nexport const LOGO_TYPE = [\n    {value: 'Square'},\n    {value: 'Narrow'},\n    {value: 'Wide'}\n];\nexport const LOGO_ALIGMENT = [\n    {value: 'RIGHT'},\n    {value: 'LEFT'},\n    {value: 'CENTRE'}\n];\nexport const LOGO_INCLUDE = [\n    {title: 'Yes', value: true},\n    {title: 'No', value: false}\n];\nexport const PATIENT_DETAILS_LIST = [\n    {value: 'Exclude Medical History'},\n    {value: 'Exclude Patient Number'},\n    {value: 'Exclude address'},\n    {value: 'Exclude Blood Group'}\n];\nexport const EXCLUDE_PATIENT_DOB = \"Exclude Patient Gender & DOB\";\n\nexport const SMS_ENABLE = [\n    {title: 'Yes', value: true},\n    {title: 'No', value: false}\n]\n\nexport const EMAIL_ENABLE = [\n    {title: 'Yes', value: true},\n    {title: 'No', value: false}\n]\n\nexport const BIRTHDAY_SMS_ENABLE = [\n    {title: 'Yes', value: true},\n    {title: 'No', value: false}\n]\n\nexport const DURATIONS_UNIT = [\n    {label: 'day(s)', value: 'day(s)'},\n    {label: 'week(s)', value: 'week(s)'},\n    {label: 'month(s)', value: 'month(s)'},\n    {label: 'year(s)', value: 'year(s)'},\n];\n\nexport const DOSE_FREQUENCIES = [\n    {label: 'day(s)', value: 'day(s)'},\n];\n\nexport const DOSE_REQUIRED = [\n    {label: 'twice daily', value: 'twice daily'},\n    {label: 'three times a day', value: 'three times a day'},\n    {label: 'four times a day', value: 'four times a day'},\n    {label: 'every four hours', value: 'every four hours'},\n    {label: 'as needed', value: 'as needed'},\n    {label: 'every 2 hour(s)', value: 'every 2 hour(s)'},\n    {label: 'every other hour', value: 'every other hour'},\n    {label: 'every day', value: 'every day'},\n    {label: 'every other day', value: 'every other day'},\n];\n\nexport const SCHEDULE_STATUS = 'Scheduled';\nexport const WAITING_STATUS = 'Waiting';\nexport const ENGAGED_STATUS = 'Engaged';\nexport const CHECKOUT_STATUS = 'CheckOut';\nexport const CANCELLED_STATUS = 'Cancelled';\n\nexport const TYPE_OF_CONSUMPTION = [\n    {label: \"Sales\", value: \"SALES\"},\n    {label: \"Services\", value: \"SERVICES\"},\n    {label: \"Damaged\", value: \"DAMAGED\"},\n    {label: \"Returned\", value: \"RETURNED\"},\n    {label: \"Adjustment\", value: \"ADJUSTMENT\"},\n];\n\nexport const TYPES_OF_BED_PACKAGES_ROOM_TYPE = [\n    {label: \"Private\", value: \"PRIVATE\"},\n    {label: \"Dormitory\", value: \"DORMITORY\"},\n    {label: \"Semi Private\", value: \"SEMI PRIVATE\"},\n]\n\nexport const CUSTOM_STRING_SEPERATOR = '$_$';\n\nexport const DAY_KEYS = ['monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday', 'sunday'];\n\nexport const NOTES = [\n    {label: \"Valid for absence from court attendance\", value: \"valid_court\"},\n    {label: \"Invalid for absence from court attendance\", value: \"invalid_court\"},\n    {label: \"Dont mention\", value: \"no_mention\"}\n];\n\nexport const DEFAULT_TEMPERATURE_IN = [\n    {label: \"Degree Fahrenheit\", value: \"Degree Fahrenheit\"},\n    {label: \"Degree Celsius\", value: \"Degree Celsius\"}\n];\nexport const DEFAULT_TEMPERATURE_METHOD = [\n    {label: \"Armpit\", value: \"Armpit\"},\n    {label: \"Forehead\", value: \"Forehead\"},\n    {label: \"Anus\", value: \"Anus\"},\n    {label: \"Mouth\", value: \"Mouth\"},\n    {label: \"Ear\", value: \"Ear\"}\n];\nexport const DEFAULT_BP_METHOD = [\n    {label: \"Sitting\", value: \"Sitting\"},\n    {label: \"Standing\", value: \"Standing\"}\n];\n\nexport const APPOINTMENT_STATUS = [\n    {label: \"Scheduled\", value: SCHEDULE_STATUS},\n    {label: \"Cancelled\", value: CANCELLED_STATUS},\n    {label: \"Engaged\", value: ENGAGED_STATUS}\n];\nexport const MAILED = 'true';\n\nexport const Booking_Type = [\n    {value: 'TATKAL'},\n    {value: 'NORMAL'}\n];\nexport const PAYMENT_STATUS = [\n    {label: \"Success\", value: \"SUCCESSFUL\"},\n    {label: \"Failed\", value: \"FAILED\"},\n    {label: \"Pending\", value: \"PENDING\"}\n];\nexport const OPD_IPD = [\n    {label: \"OPD\", value: \"OPD\"},\n    {label: \"IPD\", value: \"IPD\"}\n];\n\nexport const ROLES = [\n    {label: \"ADMIN\", value: '1'},\n    {label: \"CLINIC_ADMIN\", value: '2'}\n];\n/* Patient Reports */\nexport const PATIENTS_RELATED_REPORT = [\n    {name: 'Daily New Patients', value: DAILY_NEW_PATIENTS},\n    {name: 'Expiring Membership', value: EXPIRING_MEMBERSHIP},\n    {name: 'Patients First Appointment', value: PATIENTS_FIRST_APPOINTMENT},\n    {name: 'Monthly New Patients', value: MONTHLY_NEW_PATIENTS},\n    {name: 'New Membership', value: NEW_MEMBERSHIP},\n    {name: 'Active Patients', value: ACTIVE_PATIENTS},\n    {name: \"Follow Up Report\", value: FOLLOW_UP},\n    {name: \"Medicine Report\", value: MEDICINE},\n];\n\n/* Appointment Reports */\nexport const APPOINTMENT_RELATED_REPORT = [\n    {name: 'Appointments For Each Category', value: APPOINTMENT_FOR_EACH_CATEGORY},\n    {name: 'Cancellation Numbers', value: CANCELLATION_NUMBERS},\n    {name: 'Average Waiting/engaged Time Day Wise', value: AVERAGE_WAITING_ENGAGED_TIME_DAY_WISE},\n    {name: 'Average Waiting/engaged Time Month Wise', value: AVERAGE_WAITING_ENGAGED_TIME_MONTH_WISE},\n    // {name: 'Reasons For Cancellations', value: REASONS_FOR_CANCELLATIONS},\n    {name: 'Daily Appointment Count', value: DAILY_APPOINTMENT_COUNT},\n    {name: 'Appointments For Each Doctor', value: APPOINTMENT_FOR_EACH_DOCTOR},\n    {name: 'Monthly Appointment Count', value: MONTHLY_APPOINTMENT_COUNT},\n    {name: 'Appointment For Each Patient Group', value: APPOINTMENT_FOR_EACH_PATIENT_GROUP},\n    {name: 'Patient Conversion', value: APPOINTMENT_FOR_PATIENT_CONVERSION},\n];\n\n/* Emr Reports */\nexport const EMR_RELATED_REPORT = [\n    {name: 'Daily Treatments Count', value: DAILY_TREATMENT_COUNT},\n    {name: 'Treatments For Each Doctor', value: TREATMENTS_FOR_EACH_DOCTOR},\n    {name: 'Monthly Treatments Count', value: MONTHLY_TREATMENT_COUNT},\n    {name: 'Treatments For Each Category', value: TREATMENT_FOR_EACH_CATEGORY}\n];\n\n/* Amount Due Reports */\nexport const AMOUNT_DUE_RELATED_REPORT = [\n    {name: 'Ageing Amount Due', value: AGEING_AMOUNT_DUE},\n    {name: 'Amount Due Per Doctor', value: AMOUNT_DUE_PER_DOCTOR},\n    // {name: 'Amount Due Per Procedure', value: AMOUNT_DUE_PER_PROCEDURE},\n    // {name: 'Unsettled Invoice', value: UNSETTLED_INVOICE},\n];\n\nexport const BLOOD_GROUPS = [\n    {name: \"A+\", value: 'A+'},\n    {name: \"A-\", value: 'A-'},\n    {name: \"B+\", value: 'B+'},\n    {name: \"B-\", value: 'B-'},\n    {name: \"AB+\", value: 'AB+'},\n    {name: \"AB-\", value: 'AB-'},\n    {name: \"O+\", value: 'O+'},\n    {name: \"O-\", value: 'O-'},\n];\n\n/** * Expense Reports ** */\nexport const EXPENSE_RELATED_REPORT = [\n    {name: 'Daily Expenses', value: DAILY_EXPENSES},\n    {name: 'Expenses For Each Type', value: EXPENSES_EACH_TYPE},\n    {name: 'Monthly Expenses', value: MONTHLY_EXPENSES}];\n\n/** *Inventory Reports * */\nexport const INVENTORY_RELATED_REPORT = [\n    {name: 'Daily Stock Consumption Item Wise', value: DAILY_INVENTORY},\n    {name: 'Monthly Stock Consumption Item Wise', value: MONTHLY_INVENTORY},\n    {name: 'Top 10 Consumed Items', value: TOP_INVENTORY}\n];\nexport const PRODUCT_ITEM = [\n    {label: 'All', value: 'ALL'},\n    {label: DRUG, value: DRUG},\n    {label: EQUIPMENT, value: EQUIPMENT},\n    {label: SUPPLIES, value: SUPPLIES},\n];\n/* Bed Booking Reports */\nexport const BED_BOOKING_RELATED_REPORT = [\n    {name: 'Daily Booking Count', value: DAILY_BOOKING_COUNT},\n    {name: 'Monthly Booking Count', value: MONTHLY_BOOKING_COUNT},\n    {name: 'Medicine Usage Count', value: MEDICINE_USAGE_COUNT},\n    {name: 'Bed Booking Package Count', value: BED_BOOKING_PACKAGE_COUNT},\n];\n/* MLM reports */\nexport const MLM_RELATED_REPORT = [\n    {name: 'Margin Type wise', value: MARGIN_TYPE_WISE},\n    // {name:'Product Wise', value:PRODUCT_WISE},\n    {name: 'Wallet Balance Amount', value: WALLET_BALANCE_AMOUNT},\n    {name: 'Agent Tree View', value: AGENT_TREE_VIEW},\n];\n\n/* Payments Reports */\nexport const PAYMENT_RELATED_REPORT = [\n    // {name: 'Refund Payments', value: PAYMENT_REFUND},\n    {name: 'Payment Received From Each Patient Group', value: PAYMENT_RECEIVED_PATIENT_GROUP},\n    {name: 'Patients With Unsettled Advance, As Of Today', value: PATIENTS_UNSETTLED_ADVANCE},\n    {name: 'Modes Of Payment', value: MODE_OF_PAYMENTS},\n    {name: 'Payment Received Per Day', value: PAYMENT_RECEIVED_PER_DAY},\n    {name: 'Payment Received Per Doctor', value: PAYMENT_RECEIVED_PER_DOCTOR},\n    {name: 'Payment Received Per Month', value: PAYMENT_RECEIVED_PER_MONTH},\n\n    // {name: 'Payment Settlement', value: PAYMENT_SETTLEMENT},\n    // {name: 'Payment Settlement Per Doctor', value: PAYMENT_SETTLEMENT_PER_DOCTOR},\n    // {name: 'Credit Notes', value: CREDIT_NOTES},\n    // {name: 'Credit Amount Per Doctor', value: CREDIT_AMOUNT_PER_DOCTOR},\n];\n\n/* Income Reports */\n\nexport const INCOME_RELATED_REPORT = [\n    {name: \"Daily Invoiced Income\", value: DAILY_INCOME},\n    {name: \"Monthly Invoiced Income\", value: MONTHLY_INCOME},\n    {name: \"Taxed Invoiced Income\", value: TAXED_INCOME},\n    {name: \"Invoiced Income For Each Doctor\", value: DOCTOR_EACH_INCOME},\n    {name: \"Invoiced Income For Each Procedure\", value: PROCEDURE_INCOME},\n    {name: \"Invoiced Income For Each Patient Group\", value: PATIENT_GROUPS_INCOME},\n    {name: \"Invoiced Income For Each Product\", value: PRODUCT_INCOME},\n\n];\n\n/* Invoiced Report */\nexport const INVOICE_RELATED_REPORT = [\n    // {name:\"All Returned Invoices\" ,value:ALL_INVOICE_RETURN},\n    {name: \"Day wise Return Invoice\", value: DAILY_WISE_RETURN_INVOICE},\n    {name: \"Monthly wise Return Invoice\", value: MONTHLY_WISE_RETURN_INVOICE},\n    {name: \"Return Invoice For Each Tax\", value: RETURN_INVOICE_FOR_EACH_TAX},\n    {name: \"Return Invoice For Each Procedure\", value: RETURN_INVOICE_FOR_EACH_PROCEDURE},\n    {name: \"Return Invoice For Each Product\", value: RETURN_INVOICE_FOR_EACH_PRODUCT},\n    {name: \"Return Invoice For Each Doctor\", value: RETURN_INVOICE_FOR_EACH_DOCTOR},\n    {name: \"Return Invoice For Each Patient Groups\", value: RETURN_INVOICE_FOR_EACH_PATIENT_GROUPS},\n];\n\n\nexport const SCHEDULE_OF_INVOICES = [\n    {label: \"all \", value: ''},\n    {label: \"Services\", value: \"SERVICES\"},\n    {label: \"Products\", value: \"PRODUCTS\"},\n    {label: \"Lab orders\", value: \"RESERVATION\"},\n];\n\nexport const DISCOUNT = [\n    {label: \"Zero\", value: \"ZERO\"},\n    {label: \"Non Zero\", value: \"NON_ZERO\"},\n];\n\nexport const SCHEDULE_OF_PAYMENT = [\n    {label: \"all payments\", value: \"SALES\"},\n    {label: \"Only advance payments\", value: \"SERVICES\"},\n    {label: \"Payment for services\", value: \"DAMAGED\"},\n    {label: \"Payment for products\", value: \"RETURNED\"},\n];\n\nexport const PATIENT_AGE = [\n    {label: 'DOB', value: 'DOB'},\n    {label: 'Age', value: 'AGE'}\n];\n\n/** Suggestions Reports** */\nexport const SUGGESTIONS_STATUS = [\n    {label: \"Open\", value: \"Open\"},\n    {label: \"In Progress\", value: \"InProgress\"},\n    {label: \"Closed\", value: \"Closed\"},\n];\n\nexport const SOURCE_PLATFORM = [\n    {label: 'Facebook', value: 'FACEBOOK'},\n    {label: \"News Paper\", value: \"NEWS_PAPER\"},\n    {label: \"TV\", value: \"TV\"},\n    {label: 'Street Banners', value: \"STREET\"},\n];\n\nexport const OUTER_KEYS_HOTKEYS = 'alt+c ,alt+p, alt+r, alt+s, alt+b ,alt+w';\n\nexport const INNER_KEYS_HOTKEYS = 'alt+f ,alt+a, alt+o, alt+m, alt+l ,alt+i,alt+e ,alt+n ,alt+y ,alt+t,alt+s ,alt+k, alt+g,alt+u,alt+w';\n\n\nexport const FAMILY_GROUPS = [\n    {name: \"Child\", value: 'CHILD'},\n    {name: \"Parent  \", value: 'PARENT'},\n    {name: \"Brother/Sister\", value: 'BROTHER/SISTER'},\n    {name: \"Husband/Wife\", value: 'HUSBAND/WIFE'},\n    {name: \"Grandchild\", value: 'GRANDCHILD'},\n    {name: \"GrandParent\", value: 'GRANDPARENT'},\n    {name: \"Uncle/Aunt\", value: 'O+'},\n    {name: \"Nephew/Niece\", value: 'NEPHEW/NIECE'},\n    {name: \"Cousin\", value: 'COUSIN'},\n];\n\n// //\n// export const ADVANCED_SEARCH = [\n//     {label: 'Patient Name', value: 'name', input_type: \"text\", placeholder: \"Patient Name\"},\n//     {label: 'Contact No', value: 'phone', input_type: \"text\", placeholder: \"Contact No\"},\n//     {label: 'Age is', value: 'age', input_type: \"number\", placeholder: \"Age is\"},\n//     {label: 'Age more than', value: 'age_gte', input_type: \"number\", placeholder: \"Age more than\"},\n//     {label: 'Age Less Than', value: 'age_lte', input_type: \"number\", placeholder: \"Age less than\"},\n//     {\n//         label: 'Has Age', value: 'has_age', input_type: \"dropdown\", values: [\n//             \"12\", \"25\", \"45\", \"78\"\n//         ]\n//     },\n//\n// ];\n\n/** Advanced Search Constant Data* */\nexport const ADVANCED_SEARCH = [\n    {label: 'Patient Name', value: 'name'},\n    {label: 'Contact No', value: 'phone'},\n    {label: 'Age is ', value: 'age'},\n    {label: 'Age more than ', value: 'age_gte'},\n    {label: 'Age Less Than', value: 'age_lte'},\n    {label: 'Has Age ', value: 'has_age'},\n    {label: 'Date of Birth is ', value: 'dob'},\n    {label: 'Date of Birth is more than ', value: 'dob_gte'},\n    {label: 'Date of Birth is less than', value: 'dob_lte'},\n    {label: 'Birthday is in', value: 'dob_month'},\n    {label: 'Has Date of Birth', value: 'has_dob'},\n    {label: 'Patient Id', value: 'patient_id'},\n    {label: 'Has Aadhar Id', value: 'has_aadhar'},\n    {label: 'Aadhar Id', value: 'aadhar'},\n    {label: 'Email', value: 'email'},\n    {label: 'Has Email', value: 'has_email'},\n    {label: 'Gender is', value: 'gender'},\n    {label: 'Has Gender', value: 'has_gender'},\n    {label: 'Pincode', value: 'pincode'},\n    {label: 'Has Pincode', value: 'has_pincode'},\n    {label: 'Has Street Address', value: 'has_street'},\n    {label: 'Street Address ', value: 'street'},\n    {label: 'Blood Group', value: 'blood_group'},\n    {label: 'Referal Source', value: 'source'},\n    {label: 'Refered by Agent', value: 'agent_referal'},\n    // {label:'Refered by Agent' ,value:'agent_referal'},\n\n];\n\nexport const HAS_AGE = [\n    {label: 'Yes', value: 'Y'},\n    {label: 'No', value: 'N'}\n];\n\nexport const HAS_DOB = [\n    {label: 'Yes', value: 'Y'},\n    {label: 'No', value: 'N'}\n];\nexport const HAS_AADHAR_ID = [\n    {label: 'Yes', value: 'Y'},\n    {label: 'No', value: 'N'}\n];\nexport const HAS_EMAIL = [\n    {label: 'Yes', value: 'Y'},\n    {label: 'No', value: 'N'}\n];\n\nexport const HAS_GENDER = [\n    {label: 'Yes', value: 'Y'},\n    {label: 'No', value: 'N'}\n];\n\nexport const HAS_PINCODE = [\n    {label: 'Yes', value: 'Y'},\n    {label: 'No', value: 'N'}\n];\n\nexport const HAS_STREET = [\n    {label: 'Yes', value: 'Y'},\n    {label: 'No', value: 'N'}\n];\n\nexport const REFERED_BY_AGENT = [\n    {label: 'Yes', value: 'Y'},\n    {label: 'No', value: 'N'}\n];\n\nexport const GENDER_OPTION = [\n    {label: 'Female', value: 'female'},\n    {label: 'Male', value: 'male'},\n    {label: 'Other', value: 'other'},\n];\n\nexport const CURRENCY_TYPE = [\n    {label: 'Percent', value: '%'},\n    {label: 'Rupees', value: 'INR'}\n];\n\n\nexport const ROUTES_TO_HIDE_PATIENT_SIDE_PANEL = [\n    '/patients/profile/add',\n    '/patient/:id/emr/vitalsigns/add',\n    \"/patient/:id/emr/vitalsigns/edit\",\n    \"/patient/:id/emr/clinicnotes/add\",\n    \"/patient/:id/emr/clinicnotes/edit\",\n    \"/patient/:id/emr/plans/add\",\n    \"/patient/:id/emr/plans/edit\",\n    \"/patient/:id/emr/workdone/add\",\n    \"/patient/:id/emr/workdone/edit\",\n    \"/patient/:id/emr/prescriptions/add\",\n    \"/patient/:id/emr/prescriptions/edit\",\n    \"/patient/:id/prescriptions/template/add\",\n    \"/patient/:id/billing/invoices/add\",\n    \"/patient/:id/billing/invoices/edit\",\n    \"/patient/:id/billing/payments/add\",\n    \"/patient/:id/billing/payments/edit\"\n];\n\n\nexport const PROMO_CODE_SMS_TAG_OPTIONS = [\n    {\n        label: \"PATIENT NAME\",\n        value: \"{{PATIENT}}\"\n    }, {\n        label: \"PATIENT ID\",\n        value: \"{{PATIENT_ID}}\"\n    }, {\n        label: \"CLINIC CONTACT\",\n        value: \"{{CLINICCONTACTNUMBER}}\"\n    }, {\n        label: \"CLINIC NAME\",\n        value: \"{{CLINIC}}\"\n    }, {\n        label: \"EXPIRY DATE\",\n        value: \"{{EXPIRY}}\"\n    }, {\n        label: \"VALUE\",\n        value: \"{{VALUE}}\"\n    }, {\n        label: \"MAX VALUE\",\n        value: \"{{MAX_VALUE}}\"\n    }, {\n        label: \"MIN PURCHASE\",\n        value: \"{{MIN_PURCHASE}}\"\n    }, {\n        label: \"PROMO CODE\",\n        value: \"{{CODE}}\"\n    }];\nexport const PROMO_CODE_RUPEE_SMS_TAG_OPTIONS = [\n    {\n        label: \"PATIENT NAME\",\n        value: \"{{PATIENT}}\"\n    }, {\n        label: \"PATIENT ID\",\n        value: \"{{PATIENT_ID}}\"\n    }, {\n        label: \"CLINIC CONTACT\",\n        value: \"{{CLINICCONTACTNUMBER}}\"\n    }, {\n        label: \"CLINIC NAME\",\n        value: \"{{CLINIC}}\"\n    }, {\n        label: \"EXPIRY DATE\",\n        value: \"{{EXPIRY}}\"\n    }, {\n        label: \"VALUE\",\n        value: \"{{VALUE}}\"\n    }, {\n        label: \"MIN PURCHASE\",\n        value: \"{{MIN_PURCHASE}}\"\n    }, {\n        label: \"PROMO CODE\",\n        value: \"{{CODE}}\"\n    }];\nexport const BLOOD_GROUP_CONFIG_PARAM = 'config_blood_group';\nexport const PATIENT_SOURCE_CONFIG_PARAM = 'config_source';\nexport const SMS_LANGUAGE_CONFIG_PARAM = 'config_sms_language';\nexport const FAMILY_RELATION_CONFIG_PARAM = 'config_family_relation';\nexport const GENDER_CONFIG_PARAM = 'config_gender';\n\n\nexport const INCOME_TYPE = [\n    {label: \"Services\", value: \"SERVICES\"},\n    {label: \"Products\", value: \"PRODUCTS\"},\n];\n\nexport const PDF_FILE_EXTENSION = 'pdf';\n","export const hideMobile = function (mobile) {\n    const hideString = '*';\n    if (mobile && mobile.length > 8) {\n        return mobile.substring(0, 3) + hideString.repeat(mobile.length - 5) + mobile.substring(mobile.length - 2);\n    }\n    return mobile;\n}\nexport const hideEmail = function (email) {\n    const hideString = '*';\n    if (email && email.length > 8) {\n        return email.substring(0, 3) + hideString.repeat(email.length - email.indexOf('@') - 4) + email.substring(email.length - email.indexOf('@') - 4);\n    }\n    return email;\n}\n","import React from \"react\";\nimport {Button, Result, Row} from \"antd\";\nimport {Link} from \"react-router-dom\";\n\nclass PermissionDenied extends React.Component {\n    render() {\n        return (\n<Row style={{marginTop: '20px'}}>\n            <Result\n              status=\"403\"\n              title={(\n<span><h1><b>403</b></h1>\n        <h2>Permission Denied</h2>\n</span>\n)}\n              subTitle=\"You don't have permission to view this page.\"\n              extra={<Link to=\"/\"><Button type=\"primary\">Go to Home</Button></Link>}\n            />\n</Row>\n)\n    }\n}\n\nexport default PermissionDenied;\n","import React from \"react\";\nimport Webcam from \"react-webcam\";\nimport {Button} from \"antd\";\n\nexport default class WebCamField extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {}\n    }\n\n    setRef = webcam => {\n        this.webcam = webcam;\n    };\n\n    capture = () => {\n        const imageSrc = this.webcam.getScreenshot();\n        if(this.props.getScreenShot)\n            this.props.getScreenShot(imageSrc);\n    };\n\n    render() {\n        const videoConstraints = {\n            width: 1280,\n            height: 720,\n            facingMode: \"user\"\n        };\n        return (\n<div style={{width:680}}>\n            <Webcam\n              audio={false}\n              height={480}\n              width={640}\n              ref={this.setRef}\n              videoConstraints={videoConstraints}\n              screenshotFormat=\"image/jpeg\"\n            />\n            <Button onClick={this.capture}>Capture photo</Button>\n</div>\n)\n    }\n}\n","module.exports = __webpack_public_path__ + \"static/media/kidneycarelogo.3378a129.png\";","import React from \"react\";\nimport {Button, Result, Row} from \"antd\";\nimport {Link} from \"react-router-dom\";\n\nclass Error404 extends React.Component {\n    render() {\n        return (\n<Row style={{marginTop: '20px'}} gutter={24}>\n            <Result\n              status=\"404\"\n              title={(\n<span><h1><b>404</b></h1>\n        <h2>Page Not Found</h2>\n</span>\n)}\n              subTitle=\"The page you are looking for has been temporarily moved or did not exist.\"\n              extra={<Link to=\"/\"><Button type=\"primary\">Go to Home</Button></Link>}\n            />\n</Row>\n)\n    }\n}\n\nexport default Error404;\n","import React from \"react\";\nimport {Spin, Row, Col, Avatar, Icon, Button, Divider, Tag, Popconfirm} from \"antd\";\nimport {Link} from \"react-router-dom\";\nimport moment from \"moment\";\nimport {displayMessage, getAPI, interpolate, putAPI} from \"../../utils/common\";\nimport {APPOINTMENT_API} from \"../../constants/api\";\nimport {\n    CANCELLED_STATUS,\n    CHECKOUT_STATUS,\n    ENGAGED_STATUS,\n    SCHEDULE_STATUS,\n    WAITING_STATUS\n} from \"../../constants/hardData\";\nimport {ERROR_MSG_TYPE, SUCCESS_MSG_TYPE} from \"../../constants/dataKeys\";\n\nexport default class EventPatientPopover extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            loading: true,\n            appointment: null\n        }\n    }\n\n    componentDidMount() {\n        if (this.props.appointmentId) {\n            this.loadAppointmentDetails();\n        } else {\n            this.setState({\n                loading: false\n            });\n        }\n    }\n\n    loadAppointmentDetails = () => {\n        this.setState({\n            loading: true\n        })\n        const that = this;\n        const successFn = function (data) {\n            that.setState({\n                appointment: data,\n                loading: false\n            });\n            console.log(\"event\", data)\n        };\n        const errorFn = function () {\n            that.setState({\n                loading: false\n            });\n        };\n        getAPI(interpolate(APPOINTMENT_API, [this.props.appointmentId]), successFn, errorFn);\n\n\n    }\n\n    updateAppointmentStatus = (id, currentStatus, targetStatus) => {\n        const that = this;\n        const reqData = {\n            status: targetStatus\n        };\n        if (targetStatus == WAITING_STATUS) {\n            reqData.waiting = moment().format()\n        } else if (targetStatus == ENGAGED_STATUS) {\n            reqData.engaged = moment().format()\n        } else if (targetStatus == CHECKOUT_STATUS) {\n            reqData.checkout = moment().format()\n        }\n        const successFn = function (data) {\n            displayMessage(SUCCESS_MSG_TYPE, \"Appointment Status Changed Successfully!!\");\n            that.loadAppointmentDetails()\n        }\n        const errorFn = function () {\n\n        }\n        putAPI(interpolate(APPOINTMENT_API, [id]), reqData, successFn, errorFn\n        )\n    }\n\n    changeAppointmentStatus = (id, currentStatus, targetStatus) => {\n        const that = this;\n        const successFn = function (data) {\n            if (data.status == currentStatus) {\n                that.updateAppointmentStatus(id, currentStatus, targetStatus)\n            } else {\n                displayMessage(ERROR_MSG_TYPE, \"Appointment status has already changed. Updating Appointments...\")\n                that.loadAppointmentDetails();\n            }\n        }\n        const errorFn = function () {\n\n        }\n        getAPI(interpolate(APPOINTMENT_API, [id]), successFn, errorFn);\n    }\n\n    render() {\n        const that = this;\n        const {appointment} = this.state;\n        return (\n<div style={{width: '300px', minHeight: '200px'}}>\n            <Spin spinning={this.state.loading}>\n                {this.state.appointment ? (\n<div>\n                        <Row>\n                            <Col span={8}>\n                                {this.state.appointment.patient.image?<Avatar src={this.state.appointment.patient.image} size={80} />: (\n                                    <Avatar style={{backgroundColor: '#87d068'}}>\n                                        {this.state.appointment.patient.user.first_name ? this.state.appointment.patient.user.first_name.charAt(0) :\n                                            <Icon type=\"user\" />}\n                                    </Avatar>\n                                  )}\n                            </Col>\n                            <Col span={16}>\n                                <Link to={`/patient/${  this.state.appointment.patient.id  }/profile`} target=\"_blank\">\n                                    <h3>{this.state.appointment.patient.user.first_name}\n                                        <br />\n                                        <small>\n                                            Patient\n                                            ID: {this.state.appointment.patient.custom_id} , {this.state.appointment.patient.gender}\n                                            <br />{this.state.appointment.patient.user.mobile}\n                                        </small>\n                                    </h3>\n                                </Link>\n                            </Col>\n                        </Row>\n                        <Divider style={{margin: 0}} />\n                        <small>Status: {this.state.appointment.status}</small>\n                        <br />\n                        <small>\n                            <Icon\n                              type=\"clock-circle\"\n                            /> {moment(this.state.appointment.schedule_at).format('HH:mm A on MMMM Do')} for {this.state.appointment.slot} mins.\n                        </small>\n                        {showStatusTimeline(appointment)}\n                        <Row style={{height: '100px', overflow: 'scroll', backgroundColor: '#eee', padding: 5}}>\n                            <div>\n                                {appointment.status == SCHEDULE_STATUS ? (\n                                    <span style={{width: '70px', float: 'right'}}>\n                    <a onClick={() => that.changeAppointmentStatus(appointment.id, SCHEDULE_STATUS, WAITING_STATUS)} disabled={!that.props.activePracticePermissions.ChangeAppointmentStatus}> Check In</a>\n                                    </span>\n                                  ) : null}\n                                {appointment.status == WAITING_STATUS ? (\n                                    <span style={{width: '70px', float: 'right'}}>\n                    <a onClick={() => that.changeAppointmentStatus(appointment.id, WAITING_STATUS, ENGAGED_STATUS)} disabled={!that.props.activePracticePermissions.ChangeAppointmentStatus}> Engage</a>\n                                    </span>\n                                  ) : null}\n                                {appointment.status == ENGAGED_STATUS ? (\n                                    <span style={{width: '70px', float: 'right'}}>\n                    <a onClick={() => that.changeAppointmentStatus(appointment.id, ENGAGED_STATUS, CHECKOUT_STATUS)} disabled={!that.props.activePracticePermissions.ChangeAppointmentStatus}> Check Out</a>\n                                    </span>\n                                  ) : null}\n                                {appointment.status == CHECKOUT_STATUS ? (\n                                    <span style={{width: '70px', float: 'right'}}>\n                    <small>Checked Out</small>\n                                    </span>\n                                  ) : null}\n                                {this.state.appointment.doctor_data ? (\n<Tag\n  color={this.state.appointment.doctor_data ? this.state.appointment.doctor_data.calendar_colour : null}\n>\n                                    <b>{`With ${  this.state.appointment.doctor_data.user.first_name}`} </b>\n</Tag>\n) : null}\n                            </div>\n                            <Divider style={{margin: 0}} />\n                            <b>Category:</b>{this.state.appointment.category_data ? this.state.appointment.category_data.name : null}\n                            <p>{this.state.appointment.first_appointment?<span>This is Patient's first apppointment</span> :''}</p>\n                        </Row>\n                        <Divider style={{margin: 0}} />\n                        <Row style={{textAlign: 'right'}}>\n                            <Button.Group size=\"small\">\n                                {that.props.activePracticePermissions.EditAppointment || that.props.allowAllPermissions ? (\n                                <Button>\n                                    <Link to={`/calendar/${  this.state.appointment.id  }/edit-appointment`}>\n                                        <Icon type=\"edit\" /> Edit\n                                    </Link>\n                                </Button>\n                              ):null}\n                                {that.props.activePracticePermissions.ChangeAppointmentStatus || that.props.allowAllPermissions? (\n                                <Popconfirm\n                                  title=\"Are you sure delete this?\"\n                                  onConfirm={() => that.changeAppointmentStatus(appointment.id, appointment.status, CANCELLED_STATUS)}\n                                  okText=\"Yes\"\n                                  cancelText=\"No\"\n                                >\n                                    <Button type=\"danger\">\n                                        <Icon type=\"cross\" /> Cancel\n                                    </Button>\n                                </Popconfirm>\n                              ):null}\n                            </Button.Group>\n                        </Row>\n</div>\n) :\n                    <h4>No Patient Found</h4>}\n            </Spin>\n</div>\n)\n    }\n}\n\nfunction showStatusTimeline(appointment) {\n    switch (appointment.status) {\n        case WAITING_STATUS:\n            return (\n<div>\n                <br /><small>Checked in At {moment(appointment.waiting).format('lll')}</small>\n</div>\n)\n        case ENGAGED_STATUS:\n            return (\n<div>\n                <small>Waiting Time {moment(appointment.engaged).from(moment(appointment.waiting))}</small>\n                <br /><small>Engaged At {moment(appointment.engaged).format('lll')}</small>\n</div>\n)\n        case CHECKOUT_STATUS:\n            return (\n<div>\n                <small>Waiting Time {moment(appointment.engaged).from(moment(appointment.waiting))}</small>\n                <br /><small>Engaged Time {moment(appointment.checkout).from(moment(appointment.engaged))}</small>\n                <br /><small>Total Stay Time {moment(appointment.checkout).from(moment(appointment.waiting))}</small>\n</div>\n)\n    }\n    return null\n}\n","import React from \"react\";\nimport {\n    Alert,\n    AutoComplete,\n    Avatar,\n    Button,\n    Card,\n    DatePicker,\n    Form,\n    Input,\n    InputNumber,\n    List,\n    Select,\n    Spin,\n    Popover,\n    Icon,\n    Row,Col,\nCheckbox, Radio} from 'antd';\nimport moment from \"moment/moment\";\nimport { red } from \"ansi-colors\";\nimport {REQUIRED_FIELD_MESSAGE} from \"../../constants/messages\";\nimport {ALL, DOCTORS_ROLE, SUCCESS_MSG_TYPE} from \"../../constants/dataKeys\";\nimport {\n    ALL_APPOINTMENT_API,\n    APPOINTMENT_API,\n    APPOINTMENT_CATEGORIES,\n    BLOCK_CALENDAR,\n    CALENDER_SETTINGS,\n    DOCTOR_VISIT_TIMING_API,\n    EMR_TREATMENTNOTES,\n    PATIENT_PROFILE,\n    PRACTICESTAFF,\n    PROCEDURE_CATEGORY,\n    SEARCH_PATIENT,\n    APPOINTMENT_PERPRACTICE_API,\n    APPOINTMENT_SCHEDULE\n} from \"../../constants/api\";\n\nimport {displayMessage, getAPI, interpolate, makeFileURL, postAPI, putAPI} from \"../../utils/common\";\nimport {APPOINTMENT_STATUS, DAY_KEYS} from \"../../constants/hardData\";\nimport {hideMobile} from \"../../utils/permissionUtils\";\n\nconst {TextArea} = Input;\nconst FormItem = Form.Item;\nconst RadioGroup = Radio.Group;\nconst CheckboxGroup = Checkbox.Group;\nconst {Meta} = Card;\nexport default class CreateAppointmentForm extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            redirect: false,\n            practice_doctors: [],\n            appointmentCategories: null,\n            procedure_category: null,\n            treatmentNotes: null,\n            practice_staff: [],\n            appointment: null,\n            loading: false,\n            patientListData: [],\n            // patientDetails: null,\n            appointmentDetail: null,\n            saving: false,\n            doctorBlock: false,\n            doctorOutsideAvailableTiming: false,\n            practiceBlock: false,\n            practiceOutsideAvailableTiming: false,\n            timeToCheckBlock: {\n                schedule_at: moment(),\n                slot: 10,\n            },\n            procedureObjectsById: {},\n            // appointmentList:[],\n            startTime:this.props.startTime,\n\n        }\n        this.changeRedirect = this.changeRedirect.bind(this);\n        this.loadDoctors = this.loadDoctors.bind(this);\n        this.loadProcedureCategory = this.loadProcedureCategory.bind(this);\n        this.loadTreatmentNotes = this.loadTreatmentNotes.bind(this);\n        this.searchPatient = this.searchPatient.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n        this.loadAppointment = this.loadAppointment.bind(this);\n        this.loadAppointmentList = this.loadAppointmentList.bind(this);\n\n    }\n\n    componentDidMount() {\n        const that = this;\n        this.loadDoctors();\n        this.loadProcedureCategory();\n        this.loadTreatmentNotes();\n        this.loadAppointmentCategories();\n        this.loadPracticeTiming();\n        this.loadAppointmentList();\n        if (this.props.match.params.appointmentid) {\n            that.loadAppointment();\n        } else if (this.props.history && this.props.history.location.search) {\n            const pairValueArray = this.props.history.location.search.substr(1).split('&');\n            if (pairValueArray.length) {\n                pairValueArray.forEach(function (item) {\n                    const keyValue = item.split('=');\n                    if (keyValue && keyValue.length == 2) {\n                        if (keyValue[0] == 'patient' && keyValue[1]) {\n                            that.handlePatientSelect(keyValue[1])\n                        }\n                    }\n                });\n            }\n        }\n    }\n\n    loadPracticeTiming = () => {\n        const that = this;\n        const successFn = function (data) {\n            let dataObject = {};\n            if (data.length)\n                dataObject = data[0];\n            const timing = {};\n            DAY_KEYS.forEach(function (dayKey) {\n                timing[dayKey] = {};\n                if (dataObject.visting_hour_same_week) {\n                    timing[dayKey].startTime = moment(dataObject.first_start_time, 'HH:mm:ss');\n                    timing[dayKey].endTime = moment(dataObject.second_end_time, 'HH:mm:ss');\n                    if (dataObject.is_two_sessions) {\n                        timing[dayKey].lunch = true;\n                        timing[dayKey].lunchStartTime = moment(dataObject.first_end_time, 'HH:mm:ss');\n                        timing[dayKey].lunchEndTime = moment(dataObject.second_start_time, 'HH:mm:ss');\n                    } else {\n                        timing[dayKey].lunch = false\n                    }\n                } else if (dataObject[dayKey]) {\n                    timing[dayKey].startTime = moment(dataObject[`first_start_time_${dayKey}`], 'HH:mm:ss');\n                    timing[dayKey].endTime = moment(dataObject[`second_end_time_${dayKey}`], 'HH:mm:ss');\n                    if (dataObject[`is_two_sessions_${dayKey}`]) {\n                        timing[dayKey].lunch = true;\n                        timing[dayKey].lunchStartTime = moment(dataObject[`first_end_time_${dayKey}`], 'HH:mm:ss');\n                        timing[dayKey].lunchEndTime = moment(dataObject[`second_start_time_${dayKey}`], 'HH:mm:ss');\n                    } else {\n                        timing[dayKey].lunch = false\n                    }\n                } else {\n                    timing[dayKey] = null\n                }\n            });\n            that.setState({\n                calendarTimings: {...timing},\n            }, function () {\n                that.findOutsidePracticeTiming();\n            });\n        };\n        const errorFn = function () {\n            that.setState({\n                calendarTimings: {}\n            })\n        };\n        getAPI(interpolate(CALENDER_SETTINGS, [this.props.active_practiceId]), successFn, errorFn);\n    }\n\n    loadDoctorsTiming = () => {\n        const that = this;\n        const successFn = function (data) {\n            let dataObject = {};\n            if (data.length)\n                dataObject = data[0];\n            const timing = {};\n            DAY_KEYS.forEach(function (dayKey) {\n                timing[dayKey] = {};\n                if (dataObject.visting_hour_same_week) {\n                    timing[dayKey].startTime = moment(dataObject.first_start_time, 'HH:mm:ss');\n                    timing[dayKey].endTime = moment(dataObject.second_end_time, 'HH:mm:ss');\n                    if (dataObject.is_two_sessions) {\n                        timing[dayKey].lunch = true;\n                        timing[dayKey].lunchStartTime = moment(dataObject.first_end_time, 'HH:mm:ss');\n                        timing[dayKey].lunchEndTime = moment(dataObject.second_start_time, 'HH:mm:ss');\n                    } else {\n                        timing[dayKey].lunch = false\n                    }\n                } else if (dataObject[dayKey]) {\n                    timing[dayKey].startTime = moment(dataObject[`first_start_time_${dayKey}`], 'HH:mm:ss');\n                    timing[dayKey].endTime = moment(dataObject[`second_end_time_${dayKey}`], 'HH:mm:ss');\n                    if (dataObject[`is_two_sessions_${dayKey}`]) {\n                        timing[dayKey].lunch = true;\n                        timing[dayKey].lunchStartTime = moment(dataObject[`first_end_time_${dayKey}`], 'HH:mm:ss');\n                        timing[dayKey].lunchEndTime = moment(dataObject[`second_start_time_${dayKey}`], 'HH:mm:ss');\n                    } else {\n                        timing[dayKey].lunch = false\n                    }\n                } else {\n                    timing[dayKey] = null\n                }\n            });\n            that.setState({\n                doctorTimings: {...timing},\n            }, function () {\n                that.findOutsideDoctorTiming();\n            });\n        }\n        const errorFn = function () {\n\n        };\n        if (that.state.timeToCheckBlock.doctor)\n            getAPI(interpolate(DOCTOR_VISIT_TIMING_API, [this.props.active_practiceId]), successFn, errorFn, {\n                doctor: that.state.timeToCheckBlock.doctor\n            });\n    }\n\n    setBlockedTiming = (type, value) => {\n        const that = this;\n        if (type) {\n            this.setState(function (prevState) {\n                return {\n                    timeToCheckBlock: {...prevState.timeToCheckBlock, [type]: value}\n                }\n            }, function () {\n                that.loadAppointmentList();\n                that.findBlockedTiming();\n                that.findOutsidePracticeTiming();\n                if (type == 'doctor') {\n                    that.loadDoctorsTiming();\n                } else {\n                    that.findOutsideDoctorTiming();\n                }\n\n            })\n        }\n    }\n\n    findBlockedTiming = () => {\n        const that = this;\n        const successFn = function (data) {\n            data.forEach(function (blockRow) {\n                if (blockRow.doctor == null) {\n                    that.setState({\n                        practiceBlock: true\n                    });\n                } else if (blockRow.doctor == that.props.timeToCheckBlock.doctor) {\n                    that.setState({\n                        doctorBlock: true\n                    });\n                }\n            });\n        }\n        const errorFn = function () {\n\n        }\n        getAPI(BLOCK_CALENDAR, successFn, errorFn, {\n            practice: this.props.active_practiceId,\n            cal_fdate: moment(that.state.timeToCheckBlock.schedule_at).format(),\n            cal_tdate: moment(that.state.timeToCheckBlock.schedule_at).add(that.state.timeToCheckBlock.slot, 'minutes').format()\n        })\n    }\n\n    findOutsidePracticeTiming = () => {\n        const that = this;\n        let flag = true;\n        if (that.state.timeToCheckBlock.schedule_at && that.state.timeToCheckBlock.slot) {\n            const {schedule_at} = that.state.timeToCheckBlock;\n            const {calendarTimings} = that.state;\n            const dayValue = moment(schedule_at).isValid() ? moment(schedule_at).format('dddd').toLowerCase() : null;\n            /**\n             * Checking for Calendar Clinic Timings\n             * */\n            if (calendarTimings && dayValue && calendarTimings[dayValue]) {\n                const daysTimings = calendarTimings[dayValue];\n                if (daysTimings.lunch) {\n                    if (\n                        (moment(schedule_at, 'HH:mm:ss').format('HH:mm:ss') <= daysTimings.startTime.format('HH:mm:ss')\n                            || moment(schedule_at, 'HH:mm:ss').format('HH:mm:ss') > daysTimings.endTime.format('HH:mm:ss')\n                        ) || (\n                            moment(schedule_at, 'HH:mm:ss').format('HH:mm:ss') < daysTimings.lunchEndTime.format('HH:mm:ss')\n                            && moment(schedule_at, 'HH:mm:ss').format('HH:mm:ss') >= daysTimings.lunchStartTime.format('HH:mm:ss')\n                        )\n                    ) {\n                        flag = false;\n                    }\n                } else if (moment(schedule_at, 'HH:mm:ss').format('HH:mm:ss') <= daysTimings.startTime.format('HH:mm:ss') || moment(schedule_at, 'HH:mm:ss').format('HH:mm:ss') > daysTimings.endTime.format('HH:mm:ss')) {\n                        flag = false;\n                    }\n            } else if (dayValue && !calendarTimings[dayValue]) {\n                /**\n                 * If the practice isnot opening for the day\n                 * */\n                flag = false;\n            }\n\n        }\n        that.setState({\n            practiceOutsideAvailableTiming: !flag\n        })\n    }\n\n    findOutsideDoctorTiming = () => {\n        const that = this;\n        let flag = true;\n        if (that.state.timeToCheckBlock.schedule_at && that.state.timeToCheckBlock.slot) {\n            const {schedule_at} = that.state.timeToCheckBlock;\n            const calendarTimings = that.state.doctorTimings;\n            const dayValue = moment(schedule_at).isValid() ? moment(schedule_at).format('dddd').toLowerCase() : null;\n            /**\n             * Checking for Calendar Clinic Timings\n             * */\n            if (calendarTimings && dayValue && calendarTimings[dayValue]) {\n                const daysTimings = calendarTimings[dayValue];\n                if (daysTimings.lunch) {\n                    if (\n                        (moment(schedule_at, 'HH:mm:ss').format('HH:mm:ss') <= daysTimings.startTime.format('HH:mm:ss')\n                            || moment(schedule_at, 'HH:mm:ss').format('HH:mm:ss') > daysTimings.endTime.format('HH:mm:ss')\n                        ) || (\n                            moment(schedule_at, 'HH:mm:ss').format('HH:mm:ss') < daysTimings.lunchEndTime.format('HH:mm:ss')\n                            && moment(schedule_at, 'HH:mm:ss').format('HH:mm:ss') >= daysTimings.lunchStartTime.format('HH:mm:ss')\n                        )\n                    ) {\n                        flag = false;\n                    }\n                } else if (moment(schedule_at, 'HH:mm:ss').format('HH:mm:ss') <= daysTimings.startTime.format('HH:mm:ss') || moment(schedule_at, 'HH:mm:ss').format('HH:mm:ss') > daysTimings.endTime.format('HH:mm:ss')) {\n                        flag = false;\n                    }\n            } else if (dayValue && calendarTimings && !calendarTimings[dayValue]) {\n                /**\n                 * If the practice isnot opening for the day\n                 * */\n                flag = false;\n            }\n        }\n        that.setState({\n            doctorOutsideAvailableTiming: !flag\n        })\n    }\n\n    loadAppointment() {\n        const that = this;\n        this.setState({\n            loading: true,\n        })\n        const successFn = function (data) {\n            that.setState({\n                appointment: data,\n                patientDetails: data.patient,\n                timeToCheckBlock: data,\n                loading: false,\n            }, function () {\n                that.findBlockedTiming();\n                that.findOutsideDoctorTiming();\n                that.loadDoctorsTiming();\n                that.loadAppointmentList();\n            });\n\n        }\n\n        const errorFn = function () {\n            that.setState({\n                loading: false,\n            })\n        }\n        getAPI(interpolate(APPOINTMENT_API, [this.props.match.params.appointmentid]), successFn, errorFn);\n\n    }\n\n    loadDoctors() {\n        const that = this;\n        const successFn = function (data) {\n            const doctor = [];\n            let selectedDoctor = {};\n            data.staff.forEach(function (usersdata) {\n                if (usersdata.role == DOCTORS_ROLE) {\n                    doctor.push(usersdata);\n                    if (that.props.user.id==usersdata.user.id) {\n                        selectedDoctor = usersdata;\n                    }\n\n                }\n            });\n            that.setState(function (prevState) {\n\n\n                return {\n                    selectedDoctor:(doctor.length && !selectedDoctor.id ? doctor[0].user.id : selectedDoctor.user.id),\n                    practice_doctors: doctor,\n                    timeToCheckBlock: {...prevState.timeToCheckBlock, doctor: (doctor.length && !selectedDoctor.id ? doctor[0].user.id: selectedDoctor.user.id)}\n                }\n            }, function () {\n                that.findBlockedTiming();\n                that.loadDoctorsTiming();\n            });\n        }\n        const errorFn = function () {\n        };\n        getAPI(interpolate(PRACTICESTAFF, [this.props.active_practiceId]), successFn, errorFn);\n    }\n\n    loadProcedureCategory() {\n        const that = this;\n        const successFn = function (data) {\n            const obj = {};\n            data.forEach(function (item) {\n                obj[item.id] = item\n            })\n            that.setState({\n                procedure_category: data,\n                procedureObjectsById: {...obj}\n            })\n        }\n        const errorFn = function () {\n\n        }\n        getAPI(interpolate(PROCEDURE_CATEGORY, [this.props.active_practiceId]), successFn, errorFn,{pagination:false})\n    }\n\n    loadTreatmentNotes() {\n        const that = this;\n        const successFn = function (data) {\n            that.setState({\n                treatmentNotes: data\n            })\n\n        }\n        const errorFn = function () {\n\n        }\n        getAPI(interpolate(EMR_TREATMENTNOTES, [this.props.active_practiceId]), successFn, errorFn)\n    }\n\n    loadAppointmentCategories() {\n        const that = this;\n        const successFn = function (data) {\n            that.setState({\n                appointmentCategories: data\n            })\n\n        }\n        const errorFn = function () {\n\n        }\n        getAPI(interpolate(APPOINTMENT_CATEGORIES, [this.props.active_practiceId]), successFn, errorFn)\n    }\n\n    changeRedirect() {\n        const redirectVar = this.state.redirect;\n        this.setState({\n            redirect: !redirectVar,\n        });\n    }\n\n    searchPatient(value) {\n        const that=this;\n        this.setState({\n            searchPatientString: value\n        });\n        const successFn = function (data) {\n            that.setState(function (prevState) {\n                if(prevState.searchPatientString == value)\n                    if (data.current > 1) {\n                        return {\n                            patientListData: [...prevState.patientListData, ...data.results],\n\n                        }\n                    }else {\n                        return {\n                            patientListData: [...data.results],\n\n                        }\n                    }\n            })\n        };\n        const errorFn = function (data) {\n            that.setState({\n                searchPatientString:null,\n            })\n        };\n        if (value){\n            getAPI(interpolate(SEARCH_PATIENT, [value]), successFn, errorFn);\n        }\n\n    };\n\n    handleSubmit = (e) => {\n        const that = this;\n        const patient = {};\n        e.preventDefault();\n        this.props.form.validateFields((err, values) => {\n            if (!err) {\n                that.setState({\n                    saving: true\n                });\n                const formData = {...values};\n                formData.patient = {user: {}};\n                if (!this.state.patientDetails) {\n                    formData.patient.user.first_name = formData.patient_name;\n                    formData.patient.user.email = formData.patient_email;\n                    formData.patient.user.mobile = formData.patient_mobile;\n                    formData.patient_email = undefined;\n                    formData.patient_name = undefined;\n                    formData.patient_mobile = undefined;\n                } else {\n                    formData.patient = this.state.patientDetails;\n                }\n                formData.practice = that.props.active_practiceId;\n                // formData.treatment_plans = []\n                // values.procedure.forEach(function (id) {\n                //     let item = that.state.procedureObjectsById[id];\n                //     formData.treatment_plans.push({\n                //         \"procedure\": item.id,\n                //         \"cost\": item.cost,\n                //         \"quantity\": 1,\n                //         \"margin\": item.margin,\n                //         \"default_notes\": item.default_notes,\n                //         \"is_active\": true,\n                //         \"is_completed\": false,\n                //         \"discount\": item.discount,\n                //         \"discount_type\": \"%\",\n                //     })\n                // });\n                // delete formData.procedure;\n                // console.log(formData);\n                const successFn = function (data) {\n                    that.setState({\n                        saving: false\n                    });\n                    if (that.props.history) {\n                        that.props.history.goBack();\n                        that.props.history.replace('/patients/appointments');\n                    }\n\n                    if (that.props.loadData)\n                        that.props.loadData();\n                    if (data) {\n                        // console.log(data)\n                        displayMessage(SUCCESS_MSG_TYPE, \"Appointment Created Successfully\");\n                    }\n                };\n                const errorFn = function () {\n                    that.setState({\n                        saving: false\n                    });\n                };\n                if (this.state.appointment) {\n                    putAPI(interpolate(APPOINTMENT_API, [this.state.appointment.id]), formData, successFn, errorFn);\n                } else {\n                    postAPI(ALL_APPOINTMENT_API, formData, successFn, errorFn);\n                }\n            }\n        });\n\n    }\n\n    handlePatientSelect = (event) => {\n        if (event) {\n            const that = this;\n            const successFn = function (data) {\n                that.setState({\n                    patientDetails: data\n                });\n            };\n            const errorFn = function () {\n            };\n            getAPI(interpolate(PATIENT_PROFILE, [event]), successFn, errorFn);\n        }\n    }\n    // handleChange = (event) => {\n    //     this.setState({})\n\n    //     // this.setState({ value: event.target.value });\n    // };\n    handleClick = (e) => {\n\n        this.setState({\n            patientDetails: null\n        })\n\n    };\n\n    loadAppointmentList(){\n        const that=this;\n        const successFn = function(data){\n            that.setState({\n                appointmentList:data,\n            })\n        }\n        const errorFn =function(data){\n        }\n        const apiParams={\n            start_time:moment(this.state.timeToCheckBlock.schedule_at).format(),\n            end_time:moment(this.state.timeToCheckBlock.schedule_at).add(this.state.timeToCheckBlock.slot, 'minutes').format(),\n            doctor:this.state.timeToCheckBlock.doctor,\n        }\n        getAPI(interpolate(APPOINTMENT_SCHEDULE,[this.props.active_practiceId]),successFn,errorFn,apiParams);\n    }\n\n    render() {\n        const that = this;\n        const formItemLayout = (this.props.formLayout ? this.props.formLayout : {\n            labelCol: {span: 6},\n            wrapperCol: {span: 14},\n        });\n        const formPatients = (this.props.formLayout ? this.props.formLayout : {\n            wrapperCol: {offset: 6, span: 14},\n        });\n        const {getFieldDecorator} = this.props.form;\n\n        // let doctorArray=this.state.practice_doctors;\n        // let loginUser =that.props.user;\n        // const doctorId={};\n        // let flag=true;\n        // doctorArray.forEach(function (items) {\n        //    if (items.user.id == that.props.user.id){\n        //        doctorId.id=that.props.user.id;\n        //        flag=false;\n        //        return false;\n        //    }\n        // },function () {\n        //     doctorId.id=doctorArray[0].user.id;\n        // });\n\n        const treatmentNotesOption = [];\n        if (this.state.treatmentNotes) {\n            this.state.treatmentNotes.forEach(function (drug) {\n                treatmentNotesOption.push({label: drug.name, value: drug.id});\n            })\n        }\n        const categoryOptions = [];\n        if (this.state.appointmentCategories) {\n            this.state.appointmentCategories.forEach(function (category) {\n                categoryOptions.push({label: category.name, value: category.id});\n            })\n        }\n        let appointmentTime = this.state.appointment ? this.state.appointment.schedule_at : this.props.startTime;\n        if (!appointmentTime) {\n            appointmentTime = new moment(new Date()).format();\n        }\n        const fields = [];\n\n        return (\n<Card>\n            <Spin spinning={this.state.saving}>\n                <Form onSubmit={this.handleSubmit}>\n                    {this.props.title ? <h2>{this.props.title}</h2> : null}\n\n                    <FormItem key=\"schedule_at\" label=\"Appointment Schedule\" {...formItemLayout}>\n                        {getFieldDecorator(\"schedule_at\",\n                            {\n                                initialValue: appointmentTime ? moment(appointmentTime) : moment(this.props.startTime),\n                                rules: [{required: true, message: REQUIRED_FIELD_MESSAGE}],\n                            })(\n                            <DatePicker\n                              showTime={{use12Hours: true}}\n                              format=\"YYYY/MM/DD hh:mm a\"\n                              allowClear={false}\n                              onChange={(value) => this.setBlockedTiming(\"schedule_at\", value)}\n                            />\n                        )}\n                        {this.state.practiceOutsideAvailableTiming ? (\n                            <Alert\n                              message=\"Selected time is outside available clinic time!!\"\n                              type=\"warning\"\n                              showIcon\n                            />\n                          ) : null}\n                        {this.state.practiceBlock ? (\n                            <Alert\n                              message=\"Selected time is blocked in this clinic !!\"\n                              type=\"warning\"\n                              showIcon\n                            />\n                          ) : null}\n                    </FormItem>\n                    <FormItem\n                      key=\"slot\"\n                      {...formItemLayout}\n                      label=\"Time Slot\"\n                    >\n                        {getFieldDecorator(\"slot\", {\n                            initialValue: this.state.appointment ? this.state.appointment.slot : 10,\n                            rules: [{required: true, message: REQUIRED_FIELD_MESSAGE}],\n                        })(\n                            <InputNumber min={1} onChange={(value) => this.setBlockedTiming(\"slot\", value)} />\n                        )}\n                        <span className=\"ant-form-text\">mins\n                        <Row style={{float:\"right\"}}>\n                            <Col span={24}>\n                                {this.state.appointmentList && this.state.appointmentList.length>0 ? (\n                                    <div span={5} style={{float:\"right\"}}>\n                                        <ul style={{listStyle:\"none\",display:\"inline-flex\",paddingLeft:'15px',paddingRight: \"10px\"}}>\n                                        {that.state.appointmentList.map((item) =>(\n<li style={{border: '1px solid #bbb', marginLeft: \"13px\",padding:\" 0.01em 14px\"}}><span style={{width: 'calc(100% - 60px)'}}><b>{moment(item.schedule_at).format(\"LT\")}</b>&nbsp;{item.patient.user.first_name}</span>\n                                        &nbsp;<b>with</b> &nbsp;{item.doctor_data.user.first_name}\n</li>\n))}\n\n                                        </ul>\n                                    </div>\n                                  )\n\n                                :null}\n                            </Col>\n                        </Row>\n\n                        </span>\n                        {this.state.appointmentList && this.state.appointmentList.length>0 ?(\n<>\n\n                                <Alert\n                                  message=\"Selected time slot have assigned someone else !! please select another slot.\"\n                                  type=\"warning\"\n                                  showIcon\n                                />\n                                {/* <div style={{backgroundColor:\"#fffbe6\"}}>\n                                    <p style={{color:red ,padding:\"7px\"}}><Icon type=\"exclamation-circle\" theme=\"twoTone\" twoToneColor=\"#faad14\" /> </p>\n                                </div> */}\n\n</>\n)\n                        :null}\n                    </FormItem>\n\n\n                    {that.state.patientDetails ? (\n                        <FormItem key=\"id\" value={this.state.patientDetails.id} {...formPatients}>\n                            <Card bordered={false} style={{background: '#ECECEC'}}>\n                                <Meta\n                                  avatar={(this.state.patientDetails.image ? <Avatar src={makeFileURL(this.state.patientDetails.image)} /> : (\n                                        <Avatar style={{backgroundColor: '#87d068'}}>\n                                            {this.state.patientDetails.user.first_name ? this.state.patientDetails.user.first_name.charAt(0) :\n                                                <Icon type=\"user\" />}\n                                        </Avatar>\n                                      ))}\n\n                                  title={this.state.patientDetails.user.first_name}\n                                  description={(\n                                        <span>{that.props.activePracticePermissions.PatientPhoneNumber ? this.state.patientDetails.user.mobile : hideMobile(this.state.patientDetails.user.mobile)}<br />\n                                    <Button type=\"primary\" style={{float: 'right'}} onClick={this.handleClick}>Add New\n                                    Patient\n                                    </Button>\n                                        </span>\n                                      )}\n                                />\n\n\n                            </Card>\n                        </FormItem>\n                      )\n                        : (\n<div>\n                            <FormItem key=\"patient_name\" label=\"Patient Name\" {...formItemLayout}>\n                                {getFieldDecorator(\"patient_name\", {\n                                    initialValue: this.state.appointment ? this.state.appointment.patient.user.first_name : null,\n                                    rules: [{required: true, message: REQUIRED_FIELD_MESSAGE}],\n                                })(\n                                    <AutoComplete\n                                      placeholder=\"Patient Name\"\n                                      showSearch\n                                      onSearch={this.searchPatient}\n                                      defaultActiveFirstOption={false}\n                                      showArrow={false}\n                                      filterOption={false}\n                                      onSelect={this.handlePatientSelect}\n                                    >\n                                        {this.state.patientListData.map((option) => (\n<AutoComplete.Option\n  value={option.id.toString()}\n>\n                                            <List.Item style={{padding: 0}}>\n                                                <List.Item.Meta\n                                                  avatar={(option.image ? <Avatar src={makeFileURL(option.image)} /> : (\n                                                        <Avatar style={{backgroundColor: '#87d068'}}>\n                                                            {option.user.first_name ? option.user.first_name.charAt(0) :\n                                                                <Icon type=\"user\" />}\n                                                        </Avatar>\n                                                      ))}\n                                                  title={`${option.user.first_name  } (ID:${  option.custom_id?option.custom_id:option.user.id  })`}\n                                                  description={that.props.activePracticePermissions.PatientPhoneNumber ? option.user.mobile : hideMobile(option.user.mobile)}\n                                                />\n\n                                            </List.Item>\n</AutoComplete.Option>\n))}\n                                    </AutoComplete>\n                                )}\n                            </FormItem>\n                            <FormItem key=\"patient_mobile\" label=\"Mobile Number\" {...formItemLayout}>\n                                {getFieldDecorator(\"patient_mobile\", {\n                                    initialValue: this.state.appointment ? this.state.appointment.patient.user.mobile : null,\n                                    rules: [{required: true, message: REQUIRED_FIELD_MESSAGE}],\n                                })(\n                                    <Input placeholder=\"Mobile Number\" />\n                                )}\n                            </FormItem>\n                            <FormItem key=\"patient_email\" label=\"Email Address\" {...formItemLayout}>\n                                {getFieldDecorator(\"patient_email\", {\n                                    initialValue: this.state.appointment ? this.state.appointment.patient.user.email : null,\n                                    rules: [{type: 'email', message: 'The input is not valid E-mail!'}],\n                                })(\n                                    <Input placeholder=\"Email Address\" />\n                                )}\n                            </FormItem>\n\n</div>\n)}\n\n                    <FormItem key=\"doctor\" {...formItemLayout} label=\"Doctor\">\n                        {getFieldDecorator(\"doctor\", {initialValue: this.state.appointment ? this.state.appointment.doctor:this.state.selectedDoctor}, {\n                            rules: [{required: true, message: REQUIRED_FIELD_MESSAGE}],\n                        })(\n                            <Select\n                              placeholder=\"Doctor\"\n                              onChange={(value) => this.setBlockedTiming(\"doctor\", value)}\n                            >\n                                {this.state.practice_doctors.map((option) => (\n<Select.Option\n  value={option.id}\n>{(`${option.user.first_name  }(${  option.user.email  })`)}\n</Select.Option>\n))}\n                            </Select>\n                        )}\n                        {this.state.doctorBlock ? (\n                            <Alert\n                              message=\"Selected time is blocked for selected doctor in this clinic!!\"\n                              type=\"warning\"\n                              showIcon\n                            />\n                          ) : null}\n                        {this.state.doctorOutsideAvailableTiming ? (\n                            <Alert\n                              message=\"Selected time is out of doctor's visit time in this clinic!!\"\n                              type=\"warning\"\n                              showIcon\n                            />\n                          ) : null}\n                        {this.state.appointmentList && this.state.appointmentList.length>0 ?(\n<>\n                            <Alert\n                              message=\"Selected time doctor's busy on other patients in  this clinic!!\"\n                              type=\"warning\"\n                              showIcon\n                            />\n</>\n):null}\n                    </FormItem>\n                    <FormItem key=\"category\" {...formItemLayout} label=\"Category\">\n                        {getFieldDecorator(\"category\", {initialValue: this.state.appointment ? this.state.appointment.category : null}, {\n                            rules: [{required: true, message: REQUIRED_FIELD_MESSAGE}],\n                        })(\n                            <Select placeholder=\"Category\">\n                                {categoryOptions.map((option) => (\n<Select.Option\n  value={option.value}\n>{option.label}\n</Select.Option>\n))}\n                            </Select>\n                        )}\n                    </FormItem>\n                    {/* <FormItem key=\"procedure\" {...formItemLayout} label=\"Procedures Planned\">\n                        {getFieldDecorator(\"procedure\", {initialValue: this.state.appointment ? this.state.appointment.procedure_data.treatment_plans.id :null}, {\n                            rules: [{required: true, message: REQUIRED_FIELD_MESSAGE}],\n                        })(\n                            <Select placeholder=\"Procedures Planned\" mode={\"multiple\"}>\n                                {this.state.procedure_category && this.state.procedure_category.map((drug) =>\n                                    <Select.Option\n                                        value={drug.id}>{drug.name}</Select.Option>\n                                )}\n                            </Select>\n                        )}\n                    </FormItem> */}\n                    {this.state.appointment ? (\n                        <FormItem key=\"status\" {...formItemLayout} label=\"Status\">\n                            {getFieldDecorator(\"status\", {initialValue: this.state.appointment.status})\n                            (\n                                <Select placeholder=\"Status\">\n                                    {APPOINTMENT_STATUS.map((option) => (\n<Select.Option\n  value={option.value}\n>{option.label}\n</Select.Option>\n))}\n                                </Select>\n                            )}\n                        </FormItem>\n                      ) : null}\n\n\n                    <FormItem key=\"notes\" {...formItemLayout} label=\"Notes\">\n                        {getFieldDecorator(\"notes\", {initialValue: this.state.appointment ? this.state.appointment.notes : null}, {\n                            rules: [{required: true, message: REQUIRED_FIELD_MESSAGE}],\n                        })(\n                            <Input placeholder=\"Notes\" />\n                        )}\n                    </FormItem>\n                    <FormItem {...formItemLayout}>\n                        <Button loading={that.state.saving} type=\"primary\" htmlType=\"submit\" style={{margin: 5}}>\n                            Submit\n                        </Button>\n                        {that.props.history ? (\n                            <Button style={{margin: 5}} onClick={() => that.props.history.goBack()}>\n                                Cancel\n                            </Button>\n                          ) : null}\n                    </FormItem>\n                </Form>\n            </Spin>\n</Card>\n)\n    }\n}\n","import React from \"react\";\nimport {Route} from \"react-router\";\nimport {Button, Card, Form, Icon, Row} from \"antd\";\nimport {Redirect} from 'react-router-dom'\nimport moment from 'moment';\nimport DynamicFieldsForm from \"../common/DynamicFieldsForm\";\nimport {\n    CHECKBOX_FIELD,\n    SINGLE_CHECKBOX_FIELD,\n    DATE_PICKER,\n    NUMBER_FIELD,\n    SUCCESS_MSG_TYPE,\n    INPUT_FIELD,\n    RADIO_FIELD,\n    SELECT_FIELD,\n    DOCTORS_ROLE\n} from \"../../constants/dataKeys\";\nimport {\n    PATIENTS_LIST,\n    ALL_APPOINTMENT_API,\n    APPOINTMENT_CATEGORIES,\n    PRACTICESTAFF,\n    PROCEDURE_CATEGORY, APPOINTMENT_API, SINGLE_PRACTICE_STAFF_API, SEARCH_PATIENT\n} from \"../../constants/api\";\nimport {getAPI, interpolate, displayMessage} from \"../../utils/common\";\nimport CreateAppointmentForm from \"./CreateAppointmentForm\";\n\n\nclass CreateAppointment extends React.Component {\n    constructor(props){\n        super(props);\n        this.state={\n\n        }\n    }\n\n    render() {\n\n        const formProp = {\n            successFn (data) {\n                displayMessage(SUCCESS_MSG_TYPE, \"success\")\n\n            },\n            errorFn () {\n\n            },\n            onFieldsDataChange (data) {\n                // console.log(data);\n            },\n            action: ALL_APPOINTMENT_API,\n            method: \"post\",\n        };\n        const defaultValues = [{\"key\": \"practice\", \"value\": this.props.active_practiceId}];\n        const that = this;\n        let editformProp;\n        // if (this.state.appointment) {\n        //     editformProp = {\n        //         successFn: function (data) {\n        //             displayMessage(SUCCESS_MSG_TYPE, \"success\");\n        //             console.log(data);\n        //         },\n        //         errorFn: function () {\n        //\n        //         },\n        //         onFieldsDataChange: function (data) {\n        //             that.setState(function (prevState) {\n        //                 return {appointment: {...prevState.appointment, ...data}}\n        //             });\n        //         },\n        //         action: interpolate(APPOINTMENT_API, [this.state.appointment.id]),\n        //         method: \"put\",\n        //     }\n        //     defaultValues = [{\"key\": \"practice\", \"value\": this.state.appointment.practice}];\n        //\n        // }\n        const TestFormLayout = Form.create()(CreateAppointmentForm);\n        return (\n<Row>\n            <Route\n              exact\n              path='/calendar/:appointmentid/edit-appointment'\n              render={(route) => (this.props.match.params.appointmentid ? (\n                       <TestFormLayout\n                         {...route}\n                         {...this.props}\n                         defaultValues={defaultValues}\n                         title=\"Edit Appointment\"\n                         changeRedirect={this.changeRedirect}\n                       />\n                     ) :\n                       <Redirect to=\"/patients/appointments/\" />)}\n            />\n\n            <Route\n              exact\n              path='/calendar/create-appointment'\n              render={(route) => (\n<TestFormLayout\n  {...this.props}\n  defaultValues={defaultValues}\n  changeRedirect={this.changeRedirect}\n  {...route}\n  title=\"ADD Appointment \"\n/>\n)}\n            />\n\n</Row>\n)\n    }\n\n\n}\n\nexport default CreateAppointment;\n"],"sourceRoot":""}