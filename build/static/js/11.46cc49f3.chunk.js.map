{"version":3,"sources":["../node_modules/antd/es/switch/style/index.js","../node_modules/antd/es/switch/index.js","app/components/patients/wallet-ledger/PatientWalletLedger.js","app/components/settings/options/practice-detail/PracticeDetails.js","app/components/settings/options/practice-staff/DoctorTiming.js","app/components/settings/options/practice-staff/PracticeStaff.js","app/components/settings/options/practice-staff/AddEditDoctor.js","app/components/settings/options/practice-staff/AddEditStaff.js","app/components/settings/options/practice-detail/AddPracticeDetails.js","app/components/settings/options/communication-settings/WishSMS.js","app/components/settings/options/communication-settings/AppointmentSMS.js","app/components/settings/options/communication-settings/Emails.js","app/components/settings/options/communication-settings/CommunicationSettings.js","app/components/settings/options/procedure-catalog/EditProcedure.js","app/components/settings/options/procedure-catalog/AddProcedure.js","app/components/settings/options/procedure-catalog/AddorEditProcedure.js","app/components/settings/options/procedure-catalog/RecentProcedure.js","app/components/settings/options/billing/PaymentModes.js","app/components/settings/options/billing/TaxCatalog.js","app/components/settings/options/billing/CancelledInvoice.js","app/components/settings/options/billing/BillingSettings.js","app/components/settings/options/emr/TableData.js","app/components/settings/options/emr/VitalSigns.js","app/components/settings/options/emr/EMRSettings.js","app/components/settings/options/practice-detail/EditPracticeDetail.js","app/components/settings/options/prescriptions/AddorEditPrescriptionForm.js","app/components/settings/options/prescriptions/AddPrescription.js","app/components/settings/options/prescriptions/Prescriptions.js","app/components/settings/options/expenses-types/ExpensesTypes.js","app/components/settings/options/medical-history/MedicalHistory.js","app/components/settings/options/calendar/PracticeTimings.js","app/components/settings/options/calendar/AppointmentCategories.js","app/components/settings/options/calendar/CalendarSettings.js","app/components/settings/SettingSider.js","../node_modules/antd/es/collapse/CollapsePanel.js","../node_modules/antd/es/collapse/Collapse.js","../node_modules/antd/es/collapse/index.js","app/components/settings/options/mlm/MLMGenerate.js","app/components/settings/options/mlm/MlmBase.js","app/components/settings/options/printout/PrintSettings.js","app/components/settings/options/printout/Printout.js","app/components/settings/options/integration/IntegrationHome.js","app/components/settings/options/mailPDF/MailPDFSettings.js","app/components/settings/options/bed-packages/AddorEditBedPackages.js","app/components/settings/options/bed-packages/BedPackages.js","app/components/settings/options/roomtypes/RoomTypes.js","app/components/settings/options/loyalty/AddOffer.js","app/components/settings/options/loyalty/Offers.js","app/components/settings/options/loyalty/AddMembership.js","app/components/settings/options/loyalty/Membership.js","app/components/settings/options/loyalty/promo-code/AddOrEdiPromoCode.js","app/components/settings/options/loyalty/promo-code/PromoCode.js","app/components/settings/options/loyalty/LoyaltySettings.js","app/components/settings/options/labs/AddorEditLab.js","app/components/settings/options/labs/LabTest.js","app/components/settings/options/labs/AddorEditLabPanel.js","app/components/settings/options/labs/LabPanel.js","app/components/settings/options/labs/LabTracking.js","app/components/settings/options/medicine-packages/AddorEditMedicinePackages.js","app/components/settings/options/medicine-packages/MedicinePackages.js","app/components/settings/options/disease-list/DiseaseList.js","app/components/settings/options/agent-roles/AgentRoles.js","app/components/settings/options/agents/AddOrEditAgent.js","app/components/settings/options/agents/AgentList.js","app/components/settings/options/zoom-user/AddOrEditZoomUser.js","app/components/settings/options/zoom-user/ZoomUser.js","app/components/settings/SettingsDash.js"],"names":["_typeof","obj","Symbol","iterator","constructor","prototype","_extends","Object","assign","target","i","arguments","length","source","key","hasOwnProperty","call","apply","this","_defineProperty","value","defineProperty","enumerable","configurable","writable","_defineProperties","props","descriptor","_possibleConstructorReturn","self","ReferenceError","_assertThisInitialized","_getPrototypeOf","o","setPrototypeOf","getPrototypeOf","__proto__","_setPrototypeOf","p","Switch","_React$Component","_this","instance","Constructor","TypeError","_classCallCheck","saveSwitch","node","rcSwitch","renderSwitch","_ref","_classNames","getPrefixCls","_this$props","customizePrefixCls","prefixCls","size","loading","_this$props$className","className","disabled","classes","concat","loadingIcon","type","insertExtraNode","ref","protoProps","staticProps","subClass","superClass","create","_inherits","focus","blur","__ANT_SWITCH","propTypes","Text","PatientWalletLedger","loadPatientWallet","that","currentPatient","id","getAPI","interpolate","AGENT_WALLET","data","setState","walletAmount","pendingAmount","loadData","page","successFn","current","ledger","results","nextPage","next","prevState","errorFn","params","start","state","selectedStartDate","startOf","format","end","selectedEndDate","endOf","agents","selectedAgents","join","WALLET_LEDGER","loadSumData","ledgerDetails","WALLET_LEDGER_SUM","changeExpenseFilters","moment","subtract","loadAgents","MY_AGENTS","agent","pagination","columns","title","dataIndex","render","record","user","first_name","custom_id","referer","is_cancelled","delete","toFixed","gutter","style","marginBottom","span","textAlign","width","mode","onChange","map","item","Option","prefix","non_refundable","precision","dataSource","hideReport","hidden","loaderFunction","credit","debit","React","Component","PracticeDetails","Meta","showModal","visible","practice","handleCancel","practiceList","specialisations","deletePractice","bind","admin_practiceData","ALL_PRACTICE","forEach","speciality","console","log","postAPI","PRACTICE_DELETE","refreshClinicData","text","href","onClick","to","onConfirm","okText","cancelText","float","closable","onCancel","footer","icon","shape","position","top","right","paddingBottom","offset","logo","src","makeFileURL","ProfileTables","label","name","tagline","email","contact","website","gstin","specialisation","address","locality","DoctorTiming","DOCTOR_VISIT_TIMING_API","active_practiceId","visting_hour_same_week","openPracticeDays","twoSessions","dataObject","DAY_KEYS","dayKey","timings","displayMessage","WARNING_MSG_TYPE","doctor","doctorId","handleSubmit","e","preventDefault","form","validateFieldsAndScroll","err","values","reqData","first_start_time","first_end_time","second_start_time","second_end_time","history","goBack","SUCCESS_MSG_TYPE","changeVistingHourSameWeek","checked","changeOpenPracticeDays","changePracticeTwoSessions","match","docId","formItemLayout","formLayout","labelCol","wrapperCol","getFieldDecorator","onSubmit","Item","valuePropName","initialValue","rules","message","REQUIRED_FIELD_MESSAGE","margin","is_two_sessions","required","replace","c","toUpperCase","htmlType","Column","TabPane","ColumnGroup","confirm","momentTime","timeStr","getAllPermissions","ALL_PERMISSIONS","allPermissions","practice_permissions","allGlobalPermissions","global_permissions","handleClick","loadDoctorsTiming","doctorList","practice_doctors","timingObject","dataObj","doctorsTiming","changeTab","defaultActiveTab","push","toggleEnableStaffPractice","staff","ENABLE_STAFF_IN_PRACTICE","is_active","admin_StaffData","toggleAllPermissions","permissionsArray","permission","permObject","codename","currentUser","editPermissions","bulkEditLoading","onOk","UPDATE_BULK_PERMISSIONS","permissions","practice_staff","roles","permissionEditModal","location","hash","setPermission","staffRoles","sendPractice","SET_USER_PERMISSION","patchAPI","SET_SPECIFIC_USER_PERMISSION","undefined","USER_PRACTICE_PERMISSIONS","putAPI","SINGLE_PRACTICE_STAFF_API","STAFF_ROLES","PRACTICESTAFF","usersdata","role","DOCTORS_ROLE","all","loggedInUserPractices","keys","doctorColumns","is_superuser","color","defaultChecked","last_login","fromNow","in_practice","deleteStaff","staffColumns","notification_doctor_columns","confirmation_sms","schedule_sms","confirmation_email","online_appointment_sms","notification_staff_columns","path","route","defaultActiveKey","tab","marginRight","CustomizedTable","visitObj","visitTime","spinning","reduce","a","b","display","AddEditDoctor","redirect","editStaff","changeRedirect","loadEditPracticeStaff","doctorid","redirectVar","editformProp","fields","placeholder","INPUT_FIELD","mobile","EMAIL_FIELD","registration_number","calendar_colour","COLOR_PICKER","SINGLE_CHECKBOX_FIELD","formProp","action","ALL_PRACTICE_STAFF","method","defaultValues","TestFormLayout","DynamicFieldsForm","exact","AddEditStaff","staffid","SELECT_FIELD","options","ROLES","AddPracticeDetails","countries","SMS_LANGUAGE_CONFIG_PARAM","EXTRA_DATA","country","loadConfigParameters","specialisationsOptions","SINGLE_IMAGE_UPLOAD_FIELD","allowWebcam","activePracticeData","language","WishSMS","loadWishSMS","COMMUNICATONS_API","wishsmsData","birthday_wish_sms","extra","follow","birthday_wish_text","minRows","SMS_FIELD","APPOINTMENT_CONFIRMATION_SMS_TAG_OPTIONS","anniversary_wish_sms","anniversary_wish_text","online_appointment_text","AppointmentSMS","handleChangeLanguage","contact_number","sms_clinic_name","appointment_confirmation_sms","appointment_confirmation_text","appointment_cancellation_sms","appointment_cancellation_text","appointment_reminder_sms","appointment_reminder_text","send_on_day_of_appointment","send_on_day_of_appointment_time","isValid","TIME_PICKER","follow_up_reminder_sms","follow_up_reminder_sms_text","send_follow_up_reminder_time","payment_sms","payment_sms_text","promo_code_text","LABEL_FIELD","PROMO_CODE_SMS_TAG_OPTIONS","lab_order_confirmation_sms","lab_order_confirmation_text","lab_order_due_on_sms","lab_order_result_sms","lab_order_reminder_sms","defaultValue","sms_language","option","Emails","EMAIL_COMMUNICATONS_API","email_clinic_name","appointment_confirmation_email","appointment_confirmation_email_text","MAIL_TEMPLATE_FIELD","DIVIDER_FIELD","appointment_cancellation_email","appointment_cancellation_email_text","appointment_reminder_email","send_before_day_of_appointment","followup_reminder_email","appointment_reminder_email_text","birthday_wish_email","birthday_wish_email_text","lab_order_confirmation_email","lab_order_confirmation_email_text","lab_order_due_date_email","lab_order_due_date_email_text","lab_order_result_email","alab_order_result_email_text","anniversary_wish_email","anniversary_wish_email_text","CommunicationSettings","AddorEditProcedure","changeNetPrice","getFieldsValue","setFields","setTimeout","cost_with_tax","totalTaxAmount","taxes","taxid","taxObj","tax_value","retailPrice","retail_price","validateFields","cost","editingProcedureData","PROCEDURE_CATEGORY","procedure_category","productMargin","loadTaxes","loadProcedures","loadProductMargin","search","pairValueArray","substr","split","urlInitialValue","setFieldsValue","keyValue","isNaN","toString","indexOf","parseInt","parseFloat","PRODUCT_MARGIN","TAXES","Group","tax","under","default_notes","RecentProcedure","changeSearchValue","searchString","url","editProcedure","deleteObject","activePracticePermissions","SettingsProcedureCatalog","allowAllPermissions","PermissionDenied","InfiniteFeedLoaderButton","PaymentModes","modes","PAYMENT_MODES","editingId","editingmode","editingType","payment_type","editingFee","fee","editPayment","PAYMENT_TYPES","NUMBER_FIELD","min","editfields","editFormDefaultValues","TaxCatalog","editingName","editingValue","max","CancelledInvoice","practiceDetail","PRACTICE","hide_cancelled_invoice","hide_cancelled_return","hide_cancelled_payment","BillingSettings","TableData","editFunction","VitalSigns","vitalSign","loadVitalSign","EMR_VITAL_SIGNS","temperature_unit","DEFAULT_TEMPERATURE_IN","Temp_in","temperature_method","DEFAULT_TEMPERATURE_METHOD","TempMethod","blood_pressure_method","DEFAULT_BP_METHOD","BPMETHOD","EMRSettings","EMR_COMPLAINTS","EMR_OBSERVATIONS","EMR_DIAGNOSES","EMR_INVESTIGATIONS","EMR_TREATMENTNOTES","EMR_MEDICATION","EMR_FILETAGS","EditPracticeDetail","practiceId","City","pincode","invoice_prefix","payment_prefix","return_prefix","AddorEditPrescriptionForm","setFormParams","maintain_inventory","item_type","DRUG","editPrescreption","INVENTORY_ITEM_API","drugTypeList","drugUnitList","editCatalog","loadDrugType","loadDrugUnit","DRUG_TYPE_API","DRUG_UNIT_API","drugType","drug_type_extra","drug_type","strength","drugUnit","unit_type_extra","stength_unit","instructions","Prescriptions","catalog","loadMorePrescriptions","loadInitialData","ExpensesTypes","showDeletedExpenses","showDeleted","deletedLoading","expenses","deletedExpenses","deleted","EXPENSE_TYPE","editTax","MedicalHistory","showDeletedMedicalHistory","deletedHistory","MEDICAL_HISTORY","dayKeys","PracticeTimings","CALENDER_SETTINGS","today_first_day","calendar_slot","AppointmentCategories","appointmentCategories","loadAppointmentCategories","APPOINTMENT_CATEGORIES","intToRGB","hashCode","editCategory","CalendarSettings","Sider","SettingSider","trigger","collapsible","overflow","minHeight","background","defaultSelectedKeys","ItemGroup","SettingsPracticeDetail","SettingsCommunincations","SettingsCalendar","SettingsPracticeStaff","ZoomUser","SettingsAgents","SettingsAgentRoles","SettingsBilling","SettingsLoyalty","SettingsMLMSettings","SettingsEMR","SettingsPrescriptions","SettingsLabs","SettingsPrintouts","SettingsMedicalHistory","SettingsExpenseTypes","SettingsRoomTypes","SettingsBedPackages","SettingsMedicinePackages","SettingsDiseaseList","CollapsePanel","renderCollapsePanel","_this$props$showArrow","showArrow","collapsePanelClassName","Panel","Collapse","renderExpandIcon","panelProps","expandIcon","rotate","isActive","renderCollapse","bordered","expandIconPosition","collapseClassName","defaultProps","openAnimation","appear","MLMGenerate","comissions","margin_name","level_count","level","commision_percent","editId","changePassLoading","GENERATE_MLM_COMMISSON","details","add","level_name","nextKeys","getFieldValue","setLevelCount","editRecord","editRecordMargins","loadRoles","roleId","loadMlmData","AGENT_ROLES","xs","sm","validateTrigger","MlmBase","mlmItems","SINGLE_PRODUCT_MARGIN","rolesdata","datasource","roledata","accordion","marginType","index","header","editObject","marginTop","rowKey","TextArea","radioTabList","CUSTOMIZE_PAPER_TYPE","radioTab","Button","PrintSettings","changeFormType","selectedFormType","formData","file","response","image_path","print_setting","logo_path","save_for_all","sub_type","SAVE_ALL_PRINT_SETTINGS","PRACTICE_PRINT_SETTING_API","handleFormEditSettings","editedPrintSettings","loadPDF","report","window","open","BACKEND_BASE_URL","onchangeHandle","is_patient_not","resetFields","md","lg","pageSizeOptionList","PAPER_SIZE","pageSize","headerInclude","HEADER_INCLUDE","header_include","logoType","LOGO_TYPE","logo_type","logoAlignment","LOGO_ALIGMENT","logo_alignment","logoInclude","LOGO_INCLUDE","logo_include","singleUploadprops","makeURL","FILE_UPLOAD_API","headers","authorization","info","status","fileList","success","error","pageOrientation","PATIENT_DETAILS_LIST","patient_details","PAGE_ORIENTATION","printer_type","PRINTER_TYPE","printerType","PreviewParamsURL","editedObject","encodeURIComponent","buttonStyle","page_size","page_orientation","page_print_type","page_margin_top","page_margin_left","page_margin_bottom","page_margin_right","header_text","header_left_text","header_right_text","EXCLUDE_PATIENT_DOB","footer_margin_top","footer_text","rows","footer_left_text","footer_right_text","PRINT_PREVIEW_RENDER","backgroundColor","padding","height","boxShadow","Printout","setRandomKey","randomKey","Math","random","activeKey","EMR_TYPE","EMR_SUB_TYPE","BILLING_TYPE","BILLING_SUB_TYPE","IntegrationHome","integrateData","SAVE_CREDENTIALS","taskIntegrateFormFields","login","PASSWORD_FIELD","password","taskIntegrateFormProp","Form","MailPDFSettings","AddorEditBedPackages","loadRequiredData","ROOM_TYPE","roomTypes","editPackage","BedPackageForm","no_of_days","normal_price","normal_tax_value","tatkal_price","tatkal_tax_value","image","room","MULTI_SELECT_FIELD","formProps","BED_PACKAGES","BedPackages","packages","alt","maxWidth","maxHeight","RoomTypes","rooms","deletedRooms","editObj","normal_seats","tatkal_seats","AddOffer","OFFERS","beforeSubmit","Offers","offers","AddMembership","MEMBERSHIP_API","formDefaultValues","AddForm","Membership","membership","benefit","AddOrEdiPromoCode","loadPatient","SEARCH_PATIENT","patientList","PROMO_CODE","editPromoCode","CURRENCY_TYPE","showSearch","onSearch","filterOption","PromoCode","promoCode","SINGLE_PROMO_CODE","expiry_date","LoyaltySettings","AddorEditLab","editFields","editTest","instruction","TEXT_FIELD","LABTEST_API","LabTest","tests","editLabs","deleteTest","product_margin","onChangeHandler","panelCost","onChangeSelect","selectedTest","testObject","removeLabPanel","LABPANEL_API","loadTests","JSON","stringify","testKeys","TotalCost","testOption","test","paddingLeft","LabPanel","labPanel","loadLabPanel","editPanels","deleteLabPanel","subColumns","AddorEditLabPanel","expandedRowRender","LabTracking","AddorEditMedicinePackages","MedicinePackageForm","final_price","MEDICINE_PACKAGES","MedicinePackages","DiseaseList","diseases","DISEASE_LIST","AgentRoles","FormItem","AddOrEditAgent","saving","referal","is_agent","aadhar_upload","is_approved","editAgentData","userDetails","PATIENT_PROFILE","PATIENTS_LIST","handlePatientSelect","event","userListData","agentRoles","getPatient","searchPatient","loadAgentRoles","formPatients","avatar","charAt","description","PatientPhoneNumber","hideMobile","defaultActiveFirstOption","onSelect","showWallet","showAgentData","payAgentModal","payAgentData","approveAgent","approvalLoading","agentList","approved","total","count","apiParams","export","referer_data","patient","role_data","hideExport","PayAgentForm","layout","minWidth","allowClear","centered","closeIcon","confirmText","DATE_PICKER","AddOrEditZoomUser","MEETING_USER","editZoomData","username","API_Key","API_Secret","zoomUser","Content","SettingsDash","collapsed","PracticeStaff","SettingsEmailPDFSettings","component","Error404"],"mappings":"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","file":"static/js/11.46cc49f3.chunk.js","sourcesContent":["import '../../style/index.less';\nimport './index.less';","function _typeof(obj) {\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nimport * as React from 'react';\nimport * as PropTypes from 'prop-types';\nimport RcSwitch from 'rc-switch';\nimport classNames from 'classnames';\nimport omit from 'omit.js';\nimport Wave from '../_util/wave';\nimport Icon from '../icon';\nimport { ConfigConsumer } from '../config-provider';\nimport warning from '../_util/warning';\n\nvar Switch =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Switch, _React$Component);\n\n  function Switch(props) {\n    var _this;\n\n    _classCallCheck(this, Switch);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Switch).call(this, props));\n\n    _this.saveSwitch = function (node) {\n      _this.rcSwitch = node;\n    };\n\n    _this.renderSwitch = function (_ref) {\n      var _classNames;\n\n      var getPrefixCls = _ref.getPrefixCls;\n      var _this$props = _this.props,\n          customizePrefixCls = _this$props.prefixCls,\n          size = _this$props.size,\n          loading = _this$props.loading,\n          _this$props$className = _this$props.className,\n          className = _this$props$className === void 0 ? '' : _this$props$className,\n          disabled = _this$props.disabled;\n      var prefixCls = getPrefixCls('switch', customizePrefixCls);\n      var classes = classNames(className, (_classNames = {}, _defineProperty(_classNames, \"\".concat(prefixCls, \"-small\"), size === 'small'), _defineProperty(_classNames, \"\".concat(prefixCls, \"-loading\"), loading), _classNames));\n      var loadingIcon = loading ? React.createElement(Icon, {\n        type: \"loading\",\n        className: \"\".concat(prefixCls, \"-loading-icon\")\n      }) : null;\n      return React.createElement(Wave, {\n        insertExtraNode: true\n      }, React.createElement(RcSwitch, _extends({}, omit(_this.props, ['loading']), {\n        prefixCls: prefixCls,\n        className: classes,\n        disabled: disabled || loading,\n        ref: _this.saveSwitch,\n        loadingIcon: loadingIcon\n      })));\n    };\n\n    warning('checked' in props || !('value' in props), 'Switch', '`value` is not validate prop, do you mean `checked`?');\n    return _this;\n  }\n\n  _createClass(Switch, [{\n    key: \"focus\",\n    value: function focus() {\n      this.rcSwitch.focus();\n    }\n  }, {\n    key: \"blur\",\n    value: function blur() {\n      this.rcSwitch.blur();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(ConfigConsumer, null, this.renderSwitch);\n    }\n  }]);\n\n  return Switch;\n}(React.Component);\n\nexport { Switch as default };\nSwitch.__ANT_SWITCH = true;\nSwitch.propTypes = {\n  prefixCls: PropTypes.string,\n  // HACK: https://github.com/ant-design/ant-design/issues/5368\n  // size=default and size=large are the same\n  size: PropTypes.oneOf(['small', 'default', 'large']),\n  className: PropTypes.string\n};","import React from \"react\";\nimport CustomizedTable from \"../../common/CustomizedTable\";\nimport {getAPI, interpolate} from \"../../../utils/common\";\nimport {AGENT_WALLET, MY_AGENTS, WALLET_LEDGER, WALLET_LEDGER_SUM} from \"../../../constants/api\";\nimport {Card, Col, DatePicker, Icon, Row, Select, Statistic, Typography} from \"antd\";\nimport moment from \"moment\";\nimport InfiniteFeedLoaderButton from \"../../common/InfiniteFeedLoaderButton\";\n\nconst {Text} = Typography;\nexport default class PatientWalletLedger extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            ledger: [],\n            ledgerDetails:{},\n            loading: false,\n            walletAmount: null,\n            selectedStartDate: moment().subtract(1, 'month'),\n            selectedEndDate: moment(),\n            agents: [],\n            selectedAgents: []\n        }\n    }\n\n    componentDidMount() {\n        this.loadData();\n        this.loadPatientWallet();\n        this.loadAgents();\n        this.loadSumData();\n    }\n\n    loadPatientWallet = () => {\n        let that = this;\n        if (this.props.currentPatient && this.props.currentPatient.id) {\n            let successFn = function (data) {\n                if (data.length)\n                    that.setState({\n                        walletAmount: data[0]\n                    })\n            }\n            let errorFn = function () {\n\n            }\n            getAPI(interpolate(AGENT_WALLET, [this.props.currentPatient.id]), successFn, errorFn);\n        } else {\n            this.setState({\n                pendingAmount: null\n            })\n        }\n    }\n    loadData = (page = 1) => {\n        let that = this;\n        this.setState({\n            loading: true\n        })\n        let successFn = function (data) {\n            if (data.current == 1) {\n                that.setState({\n                    ledger: data.results,\n                    loading: false,\n                    nextPage: data.next\n                })\n            } else {\n                that.setState(function (prevState) {\n                    return {\n                        ledger: [...prevState.ledger, ...data.results],\n                        loading: false,\n                        nextPage: data.next\n                    }\n                })\n            }\n        }\n        let errorFn = function () {\n            that.setState({\n                loading: false\n            })\n        }\n        let params = {\n            page,\n            start: this.state.selectedStartDate.startOf('day').format(),\n            end: this.state.selectedEndDate.endOf('day').format(),\n            agents: this.state.selectedAgents.join(',')\n        }\n        if (this.state.selectedAgents)\n            params.agents = this.state.selectedAgents.join(',');\n        getAPI(interpolate(WALLET_LEDGER, [this.props.currentPatient.id]), successFn, errorFn, params);\n    }\n    loadSumData = (page = 1) => {\n        let that = this;\n\n        let successFn = function (data) {\n                that.setState({\n                    ledgerDetails: data,\n                    nextPage: data.next\n                })\n\n        }\n        let errorFn = function () {\n        }\n        let params = {\n            page,\n            start: this.state.selectedStartDate.format(),\n            end: this.state.selectedEndDate.format(),\n            agents: this.state.selectedAgents.join(',')\n        }\n        if (this.state.selectedAgents)\n            params.agents = this.state.selectedAgents.join(',');\n        getAPI(interpolate(WALLET_LEDGER_SUM, [this.props.currentPatient.id]), successFn, errorFn, params);\n    }\n    loadAgents() {\n        var that = this;\n        let successFn = function (data) {\n            that.setState({\n                agents: data,\n            })\n        };\n        let errorFn = function () {\n        };\n        let apiParams = {\n            agent: true,\n            pagination: false\n        }\n        getAPI(interpolate(MY_AGENTS, [this.props.currentPatient.id]), successFn, errorFn, apiParams);\n    }\n\n    changeExpenseFilters = (type, value) => {\n        let that = this;\n        this.setState({\n            [type]: value\n        }, function () {\n            that.loadData(1);\n        })\n    }\n\n    render() {\n        let columns = [{\n            title: 'Date',\n            dataIndex: 'created_at',\n            key: 'created_at',\n            render: (value) => moment(value).format('LLL')\n        }, {\n            title: 'Patient',\n            dataIndex: 'received_from',\n            key: 'received_from',\n            render: (value, record) => value ? <Text>{value.user.first_name} ({value.custom_id})</Text> : '--'\n        }, , {\n            title: 'Refered By',\n            dataIndex: 'received_from.user.referer_data',\n            key: 'received_from.user.referer_data',\n            render: (value, record) => value && value.referer ? <Text>{value.referer.first_name} ({value.custom_id})</Text> : '--'\n        }, {\n            title: 'Ledger Comment',\n            dataIndex: 'comments',\n            key: 'comments',\n            render: (value, record) => record.is_cancelled ? <Text delete>{value}</Text> : value\n        },\n            //     {\n            //     title: 'Amount Type',\n            //     dataIndex: 'amount_type',\n            //     key: 'amount_type',\n            //     render: (value, record) => record.is_cancelled ? <Text delete>{value}</Text> : value\n            // },\n            {\n                title: 'Cr/Dr',\n                dataIndex: 'ledger_type',\n                key: 'ledger_type',\n                render: (value, record) => record.is_cancelled ? <Text delete>{value}</Text> : value\n            }, {\n                title: 'Amount',\n                dataIndex: 'amount',\n                key: 'amount',\n                render: (value, record) => record.is_cancelled ?\n                    <Text delete>{value.toFixed(2)}</Text> : value.toFixed(2)\n            }];\n        return <div>\n            <Card title={\"Wallet Ledger\"}>\n                <Row gutter={16} style={{marginBottom: 10}}>\n                    <Col span={2} style={{textAlign: \"right\"}}>\n                        <b> Agents</b>\n                    </Col>\n                    <Col span={4}>\n                        <Select style={{width: '100%'}} value={this.state.selectedAgents}\n                                mode=\"multiple\"\n                                disabled={this.state.loading}\n                                onChange={(value) => this.changeExpenseFilters('selectedAgents', value)}>\n                            {this.state.agents.map(item => <Select.Option\n                                value={item.id}>{item.user.first_name}</Select.Option>)}\n                        </Select>\n                    </Col>\n                    {/*<Col span={2} style={{textAlign: \"right\"}}>*/}\n                    {/*    <b> Payment Modes</b>*/}\n                    {/*</Col>*/}\n                    {/*<Col span={4}>*/}\n                    {/*    <Select style={{width: '100%'}} value={this.state.selectedPaymentMode}*/}\n                    {/*            disabled={this.state.loading}*/}\n                    {/*            onChange={(value) => this.changeExpenseFilters('selectedPaymentMode', value)}>*/}\n                    {/*        <Select.Option value={null}>--ALL PAYMENT MODE--</Select.Option>*/}\n                    {/*        {this.state.paymentModes.map(item => <Select.Option*/}\n                    {/*            value={item.id}>{item.mode}</Select.Option>)}*/}\n                    {/*    </Select>*/}\n                    {/*</Col>*/}\n\n                    <Col span={2} style={{textAlign: \"right\"}}>\n                        <b> From</b>\n                    </Col>\n                    <Col span={4}>\n                        <DatePicker value={this.state.selectedStartDate}\n                                    disabled={this.state.loading}\n                                    onChange={(value) => this.changeExpenseFilters('selectedStartDate', value)}/>\n                    </Col>\n                    <Col span={2} style={{textAlign: \"right\"}}>\n                        <b> To</b>\n                    </Col>\n                    <Col span={4}>\n                        <DatePicker value={this.state.selectedEndDate}\n                                    disabled={this.state.loading}\n                                    onChange={(value) => this.changeExpenseFilters('selectedEndDate', value)}/>\n                    </Col>\n                </Row>\n                {this.state.walletAmount ?\n                    <Row style={{textAlign: 'center', marginBottom: 10}}>\n                        {/*<Col span={12}>*/}\n                        {/*    <Statistic title={\"\"} prefix={<Icon type={\"wallet\"}/>}*/}\n                        {/*               value={this.state.walletAmount.refundable_amount}/>*/}\n                        {/*</Col>*/}\n                        <Col span={24}>\n                            <Statistic title={\"Wallet Total\"} prefix={<Icon type={\"wallet\"}/>}\n                                       value={this.state.walletAmount.non_refundable} precision={2}/>\n                        </Col>\n                    </Row> : null}\n                <CustomizedTable dataSource={this.state.ledger} loading={this.state.loading} columns={columns}\n                                 hideReport\n                                 pagination={false}/>\n                <InfiniteFeedLoaderButton loading={this.state.loading}\n                                          hidden={!this.state.nextPage}\n                                          loaderFunction={() => this.loadData(this.state.nextPage)}/>\n                <Row style={{textAlign: 'center', marginBottom: 10}}>\n                    <Col span={8}>\n                        <Statistic title={\"Credit\"} value={this.state.ledgerDetails.credit} precision={2}/>\n                    </Col>\n                    <Col span={8}>\n                        <Statistic title={\"Debit\"} value={this.state.ledgerDetails.debit} precision={2}/>\n                    </Col>\n                    <Col span={8}>\n                        <Statistic title={\"Profit\"} value={this.state.ledgerDetails.credit-this.state.ledgerDetails.debit} precision={2}/>\n                    </Col>\n                </Row>\n            </Card>\n        </div>\n    }\n}","import React from \"react\";\nimport {Avatar, Button, Card, Col, Divider, Icon, Modal, Popconfirm, Row, Table} from \"antd\";\nimport {Link} from \"react-router-dom\";\nimport {ALL_PRACTICE, PRACTICE_DELETE} from \"../../../../constants/api\";\nimport {getAPI, interpolate, makeFileURL, postAPI} from \"../../../../utils/common\";\n\nconst {Meta} = Card;\n\nclass PracticeDetails extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            practiceList: [],\n            specialisations: null,\n            loading: true,\n            visible: false,\n            practice: {}\n\n        };\n        this.deletePractice = this.deletePractice.bind(this);\n    }\n\n    componentDidMount() {\n        // this.props.refreshClinicData();\n        this.admin_practiceData();\n    }\n\n    admin_practiceData() {\n        var that = this;\n        let successFn = function (data) {\n            let specialisations = {};\n            data[0].specialisations.forEach(function (speciality) {\n                specialisations[speciality.id] = speciality\n            });\n            console.log(specialisations);\n\n            that.setState({\n                practiceList: data,\n                specialisations: specialisations,\n                loading: false\n            })\n        };\n        let errorFn = function () {\n            that.setState({\n                loading: false\n            })\n        };\n        getAPI(ALL_PRACTICE, successFn, errorFn);\n\n    }\n\n    // clinicData(){\n    //   let  practice=loggedInUserPractices();\n    //   console.log(practice);\n    //   var practiceKeys = Object.keys(practice);\n    //   let practiceArray = [];\n    //   practiceKeys.forEach(function(key){\n    //     let successFn = function (data) {\n    //       practiceArray.push(data)\n    //       console.log(practiceArray);\n    //     }\n    //     let errorFn = function () {\n    //     };\n    //     getAPI(interpolate(PRACTICE,[key]), successFn, errorFn);\n    //\n    //   });\n    //   this.setState({\n    //     practiceList:practiceArray\n    //   })\n    //\n    // }\n\n    deletePractice(value) {\n        let that = this;\n        let successFn = function (data) {\n            console.log(\"data\");\n            that.admin_practiceData();\n            if (that.props.refreshClinicData)\n                that.props.refreshClinicData();\n        };\n        let errorFn = function () {\n        };\n        postAPI(interpolate(PRACTICE_DELETE, [value]), {}, successFn, errorFn);\n\n    }\n\n    showModal = (item) => {\n        this.setState(function () {\n            return {visible: true, practice: item}\n        });\n    };\n    handleCancel = () => {\n        this.setState({visible: false});\n    };\n\n    render() {\n        let that = this;\n        const columns = [{\n            title: 'Name',\n            dataIndex: 'name',\n            key: 'name',\n            render: (text, record) => <a href=\"#\" onClick={() => this.showModal(record)}>{text}</a>,\n        }, {\n            title: 'Tagline',\n            dataIndex: 'tagline',\n            key: 'tagline',\n        }, {\n            title: 'Address',\n            dataIndex: 'address',\n            key: 'address',\n        }, {\n            title: 'Specialisation',\n            key: 'specialisation',\n            dataIndex: 'specialisation',\n        },{\n            title:'SMS Language',\n            dataIndex:'language',\n            key:'language',\n            // render:(item,record)=>\n        }, {\n            title: 'Action',\n            key: 'action',\n            render: (text, record) => (\n                <span>\n                <Link to={'/settings/clinics/' + record.id + '/edit'}>Edit</Link>\n                <Divider type=\"vertical\"/>\n                    {that.props.practiceList.length > 1 ? <Popconfirm title=\"Are you sure delete this Practice?\"\n                                                                      onConfirm={() => this.deletePractice(record.id)}\n                                                                      okText=\"Yes\" cancelText=\"No\">\n                        <a>Delete</a></Popconfirm> : null}\n              </span>\n            ),\n        }];\n\n        return <Row>\n            <h2>Practice Details\n                <Link to=\"/settings/clinics/add\">\n                    <Button type=\"primary\" style={{float: 'right'}}>\n                        <Icon type=\"plus\"/>&nbsp;Add\n                    </Button>\n                </Link>\n            </h2>\n            <Card loading={this.state.loading}>\n                <Table pagination={false} columns={columns} dataSource={this.state.practiceList}/>\n            </Card>\n            <Modal\n                visible={this.state.visible}\n                closable={false}\n                width={600}\n                onCancel={this.handleCancel}\n                footer={null}>\n                <Button icon=\"close\" type=\"danger\" shape=\"circle\" style={{position: 'absolute', top: '-50px', right: 0}}\n                        onClick={this.handleCancel}/>\n                {/* <Card > */}\n                <Row style={{paddingBottom: \"25px\"}}>\n                    <Col span={12} offset={10}>\n                        {this.state.practice.logo ?\n                            <Avatar shape=\"square\" size=\"large\" src={makeFileURL(this.state.practice.logo)}/>\n\n                            : null}\n\n                    </Col>\n                </Row>\n\n\n                <ProfileTables label={\"Practice Name : \"} value={this.state.practice.name}/>\n                <ProfileTables label={\"Tagline : \"} value={this.state.practice.tagline}/>\n                <ProfileTables label={\"Email Id: \"} value={this.state.practice.email}/>\n                <ProfileTables label={\"Contact Number : \"} value={this.state.practice.contact}/>\n                <ProfileTables label={\"Website : \"} value={this.state.practice.website}/>\n                <ProfileTables label={\"GSTIN : \"} value={this.state.practice.gstin}/>\n                <ProfileTables label={\"Specialisation\"} value={this.state.practice.specialisation}/>\n                {ProfileTables({\n                    label: 'Address',\n                    value: this.state.practice.address ? this.state.practice.address : '' + ' ' + this.state.practice.locality ? this.state.practice.locality : '' + ' ' + this.state.practice.city ? this.state.practice.city : ''\n                    + ' ' + this.state.practice.state ? this.state.practice.state : '' + ' ' + this.state.practice.country ? this.state.practice.country : '' + ' ' + this.state.practice.pincode ? this.state.practice.pincode : ''\n                })}\n\n\n                {/* </Card> */}\n\n\n            </Modal>\n        </Row>\n    }\n}\n\nexport default PracticeDetails;\n\nfunction ProfileTables(props) {\n    return <Row gutter={16}>\n        <Col span={8}>\n            <p><b>{props.label}</b></p>\n        </Col>\n        <Col span={16}>{props.value}</Col>\n    </Row>\n\n}\n","import React from \"react\";\nimport {Form, Card, Divider, Checkbox, Row, Col, TimePicker, Button} from \"antd\";\nimport {Redirect} from \"react-router-dom\";\nimport moment from \"moment/moment\";\nimport {REQUIRED_FIELD_MESSAGE} from \"../../../../constants/messages\";\nimport {displayMessage, getAPI, interpolate, postAPI} from \"../../../../utils/common\";\nimport {CALENDER_SETTINGS, DOCTOR_VISIT_TIMING_API} from \"../../../../constants/api\";\nimport {SUCCESS_MSG_TYPE, WARNING_MSG_TYPE} from \"../../../../constants/dataKeys\";\nimport {DAY_KEYS} from \"../../../../constants/hardData\";\n\nclass DoctorTiming extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            doctorId: this.props.match.params.docId,\n            timings: null,\n            openPracticeDays: {},\n            visting_hour_same_week: true,\n            twoSessions: {},\n            loading:true,\n        }\n\n    }\n\n    componentDidMount() {\n        if (this.state.doctorId) {\n            this.loadData();\n        }\n    }\n\n    loadData = () => {\n        let that = this;\n        let successFn = function (data) {\n            let visting_hour_same_week = true;\n            let openPracticeDays = {};\n            let twoSessions = {};\n            if (data.length && data[0]) {\n                let dataObject = data[0]\n                DAY_KEYS.forEach(function (dayKey) {\n                    openPracticeDays[dayKey] = dataObject[dayKey];\n                    twoSessions[`is_two_sessions_${dayKey}`] = dataObject[`is_two_sessions_${dayKey}`];\n                });\n                visting_hour_same_week = dataObject[\"visting_hour_same_week\"];\n                twoSessions[`is_two_sessions`] = dataObject[`is_two_sessions`];\n            }\n            if (data.length) {\n                that.setState({\n                    timings: data[0],\n                    visting_hour_same_week: visting_hour_same_week,\n                    openPracticeDays: openPracticeDays,\n                    twoSessions: twoSessions,\n                    loading:false,\n                })\n            } else {\n                that.setState({\n                    timings: {},\n                    visting_hour_same_week: visting_hour_same_week,\n                    openPracticeDays: openPracticeDays,\n                    twoSessions: twoSessions,\n                    loading:false,\n                })\n                displayMessage(WARNING_MSG_TYPE, \"Doctors visit timing is empty\");\n            }\n        }\n        let errorFn = function () {\n\n        }\n        getAPI(interpolate(DOCTOR_VISIT_TIMING_API, [this.props.active_practiceId]), successFn, errorFn, {\n            doctor: this.state.doctorId\n        });\n    }\n    handleSubmit = (e) => {\n        let that = this;\n        e.preventDefault();\n        this.props.form.validateFieldsAndScroll((err, values) => {\n                if (!err) {\n                    console.log(values);\n                    let reqData = {...values};\n                    if (reqData.first_start_time) {\n                        reqData.first_start_time = moment(reqData.first_start_time).format('HH:mm');\n                    }\n                    if (reqData.first_end_time) {\n                        reqData.first_end_time = moment(reqData.first_end_time).format('HH:mm');\n                    }\n                    if (reqData.second_start_time) {\n                        reqData.second_start_time = moment(reqData.second_start_time).format('HH:mm');\n                    }\n                    if (reqData.second_end_time) {\n                        reqData.second_end_time = moment(reqData.second_end_time).format('HH:mm');\n                    }\n                    reqData.doctor = that.state.doctorId;\n                    DAY_KEYS.forEach(function (dayKey) {\n                        if (reqData[`first_start_time_${dayKey}`]) {\n                            reqData[`first_start_time_${dayKey}`] = moment(reqData[`first_start_time_${dayKey}`]).format('HH:mm');\n                        }\n                        if (reqData[`first_end_time_${dayKey}`]) {\n                            reqData[`first_end_time_${dayKey}`] = moment(reqData[`first_end_time_${dayKey}`]).format('HH:mm');\n                        }\n                        if (reqData[`second_start_time_${dayKey}`]) {\n                            reqData[`second_start_time_${dayKey}`] = moment(reqData[`second_start_time_${dayKey}`]).format('HH:mm');\n                        }\n                        if (reqData[`second_end_time_${dayKey}`]) {\n                            reqData[`second_end_time_${dayKey}`] = moment(reqData[`second_end_time_${dayKey}`]).format('HH:mm');\n                        }\n                    });\n                    if (that.state.timings) {\n                        reqData.id = that.state.timings.id\n                    }\n                    let successFn = function (data) {\n                        that.setState({\n                            loading:true,\n                        });\n                        that.props.history.goBack();\n                        if (that.props.loadData)\n                            that.props.loadData();\n                        displayMessage(SUCCESS_MSG_TYPE, \"Doctor Timings Saved successfully!!\");\n                    };\n                    let errorFn = function () {\n\n                    };\n                    postAPI(interpolate(DOCTOR_VISIT_TIMING_API, [this.props.active_practiceId]), reqData, successFn, errorFn);\n                }\n            }\n        )\n    }\n    changeVistingHourSameWeek = (e) => {\n        console.log(e.target)\n        this.setState({\n            [e.target.id]: e.target.checked\n        })\n    }\n    changeOpenPracticeDays = (type, value) => {\n        this.setState(function (prevState) {\n            return {openPracticeDays: {...prevState.openPracticeDays, [type]: value}}\n        })\n    }\n    changePracticeTwoSessions = (type, value) => {\n        this.setState(function (prevState) {\n            return {twoSessions: {...prevState.twoSessions, [type]: value}}\n        })\n    }\n\n    render() {\n        if (!this.state.doctorId) {\n            return <Redirect to={\"/settings/clinics-staff\"}/>\n        } else if (!this.state.timings) {\n            return <Card loading={true}/>\n        } else {\n\n            const that = this;\n            const formItemLayout = (this.props.formLayout ? this.props.formLayout : {\n                labelCol: {span: 12},\n                wrapperCol: {span: 12},\n            });\n            const {getFieldDecorator} = this.props.form;\n            return <div>\n                <Card loading={this.state.loading}>\n                    <Form onSubmit={this.handleSubmit}>\n                        <Form.Item key={\"visting_hour_same_week\"}  {...formItemLayout}>\n                            {getFieldDecorator(\"visting_hour_same_week\", {\n                                valuePropName: 'checked',\n                                initialValue: that.state.timings ? that.state.visting_hour_same_week : false\n                            }, {\n                                rules: [{message: REQUIRED_FIELD_MESSAGE}],\n                            })(\n                                <Checkbox onChange={this.changeVistingHourSameWeek}>\n                                    {\"Visiting hours are  same for all working days in a week\"}\n                                </Checkbox>\n                            )}\n                        </Form.Item>\n                        <Divider style={{margin: 4}}/>\n                        {this.state.visting_hour_same_week ?\n                            <div>\n                                <Row>\n                                    <Col span={4}>\n\n                                    </Col>\n                                    <Col span={18}>\n                                        <Form.Item key={\"is_two_sessions\"}  {...formItemLayout}>\n                                            {getFieldDecorator(\"is_two_sessions\", {\n                                                valuePropName: 'checked',\n                                                initialValue: that.state.timings ? that.state.timings.is_two_sessions || that.state.twoSessions[\"is_two_sessions\"] : false\n                                            }, {\n                                                rules: [{message: REQUIRED_FIELD_MESSAGE}],\n                                            })(\n                                                <Checkbox\n                                                    onChange={(e) => this.changePracticeTwoSessions(\"is_two_sessions\", e.target.checked)}>\n                                                    {\"Practice operates in two sessions.\"}\n                                                </Checkbox>\n                                            )}\n                                        </Form.Item>\n                                        <Row gutter={16}>\n                                            <Col span={12}>\n                                                <Form.Item key={\"first_start_time\"}\n                                                           label={\"Practice Starts At\"} {...formItemLayout}>\n                                                    {getFieldDecorator(\"first_start_time\", {\n                                                        initialValue: that.state.timings && that.state.timings.first_start_time ? moment(that.state.timings.first_start_time, \"HH:mm\") : null,\n                                                        rules: [{required: true, message: REQUIRED_FIELD_MESSAGE}],\n                                                    })(\n                                                        <TimePicker format={\"HH:mm\"}/>\n                                                    )}\n                                                </Form.Item>\n                                            </Col>\n                                            {that.state.twoSessions[\"is_two_sessions\"] ? <div>\n                                                <Col span={12}>\n                                                    <Form.Item key={\"first_end_time\"}\n                                                               label={\"Lunch At\"} {...formItemLayout}>\n                                                        {getFieldDecorator(\"first_end_time\", {\n                                                            initialValue: that.state.timings && that.state.timings.first_end_time ? moment(that.state.timings.first_end_time, \"HH:mm\") : null,\n                                                            rules: [{required: true, message: REQUIRED_FIELD_MESSAGE}],\n                                                        })(\n                                                            <TimePicker format={\"HH:mm\"}/>\n                                                        )}\n                                                    </Form.Item>\n                                                </Col>\n                                                <Col span={12}>\n                                                    <Form.Item key={\"second_start_time\"}\n                                                               label={\"Resume At\"} {...formItemLayout}>\n                                                        {getFieldDecorator(\"second_start_time\", {\n                                                            initialValue: that.state.timings && that.state.timings.second_start_time ? moment(that.state.timings.second_start_time, \"HH:mm\") : null,\n                                                            rules: [{required: true, message: REQUIRED_FIELD_MESSAGE}],\n                                                        })(\n                                                            <TimePicker format={\"HH:mm\"}/>\n                                                        )}\n                                                    </Form.Item>\n                                                </Col>\n                                            </div> : null}\n\n                                            <Col span={12}>\n                                                <Form.Item key={\"second_end_time\"}\n                                                           label={\"Practice Ends At\"} {...formItemLayout}>\n                                                    {getFieldDecorator(\"second_end_time\", {\n                                                        initialValue: that.state.timings && that.state.timings.second_end_time ? moment(that.state.timings.second_end_time, \"HH:mm\") : null,\n                                                        rules: [{required: true, message: REQUIRED_FIELD_MESSAGE}],\n                                                    })(\n                                                        <TimePicker format={\"HH:mm\"}/>\n                                                    )}\n                                                </Form.Item>\n                                            </Col>\n                                        </Row>\n                                    </Col>\n                                </Row>\n                                <Divider style={{margin: 4}}/>\n                            </div> : DAY_KEYS.map(dayKey => <div key={dayKey}>\n                                <Row>\n                                    <Col span={4}>\n                                        <h4>{dayKey.replace(/^\\w/, c => c.toUpperCase())}</h4>\n                                    </Col>\n\n                                    <Col span={18}>\n                                        <Form.Item key={`${dayKey}`}  {...formItemLayout}>\n                                            {getFieldDecorator(`${dayKey}`, {\n                                                valuePropName: 'checked',\n                                                initialValue: that.state.timings ? that.state.timings[`${dayKey}`] || that.state.openPracticeDays[dayKey] : false\n                                            }, {\n                                                rules: [{message: REQUIRED_FIELD_MESSAGE}],\n                                            })(\n                                                <Checkbox\n                                                    onChange={(e) => that.changeOpenPracticeDays(dayKey, e.target.checked)}>\n                                                    {`Practice is open on ${dayKey.replace(/^\\w/, c => c.toUpperCase())}`}\n                                                </Checkbox>\n                                            )}\n                                        </Form.Item>\n                                        {that.state.openPracticeDays[dayKey] ? <div>\n                                                <Form.Item key={`is_two_sessions_${dayKey}`}  {...formItemLayout}>\n                                                    {getFieldDecorator(`is_two_sessions_${dayKey}`, {\n                                                        valuePropName: 'checked',\n                                                        initialValue: that.state.timings ? that.state.timings[`is_two_sessions_${dayKey}`] || that.state.twoSessions[`is_two_sessions_${dayKey}`] : false\n                                                    }, {\n                                                        rules: [{message: REQUIRED_FIELD_MESSAGE}],\n                                                    })(\n                                                        <Checkbox\n                                                            onChange={(e) => this.changePracticeTwoSessions(`is_two_sessions_${dayKey}`, e.target.checked)}\n                                                        >\n                                                            {\"Practice operates in two sessions.\"}\n                                                        </Checkbox>\n                                                    )}\n                                                </Form.Item>\n                                                <Row gutter={16}>\n                                                    <Col span={12}>\n                                                        <Form.Item key={`first_start_time_${dayKey}`}\n                                                                   label={\"Practice Starts At\"} {...formItemLayout}>\n                                                            {getFieldDecorator(`first_start_time_${dayKey}`, {\n                                                                initialValue: that.state.timings && that.state.timings[`first_start_time_${dayKey}`] ? moment(that.state.timings[`first_start_time_${dayKey}`], \"HH:mm\") : null,\n                                                                rules: [{required: true, message: REQUIRED_FIELD_MESSAGE}],\n                                                            })(\n                                                                <TimePicker format={\"HH:mm\"}/>\n                                                            )}\n                                                        </Form.Item>\n                                                    </Col>\n                                                    {that.state.twoSessions[`is_two_sessions_${dayKey}`] ? <div>\n                                                        <Col span={12}>\n                                                            <Form.Item key={`first_end_time_${dayKey}`}\n                                                                       label={\"Lunch At\"} {...formItemLayout}>\n                                                                {getFieldDecorator(`first_end_time_${dayKey}`, {\n                                                                    initialValue: that.state.timings && that.state.timings[`first_end_time_${dayKey}`] ? moment(that.state.timings[`first_end_time_${dayKey}`], \"HH:mm\") : null,\n                                                                    rules: [{\n                                                                        required: true,\n                                                                        message: REQUIRED_FIELD_MESSAGE\n                                                                    }],\n                                                                })(\n                                                                    <TimePicker format={\"HH:mm\"}/>\n                                                                )}\n                                                            </Form.Item>\n                                                        </Col>\n                                                        <Col span={12}>\n                                                            <Form.Item key={`second_start_time_${dayKey}`}\n                                                                       label={\"Resume At\"} {...formItemLayout}>\n                                                                {getFieldDecorator(`second_start_time_${dayKey}`, {\n                                                                    initialValue: that.state.timings && that.state.timings[`second_start_time_${dayKey}`] ? moment(that.state.timings[`second_start_time_${dayKey}`], \"HH:mm\") : null,\n                                                                    rules: [{\n                                                                        required: true,\n                                                                        message: REQUIRED_FIELD_MESSAGE\n                                                                    }],\n                                                                })(\n                                                                    <TimePicker format={\"HH:mm\"}/>\n                                                                )}\n                                                            </Form.Item>\n                                                        </Col>\n                                                    </div> : null}\n                                                    <Col span={12}>\n                                                        <Form.Item key={`second_end_time_${dayKey}`}\n                                                                   label={\"Practice Ends At\"} {...formItemLayout}>\n                                                            {getFieldDecorator(`second_end_time_${dayKey}`, {\n                                                                initialValue: that.state.timings && that.state.timings[`second_end_time_${dayKey}`] ? moment(that.state.timings[`second_end_time_${dayKey}`], \"HH:mm\") : null,\n                                                                rules: [{required: true, message: REQUIRED_FIELD_MESSAGE}],\n                                                            })(\n                                                                <TimePicker format={\"HH:mm\"}/>\n                                                            )}\n                                                        </Form.Item>\n                                                    </Col>\n                                                </Row>\n                                            </div>\n                                            : null}\n                                    </Col>\n                                </Row>\n                                <Divider style={{margin: 4}}/>\n                            </div>)\n                        }\n                        <Form.Item {...formItemLayout}>\n                            <Button loading={that.state.loading} type=\"primary\" htmlType=\"submit\" style={{margin: 5}}>\n                                Submit\n                            </Button>\n                            {that.props.history ?\n                                <Button style={{margin: 5}} onClick={() => that.props.history.goBack()}>\n                                    Cancel\n                                </Button> : null}\n                        </Form.Item>\n                    </Form>\n                </Card>\n            </div>\n        }\n    }\n}\n\nexport default Form.create()(DoctorTiming);\n","import React from \"react\";\nimport DynamicFieldsForm from \"../../../common/DynamicFieldsForm\";\nimport {\n    Button,\n    Checkbox,\n    Card,\n    Form,\n    Icon,\n    Tabs,\n    Divider,\n    Tag,\n    Row,\n    Table,\n    Modal,\n    Popconfirm,\n    Switch as AntSwitch, Spin\n} from \"antd\";\nimport {\n    CHECKBOX_FIELD,\n    DOCTORS_ROLE,\n    INPUT_FIELD,\n    RADIO_FIELD,\n    SELECT_FIELD,\n    SUCCESS_MSG_TYPE\n} from \"../../../../constants/dataKeys\";\nimport {\n    PRACTICESTAFF,\n    STAFF_ROLES,\n    ALL_PRACTICE_STAFF,\n    ALL_PRACTICE_DOCTORS,\n    SINGLE_PRACTICE_STAFF_API,\n    USER_PRACTICE_PERMISSIONS,\n    SET_USER_PERMISSION,\n    SET_SPECIFIC_USER_PERMISSION,\n    DOCTOR_VISIT_TIMING_API, ENABLE_STAFF_IN_PRACTICE, ALL_PERMISSIONS, UPDATE_BULK_PERMISSIONS\n} from \"../../../../constants/api\"\nimport {Link, Route, Switch} from \"react-router-dom\";\nimport {deleteAPI, displayMessage, getAPI, interpolate, patchAPI, postAPI, putAPI} from \"../../../../utils/common\";\nimport {getAllPermissions, loggedInUserPractices} from \"../../../../utils/auth\";\nimport moment from \"moment\";\nimport DoctorTiming from \"./DoctorTiming\";\nimport {DAY_KEYS} from \"../../../../constants/hardData\";\nimport CustomizedTable from \"../../../common/CustomizedTable\";\n\nconst {Column, ColumnGroup} = Table;\nconst TabPane = Tabs.TabPane;\nconst {confirm} = Modal;\n\nclass PracticeDetails extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            current: 'staff',\n            practice_staff: [],\n            practice_doctors: [],\n            roles: null,\n            permissionEditModal: false,\n            editPermissions: {},\n            allPermissions: [],\n            allGlobalPermissions: [],\n            loading: true,\n            defaultActiveTab: this.props.location.hash,\n            doctorsTiming: {},\n            bulkEditLoading: false\n        }\n        this.setPermission = this.setPermission.bind(this);\n        this.staffRoles()\n        this.loadData = this.loadData.bind(this);\n    }\n\n    componentDidMount() {\n        this.getAllPermissions();\n        this.loadData();\n    }\n\n    setPermission(codename, name, e, sendPractice) {\n        let that = this;\n        let value = e.target.checked;\n        this.setState(function (prevState) {\n            let permission = {...prevState.editPermissions[codename]}\n            permission.loading = true;\n            return {editPermissions: {...prevState.editPermissions, [codename]: permission}}\n        });\n        if (value) {\n            let reqData = {\n                \"name\": name,\n                \"codename\": codename,\n                \"is_active\": true,\n                \"practice\": sendPractice ? that.props.active_practiceId : null,\n                \"staff\": that.state.currentUser\n            }\n            let successFn = function (data) {\n                that.setState(function (prevState) {\n                    return {editPermissions: {...prevState.editPermissions, [codename]: data}}\n                })\n            }\n            let errorFn = function () {\n            }\n            postAPI(SET_USER_PERMISSION, reqData, successFn, errorFn);\n        } else {\n            if (that.state.editPermissions[codename].id) {\n                let reqData = {\n                    // \"name\": null,\n                    // \"codename\": codename,\n                    \"is_active\": false,\n                    // \"practice\": that.props.active_practiceId,\n                    // \"user\": that.state.currentUser\n                }\n                let successFn = function (data) {\n                    that.setState(function (prevState) {\n                        return {editPermissions: {...prevState.editPermissions, [data.codename]: undefined}}\n                    })\n                }\n                let errorFn = function () {\n\n                }\n                patchAPI(interpolate(SET_SPECIFIC_USER_PERMISSION, [that.state.editPermissions[codename].id]), reqData, successFn, errorFn);\n            } else {\n\n            }\n        }\n    }\n\n    getAllPermissions = () => {\n        let that = this;\n        let successFn = function (data) {\n            that.setState({\n                allPermissions: data.practice_permissions,\n                allGlobalPermissions: data.global_permissions\n            })\n        }\n        let errorFn = function () {\n        }\n        getAPI(ALL_PERMISSIONS, successFn, errorFn);\n    }\n\n    editPermissions(user) {\n        let that = this;\n        if (!user) {\n            that.setState({\n                permissionEditModal: false,\n            });\n            return true\n        }\n\n        that.setState({\n            permissionEditModal: true,\n            editPermissions: [],\n            currentUser: user\n        });\n        let successFn = function (data) {\n            let permissions = {}\n            data.forEach(function (item) {\n                permissions[item.codename] = item\n            })\n            that.setState({\n                editPermissions: permissions\n            })\n        }\n        let errorFn = function () {\n        }\n        getAPI(interpolate(USER_PRACTICE_PERMISSIONS, [user, that.props.active_practiceId]), successFn, errorFn);\n    }\n\n    loadData() {\n        this.admin_StaffData();\n    }\n\n    deleteStaff(value) {\n        var that = this;\n        let reqData = {\n            is_active: false,\n        }\n        let successFn = function (data) {\n\n            that.loadData();\n        };\n        let errorFn = function () {\n        };\n        putAPI(interpolate(SINGLE_PRACTICE_STAFF_API, [value]), reqData, successFn, errorFn);\n    }\n\n    staffRoles() {\n        let that = this;\n        let successFn = function (data) {\n            that.setState({\n                roles: data,\n            })\n        }\n        let errorFn = function () {\n        }\n        getAPI(STAFF_ROLES, successFn, errorFn)\n    }\n\n    admin_StaffData() {\n        var that = this;\n        let successFn = function (data) {\n            let doctor = [];\n            let staff = [];\n            data.staff.forEach(function (usersdata) {\n                if (usersdata.role == DOCTORS_ROLE) {\n                    doctor.push({...usersdata.user,...usersdata});\n                } else {\n                    staff.push({...usersdata.user,...usersdata});\n                }\n            })\n            that.setState({\n                practice_doctors: doctor,\n                practice_staff: staff,\n                loading: false\n            }, function () {\n                that.loadDoctorsTiming();\n            })\n        };\n        let errorFn = function () {\n            that.setState({\n                loading: false\n            })\n        };\n        getAPI(interpolate(PRACTICESTAFF, [this.props.active_practiceId]), successFn, errorFn, {all: true});\n    }\n\n\n    clinicData() {\n        let practice = loggedInUserPractices();\n        var practiceKeys = Object.keys(practice);\n        var that = this;\n        let successFn = function (data) {\n            let doctor = [];\n            let staff = [];\n            data.staff.forEach(function (usersdata) {\n                if (usersdata.role == DOCTORS_ROLE) {\n                    doctor.push({...usersdata.user,...usersdata});\n                } else {\n                    staff.push({...usersdata.user,...usersdata});\n                }\n            })\n            that.setState({\n                practice_doctors: doctor,\n                practice_staff: staff,\n            }, function () {\n                that.loadDoctorsTiming();\n            })\n        }\n        let errorFn = function () {\n        };\n        getAPI(interpolate(PRACTICESTAFF, [this.props.active_practiceId]), successFn, errorFn);\n\n    }\n\n    handleClick = (e) => {\n        this.setState({\n            current: e.key,\n        });\n    }\n\n    loadDoctorsTiming = () => {\n        let that = this;\n        let doctorList = that.state.practice_doctors.map(doctor => doctor.id);\n        let successFn = function (data) {\n            that.setState(function (prevState) {\n                let timingObject = {}\n                data.forEach(function (dataObj) {\n                    timingObject[dataObj.doctor.id] = dataObj\n                })\n                return {doctorsTiming: timingObject}\n            })\n        }\n        let errorFn = function () {\n\n        }\n        getAPI(interpolate(DOCTOR_VISIT_TIMING_API, [this.props.active_practiceId]), successFn, errorFn, {\n            doctor: doctorList.join(',')\n        });\n    }\n    changeTab = (key) => {\n        this.setState({\n            defaultActiveTab: key\n        });\n        this.props.history.push('/settings/clinics-staff' + key);\n    }\n    toggleEnableStaffPractice = (staff, e) => {\n        let that = this;\n        let successFn = function (data) {\n            if (e)\n                displayMessage(SUCCESS_MSG_TYPE, \"Staff enabled for this practice successfully!!\")\n            else\n                displayMessage(SUCCESS_MSG_TYPE, \"Staff disabled for this practice successfully!!\")\n            that.admin_StaffData();\n        }\n        let errorFn = function () {\n\n        }\n        postAPI(interpolate(ENABLE_STAFF_IN_PRACTICE, [staff]), {\n            practice: that.props.active_practiceId,\n            is_active: !!e\n        }, successFn, errorFn)\n    }\n    toggleAllPermissions = (type, value) => {\n        let that = this;\n        let permissionsArray = [];\n\n        if (type == 'LOCAL') {\n            that.state.allPermissions.forEach(function (permission) {\n                let permObject = {\n                    \"name\": permission.name,\n                    \"codename\": permission.codename,\n                    \"is_active\": !!value,\n                    \"practice\": that.props.active_practiceId,\n                    \"staff\": that.state.currentUser\n                };\n                if (that.state.editPermissions[permission.codename]) {\n                    permObject.id = that.state.editPermissions[permission.codename].id;\n                }\n                permissionsArray.push(permObject);\n            });\n        }\n        if (type == 'GLOBAL') {\n            that.state.allGlobalPermissions.forEach(function (permission) {\n                let permObject = {\n                    \"name\": permission.name,\n                    \"codename\": permission.codename,\n                    \"is_active\": !!value,\n                    \"practice\": that.props.active_practiceId,\n                    \"staff\": that.state.currentUser\n                };\n                if (that.state.editPermissions[permission.codename]) {\n                    permObject.id = that.state.editPermissions[permission.codename].id;\n                }\n                permissionsArray.push(permObject);\n            });\n        }\n        let successFn = function (data) {\n            that.editPermissions(that.state.currentUser);\n            that.setState({\n                bulkEditLoading: false\n            });\n        }\n        let errorFn = function () {\n            that.setState({\n                bulkEditLoading: false\n            });\n        }\n        confirm({\n            title: 'Are you sure to select all permissions for this user?',\n            onOk() {\n                that.setState({\n                    bulkEditLoading: type\n                });\n                postAPI(UPDATE_BULK_PERMISSIONS, {permissions: permissionsArray}, successFn, errorFn);\n            },\n            onCancel() {\n                return false;\n            },\n        })\n\n    }\n\n    render() {\n        let that = this;\n        const doctorColumns = [{\n            title: \"Name\",\n            dataIndex: 'first_name',\n            key: \"first_name\",\n        }, {\n            title: \"Email\",\n            dataIndex: \"email\",\n            key: \"email\",\n            render: (value, record) => (record.user && record.user.is_active ? record.user.email : value)\n        }, {\n            title: \"Mobile\",\n            dataIndex: \"mobile\",\n            key: \"mobile\",\n        }, {\n            title: \"Registration Number\",\n            dataIndex: \"registration_number\",\n            key: \"registration_number\",\n        }, {\n            title: \"Enable Staff\",\n            dataIndex: \"in_practice\",\n            key: \"enable_staff\",\n            render: (item, record) => (record.user && record.user.is_superuser ?\n                <Tag color=\"red\">Not Allowed</Tag> :\n                <AntSwitch defaultChecked={!!item} onChange={(e) => that.toggleEnableStaffPractice(record.id, e)}/>)\n        }, {\n            title: \"Last Login\",\n            key: \"user\",\n            render: (text, record) => (record.user && record.user.is_active ? (record.user.last_login ? moment(record.user.last_login).fromNow() : '--') :\n                <Tag color=\"#f50\">Activation Pending</Tag>),\n        }, {\n            title: \"Action\",\n            key: \"action\",\n            render: function (text, record) {\n                return <span>\n            <Link to={\"/settings/clinics-staff/\" + record.id + \"/edit\"}>\n              <a>Edit</a>\n            </Link>\n                     <Divider type=\"vertical\"/>\n                    {record.user && record.user.is_superuser ?\n                        <Tag color=\"red\">SuperUser</Tag> :\n                        <>\n                            <a onClick={() => that.editPermissions(record.id)}\n                               disabled={!record.in_practice}>Permissions</a>\n                            <Divider type=\"vertical\"/>\n                            <Popconfirm title=\"Are you sure delete this staff?\"\n                                        onConfirm={() => that.deleteStaff(record.id)} okText=\"Yes\" cancelText=\"No\">\n                                <a>Delete</a>\n                            </Popconfirm>\n                        </>}\n            </span>\n            }\n        }];\n\n        const staffColumns = [{\n            title: \"Name\",\n            dataIndex: \"first_name\",\n            key: \"name\",\n        }, {\n            title: \"Email\",\n            dataIndex: \"email\",\n            key: \"email\",\n            render: (value, record) => (record.user && record.user.is_active ? record.user.email : value)\n        }, {\n            title: \"Mobile\",\n            dataIndex: \"mobile\",\n            key: \"mobile\",\n        }, {\n            title: \"Enable Staff\",\n            dataIndex: \"in_practice\",\n            key: \"enable_staff\",\n            render: (item, record) => (record.user && record.user.is_superuser ?\n                <Tag color=\"red\">Not Allowed</Tag> :\n                <AntSwitch defaultChecked={!!item} onChange={(e) => that.toggleEnableStaffPractice(record.id, e)}/>)\n        }, {\n            title: \"Last Login\",\n            key: \"user\",\n            render: (text, record) => (record.user && record.user.is_active ? (record.user.last_login ? moment(record.user.last_login).fromNow() : '--') :\n                <Tag color=\"#f50\">Activation Pending</Tag>),\n        }, {\n            title: \"Action\",\n            key: \"action\",\n            render: function (text, record) {\n                return <span>\n            <Link to={\"/settings/clinics-staff/staff/\" + record.id + \"/edit\"}>\n              <a>Edit</a>\n            </Link>\n                     <Divider type=\"vertical\"/>\n                    {record.user && record.user.is_superuser ?\n                        <Tag color=\"red\">SuperUser</Tag> :\n                        <>\n                            <a onClick={() => that.editPermissions(record.id)}\n                               disabled={!record.in_practice}>Permissions</a>\n                            <Divider type=\"vertical\"/>\n                            <Popconfirm title=\"Are you sure delete this staff?\"\n                                        onConfirm={() => that.deleteStaff(record.id)} okText=\"Yes\" cancelText=\"No\">\n                                <a>Delete</a>\n                            </Popconfirm></>}\n            </span>\n            }\n        }];\n\n        const notification_doctor_columns = [{\n            title: \"Name\",\n            dataIndex: \"user.first_name\",\n            key: \"name\",\n        }, {\n            title: \"Confirmation SMS\",\n            dataIndex: \"confirmation_sms\",\n            key: \"confirmation_sms\",\n            render: confirmation_sms => (\n                <span>\n            <Checkbox\n                checked={confirmation_sms}/>\n            </span>),\n        }, {\n            title: \"Schedule SMS\",\n            dataIndex: \"schedule_sms\",\n            key: \"schedule_sms\",\n            render: schedule_sms => (\n                <span>\n            <Checkbox checked={schedule_sms}/>\n            </span>)\n        }, {\n            title: \"Confirmation EMAIL\",\n            dataIndex: \"confirmation_email\",\n            key: \"confirmation_email\",\n            render: confirmation_email => (\n                <span>\n            <Checkbox checked={confirmation_email}/>\n            </span>)\n        }, {\n            title: \"Online Appointment SMS\",\n            dataIndex: \"online_appointment_sms\",\n            key: \"online_appointment_sms\",\n            render: online_appointment_sms => (\n                <Checkbox checked={online_appointment_sms}/>\n            )\n        }, {\n            title: \"Action\",\n            key: \"action\",\n            render: function (text, record) {\n                return <span>\n            <Link to={\"/settings/clinics-staff/\" + record.id + \"/edit\"}>\n              <a>Edit</a>\n            </Link>\n            </span>\n            }\n        }];\n\n        const notification_staff_columns = [{\n            title: \"Name\",\n            dataIndex: \"user.first_name\",\n            key: \"name\",\n        }, {\n            title: \"Confirmation SMS\",\n            dataIndex: \"confirmation_sms\",\n            key: \"confirmation_sms\",\n            render: confirmation_sms => (\n                <span>\n            <Checkbox\n                checked={confirmation_sms}/>\n            </span>),\n        }, {\n            title: \"Schedule SMS\",\n            dataIndex: \"schedule_sms\",\n            key: \"schedule_sms\",\n            render: schedule_sms => (\n                <span>\n            <Checkbox checked={schedule_sms}/>\n            </span>)\n        }, {\n            title: \"Confirmation EMAIL\",\n            dataIndex: \"confirmation_email\",\n            key: \"confirmation_email\",\n            render: confirmation_email => (\n                <span>\n            <Checkbox checked={confirmation_email}/>\n            </span>)\n        }, {\n            title: \"Online Appointment SMS\",\n            dataIndex: \"online_appointment_sms\",\n            key: \"online_appointment_sms\",\n            render: online_appointment_sms => (\n                <Checkbox checked={online_appointment_sms}/>\n            )\n        }, {\n            title: \"Action\",\n            key: \"action\",\n            render: function (text, record) {\n                return (record.user && record.is_superuser ?\n                    <Tag> Not Allowed</Tag> :\n                    <span>\n            <Link to={\"/settings/clinics-staff/staff/\" + record.id + \"/edit\"}>\n              <a>Edit</a>\n            </Link>\n            </span>)\n            }\n        }];\n        return <Row>\n            <h2>Practice Staff</h2>\n            <Switch>\n                <Route path={\"/settings/clinics-staff/:docId/edit-timing\"}\n                       render={(route) => <DoctorTiming {...this.props} {...route} loadData={that.loadData}/>}/>\n                <Route>\n                    <Card>\n                        <Tabs defaultActiveKey={this.state.defaultActiveTab} onChange={this.changeTab}>\n                            <TabPane tab={<span><Icon type=\"user-add\"/>Manage Staff</span>} key=\"#staff\">\n                                <h2>Doctors\n                                    <Link to=\"/settings/clinics-staff/adddoctor\">\n                                        <Button type=\"primary\" style={{float: 'right'}}>\n                                            <Icon type=\"plus\"/>&nbsp;Add Doctor\n                                        </Button>\n                                    </Link>\n                                    <Link to=\"/settings/clinics-staff/addstaff\">\n                                        <Button type=\"primary\" style={{float: 'right', marginRight: '5px'}}>\n                                            <Icon type=\"plus\"/>&nbsp;Add Staff\n                                        </Button>\n                                    </Link>\n                                </h2>\n\n                                <CustomizedTable loading={this.state.loading} pagination={false} columns={doctorColumns}\n                                       dataSource={this.state.practice_doctors}/>\n                                <Divider/>\n                                <h2>Staff </h2>\n                                <CustomizedTable loading={this.state.loading} pagination={false} columns={staffColumns}\n                                       dataSource={this.state.practice_staff}/>\n                            </TabPane>\n                            <TabPane tab={<span><Icon type=\"team\"/>Staff Notification</span>} key=\"#notification\">\n                                <h2>Doctors</h2>\n                                <Table loading={this.state.loading} pagination={false}\n                                       columns={notification_doctor_columns}\n                                       dataSource={this.state.practice_doctors}/>\n                                <Divider/>\n                                <h2>Staff</h2>\n                                <Table loading={this.state.loading} pagination={false}\n                                       columns={notification_staff_columns}\n                                       dataSource={this.state.practice_staff}/>\n                            </TabPane>\n                            <TabPane tab={<span><Icon type=\"schedule\"/>Doctors visit Timing</span>} key=\"#timing\">\n                                <Table loading={this.state.loading} dataSource={this.state.practice_doctors}>\n                                    <Column title=\"Name\"\n                                            dataIndex=\"user.first_name\"\n                                            key=\"name\"\n                                    />\n                                    <Column title=\"Visit Timing\"\n                                            dataIndex=\"loginstatus\"\n                                            key=\"VisitTiming\"\n                                            render={(text, record) => visitTime(that.state.doctorsTiming[record.id])}\n                                    />\n                                    <Column title=\"Action\"\n                                            key=\"action\"\n                                            render={(text, record) => (\n                                                <Link to={\"/settings/clinics-staff/\" + record.id + \"/edit-timing\"}>\n                                                    <a>Edit Timing</a>\n                                                </Link>\n                                            )}/>\n                                </Table>\n                            </TabPane>\n                        </Tabs>\n                        <Modal title=\"Edit Permissions\"\n                               visible={this.state.permissionEditModal}\n                               onCancel={() => this.editPermissions()}\n                               footer={null}>\n                            <Spin spinning={this.state.bulkEditLoading == 'LOCAL'}>\n                                <Row>\n                                    <h3>\n                                        <Checkbox\n                                            checked={that.state.allPermissions.length && that.state.allPermissions.reduce((a, b) => a && b && that.state.editPermissions[a.codename] && that.state.editPermissions[b.codename])}\n                                            onClick={(e) => this.toggleAllPermissions('LOCAL', e.target.checked)}>Select\n                                            All\n                                            Permissions</Checkbox>\n                                    </h3>\n                                </Row>\n                                {that.state.allPermissions.map(item => <Row>\n                                    <Checkbox value={item.codename}\n                                              checked={that.state.editPermissions[item.codename]}\n                                              disabled={that.state.editPermissions[item.codename] && that.state.editPermissions[item.codename].loading}\n                                              onClick={(e) => this.setPermission(item.codename, item.name, e, true)}>{item.id} {item.name}</Checkbox>\n                                </Row>)}\n                            </Spin>\n                            <Divider>Global Permissions</Divider>\n                            <Spin spinning={this.state.bulkEditLoading == 'GLOBAL'}>\n                                <Row>\n                                    <h3>\n                                        <Checkbox\n                                            checked={that.state.allGlobalPermissions.length && that.state.allGlobalPermissions.reduce((a, b) => a && b && that.state.editPermissions[a.codename] && that.state.editPermissions[b.codename])}\n                                            onClick={(e) => this.toggleAllPermissions('GLOBAL', e.target.checked)}>Select\n                                            All\n                                            Permissions</Checkbox>\n                                    </h3>\n                                </Row>\n                                {that.state.allGlobalPermissions.map(item => <Row>\n                                    <Checkbox value={item.codename}\n                                              checked={that.state.editPermissions[item.codename]}\n                                              disabled={that.state.editPermissions[item.codename] && that.state.editPermissions[item.codename].loading}\n                                              onClick={(e) => this.setPermission(item.codename, item.name, e, false)}\n                                              style={{display: 'list-item'}}>{item.id} {item.name}</Checkbox></Row>)}\n                            </Spin>\n                        </Modal>\n                    </Card>\n                </Route>\n            </Switch>\n\n        </Row>\n    }\n}\n\nfunction visitTime(visitObj) {\n    if (visitObj) {\n        return (visitObj.visting_hour_same_week ?\n            <span>\n                <b>Mon-Sun : </b>{momentTime(visitObj.first_start_time)}\n                {visitObj.is_two_sessions ? \"-\" + momentTime(visitObj.first_end_time) + \" ||LUNCH|| \" + momentTime(visitObj.second_start_time) : null}\n                -{momentTime(visitObj.second_end_time)}\n                </span>\n            : DAY_KEYS.map(dayKey =>\n                visitObj[dayKey] ? <span>\n                        <b>{dayKey} : </b>\n                    {momentTime(visitObj[`first_start_time_${dayKey}`])}\n                    {visitObj[`is_two_sessions_${dayKey}`] ? \"-\" + momentTime(visitObj[`first_end_time_${dayKey}`]) + \"||LUNCH||\" + momentTime(visitObj[`second_start_time_${dayKey}`]) : null}\n                    -{momentTime(visitObj[`second_end_time_${dayKey}`])}\n                    <br/></span> : null\n            ))\n    }\n    return null\n}\n\n\nfunction momentTime(timeStr) {\n    return moment(timeStr, \"HH:mm\").format(\"HH:mm\")\n}\n\nexport default PracticeDetails;\n","import React from \"react\";\nimport DynamicFieldsForm from \"../../../common/DynamicFieldsForm\";\nimport {Button, Card, Form, Icon, Row} from \"antd\";\nimport {\n    CHECKBOX_FIELD,\n    SUCCESS_MSG_TYPE,\n    INPUT_FIELD,\n    RADIO_FIELD,\n    SELECT_FIELD,\n    SINGLE_CHECKBOX_FIELD,\n    COLOR_PICKER,\n    EMAIL_FIELD\n} from \"../../../../constants/dataKeys\";\nimport {ALL_PRACTICE_STAFF, DRUG_CATALOG, SINGLE_PRACTICE_STAFF_API, STAFF_ROLES} from \"../../../../constants/api\";\nimport {getAPI, displayMessage, interpolate} from \"../../../../utils/common\";\nimport {Redirect} from 'react-router-dom'\nimport {Route} from \"react-router\";\n\nclass AddEditDoctor extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            redirect: false,\n            editStaff: null,\n            roles: [],\n\n\n        }\n        this.changeRedirect = this.changeRedirect.bind(this);\n        this.loadEditPracticeStaff = this.loadEditPracticeStaff.bind(this);\n        if (this.props.match.params.doctorid) {\n            this.loadEditPracticeStaff();\n        }\n        this.staffRoles();\n    }\n\n    staffRoles() {\n        let that = this;\n        let successFn = function (data) {\n            that.setState({\n                roles: data\n            })\n        }\n        let errorFn = function () {\n        }\n        getAPI(STAFF_ROLES, successFn, errorFn)\n    }\n\n    loadEditPracticeStaff() {\n        let doctorid = this.props.match.params.doctorid;\n        console.log(doctorid)\n        let that = this;\n        let successFn = function (data) {\n            that.setState({\n                editStaff: data,\n            })\n        };\n        let errorFn = function () {\n            that.setState({\n            })\n        }\n        getAPI(interpolate(SINGLE_PRACTICE_STAFF_API, [doctorid]), successFn, errorFn)\n\n    }\n\n    changeRedirect() {\n        var redirectVar = this.state.redirect;\n        this.setState({\n            redirect: !redirectVar,\n        });\n    }\n\n    render() {\n        let that = this;\n\n        console.log('props',that.props)\n        const fields = [\n            {\n                label: \"Doctor\",\n                key: \"user.first_name\",\n                required: true,\n                placeholder:\"Doctor Name\",\n                initialValue: this.state.editStaff ? this.state.editStaff.user.first_name : null,\n                type: INPUT_FIELD\n            }, {\n                label: \"Mobile Number\",\n                key: \"user.mobile\",\n                placeholder:\"Mobile Number\",\n                required: true,\n                initialValue: this.state.editStaff ? this.state.editStaff.user.mobile : null,\n                type: INPUT_FIELD,\n                disabled: !!this.state.editStaff\n            }, {\n                label: \"Email Id\",\n                key: \"user.email\",\n                placeholder:\"Email Id\",\n                required: true,\n                disabled: !!this.state.editStaff,\n                initialValue: this.state.editStaff ? this.state.editStaff.user.email : null,\n                type: EMAIL_FIELD\n            }, {\n                label: \"Registration Number\",\n                key: \"registration_number\",\n                placeholder:\"Registration Number\",\n                initialValue: this.state.editStaff ? this.state.editStaff.registration_number : null,\n                type: INPUT_FIELD\n            },\n            // {\n            //     label: \"Role\",\n            //     key: \"role\",\n            //     required: true,\n            //     initialValue: this.state.editStaff ? this.state.editStaff.role : null,\n            //     type: SELECT_FIELD,\n            //     options: this.state.roles.map(role => ({label: role.name, value: [role.id]}))\n            // },\n            {\n                label: \"Calendar Colour\",\n                key: \"calendar_colour\",\n                initialValue: this.state.editStaff ? this.state.editStaff.calendar_colour : null,\n                type: COLOR_PICKER,\n                required:true\n\n            }, {\n                label: \"Schedule SMS\",\n                key: \"schedule_sms\",\n                initialValue: this.state.editStaff ? this.state.editStaff.schedule_sms : false,\n                type: SINGLE_CHECKBOX_FIELD,\n            }, {\n                label: \"Confirmation SMS\",\n                key: \"confirmation_sms\",\n                initialValue: this.state.editStaff ? this.state.editStaff.confirmation_sms : false,\n                type: SINGLE_CHECKBOX_FIELD,\n            }, {\n                label: \"Confirmation Email\",\n                key: \"confirmation_email\",\n                initialValue: this.state.editStaff ? this.state.editStaff.confirmation_email : false,\n                type: SINGLE_CHECKBOX_FIELD,\n            }, {\n                label: \"Online Appointment SMS\",\n                key: \"online_appointment_sms\",\n                initialValue: this.state.editStaff ? this.state.editStaff.online_appointment_sms : false,\n                type: SINGLE_CHECKBOX_FIELD,\n            },]\n        const formProp = {\n            successFn: function (data) {\n                displayMessage(SUCCESS_MSG_TYPE, \"success\");\n                console.log(\"all data\", data);\n                that.setState({\n                    redirect: true\n\n                });\n                that.props.loadData();\n            },\n            errorFn: function () {\n\n            },\n            action: ALL_PRACTICE_STAFF,\n            method: \"post\",\n        }\n        let editformProp;\n        if (this.state.editStaff) {\n\n            editformProp = {\n                successFn: function (data) {\n                    displayMessage(SUCCESS_MSG_TYPE, \"success\");\n                    that.setState({\n                        redirect: true,\n                    });\n                    that.props.loadData();\n                },\n                errorFn: function () {\n\n                },\n                action: interpolate(SINGLE_PRACTICE_STAFF_API, [that.props.match.params.doctorid]),\n                method: \"put\",\n            }\n        }\n        const defaultValues = [{key:'role',value:[3]}];\n\n        const TestFormLayout = Form.create()(DynamicFieldsForm);\n        return <Row>\n            <Card>\n                <Route exact path='/settings/clinics-staff/:doctorid/edit'\n                       render={(route) => (this.props.match.params.doctorid ?\n                           <TestFormLayout defaultValues={defaultValues} title=\"Edit Doctor\"\n                                           changeRedirect={this.changeRedirect} formProp={editformProp}\n                                           fields={fields} {...route}/> : <Redirect to={'/settings/clinics-staff'}/>)}/>\n\n                <Route exact path='/settings/clinics-staff/adddoctor'\n                       render={(route) => <TestFormLayout defaultValues={defaultValues} changeRedirect={this.changeRedirect}\n                                                     title=\"Add Doctor \" formProp={formProp} fields={fields} {...route}/>}/>\n            </Card>\n            {this.state.redirect && <Redirect to='/settings/clinics-staff'/>}\n\n        </Row>\n    }\n}\n\nexport default AddEditDoctor;\n","import React from \"react\";\nimport DynamicFieldsForm from \"../../../common/DynamicFieldsForm\";\nimport {Button, Card, Form, Icon, Row} from \"antd\";\nimport {\n    CHECKBOX_FIELD,\n    SUCCESS_MSG_TYPE,\n    INPUT_FIELD,\n    RADIO_FIELD,\n    SELECT_FIELD,\n    SINGLE_CHECKBOX_FIELD,\n    COLOR_PICKER,\n    EMAIL_FIELD\n} from \"../../../../constants/dataKeys\";\nimport {ALL_PRACTICE_STAFF, DRUG_CATALOG, SINGLE_PRACTICE_STAFF_API, STAFF_ROLES} from \"../../../../constants/api\";\nimport {getAPI, displayMessage, interpolate} from \"../../../../utils/common\";\nimport {Redirect} from 'react-router-dom'\nimport {Route} from \"react-router\";\nimport {ROLES} from \"../../../../constants/hardData\";\n\nclass AddEditStaff extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            redirect: false,\n            editStaff: null,\n            // roles: [],\n\n\n        }\n        this.changeRedirect = this.changeRedirect.bind(this);\n        this.loadEditPracticeStaff = this.loadEditPracticeStaff.bind(this);\n        if (this.props.match.params.staffid) {\n            this.loadEditPracticeStaff();\n        }\n        // this.staffRoles();\n    }\n\n    // staffRoles() {\n    //     let that = this;\n    //     let successFn = function (data) {\n    //         that.setState({\n    //             roles: data,\n    //         })\n    //     }\n    //     let errorFn = function () {\n    //     }\n    //     getAPI(STAFF_ROLES, successFn, errorFn)\n    // }\n\n    loadEditPracticeStaff() {\n        let staffid = this.props.match.params.staffid;\n        console.log(staffid)\n        let that = this;\n        let successFn = function (data) {\n            that.setState({\n                editStaff: data,\n            })\n        };\n        let errorFn = function () {\n            that.setState({\n            })\n        }\n        getAPI(interpolate(SINGLE_PRACTICE_STAFF_API, [staffid]), successFn, errorFn)\n\n    }\n\n    changeRedirect() {\n        var redirectVar = this.state.redirect;\n        this.setState({\n            redirect: !redirectVar,\n        });\n    }\n\n    render() {\n        let that = this;\n        const fields = [\n            {\n                label: \"Staff Name\",\n                key: \"user.first_name\",\n                required: true,\n                placeholder:\"Staff Name\",\n                initialValue: this.state.editStaff ? this.state.editStaff.user.first_name : null,\n                type: INPUT_FIELD\n            }, {\n                label: \"Mobile Number\",\n                key: \"user.mobile\",\n                placeholder:\"Mobile Number\",\n                required: true,\n                initialValue: this.state.editStaff ? this.state.editStaff.user.mobile : null,\n                type: INPUT_FIELD,\n                disabled: !!this.state.editStaff\n            }, {\n                label: \"Email Id\",\n                key: \"user.email\",\n                placeholder:\"Email Id\",\n                required: true,\n                disabled: !!this.state.editStaff,\n                initialValue: this.state.editStaff ? this.state.editStaff.user.email : null,\n                type: EMAIL_FIELD\n            },{\n                label: \"Role\",\n                key: \"role\",\n                required: true,\n                initialValue: this.state.editStaff ? this.state.editStaff.role : null,\n                type: SELECT_FIELD,\n                options: ROLES.map(role => ({label: role.label, value: [role.value]}))\n            }, {\n                label: \"Schedule SMS\",\n                key: \"schedule_sms\",\n                initialValue: this.state.editStaff ? this.state.editStaff.schedule_sms : false,\n                type: SINGLE_CHECKBOX_FIELD,\n            }, {\n                label: \"Confirmation SMS\",\n                key: \"confirmation_sms\",\n                initialValue: this.state.editStaff ? this.state.editStaff.confirmation_sms : false,\n                type: SINGLE_CHECKBOX_FIELD,\n            }, {\n                label: \"Confirmation Email\",\n                key: \"confirmation_email\",\n                initialValue: this.state.editStaff ? this.state.editStaff.confirmation_email : false,\n                type: SINGLE_CHECKBOX_FIELD,\n            }, {\n                label: \"Online Appointment SMS\",\n                key: \"online_appointment_sms\",\n                initialValue: this.state.editStaff ? this.state.editStaff.online_appointment_sms : false,\n                type: SINGLE_CHECKBOX_FIELD,\n            },]\n        const formProp = {\n            successFn: function (data) {\n                displayMessage(SUCCESS_MSG_TYPE, \"success\");\n                console.log(\"all data\", data);\n                that.setState({\n                    redirect: true\n\n                });\n                that.props.loadData();\n            },\n            errorFn: function () {\n\n            },\n            action: ALL_PRACTICE_STAFF,\n            method: \"post\",\n        }\n        let editformProp;\n        if (this.state.editStaff) {\n\n            editformProp = {\n                successFn: function (data) {\n                    displayMessage(SUCCESS_MSG_TYPE, \"success\");\n                    that.setState({\n                        redirect: true,\n                    });\n                    that.props.loadData();\n                },\n                errorFn: function () {\n\n                },\n                action: interpolate(SINGLE_PRACTICE_STAFF_API, [that.props.match.params.staffid]),\n                method: \"put\",\n            }\n        }\n        const defaultValues = [];\n\n        const TestFormLayout = Form.create()(DynamicFieldsForm);\n        return <Row>\n            <Card>\n                <Route exact path='/settings/clinics-staff/staff/:staffid/edit'\n                       render={(route) => (this.props.match.params.staffid ?\n                           <TestFormLayout defaultValues={defaultValues} title=\"Edit Staff\"\n                                           changeRedirect={this.changeRedirect} formProp={editformProp}\n                                           fields={fields} {...route}/> : <Redirect to={'/settings/clinics-staff'}/>)}/>\n\n                <Route exact path='/settings/clinics-staff/addstaff'\n                       render={(route) => <TestFormLayout defaultValues={defaultValues} changeRedirect={this.changeRedirect}\n                                                     title=\"Add Staff \" formProp={formProp} fields={fields} {...route}/>}/>\n            </Card>\n            {this.state.redirect && <Redirect to='/settings/clinics-staff'/>}\n\n        </Row>\n    }\n}\n\nexport default AddEditStaff;\n","import React from \"react\";\nimport DynamicFieldsForm from \"../../../common/DynamicFieldsForm\";\nimport {Card, Form, Row} from \"antd\";\nimport {\n    EMAIL_FIELD,\n    INPUT_FIELD,\n    SELECT_FIELD,\n    SINGLE_IMAGE_UPLOAD_FIELD,\n    SUCCESS_MSG_TYPE\n} from \"../../../../constants/dataKeys\";\nimport {ALL_PRACTICE, EXTRA_DATA} from \"../../../../constants/api\";\nimport {displayMessage, getAPI} from \"../../../../utils/common\";\nimport {Redirect} from 'react-router-dom'\nimport {LANGUAGE, SMS_LANGUAGE_CONFIG_PARAM} from \"../../../../constants/hardData\";\nimport {loadConfigParameters} from \"../../../../utils/clinicUtils\";\n\n\nclass AddPracticeDetails extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            redirect: false,\n            specialisations: null,\n            countries: null,\n            [SMS_LANGUAGE_CONFIG_PARAM]: []\n        }\n        this.changeRedirect = this.changeRedirect.bind(this);\n    }\n\n    componentDidMount() {\n        var that = this;\n        let successFn = function (data) {\n            let specialisations = {};\n            data.specialisation.forEach(function (speciality) {\n                specialisations[speciality.id] = speciality\n            });\n            console.log(specialisations);\n\n            that.setState({\n                specialisations: data.specialisation,\n                countries: data.country,\n            })\n        };\n        let errorFn = function () {\n        };\n        getAPI(EXTRA_DATA, successFn, errorFn);\n        loadConfigParameters(this, [SMS_LANGUAGE_CONFIG_PARAM]);\n    }\n\n    changeRedirect() {\n        var redirectVar = this.state.redirect;\n        this.setState({\n            redirect: !redirectVar,\n        });\n    }\n\n    render() {\n\n        let specialisationsOptions = []\n        if (this.state.specialisations) {\n            this.state.specialisations.forEach(function (specialisation) {\n                specialisationsOptions.push({label: (specialisation.name), value: specialisation.id});\n            })\n        }\n        const fields = [{\n            label: \"Practice Logo\",\n            key: \"logo\",\n            type: SINGLE_IMAGE_UPLOAD_FIELD,\n            allowWebcam: false\n        }, {\n            label: \"Practice Name\",\n            key: \"name\",\n            placeholder: \"Practice Name\",\n            required: true,\n            type: INPUT_FIELD\n        }, {\n            label: \"Practice Tagline\",\n            key: \"tagline\",\n            placeholder: \"Practice Tagline\",\n            required: true,\n            type: INPUT_FIELD\n        }, {\n            label: \"Practice Specialisation\",\n            key: \"specialisation\",\n            placeholder: \"Practice Specialisation\",\n            type: INPUT_FIELD,\n            // options: specialisationsOptions,\n        }, {\n            label: \"Practice Street Address\",\n            key: \"address\",\n            placeholder: \"Practice Street Address\",\n            type: INPUT_FIELD\n        }, {\n            label: \"Practice Locality\",\n            key: \"locality\",\n            placeholder: \"Practice Locality\",\n            type: INPUT_FIELD\n        }, {\n            label: \"Practice Country\",\n            key: \"country\",\n            placeholder: \"Practice Country\",\n            type: INPUT_FIELD,\n        }, {\n            label: \"Practice State\",\n            key: \"state\",\n            placeholder: \"Practice State\",\n            type: INPUT_FIELD,\n        }, {\n            label: \"Practice City\",\n            key: \"city\",\n            placeholder: \"Practice City\",\n            type: INPUT_FIELD,\n        }, {\n            label: \"Practice PINCODE\",\n            key: \"pincode\",\n            placeholder: \"Practice PINCODE\",\n            type: INPUT_FIELD\n        }, {\n            label: \"Practice Contact Number\",\n            key: \"contact\",\n            placeholder: \"Practice Contact Number\",\n            type: INPUT_FIELD\n        }, {\n            label: \"Practice Email\",\n            key: \"email\",\n            placeholder: \"Practice Email\",\n            type: EMAIL_FIELD\n        }, {\n            label: \"SMS Language\",\n            key: \"language\",\n            placeholder: 'SMS Language',\n            initialValue: this.props.activePracticeData.language ? this.props.activePracticeData.language : [],\n            type: SELECT_FIELD,\n            options: this.state[SMS_LANGUAGE_CONFIG_PARAM].map(item => {\n                return {label: item, value: item}\n            }),\n        }, {\n            label: \"Practice Website\",\n            key: \"website\",\n            placeholder: \"Practice Website\",\n            type: INPUT_FIELD\n        }, {\n            label: \"GSTIN\",\n            key: \"gstin\",\n            placeholder: \"GSTIN\",\n            type: INPUT_FIELD\n        }, {\n            label: \"Invoice Prefix\",\n            placeholder: \"DEL/INV/\",\n            key: \"invoice_prefix\",\n            type: INPUT_FIELD,\n            required: true\n        }, {\n            label: \"Payment Prefix\",\n            placeholder: \"DEL/RCPT/\",\n            key: \"payment_prefix\",\n            type: INPUT_FIELD,\n            required: true\n        },\n            {\n                label: \"Return Prefix\",\n                placeholder: \"DEL/RET/\",\n                key: \"return_prefix\",\n                type: INPUT_FIELD,\n                required: true\n            }];\n\n        const formProp = {\n            successFn: function (data) {\n                displayMessage(SUCCESS_MSG_TYPE, \"success\")\n\n                console.log(data);\n            },\n            errorFn: function () {\n\n            },\n            action: ALL_PRACTICE,\n            method: \"post\",\n        }\n\n        const TestFormLayout = Form.create()(DynamicFieldsForm);\n        return <Row>\n            <Card>\n                <TestFormLayout title=\"Practice Details\" changeRedirect={this.changeRedirect} formProp={formProp}\n                                fields={fields} {...this.props}/>\n            </Card>\n            {this.state.redirect && <Redirect to='/settings/clinics'/>}\n        </Row>\n    }\n}\n\nexport default AddPracticeDetails;\n","import React from \"react\";\nimport DynamicFieldsForm from \"../../../common/DynamicFieldsForm\";\nimport {Form} from \"antd\";\nimport {SMS_FIELD, SUCCESS_MSG_TYPE, SINGLE_CHECKBOX_FIELD} from \"../../../../constants/dataKeys\";\nimport {APPOINTMENT_CONFIRMATION_SMS_TAG_OPTIONS} from \"../../../../constants/hardData\";\nimport {displayMessage, interpolate, getAPI} from \"../../../../utils/common\";\nimport {COMMUNICATONS_API} from \"../../../../constants/api\";\n\n\nclass WishSMS extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n\n        }\n        this.loadWishSMS =this.loadWishSMS.bind(this);\n    }\n    componentDidMount() {\n        this.loadWishSMS();\n    }\n\n    loadWishSMS(){\n        let that=this;\n        let successFn =function(data){\n            that.setState({\n                wishsmsData:data[data.length-1]\n            })\n        }\n        let errorFn= function() {\n            \n        }\n        getAPI(interpolate(COMMUNICATONS_API, [this.props.active_practiceId]), successFn, errorFn);\n\n    }\n\n    render() {\n        console.log(\"wishSMS\",this.state.wishsmsData)\n        let that = this;\n        const fields = [{\n            key: \"birthday_wish_sms\",\n            initialValue: this.state.wishsmsData ? this.state.wishsmsData.birthday_wish_sms : false,\n            type: SINGLE_CHECKBOX_FIELD,\n            extra: \"This SMS is sent to the Patient on the morning of their birthday\",\n            follow: <b>BIRTHDAY WISH SMS</b>\n        }, {\n            key: \"birthday_wish_text\",\n            placeholder: \"{clinic}{patient}}\",\n            initialValue: this.state.wishsmsData ? this.state.wishsmsData.birthday_wish_text : ' ',\n            minRows: 4,\n            type: SMS_FIELD,\n            options: APPOINTMENT_CONFIRMATION_SMS_TAG_OPTIONS,\n\n        }, {\n            key: \"anniversary_wish_sms\",\n            initialValue: this.state.wishsmsData ? this.state.wishsmsData.anniversary_wish_sms : false,\n            type: SINGLE_CHECKBOX_FIELD,\n            extra: \"This SMS is sent to the Patient on the morning of their anniversary\",\n            follow: <b>ANNIVERSARY WISH SMS</b>\n        }, {\n            key: \"anniversary_wish_text\",\n            placeholder: \"{anniversary}\",\n            initialValue:this.state.wishsmsData ? this.state.wishsmsData.anniversary_wish_text :' ',\n            minRows: 4,\n            type: SMS_FIELD,\n            options: APPOINTMENT_CONFIRMATION_SMS_TAG_OPTIONS\n        }, {\n            key: \"online_appointment_sms\",\n            type: SINGLE_CHECKBOX_FIELD,\n            initialValue:this.state.wishsmsData ? this.state.wishsmsData.online_appointment_sms:false,\n            extra: \"This SMS is sent to the Patient when they request an appointment on your practice marketing page\",\n            follow: <b>ONLINE APPOINTMENT SMS</b>\n        }, {\n            key: \"online_appointment_text\",\n            placeholder: \"{online appointment}\",\n            initialValue:this.state.wishsmsData ? this.state.wishsmsData.online_appointment_text :' ',\n            minRows: 4,\n            type: SMS_FIELD,\n            options: APPOINTMENT_CONFIRMATION_SMS_TAG_OPTIONS\n        }];\n        const formProp = {\n            successFn: function (data) {\n                displayMessage(SUCCESS_MSG_TYPE, \"success\");\n            },\n            errorFn: function () {\n\n            },\n            action: interpolate(COMMUNICATONS_API, [that.props.active_practiceId]),\n            method: \"post\",\n        };\n        const defaultValues = [{\"key\": \"practice\", \"value\": this.props.active_practiceId},\n            {\"key\": \"id\",\"value\": this.state.wishsmsData ? this.state.wishsmsData.id : null,}\n        ];\n\n        const TestFormLayout = Form.create()(DynamicFieldsForm);\n        return <div>\n            <TestFormLayout formProp={formProp} defaultValues={defaultValues}\n                            fields={fields}/>\n        </div>\n    }\n}\n\nexport default WishSMS;\n","import React from \"react\";\nimport DynamicFieldsForm from \"../../../common/DynamicFieldsForm\";\nimport {Col, Form, Row, Select} from \"antd\";\nimport {\n    SUCCESS_MSG_TYPE,\n    INPUT_FIELD, SMS_FIELD, SINGLE_CHECKBOX_FIELD, TIME_PICKER, SELECT_FIELD, LABEL_FIELD\n} from \"../../../../constants/dataKeys\";\nimport {COMMUNICATONS_API} from \"../../../../constants/api\"\nimport {getAPI, displayMessage, interpolate} from \"../../../../utils/common\";\nimport {\n    APPOINTMENT_CONFIRMATION_SMS_TAG_OPTIONS, LANGUAGE, PROMO_CODE_SMS_TAG_OPTIONS, SMS_LANGUAGE_CONFIG_PARAM\n} from \"../../../../constants/hardData\";\nimport moment from \"moment\";\nimport {loadConfigParameters} from \"../../../../utils/clinicUtils\";\n\n\nclass AppointmentSMS extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            redirect: false,\n            data: null,\n            language: this.props.activePracticeData && this.props.activePracticeData.language ? this.props.activePracticeData.language : '',\n            [SMS_LANGUAGE_CONFIG_PARAM]:[]\n        };\n        this.loadData = this.loadData.bind(this);\n    }\n\n    componentDidMount() {\n        this.loadData();\n        loadConfigParameters(this, [SMS_LANGUAGE_CONFIG_PARAM]);\n    }\n\n    loadData() {\n        var that = this;\n        let reqData = {};\n        let successFn = function (data) {\n            console.log(\"length\", data.length - 1);\n            that.setState({\n                data: data[data.length - 1],\n            })\n        };\n        let errorFn = function () {\n        };\n        if (that.state.language) {\n            reqData.language = that.state.language;\n        }\n        getAPI(interpolate(COMMUNICATONS_API, [this.props.active_practiceId]), successFn, errorFn, reqData);\n    }\n\n    changeRedirect() {\n        var redirectVar = this.state.redirect;\n        this.setState({\n            redirect: !redirectVar,\n        });\n    }\n\n    handleChangeLanguage = (type, value) => {\n        let that = this;\n        that.setState({\n            [type]: value,\n        }, function () {\n            that.loadData();\n        })\n    };\n\n    render() {\n        let that = this;\n        const fields = [\n            //     {\n            //     label: \"SMS Language\",\n            //     key: \"sms_language\",\n            //     placeholder:\"SMS Language\",\n            //     initialValue: this.state.data && this.state.data.sms_language? this.state.data.sms_language : this.props.activePracticeData.language,\n            //     extra: \"SMS to Patients will be sent in this language\",\n            //     type: SELECT_FIELD,\n            //     options:LANGUAGE,\n            //     // onchange:()\n            // },\n            {\n                label: \"Contact Number\",\n                key: \"contact_number\",\n                placeholder: \"Contact Number\",\n                initialValue: this.state.data ? this.state.data.contact_number : ' ',\n                extra: \"Maximum 15 characters & represented as {{CLINICCONTACTNUMBER}}\",\n                type: INPUT_FIELD\n            }, {\n                label: \"Email\",\n                key: \"email\",\n                placeholder: \"Email Address\",\n                initialValue: this.state.data ? this.state.data.email : ' ',\n                extra: \"All replies by Patients for emails will be sent to this address\",\n                type: INPUT_FIELD\n            }, {\n                label: \"SMS clinic Name\",\n                key: \"sms_clinic_name\",\n                placeholder: \"Clinic Name\",\n                initialValue: this.state.data ? this.state.data.sms_clinic_name : ' ',\n                extra: \"{{CLINIC}} will use this name.\",\n                type: INPUT_FIELD,\n            }, {\n                key: \"appointment_confirmation_sms\",\n                placeholder: \"Appointment Confirmation SMS Text\",\n                initialValue: this.state.data ? this.state.data.appointment_confirmation_sms : false,\n                type: SINGLE_CHECKBOX_FIELD,\n                extra: \"SMS is sent to the Patient on successfully adding an appointment\",\n                follow: <b>APPOINTMENT CONFIRMATION SMS</b>\n            }, {\n                key: \"appointment_confirmation_text\",\n                placeholder: \"Appointment Cancellation SMS Text\",\n                initialValue: this.state.data ? this.state.data.appointment_confirmation_text : null,\n                minRows: 4,\n                type: SMS_FIELD,\n                options: APPOINTMENT_CONFIRMATION_SMS_TAG_OPTIONS\n            }, {\n                key: \"appointment_cancellation_sms\",\n                initialValue: this.state.data ? this.state.data.appointment_cancellation_sms : false,\n                type: SINGLE_CHECKBOX_FIELD,\n                extra: \"SMS is sent to the Patient when the appointment is cancelled\",\n                follow: <b>APPOINTMENT CANCELLATION SMS</b>\n            }, {\n                key: \"appointment_cancellation_text\",\n                placeholder: \"Appointment Cancellation SMS Text\",\n                initialValue: this.state.data ? this.state.data.appointment_cancellation_text : null,\n                minRows: 4,\n                type: SMS_FIELD,\n                options: APPOINTMENT_CONFIRMATION_SMS_TAG_OPTIONS\n            }, {\n                key: \"appointment_reminder_sms\",\n                placeholder: \"Appointment Reminder SMS Text\",\n                initialValue: this.state.data ? this.state.data.appointment_reminder_sms : false,\n                type: SINGLE_CHECKBOX_FIELD,\n                extra: \"This SMS is automatically sent to the Patient at selected time & date before the appointment.\",\n                follow: <b>APPOINTMENT REMINDER SMS</b>\n            }, {\n                key: \"appointment_reminder_text\",\n                placeholder: \"Appointment Reminder SMS Text\",\n                initialValue: this.state.data ? this.state.data.appointment_reminder_text : null,\n                minRows: 4,\n                type: SMS_FIELD,\n                options: APPOINTMENT_CONFIRMATION_SMS_TAG_OPTIONS\n            }, {\n                key: \"send_on_day_of_appointment\",\n                initialValue: this.state.data ? this.state.data.send_on_day_of_appointment : false,\n                type: SINGLE_CHECKBOX_FIELD,\n                follow: \"Send reminder SMS on the day of appointment at 7:30 AM\",\n            }, {\n                key: \"send_on_day_of_appointment\",\n                initialValue: this.state.data ? this.state.data.send_on_day_of_appointment : false,\n                follow: \"Send reminder SMS on the day before the appointment at\",\n                type: SINGLE_CHECKBOX_FIELD,\n            }, {\n                key: \"send_on_day_of_appointment_time\",\n                initialValue: this.state.data && moment(this.state.data.send_on_day_of_appointment_time).isValid() ? moment(this.state.data.send_on_day_of_appointment_time) : null,\n                type: TIME_PICKER\n            }, {\n                key: \"follow_up_reminder_sms\",\n                initialValue: this.state.data ? this.state.data.follow_up_reminder_sms : false,\n                type: SINGLE_CHECKBOX_FIELD,\n                extra: \"This SMS is sent to the Patient on the morning of the followup sms.\",\n                follow: <b>FOLLOW UP REMINDER SMS</b>\n            }, {\n                key: \"follow_up_reminder_sms_text\",\n                placeholder: \"Follow-up Reminder SMS Text\",\n                initialValue: this.state.data ? this.state.data.follow_up_reminder_sms_text : null,\n                minRows: 4,\n                type: SMS_FIELD,\n                options: APPOINTMENT_CONFIRMATION_SMS_TAG_OPTIONS\n            }, {\n                key: \"send_follow_up_reminder_time\",\n                initialValue: this.state.data ? this.state.data.send_follow_up_reminder_time : null,\n                extra: \"Time to Send follow-up SMS after the last appointment.\",\n                type: SELECT_FIELD,\n                options: [{label: '1 Month', value: 1}, {label: '3 Month', value: 3}, {label: '6 Month', value: 6}]\n            }, {\n                key: \"payment_sms\",\n                initialValue: this.state.data ? this.state.data.payment_sms : false,\n                type: SINGLE_CHECKBOX_FIELD,\n                extra: \"This SMS is sent to the Patient when payment is received.\",\n                follow: <b>PAYMENT SMS</b>\n            }, {\n                key: \"payment_sms_text\",\n                placeholder: \"Payment SMS Text\",\n                initialValue: this.state.data ? this.state.data.payment_sms_text : null,\n                minRows: 4,\n                type: SMS_FIELD,\n                options: APPOINTMENT_CONFIRMATION_SMS_TAG_OPTIONS\n            }, {\n                key: \"promo_code_text\",\n                initialValue: this.state.data ? this.state.data.promo_code_text : false,\n                type: LABEL_FIELD,\n                extra: \"This SMS is sent to the Patient when payment is received.\",\n                follow: <b>PROMO CODE SMS TEXT</b>\n            }, {\n                key: \"promo_code_text\",\n                placeholder: \"Promo Code  SMS Text\",\n                initialValue: this.state.data ? this.state.data.payment_sms_text : null,\n                minRows: 4,\n                type: SMS_FIELD,\n                options: PROMO_CODE_SMS_TAG_OPTIONS\n            },\n            {\n                key: \"lab_order_confirmation_sms\",\n                initialValue: this.state.data ? this.state.data.lab_order_confirmation_sms : false,\n                type: SINGLE_CHECKBOX_FIELD,\n                extra: \"This SMS is sent to the Patient when he is prescribed a lab order.\",\n                follow: <b>LAB ORDER CONFIRMATION SMS</b>\n            }, {\n                key: \"lab_order_confirmation_text\",\n                placeholder: \"Lab Order Confirmation SMS Text\",\n                initialValue: this.state.data ? this.state.data.lab_order_confirmation_text : null,\n                minRows: 4,\n                type: SMS_FIELD,\n                options: APPOINTMENT_CONFIRMATION_SMS_TAG_OPTIONS\n            }, {\n                key: \"lab_order_due_on_sms\",\n                placeholder: \"Lab Order Due On SMS Text\",\n                initialValue: this.state.data ? this.state.data.lab_order_due_on_sms : false,\n                extra: \"This SMS is sent to the Patient informing lab order due date\",\n                type: SINGLE_CHECKBOX_FIELD,\n                follow: <b>LAB ORDER DUE ON SMS</b>\n            }, {\n                key: \"lab_order_result_sms\",\n                initialValue: this.state.data ? this.state.data.lab_order_result_sms : false,\n                extra: \"This SMS is sent to the Patient when lab order results are ready\",\n                type: SINGLE_CHECKBOX_FIELD,\n                follow: <b>LAB ORDER RESULT SMS</b>\n            }, {\n                key: \"lab_order_reminder_sms\",\n                initialValue: this.state.data ? this.state.data.lab_order_reminder_sms : false,\n                type: SINGLE_CHECKBOX_FIELD,\n                extra: \"This reminder SMS is sent to the Patient\",\n                follow: <b>LAB ORDER REMINDER SMS</b>\n            },];\n        const formProp = {\n            successFn: function (data) {\n                displayMessage(SUCCESS_MSG_TYPE, \"success\");\n                that.loadData();\n            },\n            errorFn: function () {\n\n            },\n            action: interpolate(COMMUNICATONS_API, [that.props.active_practiceId]),\n            method: \"post\",\n        };\n        const defaultValues = [\n            {\"key\": \"practice\", \"value\": this.props.active_practiceId},\n            {\"key\": \"id\", \"value\": this.state.data ? this.state.data.id : null},\n            {\"key\": \"sms_language\", \"value\": this.state.language}\n        ];\n\n        const TestFormLayout = Form.create()(DynamicFieldsForm);\n        return <div>\n            <Row>\n                <Col span={8}>\n                    <span style={{float: 'right', color: 'rgba(0, 0, 0, 0.85)'}}>SMS Language : &nbsp;</span>\n                </Col>\n                <Col span={8}>\n                    <Select\n                        defaultValue={this.data && this.data.sms_language ? this.data.sms_language : that.state.language}\n                        style={{width: 220}} onChange={(value) => this.handleChangeLanguage('language', value)}>\n                        {this.state[SMS_LANGUAGE_CONFIG_PARAM].map((option) => <Select.Option value={option}>\n                            {option}\n                        </Select.Option>)}\n                    </Select>\n                    <br/>\n                    <span>SMS to Patients will be sent in this language</span>\n                </Col>\n\n            </Row>\n\n            <TestFormLayout formProp={formProp} defaultValues={defaultValues}\n                            fields={fields} {...this.props}/>\n        </div>\n    }\n}\n\nexport default AppointmentSMS;\n","import React from \"react\";\nimport DynamicFieldsForm from \"../../../common/DynamicFieldsForm\";\nimport {Form} from \"antd\";\nimport {\n    DIVIDER_FIELD,\n    SUCCESS_MSG_TYPE,\n    SINGLE_CHECKBOX_FIELD, TIME_PICKER, MAIL_TEMPLATE_FIELD, INPUT_FIELD, SINGLE_IMAGE_UPLOAD_FIELD\n} from \"../../../../constants/dataKeys\";\nimport {EMAIL_COMMUNICATONS_API} from \"../../../../constants/api\"\nimport {getAPI, displayMessage, interpolate} from \"../../../../utils/common\";\nimport moment from \"moment/moment\";\nimport {APPOINTMENT_CONFIRMATION_SMS_TAG_OPTIONS} from \"../../../../constants/hardData\";\n\n\nclass Emails extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {};\n        this.loadData = this.loadData.bind(this);\n    }\n\n    componentDidMount() {\n        this.loadData();\n    }\n\n    loadData() {\n        var that = this;\n        let successFn = function (data) {\n            that.setState({\n                data: data[0],\n            })\n        };\n        let errorFn = function () {\n        };\n        getAPI(interpolate(EMAIL_COMMUNICATONS_API, [this.props.active_practiceId]), successFn, errorFn);\n    }\n\n    render() {\n        let that = this;\n        const fields = [{\n            label: \"Contact Number\",\n            key: \"contact_number\",\n            placeholder: \"Contact Number\",\n            initialValue: this.state.data ? this.state.data.contact_number : ' ',\n            extra: \"Maximum 15 characters & represented as {{CLINICCONTACTNUMBER}}\",\n            type: INPUT_FIELD\n        }, {\n            label: \"Email\",\n            key: \"email\",\n            placeholder: \"Email Address\",\n            initialValue: this.state.data ? this.state.data.email : ' ',\n            extra: \"All replies by Patients for emails will be sent to this address\",\n            type: INPUT_FIELD\n        },{\n            label: \"SMS clinic Name\",\n            key: \"email_clinic_name\",\n            placeholder: \"Clinic Name\",\n            initialValue: this.state.data ? this.state.data.email_clinic_name : ' ',\n            extra: \"{{CLINIC}} will use this name.\",\n            type: INPUT_FIELD,\n        },{\n            label:'Clinic Logo',\n            key:'clinic_logo',\n            // initialValue: this.state.data ? this.state.data.clinic_logo : ' ',\n            type:SINGLE_IMAGE_UPLOAD_FIELD\n        },{\n            key: \"appointment_confirmation_email\",\n            initialValue: this.state.data ? this.state.data.appointment_confirmation_email : false,\n            type: SINGLE_CHECKBOX_FIELD,\n            follow: <b>APPOINTMENT CONFIRMATION EMAIL</b>,\n            options: [],\n            extra: \"Email is sent to the Patient on successfully adding an appointment\"\n        }, {\n            key: \"appointment_confirmation_email_text\",\n            initialValue: this.state.data ? this.state.data.appointment_confirmation_email_text : '',\n            type: MAIL_TEMPLATE_FIELD,\n            options: APPOINTMENT_CONFIRMATION_SMS_TAG_OPTIONS,\n        }, {\n            type: DIVIDER_FIELD\n        }, {\n            key: \"appointment_cancellation_email\",\n            initialValue: this.state.data ? this.state.data.appointment_cancellation_email : false,\n            type: SINGLE_CHECKBOX_FIELD,\n            follow: <b>APPOINTMENT CANCELLATION EMAIL</b>,\n            extra: \"Email is sent to the Patient when the appointment is cancelled\"\n        }, {\n            key: \"appointment_cancellation_email_text\",\n            initialValue: this.state.data ? this.state.data.appointment_cancellation_email_text : '',\n            type: MAIL_TEMPLATE_FIELD,\n            options: APPOINTMENT_CONFIRMATION_SMS_TAG_OPTIONS,\n        }, {\n            type: DIVIDER_FIELD\n        }, {\n            key: \"appointment_reminder_email\",\n            initialValue: this.state.data ? this.state.data.appointment_reminder_email : false,\n            type: SINGLE_CHECKBOX_FIELD,\n            follow: <b>APPOINTMENT REMINDER EMAIL</b>,\n            extra: \"Email is sent to the Patient on the morning of the appointment date\"\n        }, {\n            key: \"send_on_day_of_appointment\",\n            initialValue: this.state.data ? this.state.data.send_on_day_of_appointment : false,\n            type: SINGLE_CHECKBOX_FIELD,\n            follow: \"Send reminder SMS on the day of appointment at 7:30 AM\",\n        }, {\n            key: \"send_before_day_of_appointment\",\n            initialValue: this.state.data ? this.state.data.send_before_day_of_appointment : false,\n            follow: \"Send reminder SMS on the day before the appointment at\",\n            type: SINGLE_CHECKBOX_FIELD,\n        }, {\n            key: \"send_on_day_of_appointment_time\",\n            initialValue: this.state.data && moment(this.state.data.send_on_day_of_appointment_time).isValid() ? moment(this.state.data.send_on_day_of_appointment_time) : null,\n            type: TIME_PICKER\n        }, {\n            key: \"appointment_cancellation_email_text\",\n            initialValue: this.state.data ? this.state.data.appointment_cancellation_email_text : '',\n            type: MAIL_TEMPLATE_FIELD,\n            options: APPOINTMENT_CONFIRMATION_SMS_TAG_OPTIONS,\n        }, {\n            type: DIVIDER_FIELD\n        }, {\n            key: \"followup_reminder_email\",\n            initialValue: this.state.data ? this.state.data.followup_reminder_email : false,\n            type: SINGLE_CHECKBOX_FIELD,\n            follow: <b>FOLLOW-UP REMINDER EMAIL</b>,\n            extra: \"Email is sent to the Patient on the morning of their planned follow-up date\"\n        }, {\n            key: \"appointment_reminder_email_text\",\n            initialValue: this.state.data ? this.state.data.appointment_reminder_email_text : '',\n            type: MAIL_TEMPLATE_FIELD,\n            options: APPOINTMENT_CONFIRMATION_SMS_TAG_OPTIONS,\n        }, {\n            type: DIVIDER_FIELD\n        }, {\n            key: \"birthday_wish_email\",\n            initialValue: this.state.data ? this.state.data.birthday_wish_email : false,\n            type: SINGLE_CHECKBOX_FIELD,\n            follow: <b>BIRTHDAY WISH EMAIL</b>,\n            extra: \"Email is sent to the Patient on the morning of their birthday\"\n        }, {\n            key: \"birthday_wish_email_text\",\n            initialValue: this.state.data ? this.state.data.birthday_wish_email_text : '',\n            type: MAIL_TEMPLATE_FIELD,\n            options: APPOINTMENT_CONFIRMATION_SMS_TAG_OPTIONS,\n        }, {\n            type: DIVIDER_FIELD\n        }, {\n            key: \"lab_order_confirmation_email\",\n            initialValue: this.state.data ? this.state.data.lab_order_confirmation_email : false,\n            type: SINGLE_CHECKBOX_FIELD,\n            follow: <b>LAB ORDER CONFIRMATION EMAIL</b>,\n            extra: \"Email is sent to the Patient when he is prescribed a Lab Order\"\n        }, {\n            key: \"lab_order_confirmation_email_text\",\n            initialValue: this.state.data ? this.state.data.lab_order_confirmation_email_text : '',\n            type: MAIL_TEMPLATE_FIELD,\n            options: APPOINTMENT_CONFIRMATION_SMS_TAG_OPTIONS,\n        }, {\n            type: DIVIDER_FIELD\n        }, {\n            key: \"lab_order_due_date_email\",\n            initialValue: this.state.data ? this.state.data.lab_order_due_date_email : false,\n            type: SINGLE_CHECKBOX_FIELD,\n            follow: <b>LAB ORDER DUE DATE EMAIL</b>,\n            extra: \"Email is sent to the Patient when due date is entered for a Lab Order\"\n        }, {\n            key: \"lab_order_due_date_email_text\",\n            initialValue: this.state.data ? this.state.data.lab_order_due_date_email_text : '',\n            type: MAIL_TEMPLATE_FIELD,\n            options: APPOINTMENT_CONFIRMATION_SMS_TAG_OPTIONS,\n        }, {\n            type: DIVIDER_FIELD\n        }, {\n            key: \"lab_order_result_email\",\n            initialValue: this.state.data ? this.state.data.lab_order_result_email : false,\n            type: SINGLE_CHECKBOX_FIELD,\n            follow: <b>LAB ORDER RESULT EMAIL</b>,\n            extra: \"Email is sent to the Patient when result for a Lab Order is ready\"\n        }, {\n            key: \"alab_order_result_email_text\",\n            initialValue: this.state.data ? this.state.data.alab_order_result_email_text : '',\n            type: MAIL_TEMPLATE_FIELD,\n            options: APPOINTMENT_CONFIRMATION_SMS_TAG_OPTIONS,\n        }, {\n            type: DIVIDER_FIELD\n        }, {\n            key: \"anniversary_wish_email\",\n            initialValue: this.state.data ? this.state.data.anniversary_wish_email : false,\n            type: SINGLE_CHECKBOX_FIELD,\n            follow: <b>ANNIVERSARY WISH EMAIL</b>,\n            extra: \"Email is sent to the Patient on the morning of their anniversary\"\n        }, {\n            key: \"anniversary_wish_email_text\",\n            initialValue: this.state.data ? this.state.data.anniversary_wish_email_text : '',\n            type: MAIL_TEMPLATE_FIELD,\n            options: APPOINTMENT_CONFIRMATION_SMS_TAG_OPTIONS,\n        }];\n\n        const formProp = {\n            successFn: function (data) {\n                displayMessage(SUCCESS_MSG_TYPE, \"Communication Settings Saved Successfully!!\");\n                console.log(\"form\",data);\n            },\n            errorFn: function () {\n\n            },\n            action: interpolate(EMAIL_COMMUNICATONS_API, [that.props.active_practiceId]),\n            method: \"post\",\n        };\n\n        const defaultValues = [{\"key\": \"practice\", \"value\": this.props.active_practiceId, \"is_active\": false}, {\n            \"key\": \"id\",\n            \"value\": this.state.data ? this.state.data.id : null,\n        }];\n\n        const TestFormLayout = Form.create()(DynamicFieldsForm);\n        return <div>\n            <TestFormLayout formProp={formProp} defaultValues={defaultValues}\n                            fields={fields} {...this.props}/>\n        </div>\n    }\n}\n\nexport default Emails;\n","import React from \"react\";\nimport {Form, Button, Card, Icon, Tabs, Divider, Tag, Row, Table} from \"antd\";\nimport WishSMS from \"./WishSMS\";\nimport AppointmentSMS from \"./AppointmentSMS\";\nimport Emails from \"./Emails\";\n\n\nconst TabPane = Tabs.TabPane;\n\n\nclass CommunicationSettings extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            // loading:false\n        }\n    }\n\n    render() {\n        return <div>\n            <Row>\n                <h2>Communication Settings</h2>\n                <Card>\n                    <Tabs defaultActiveKey=\"appointmentsms\">\n                        <TabPane tab={<span><Icon type=\"schedule\"/>Appointment & FollowUp SMS</span>}\n                                 key=\"appointmentsms\">\n                            <AppointmentSMS {...this.props}/>\n                        </TabPane>\n                        <TabPane tab={<span><Icon type=\"mail\"/>Emails</span>} key=\"emails\">\n                            <Emails {...this.props}/>\n                        </TabPane>\n                        <TabPane tab={<span><Icon type=\"android\"/>Wish SMS</span>} key=\"wishsms\">\n                            <WishSMS {...this.props}/>\n                        </TabPane>\n                    </Tabs>\n                </Card>\n            </Row>\n        </div>\n    }\n}\n\nexport default CommunicationSettings;\n","import React from \"react\";\nimport DynamicFieldsForm from \"../../../common/DynamicFieldsForm\";\nimport {Form, Card, message} from \"antd\";\nimport {\n    CHECKBOX_FIELD,\n    SUCCESS_MSG_TYPE,\n    INPUT_FIELD,\n    RADIO_FIELD,\n    SELECT_FIELD,\n    NUMBER_FIELD\n} from \"../../../../constants/dataKeys\";\nimport {PROCEDURE_CATEGORY, PRODUCT_MARGIN, TAXES} from \"../../../../constants/api\"\nimport {getAPI, displayMessage, interpolate} from \"../../../../utils/common\";\nimport {Redirect} from \"react-router-dom\";\n\nclass EditProcedure extends React.Component {\n    constructor(props) {\n\n        super(props);\n        this.state = {\n            taxes: [],\n            procedure_category: [],\n            redirect: false,\n            productMargin: [],\n            editingProcedureData: this.props.editingProcedureData,\n            loading: true\n        }\n        this.loadTaxes = this.loadTaxes.bind(this);\n        this.loadProcedures = this.loadProcedures.bind(this)\n        this.loadTaxes();\n        this.loadProductMargin();\n    }\n\n    loadProductMargin() {\n        let that = this;\n        let successFn = function (data) {\n            that.setState({\n                productMargin: data,\n                loading: false\n            })\n        }\n        let errorFn = function () {\n\n        }\n        getAPI(PRODUCT_MARGIN, successFn, errorFn);\n    }\n\n    changeRedirect() {\n        var redirectVar = this.state.redirect;\n        this.setState({\n            redirect: !redirectVar,\n        });\n    }\n\n    componentDidMount() {\n        this.setState({\n            procedure_category: this.props.procedure_category,\n\n        })\n        if (this.props.match.params.id != null) {\n\n\n            //     this.loadProcedures(this.props.match.params.id);\n\n        }\n    }\n\n    loadProcedures(id) {\n        var that = this;\n        var url = `${interpolate(PROCEDURE_CATEGORY, [this.props.active_practiceId])}`;\n        console.log(\"url\", url);\n        let successFn = function (data) {\n            console.log(\"get table\", data);\n            that.setState({\n                procedure_category: data,\n                loading: false\n            })\n        };\n        let errorFn = function () {\n            this.setState({\n                loading: false\n            })\n        };\n\n        getAPI(url, successFn, errorFn);\n    }\n\n    loadTaxes() {\n        let that = this;\n        let successFn = function (data) {\n            console.log(data.map(tax => Object.create({\n                    label: tax.name + (tax.tax_value ? \"(\" + tax.tax_value + \"%)\" : ''),\n                    value: tax.id\n                })\n            ));\n            that.setState({\n                taxes: data\n            })\n        }\n        let errorFn = function () {\n        }\n        getAPI(interpolate(TAXES, [this.props.active_practiceId]), successFn, errorFn);\n    }\n\n    render() {\n        let that = this;\n        const formFields = [{\n            label: \"Procedure Name\",\n            key: \"name\",\n            required: true,\n            initialValue: this.state.editingProcedureData ? this.state.editingProcedureData.name : null,\n            type: INPUT_FIELD\n        }, {\n            label: \"Procedure Cost\",\n            key: \"cost\",\n            follow: \"INR\",\n            initialValue: this.state.editingProcedureData ? this.state.editingProcedureData.cost : null,\n            required: true,\n            type: NUMBER_FIELD,\n        }, {\n            label: \"Applicable Taxes\",\n            key: \"taxes\",\n            initialValue: this.state.editingProcedureData ? this.state.editingProcedureData.taxes : null,\n            type: CHECKBOX_FIELD,\n            options: this.state.taxes.map(tax => Object.create({\n                    label: tax.name + (tax.tax_value ? \"(\" + tax.tax_value + \"%)\" : ''),\n                    value: tax.id\n                })\n            )\n        },\n        //     {\n        //     label: 'MLM Margin Type',\n        //     type: SELECT_FIELD,\n        //     initialValue: (this.state.editFields ? this.state.editFields.margin : null),\n        //     key: 'margin',\n        //     required: true,\n        //     options: that.state.productMargin.map(margin => ({label: margin.name, value: margin.id}))\n        // },\n            {\n            label: \"Add Under\",\n            key: \"under\",\n            type: SELECT_FIELD,\n            options: [{\n                label: \"None\",\n                value: null\n            }].concat(this.state.procedure_category.map(procedure => Object.create({\n                label: procedure.name,\n                value: procedure.id\n            }))),\n            initialValue: this.state.editingProcedureData ? this.state.editingProcedureData.under : null,\n        }, {\n            label: \"Default Note\",\n            key: \"default_notes\",\n            initialValue: this.state.editingProcedureData ? this.state.editingProcedureData.default_notes : null,\n            type: INPUT_FIELD\n        },];\n        const formProp = {\n            successFn: function (data) {\n                displayMessage(SUCCESS_MSG_TYPE, 'success');\n                that.changeRedirect();\n                that.props.loadProcedures();\n\n            },\n            errorFn: function () {\n\n            },\n            action: interpolate(PROCEDURE_CATEGORY, [this.props.active_practiceId]),\n            method: \"post\",\n        }\n        let defaultValues;\n        if (this.props.editingProcedureData) {\n            defaultValues = [{\"key\": \"id\", \"value\": this.props.editingProcedureData.id}];\n        }\n        const TestFormLayout = Form.create()(DynamicFieldsForm);\n        return <div>{that.props.editingProcedureData ? <Card loading={that.state.loading}>\n            <TestFormLayout {...this.props} title=\"Edit Procedure\" defaultValues={defaultValues}\n                            changeRedirect={this.changeRedirect} formProp={formProp} fields={formFields}/>\n            {this.state.redirect && <Redirect to='/settings/procedures'/>}\n        </Card> : <Redirect to='/settings/procedures'/>}\n        </div>\n    }\n}\n\nexport default EditProcedure;\n","import React from \"react\";\nimport DynamicFieldsForm from \"../../../common/DynamicFieldsForm\";\nimport {Form, Card, message} from \"antd\";\nimport {\n    CHECKBOX_FIELD,\n    SUCCESS_MSG_TYPE,\n    INPUT_FIELD,\n    RADIO_FIELD,\n    SELECT_FIELD,\n    NUMBER_FIELD\n} from \"../../../../constants/dataKeys\";\nimport {PROCEDURE_CATEGORY, PRODUCT_MARGIN, TAXES} from \"../../../../constants/api\"\nimport {getAPI, displayMessage, interpolate} from \"../../../../utils/common\";\nimport {Redirect} from \"react-router-dom\";\n\nclass AddProcedure extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            taxes: [],\n            procedure_category: [],\n            redirect: false,\n            productMargin: []\n        }\n        this.loadTaxes = this.loadTaxes.bind(this);\n        this.loadProcedures = this.loadProcedures.bind(this)\n\n    }\n    componentDidMount(){\n        this.loadTaxes();\n        this.loadProcedures();\n        this.loadProductMargin();\n    }\n\n    changeRedirect() {\n        var redirectVar = this.state.redirect;\n        this.setState({\n            redirect: !redirectVar,\n        });\n    }\n\n    loadProductMargin() {\n        let that = this;\n        let successFn = function (data) {\n            that.setState({\n                productMargin: data\n            })\n        }\n        let errorFn = function () {\n\n        }\n        getAPI(PRODUCT_MARGIN, successFn, errorFn);\n    }\n\n    loadProcedures() {\n        var that = this;\n        let successFn = function (data) {\n            console.log(\"get table\");\n            that.setState({\n                procedure_category: data,\n            })\n        };\n        let errorFn = function () {\n        };\n        getAPI(interpolate(PROCEDURE_CATEGORY, [this.props.active_practiceId]), successFn, errorFn);\n    }\n\n    loadTaxes() {\n        let that = this;\n        let successFn = function (data) {\n            console.log(data.map(tax => Object.create({\n                    label: tax.name,\n                    value: tax.id\n                })\n            ));\n            that.setState({\n                taxes: data\n            })\n        }\n        let errorFn = function () {\n        }\n        getAPI(interpolate(TAXES, [this.props.active_practiceId]), successFn, errorFn);\n    }\n\n    render() {\n        let that = this;\n        const formFields = [{\n            label: \"Procedure Name\",\n            key: \"name\",\n            placeholder:\"Procedure Name\",\n            required: true,\n            type: INPUT_FIELD\n        }, {\n            label: \"Procedure Cost\",\n            key: \"cost\",\n            follow: \"INR\",\n            required: true,\n            type: NUMBER_FIELD,\n        }, {\n            label: \"Applicable Taxes\",\n            key: \"taxes\",\n            type: CHECKBOX_FIELD,\n            options: this.state.taxes.map(tax => Object.create({\n                    label: tax.name + (tax.tax_value ? \"(\" + tax.tax_value + \"%)\" : ''),\n                    value: tax.id\n                })\n            )\n        },\n        //     {\n        //     label: 'MLM Margin Type',\n        //     type: SELECT_FIELD,\n        //     initialValue: (this.state.editFields ? this.state.editFields.margin : null),\n        //     key: 'margin',\n        //     required: true,\n        //     options: that.state.productMargin.map(margin => ({label: margin.name, value: margin.id}))\n        // },\n            {\n            label: \"Add Under\",\n            key: \"under\",\n            type: SELECT_FIELD,\n            options: [{\n                label: \"None\",\n                value: null\n            }].concat(this.state.procedure_category.map(procedure => Object.create({\n                label: procedure.name,\n                value: procedure.id\n            }))),\n            initialValue: null\n        }, {\n            label: \"Default Note\",\n            key: \"default_notes\",\n            type: INPUT_FIELD\n        },];\n        const formProp = {\n            successFn: function (data) {\n                displayMessage(SUCCESS_MSG_TYPE, 'success');\n                that.changeRedirect();\n\n            },\n            errorFn: function () {\n\n            },\n            action: interpolate(PROCEDURE_CATEGORY, [this.props.active_practiceId]),\n            method: \"post\",\n        }\n\n        const TestFormLayout = Form.create()(DynamicFieldsForm);\n        return <div>\n            <Card>\n                <TestFormLayout title=\"Add Procedure\" changeRedirect={this.changeRedirect} formProp={formProp}\n                                {...this.props}\n                                fields={formFields}/>\n                {this.state.redirect && <Redirect to='/settings/procedures'/>}\n            </Card>\n        </div>\n    }\n}\n\nexport default AddProcedure;\n","import React from 'react';\nimport {Button, Card, Checkbox, Form, Input, InputNumber, Select} from \"antd\";\nimport {displayMessage, getAPI, interpolate, postAPI} from \"../../../../utils/common\";\nimport {PROCEDURE_CATEGORY, PRODUCT_MARGIN, TAXES} from \"../../../../constants/api\";\nimport {REQUIRED_FIELD_MESSAGE} from \"../../../../constants/messages\";\nimport {INPUT_FIELD, SUCCESS_MSG_TYPE} from \"../../../../constants/dataKeys\";\n\nclass AddorEditProcedure extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            editingProcedureData: this.props.editingProcedureData ? this.props.editingProcedureData : null,\n            taxes: [],\n            procedure_category: [],\n            redirect: false,\n            productMargin: [],\n            retail_price : 0\n        }\n        this.loadTaxes = this.loadTaxes.bind(this);\n        this.loadProcedures = this.loadProcedures.bind(this)\n    }\n\n    componentDidMount() {\n        this.loadTaxes();\n        this.loadProcedures();\n        this.loadProductMargin();\n        if(this.props.editingProcedureData){\n            this.setState({\n                retail_price : this.props.editingProcedureData.cost\n            });\n        }\n        if (this.props.history && this.props.history.location.search) {\n            let pairValueArray = this.props.history.location.search.substr(1).split('&');\n            if (pairValueArray.length) {\n                let urlInitialValue = {};\n                let {setFieldsValue} = this.props.form;\n                pairValueArray.forEach(function (item) {\n                    let keyValue = item.split('=');\n                    if (keyValue && keyValue.length == 2) {\n                        if (!isNaN(keyValue[1]) && keyValue[1].toString().indexOf('.') != -1) {\n                            urlInitialValue[keyValue[0]] = parseFloat(keyValue[1]);\n                            setFieldsValue({\n                                [keyValue[0]]: parseFloat(keyValue[1])\n                            })\n                        } else if (!isNaN(keyValue[1])) {\n                            urlInitialValue[keyValue[0]] = parseInt(keyValue[1]);\n                            setFieldsValue({\n                                [keyValue[0]]: parseInt(keyValue[1])\n                            })\n                        } else {\n                            urlInitialValue[keyValue[0]] = keyValue[1];\n                            setFieldsValue({\n                                [keyValue[0]]: keyValue[1]\n                            })\n                        }\n                    }\n                });\n            }\n        }\n    }\n\n    loadProductMargin() {\n        let that = this;\n        let successFn = function (data) {\n            that.setState({\n                productMargin: data\n            })\n        }\n        let errorFn = function () {\n\n        }\n        getAPI(PRODUCT_MARGIN, successFn, errorFn);\n    }\n\n\n    loadProcedures() {\n        let that = this;\n        let successFn = function (data) {\n            that.setState({\n                procedure_category: data,\n            })\n        };\n        let errorFn = function () {\n        };\n        getAPI(interpolate(PROCEDURE_CATEGORY, [this.props.active_practiceId]), successFn, errorFn,{pagination:false});\n    }\n\n    loadTaxes() {\n        let that = this;\n        let successFn = function (data) {\n            that.setState({\n                taxes: data\n            })\n        }\n        let errorFn = function () {\n        }\n        getAPI(interpolate(TAXES, [this.props.active_practiceId]), successFn, errorFn);\n    }\n\n    changeNetPrice = (value) => {\n        let that = this;\n        const {getFieldsValue, setFields} = this.props.form;\n        setTimeout(function () {\n            let values = getFieldsValue();\n            if (values.cost_with_tax) {\n                let totalTaxAmount = 0;\n                values.taxes.forEach(function (taxid) {\n                    that.state.taxes.forEach(function (taxObj) {\n                        if (taxObj.id == taxid)\n                            totalTaxAmount += taxObj.tax_value;\n                    })\n                });\n                let retailPrice = values.cost_with_tax / (1 + totalTaxAmount * 0.01);\n                that.setState({\n                    retail_price: retailPrice.toFixed(2)\n                })\n            } else {\n                that.setState({\n                    retail_price: 0\n                })\n            }\n        }, 1000);\n\n    }\n\n    handleSubmit = (e) => {\n        let that = this;\n        e.preventDefault();\n        this.props.form.validateFields((err, values) => {\n            if (!err) {\n                let reqData = {\n                    ...values,\n                    cost: that.state.retail_price\n                }\n                let successFn = function (data) {\n                    displayMessage(SUCCESS_MSG_TYPE, 'Procedure Updated Successfully!!');\n                    if (that.props.loadData)\n                        that.props.loadData();\n                    that.props.history.push(\"settings/procedures\");\n                }\n                let errorFn = function () {\n\n                }\n                if(this.state.editingProcedureData){\n                    reqData.id = this.state.editingProcedureData.id\n                }\n                postAPI(interpolate(PROCEDURE_CATEGORY, [this.props.active_practiceId]), reqData, successFn, errorFn)\n            }\n        })\n    }\n\n    render() {\n        let that = this;\n        const formItemLayout = ({\n            labelCol: {span: 8},\n            wrapperCol: {span: 14},\n        });\n        const {getFieldDecorator} = this.props.form;\n        return <div>\n            <Card>\n                <Form onSubmit={this.handleSubmit}>\n                    <h2>{this.state.editingProcedureData ? \"Edit Procedures\" : \"Add Procedures\"}</h2>\n                    <Form.Item label=\"Procedure Name\" {...formItemLayout}>\n                        {getFieldDecorator('name', {\n                            initialValue: this.state.editingProcedureData ? this.state.editingProcedureData.name : null,\n                            rules: [{required: true, message: REQUIRED_FIELD_MESSAGE}]\n                        })\n                        (<Input placeholder=\"Procedure Name\"/>)\n                        }\n                    </Form.Item>\n                    <Form.Item label=\"Procedure Net Price\" {...formItemLayout}>\n                        {getFieldDecorator('cost_with_tax', {\n                            initialValue: this.state.editingProcedureData ? this.state.editingProcedureData.cost_with_tax : null,\n                            rules: [{\n                                required: true,\n                                message: REQUIRED_FIELD_MESSAGE\n                            }]\n                        })\n                        (<InputNumber onChange={this.changeNetPrice}/>)\n                        }<span className=\"ant-form-text\">INR</span>\n                    </Form.Item>\n                    <Form.Item label=\"Tax\" {...formItemLayout}>\n                        {getFieldDecorator('taxes', {initialValue: this.state.editingProcedureData && this.state.editingProcedureData.taxes? this.state.editingProcedureData.taxes.map(item => item.id) : []})\n                        (<Checkbox.Group onChange={this.changeNetPrice}>\n                            {this.state.taxes.map((tax) => <Checkbox\n                                value={tax.id}>{tax.name + (tax.tax_value ? \"(\" + tax.tax_value + \"%)\" : '')}\n                            </Checkbox>)}\n                        </Checkbox.Group>)\n                        }\n                    </Form.Item>\n                    <Form.Item label=\"Procedure Retail Price\" {...formItemLayout}>\n                        <span className=\"ant-form-text\"><b>{that.state.retail_price}</b>&nbsp;INR</span>\n                    </Form.Item>\n                    <Form.Item key={\"margin\"} {...formItemLayout} label={\"MLM Margin\"}>\n                        {getFieldDecorator(\"margin\", {\n                            initialValue: this.state.editingProcedureData && this.state.editingProcedureData.margin ? this.state.editingProcedureData.margin.id : null,\n                        })(\n                            <Select>\n                                {this.state.productMargin.map((option) => <Select.Option\n                                    value={option.id}>{option.name}</Select.Option>)}\n                            </Select>\n                        )}\n                    </Form.Item>\n                    <Form.Item key={\"under\"} {...formItemLayout} label={\"Add Under\"}>\n                        {getFieldDecorator(\"under\", {\n                            initialValue: this.state.editingProcedureData ? this.state.editingProcedureData.under : null,\n                        })(\n                            <Select>\n                                {this.state.procedure_category.map((option) => <Select.Option\n                                    value={option.id}>{option.name}</Select.Option>)}\n                            </Select>\n                        )}\n                    </Form.Item>\n                    <Form.Item label=\"Default Note\" {...formItemLayout}>\n                        {getFieldDecorator('default_notes', {\n                            initialValue: this.state.editingProcedureData ? this.state.editingProcedureData.default_notes : null,\n                            rules: [{required: true, message: REQUIRED_FIELD_MESSAGE}]\n                        })\n                        (<Input placeholder=\"Default Note\"/>)\n                        }\n                    </Form.Item>\n                    <Form.Item>\n                        <Button style={{margin: 5}} type=\"primary\" htmlType=\"submit\">\n                            Submit\n                        </Button>\n                        {that.props.history ?\n                            <Button style={{margin: 5}} onClick={() => that.props.history.goBack()}>\n                                Cancel\n                            </Button> : null}\n                    </Form.Item>\n                </Form>\n            </Card>\n        </div>\n    }\n}\n\nexport default Form.create()(AddorEditProcedure);","import React from \"react\";\nimport {Button, Card, Icon, Tabs, Divider, Tag, Row, Table, Popconfirm, Input} from \"antd\";\nimport {PROCEDURE_CATEGORY} from \"../../../../constants/api\"\nimport {Route, Link, Switch} from \"react-router-dom\";\nimport {getAPI, interpolate, postAPI} from \"../../../../utils/common\";\nimport EditProcedure from \"./EditProcedure\";\nimport PermissionDenied from \"../../../common/errors/PermissionDenied\";\nimport CustomizedTable from \"../../../common/CustomizedTable\";\nimport AddProcedure from \"./AddProcedure\";\nimport AddorEditProcedure from \"./AddorEditProcedure\";\nimport {Redirect} from \"react-router\";\nimport InfiniteFeedLoaderButton from \"../../../common/InfiniteFeedLoaderButton\";\n\n\nconst {Column, ColumnGroup} = Table;\nconst TabPane = Tabs.TabPane;\n\nclass RecentProcedure extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            current: 'staff',\n            procedure_category: null,\n            editingProcedureData: null,\n            loading: true\n        };\n        this.loadProcedures = this.loadProcedures.bind(this);\n    }\n\n    componentDidMount() {\n        this.loadProcedures();\n    }\n\n    loadProcedures(page = 1) {\n        var that = this;\n        let params = {\n            page\n        }\n        if (this.state.searchString) {\n            params.name = this.state.searchString\n        }\n        let successFn = function (data) {\n            if (data.current == 1 && that.state.searchString == params.name)\n                that.setState({\n                    procedure_category: data.results,\n                    next: data.next,\n                    loading: false\n                })\n            else\n                that.setState(function (prevState) {\n                    return {\n                        procedure_category: [...prevState.procedure_category, ...data.results],\n                        next: data.next,\n                        loading: false\n                    }\n                })\n        };\n        let errorFn = function () {\n        };\n\n        getAPI(interpolate(PROCEDURE_CATEGORY, [this.props.active_practiceId]), successFn, errorFn, params);\n    }\n\n\n    handleClick = (e) => {\n        this.setState({\n            current: e.key,\n        });\n    }\n\n    deleteObject(record) {\n        let that = this;\n        let reqData = {\n            id: record.id,\n            is_active: false\n        };\n        reqData.is_active = false;\n        let successFn = function (data) {\n            that.loadProcedures();\n        }\n        let errorFn = function () {\n        };\n        postAPI(interpolate(PROCEDURE_CATEGORY, [this.props.active_practiceId]), reqData, successFn, errorFn)\n    }\n\n    editProcedure(record) {\n        this.setState({\n            editingProcedureData: record,\n            loading: false\n        });\n        let url = '/settings/procedures/' + record.id + '/editprocedure';\n        this.props.history.push(url);\n\n    }\n\n    changeSearchValue = (value) => {\n        this.setState({\n            searchString: value\n        }, function () {\n            this.loadProcedures();\n        })\n    }\n\n    render() {\n        let that = this;\n        let columns = [{\n            title: \"Procedure Name\",\n            dataIndex: \"name\",\n            key: \"name\",\n        }, {\n            title: \"Procedure Unit Cost\",\n            dataIndex: \"cost_with_tax\",\n            key: \"cost\"\n        }, {\n            title: \"MLM Margin\",\n            dataIndex: \"margin\",\n            key: \"margin\",\n            render: (taxes) => (\n                <span>{taxes ? taxes.name : null}\n                </span>)\n        }, {\n            title: \"Applicable Taxes\",\n            dataIndex: \"taxes\",\n            key: \"taxes\",\n            render: (taxes) => (\n                <span>\n                                    {taxes && taxes.length ? taxes.map(tax =>\n                                        <Tag> {tax.name}|<b>{tax.tax_value}%</b></Tag>) : null}\n                                    </span>\n            )\n        }, {\n            title: \"Standard Notes\",\n            dataIndex: \"default_notes\",\n            key: \"default_notes\"\n        }, {\n            title: \"Action\",\n            key: \"action\",\n            render: (text, record) => (\n                <span>\n                    <Link\n                        to={\"/settings/procedures/addprocedure?under=\" + record.id}>Add SubCategory</Link>\n                        <Divider type=\"vertical\"/>\n                        <a onClick={() => this.editProcedure(record)}>Edit</a>\n                        <Divider type=\"vertical\"/>\n                        <Popconfirm title=\"Are you sure delete this?\"\n                                    onConfirm={() => that.deleteObject(record)} okText=\"Yes\"\n                                    cancelText=\"No\">\n                        <a>Delete</a>\n                        </Popconfirm>\n                </span>)\n        }];\n        return <Switch>\n            <Route path=\"/settings/procedures/addprocedure\"\n                   render={(route) => (this.props.activePracticePermissions.SettingsProcedureCatalog || this.props.allowAllPermissions ?\n                           <AddorEditProcedure  {...this.props} {...route} loadData={this.loadProcedures}/> :\n                           <PermissionDenied/>\n                   )}/>\n            <Route exact path=\"/settings/procedures/:id/editprocedure\"\n                   render={(route) => (that.props.activePracticePermissions.SettingsProcedureCatalog || that.props.allowAllPermissions ?\n                           (that.state.editingProcedureData ?\n                               <AddorEditProcedure  {...this.state} {...this.props} {...route}\n                                                    loadData={this.loadProcedures}/> :\n                               <Redirect to={\"/settings/procedures\"}/>) : <PermissionDenied/>\n                   )}/>\n            <Route>\n                <Row>\n                    <h2>Procedures Catalog\n                        <Link to=\"/settings/procedures/addprocedure\">\n                            <Button type=\"primary\" style={{float: 'right'}}>\n                                <Icon type=\"plus\"/>&nbsp;Add Procedure\n                            </Button>\n                        </Link>\n                    </h2>\n                    <Card>\n                        <div className=\"row mar-b-10\">\n                            <div className=\"col-md-12\">\n                                <Input onChange={(e) => this.changeSearchValue(e.target.value)}\n                                       value={this.state.searchString} style={{width: 200}}\n                                       placeholder=\"Search Procedure...\"/>\n                            </div>\n                        </div>\n                        <Table columns={columns}\n                               pagination={false}\n                               dataSource={this.state.procedure_category}/>\n                        <InfiniteFeedLoaderButton loading={this.state.loading} hidden={!this.state.next}\n                                                  loaderFunction={() => this.loadProcedures(this.state.next)}/>\n\n                    </Card>\n                </Row>\n            </Route>\n        </Switch>\n    }\n}\n\nexport default RecentProcedure;\n","import React from \"react\";\nimport DynamicFieldsForm from \"../../../common/DynamicFieldsForm\";\nimport {Button, Modal, Form, Table, Divider, Popconfirm} from \"antd\";\nimport {\n    SUCCESS_MSG_TYPE,\n    INPUT_FIELD,\n    NUMBER_FIELD,\n    SELECT_FIELD\n} from \"../../../../constants/dataKeys\";\nimport {PAYMENT_MODES} from \"../../../../constants/api\"\nimport {getAPI, displayMessage, interpolate, postAPI} from \"../../../../utils/common\";\nimport {PAYMENT_TYPES} from \"../../../../constants/hardData\";\nimport CustomizedTable from \"../../../common/CustomizedTable\";\n\nclass PaymentModes extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            redirect: false,\n            visible: false,\n            modes: null,\n        }\n        this.loadData = this.loadData.bind(this);\n    }\n\n    componentDidMount() {\n        this.loadData();\n    }\n\n    loadData() {\n        var that = this;\n        let successFn = function (data) {\n            console.log(\"get table\");\n            that.setState({\n                modes: data,\n            })\n        };\n        let errorFn = function () {\n        };\n        getAPI(interpolate(PAYMENT_MODES, [this.props.active_practiceId]), successFn, errorFn);\n    }\n\n    changeRedirect() {\n        var redirectVar = this.state.redirect;\n        this.setState({\n            redirect: !redirectVar,\n        });\n    }\n\n    editPayment(value) {\n        this.setState({\n            editingId: value.id,\n            editingmode: value.mode,\n            editingType: value.payment_type,\n            editingFee: value.fee,\n            visible: true,\n        })\n    }\n\n    handleCancel = () => {\n        this.setState({visible: false});\n    }\n\n    deleteObject(record) {\n        let that = this;\n        let reqData = record;\n        reqData.is_active = false;\n        let successFn = function (data) {\n            that.loadData();\n        }\n        let errorFn = function () {\n        };\n        postAPI(interpolate(PAYMENT_MODES, [this.props.active_practiceId]), reqData, successFn, errorFn)\n    }\n\n    render() {\n        let that = this;\n        const columns = [{\n            title: 'Mode of Payment',\n            placeholder:\"\",\n            dataIndex: 'mode',\n            key: 'mode',\n        }, {\n            title: 'Payment Type',\n            dataIndex: 'payment_type',\n            key: 'payment_type',\n        }, {\n            title: 'Fees',\n            dataIndex: 'fee',\n            key: 'fee',\n            render: (text, record) => (<span>{text} %</span>)\n        }, {\n            title: 'Action',\n            key: 'action',\n            render: (text, record) => (\n                <span>\n              <a onClick={() => this.editPayment(record)}>Edit</a>\n                    <Divider type=\"vertical\"/>\n                    <Popconfirm title=\"Are you sure delete this payment mode?\"\n                                onConfirm={() => that.deleteObject(record)} okText=\"Yes\" cancelText=\"No\">\n                      <a>Delete</a>\n                  </Popconfirm>\n              </span>\n            ),\n        }];\n        const fields = [{\n            label: \"Mode of payment\",\n            key: \"mode\",\n            required: true,\n            type: INPUT_FIELD\n        }, {\n            label: \"Payment Type\",\n            key: \"payment_type\",\n            required: true,\n            type: SELECT_FIELD,\n            options: PAYMENT_TYPES\n        }, {\n            label: \"Vendor Fee\",\n            key: \"fee\",\n            required: true,\n            type: NUMBER_FIELD,\n            min: 0,\n            follow: '%'\n        },];\n        const editfields = [{\n            label: \"Mode of payment\",\n            key: \"mode\",\n            required: true,\n            initialValue: this.state.editingmode,\n            type: INPUT_FIELD\n        }, {\n            label: \"Payment Type\",\n            key: \"payment_type\",\n            required: true,\n            initialValue: this.state.editingType,\n            type: SELECT_FIELD,\n            options: PAYMENT_TYPES\n        }, {\n            label: \"Vendor Fee\",\n            key: \"fee\",\n            required: true,\n            initialValue: this.state.editingFee,\n            type: NUMBER_FIELD,\n            min: 0,\n            follow: '%'\n        },];\n        const formProp = {\n            successFn: function (data) {\n                that.handleCancel();\n                that.loadData();\n                console.log(data);\n                console.log(\"sucess\");\n                displayMessage(SUCCESS_MSG_TYPE, \"sucess\")\n            },\n            errorFn: function () {\n\n            },\n            action: interpolate(PAYMENT_MODES, [this.props.active_practiceId]),\n            method: \"post\",\n        }\n        const defaultValues = [{\"key\": \"practice\", \"value\": this.props.active_practiceId}];\n        const editFormDefaultValues = [{\"key\": \"practice\", \"value\": this.props.active_practiceId}, {\n            \"key\": \"id\",\n            \"value\": this.state.editingId\n        }];\n\n        const TestFormLayout = Form.create()(DynamicFieldsForm);\n        return <div>\n            <TestFormLayout defaultValues={defaultValues} formProp={formProp} fields={fields} {...this.props}/>\n            <Divider/>\n            <CustomizedTable columns={columns} dataSource={this.state.modes}/>\n            <Modal\n                title=\"Edit Payment Mode\"\n                visible={this.state.visible}\n                footer={null}\n                onCancel={this.handleCancel}\n            >\n                <TestFormLayout defaultValues={editFormDefaultValues} formProp={formProp} fields={editfields}/>\n                <Button key=\"back\" onClick={this.handleCancel}>Return</Button>\n            </Modal>\n        </div>\n    }\n}\n\nexport default PaymentModes;\n","import React from \"react\";\nimport DynamicFieldsForm from \"../../../common/DynamicFieldsForm\";\nimport {Button, Modal, Card, Form, Icon, Row, Table, Divider, Popconfirm} from \"antd\";\nimport {\n    SUCCESS_MSG_TYPE,\n    CHECKBOX_FIELD,\n    INPUT_FIELD,\n    RADIO_FIELD,\n    NUMBER_FIELD,\n    SELECT_FIELD\n} from \"../../../../constants/dataKeys\";\nimport {PAYMENT_MODES, TAXES} from \"../../../../constants/api\"\nimport {Link} from \"react-router-dom\";\nimport {getAPI, displayMessage, interpolate, postAPI} from \"../../../../utils/common\";\nimport CustomizedTable from \"../../../common/CustomizedTable\";\n\nclass TaxCatalog extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            redirect: false,\n            visible: false,\n            taxes: null,\n            loading:true\n        };\n        this.loadData = this.loadData.bind(this);\n        this.deleteObject = this.deleteObject.bind(this);\n\n    }\n\n    componentDidMount() {\n        this.loadData();\n    }\n\n    loadData() {\n        var that = this;\n        let successFn = function (data) {\n            console.log(\"get table\");\n            that.setState({\n                taxes: data,\n                loading:false\n            })\n        };\n        let errorFn = function () {\n            that.setState({\n                loading:false\n            })\n        };\n        getAPI(interpolate(TAXES, [this.props.active_practiceId]), successFn, errorFn);\n    }\n\n    changeRedirect() {\n        var redirectVar = this.state.redirect;\n        this.setState({\n            redirect: !redirectVar,\n        });\n    }\n\n    editTax(value) {\n        this.setState({\n            editingId: value.id,\n            editingName: value.name,\n            editingValue: value.tax_value,\n\n            visible: true,\n        })\n    }\n\n    handleCancel = () => {\n        this.setState({visible: false});\n    }\n\n    deleteObject(record) {\n        let that = this;\n        let reqData = record;\n        reqData.is_active = false;\n        let successFn = function (data) {\n            that.loadData();\n        }\n        let errorFn = function () {\n        };\n        postAPI(interpolate(TAXES, [this.props.active_practiceId]), reqData, successFn, errorFn)\n    }\n\n    render() {\n        let that = this;\n        const columns = [{\n            title: 'Name',\n            dataIndex: 'name',\n            key: 'name',\n        }, {\n            title: 'Tax Value',\n            dataIndex: 'tax_value',\n            key: 'tax_value',\n            render: (text, record) => (<span>{text} %</span>)\n        }, {\n            title: 'Actions',\n            key: 'action',\n            render: (text, record) => (\n                <span>\n              {/*<a onClick={() => this.editTax(record)}>  Edit</a>*/}\n                {/* <Divider type=\"vertical\"/> */}\n                    <Popconfirm title=\"Are you sure delete this?\"\n                                onConfirm={() => that.deleteObject(record)} okText=\"Yes\" cancelText=\"No\">\n                      <a>Delete</a>\n                  </Popconfirm>\n              </span>\n            ),\n        }];\n        const fields = [{\n            label: \"Tax name\",\n            key: \"name\",\n            placeholder:\"Tax Name\",\n            required: true,\n            type: INPUT_FIELD\n        }, {\n            label: \"Tax Value\",\n            key: \"tax_value\",\n            follow: \"%\",\n            max: 100,\n            min: 0,\n            required: true,\n            type: NUMBER_FIELD\n        },];\n        const editfields = [{\n            label: \"Tax name\",\n            key: \"name\",\n            required: true,\n            initialValue: this.state.editingName,\n            type: INPUT_FIELD\n        }, {\n            label: \"Tax Value\",\n            key: \"tax_value\",\n            follow: \"%\",\n            max: 100,\n            min: 0,\n            required: true,\n            initialValue: this.state.editingValue,\n\n            type: NUMBER_FIELD\n        },];\n        const formProp = {\n            successFn: function (data) {\n                that.handleCancel();\n                that.loadData();\n                console.log(data);\n                console.log(\"sucess\");\n                displayMessage(SUCCESS_MSG_TYPE, \"success\")\n            },\n            errorFn: function () {\n\n            },\n            action: interpolate(TAXES, [this.props.active_practiceId]),\n            method: \"post\",\n        }\n        const defaultValues = [{\"key\": \"practice\", \"value\": this.props.active_practiceId}];\n        const editFormDefaultValues = [{\"key\": \"practice\", \"value\": this.props.active_practiceId}, {\n            \"key\": \"id\",\n            \"value\": this.state.editingId\n        }];\n        const TestFormLayout = Form.create()(DynamicFieldsForm);\n        return <div>\n            <TestFormLayout defaultValues={defaultValues} formProp={formProp} fields={fields} {...this.props}/>\n            <Divider/>\n            <CustomizedTable loading={this.state.loading} columns={columns} dataSource={this.state.taxes}/>\n            <Modal\n                title=\"Edit Tax\"\n                visible={this.state.visible}\n                footer={null}\n                onCancel={this.handleCancel}\n            >\n                <TestFormLayout defaultValues={editFormDefaultValues} formProp={formProp} fields={editfields}/>\n                <Button key=\"back\" onClick={this.handleCancel}>Return</Button>,\n\n            </Modal>\n        </div>\n    }\n}\n\nexport default TaxCatalog;\n","import React from \"react\";\nimport DynamicFieldsForm from \"../../../common/DynamicFieldsForm\";\nimport {Form} from \"antd\";\nimport {\n    CHECKBOX_FIELD,\n    INPUT_FIELD,\n    RADIO_FIELD,\n    SELECT_FIELD,\n    SINGLE_CHECKBOX_FIELD, SUCCESS_MSG_TYPE\n} from \"../../../../constants/dataKeys\";\nimport {displayMessage, getAPI, interpolate} from \"../../../../utils/common\";\nimport {PRACTICE} from \"../../../../constants/api\";\n\nclass CancelledInvoice extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            practiceDetail: {}\n        }\n    }\n\n    componentDidMount() {\n        var that = this;\n        let successFn = function (data) {\n            let countries = data.countries;\n            that.setState({\n                countries: countries,\n                practiceDetail: data,\n            })\n        };\n        let errorFn = function () {\n        };\n        getAPI(interpolate(PRACTICE, [this.props.active_practiceId]), successFn, errorFn);\n\n    }\n\n    render() {\n        const fields = [{\n            key: \"hide_cancelled_invoice\",\n            type: SINGLE_CHECKBOX_FIELD,\n            follow:<b>Hide Cancelled Invoice</b>,\n            initialValue: this.state.practiceDetail ? this.state.practiceDetail.hide_cancelled_invoice : false,\n        },{\n            key: \"hide_cancelled_return\",\n            type: SINGLE_CHECKBOX_FIELD,\n            follow:<b>Hide Cancelled Return Invoice</b>,\n            initialValue: this.state.practiceDetail ? this.state.practiceDetail.hide_cancelled_return : false,\n        }, {\n            key: \"hide_cancelled_payment\",\n            type: SINGLE_CHECKBOX_FIELD,\n            follow:<b>Hide Cancelled Payments</b>,\n            initialValue: this.state.practiceDetail ? this.state.practiceDetail.hide_cancelled_payment : false\n        }];\n        const formProp = {\n            successFn: function (data) {\n                displayMessage(SUCCESS_MSG_TYPE, \"Settings Saved Successfuly!!\");\n            },\n            errorFn: function () {\n\n            },\n            action: interpolate(PRACTICE, [this.props.active_practiceId]),\n            method: \"put\",\n        };\n        const TestFormLayout = Form.create()(DynamicFieldsForm);\n        const defaultValue = [{key: 'id', value: this.props.active_practiceId}];\n        return <div>\n            <TestFormLayout formProp={formProp} fields={fields} {...this.props} defaultValues={defaultValue}/>\n        </div>\n    }\n}\n\nexport default CancelledInvoice;\n","import React from \"react\";\nimport {Form, Button, Card, Icon, Tabs, Divider, Tag, Row, Table} from \"antd\";\nimport PaymentModes from \"./PaymentModes\";\nimport TaxCatalog from \"./TaxCatalog\";\nimport CancelledInvoice from \"./CancelledInvoice\";\n\nconst TabPane = Tabs.TabPane;\n\n\nclass BillingSettings extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            defaultActiveKey: this.props.location.hash\n        }\n    }\n\n\n    render() {\n        return <div>\n            <Row>\n                <h2>Billing</h2>\n                <Card>\n                    <Tabs defaultActiveKey={this.state.defaultActiveKey}>\n                        <TabPane tab={<span><Icon type=\"cluster\"/>Tax Catalog</span>} key=\"#taxcatalog\">\n                            <TaxCatalog {...this.state} {...this.props}/>\n                        </TabPane>\n                        <TabPane tab={<span><Icon type=\"dollar\"/>Accepted Modes of payment </span>} key=\"#paymentmodes\">\n                            <PaymentModes {...this.props}/>\n                        </TabPane>\n                        <TabPane tab={<span><Icon type=\"block\"/>Cancelled Invoice</span>} key=\"cancelledinvoice\">\n                            <CancelledInvoice {...this.state} {...this.props}/>\n                        </TabPane>\n                    </Tabs>\n\n                </Card>\n            </Row>\n        </div>\n    }\n}\n\nexport default BillingSettings;\n","import React from \"react\";\nimport DynamicFieldsForm from \"../../../common/DynamicFieldsForm\";\nimport {Button, Modal, Card, Form, Icon, Row, Table, Divider, Popconfirm} from \"antd\";\nimport {\n    CHECKBOX_FIELD,\n    SUCCESS_MSG_TYPE,\n    INPUT_FIELD,\n    RADIO_FIELD,\n    NUMBER_FIELD,\n    SELECT_FIELD\n} from \"../../../../constants/dataKeys\";\nimport {TAXES} from \"../../../../constants/api\"\nimport {Link} from \"react-router-dom\";\nimport {getAPI, displayMessage, interpolate, postAPI} from \"../../../../utils/common\";\nimport CustomizedTable from \"../../../common/CustomizedTable\";\n\nclass TableData extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            redirect: false,\n            visible: false,\n            data: null,\n            loading:true\n        }\n        this.loadData = this.loadData.bind(this);\n        this.deleteObject = this.deleteObject.bind(this);\n    }\n\n    componentDidMount() {\n        this.loadData();\n    }\n\n    loadData() {\n        var that = this;\n        let successFn = function (data) {\n            that.setState({\n                data: data,\n                loading:false\n            })\n        };\n        let errorFn = function () {\n            that.setState({\n                loading:false\n            })\n        };\n        getAPI(interpolate(this.props.id, [this.props.active_practiceId]), successFn, errorFn);\n    }\n\n    changeRedirect() {\n        var redirectVar = this.state.redirect;\n        this.setState({\n            redirect: !redirectVar,\n        });\n    }\n\n    editFunction(value) {\n        this.setState({\n            editingId: value.id,\n            editingName: value.name,\n            visible: true,\n            loading:false\n        })\n    }\n\n    handleCancel = () => {\n        this.setState({visible: false});\n    }\n\n    deleteObject(record) {\n        let that = this;\n        let reqData = record;\n        reqData.is_active = false;\n        let successFn = function (data) {\n            that.loadData();\n        }\n        let errorFn = function () {\n        };\n        postAPI(interpolate(this.props.id, [this.props.active_practiceId]), reqData, successFn, errorFn)\n    }\n\n    render() {\n        let that = this;\n        const columns = [{\n            title: 'Name',\n            dataIndex: 'name',\n            key: 'name',\n        }, {\n            title: 'Action',\n            key: 'action',\n            render: (text, record) => (\n                <span>\n              <a onClick={() => this.editFunction(record)}>  Edit</a>\n                <Divider type=\"vertical\"/>\n                    <Popconfirm title=\"Are you sure delete this item?\"\n                                onConfirm={() => that.deleteObject(record)} okText=\"Yes\" cancelText=\"No\">\n                      <a>Delete</a>\n                  </Popconfirm>\n              </span>\n            ),\n        }];\n        const fields = [{\n            label: this.props.name,\n            key: \"name\",\n            required: true,\n            type: INPUT_FIELD\n        },];\n        const editfields = [\n\n            {\n                label: this.props.name,\n                key: \"name\",\n                required: true,\n                initialValue: this.state.editingName,\n                type: INPUT_FIELD\n            },];\n        const formProp = {\n            successFn: function (data) {\n                that.handleCancel();\n                that.loadData();\n                console.log(data);\n                console.log(\"sucess\");\n                displayMessage(SUCCESS_MSG_TYPE, \"success\")\n\n            },\n            errorFn: function () {\n\n            },\n            action: interpolate(this.props.id, [this.props.active_practiceId]),\n            method: \"post\",\n        };\n        const defaultValues = [{\"key\": \"practice\", \"value\": this.props.active_practiceId}]\n        const editFormDefaultValues = [{\"key\": \"practice\", \"value\": this.props.active_practiceId}, {\n            \"key\": \"id\",\n            \"value\": this.state.editingId\n        }]\n\n        const TestFormLayout = Form.create()(DynamicFieldsForm);\n        return <div>\n            <TestFormLayout defaultValues={defaultValues} formProp={formProp} fields={fields}/>\n            <Divider/>\n            <CustomizedTable loading={this.state.loading} columns={columns} dataSource={this.state.data}/>\n            <Modal\n                title={\"Edit \" + this.props.name}\n                visible={this.state.visible}\n                footer={null}\n                onCancel={this.handleCancel}\n            >\n                <TestFormLayout defaultValues={editFormDefaultValues} formProp={formProp} fields={editfields}/>\n                <Button key=\"back\" onClick={this.handleCancel}>Return</Button>,\n\n            </Modal>\n        </div>\n    }\n}\n\nexport default TableData;\n","import React from \"react\";\nimport DynamicFieldsForm from \"../../../common/DynamicFieldsForm\";\nimport {Card, Form, Divider, Row,Popconfirm,Table} from \"antd\";\nimport {SUCCESS_MSG_TYPE,SELECT_FIELD} from \"../../../../constants/dataKeys\";\nimport {VITAL_SIGNS_API, EMR_VITAL_SIGNS} from \"../../../../constants/api\"\nimport {getAPI, interpolate, displayMessage} from \"../../../../utils/common\";\n// import CustomizedTable from \"../../../common/CustomizedTable\";\nimport {DEFAULT_TEMPERATURE_IN,DEFAULT_BP_METHOD,DEFAULT_TEMPERATURE_METHOD} from \"../../../../constants/hardData\";\n\nclass VitalSigns extends React.Component {  \n    constructor(props) {\n        super(props);\n\n        this.state = {\n            redirect: false,\n            vitalSign: null,\n        }\n        this.changeRedirect = this.changeRedirect.bind(this);\n        this.loadVitalSign =this.loadVitalSign.bind(this);\n\n    }\n    componentDidMount() {\n        this.loadVitalSign();\n    }\n\n    changeRedirect() {\n        var redirectVar = this.state.redirect;\n        this.setState({\n            redirect: !redirectVar,\n        });\n    }\n\n    loadVitalSign(){\n        let that=this;\n        let successFn =function (data){\n            that.setState({\n                vitalSign:data[data.length-1]\n            })\n        }\n        let errorFn = function(){\n            that.setState({\n\n            })\n        }\n        getAPI(interpolate(EMR_VITAL_SIGNS, [that.props.active_practiceId]), successFn, errorFn);\n    }\n\n    render() {\n        const fields = [{\n            label: \"Default temperature measurement in\",\n            key: \"temperature_unit\",\n            type: SELECT_FIELD,\n            initialValue:this.state.vitalSign ? this.state.vitalSign.temperature_unit:null,\n            options: DEFAULT_TEMPERATURE_IN.map(Temp_in => ({label: Temp_in.label, value: Temp_in.value}))\n        }, {\n            label: \"Default temperature measurement method\",\n            key: \"temperature_method\",\n            type: SELECT_FIELD,\n            initialValue:this.state.vitalSign ? this.state.vitalSign.temperature_method:null,\n            options: DEFAULT_TEMPERATURE_METHOD.map(TempMethod =>({label:TempMethod.label ,value:TempMethod.value}))\n        },{\n            label: \"Default blood pressure measurement method\",\n            key: \"blood_pressure_method\",\n            initialValue:this.state.vitalSign ? this.state.vitalSign.blood_pressure_method:null,\n            type: SELECT_FIELD,\n            options:DEFAULT_BP_METHOD.map(BPMETHOD =>({label:BPMETHOD.label , value:BPMETHOD.value}))\n        }];\n\n        let defaultValues = [{ key: 'practice', value: this.props.active_practiceId}, {\n            \"key\": \"id\",\n            \"value\": this.state.vitalSign ? this.state.vitalSign.id : null,\n        }];\n\n        const TestFormLayout = Form.create()(DynamicFieldsForm);\n    \n        const formProp = {\n            successFn: function (data) {\n                displayMessage(SUCCESS_MSG_TYPE, \"success\")\n            },\n            errorFn: function () {\n\n            },\n            action: interpolate(EMR_VITAL_SIGNS, [this.props.active_practiceId]),\n            method: \"post\",\n        }\n\n        return <Row>\n                <TestFormLayout defaultValues={defaultValues} formProp={formProp} fields={fields}/>\n        </Row>\n\n    }\n}\n\nexport default VitalSigns;\n","import React from \"react\";\nimport DynamicFieldsForm from \"../../../common/DynamicFieldsForm\";\nimport {Form, Button, Card, Icon, Tabs, Divider, Tag, Row, Table} from \"antd\";\nimport {CHECKBOX_FIELD, INPUT_FIELD, RADIO_FIELD, SELECT_FIELD} from \"../../../../constants/dataKeys\";\nimport TableData from \"./TableData\";\nimport {\n    EMR_DIAGNOSES,\n    EMR_FILETAGS,\n    EMR_COMPLAINTS,\n    EMR_OBSERVATIONS,\n    EMR_INVESTIGATIONS,\n    EMR_TREATMENTNOTES,\n    EMR_VITAL_SIGNS, EMR_MEDICATION\n} from \"../../../../constants/api\"\nimport VITALSINGS from \"../emr/VitalSigns\";\nconst TabPane = Tabs.TabPane;\n\n\nclass EMRSettings extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            defaultActiveKey: this.props.location.hash\n        }\n    }\n\n    render() {\n        console.log(\"propss\",this.props)\n        return <div>\n            <Row>\n                <h2>EMR Settings</h2>\n                <Card>\n                    <Tabs defaultActiveKey={this.state.defaultActiveKey}>\n                        <TabPane tab={<span><Icon type=\"sound\"/>Complaints</span>} key=\"#complaints\">\n                            <TableData {...this.props} id={EMR_COMPLAINTS} name=\"Complaints\"/>\n                        </TabPane>\n                        <TabPane tab={<span><Icon type=\"eye\"/>Observations</span>} key=\"#observations\">\n                            <TableData {...this.props} id={EMR_OBSERVATIONS} name=\"Observations\"/>\n                        </TabPane>\n                        <TabPane tab={<span><Icon type=\"plus-square\"/>Diagnoses</span>} key=\"#diagnoses\">\n                            <TableData {...this.props} id={EMR_DIAGNOSES} name=\"Diagnoses\"/>\n                        </TabPane>\n                        <TabPane tab={<span><Icon type=\"laptop\"/>Investigations</span>} key=\"#investigations\">\n                            <TableData {...this.props} id={EMR_INVESTIGATIONS} name=\"Investigations\"/>\n                        </TabPane>\n                        <TabPane tab={<span><Icon type=\"solution\"/>Notes</span>} key=\"#treatmentnotes\">\n                            <TableData {...this.props} id={EMR_TREATMENTNOTES} name=\"Treatment Notes\"/>\n                        </TabPane>\n                        <TabPane tab={<span><Icon type=\"medicine-box\"/>Medication</span>} key=\"#medication\">\n                            <TableData {...this.props} id={EMR_MEDICATION} name=\"Medication\"/>\n                        </TabPane>\n                        <TabPane tab={<span><Icon type=\"file\"/>File Labels</span>} key=\"#filetags\">\n                            <TableData {...this.props} id={EMR_FILETAGS} name=\"File Labels\"/>\n                        </TabPane>\n                        <TabPane tab={<span><Icon type=\"heart\"/>Vital Signs</span>} key=\"#vitalsigns\">\n                            <VITALSINGS {...this.props}/>\n                        </TabPane>\n                    </Tabs>\n\n                </Card>\n            </Row>\n        </div>\n    }\n}\n\nexport default EMRSettings;\n","import React from \"react\";\nimport DynamicFieldsForm from \"../../../common/DynamicFieldsForm\";\nimport {Button, Card, Form, Icon, Row} from \"antd\";\nimport {\n    CHECKBOX_FIELD,\n    EMAIL_FIELD,\n    SUCCESS_MSG_TYPE,\n    INPUT_FIELD,\n    RADIO_FIELD,\n    SELECT_FIELD,\n    SINGLE_IMAGE_UPLOAD_FIELD, NUMBER_FIELD\n} from \"../../../../constants/dataKeys\";\nimport {PRACTICE} from \"../../../../constants/api\";\nimport {getAPI, displayMessage, interpolate} from \"../../../../utils/common\";\nimport {Redirect} from 'react-router-dom'\nimport {LANGUAGE, SMS_LANGUAGE_CONFIG_PARAM} from \"../../../../constants/hardData\";\nimport {loadConfigParameters} from \"../../../../utils/clinicUtils\";\n\n\nclass EditPracticeDetail extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            practiceDetail: null,\n            countries: null,\n            [SMS_LANGUAGE_CONFIG_PARAM]: []\n        };\n        this.changeRedirect = this.changeRedirect.bind(this);\n\n    }\n\n    changeRedirect() {\n        var redirectVar = this.state.redirect;\n        this.setState({\n            redirect: !redirectVar,\n        });\n    }\n\n    componentDidMount() {\n        var that = this;\n        let successFn = function (data) {\n            let countries = data.countries;\n            that.setState({\n                countries: countries,\n                practiceDetail: data,\n            })\n        };\n        let errorFn = function () {\n        };\n        getAPI(interpolate(PRACTICE, [this.props.practiceId]), successFn, errorFn);\n        loadConfigParameters(this, [SMS_LANGUAGE_CONFIG_PARAM])\n    }\n\n\n    render() {\n        let specialisationsOptions = [];\n        if (this.state.practiceDetail) {\n            this.state.practiceDetail.specialisations.forEach(function (specialisation) {\n                specialisationsOptions.push({label: (specialisation.name), value: specialisation.id});\n            })\n        }\n\n\n        if (this.state.practiceDetail) {\n            const fields = [{\n                label: \"Practice Logo\",\n                key: \"logo\",\n                type: SINGLE_IMAGE_UPLOAD_FIELD,\n                initialValue: this.state.practiceDetail.logo,\n                allowWebcam: false\n            }, {\n                label: \"Practice Name\",\n                key: \"name\",\n                required: true,\n                placeholder: \"Practice Name\",\n                initialValue: this.state.practiceDetail.name,\n                type: INPUT_FIELD\n            }, {\n                label: \"Practice Tagline\",\n                key: \"tagline\",\n                placeholder: \"Practice Tagline\",\n                required: true,\n                initialValue: this.state.practiceDetail.tagline,\n                type: INPUT_FIELD\n            }, {\n                label: \"Practice Specialisation\",\n                key: \"specialisation\",\n                placeholder: \"Practice Specialisation\",\n                initialValue: this.state.practiceDetail.specialisation,\n                type: INPUT_FIELD,\n                // options: specialisationsOptions\n            }, {\n                label: \"Practice Street Address\",\n                key: \"address\",\n                placeholder: \"Practice Street Address\",\n                initialValue: this.state.practiceDetail.address,\n                type: INPUT_FIELD\n            }, {\n                label: \"Practice locality\",\n                initialValue: this.state.practiceDetail.locality,\n                key: \"locality\",\n                placeholder: \"Practice Locality\",\n                type: INPUT_FIELD\n            }, {\n                label: \"Practice City\",\n                initialValue: this.state.practiceDetail.City,\n                placeholder: \"Practice City\",\n                key: \"city\",\n                type: INPUT_FIELD,\n                //     options: [{label: \"Hello\", value: \"1\"}, {label: \"New\", value: \"13\"}, {label: \"World\", value: \"14\"}]\n            }, {\n                label: \"Practice state\",\n                key: \"state\",\n                placeholder: \"Practice State\",\n                initialValue: this.state.practiceDetail.state,\n                type: INPUT_FIELD,\n                // options: [{label: \"Hello\", value: \"1\"}, {label: \"New\", value: \"13\"}, {label: \"World\", value: \"14\"}]\n            }, {\n                label: \"Practice Country\",\n                key: \"country\",\n                placeholder: \"Practice Country\",\n                initialValue: this.state.practiceDetail.country,\n                type: INPUT_FIELD,\n            }, {\n                label: \"Practice PINCODE\",\n                key: \"pincode\",\n                placeholder: \"Practice PINCODE\",\n                initialValue: this.state.practiceDetail.pincode,\n                type: INPUT_FIELD\n            }, {\n                label: \"Practice Contact Number\",\n                key: \"contact\",\n                placeholder: \"Practice Contact Number\",\n                initialValue: this.state.practiceDetail.contact,\n                type: INPUT_FIELD\n            }, {\n                label: \"Practice Email\",\n                key: \"email\",\n                placeholder: \"Practice Email\",\n                initialValue: this.state.practiceDetail.email,\n                type: EMAIL_FIELD\n            }, {\n                label: \"SMS Language\",\n                key: \"language\",\n                placeholder: 'SMS Language',\n                initialValue: this.state.practiceDetail && this.state.practiceDetail.language ? this.state.practiceDetail.language : this.props.activePracticeData.language,\n                type: SELECT_FIELD,\n                options: this.state[SMS_LANGUAGE_CONFIG_PARAM].map(item => {\n                    return {label: item, value: item}\n                }),\n            }, {\n                label: \"Practice website\",\n                key: \"website\",\n                placeholder: \"Practice Website\",\n                initialValue: this.state.practiceDetail.website,\n                type: INPUT_FIELD\n            }, {\n                label: \"GSTIN\",\n                initialValue: this.state.practiceDetail.gstin,\n                placeholder: \"GSTIN\",\n                key: \"gstin\",\n                type: INPUT_FIELD\n            }, {\n                label: \"Invoice Prefix\",\n                initialValue: this.state.practiceDetail.invoice_prefix,\n                placeholder: \"DEL/INV/\",\n                key: \"invoice_prefix\",\n                type: INPUT_FIELD,\n                required: true\n            }, {\n                label: \"Payment Prefix\",\n                initialValue: this.state.practiceDetail.payment_prefix,\n                placeholder: \"DEL/RCPT/\",\n                key: \"payment_prefix\",\n                type: INPUT_FIELD,\n                required: true\n            }, {\n                label: \"Return Prefix\",\n                placeholder: \"DEL/RET/\",\n                initialValue: this.state.practiceDetail.return_prefix,\n                key: \"return_prefix\",\n                type: INPUT_FIELD,\n                required: true\n            }];\n            const TestFormLayout = Form.create()(DynamicFieldsForm);\n            const formProp = {\n                successFn: function (data) {\n                    displayMessage(SUCCESS_MSG_TYPE, \"success\");\n                    console.log(data);\n                },\n                errorFn: function () {\n\n                },\n                action: interpolate(PRACTICE, [this.props.practiceId]),\n                method: \"put\",\n            };\n\n\n            return <Row>\n                <Card>\n                    <TestFormLayout title=\"Edit Practice Details\" changeRedirect={this.changeRedirect}\n                                    formProp={formProp} fields={fields} {...this.props}/>\n                    {this.state.redirect && <Redirect to='/settings/clinics'/>}\n                </Card>\n            </Row>\n        } else return <Card loading={true}/>\n    }\n}\n\nexport default EditPracticeDetail;\n","import React from \"react\";\nimport {Form, Input, Select, InputNumber, Button, Card} from \"antd\";\nimport {REQUIRED_FIELD_MESSAGE} from \"../../../../constants/messages\";\nimport {displayMessage, getAPI, interpolate, postAPI} from \"../../../../utils/common\";\nimport {DRUG_TYPE_API, DRUG_UNIT_API, INVENTORY_ITEM_API} from \"../../../../constants/api\";\nimport {\n    DATE_PICKER,\n    INPUT_FIELD, MULTI_IMAGE_UPLOAD_FIELD,\n    NUMBER_FIELD,\n    SELECT_FIELD,\n    SINGLE_IMAGE_UPLOAD_FIELD, SUCCESS_MSG_TYPE, TIME_PICKER,\n} from \"../../../../constants/dataKeys\";\nimport moment from \"moment/moment\";\nimport {DRUG} from \"../../../../constants/hardData\";\n\nclass AddorEditPrescriptionForm extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            drugTypeList: [],\n            drugUnitList: [],\n            editPrescreption: this.props.editCatalog ? this.props.editCatalog : null\n        }\n    }\n\n    componentWillMount() {\n        this.loadDrugType();\n        this.loadDrugUnit();\n    }\n\n    loadDrugType() {\n        let that = this;\n        let successFn = function (data) {\n            that.setState({\n                drugTypeList: data\n            })\n        }\n        let errorFn = function () {\n        }\n        getAPI(interpolate(DRUG_TYPE_API, [this.props.active_practiceId]), successFn, errorFn);\n    }\n\n    loadDrugUnit() {\n        let that = this;\n        let successFn = function (data) {\n            that.setState({\n                drugUnitList: data\n            })\n        }\n        let errorFn = function () {\n        }\n        getAPI(interpolate(DRUG_UNIT_API, [this.props.active_practiceId]), successFn, errorFn);\n    }\n\n    setFormParams = (type, value) => {\n        this.setState({\n            [type]: value\n        })\n    }\n    handleSubmit = (option) => {\n        let that = this;\n        this.props.form.validateFieldsAndScroll((err, values) => {\n            if (!err) {\n                console.log(values);\n            }\n            let reqData = {\n                ...values,\n                practice: that.props.active_practiceId,\n                maintain_inventory: option,\n                item_type: DRUG\n            }\n            if (that.state.editPrescreption) {\n                reqData.id = that.state.editPrescreption.id;\n            }\n            let successFn = function (data) {\n\n                displayMessage(SUCCESS_MSG_TYPE, \"success\")\n                that.props.loadData();\n                let url = '/settings/prescriptions';\n                that.props.history.push(url);\n            }\n            let errorFn = function () {\n\n            }\n\n            postAPI(INVENTORY_ITEM_API, reqData, successFn, errorFn)\n        });\n    }\n\n    render() {\n        const that = this;\n        const formItemLayout = (this.props.formLayout ? this.props.formLayout : {\n            labelCol: {span: 6},\n            wrapperCol: {span: 14},\n        });\n        const {getFieldDecorator} = this.props.form;\n        return <Card>\n            <Form>\n                <h2>{this.props.title}</h2>\n                <Form.Item key={'name'} label={'Name'}  {...formItemLayout}>\n                    {getFieldDecorator('name', {\n                        initialValue: that.state.editPrescreption ? that.state.editPrescreption.name : null,\n                        rules: [{\n                            required: true,\n                            message: REQUIRED_FIELD_MESSAGE\n                        }]\n                    })(\n                        <Input placeholder={'Medicine Name'}/>\n                    )}\n                </Form.Item>\n                {this.state.drugType && this.state.drugType == INPUT_FIELD ?\n                    <Form.Item key={'drug_type_extra'} label={\"Medicine Type\"}  {...formItemLayout}>\n                        {getFieldDecorator(\"drug_type_extra\", {\n                            initialValue: that.state.editPrescreption ? that.state.editPrescreption.drug_type_extra : null,\n                            rules: [{\n                                required: true,\n                                message: REQUIRED_FIELD_MESSAGE\n                            }]\n                        })(\n                            <Input/>\n                        )}\n                        <a onClick={() => that.setFormParams('drugType', SELECT_FIELD)}>Choose Medicine Type</a>\n                    </Form.Item>\n                    : <Form.Item key={\"drug_type\"} {...formItemLayout} label={\"Medicine Type\"}>\n                        {getFieldDecorator(\"drug_type\", {\n                            initialValue: this.state.editPrescreption ? this.state.editPrescreption.drug_type : null,\n                            rules: [{\n                                required: true,\n                                message: REQUIRED_FIELD_MESSAGE\n                            }]\n                        })(\n                            <Select>\n                                {that.state.drugTypeList.map((option) => <Select.Option\n                                    value={option.id}>{option.name}</Select.Option>)}\n                            </Select>\n                        )}\n                        <a onClick={() => that.setFormParams('drugType', INPUT_FIELD)}>Add New Medicine Type</a>\n                    </Form.Item>}\n                <Form.Item key={\"strength\"}{...formItemLayout}\n                           label={\"Dosage\"}>\n                    {getFieldDecorator(\"strength\", {\n                        initialValue: that.state.editPrescreption ? that.state.editPrescreption.strength : null,\n                        rules: [{\n                            required: true,\n                            message: REQUIRED_FIELD_MESSAGE\n                        }]\n                    })(\n                        <InputNumber min={0}/>\n                    )}\n                </Form.Item>\n                {this.state.drugUnit && this.state.drugUnit == INPUT_FIELD ?\n                    <Form.Item key={'unit_type_extra'} label={\"Medicine Unit\"}  {...formItemLayout}>\n                        {getFieldDecorator(\"unit_type_extra\", {\n                            initialValue: that.state.editPrescreption ? that.state.editPrescreption.unit_type_extra : null,\n                            rules: [{\n                                required: true,\n                                message: REQUIRED_FIELD_MESSAGE\n                            }]\n                        })(\n                            <Input/>\n                        )}\n                        <a onClick={() => that.setFormParams('drugUnit', SELECT_FIELD)}>Choose Medicine Unit</a>\n                    </Form.Item>\n                    : <Form.Item key={\"stength_unit\"} {...formItemLayout} label={\"Medicine Unit\"}>\n                        {getFieldDecorator(\"stength_unit\", {\n                            initialValue: this.state.editPrescreption ? this.state.editPrescreption.stength_unit : null,\n                            rules: [{\n                                required: true,\n                                message: REQUIRED_FIELD_MESSAGE\n                            }]\n                        })(\n                            <Select>\n                                {that.state.drugUnitList.map((option) => <Select.Option\n                                    value={option.id}>{option.name}</Select.Option>)}\n                            </Select>\n                        )}\n                        <a onClick={() => that.setFormParams('drugUnit', INPUT_FIELD)}>Add New Medicine Unit</a>\n                    </Form.Item>}\n                <Form.Item key={\"instructions\"} {...formItemLayout} label={\"Instructions\"}>\n                    {getFieldDecorator(\"instructions\", {\n                        initialValue: that.state.editPrescreption ? that.state.editPrescreption.instructions : null\n                    })(\n                        <Input/>\n                    )}\n                </Form.Item>\n                <Form.Item {...formItemLayout} >\n                    <Button onClick={() => this.handleSubmit(false)}>Save Medicine</Button>\n                    &nbsp;&nbsp;&nbsp;\n                    <Button onClick={() => this.handleSubmit(true)} type={'primary'}>Save & Add to Inventory</Button>\n                    &nbsp;&nbsp;&nbsp;\n                    {that.props.history ?\n                        <Button onClick={() => that.props.history.goBack()}>\n                            Cancel\n                        </Button> : null}\n                </Form.Item>\n            </Form>\n        </Card>\n    }\n}\n\nexport default Form.create()(AddorEditPrescriptionForm);\n","import React from \"react\";\nimport DynamicFieldsForm from \"../../../common/DynamicFieldsForm\";\nimport {Form, Card, message} from \"antd\";\nimport {\n    CHECKBOX_FIELD,\n    SUCCESS_MSG_TYPE,\n    INPUT_FIELD,\n    RADIO_FIELD,\n    NUMBER_FIELD,\n    SELECT_FIELD\n} from \"../../../../constants/dataKeys\";\nimport {DRUG_CATALOG, DRUG_TYPE_API, INVENTORY_ITEM_API, OFFERS, SINGLE_DRUG_CATALOG} from \"../../../../constants/api\";\nimport {getAPI, displayMessage, deleteAPI, interpolate} from \"../../../../utils/common\";\nimport {Redirect, Route} from 'react-router-dom'\nimport {DRUG} from \"../../../../constants/hardData\";\nimport AddorEditPrescriptionForm from \"./AddorEditPrescriptionForm\";\n\n\nclass AddPrescription extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            redirect: false,\n            editPrescreption: this.props.editCatalog ? this.props.editCatalog : null,\n            drugTypeList: []\n\n        }\n        this.changeRedirect = this.changeRedirect.bind(this);\n        this.setFormParams = this.setFormParams.bind(this);\n        this.loadDrugType = this.loadDrugType.bind(this);\n    }\n\n    componentWillMount() {\n        this.loadDrugType();\n        let that = this;\n        if (this.props.match.params.drugId) {\n            let successFn = function (data) {\n                that.setState({\n                    editPrescreption: data\n                })\n            };\n            let errorFn = function () {\n            };\n            getAPI(interpolate(SINGLE_DRUG_CATALOG, [this.props.active_practiceId, this.props.match.params.drugId]), successFn, errorFn);\n        }\n    }\n\n    changeRedirect() {\n        var redirectVar = this.state.redirect;\n        this.setState({\n            redirect: !redirectVar,\n        });\n    }\n\n    loadDrugType() {\n        let that = this;\n        let successFn = function (data) {\n            that.setState({\n                drugTypeList: data\n            })\n        }\n        let errorFn = function () {\n        }\n        getAPI(DRUG_TYPE_API, successFn, errorFn);\n    }\n\n    setFormParams(type, value) {\n        this.setState({\n            [type]: value\n        })\n    }\n\n    render() {\n        const drugTypeOptions = []\n        if (this.state.drugType) {\n            this.state.drugType.forEach(function (drug) {\n                drugTypeOptions.push({label: (drug.name), value: drug.id});\n            })\n        }\n        let that = this;\n        let drugTypeField = (this.state.drugType && this.state.drugType == INPUT_FIELD ?\n            {\n                label: \"Drug Type\",\n                key: \"drug_type_extra\",\n                required: true,\n                initialValue: this.state.editPrescreption ? this.state.editPrescreption.drug_type_extra : null,\n                type: INPUT_FIELD,\n                follow: <a onClick={() => that.setFormParams('drugType', SELECT_FIELD)}>Choose Drug Type</a>\n            } : {\n                label: \"Drug Type\",\n                key: \"drug_type\",\n                required: true,\n                initialValue: this.state.editPrescreption ? this.state.editPrescreption.drug_type : null,\n                type: SELECT_FIELD,\n                options: that.state.drugTypeList.map(drug => ({label: drug.name, value: drug.id})),\n                follow: <a onClick={() => that.setFormParams('drugType', INPUT_FIELD)}>Add New Drug Type</a>\n            });\n        let drugUnitField = (this.state.drugUnit && this.state.drugUnit == INPUT_FIELD ?\n            {\n                label: \"Dosage Unit\",\n                key: \"unit_type_extra\",\n                required: true,\n                initialValue: this.state.editPrescreption ? this.state.editPrescreption.unit_type_extra : null,\n                type: INPUT_FIELD,\n                follow: <a onClick={() => that.setFormParams('drugUnit', SELECT_FIELD)}>Choose Drug Type</a>\n            } : {\n                label: \"Dosage Unit\",\n                key: \"stength_unit\",\n                required: true,\n                initialValue: this.state.editPrescreption ? this.state.editPrescreption.stength_unit : null,\n                type: SELECT_FIELD,\n                options: that.state.drugTypeList.map(drug => ({label: drug.name, value: drug.id})),\n                follow: <a onClick={() => that.setFormParams('drugUnit', INPUT_FIELD)}>Add New Drug Unit</a>\n            });\n        const fields = [{\n            label: \"Name\",\n            key: \"name\",\n            initialValue: this.state.editPrescreption ? this.state.editPrescreption.name : null,\n            required: true,\n            type: INPUT_FIELD\n        }, drugTypeField, {\n            label: \"Dosage\",\n            key: \"strength\",\n            required: true,\n            initialValue: this.state.editPrescreption ? this.state.editPrescreption.strength : null,\n            type: NUMBER_FIELD\n        }, drugUnitField, {\n            label: \"Instructions \",\n            key: \"instructions\",\n            required: true,\n            initialValue: this.state.editPrescreption ? this.state.editPrescreption.instructions : null,\n            type: INPUT_FIELD\n        },];\n        // const formProp={\n        //   successFn:function(data){\n        //     console.log(data);\n        //     displayMessage(SUCCESS_MSG_TYPE, \"success\")\n        //\n        //   },\n        //   errorFn:function(){\n        //\n        //   },\n        //   action: interpolate(OFFERS,[this.props.active_practiceId]),\n        //   method: \"post\",\n        // }\n        const formProp = {\n            successFn: function (data) {\n                console.log(data);\n                displayMessage(SUCCESS_MSG_TYPE, \"success\")\n                that.props.loadData();\n\n            },\n            errorFn: function () {\n\n            },\n            // onFieldsDataChange:\n            // },\n            action: INVENTORY_ITEM_API,\n            method: \"post\",\n        }\n        const TestFormLayout = Form.create({\n            onValuesChange: function (props, changedValues, allValues) {\n                console.log(changedValues, allValues);\n                that.setState(function (prevState) {\n                    return {editPrescreption: {...prevState.editPrescreption, ...changedValues}}\n                });\n            }\n        })(DynamicFieldsForm);\n        let defaultValues = [{key: 'practice', value: this.props.active_practiceId}, {key: 'item_type', value: DRUG}];\n        if (this.state.editPrescreption) {\n            defaultValues.push({key: 'id', value: this.state.editPrescreption.id})\n        }\n        return <div>\n            <Card>\n                <Route exact path=\"/settings/prescriptions/add\"\n                       render={() => <AddorEditPrescriptionForm key={\"Add Prescriptions\"}\n                                                     title=\"Add Prescriptions\"\n                                                     formProp={formProp}\n                                                     changeRedirect={this.changeRedirect}\n                                                     fields={fields}/>}/>\n                <Route exact path=\"/settings/prescriptions/edit\"\n                       render={(route) => this.state.editPrescreption && this.state.editPrescreption.id ?\n                           <TestFormLayout key={\"Edit Prescriptions\"}\n                                           title=\"Edit Prescriptions\"\n                                           defaultValues={defaultValues} formProp={formProp}\n                                           changeRedirect={this.changeRedirect}\n                                           fields={fields}/> : null}/>\n\n                {this.state.redirect && <Redirect to='/settings/prescriptions'/>}\n\n            </Card>\n        </div>\n    }\n}\n\nexport default AddPrescription;\n","import React from \"react\";\nimport {Button, Card, Divider, Form, Icon, Popconfirm, Row, Table} from \"antd\";\nimport {Link, Redirect, Route, Switch} from \"react-router-dom\";\nimport {DRUG_CATALOG, INVENTORY_ITEM_API,} from \"../../../../constants/api\";\nimport {getAPI, interpolate, postAPI} from \"../../../../utils/common\";\nimport AddPrescription from \"./AddPrescription\";\nimport {DRUG} from \"../../../../constants/hardData\";\nimport AddorEditPrescriptionForm from \"./AddorEditPrescriptionForm\";\nimport InfiniteFeedLoaderButton from \"../../../common/InfiniteFeedLoaderButton\";\nimport CustomizedTable from \"../../../common/CustomizedTable\";\n\nclass Prescriptions extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            catalog: null,\n            editCatalog: {},\n            loading: true,\n            loadMorePrescriptions: null,\n        }\n        this.loadData = this.loadData.bind(this);\n        this.deleteObject = this.deleteObject.bind(this);\n        this.loadInitialData = this.loadInitialData.bind(this);\n    }\n\n    componentDidMount() {\n        this.loadData();\n    }\n\n    loadData() {\n        var that = this;\n        let successFn = function (data) {\n            console.log(\"get table\");\n            that.setState({\n                catalog: data.results,\n                loadMorePrescriptions: data.next,\n                loading: false\n            })\n        };\n        let errorFn = function () {\n            that.setState({\n                loading: false\n            })\n        };\n        getAPI(INVENTORY_ITEM_API, successFn, errorFn, {\n            practice: this.props.active_practiceId,\n            item_type: DRUG,\n            maintain_inventory: false,\n            page: that.state.loadMorePrescriptions || 1\n        });\n    }\n\n    loadInitialData() {\n        let that = this;\n        this.setState({\n            loadMorePrescriptions: null\n        }, function () {\n            that.loadData();\n        })\n    }\n\n    deleteObject(record) {\n        let that = this;\n        let reqData = record;\n        reqData.is_active = false;\n        let successFn = function (data) {\n            that.loadData();\n        }\n        let errorFn = function () {\n        }\n        postAPI(INVENTORY_ITEM_API, reqData, successFn, errorFn);\n    }\n\n    editCatalog(record) {\n        this.setState({\n            editCatalog: record,\n            loading: false\n        });\n        this.props.history.push('/settings/prescriptions/edit')\n    }\n\n    render() {\n        let that = this;\n        const columns = [{\n            title: 'Name',\n            dataIndex: 'name',\n            key: 'code',\n        }, {\n            title: 'Dosage',\n            dataIndex: 'strength',\n            key: 'strength',\n            render: (strength, record) => <span>{strength}&nbsp;{record.stength_unit}</span>\n        }, {\n            title: 'Medicine Instructions',\n            dataIndex: 'instructions',\n            key: 'instructions',\n        }, {\n            title: 'Action',\n            key: 'action',\n            render: (text, record) => (\n                <span>\n                    <a onClick={() => this.editCatalog(record)}>\n                Edit</a>\n                <Divider type=\"vertical\"/>\n                  <Popconfirm title=\"Are you sure delete this prescription?\" onConfirm={() => that.deleteObject(record)}\n                              okText=\"Yes\" cancelText=\"No\">\n                      <a>Delete</a>\n                  </Popconfirm>\n              </span>\n            ),\n        }];\n        return <Row>\n            <Switch>\n                <Route exact path=\"/settings/prescriptions/add\"\n                       render={() => <AddorEditPrescriptionForm  {...this.props} loadData={this.loadInitialData} title={\"Add Prescription\"}/>}/>\n                <Route exact path=\"/settings/prescriptions/edit\"\n                       render={(route) => (this.state.editCatalog.id ? <AddorEditPrescriptionForm  {...this.state}\n                                                                                                   title={\"Edit Prescription\"}\n                                                                                                   loadData={this.loadInitialData} {...this.props} {...route}/> :\n                           <Redirect to={\"/settings/prescriptions/\"}/>)}/>\n                <Route>\n                    <div>\n                        <h2>All presciptions\n                            <Link to=\"/settings/prescriptions/add\">\n                                <Button type=\"primary\" style={{float: 'right'}}>\n                                    <Icon type=\"plus\"/>&nbsp;Add\n                                </Button>\n                            </Link>\n                        </h2>\n                        <Card>\n                            <CustomizedTable loading={this.state.loading} columns={columns}\n                                             dataSource={this.state.catalog}\n                                             pagination={false}/>\n                        </Card>\n                        <InfiniteFeedLoaderButton loaderFunction={this.loadData}\n                                                  loading={this.state.loading}\n                                                  hidden={!this.state.loadMorePrescriptions}/>\n                    </div>\n                </Route>\n            </Switch>\n        </Row>\n    }\n}\n\nexport default Prescriptions;\n","import React from \"react\";\nimport DynamicFieldsForm from \"../../../common/DynamicFieldsForm\";\nimport {Button, Modal, Card, Form, Icon, Row, Table, Divider, Popconfirm} from \"antd\";\nimport {\n    SUCCESS_MSG_TYPE,\n    CHECKBOX_FIELD,\n    INPUT_FIELD,\n    RADIO_FIELD,\n    NUMBER_FIELD,\n    SELECT_FIELD\n} from \"../../../../constants/dataKeys\";\nimport {EXPENSE_TYPE} from \"../../../../constants/api\"\nimport {Link} from \"react-router-dom\";\nimport {getAPI, displayMessage, interpolate, postAPI} from \"../../../../utils/common\";\nimport CustomizedTable from \"../../../common/CustomizedTable\";\n\nclass ExpensesTypes extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            redirect: false,\n            visible: false,\n            expenses: null,\n            loading: true,\n            showDeleted: false,\n            deletedLoading: false,\n            deletedExpenses: []\n        };\n        this.loadData = this.loadData.bind(this);\n        this.deleteObject = this.deleteObject.bind(this);\n\n    }\n\n    componentDidMount() {\n        this.loadData();\n    }\n\n    loadData(deleted = false) {\n        var that = this;\n        let successFn = function (data) {\n            console.log(\"get table\");\n            if (deleted) {\n                that.setState({\n                    deletedExpenses: data,\n                    deletedLoading: false\n                })\n            } else {\n                that.setState({\n                    expenses: data,\n                    loading: false\n                })\n            }\n        };\n        let errorFn = function () {\n        };\n        if (deleted) {\n            getAPI(interpolate(EXPENSE_TYPE, [this.props.active_practiceId]), successFn, errorFn, {deleted: true});\n        } else {\n            getAPI(interpolate(EXPENSE_TYPE, [this.props.active_practiceId]), successFn, errorFn);\n        }\n    }\n\n    changeRedirect() {\n        var redirectVar = this.state.redirect;\n        this.setState({\n            redirect: !redirectVar,\n        });\n    }\n\n    editTax(value) {\n        this.setState({\n            editingId: value.id,\n            editingName: value.name,\n            editingValue: value.tax_value,\n            loading: false,\n            visible: true,\n        })\n    }\n\n    handleCancel = () => {\n        this.setState({visible: false});\n    }\n\n    deleteObject(record, type) {\n        let that = this;\n        let reqData = record;\n        reqData.is_active = type;\n        let successFn = function (data) {\n            that.loadData();\n            if (that.state.showDeleted) {\n                that.loadData(true);\n            }\n        }\n        let errorFn = function () {\n        };\n        postAPI(interpolate(EXPENSE_TYPE, [this.props.active_practiceId]), reqData, successFn, errorFn)\n    }\n\n    showDeletedExpenses = () => {\n        this.setState({\n            showDeleted: true,\n            deletedLoading: true\n        });\n        this.loadData(true)\n    }\n\n    render() {\n        let that = this;\n        const columns = [{\n            title: 'Expense Type',\n            dataIndex: 'name',\n            key: 'name',\n        }, {\n            title: 'Action',\n            key: 'action',\n            render: (text, record) => (\n                record.is_active ? <span>\n\n              <a onClick={() => this.editTax(record)}>  Edit</a>\n                <Divider type=\"vertical\"/>\n                <Popconfirm title=\"Are you sure to delete this?\"\n                            onConfirm={() => that.deleteObject(record, false)} okText=\"Yes\" cancelText=\"No\">\n                  <a>Delete</a>\n              </Popconfirm>\n              </span> : <span>\n                    <Popconfirm title=\"Are you sure to show this?\"\n                                onConfirm={() => that.deleteObject(record, true)} okText=\"Yes\" cancelText=\"No\">\n                  <a>Show</a>\n              </Popconfirm>\n                </span>\n            ),\n        }];\n        const fields = [{\n            label: \"Expense Type\",\n            key: \"name\",\n            placeholder: 'Expense Type',\n            required: true,\n            type: INPUT_FIELD\n        },];\n        const editfields = [{\n            label: \"Expense Type\",\n            key: \"name\",\n            required: true,\n            initialValue: this.state.editingName,\n            type: INPUT_FIELD\n        },];\n        const formProp = {\n            successFn: function (data) {\n                that.handleCancel();\n                that.loadData();\n                displayMessage(SUCCESS_MSG_TYPE, \"success\")\n            },\n            errorFn: function () {\n\n            },\n            action: interpolate(EXPENSE_TYPE, [this.props.active_practiceId]),\n            method: \"post\",\n        }\n        const defaultValues = [{\"key\": \"practice\", \"value\": this.props.active_practiceId}];\n        const editFormDefaultValues = [{\"key\": \"practice\", \"value\": this.props.active_practiceId}, {\n            \"key\": \"id\",\n            \"value\": this.state.editingId\n        }];\n        const TestFormLayout = Form.create()(DynamicFieldsForm);\n        return <div>\n            <h2>Expense Types</h2>\n            <Card>\n                <TestFormLayout defaultValues={defaultValues} formProp={formProp} fields={fields}/>\n                <Divider/>\n                <CustomizedTable loading={this.state.loading} columns={columns} dataSource={this.state.expenses}/>\n                {this.state.showDeleted ?\n                    <div>\n                        <CustomizedTable loading={this.state.deletedLoading} columns={columns}\n                                         dataSource={this.state.deletedExpenses}/>\n                    </div> :\n                    <h4><a onClick={() => this.showDeletedExpenses()}>Show Deleted Expense Types</a></h4>}\n            </Card>\n            <Modal\n                title=\"Edit Expense Type\"\n                visible={this.state.visible}\n                footer={null}\n                onCancel={this.handleCancel}>\n                <TestFormLayout defaultValues={editFormDefaultValues} formProp={formProp}\n                                fields={editfields}/>\n                <Button key=\"back\" onClick={this.handleCancel}>Return</Button>\n            </Modal>\n        </div>\n    }\n}\n\nexport default ExpensesTypes;\n","import React from \"react\";\nimport DynamicFieldsForm from \"../../../common/DynamicFieldsForm\";\nimport {Button, Modal, Card, Form, Icon, Row, Table, Divider, Popconfirm} from \"antd\";\nimport {\n    SUCCESS_MSG_TYPE,\n    CHECKBOX_FIELD,\n    INPUT_FIELD,\n    RADIO_FIELD,\n    NUMBER_FIELD,\n    SELECT_FIELD\n} from \"../../../../constants/dataKeys\";\nimport {MEDICAL_HISTORY} from \"../../../../constants/api\"\nimport {Link} from \"react-router-dom\";\nimport {getAPI, displayMessage, interpolate, postAPI} from \"../../../../utils/common\";\nimport CustomizedTable from \"../../../common/CustomizedTable\";\n\nclass MedicalHistory extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            redirect: false,\n            visible: false,\n            history: null,\n            loading: true,\n            deletedHistory: [],\n            showDeleted: false,\n            deletedLoading: false\n        };\n        this.loadData = this.loadData.bind(this);\n        this.deleteObject = this.deleteObject.bind(this);\n\n    }\n\n    componentDidMount() {\n        this.loadData();\n    }\n\n    loadData(deleted = false) {\n        var that = this;\n        let successFn = function (data) {\n            console.log(\"get table\");\n            if (deleted) {\n                that.setState({\n                    deletedHistory: data,\n                    deletedLoading: false\n                })\n            } else {\n                that.setState({\n                    history: data,\n                    loading: false\n                })\n            }\n        };\n        let errorFn = function () {\n            that.setState({\n                loading: false\n            })\n        };\n        if (deleted) {\n            getAPI(interpolate(MEDICAL_HISTORY, [this.props.active_practiceId]), successFn, errorFn, {deleted: true});\n        } else {\n            getAPI(interpolate(MEDICAL_HISTORY, [this.props.active_practiceId]), successFn, errorFn);\n        }\n    }\n\n    changeRedirect() {\n        var redirectVar = this.state.redirect;\n        this.setState({\n            redirect: !redirectVar,\n        });\n    }\n\n    editTax(value) {\n        this.setState({\n            editingId: value.id,\n            editingName: value.name,\n            visible: true,\n            loading: false\n        })\n    }\n\n    handleCancel = () => {\n        this.setState({visible: false});\n    }\n\n    deleteObject(record,type) {\n        let that = this;\n        let reqData = record;\n        reqData.is_active = type;\n        let successFn = function (data) {\n            that.loadData();\n            if (that.state.showDeleted) {\n                that.loadData(true);\n            }\n        }\n        let errorFn = function () {\n        };\n        postAPI(interpolate(MEDICAL_HISTORY, [this.props.active_practiceId]), reqData, successFn, errorFn)\n    }\n\n    showDeletedMedicalHistory = () => {\n        this.setState({\n            showDeleted: true,\n            deletedLoading: true\n        });\n        this.loadData(true)\n    }\n\n    render() {\n        let that = this;\n        const columns = [{\n            title: 'Medical History',\n            dataIndex: 'name',\n            key: 'name',\n        }, {\n            title: 'Action',\n            key: 'action',\n            render: (text, record) => (\n                record.is_active?<span>\n\n              <a onClick={() => this.editTax(record)}>  Edit</a>\n                <Divider type=\"vertical\"/>\n                <Popconfirm title=\"Are you sure to delete this?\"\n                            onConfirm={() => that.deleteObject(record,false)} okText=\"Yes\" cancelText=\"No\">\n                  <a>Delete</a>\n              </Popconfirm>\n              </span> : <span>\n                    <Popconfirm title=\"Are you sure to show this?\"\n                                onConfirm={() => that.deleteObject(record,true)} okText=\"Yes\" cancelText=\"No\">\n                  <a>Show</a>\n              </Popconfirm>\n                </span>\n            ),\n        }];\n        const fields = [{\n            label: \"Medical History\",\n            key: \"name\",\n            required: true,\n            type: INPUT_FIELD\n        },];\n        const editfields = [{\n            label: \"Medical history \",\n            key: \"name\",\n            required: true,\n            initialValue: this.state.editingName,\n            type: INPUT_FIELD\n        },];\n        const formProp = {\n            successFn: function (data) {\n                that.handleCancel();\n                that.loadData();\n                console.log(data);\n                console.log(\"sucess\");\n                displayMessage(SUCCESS_MSG_TYPE, \"success\")\n            },\n            errorFn: function () {\n\n            },\n            action: interpolate(MEDICAL_HISTORY, [this.props.active_practiceId]),\n            method: \"post\",\n        }\n        const defaultValues = [];\n        const editFormDefaultValues = [{\"key\": \"id\", \"value\": this.state.editingId}];\n        const TestFormLayout = Form.create()(DynamicFieldsForm);\n        return <div>\n            <h2>Medical History</h2>\n            <Card>\n                <TestFormLayout defaultValues={defaultValues} formProp={formProp} fields={fields}/>\n                <Divider/>\n                <CustomizedTable loading={this.state.loading} columns={columns} dataSource={this.state.history}/>\n                {this.state.showDeleted ?\n                    <div>\n                        <CustomizedTable loading={this.state.deletedLoading} columns={columns}\n                                         dataSource={this.state.deletedHistory}/>\n                    </div> :\n                    <h4><a onClick={() => this.showDeletedMedicalHistory()}>Show Deleted Medical History</a></h4>}\n            </Card>\n            <Modal\n                title=\"Basic Modal\"\n                visible={this.state.visible}\n                footer={null}\n            >\n                <TestFormLayout title=\"Change history\" defaultValues={editFormDefaultValues} formProp={formProp}\n                                fields={editfields}/>\n                <Button key=\"back\" onClick={this.handleCancel}>Return</Button>,\n\n            </Modal>\n        </div>\n    }\n}\n\nexport default MedicalHistory;\n","import React from \"react\";\nimport {Button, Modal, Card, Form, Icon, Row, Table, Divider, Checkbox, InputNumber, Col, TimePicker} from \"antd\";\nimport {\n    SUCCESS_MSG_TYPE,\n} from \"../../../../constants/dataKeys\";\nimport {CALENDER_SETTINGS} from \"../../../../constants/api\"\nimport {Link} from \"react-router-dom\";\nimport {getAPI, displayMessage, interpolate, postAPI} from \"../../../../utils/common\";\nimport {REQUIRED_FIELD_MESSAGE} from \"../../../../constants/messages\";\nimport moment from \"moment/moment\";\n\nlet dayKeys = ['monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday', 'sunday'];\n\nclass PracticeTimings extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            redirect: false,\n            visible: false,\n            timings: null,\n            loading: true,\n            visting_hour_same_week: true,\n            openPracticeDays: {},\n            twoSessions: {}\n        };\n        this.loadData = this.loadData.bind(this);\n\n    }\n\n    componentDidMount() {\n        this.loadData();\n    }\n\n    loadData() {\n        var that = this;\n        let successFn = function (data) {\n            let visting_hour_same_week = true;\n            let openPracticeDays = {};\n            let twoSessions = {};\n            if (data.length && data[0]) {\n                let dataObject = data[0]\n                dayKeys.forEach(function (dayKey) {\n                    openPracticeDays[dayKey] = dataObject[dayKey];\n                    twoSessions[`is_two_sessions_${dayKey}`] = dataObject[`is_two_sessions_${dayKey}`];\n                });\n                visting_hour_same_week = dataObject[\"visting_hour_same_week\"];\n                twoSessions[`is_two_sessions`] = dataObject[`is_two_sessions`];\n            }\n            that.setState({\n                timings: data[0],\n                visting_hour_same_week: visting_hour_same_week,\n                openPracticeDays: openPracticeDays,\n                twoSessions: twoSessions,\n                loading: false\n            })\n        };\n        let errorFn = function () {\n            that.setState({\n                timings: {},\n                loading: false\n            })\n        };\n        getAPI(interpolate(CALENDER_SETTINGS, [this.props.active_practiceId]), successFn, errorFn);\n    }\n\n    changeRedirect() {\n        var redirectVar = this.state.redirect;\n        this.setState({\n            redirect: !redirectVar,\n        });\n    }\n\n    changeVistingHourSameWeek = (e) => {\n        console.log(e.target)\n        this.setState({\n            [e.target.id]: e.target.checked\n        })\n    }\n    changeOpenPracticeDays = (type, value) => {\n        this.setState(function (prevState) {\n            return {openPracticeDays: {...prevState.openPracticeDays, [type]: value}}\n        })\n    }\n    changePracticeTwoSessions = (type, value) => {\n        this.setState(function (prevState) {\n            return {twoSessions: {...prevState.twoSessions, [type]: value}}\n        })\n    }\n    handleSubmit = (e) => {\n        let that = this;\n        e.preventDefault();\n        this.props.form.validateFieldsAndScroll((err, values) => {\n                if (!err) {\n                    console.log(values);\n                    let reqData = {...values};\n                    if (reqData.first_start_time) {\n                        reqData.first_start_time = moment(reqData.first_start_time).format('HH:mm');\n                    }\n                    if (reqData.first_end_time) {\n                        reqData.first_end_time = moment(reqData.first_end_time).format('HH:mm');\n                    }\n                    if (reqData.second_start_time) {\n                        reqData.second_start_time = moment(reqData.second_start_time).format('HH:mm');\n                    }\n                    if (reqData.second_end_time) {\n                        reqData.second_end_time = moment(reqData.second_end_time).format('HH:mm');\n                    }\n                    dayKeys.forEach(function (dayKey) {\n                        if (reqData[`first_start_time_${dayKey}`]) {\n                            reqData[`first_start_time_${dayKey}`] = moment(reqData[`first_start_time_${dayKey}`]).format('HH:mm');\n                        }\n                        if (reqData[`first_end_time_${dayKey}`]) {\n                            reqData[`first_end_time_${dayKey}`] = moment(reqData[`first_end_time_${dayKey}`]).format('HH:mm');\n                        }\n                        if (reqData[`second_start_time_${dayKey}`]) {\n                            reqData[`second_start_time_${dayKey}`] = moment(reqData[`second_start_time_${dayKey}`]).format('HH:mm');\n                        }\n                        if (reqData[`second_end_time_${dayKey}`]) {\n                            reqData[`second_end_time_${dayKey}`] = moment(reqData[`second_end_time_${dayKey}`]).format('HH:mm');\n                        }\n                    });\n                    if (that.state.timings) {\n                        reqData.id = that.state.timings.id\n                    }\n                    let successFn = function (data) {\n                        that.loadData();\n                        displayMessage(SUCCESS_MSG_TYPE, \"Calendar Timings Saved successfully!!\");\n                    };\n                    let errorFn = function () {\n\n                    };\n                    postAPI(interpolate(CALENDER_SETTINGS, [this.props.active_practiceId]), reqData, successFn, errorFn);\n                }\n            }\n        )\n    }\n\n    render() {\n\n        const that = this;\n        const formItemLayout = (this.props.formLayout ? this.props.formLayout : {\n            labelCol: {span: 12},\n            wrapperCol: {span: 12},\n        });\n        const {getFieldDecorator} = this.props.form;\n        return <div>\n            <Form onSubmit={this.handleSubmit}>\n                <Form.Item key={\"today_first_day\"}  {...formItemLayout}>\n                    {getFieldDecorator(\"today_first_day\", {\n                        valuePropName: 'checked',\n                        initialValue: that.state.timings ? that.state.timings.today_first_day : false\n                    }, {\n                        rules: [{message: REQUIRED_FIELD_MESSAGE}],\n                    })(\n                        <Checkbox\n                        >{\"Always show today as first day on my calendar\"}</Checkbox>\n                    )}\n                </Form.Item>\n                <Form.Item key={\"calendar_slot\"}\n                           {...formItemLayout}\n                           label={\"Show Calendar Slots of\"}>\n                    {getFieldDecorator(\"calendar_slot\", {\n                        initialValue: that.state.timings ? that.state.timings.calendar_slot : null,\n                        rules: [{\n                            required: true,\n                            message: REQUIRED_FIELD_MESSAGE\n                        }]\n                    })(\n                        <InputNumber min={5}/>\n                    )}\n                    <span className=\"ant-form-text\">mins.</span>\n                </Form.Item>\n                <Form.Item key={\"visting_hour_same_week\"}  {...formItemLayout}>\n                    {getFieldDecorator(\"visting_hour_same_week\", {\n                        valuePropName: 'checked',\n                        initialValue: that.state.timings ? that.state.timings.visting_hour_same_week : false\n                    }, {\n                        rules: [{message: REQUIRED_FIELD_MESSAGE}],\n                    })(\n                        <Checkbox onChange={this.changeVistingHourSameWeek}>\n                            {\"Visiting hours are  same for all working days in a week\"}\n                        </Checkbox>\n                    )}\n                </Form.Item>\n                <Divider style={{margin: 4}}/>\n                {this.state.visting_hour_same_week ?\n                    <div>\n                        <Row>\n                            <Col span={4}>\n\n                            </Col>\n                            <Col span={18}>\n                                <Form.Item key={\"is_two_sessions\"}  {...formItemLayout}>\n                                    {getFieldDecorator(\"is_two_sessions\", {\n                                        valuePropName: 'checked',\n                                        initialValue: that.state.timings ? that.state.timings.is_two_sessions || that.state.twoSessions[\"is_two_sessions\"] : false\n                                    }, {\n                                        rules: [{message: REQUIRED_FIELD_MESSAGE}],\n                                    })(\n                                        <Checkbox\n                                            onChange={(e) => this.changePracticeTwoSessions(\"is_two_sessions\", e.target.checked)}>\n                                            {\"Practice operates in two sessions.\"}\n                                        </Checkbox>\n                                    )}\n                                </Form.Item>\n                                <Row gutter={16}>\n                                    <Col span={12}>\n                                        <Form.Item key={\"first_start_time\"}\n                                                   label={\"Practice Starts At\"} {...formItemLayout}>\n                                            {getFieldDecorator(\"first_start_time\", {\n                                                initialValue: that.state.timings && that.state.timings.first_start_time ? moment(that.state.timings.first_start_time, \"HH:mm\") : null,\n                                                rules: [{required: true, message: REQUIRED_FIELD_MESSAGE}],\n                                            })(\n                                                <TimePicker format={\"HH:mm\"}/>\n                                            )}\n                                        </Form.Item>\n                                    </Col>\n                                    {that.state.twoSessions[\"is_two_sessions\"] ? <div>\n                                        <Col span={12}>\n                                            <Form.Item key={\"first_end_time\"}\n                                                       label={\"Lunch At\"} {...formItemLayout}>\n                                                {getFieldDecorator(\"first_end_time\", {\n                                                    initialValue: that.state.timings && that.state.timings.first_end_time ? moment(that.state.timings.first_end_time, \"HH:mm\") : null,\n                                                    rules: [{required: true, message: REQUIRED_FIELD_MESSAGE}],\n                                                })(\n                                                    <TimePicker format={\"HH:mm\"}/>\n                                                )}\n                                            </Form.Item>\n                                        </Col>\n                                        <Col span={12}>\n                                            <Form.Item key={\"second_start_time\"}\n                                                       label={\"Resume At\"} {...formItemLayout}>\n                                                {getFieldDecorator(\"second_start_time\", {\n                                                    initialValue: that.state.timings && that.state.timings.second_start_time ? moment(that.state.timings.second_start_time, \"HH:mm\") : null,\n                                                    rules: [{required: true, message: REQUIRED_FIELD_MESSAGE}],\n                                                })(\n                                                    <TimePicker format={\"HH:mm\"}/>\n                                                )}\n                                            </Form.Item>\n                                        </Col>\n                                    </div> : null}\n\n                                    <Col span={12}>\n                                        <Form.Item key={\"second_end_time\"}\n                                                   label={\"Practice Ends At\"} {...formItemLayout}>\n                                            {getFieldDecorator(\"second_end_time\", {\n                                                initialValue: that.state.timings && that.state.timings.second_end_time ? moment(that.state.timings.second_end_time, \"HH:mm\") : null,\n                                                rules: [{required: true, message: REQUIRED_FIELD_MESSAGE}],\n                                            })(\n                                                <TimePicker format={\"HH:mm\"}/>\n                                            )}\n                                        </Form.Item>\n                                    </Col>\n                                </Row>\n                            </Col>\n                        </Row>\n                        <Divider style={{margin: 4}}/>\n                    </div> : dayKeys.map(dayKey => <div key={dayKey}>\n                        <Row>\n                            <Col span={4}>\n                                <h4>{dayKey.replace(/^\\w/, c => c.toUpperCase())}</h4>\n                            </Col>\n\n                            <Col span={18}>\n                                <Form.Item key={`${dayKey}`}  {...formItemLayout}>\n                                    {getFieldDecorator(`${dayKey}`, {\n                                        valuePropName: 'checked',\n                                        initialValue: that.state.timings ? that.state.timings[`${dayKey}`] || that.state.openPracticeDays[dayKey] : false\n                                    }, {\n                                        rules: [{message: REQUIRED_FIELD_MESSAGE}],\n                                    })(\n                                        <Checkbox\n                                            onChange={(e) => that.changeOpenPracticeDays(dayKey, e.target.checked)}>\n                                            {`Practice is open on ${dayKey.replace(/^\\w/, c => c.toUpperCase())}`}\n                                        </Checkbox>\n                                    )}\n                                </Form.Item>\n                                {that.state.openPracticeDays[dayKey] ? <div>\n                                        <Form.Item key={`is_two_sessions_${dayKey}`}  {...formItemLayout}>\n                                            {getFieldDecorator(`is_two_sessions_${dayKey}`, {\n                                                valuePropName: 'checked',\n                                                initialValue: that.state.timings ? that.state.timings[`is_two_sessions_${dayKey}`] || that.state.twoSessions[`is_two_sessions_${dayKey}`] : false\n                                            }, {\n                                                rules: [{message: REQUIRED_FIELD_MESSAGE}],\n                                            })(\n                                                <Checkbox\n                                                    onChange={(e) => this.changePracticeTwoSessions(`is_two_sessions_${dayKey}`, e.target.checked)}\n                                                >\n                                                    {\"Practice operates in two sessions.\"}\n                                                </Checkbox>\n                                            )}\n                                        </Form.Item>\n                                        <Row gutter={16}>\n                                            <Col span={12}>\n                                                <Form.Item key={`first_start_time_${dayKey}`}\n                                                           label={\"Practice Starts At\"} {...formItemLayout}>\n                                                    {getFieldDecorator(`first_start_time_${dayKey}`, {\n                                                        initialValue: that.state.timings && that.state.timings[`first_start_time_${dayKey}`] ? moment(that.state.timings[`first_start_time_${dayKey}`], \"HH:mm\") : null,\n                                                        rules: [{required: true, message: REQUIRED_FIELD_MESSAGE}],\n                                                    })(\n                                                        <TimePicker format={\"HH:mm\"}/>\n                                                    )}\n                                                </Form.Item>\n                                            </Col>\n                                            {that.state.twoSessions[`is_two_sessions_${dayKey}`] ? <div>\n                                                <Col span={12}>\n                                                    <Form.Item key={`first_end_time_${dayKey}`}\n                                                               label={\"Lunch At\"} {...formItemLayout}>\n                                                        {getFieldDecorator(`first_end_time_${dayKey}`, {\n                                                            initialValue: that.state.timings && that.state.timings[`first_end_time_${dayKey}`] ? moment(that.state.timings[`first_end_time_${dayKey}`], \"HH:mm\") : null,\n                                                            rules: [{required: true, message: REQUIRED_FIELD_MESSAGE}],\n                                                        })(\n                                                            <TimePicker format={\"HH:mm\"}/>\n                                                        )}\n                                                    </Form.Item>\n                                                </Col>\n                                                <Col span={12}>\n                                                    <Form.Item key={`second_start_time_${dayKey}`}\n                                                               label={\"Resume At\"} {...formItemLayout}>\n                                                        {getFieldDecorator(`second_start_time_${dayKey}`, {\n                                                            initialValue: that.state.timings && that.state.timings[`second_start_time_${dayKey}`] ? moment(that.state.timings[`second_start_time_${dayKey}`], \"HH:mm\") : null,\n                                                            rules: [{required: true, message: REQUIRED_FIELD_MESSAGE}],\n                                                        })(\n                                                            <TimePicker format={\"HH:mm\"}/>\n                                                        )}\n                                                    </Form.Item>\n                                                </Col>\n                                            </div> : null}\n                                            <Col span={12}>\n                                                <Form.Item key={`second_end_time_${dayKey}`}\n                                                           label={\"Practice Ends At\"} {...formItemLayout}>\n                                                    {getFieldDecorator(`second_end_time_${dayKey}`, {\n                                                        initialValue: that.state.timings && that.state.timings[`second_end_time_${dayKey}`] ? moment(that.state.timings[`second_end_time_${dayKey}`], \"HH:mm\") : null,\n                                                        rules: [{required: true, message: REQUIRED_FIELD_MESSAGE}],\n                                                    })(\n                                                        <TimePicker format={\"HH:mm\"}/>\n                                                    )}\n                                                </Form.Item>\n                                            </Col>\n                                        </Row>\n                                    </div>\n                                    : null}\n                            </Col>\n                        </Row>\n                        <Divider style={{margin: 4}}/>\n                    </div>)\n                }\n                <Form.Item {...formItemLayout}>\n                    <Button loading={that.state.loading} type=\"primary\" htmlType=\"submit\" style={{margin: 5}}>\n                        Submit\n                    </Button>\n                    {that.props.history ?\n                        <Button style={{margin: 5}} onClick={() => that.props.history.goBack()}>\n                            Cancel\n                        </Button> : null}\n                </Form.Item>\n            </Form>\n        </div>\n    }\n\n}\n\nexport default Form.create()(PracticeTimings);\n","import React from \"react\";\nimport DynamicFieldsForm from \"../../../common/DynamicFieldsForm\";\nimport {Button, Modal, Card, Form, Icon, Row, Table, Divider, Popconfirm, Tag} from \"antd\";\nimport {\n    SUCCESS_MSG_TYPE,\n    CHECKBOX_FIELD,\n    INPUT_FIELD,\n    RADIO_FIELD,\n    NUMBER_FIELD,\n    SELECT_FIELD\n} from \"../../../../constants/dataKeys\";\nimport {APPOINTMENT_CATEGORIES} from \"../../../../constants/api\"\nimport {Link} from \"react-router-dom\";\nimport {getAPI, displayMessage, interpolate, postAPI} from \"../../../../utils/common\";\nimport CustomizedTable from \"../../../common/CustomizedTable\";\nimport {hashCode, intToRGB} from \"../../../../utils/clinicUtils\";\n\nclass AppointmentCategories extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            redirect: false,\n            visible: false,\n            appointmentCategories: null,\n            loading: true\n        };\n        this.loadAppointmentCategories = this.loadAppointmentCategories.bind(this);\n        this.deleteObject = this.deleteObject.bind(this);\n\n    }\n\n    componentDidMount() {\n        this.loadAppointmentCategories();\n    }\n\n    loadAppointmentCategories() {\n        let that = this;\n        let successFn = function (data) {\n            that.setState(function (prevState) {\n                data.forEach(function (obj) {\n                    obj.color = intToRGB(hashCode(obj.name))\n                });\n                return {\n                    appointmentCategories: data,\n                    loading: false\n                }\n            })\n        }\n        let errorFn = function () {\n\n        }\n        getAPI(interpolate(APPOINTMENT_CATEGORIES, [this.props.active_practiceId]), successFn, errorFn)\n    }\n\n    changeRedirect() {\n        var redirectVar = this.state.redirect;\n        this.setState({\n            redirect: !redirectVar,\n        });\n    }\n\n    editCategory(value) {\n        this.setState({\n            editingId: value.id,\n            editingName: value.name,\n            visible: true,\n            loading: false\n        })\n    }\n\n    deleteObject(record) {\n        let that = this;\n        let reqData = record;\n        reqData.is_active = false;\n        let successFn = function (data) {\n            that.loadAppointmentCategories();\n        }\n        let errorFn = function () {\n        };\n        postAPI(interpolate(APPOINTMENT_CATEGORIES, [this.props.active_practiceId]), reqData, successFn, errorFn)\n    }\n\n    handleCancel = () => {\n        this.setState({visible: false});\n    }\n\n\n    render() {\n        let that = this;\n        const columns = [{\n            // title: 'Name',\n            dataIndex: 'color',\n            key: 'color',\n            render: (color) => <Tag color={'#' + color}>#</Tag>\n        }, {\n            title: 'Name',\n            dataIndex: 'name',\n            key: 'name',\n        }, {\n            title: 'Action',\n            key: 'action',\n            render: (text, record) => (\n                <span>\n              <a onClick={() => this.editCategory(record)}>  Edit</a>\n                <Divider type=\"vertical\"/>\n                <Popconfirm title=\"Are you sure delete this?\"\n                            onConfirm={() => that.deleteObject(record)} okText=\"Yes\" cancelText=\"No\">\n                  <a>Delete</a>\n              </Popconfirm>\n              </span>\n            ),\n        }];\n        const fields = [{\n            label: \"Category name\",\n            key: \"name\",\n            placeholder:\"Category Name\",\n            required: true,\n            type: INPUT_FIELD\n        },];\n        const editfields = [{\n            label: \"Category name\",\n            key: \"name\",\n            required: true,\n            initialValue: this.state.editingName,\n            type: INPUT_FIELD\n        },];\n        const formProp = {\n            successFn: function (data) {\n                that.handleCancel();\n                that.loadAppointmentCategories();\n                console.log(data);\n                console.log(\"sucess\");\n                displayMessage(SUCCESS_MSG_TYPE, \"success\")\n            },\n            errorFn: function () {\n\n            },\n            action: interpolate(APPOINTMENT_CATEGORIES, [this.props.active_practiceId]),\n            method: \"post\",\n        }\n        const defaultValues = [];\n        const editFormDefaultValues = [{\"key\": \"id\", \"value\": this.state.editingId}];\n        const TestFormLayout = Form.create()(DynamicFieldsForm);\n        return <div>\n            <TestFormLayout defaultValues={defaultValues} formProp={formProp} fields={fields} {...this.props}/>\n            <Divider/>\n            <CustomizedTable loading={this.state.loading} columns={columns}\n                             dataSource={this.state.appointmentCategories}/>\n            <Modal\n                title=\"Edit Appointment Category\"\n                visible={this.state.visible}\n                footer={null}\n                onCancel={this.handleCancel}\n            >\n                <TestFormLayout defaultValues={editFormDefaultValues} formProp={formProp} fields={editfields}/>\n                <Button key=\"back\" onClick={this.handleCancel}>Return</Button>,\n\n            </Modal>\n        </div>\n    }\n}\n\nexport default AppointmentCategories;\n","import React from \"react\";\nimport DynamicFieldsForm from \"../../../common/DynamicFieldsForm\";\nimport {Form, Button, Card, Icon, Tabs, Divider, Tag, Row, Table} from \"antd\";\nimport {CHECKBOX_FIELD, INPUT_FIELD, RADIO_FIELD, SELECT_FIELD} from \"../../../../constants/dataKeys\";\nimport PracticeTimings from \"./PracticeTimings\";\n//import CancelledInvoice from \"./CancelledInvoice\";\nimport AppointmentCategories from \"./AppointmentCategories\";\nimport {TAXES} from \"../../../../constants/api\"\nimport {Link} from \"react-router-dom\";\nimport {getAPI, interpolate} from \"../../../../utils/common\";\n\nconst TabPane = Tabs.TabPane;\n\n\nclass CalendarSettings extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            loading: true,\n            defaultActiveKey: this.props.location.hash\n        }\n    }\n\n    render() {\n        return <div>\n            <h2>Calendar Settings</h2>\n            <Row>\n                <Card>\n                    <Tabs defaultActiveKey={this.state.defaultActiveKey}>\n                        <TabPane tab={<span><Icon type=\"schedule\"/>Calender Timings Settings</span>} key=\"#timings\">\n                            <PracticeTimings {...this.state} {...this.props}/>\n                        </TabPane>\n                        <TabPane tab={<span><Icon type=\"reconciliation\"/>Appointment Categories</span>}\n                                 key=\"#categories\">\n                            <AppointmentCategories {...this.props}/>\n                        </TabPane>\n                    </Tabs>\n                </Card>\n            </Row>\n        </div>\n    }\n}\n\nexport default CalendarSettings;\n","import React from \"react\";\nimport {Divider, Icon, Layout, Menu} from 'antd';\nimport {Link} from 'react-router-dom';\n\n\nconst Sider = Layout.Sider;\n\nclass SettingSider extends React.Component {\n\n    render() {\n        return <Sider trigger={null}\n                      collapsible\n                      style={{overflow: 'auto', minHeight: '100vh', background: '#fff'}}>\n\n            <Menu mode=\"inline\" defaultSelectedKeys={['5']}>\n                <Menu.ItemGroup key=\"g1\" title={<Divider style={{margin: '0px'}}>Practice Settings</Divider>}>\n                    {this.props.activePracticePermissions.SettingsPracticeDetail ? <Menu.Item key=\"5\">\n                        <Link to=\"/settings/clinics\">\n                            <Icon type=\"shop\"/>Practice Details\n                        </Link>\n                    </Menu.Item> : null}\n\n                    {this.props.activePracticePermissions.SettingsCommunincations ? <Menu.Item key=\"7\">\n                        <Link to=\"/settings/communication-settings\">\n                            <Icon type=\"message\"/>Communication\n                        </Link>\n                    </Menu.Item> : null}\n                    {this.props.activePracticePermissions.SettingsCalendar ? <Menu.Item key=\"17\">\n                        <Link to=\"/settings/calendarsettings#timings\">\n                            <Icon type=\"schedule\"/>Calendar\n                        </Link>\n                    </Menu.Item> : null}\n                    {this.props.activePracticePermissions.SettingsPracticeStaff ? <Menu.Item key=\"6\">\n                        <Link to=\"/settings/clinics-staff\">\n                            <Icon type=\"team\"/>Practice Staff\n                        </Link>\n                    </Menu.Item> : null}\n                    {this.props.activePracticePermissions.ZoomUser?\n                        <Menu.Item key={'35'}>\n                            <Link to=\"/settings/zoom-user\">\n                                <Icon type={\"user\"}/>\n                                <span className=\"nav-text\">Zoom User</span>\n                            </Link>\n                        </Menu.Item>:null}\n\n                    {this.props.activePracticePermissions.SettingsAgents || this.props.allowAllPermissions?\n                    <Menu.Item key=\"32\">\n                        <Link to=\"/settings/agents\">\n                            <Icon type=\"usergroup-add\"/>\n                            <span className=\"nav-text\">Advisor</span>\n                        </Link>\n                    </Menu.Item>:null}\n\n                    {this.props.activePracticePermissions.SettingsAgentRoles || this.props.allowAllPermissions?\n                    <Menu.Item key=\"33\">\n                        <Link to=\"/settings/agent-roles\">\n                            <Icon type=\"apartment\"/>\n                            <span className=\"nav-text\">Advisor Roles</span>\n                        </Link>\n                    </Menu.Item>:null}\n\n                    {this.props.activePracticePermissions.SettingsProcedureCatalog ? <Menu.Item key=\"8\">\n                        <Link to=\"/settings/procedures\">\n                            <Icon type=\"folder-open\"/>Procedure\n                            Catalog</Link>\n                    </Menu.Item> : null}\n                    {this.props.activePracticePermissions.SettingsBilling ? <Menu.Item key=\"9\">\n                        <Link to=\"/settings/billing#taxcatalog\">\n                            <Icon type=\"audit\"/>Billing\n                        </Link>\n                    </Menu.Item> : null}\n                    {this.props.activePracticePermissions.SettingsLoyalty ? <Menu.Item key=\"10\">\n                        <Link to=\"/settings/loyalty\">\n                            <Icon type=\"trophy\"/>Loyalty\n                        </Link>\n                    </Menu.Item> : null}\n\n\n\n                    {this.props.activePracticePermissions.SettingsMLMSettings ? <Menu.Item key=\"30\">\n                        <Link to=\"/settings/mlm\">\n                            <Icon type=\"wallet\"/>\n                            <span className=\"nav-text\">MLM</span>\n                        </Link>\n                    </Menu.Item> : null}\n                    {/*<Menu.Item key=\"11\"><Link to=\"/settings/contacts\"> Contacts</Link></Menu.Item>*/}\n                    {this.props.activePracticePermissions.SettingsEMR ? <Menu.Item key=\"12\">\n                        <Link to=\"/settings/emr#complaints\">\n                            <Icon type=\"file-text\"/> EMR\n                        </Link>\n                    </Menu.Item> : null}\n                    {this.props.activePracticePermissions.SettingsPrescriptions ? <Menu.Item key=\"13\">\n                        <Link to=\"/settings/prescriptions\">\n                            <Icon type=\"file-text\"/> Prescriptions\n                        </Link>\n                    </Menu.Item> : null}\n                    {this.props.activePracticePermissions.SettingsLabs ? <Menu.Item key=\"14\">\n                        <Link to=\"/settings/labs\">\n                            <Icon type=\"experiment\"/>Labs\n                        </Link>\n                    </Menu.Item> : null}\n                    {this.props.activePracticePermissions.SettingsPrintouts ?\n                        <Menu.Item key=\"18\">\n                            <Link to=\"/settings/printout\">\n                                <Icon type=\"printer\"/> Printout\n                            </Link>\n                        </Menu.Item> : null}\n                    {/*{this.props.activePracticePermissions.SettingsEmailPDFSettings ?*/}\n                    {/*    <Menu.Item key=\"21\">*/}\n                    {/*        <Link to=\"/settings/mailpdfsettings\">*/}\n                    {/*            <Icon type=\"mail\"/> Email PDF Settings*/}\n                    {/*        </Link>*/}\n                    {/*    </Menu.Item> : null}*/}\n                    {this.props.activePracticePermissions.SettingsMedicalHistory ? <Menu.Item key=\"15\">\n                        <Link to=\"/settings/medical-history\">\n                            <Icon type=\"medicine-box\"/> Medical History\n                        </Link>\n                    </Menu.Item> : null}\n                    {this.props.activePracticePermissions.SettingsExpenseTypes ? <Menu.Item key=\"16\">\n                        <Link to=\"/settings/expense-types\">\n                            <Icon type=\"dollar\"/> Expense Types\n                        </Link>\n                    </Menu.Item> : null}\n\n                    <Menu.Item key=\"20\">\n                        <Link to=\"/settings/integration\">\n                            <Icon type=\"link\"/> My Integrations\n                        </Link>\n                    </Menu.Item>\n                </Menu.ItemGroup>\n                <Menu.ItemGroup key=\"g2\" title={<Divider style={{margin: '0px'}}>Bed & Medicine</Divider>}>\n                {this.props.activePracticePermissions.SettingsRoomTypes ?\n                    <Menu.Item key=\"22\">\n                        <Link to=\"/settings/roomtypes\">\n                            <Icon type=\"apartment\"/> Room Types\n                        </Link>\n                    </Menu.Item>\n                :null}\n\n                {this.props.activePracticePermissions.SettingsBedPackages ?\n                    <Menu.Item key=\"23\">\n                        <Link to=\"/settings/bed-packages\">\n                            <Icon type=\"box-plot\"/> Bed Packages\n                        </Link>\n                    </Menu.Item>\n                :null}\n\n                {this.props.activePracticePermissions.SettingsMedicinePackages ?\n                    <Menu.Item key=\"24\">\n                        <Link to=\"/settings/medicine-packages\">\n                            <Icon type=\"medicine-box\"/> Medicine Packages\n                        </Link>\n                    </Menu.Item>\n                :null}\n\n                {this.props.activePracticePermissions.SettingsDiseaseList ?\n                    <Menu.Item key=\"25\">\n                        <Link to=\"/settings/diseases\">\n                            <Icon type=\"apartment\"/> Disease List\n                        </Link>\n                    </Menu.Item>\n                :null}\n                </Menu.ItemGroup>\n\n\n            </Menu>\n\n        </Sider>\n    }\n}\n\nexport default SettingSider;\n","function _typeof(obj) {\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nimport * as React from 'react';\nimport RcCollapse from 'rc-collapse';\nimport classNames from 'classnames';\nimport { ConfigConsumer } from '../config-provider';\n\nvar CollapsePanel =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(CollapsePanel, _React$Component);\n\n  function CollapsePanel() {\n    var _this;\n\n    _classCallCheck(this, CollapsePanel);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(CollapsePanel).apply(this, arguments));\n\n    _this.renderCollapsePanel = function (_ref) {\n      var getPrefixCls = _ref.getPrefixCls;\n      var _this$props = _this.props,\n          customizePrefixCls = _this$props.prefixCls,\n          _this$props$className = _this$props.className,\n          className = _this$props$className === void 0 ? '' : _this$props$className,\n          _this$props$showArrow = _this$props.showArrow,\n          showArrow = _this$props$showArrow === void 0 ? true : _this$props$showArrow;\n      var prefixCls = getPrefixCls('collapse', customizePrefixCls);\n      var collapsePanelClassName = classNames(_defineProperty({}, \"\".concat(prefixCls, \"-no-arrow\"), !showArrow), className);\n      return React.createElement(RcCollapse.Panel, _extends({}, _this.props, {\n        prefixCls: prefixCls,\n        className: collapsePanelClassName\n      }));\n    };\n\n    return _this;\n  }\n\n  _createClass(CollapsePanel, [{\n    key: \"render\",\n    value: function render() {\n      return React.createElement(ConfigConsumer, null, this.renderCollapsePanel);\n    }\n  }]);\n\n  return CollapsePanel;\n}(React.Component);\n\nexport { CollapsePanel as default };","function _typeof(obj) {\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nimport * as React from 'react';\nimport RcCollapse from 'rc-collapse';\nimport classNames from 'classnames';\nimport CollapsePanel from './CollapsePanel';\nimport Icon from '../icon';\nimport { ConfigConsumer } from '../config-provider';\nimport animation from '../_util/openAnimation';\n\nvar Collapse =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Collapse, _React$Component);\n\n  function Collapse() {\n    var _this;\n\n    _classCallCheck(this, Collapse);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Collapse).apply(this, arguments));\n\n    _this.renderExpandIcon = function () {\n      var panelProps = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      var prefixCls = arguments.length > 1 ? arguments[1] : undefined;\n      var expandIcon = _this.props.expandIcon;\n      var icon = expandIcon ? expandIcon(panelProps) : React.createElement(Icon, {\n        type: \"right\",\n        rotate: panelProps.isActive ? 90 : undefined\n      });\n      return React.isValidElement(icon) ? React.cloneElement(icon, {\n        className: \"\".concat(prefixCls, \"-arrow\")\n      }) : icon;\n    };\n\n    _this.renderCollapse = function (_ref) {\n      var _classNames;\n\n      var getPrefixCls = _ref.getPrefixCls;\n      var _this$props = _this.props,\n          customizePrefixCls = _this$props.prefixCls,\n          _this$props$className = _this$props.className,\n          className = _this$props$className === void 0 ? '' : _this$props$className,\n          bordered = _this$props.bordered,\n          expandIconPosition = _this$props.expandIconPosition;\n      var prefixCls = getPrefixCls('collapse', customizePrefixCls);\n      var collapseClassName = classNames((_classNames = {}, _defineProperty(_classNames, \"\".concat(prefixCls, \"-borderless\"), !bordered), _defineProperty(_classNames, \"\".concat(prefixCls, \"-icon-position-\").concat(expandIconPosition), true), _classNames), className);\n      return React.createElement(RcCollapse, _extends({}, _this.props, {\n        expandIcon: function expandIcon(panelProps) {\n          return _this.renderExpandIcon(panelProps, prefixCls);\n        },\n        prefixCls: prefixCls,\n        className: collapseClassName\n      }));\n    };\n\n    return _this;\n  }\n\n  _createClass(Collapse, [{\n    key: \"render\",\n    value: function render() {\n      return React.createElement(ConfigConsumer, null, this.renderCollapse);\n    }\n  }]);\n\n  return Collapse;\n}(React.Component);\n\nexport { Collapse as default };\nCollapse.Panel = CollapsePanel;\nCollapse.defaultProps = {\n  bordered: true,\n  openAnimation: _extends(_extends({}, animation), {\n    appear: function appear() {}\n  }),\n  expandIconPosition: 'left'\n};","import Collapse from './Collapse';\nexport default Collapse;","import {\n    Form, Input, Button, Card, Table, InputNumber\n} from 'antd';\nimport React from \"react\";\nimport {\n    AGENT_ROLES,\n    GENERATE_MLM_COMMISSON,\n    SINGLE_PRODUCT_MARGIN\n} from \"../../../../constants/api\"\nimport {displayMessage, getAPI, interpolate, postAPI} from \"../../../../utils/common\";\nimport {SUCCESS_MSG_TYPE} from \"../../../../constants/dataKeys\";\nimport { Redirect } from 'react-router-dom';\n\nclass MLMGenerate extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            redirect: false,\n            level_count: 3,\n            margin: null,\n            editRecord: (this.props.editRecord ? this.props.editRecord : null),\n            editId: (this.props.editId ? this.props.editId : null),\n            loading:true,\n            editRecordMargins:{}\n        }\n        this.changeRedirect= this.changeRedirect.bind(this);\n    }\n\n    componentDidMount() {\n        this.loadRoles();\n        if (this.state.editRecord && this.state.editId) {\n            let editRecordMargins = {}\n            this.state.editRecord.forEach(function(record){\n                editRecordMargins[record.roleId] = record;\n            });\n            this.setState({\n                editRecordMargins\n            })\n            this.loadMlmData();\n\n        }\n        // this.loadProductlevels();\n    }\n\n    loadMlmData() {\n        let that = this;\n        let successFn = function (data) {\n            data.map(function (item) {\n                if (item.id == that.props.editId) {\n                    that.setState({\n                        margin: item,\n                        loading: false\n                    }, function () {\n                        that.setLevelCount(item.level_count)\n                    })\n                }\n            })\n\n        }\n        let errorFn = function () {\n            that.setState({\n                loading:true\n            })\n\n        }\n        getAPI(GENERATE_MLM_COMMISSON,  successFn, errorFn);\n    }\n\n    loadRoles() {\n        let that = this;\n        let successFn = function (data) {\n            that.setState({\n                staffRoles: data,\n                loading:false\n            })\n        }\n        let errorFn = function () {\n            that.setState({\n                loading:false\n            })\n\n        }\n        \n        getAPI(AGENT_ROLES, successFn, errorFn);\n    }\n\n    // loadProductlevels() {\n    //     let that = this;\n    //     let successFn = function (data) {\n    //         that.setState({\n    //             productLevels: data\n    //         });\n    //         data.forEach(function (item) {\n    //             that.add(item.name);\n    //         })\n    //     }\n    //     let errorFn = function () {\n    //\n    //     }\n    //     getAPI(PRODUCT_LEVEL, successFn, errorFn);\n    // }\n\n\n    handleSubmit = (e) => {\n        e.preventDefault();\n        let that = this;\n        this.props.form.validateFieldsAndScroll((err, values) => {\n            let reqData = {};\n            reqData={\n                comissions:[],\n                name:values.margin_name,\n                level_count:values.level_count,\n            };\n            for (let i = 1; i <= that.state.level_count; i++) {\n                this.state.staffRoles.forEach(function(role){\n                    reqData.comissions.push({\n                        level:i,\n                        role:role.id,\n                        commision_percent:values[i][role.id]\n                    })\n                });\n            }\n\n            if(that.state.editId) {\n                reqData.id = that.state.editId;\n                // if (that.state.margin.comissions) {\n                //     that.state.margin.comissions.forEach(function (role,key) {\n                //         for (let i = 1; i <= that.state.level_count; i++) {\n                //\n                //             if (role.level ==i){\n                //                 reqData.comissions.push({\n                //                     id:role.id,\n                //                     ...role,\n                //                     commision_percent:values[i][role.role]\n                //                 })\n                //             }\n                //         }\n                //         reqData.comissions.shift();\n                //     });\n                //\n                // }\n            }\n\n            if (!err) {\n                that.setState({changePassLoading: true, redirect:true});\n                let successFn = function (data) {\n                    displayMessage(SUCCESS_MSG_TYPE, data.details);\n                    that.props.loadData();\n                    that.props.history.goBack();\n                };\n                let errorFn = function () {\n                };\n                postAPI(GENERATE_MLM_COMMISSON, reqData, successFn, errorFn);\n            }\n        });\n    };\n\n    changeRedirect(){\n        var redirectVar=this.state.redirect;\n        this.setState({\n            redirect:  !redirectVar,\n        })  ;\n    }\n\n\n    add = (level_name) => {\n        const {form} = this.props;\n        // can use data-binding to get\n        const keys = form.getFieldValue('keys');\n        const nextKeys = keys.concat(level_name);\n        // can use data-binding to set\n        // important! notify form to detect changes\n        form.setFieldsValue({\n            keys: nextKeys,\n        });\n    }\n\n    setLevelCount = (e) => {\n        let that = this;\n        that.setState({\n            level_count: e < 5 ? e : 5\n        })\n    }\n\n    render() {\n        let that = this\n        const {getFieldDecorator, getFieldValue} = this.props.form;\n        const formItemLayout = {\n            labelCol: {\n                xs: {span: 24},\n                sm: {span: 4},\n            },\n            wrapperCol: {\n                xs: {span: 24},\n                sm: {span: 20},\n            },\n        };\n        getFieldDecorator('keys', {initialValue: []});\n        let columns = [{\n            title: 'Roles',\n            dataIndex: 'name',\n            key: 'name'\n        }];\n        if (this.state.level_count)\n            for (let i = 1; i <= this.state.level_count; i++) {\n                let record = {};\n                columns.push({\n                    title: 'Level ' + i,\n                    dataIndex: 'Level ' + i,\n                    key: 'Level ' + i,\n                    render: (item, record) => <Form.Item\n                        {...formItemLayout}\n                        // label={k}\n                        required={true}\n                        key={`${i}[${record.id}]`}>\n                        {getFieldDecorator(`${i}[${record.id}]`, {\n                            validateTrigger: ['onChange', 'onBlur'],\n                            initialValue: (this.state.editRecordMargins && this.state.editRecordMargins[record.id] ? this.state.editRecordMargins[record.id][i] : null)\n                        })(\n                            <InputNumber min={0} placeholder=\"Percent Commission\"/>\n                        )}\n                    </Form.Item>\n                })\n            }\n\n        return (\n            <Card title={\"Manage MLM Commission\"}>\n                <Form onSubmit={this.handleSubmit} className=\"login-form\">\n                    <Form.Item\n                        {...formItemLayout}\n                        label={\"Margin Name\"}\n                        required={true}\n                        key={`margin_name`}>\n                        {getFieldDecorator(`margin_name`, {\n                            validateTrigger: ['onChange', 'onBlur'],\n                            initialValue: (this.state.margin ? this.state.margin.name : null)\n                        })(\n                            <Input placeholder=\"Margin Type Name\"/>\n                        )}\n                    </Form.Item>\n                    <Form.Item\n                        {...formItemLayout}\n                        label={'No of Levels'}\n                        required={false}\n                        key={`level_count`}\n\n                    >\n                        {getFieldDecorator(`level_count`, {\n                            validateTrigger: ['onChange', 'onBlur'],\n                            initialValue: this.state.level_count\n                        })(\n                            <InputNumber min={1} max={5} placeholder=\"Level Count\" onChange={this.setLevelCount}/>\n                        )}\n                    </Form.Item>\n                    <Table loading={this.state.loading} bordered={true} pagination={false} columns={columns} dataSource={this.state.staffRoles}/>\n                    <Form.Item>\n                        <br/>\n                        <Button type=\"primary\" htmlType=\"submit\" className=\"login-form-button\">\n                            Set MLM Commissions\n                        </Button>\n                    </Form.Item>\n                </Form>\n                {this.state.redirect&&    <Redirect to='/settings/mlm' />}\n            </Card>\n            \n        );\n    }\n}\n\nexport default Form.create()(MLMGenerate);\n","\nimport React from \"react\";\nimport {Button, Card, Icon, Table, Tabs, Row, Popconfirm,Collapse} from \"antd\";\nimport {getAPI, interpolate, postAPI, patchAPI, deleteAPI, putAPI} from \"../../../../utils/common\";\nimport MLMGenerate from \"./MLMGenerate\"\nimport {Link, Route, Switch} from \"react-router-dom\";\nimport {\n    PRODUCT_MARGIN,\n    ROLE_COMMISION,\n    SINGLE_PRODUCT_MARGIN,\n    AGENT_ROLES,\n    GENERATE_MLM_COMMISSON\n} from \"../../../../constants/api\";\n\nconst TabPane = Tabs.TabPane;\nconst {Panel} = Collapse;\nexport default class MlmBase extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            mlmItems: [],\n            productMargin: [],\n            active_practiceId: this.props.active_practiceId,\n            loading: true\n        };\n        this.loadMlmData = this.loadMlmData.bind(this);\n        this.deleteObject = this.deleteObject.bind(this);\n        this.loadRoles = this.loadRoles.bind(this);\n        this.loadData = this.loadData.bind(this);\n    }\n\n    componentDidMount() {\n        this.loadData();\n    }\n\n    loadData() {\n        this.loadMlmData();\n        this.loadRoles();\n        this.loadProductMargin();\n    }\n\n    loadMlmData() {\n        let that = this;\n        let successFn = function (data) {\n            that.setState({\n                mlmItems: data,\n                loading: false\n            })\n        };\n        let errorFn = function () {\n            that.setState({\n                loading: false\n            })\n\n        };\n        getAPI(GENERATE_MLM_COMMISSON, successFn, errorFn);\n    }\n\n    loadRoles() {\n        let that = this;\n        let successFn = function (data) {\n            that.setState({\n                staffRoles: data,\n                loading: false\n            })\n        };\n        let errorFn = function () {\n            that.setState({\n                loading: false\n            })\n        };\n        getAPI(AGENT_ROLES, successFn, errorFn);\n    }\n\n    loadProductMargin() {\n        let that = this;\n        let successFn = function (data) {\n            that.setState({\n                productMargin: data\n            })\n        };\n        let errorFn = function () {\n\n        };\n        getAPI(PRODUCT_MARGIN, successFn, errorFn);\n    }\n\n    editObject(id, record) {\n        this.setState({\n            editId: id,\n            editRecord: record,\n            loading: false\n        }, function () {\n            this.props.history.push('/settings/mlm/edit');\n        })\n    }\n\n    deleteObject(record) {\n        let that = this;\n        let reqData = {...record, is_active: false};\n        reqData.is_active = false;\n        let successFn = function (data) {\n            that.loadData();\n        };\n        let errorFn = function () {\n        };\n        putAPI(interpolate(SINGLE_PRODUCT_MARGIN, [record.id]), reqData, successFn, errorFn);\n    }\n\n    changeRedirect() {\n        var redirectVar = this.state.redirect;\n        this.setState({\n            redirect: !redirectVar,\n        });\n    }\n\n    render() {\n        let that = this;\n        const rolesdata = {}\n        if (this.state.staffRoles) {\n            this.state.staffRoles.forEach(function (role) {\n                rolesdata[role.id] = role.name;\n            })\n        }\n        let columns = {};\n\n        that.state.productMargin.forEach(function (productMargin) {\n            columns[productMargin.id] = [{\n                title: 'Role',\n                key: 'role',\n                dataIndex: 'role',\n            }];\n            for (let level = 1; level <= productMargin.level_count; level++) {\n                columns[productMargin.id].push({\n                    title: 'Level ' + level,\n                    key: level,\n                    dataIndex: level,\n                    render: (value) => <span>{value}%</span>\n                })\n            }\n        })\n\n\n        let datasource = {};\n\n        that.state.mlmItems.forEach(function (productMargin) {\n            datasource[productMargin.id] = [];\n\n            if (that.state.staffRoles) {\n                that.state.staffRoles.forEach(function (role) {\n                    let roledata = {\"role\": role.name, roleId: role.id};\n                    if (productMargin.level_count) {\n                        for (let level = 1; level <= productMargin.level_count; level++) {\n                            if (productMargin.comissions) {\n                                for (let i = 0; i < productMargin.comissions.length; i++) {\n                                    let item = productMargin.comissions[i];\n                                    if (item.margin == productMargin.id && item.level == level && role.id == item.role) {\n                                        roledata[level] = item.commision_percent;\n                                        break;\n                                    }\n                                }\n                            }\n                        }\n                    }\n\n                    datasource[productMargin.id].push(roledata);\n                })\n            }\n        });\n        return <div>\n            <Switch>\n                <Route exact path=\"/settings/mlm/generate\"\n                       render={(route) => <MLMGenerate {...route}\n                                                       loadData={this.loadData}/>}/>\n                {this.state.editId && this.state.editRecord ?\n                    <Route exact path=\"/settings/mlm/edit\"\n                           render={(route) => <MLMGenerate {...route}\n                                                           key={this.state.editId}\n                                                           loadData={this.loadData} {...this.state}/>}/> : null}\n                <Route>\n                    <div>\n                        <h2>MLM Commissions\n                            <Link to=\"/settings/mlm/generate\">\n                                <Button type=\"primary\" style={{float: 'right'}}>\n                                    <Icon type=\"plus\"/>&nbsp;Add\n                                </Button>\n                            </Link>\n                        </h2>\n                        <Card>\n                            {this.state.productMargin ? <Collapse defaultActiveKey={['0']} accordion>\n                                {this.state.productMargin.map((marginType, index) =>\n                                    <Panel header={marginType.name} key={index}\n                                           extra={[<Button.Group size={\"small\"}>\n                                               <Button type=\"primary\"\n                                                       onClick={() => this.editObject(marginType.id, datasource[marginType.id])}><Icon\n                                                   type=\"edit\"/> Edit</Button>\n\n                                               <Popconfirm title=\"Are you sure delete this item?\"\n                                                           onConfirm={() => that.deleteObject(marginType)} okText=\"Yes\" cancelText=\"No\">\n                                                   <Button type=\"danger\"><Icon type=\"delete\"/> Delete</Button>\n                                               </Popconfirm>\n                                           </Button.Group>]}>\n                                        <Table loading={this.state.loading} pagination={false}\n                                               style={{marginTop: 10}}\n                                               dataSource={datasource[marginType.id]}\n                                               rowKey=\"role\"\n                                               columns={columns[marginType.id]}\n                                               bordered/>\n                                    </Panel>)}\n                            </Collapse> : <h4>No MLM Data</h4>}\n\n\n                            {/* {this.state.productMargin ?\n                                <Tabs type=\"card\">\n                                    {this.state.productMargin.map(marginType =>\n                                        <TabPane tab={marginType.name} key={marginType.id}>\n                                            <Row>\n                                                <br/>\n                                                <h2>\n                                                    {marginType.name}\n                                                    <Button.Group style={{float: 'right'}}>\n                                                        <Button type=\"primary\"\n                                                                onClick={() => this.editObject(marginType.id, datasource[marginType.id])}><Icon\n                                                            type=\"edit\"/> Edit</Button>\n                                                        <Popconfirm title=\"Are you sure delete this item?\"\n                                                                    onConfirm={() => that.deleteObject(marginType)} okText=\"Yes\" cancelText=\"No\">\n                                                            <Button type=\"danger\"><Icon type=\"delete\"/> Delete</Button>\n                                                        </Popconfirm>\n\n                                                    </Button.Group>\n                                                </h2>\n                                            </Row>\n                                            <Table loading={this.state.loading} pagination={false}\n                                                   style={{marginTop: 10}}\n                                                   dataSource={datasource[marginType.id]}\n                                                   rowKey=\"role\"\n                                                   columns={columns[marginType.id]}\n                                                   bordered/>\n                                        </TabPane>)}\n                                </Tabs> : <h4>No MLM Data</h4>} */}\n\n                        </Card>\n                    </div>\n                </Route>\n            </Switch>\n\n        </div>\n    }\n}\n","import React from 'react';\nimport {Row, Form, Col, Radio, Input, Divider, Select, InputNumber, Icon, Button, Upload, Checkbox} from \"antd\";\nimport {\n    CUSTOMIZE_PAPER_TYPE,\n    EXCLUDE_PATIENT_DOB, HEADER_INCLUDE, LOGO_ALIGMENT, LOGO_INCLUDE, LOGO_TYPE,\n    PAGE_ORIENTATION, PAPER_SIZE, PATIENT_DETAILS_LIST,\n    PRINTER_TYPE\n} from \"../../../../constants/hardData\";\nimport {displayMessage, getAPI, interpolate, makeURL, postAPI} from \"../../../../utils/common\";\nimport {\n    CLINIC_NOTES_PDF,\n    FILE_UPLOAD_API,\n    PRACTICE_PRINT_SETTING_API,\n    PRINT_PREVIEW_RENDER,\n    SAVE_ALL_PRINT_SETTINGS\n} from \"../../../../constants/api\";\nimport {message} from \"antd/lib/index\";\nimport {SINGLE_IMAGE_UPLOAD_FIELD, SUCCESS_MSG_TYPE} from \"../../../../constants/dataKeys\";\nimport {BACKEND_BASE_URL} from \"../../../../config/connect\";\n\nconst {TextArea} = Input;\nconst radioTabList = CUSTOMIZE_PAPER_TYPE.map((radioTab) => <Radio.Button value={radioTab}>{radioTab}</Radio.Button>);\n\n\nclass PrintSettings extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            type: this.props.type,\n            sub_type: this.props.sub_type,\n            selectedFormType: 'PAGE',\n            print_setting: {},\n            editedPrintSettings: {},\n        }\n        this.loadData = this.loadData.bind(this);\n    }\n\n    componentDidMount() {\n        this.loadData();\n    }\n\n    changeFormType = (e) => {\n        this.setState({\n            selectedFormType: e.target.value\n        })\n\n    }\n\n    loadData() {\n        var that = this;\n        let successFn = function (data) {\n            if (data.length)\n                that.setState({\n                    print_setting: data[0],\n                });\n        };\n        let errorFn = function () {\n        };\n        getAPI(interpolate(PRACTICE_PRINT_SETTING_API, [this.props.active_practiceId, that.state.type, that.state.sub_type]), successFn, errorFn);\n    }\n\n    handleSubmit = (e) => {\n        console.log(e);\n        e.preventDefault();\n        let that = this;\n\n        this.props.form.validateFields((err, formData) => {\n            console.log(formData);\n            if (!err) {\n                let reqData = {\n                    type: that.state.type,\n                    ...formData\n                }\n\n                let key = \"logo_path\";\n                if (reqData[key] && formData[key].file && formData[key].file.response)\n                    reqData[key] = formData[key].file.response.image_path;\n                else\n                    reqData[key] = that.state.print_setting.logo_path;\n\n                if (!reqData.save_for_all) {\n                    reqData = {\n                        ...reqData,\n                        sub_type: that.state.sub_type,\n                        id: that.state.print_setting.id\n                    }\n                }\n                delete reqData.save_for_all;\n                let successFn = function (data) {\n                    displayMessage(SUCCESS_MSG_TYPE, \"Settings Saved Successfully!!\");\n                };\n                let errorFn = function () {\n                };\n                if (formData.save_for_all) {\n                    postAPI(interpolate(SAVE_ALL_PRINT_SETTINGS, [this.props.active_practiceId]), reqData, successFn, errorFn);\n                } else {\n                    postAPI(interpolate(PRACTICE_PRINT_SETTING_API, [this.props.active_practiceId, that.state.type, that.state.sub_type]), reqData, successFn, errorFn);\n                }\n            }\n        });\n    }\n    handleFormEditSettings = (type, value) => {\n        this.setState(function (prevState) {\n            return {editedPrintSettings: {...prevState.editedPrintSettings, [type]: value}}\n        })\n    }\n    loadPDF = (path) => {\n        let that = this;\n        let successFn = function (data) {\n            if (data.report)\n                window.open(BACKEND_BASE_URL + data.report);\n        }\n        let errorFn = function () {\n\n        }\n        getAPI(path, successFn, errorFn);\n    }\n    onchangeHandle=(type ,value)=>{\n        let that=this;\n        this.setState({\n            [type]:value\n        }\n        ,function(){\n            if(this.state.is_patient_not){\n                this.props.form.resetFields()\n            }\n        }\n        )\n    }\n    render() {\n        console.log(this.state)\n        let that = this;\n        const formItemLayout = {\n            labelCol: {\n                xs: {span: 8},\n                sm: {span: 8},\n                md: {span: 8},\n                lg: {span: 8},\n            },\n            wrapperCol: {\n                xs: {span: 16},\n                sm: {span: 16},\n                md: {span: 16},\n                lg: {span: 16},\n            },\n        };\n        const pageSizeOptionList = PAPER_SIZE.map((pageSize) => <Select.Option\n            value={pageSize}>{pageSize}</Select.Option>)\n        const headerInclude = HEADER_INCLUDE.map((header_include) => <Radio\n            value={header_include.value}>{header_include.title}</Radio>)\n        const logoType = LOGO_TYPE.map((logo_type) => <Radio value={logo_type.value}>{logo_type.value}</Radio>)\n        const logoAlignment = LOGO_ALIGMENT.map((logo_alignment) => <Radio\n            value={logo_alignment.value}>{logo_alignment.value}</Radio>)\n        const logoInclude = LOGO_INCLUDE.map((logo_include) => <Radio\n            value={logo_include.value}>{logo_include.title}</Radio>)\n        const singleUploadprops = {\n            name: 'image',\n            data: {\n                name: 'hello',\n                // logo_path:file.response.image_path,\n            },\n            action: makeURL(FILE_UPLOAD_API),\n            headers: {\n                authorization: 'authorization-text',\n            },\n            onChange(info) {\n                if (info.file.status !== 'uploading') {\n                    console.log(info.file, info.fileList);\n                }\n                if (info.file.status === 'done') {\n                    message.success(`${info.file.name} file uploaded successfully`);\n                } else if (info.file.status === 'error') {\n                    message.error(`${info.file.name} file upload failed.`);\n                }\n            },\n\n        };\n        const patientDetailsList = PATIENT_DETAILS_LIST.map((patient_details) => <li>\n            <Checkbox value={patient_details.value}>{patient_details.value}</Checkbox></li>)\n        const pageOrientation = PAGE_ORIENTATION.map((pageOrientation) => <Radio\n            value={pageOrientation.value}>{pageOrientation.value}</Radio>)\n        const printer_type = PRINTER_TYPE.map((printerType) => <Radio\n            value={printerType.value}>{printerType.value}</Radio>)\n        let PreviewParamsURL = '?preview=true&type=' + this.props.type + '&sub_type=' + this.props.sub_type;\n\n        if (this.state.print_setting) {\n            let editedObject = {...this.state.print_setting, ...this.state.editedPrintSettings};\n            let keys = Object.keys(editedObject);\n            keys.forEach(function (key) {\n                if (editedObject[key])\n                    PreviewParamsURL += '&' + key + '=' + encodeURIComponent(editedObject[key])\n            });\n\n        }\n        const {getFieldDecorator} = this.props.form;\n        return (<Row>\n                <Col span={24}>\n                    <Form onSubmit={this.handleSubmit}>\n\n\n                        <div className=\"div_padding_top\">\n                            <Row gutter={16}>\n                                <Col span={12}>\n                                    <div style={{textAlign: 'center'}}>\n                                        <Radio.Group buttonStyle=\"solid\" size=\"small\" onChange={this.changeFormType}\n                                                     defaultValue={this.state.selectedFormType}>\n                                            {radioTabList}\n                                        </Radio.Group>\n                                        <br/>\n                                    </div>\n                                    <div hidden={this.state.selectedFormType != 'PAGE'}>\n\n                                        <h2>Page Setup</h2>\n                                        <Form.Item key={'page_size'} {...formItemLayout} label={\"Paper Size\"}>\n                                            {getFieldDecorator('page_size', {\n                                                initialValue: this.state.print_setting.page_size\n                                            })(<Select style={{width: '100%'}}\n                                                       onChange={(value) => this.handleFormEditSettings('page_size', value)}>\n                                                {pageSizeOptionList}\n                                            </Select>)\n                                            }\n                                        </Form.Item>\n\n                                        <Form.Item label={\"Orientation\"} {...formItemLayout} >\n                                            {getFieldDecorator('page_orientation', {\n                                                initialValue: this.state.print_setting.page_orientation\n                                            })(<Radio.Group\n                                                    onChange={(e) => this.handleFormEditSettings('orientation', e.target.value)}>\n                                                    {pageOrientation}\n                                                </Radio.Group>\n                                            )\n                                            }\n                                        </Form.Item>\n\n                                        <Form.Item label={(<span>Printer Type&nbsp;</span>)} {...formItemLayout}>\n                                            {getFieldDecorator('page_print_type', {\n                                                initialValue: this.state.print_setting.page_print_type\n                                            })(<Radio.Group\n                                                    onChange={(e) => this.handleFormEditSettings('printerType', e.target.value)}>\n                                                    {printer_type}\n                                                </Radio.Group>\n                                            )}\n\n                                        </Form.Item>\n\n                                        <Form.Item key={'page_margin_top'}\n                                                   label={(<span>Top Margin</span>)} {...formItemLayout}>\n                                            {getFieldDecorator('page_margin_top', {\n                                                initialValue: this.state.print_setting.page_margin_top\n                                            })(\n                                                <InputNumber min={0} max={10}\n                                                             onChange={(value) => this.handleFormEditSettings('page_margin_top', value)}/>\n                                            )}\n                                            <span className=\"ant-form-text\">Inches</span>\n                                        </Form.Item>\n\n                                        <Form.Item key={'page_margin_left'}\n                                                   label={(<span>Left Margin</span>)} {...formItemLayout}>\n                                            {getFieldDecorator('page_margin_left', {\n                                                initialValue: this.state.print_setting.page_margin_left\n                                            })(\n                                                <InputNumber min={0} max={10}\n                                                             onChange={(value) => this.handleFormEditSettings('page_margin_left', value)}/>\n                                            )}\n                                            <span className=\"ant-form-text\">Inches</span>\n                                        </Form.Item>\n\n                                        <Form.Item key={'page_margin_bottom'}\n                                                   label={(<span>Bottom Margin</span>)} {...formItemLayout}>\n                                            {getFieldDecorator('page_margin_bottom', {\n                                                initialValue: this.state.print_setting.page_margin_bottom\n                                            })(\n                                                <InputNumber min={0} max={10}\n                                                             onChange={(value) => this.handleFormEditSettings('page_margin_bottom', value)}/>\n                                            )}\n                                            <span className=\"ant-form-text\">Inches</span>\n                                        </Form.Item>\n\n                                        <Form.Item key={'page_margin_right'}\n                                                   label={(<span>Right Margin</span>)} {...formItemLayout}>\n                                            {getFieldDecorator('page_margin_right', {\n                                                initialValue: this.state.print_setting.page_margin_right\n                                            })(\n                                                <InputNumber min={0} max={10}\n                                                             onChange={(value) => this.handleFormEditSettings('page_margin_right', value)}/>\n                                            )}\n                                            <span className=\"ant-form-text\">Inches</span>\n                                        </Form.Item>\n                                    </div>\n                                    <div hidden={this.state.selectedFormType != 'HEADER'}>\n                                        <h2>Customize Header</h2>\n\n                                        <Form.Item key={'header_include'} {...formItemLayout}\n                                                   label={(<span>Include Header&nbsp;</span>)}>\n                                            {getFieldDecorator('header_include', {initialValue: this.state.print_setting.header_include})\n                                            (\n                                                <Radio.Group\n                                                    onChange={(e) => this.handleFormEditSettings('header_include', e.target.value)}>\n                                                    {headerInclude}\n                                                </Radio.Group>\n                                            )\n                                            }\n                                        </Form.Item>\n\n                                        <Form.Item key={'header_text'} {...formItemLayout}\n                                                   label={(<span>Header&nbsp;</span>)}>\n                                            {getFieldDecorator('header_text', {\n                                                initialValue: this.state.print_setting.header_text\n                                            })(\n                                                <Input\n                                                    onChange={(e) => this.handleFormEditSettings('header_text', e.target.value)}/>\n                                            )}\n                                        </Form.Item>\n                                        <Form.Item key={'header_left_text'} {...formItemLayout}\n                                                   label={(<span>Left Text&nbsp;</span>)}>\n                                            {getFieldDecorator('header_left_text', {\n                                                initialValue: this.state.print_setting.header_left_text\n                                            })(\n                                                <TextArea\n                                                    onChange={(e) => this.handleFormEditSettings('header_left_text', e.target.value)}/>\n                                            )}\n                                        </Form.Item>\n\n                                        <Form.Item key={'header_right_text'} {...formItemLayout}\n                                                   label={(<span>Right Text&nbsp;</span>)}>\n                                            {getFieldDecorator('header_right_text', {initialValue: this.state.print_setting.header_right_text})\n                                            (<TextArea\n                                                onChange={(e) => this.handleFormEditSettings('header_right_text', e.target.value)}/>)\n                                            }\n                                        </Form.Item>\n\n                                        <Form.Item key={'logo_include'} {...formItemLayout}\n                                                   label={(<span>Include Logo&nbsp;</span>)}>\n                                            {getFieldDecorator('logo_include', {initialValue: this.state.print_setting.logo_include})\n                                            (\n                                                <Radio.Group\n                                                    onChange={(e) => this.handleFormEditSettings('logo_include', e.target.value)}>\n                                                    {logoInclude}\n                                                </Radio.Group>\n                                            )\n                                            }\n                                        </Form.Item>\n\n                                        <Form.Item key={'logo_path'} {...formItemLayout}\n                                                   label={(<span>Logo&nbsp;</span>)}>\n                                            {getFieldDecorator('logo_path')\n                                            (<Upload {...singleUploadprops} >\n                                                <Button>\n                                                    <Icon type=\"upload\"/> Click to Upload\n                                                </Button>\n                                            </Upload>)}\n                                            {/*<Avatar style={{backgroundColor: this.state.color}} size=\"large\">*/}\n                                            {/*{this.state.user}*/}\n                                            {/*</Avatar>*/}\n\n                                        </Form.Item>\n\n                                        <Form.Item key={'logo_type'} {...formItemLayout}\n                                                   label={(<span>Type&nbsp;</span>)}>\n                                            {getFieldDecorator('logo_type', {initialValue: this.state.print_setting.logo_type})(\n                                                <Radio.Group\n                                                    onChange={(e) => this.handleFormEditSettings('logo_type', e.target.value)}>\n                                                    {logoType}\n                                                </Radio.Group>\n                                            )}\n                                        </Form.Item>\n\n                                        <Form.Item key={'logo_alignment'} {...formItemLayout}\n                                                   label={(<span>Alignment&nbsp;</span>)}>\n                                            {getFieldDecorator('logo_alignment', {initialValue: this.state.print_setting.logo_alignment})\n                                            (\n                                                <Radio.Group\n                                                    onChange={(e) => this.handleFormEditSettings('logo_alignment', e.target.value)}>\n                                                    {logoAlignment}\n                                                </Radio.Group>\n                                            )\n                                            }\n                                        </Form.Item>\n                                    </div>\n                                    <div hidden={this.state.selectedFormType != 'PATIENT'}>\n                                        <h2>Customize Patient Details</h2>\n                                        <Form.Item>\n                                            {getFieldDecorator('patient_details', {})(\n                                                <Checkbox onChange={(e)=>this.onchangeHandle('is_patient_not',e.target.checked)}>Show Patient Details</Checkbox>)\n                                            }\n                                           \n                                        </Form.Item>\n                                            <ul className=\"subLists\">\n                                                <Form.Item>\n                                                    {getFieldDecorator('exclude_history', {})(\n                                                        <Checkbox >Exclude Mediacal History</Checkbox>)\n                                                    }\n                                                \n                                                </Form.Item>\n\n                                                <Form.Item>\n                                                    {getFieldDecorator('exclude_phone', {})(\n                                                        <Checkbox>Exclude Patient Number</Checkbox>)\n                                                    }\n                                                \n                                                </Form.Item>\n                                                <Form.Item>\n                                                    {getFieldDecorator('exclude_email', {})(\n                                                        <Checkbox>Exclude Patient Email Id</Checkbox>)\n                                                    }\n                                                \n                                                </Form.Item>\n\n                                                <Form.Item>\n                                                    {getFieldDecorator('exclude_address', {})(\n                                                        <Checkbox>Exclude address</Checkbox>)\n                                                    }\n                                                \n                                                </Form.Item>\n                                                <Form.Item>\n                                                    {getFieldDecorator('exclude_blood_group', {})(\n                                                        <Checkbox>Exclude Blood Group</Checkbox>)\n                                                    }\n                                                \n                                                </Form.Item>\n                                                <Form.Item>\n                                                    {getFieldDecorator('exclude_gender_dob', {})(\n                                                        <Checkbox>{EXCLUDE_PATIENT_DOB}</Checkbox>\n                                                    )}\n                                                \n                                                </Form.Item>\n                                            </ul>\n                                       \n                                    </div>\n                                    <div hidden={this.state.selectedFormType != 'FOOTER'}>\n                                        <h2>Footer Setup</h2>\n                                        <Form.Item key={'footer_margin_top'} {...formItemLayout}\n                                                   label={(<span>Top Margin&nbsp;</span>)}>\n                                            {getFieldDecorator('footer_margin_top', {\n                                                initialValue: this.state.print_setting.footer_margin_top\n                                            })(\n                                                <InputNumber min={0} max={10}\n                                                             onChange={(value) => this.handleFormEditSettings('footer_margin_top', value)}/>\n                                            )}\n                                            <span className=\"ant-form-text\">Inches</span>\n                                        </Form.Item>\n                                        <Form.Item key={'footer_text'} {...formItemLayout}\n                                                   label={(<span>Full Width Content&nbsp;</span>)}>\n                                            {getFieldDecorator('footer_text', {\n                                                initialValue: this.state.print_setting.footer_text\n                                            })(\n                                                <TextArea rows={3}\n                                                          onChange={(e) => this.handleFormEditSettings('footer_text', e.target.value)}/>\n                                            )}\n                                        </Form.Item>\n\n                                        <Form.Item key={'footer_left_text'} {...formItemLayout}\n                                                   label={(<span>Left Signature&nbsp;</span>)}>\n                                            {getFieldDecorator('footer_left_text', {\n                                                initialValue: this.state.print_setting.footer_left_text\n                                            })(\n                                                <TextArea\n                                                    onChange={(e) => this.handleFormEditSettings('footer_left_text', e.target.value)}/>\n                                            )}\n                                        </Form.Item>\n\n                                        <Form.Item key={'footer_right_text'} {...formItemLayout}\n                                                   label={(<span>Right Signature&nbsp;</span>)}>\n                                            {getFieldDecorator('footer_right_text', {\n                                                initialValue: this.state.print_setting.footer_right_text\n                                            })(\n                                                <TextArea\n                                                    onChange={(e) => this.handleFormEditSettings('footer_right_text', e.target.value)}/>\n                                            )}\n                                        </Form.Item>\n\n                                    </div>\n                                    <Row>\n                                        <Divider/>\n                                        <Form.Item {...formItemLayout} key={'save_for_all'}>\n                                            {getFieldDecorator('save_for_all', {})(\n                                                <Checkbox>\n                                                    <b> Save for all</b>\n                                                </Checkbox>\n                                            )}\n                                        </Form.Item>\n                                        <Form.Item>\n                                            <Button style={{margin: 5}} type=\"primary\" htmlType=\"submit\"\n                                                    value={\"ALL\"}>Save</Button>\n                                            <Button style={{margin: 5}}\n                                                    onClick={() => this.loadPDF(PRINT_PREVIEW_RENDER + PreviewParamsURL + '&pdf=1')}>Show\n                                                Print Preview</Button>\n                                        </Form.Item>\n                                    </Row>\n                                </Col>\n                                <Col span={12} style={{textAlign: 'center'}}>\n                                    <div style={{\n                                        position: 'absolute',\n                                        backgroundColor: 'black',\n                                        color: 'white',\n                                        padding: 10,\n                                        right: 20,\n                                        top: 50\n                                    }}>\n                                        <b>PREVIEW</b>\n                                    </div>\n                                    <iframe\n                                        src={makeURL(PRINT_PREVIEW_RENDER + PreviewParamsURL)}\n                                        style={{\n                                            width: '100%',\n                                            height: '100%',\n                                            minHeight: '600px',\n                                            boxShadow: '-2px 0px 4px #B8B8B8'\n                                        }}/>\n                                </Col>\n\n                            </Row>\n                        </div>\n                    </Form>\n                </Col>\n            </Row>\n        );\n\n    }\n\n}\n\nexport default Form.create()(PrintSettings);\n","import React from 'react';\nimport {Button, Tabs, Divider, Table, Card, Icon, Radio, Tag} from \"antd\";\nimport PrintSettings from \"./PrintSettings\";\nimport {PRESCRIPTION} from \"../../../../constants/dataKeys\";\nimport {\n    EMR_TYPE,\n    BILLING_TYPE,\n    EMR_SUB_TYPE,\n    BILLING_SUB_TYPE,\n    CUSTOMIZE_PAPER_TYPE\n} from \"../../../../constants/hardData\";\n\nconst TabPane = Tabs.TabPane;\n\nclass Printout extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            randomKey: Math.random(),\n            activeKey: 'a'\n        }\n    }\n\n    setRandomKey = (key) => {\n        console.log(key)\n        this.setState({\n            randomKey: Math.random(),\n            activeKey: key\n        })\n    }\n\n    render() {\n        let that = this;\n        return (<div>\n            <h2>Print Settings</h2>\n            <Tabs defaultActiveKey={EMR_TYPE} size=\"small\" type=\"card\">\n                <TabPane tab={<span><Icon type=\"calculator\"/>{EMR_TYPE}</span>} key={EMR_TYPE}>\n                    <Card>\n                        <h4>\n                            <div>\n                                <Tabs size=\"small\" onChange={this.setRandomKey}>\n                                    {EMR_SUB_TYPE.map((item, i) => {\n                                        return (<TabPane tab={item.title} key={i}>\n                                            <PrintSettings\n                                                key={(i.toString() == that.state.activeKey.toString() ? item.title + that.state.randomKey : item.title)}\n                                                sub_type={item.title}\n                                                active_practiceId={this.props.active_practiceId}\n                                                type={\"EMR\"}/>\n                                        </TabPane>)\n                                    })}\n                                </Tabs>\n                            </div>\n                        </h4>\n                    </Card>\n                </TabPane>\n                <TabPane tab={<span><Icon type=\"audit\"/>{BILLING_TYPE}</span>} key={BILLING_TYPE}>\n                    <Card>\n                        <h4>\n                            <div>\n                                <Tabs size=\"small\" onChange={this.setRandomKey}>\n                                    {BILLING_SUB_TYPE.map((item, i) => {\n                                        return (<TabPane tab={item.title} key={i}>\n                                            <PrintSettings\n                                                key={(i.toString() == that.state.activeKey.toString() ? item.title + that.state.randomKey : item.title)}\n                                                sub_type={item.title}\n                                                active_practiceId={this.props.active_practiceId}\n                                                type={\"BILLING\"}/>\n                                        </TabPane>)\n                                    })}\n                                </Tabs>\n\n                            </div>\n                        </h4>\n                    </Card>\n                </TabPane>\n            </Tabs>\n        </div>);\n    }\n}\n\nexport default Printout;\n","import React from \"react\";\nimport {Card, Icon, Row, Tabs} from \"antd\";\nimport {INPUT_FIELD, PASSWORD_FIELD} from \"../../../../constants/dataKeys\";\nimport {Form} from \"antd/lib/index\";\nimport DynamicFieldsForm from \"../../../common/DynamicFieldsForm\";\nimport {getAPI, interpolate} from \"../../../../utils/common\";\nimport {EXPENSE_TYPE, SAVE_CREDENTIALS} from \"../../../../constants/api\";\n\nconst TabPane = Tabs.TabPane;\nexport default class IntegrationHome extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            integrateData: [],\n            loading: true,\n        }\n        this.loadData = this.loadData.bind(this);\n    }\n    componentWillMount() {\n       let that=this;\n        if (that.props){\n            this.loadData();\n        }\n\n    }\n\n    loadData(){\n        let that=this;\n        let successFn=function (data) {\n            that.setState({\n                integrateData:data,\n                loading:false\n            })\n        }\n        let errorFn=function () {\n            that.setState({\n                loading:false\n            })\n        }\n        getAPI(interpolate(SAVE_CREDENTIALS,[that.props.user.id]),successFn ,errorFn)\n    }\n    render() {\n        let that = this;\n        const taskIntegrateFormFields = [{\n            key: 'login',\n            type: INPUT_FIELD,\n            initialValue: this.state.integrateData.login,\n            required: true,\n            label: \"Email Id\"\n        }, {\n            key: 'password',\n            type: PASSWORD_FIELD,\n            initialValue: this.state.integrateData.password,\n            required: true,\n            label: \"Password\"\n        }];\n        const taskIntegrateFormProp = {\n            method : 'post',\n            successFn : function(data){\n                that.loadData();\n            },\n            errorFn : function (){\n\n            },\n            action: interpolate(SAVE_CREDENTIALS, [this.props.user.id]),\n        };\n        const TestFormLayout = Form.create()(DynamicFieldsForm);\n        return <Row>\n            <Card>\n                <h2>My Integrations</h2>\n                <Tabs>\n                    <TabPane tab={<span><Icon type=\"check-circle\"/>Task Tracker</span>} key=\"Complaints\">\n                        <TestFormLayout fields={taskIntegrateFormFields} formProp={taskIntegrateFormProp}/>\n                    </TabPane>\n                    {/*<TabPane tab={<span><Icon type=\"phone\"/>Calling</span>} key=\"observations\">*/}\n                    {/*    /!*<TableData {...this.props} id={EMR_OBSERVATIONS} name=\"Observations\"/>*!/*/}\n                    {/*</TabPane>*/}\n                </Tabs>\n\n            </Card>\n        </Row>\n    }\n}\n","import React from \"react\";\nimport PrintSettings from \"../printout/PrintSettings\";\nimport {Card} from 'antd';\n\nexport default class MailPDFSettings extends React.Component {\n    constructor(props) {\n        super(props);\n\n    }\n\n    render() {\n        return <div>\n            <h2>Email PDF Settings</h2>\n            <Card>\n                <PrintSettings sub_type={\"INVOICE\"}\n                               active_practiceId={this.props.active_practiceId} type={\"MAIL\"}/>\n            </Card>\n        </div>\n    }\n}\n","import React from \"react\";\nimport DynamicFieldsForm from \"../../../common/DynamicFieldsForm\";\nimport {Card, Form} from \"antd\";\nimport {\n    INPUT_FIELD,\n    MULTI_SELECT_FIELD,\n    NUMBER_FIELD,\n    SELECT_FIELD,\n    SINGLE_IMAGE_UPLOAD_FIELD,\n    SUCCESS_MSG_TYPE\n} from \"../../../../constants/dataKeys\";\nimport {displayMessage, getAPI, interpolate} from \"../../../../utils/common\";\nimport {BED_PACKAGES, ROOM_TYPE, TAXES} from \"../../../../constants/api\";\n\nexport default class AddorEditBedPackages extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            editPackage: this.props.editPackage ? this.props.editPackage : null,\n            roomTypes: [],\n            taxes: []\n        }\n    }\n\n    componentDidMount() {\n        this.loadRequiredData();\n        this.loadTaxes();\n    }\n\n    loadRequiredData = () => {\n        var that = this;\n        let successFn = function (data) {\n            that.setState({\n                roomTypes: data,\n            })\n        };\n        let errorFn = function () {\n        };\n        getAPI(interpolate(ROOM_TYPE, [this.props.active_practiceId]), successFn, errorFn);\n\n    }\n\n    loadTaxes() {\n        var that = this;\n        let successFn = function (data) {\n            that.setState({\n                taxes: data,\n            })\n        };\n        let errorFn = function () {\n        };\n        getAPI(interpolate(TAXES, [this.props.active_practiceId]), successFn, errorFn);\n\n    }\n\n    render() {\n        let that = this;\n        let BedPackageForm = Form.create()(DynamicFieldsForm);\n        let fields = [{\n            label: \"Package Name\",\n            key: 'name',\n            required: true,\n            initialValue: this.props.editPackage ? this.props.editPackage.name : null,\n            type: INPUT_FIELD\n        }, {\n            label: \"Days of Booking\",\n            key: 'no_of_days',\n            required: true,\n            initialValue: this.props.editPackage ? this.props.editPackage.no_of_days : null,\n            type: NUMBER_FIELD,\n            follow: 'INR'\n        }, {\n            label: \"Normal Price\",\n            key: 'normal_price',\n            required: true,\n            initialValue: this.props.editPackage ? (this.props.editPackage.normal_price + this.props.editPackage.normal_tax_value).toFixed(2) : null,\n            type: NUMBER_FIELD,\n            follow: 'INR',\n        }, {\n            label: \"Tatkal Price\",\n            key: 'tatkal_price',\n            required: true,\n            initialValue: this.props.editPackage ? (this.props.editPackage.tatkal_price + this.props.editPackage.tatkal_tax_value).toFixed(2) : null,\n            type: NUMBER_FIELD,\n            follow: 'INR'\n        }, {\n            label: \"Image\",\n            key: 'image',\n            initialValue: this.props.editPackage ? this.props.editPackage.image : null,\n            type: SINGLE_IMAGE_UPLOAD_FIELD,\n        }, {\n            label: \"Room Type\",\n            key: 'room',\n            required: true,\n            initialValue: this.props.editPackage ? this.props.editPackage.room : null,\n            type: SELECT_FIELD,\n            options: this.state.roomTypes.map(room => Object.create({label: room.name, value: room.id}))\n        }, {\n            label: \"Taxes\",\n            key: 'taxes',\n            initialValue: this.props.editPackage && this.props.editPackage.taxes ? this.props.editPackage.taxes.map(item => item.id) : [],\n            type: MULTI_SELECT_FIELD,\n            options: this.state.taxes.map(tax => Object.create({\n                label: tax.name + \"(\" + tax.tax_value + \"%)\",\n                value: tax.id\n            }))\n        }];\n        let formProps = {\n            method: \"post\",\n            action: interpolate(BED_PACKAGES, [this.props.active_practiceId]),\n            successFn: function () {\n                displayMessage(SUCCESS_MSG_TYPE, \"Package Saved Successfully\");\n                if (that.props.loadData)\n                    that.props.loadData();\n                that.props.history.push('/settings/bed-packages');\n            }, errorFn: function () {\n\n            }\n        }\n        let defaultValues = [];\n        if (this.state.editPackage) {\n            defaultValues.push({key: 'id', value: this.state.editPackage.id})\n        }\n        return <div>\n            <Card>\n                <BedPackageForm fields={fields} formProp={formProps}\n                                defaultValues={defaultValues}\n                                title={this.state.editPackage ? \"Edit Bed Package\" : \"Add Bed Packages\"} {...this.props}/>\n            </Card>\n        </div>\n    }\n}\n","import React from \"react\";\nimport {Button, Card, Divider, Icon, Popconfirm} from 'antd';\nimport {Link, Redirect, Route, Switch} from \"react-router-dom\";\nimport CustomizedTable from \"../../../common/CustomizedTable\";\nimport AddorEditBedPackages from \"./AddorEditBedPackages\";\nimport {getAPI, interpolate, makeFileURL, postAPI} from \"../../../../utils/common\";\nimport {BED_PACKAGES} from \"../../../../constants/api\";\n\nexport default class BedPackages extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            loading: false,\n            packages: []\n        }\n    }\n\n    componentDidMount() {\n        this.loadData();\n    }\n\n    loadData = () => {\n        let that = this;\n        let successFn = function (data) {\n            that.setState({\n                loading: false,\n                packages: data\n            })\n        }\n        let errorFn = function () {\n            that.setState({\n                loading: false,\n            })\n        }\n        getAPI(interpolate(BED_PACKAGES, [this.props.active_practiceId]), successFn, errorFn);\n    }\n\n    deleteObject(record) {\n        let that = this;\n        let reqData = record;\n        reqData.is_active = false;\n        let successFn = function (data) {\n            that.loadData();\n        }\n        let errorFn = function () {\n        }\n        postAPI(interpolate(BED_PACKAGES, [this.props.active_practiceId]), reqData, successFn, errorFn);\n    }\n\n    editObject = (record) => {\n        this.setState({\n            editPackage: record,\n            loading: false\n        });\n        this.props.history.push('/settings/bed-packages/edit')\n    }\n\n    render() {\n        let that = this;\n        let columns = [{\n            dataIndex: 'image',\n            key: 'image',\n            render: (value) => value ?\n                <img src={makeFileURL(value)} alt=\"\" style={{maxWidth: 200, maxHeight: 100}}/> : null\n        }, {\n            title: \"Package Name\",\n            dataIndex: 'name',\n            key: 'name'\n        }, {\n            title: \"Days\",\n            dataIndex: 'no_of_days',\n            key: 'no_of_days'\n        }, {\n            title: \"Normal Price+tax (INR)\",\n            dataIndex: 'normal_price',\n            key: 'normal_price',\n            render: (value, record) => (<p>{(record.normal_price + record.normal_tax_value).toFixed(2)}</p>\n\n            ),\n        }, {\n            title: \"Tatkal Price+tax (INR)\",\n            dataIndex: 'tatkal_price',\n            key: 'tatkal_price',\n            render: (value, record) => (<p>{(record.tatkal_price + record.tatkal_tax_value).toFixed(2)}</p>)\n        }, {\n            title: 'Action',\n            key: 'action',\n            render: (text, record) => (\n                <span>\n                    <a onClick={() => this.editObject(record)}>\n                Edit</a>\n                <Divider type=\"vertical\"/>\n                  <Popconfirm title=\"Are you sure delete this prescription?\" onConfirm={() => that.deleteObject(record)}\n                              okText=\"Yes\" cancelText=\"No\">\n                      <a>Delete</a>\n                  </Popconfirm>\n              </span>\n            ),\n        }]\n        return <Switch>\n            <Route path={\"/settings/bed-packages/add\"}\n                   render={(route) => <AddorEditBedPackages {...this.props} {...route}\n                                                            loadData={this.loadData}/>}/>\n            <Route path={\"/settings/bed-packages/edit\"}\n                   render={(route) => (this.state.editPackage ?\n                       <AddorEditBedPackages {...this.state} {...this.props} {...route} loadData={this.loadData}/> :\n                       <Redirect to={\"/settings/bed-packages\"}/>)\n                   }/>\n            <Route>\n                <Card\n                    title={<h4>Bed Packages <Link to={\"/settings/bed-packages/add\"}><Button style={{float: 'right'}}\n                                                                                            type={\"primary\"}><Icon\n                        type={\"plus\"}/> Add</Button></Link></h4>}>\n                    <CustomizedTable dataSource={this.state.packages} loading={this.state.loading}\n                                     columns={columns}/>\n                </Card>\n            </Route>\n        </Switch>\n    }\n}\n","import React from \"react\";\nimport DynamicFieldsForm from \"../../../common/DynamicFieldsForm\";\nimport {Button, Card, Divider, Form, Modal, Popconfirm} from \"antd\";\nimport {INPUT_FIELD, NUMBER_FIELD, SUCCESS_MSG_TYPE} from \"../../../../constants/dataKeys\";\nimport {ROOM_TYPE} from \"../../../../constants/api\";\nimport {displayMessage, getAPI, interpolate, postAPI} from \"../../../../utils/common\";\nimport CustomizedTable from \"../../../common/CustomizedTable\";\n\nclass RoomTypes extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            redirect: false,\n            visible: false,\n            rooms: null,\n            loading: true,\n            showDeleted: false,\n            deletedLoading: false,\n            deletedRooms: [],\n            editObj: {}\n        };\n        this.loadData = this.loadData.bind(this);\n        this.deleteObject = this.deleteObject.bind(this);\n\n    }\n\n    componentDidMount() {\n        this.loadData();\n    }\n\n    loadData(deleted = false) {\n        var that = this;\n        let successFn = function (data) {\n            console.log(\"get table\");\n            if (deleted) {\n                that.setState({\n                    deletedRooms: data,\n                    deletedLoading: false\n                })\n            } else {\n                that.setState({\n                    rooms: data,\n                    loading: false\n                })\n            }\n        };\n        let errorFn = function () {\n            if (deleted) {\n                that.setState({\n                    deletedLoading: false\n                })\n            } else {\n                that.setState({\n                    loading: false\n                })\n            }\n        };\n        if (deleted) {\n            getAPI(interpolate(ROOM_TYPE, [this.props.active_practiceId]), successFn, errorFn, {\n                deleted: true,\n                practice: this.props.active_practiceId\n            });\n        } else {\n            getAPI(interpolate(ROOM_TYPE, [this.props.active_practiceId]), successFn, errorFn);\n        }\n    }\n\n    changeRedirect() {\n        var redirectVar = this.state.redirect;\n        this.setState({\n            redirect: !redirectVar,\n        });\n    }\n\n    editTax(value) {\n        this.setState({\n            editObj: value,\n            visible: true\n        })\n    }\n\n    handleCancel = () => {\n        this.setState({visible: false});\n    }\n\n    deleteObject(record, type) {\n        let that = this;\n        let reqData = record;\n        reqData.is_active = type;\n        let successFn = function (data) {\n            that.loadData();\n            if (that.state.showDeleted) {\n                that.loadData(true);\n            }\n        }\n        let errorFn = function () {\n        };\n        postAPI(interpolate(ROOM_TYPE, [this.props.active_practiceId]), reqData, successFn, errorFn)\n    }\n\n    showDeletedExpenses = () => {\n        this.setState({\n            showDeleted: true,\n            deletedLoading: true\n        });\n        this.loadData(true)\n    }\n\n    render() {\n        let that = this;\n        const columns = [{\n            title: 'Room Type',\n            dataIndex: 'name',\n            key: 'name',\n        },{\n            title: 'Normal Bed Count',\n            dataIndex: 'normal_seats',\n            key: 'normal_seats',\n        },{\n            title: 'Tatkal Bed Count',\n            dataIndex: 'tatkal_seats',\n            key: 'tatkal_seats',\n        }, {\n            title: 'Action',\n            key: 'action',\n            render: (text, record) => (\n                record.is_active ? <span>\n\n              <a onClick={() => this.editTax(record)}>  Edit</a>\n                <Divider type=\"vertical\"/>\n                <Popconfirm title=\"Are you sure to delete this?\"\n                            onConfirm={() => that.deleteObject(record, false)} okText=\"Yes\" cancelText=\"No\">\n                  <a>Delete</a>\n              </Popconfirm>\n              </span> : <span>\n                    <Popconfirm title=\"Are you sure show this?\"\n                                onConfirm={() => that.deleteObject(record, true)} okText=\"Yes\" cancelText=\"No\">\n                  <a>Show</a>\n              </Popconfirm>\n                </span>\n            ),\n        }];\n        const fields = [{\n            label: \"Room Type\",\n            key: \"name\",\n            required: true,\n            type: INPUT_FIELD\n        }, {\n            label: \"Normal Bed Count\",\n            key: \"normal_seats\",\n            required: true,\n            type: NUMBER_FIELD,\n            min: 0\n        }, {\n            label: \"Tatkal Bed Count\",\n            key: \"tatkal_seats\",\n            required: true,\n            type: NUMBER_FIELD,\n            min: 0\n        },];\n        const editfields = [{\n            label: \"Room Type\",\n            key: \"name\",\n            required: true,\n            initialValue: this.state.editObj.name,\n            type: INPUT_FIELD\n        }, {\n            label: \"Normal Bed Count\",\n            key: \"normal_seats\",\n            required: true,\n            initialValue: this.state.editObj.normal_seats,\n            type: NUMBER_FIELD,\n            min: 0\n        }, {\n            label: \"Tatkal Bed Count\",\n            required: true,\n            initialValue: this.state.editObj.tatkal_seats,\n            key: \"tatkal_seats\",\n            type: NUMBER_FIELD,\n            min: 0\n        },];\n        const formProp = {\n            successFn: function (data) {\n                that.handleCancel();\n                that.loadData();\n                console.log(data);\n                console.log(\"sucess\");\n                displayMessage(SUCCESS_MSG_TYPE, \"success\");\n            },\n            errorFn: function () {\n\n            },\n            action: interpolate(ROOM_TYPE, [this.props.active_practiceId]),\n            method: \"post\",\n        }\n        const defaultValues = [{\"key\": \"practice\", \"value\": this.props.active_practiceId}];\n        const editFormDefaultValues = [{\"key\": \"practice\", \"value\": this.props.active_practiceId}, {\n            \"key\": \"id\",\n            \"value\": this.state.editObj.id\n        }];\n        const TestFormLayout = Form.create()(DynamicFieldsForm);\n        return <div>\n            <h2>Room Types</h2>\n            <Card>\n                <TestFormLayout defaultValues={defaultValues} formProp={formProp} fields={fields}/>\n                <Divider/>\n                <CustomizedTable loading={this.state.loading} columns={columns} dataSource={this.state.rooms}/>\n                {/*{this.state.showDeleted ?*/}\n                {/*<div>*/}\n                {/*<CustomizedTable loading={this.state.deletedLoading} columns={columns}*/}\n                {/*dataSource={this.state.deletedExpenses}/>*/}\n                {/*</div> :*/}\n                {/*<h4><a onClick={() => this.showDeletedExpenses()}>Show Deleted Expenses</a></h4>}*/}\n            </Card>\n            <Modal\n                visible={this.state.visible}\n                footer={null}\n                onCancel={this.handleCancel}\n            >\n\n                <TestFormLayout title=\"Edit Room Type\" defaultValues={editFormDefaultValues} formProp={formProp}\n                                fields={editfields}/>\n                <Button key=\"back\" onClick={this.handleCancel}>Return</Button>,\n\n            </Modal>\n        </div>\n    }\n}\n\nexport default RoomTypes;\n","import React from \"react\";\nimport DynamicFieldsForm from \"../../../common/DynamicFieldsForm\";\nimport {Form, Card, message} from \"antd\";\nimport {\n    CHECKBOX_FIELD,\n    SUCCESS_MSG_TYPE,\n    INPUT_FIELD,\n    RADIO_FIELD,\n    NUMBER_FIELD,\n    SELECT_FIELD\n} from \"../../../../constants/dataKeys\";\nimport {OFFERS} from \"../../../../constants/api\";\nimport {getAPI, displayMessage, deleteAPI, interpolate} from \"../../../../utils/common\";\nimport {Redirect} from 'react-router-dom'\n\n\nclass AddOffer extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            redirect: false,\n            fields: [{\n                label: \"Offer Name \",\n                key: \"code\",\n                placeholder:\"Offer Name\",\n                required: true,\n                type: INPUT_FIELD\n            }, {\n                label: \"Description \",\n                key: \"description\",\n                placeholder:\"E.g. 20% off on all services\",\n                type: INPUT_FIELD\n            }, {\n                label: \"Discount\",\n                key: \"discount\",\n                required: true,\n                type: NUMBER_FIELD,\n                // follow:'%'\n            }, {\n                label: \"Discount Unit\",\n                key: 'unit',\n                required: true,\n                options: [{label: 'Percent', value: '%'}, {label: 'Rupees', value: 'INR'}],\n                type: SELECT_FIELD,\n                initialValue: '%'\n            }]\n        }\n        this.changeRedirect = this.changeRedirect.bind(this);\n\n    }\n\n    changeRedirect() {\n        var redirectVar = this.state.redirect;\n        this.setState({\n            redirect: !redirectVar,\n        });\n    }\n\n    render() {\n        let that = this;\n        const formProp = {\n            successFn: function (data) {\n                displayMessage(SUCCESS_MSG_TYPE, \"success\")\n                if (that.props.loadData)\n                    that.props.loadData();\n\n            },\n            errorFn: function () {\n\n            },\n            action: interpolate(OFFERS, [this.props.active_practiceId]),\n            method: \"post\",\n            beforeSubmit: function (data) {\n                console.log(data)\n            }\n        }\n        const TestFormLayout = Form.create()(DynamicFieldsForm);\n        return <div>\n            <TestFormLayout formProp={formProp}\n                            fields={this.state.fields} {...this.props}/>\n            {this.state.redirect && <Redirect to='/settings/loyalty'/>}\n\n        </div>\n    }\n}\n\nexport default AddOffer;\n","import React from \"react\";\nimport {Button, Card, Divider, Icon, Popconfirm, Row,} from \"antd\";\nimport {Link} from \"react-router-dom\";\nimport {OFFERS} from \"../../../../constants/api\";\nimport {getAPI, interpolate, postAPI} from \"../../../../utils/common\";\nimport CustomizedTable from \"../../../common/CustomizedTable\";\nimport AddOffer from \"./AddOffer\";\n\nclass Offers extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            offers: null,\n            loading: true\n        }\n        this.loadData = this.loadData.bind(this);\n        this.deleteObject = this.deleteObject.bind(this);\n    }\n\n    componentWillMount() {\n        this.loadData()\n    }\n\n    loadData() {\n        var that = this;\n        let successFn = function (data) {\n            console.log(\"get table\");\n            that.setState({\n                offers: data,\n                loading: false\n            })\n        };\n        let errorFn = function () {\n            that.setState({\n                loading: true\n            })\n        };\n        getAPI(interpolate(OFFERS, [this.props.active_practiceId]), successFn, errorFn);\n    }\n\n    deleteObject(record) {\n        let that = this;\n        let reqData = record;\n        reqData.is_active = false;\n        let successFn = function (data) {\n            that.loadData();\n        }\n        let errorFn = function () {\n        }\n        postAPI(interpolate(OFFERS, [this.props.active_practiceId]), reqData, successFn, errorFn);\n    }\n\n    render() {\n        let that = this;\n        const columns = [{\n            title: 'Name',\n            dataIndex: 'code',\n            key: 'code',\n        }, {\n            title: 'Description',\n            dataIndex: 'description',\n            key: 'description',\n        }, {\n            title: 'Discount',\n            dataIndex: 'discount',\n            key: 'discount',\n        }, {\n            title: 'Discount Unit',\n            dataIndex: 'unit',\n            key: 'unit'\n        }, {\n            title: 'Action',\n            key: 'action',\n            render: (text, record) => (\n                <Popconfirm title=\"Are you sure delete this Offer?\" onConfirm={() => that.deleteObject(record)}\n                            okText=\"Yes\" cancelText=\"No\">\n                    <a>\n                        Delete\n                    </a>\n                </Popconfirm>\n            ),\n        }];\n        return <Row>\n            {/*<h2>All Offers*/}\n            {/*<Link to=\"/settings/loyalty/add\">*/}\n            {/*<Button type=\"primary\" style={{float: 'right'}}>*/}\n            {/*<Icon type=\"plus\"/>&nbsp;Add*/}\n            {/*</Button>*/}\n            {/*</Link>*/}\n            {/*</h2>*/}\n            <AddOffer {...this.props} loadData={this.loadData}/>\n            <Divider/>\n            <CustomizedTable loading={this.state.loading} columns={columns} dataSource={this.state.offers}/>\n        </Row>\n    }\n}\n\nexport default Offers;\n","import React from \"react\";\nimport {Form, Row} from 'antd';\nimport DynamicFieldsForm from \"../../../common/DynamicFieldsForm\";\nimport {INPUT_FIELD, NUMBER_FIELD, SUCCESS_MSG_TYPE} from \"../../../../constants/dataKeys\";\nimport {MEMBERSHIP_API, OFFERS} from \"../../../../constants/api\";\nimport {displayMessage, interpolate} from \"../../../../utils/common\";\n\nexport default class AddMembership extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {}\n    }\n\n    render() {\n        const fields = [{\n            label: \"Membership Name \",\n            key: \"name\",\n            placeholder:\"Membership Name\",\n            required: true,\n            type: INPUT_FIELD\n        }, {\n            label: \"Fee\",\n            key: \"fee\",\n            required: true,\n            type: NUMBER_FIELD,\n            follow: 'INR'\n        }, {\n            label: \"Benefit\",\n            key: \"benefit\",\n            required: true,\n            type: NUMBER_FIELD,\n            follow: '%'\n        }, {\n            label: \"Validity\",\n            key: 'validity',\n            required: true,\n            type: NUMBER_FIELD,\n            follow: 'Months',\n\n        }];\n        let that = this;\n        const formProp = {\n            successFn: function (data) {\n                displayMessage(SUCCESS_MSG_TYPE, \"success\")\n                if (that.props.loadData)\n                    that.props.loadData();\n\n            },\n            errorFn: function () {\n\n            },\n            action: interpolate(MEMBERSHIP_API, [this.props.active_practiceId]),\n            method: \"post\",\n        };\n        const formDefaultValues = [{\"key\": \"practice\", \"value\": this.state.active_practiceId}];\n        const AddForm = Form.create()(DynamicFieldsForm);\n        return <Row>\n            <AddForm fields={fields} formProp={formProp} defaultValues={formDefaultValues} {...this.props}/>\n        </Row>\n    }\n}\n","import React from \"react\";\nimport {Divider, Popconfirm, Row} from 'antd';\nimport CustomizedTable from \"../../../common/CustomizedTable\";\nimport {getAPI, interpolate, postAPI} from \"../../../../utils/common\";\nimport {MEMBERSHIP_API, OFFERS} from \"../../../../constants/api\";\nimport AddMembership from \"./AddMembership\";\n\nexport default class Membership extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            membership: []\n        }\n    }\n\n    componentDidMount() {\n        this.loadData();\n    }\n\n    loadData = () => {\n        let that = this;\n        let successFn = function (data) {\n            that.setState({\n                membership: data\n            })\n        }\n        let errorFn = function () {\n\n        }\n        getAPI(interpolate(MEMBERSHIP_API, [this.props.active_practiceId]), successFn, errorFn);\n    }\n\n    deleteObject(record) {\n        let that = this;\n        let reqData = record;\n        reqData.is_active = false;\n        let successFn = function (data) {\n            that.loadData();\n        }\n        let errorFn = function () {\n        }\n        postAPI(interpolate(MEMBERSHIP_API, [this.props.active_practiceId]), reqData, successFn, errorFn);\n    }\n\n    render() {\n        let that = this;\n        const columns = [{\n            title: 'Name',\n            dataIndex: 'name',\n            key: 'name',\n        }, {\n            title: 'Fee (INR)',\n            dataIndex: 'fee',\n            key: 'fee',\n        }, {\n            title: 'Benefit (%)',\n            dataIndex: 'benefit',\n            key: 'benefit',\n        }, {\n            title: 'Opening Balance (INR)',\n            dataIndex: 'fee',\n            key: 'opening',\n            render: (item, record) => <span>\n                {record.fee + (record.fee * record.benefit / 100)}\n            </span>\n        }, {\n            title: 'Validity (Months)',\n            dataIndex: 'validity',\n            key: 'validity'\n        }, {\n            title: 'Action',\n            key: 'action',\n            render: (text, record) => (\n                <Popconfirm title=\"Are you sure delete this prescription?\" onConfirm={() => that.deleteObject(record)}\n                            okText=\"Yes\" cancelText=\"No\">\n                    <a>\n                        Delete\n                    </a>\n                </Popconfirm>\n            ),\n        }];\n        return <Row>\n            <AddMembership {...this.props} loadData={this.loadData}/>\n            <Divider/>\n            <CustomizedTable loading={this.state.loading} columns={columns} dataSource={this.state.membership}/>\n        </Row>\n    }\n}\n","import React from \"react\";\nimport {Alert, Button, Card, DatePicker, Form, Input, InputNumber, Row, Select} from \"antd\";\nimport {displayMessage, getAPI, interpolate, postAPI} from \"../../../../../utils/common\";\nimport {PROMO_CODE, SEARCH_PATIENT} from \"../../../../../constants/api\";\nimport moment from \"moment\";\nimport {CURRENCY_TYPE} from \"../../../../../constants/hardData\";\nimport {SUCCESS_MSG_TYPE} from \"../../../../../constants/dataKeys\";\n\nclass AddOrEdiPromoCode extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            editPromoCode: [],\n            patientList: [],\n            loading: false,\n        };\n    }\n\n\n    loadPatient = (value) => {\n        let that = this;\n        let successFn = function (data) {\n            if (data.results.length > 0) {\n                that.setState({\n                    patientList: data.results,\n                })\n            }\n        };\n        let errorFn = function () {\n        };\n        if (value) {\n            getAPI(interpolate(SEARCH_PATIENT, [value]), successFn, errorFn);\n        }\n\n    };\n\n    handleSubmit = (e) => {\n        let that = this;\n        that.setState({\n            loading: true\n        });\n        e.preventDefault();\n        this.props.form.validateFields((err, values) => {\n            if (!err) {\n                let reqData = values;\n                reqData.practice = that.props.active_practiceId;\n                let successFn = function (data) {\n                    that.setState({\n                        loading: false,\n                    });\n                    displayMessage(SUCCESS_MSG_TYPE, \"Successfully Created!\")\n                    that.props.form.resetFields();\n                    that.props.loadData();\n                };\n                let errorFn = function () {\n\n                };\n\n                postAPI(PROMO_CODE, reqData, successFn, errorFn)\n\n            }\n        })\n    };\n\n    render() {\n        const {patientList} = this.state;\n\n        const formItemLayout = {\n            labelCol: {span: 8},\n            wrapperCol: {span: 14},\n        };\n        const {getFieldDecorator} = this.props.form;\n\n\n        return (<div>\n                <Form onSubmit={this.handleSubmit}>\n                    <Form.Item label={\"Promo Code\"} {...formItemLayout} key={'promo_code'}>\n                        {getFieldDecorator('promo_code', {initialValue: ''})\n                        (<Input placeholder={\"Promo Code\"}/>)\n                        }\n                    </Form.Item>\n\n                    <Form.Item label={\"Promo Code Value\"} {...formItemLayout} key={'code_value'}>\n                        {getFieldDecorator('code_value', {initialValue: ''})\n                        (<InputNumber placeholder={\"Promo Code Value\"}/>)\n                        }\n                    </Form.Item>\n\n                    <Form.Item label={\"Code Type\"} {...formItemLayout} key={'code_type'}>\n                        {getFieldDecorator('code_type', {initialValue: ''})\n                        (<Select placeholder={\"Code Type\"} style={{width: '100%'}}>\n\n                            {CURRENCY_TYPE.map(option => (\n                                <Select.Option\n                                    value={option.value}>{option.label} ({option.value})</Select.Option>))}\n                        </Select>)\n                        }\n                    </Form.Item>\n\n                    <Form.Item label={\"Min Order\"} {...formItemLayout} key={'minimum_order'}>\n                        {getFieldDecorator('minimum_order', {initialValue: ''})\n                        (<InputNumber placeholder={\"Min Order\"}/>)\n                        }\n                    </Form.Item>\n\n                    <Form.Item label={\"Max Discount\"} {...formItemLayout} key={'maximum_discount'}>\n                        {getFieldDecorator('maximum_discount', {initialValue: ''})\n                        (<InputNumber placeholder={\"Min Order\"}/>)\n                        }\n                    </Form.Item>\n\n                    <Form.Item label={\"Expiry Date\"} {...formItemLayout} key={'expiry_date'}>\n\n                        {getFieldDecorator('expiry_date', {initialValue: moment()})\n                        (<DatePicker format=\"YYYY/MM/DD\"/>)\n                        }\n                    </Form.Item>\n\n\n                    <Form.Item label={\"Patients\"} {...formItemLayout} key={'patient'}>\n                        {getFieldDecorator('patients', {initialValue: []})\n                        (<Select mode={\"multiple\"}\n                                 placeholder=\"Select Patient\" style={{width: '100%'}}\n                                 showSearch onSearch={this.loadPatient} filterOption={false}>\n                            {patientList.map(option => (\n                                <Select.Option\n                                    value={option.id}>{option.user.first_name} ({option.custom_id})</Select.Option>))}\n                        </Select>)\n                        }\n                        <span className=\"ant-form-text\">If no patient is selected, promo code will be available to all patients.</span>\n                    </Form.Item>\n\n                    <Form.Item {...formItemLayout}>\n                        <Button type=\"primary\" htmlType=\"submit\" style={{margin: 5}}>\n                            Submit\n                        </Button>\n                        {this.props.history ?\n                            <Button style={{margin: 5}} onClick={() => this.props.history.goBack()}>\n                                Cancel\n                            </Button> : null}\n                    </Form.Item>\n\n                </Form>\n            </div>\n        )\n    }\n}\n\nexport default Form.create()(AddOrEdiPromoCode);\n","import React from \"react\";\nimport {Divider, Popconfirm, Row, Table} from \"antd\";\nimport moment from \"moment\";\nimport AddOrEdiPromoCode from \"./AddOrEdiPromoCode\";\nimport {getAPI, interpolate, postAPI, putAPI} from \"../../../../../utils/common\";\nimport {PROMO_CODE, SINGLE_PROMO_CODE} from \"../../../../../constants/api\";\nimport InfiniteFeedLoaderButton from \"../../../../common/InfiniteFeedLoaderButton\";\n\n\nexport default class PromoCode extends React.Component{\n    constructor(props){\n        super(props);\n        this.state={\n            loading:false,\n            promoCode:[],\n        };\n\n    }\n    componentWillMount() {\n            this.loadData();\n    }\n\n    loadData =(page=1) =>{\n        let that =this;\n        this.setState({\n            loading:true,\n        });\n\n        let successFn =function (data) {\n            that.setState({\n                promoCode:data.results,\n                nextPage : data.next,\n                loading:false,\n            })\n        };\n        let errorFn =function () {\n            that.setState({\n                loading:false,\n            })\n        };\n\n        getAPI(interpolate(PROMO_CODE ,[this.props.active_practiceId] ),successFn ,errorFn,{page:page,practice:this.props.active_practiceId});\n    };\n\n    deleteObject =(record) =>{\n        let that = this;\n        let reqData ={\n            // id:record.id,\n            is_active:false\n        };\n        let successFn = function (data) {\n            that.loadData();\n        };\n\n        let errorFn = function () {\n\n        };\n        putAPI(interpolate(SINGLE_PROMO_CODE,[record.id]), reqData, successFn, errorFn);\n    };\n\n\n    render() {\n        const {promoCode ,loading } =this.state;\n\n        const columns =[\n            {\n                title:'Code Name',\n                dataIndex:'promo_code',\n                key:'promo_code',\n            },{\n                title:'Promo Code Value',\n                dataIndex:'promo_code',\n                key:'promo_code',\n            },{\n                title:'Type',\n                dataIndex:'code_type',\n                key:'code_type',\n            },{\n                title:'Min Order',\n                dataIndex:'minimum_order',\n                key:'minimum_order',\n\n            },{\n                title:'Max Discount',\n                dataIndex:'maximum_discount',\n                key:'maximum_discount',\n\n            },{\n                title:'Expiry Date',\n                dataIndex:'expiry_date',\n                render:(item,record)=>(moment(record.expiry_date).format('YYYY-MM-DD'))\n            },{\n                title:'Action',\n                render: (text, record) => (\n                    <Popconfirm title=\"Are you sure delete this promo code?\" onConfirm={() => this.deleteObject(record)}\n                                okText=\"Yes\" cancelText=\"No\">\n                        <a>\n                            Delete\n                        </a>\n                    </Popconfirm>\n                ),\n            }\n\n        ];\n        return(\n            <Row>\n                <AddOrEdiPromoCode {...this.props} loadData={this.loadData}/>\n                <Divider/>\n                <Table loading={loading} columns={columns} dataSource={promoCode} pagination={false}/>\n                <InfiniteFeedLoaderButton loading={this.state.loading} hidden={!this.state.nextPage} loaderFunction={()=>this.loadData(this.state.nextPage)}/>\n            </Row>\n        )\n    }\n}\n\n","import React from \"react\";\nimport {Card, Tabs, Row, Icon} from 'antd';\nimport Offers from \"./Offers\";\nimport Membership from \"./Membership\";\nimport PromoCode from \"./promo-code/PromoCode\";\n\nconst TabPane = Tabs.TabPane;\n\nexport default class LoyaltySettings extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {}\n    }\n\n    render() {\n        return <Row>\n            <h2>Loyalty Settings</h2>\n            <Card>\n                <Tabs>\n                    <TabPane tab={<span><Icon type=\"percentage\" />Offers</span>} key={\"#offers\"}>\n                        <Offers {...this.props}/>\n                    </TabPane>\n\n                    <TabPane tab={<span><Icon type=\"pound\" />Membership</span>} key={\"#membership\"}>\n                        <Membership {...this.props}/>\n                    </TabPane>\n\n                    <TabPane tab={<span><Icon type=\"pound\" />Promo Code</span>} key={\"#promocode\"}>\n                        <PromoCode {...this.props}/>\n                    </TabPane>\n                </Tabs>\n            </Card>\n        </Row>\n    }\n}\n","import React from \"react\";\nimport {Card, Divider, Row} from \"antd\";\nimport {Redirect, Route} from \"react-router-dom\";\nimport DynamicFieldsForm from \"../../../common/DynamicFieldsForm\";\nimport {Form} from \"antd/lib/index\";\nimport {\n    INPUT_FIELD,\n    NUMBER_FIELD,\n    SELECT_FIELD,\n    SUCCESS_MSG_TYPE, TEXT_FIELD\n} from \"../../../../constants/dataKeys\";\nimport {displayMessage, getAPI, interpolate} from \"../../../../utils/common\";\nimport {LABTEST_API, PRODUCT_MARGIN} from \"../../../../constants/api\";\n\nexport default class AddorEditLab extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            redirect: false,\n            editFields: (this.props.editTest ? this.props.editTest : null),\n            productMargin: []\n        }\n        this.changeRedirect = this.changeRedirect.bind(this);\n        this.loadProductMargin();\n    }\n\n    changeRedirect() {\n        var redirectVar = this.state.redirect;\n        this.setState({\n            redirect: !redirectVar,\n            editFields: {},\n        });\n    }\n\n    loadProductMargin() {\n        let that = this;\n        let successFn = function (data) {\n            that.setState({\n                productMargin: data\n            })\n        }\n        let errorFn = function () {\n\n        }\n        getAPI(PRODUCT_MARGIN, successFn, errorFn);\n    }\n\n    render() {\n        let that = this;\n        const TestFormLayout = Form.create()(DynamicFieldsForm);\n        const fields = [{\n            label: \"Test Name\",\n            key: \"name\",\n            placeholder:\"Test Name\",\n            type: INPUT_FIELD,\n            initialValue: (this.state.editFields ? this.state.editFields.name : null),\n            required: true\n        }, {\n            label: \"Cost\",\n            key: \"cost\",\n            type: NUMBER_FIELD,\n            initialValue: (this.state.editFields ? this.state.editFields.cost : null),\n            required: true,\n            follow: 'INR',\n            min: 1\n        }, {\n            label: 'MLM Margin Type',\n            type: SELECT_FIELD,\n            initialValue: (this.state.editFields ? this.state.editFields.margin : null),\n            key: 'margin',\n            required: true,\n            options: that.state.productMargin.map(margin => ({label: margin.name, value: margin.id}))\n        }, {\n            label: \"Instructions\",\n            key: \"instruction\",\n            placeholder:\"Test Instructions\",\n            initialValue: (this.state.editFields ? this.state.editFields.instruction : null),\n            type: TEXT_FIELD,\n        }];\n        const formProp = {\n            successFn: function (data) {\n                displayMessage(SUCCESS_MSG_TYPE, \"success\")\n                that.props.loadData();\n            },\n            errorFn: function () {\n\n            },\n            action: interpolate(LABTEST_API, [that.props.active_practiceId]),\n            method: \"post\",\n        };\n        let defaultValues = [];\n        if (this.state.editFields)\n            defaultValues.push({'key': 'id', 'value': this.state.editFields.id});\n        return <Row>\n            <Route exact path='/settings/labs/add'\n                   render={(route) => <TestFormLayout title=\"Add Lab\" changeRedirect={this.changeRedirect}\n                                                      formProp={formProp} fields={fields} {...route}/>}/>\n            <Route exact path='/settings/labs/edit'\n                   render={(route) => (this.state.editFields ?\n                       <TestFormLayout title=\"Add Lab\" defaultValues={defaultValues}\n                                       changeRedirect={this.changeRedirect}\n                                       {...route}\n                                       formProp={formProp} fields={fields}/> : <Redirect to={'/settings/labs'}/>)}/>\n            <Divider/>\n            {this.state.redirect && <Redirect to={'/settings/labs'}/>}\n        </Row>\n    }\n}\n","import React from \"react\";\nimport DynamicFieldsForm from \"../../../common/DynamicFieldsForm\";\nimport {Button, Card, Divider, Form, Icon, Popconfirm, Row, Table} from \"antd\";\nimport {CHECKBOX_FIELD, INPUT_FIELD, RADIO_FIELD, SELECT_FIELD} from \"../../../../constants/dataKeys\";\nimport {Link, Route, Switch} from \"react-router-dom\";\nimport {LABTEST_API, OFFERS, PRODUCT_MARGIN} from \"../../../../constants/api\";\nimport {getAPI, deleteAPI, interpolate, postAPI} from \"../../../../utils/common\";\nimport AddorEditLab from \"./AddorEditLab\";\nimport CustomizedTable from \"../../../common/CustomizedTable\";\nimport InfiniteFeedLoaderButton from \"../../../common/InfiniteFeedLoaderButton\";\n\nclass LabTest extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            tests: null,\n            editTest: null,\n            loading: true,\n            productMargin: null\n        };\n        this.editLabs = this.editLabs.bind(this);\n        this.loadData = this.loadData.bind(this);\n        this.deleteTest = this.deleteTest.bind(this);\n        this.loadProductMargin = this.loadProductMargin.bind(this);\n    }\n\n    componentDidMount() {\n        this.loadData();\n        this.loadProductMargin();\n    }\n\n    loadData(page=1) {\n        var that = this;\n        let successFn = function (data) {\n            console.log(\"get table\");\n            if(data.current)\n            that.setState({\n                next:data.next,\n                tests: data.results,\n                loading: false\n            })\n            else{\n                that.setState(function(prevState){return {\n                    next: data.next,\n                    tests: [...prevState.tests,...data.results],\n                    loading: false\n                }})\n            }\n        };\n        let errorFn = function () {\n            that.setState({\n                loading: false\n            })\n        };\n        getAPI(interpolate(LABTEST_API, [that.props.active_practiceId]), successFn, errorFn);\n    }\n\n    editLabs(record) {\n        let that = this;\n        this.setState({\n            editTest: record,\n            loading: false\n        }, function () {\n            that.props.history.push('/settings/labs/edit');\n        })\n\n\n    }\n\n    deleteTest(record) {\n        let that = this;\n        let reqData = record;\n        reqData.is_active = false;\n        let successFn = function (data) {\n            that.loadData();\n        }\n        let errorFn = function () {\n        }\n        postAPI(interpolate(LABTEST_API, [this.props.active_practiceId]), reqData, successFn, errorFn);\n    }\n\n    loadProductMargin() {\n        let that = this;\n        let successFn = function (data) {\n            that.setState({\n                productMargin: data\n            })\n        }\n        let errorFn = function () {\n\n        }\n        getAPI(PRODUCT_MARGIN, successFn, errorFn);\n    }\n\n    render() {\n        let that = this;\n        const product_margin = {}\n        if (this.state.productMargin) {\n            this.state.productMargin.forEach(function (margin) {\n                product_margin[margin.id] = (margin.name)\n            })\n        }\n        const columns = [{\n            title: 'Name',\n            dataIndex: 'name',\n            key: 'code',\n        }, {\n            title: 'Cost',\n            dataIndex: 'cost',\n            key: 'cost',\n        }, {\n            title: ' Test Instructions',\n            dataIndex: 'instruction',\n            key: 'instruction',\n        }, {\n            title: ' MLM Margin',\n            key: 'margin',\n            render: (text, record) => (\n                <span> {product_margin[record.margin]}</span>\n            )\n        }, {\n            title: 'Action',\n            key: 'action',\n            render: (text, record) => (\n                <span><a onClick={() => that.editLabs(record)}>\n                Edit</a>\n                <Divider type=\"vertical\"/>\n                    <Popconfirm title=\"Are you sure delete this test?\" onConfirm={() => that.deleteTest(record)}\n                                okText=\"Yes\" cancelText=\"No\">\n                        <a>Delete</a>\n                    </Popconfirm>\n              </span>\n            ),\n        }];\n        return <Row>\n            <Route exact path={'/settings/labs/add'}\n                   render={(route) => <AddorEditLab {...that.state}\n                                                    loadData={this.loadData}{...this.props} {...route}/>}/>\n            <Route exact path={'/settings/labs/edit'}\n                   render={(route) => <AddorEditLab {...that.state}\n                                                    loadData={this.loadData} {...this.props} {...route}/>}/>\n            <Route exact path={'/settings/labs'}>\n                <div>\n                    <Row>\n                        <h2>\n                            <Link to=\"/settings/labs/add\">\n                                <Button type=\"primary\" style={{float: 'right'}}>\n                                    <Icon type=\"plus\"/>&nbsp;Add\n                                </Button>\n                            </Link>\n                        </h2>\n                    </Row>\n                    <CustomizedTable columns={columns} dataSource={this.state.tests} pagination={false}/>\n                    <InfiniteFeedLoaderButton loading={this.state.loading} hidden={!this.state.next} loaderFunction={()=>this.loadData(this.state.next)}/>\n                </div>\n            </Route>\n\n        </Row>\n    }\n}\n\nexport default LabTest;\n","import React from \"react\";\nimport {Card, Divider, Row, Col, Input,Button,InputNumber,Select} from \"antd\";\nimport {Redirect, Route} from \"react-router-dom\";\nimport DynamicFieldsForm from \"../../../common/DynamicFieldsForm\";\nimport {LABTEST_API,LABPANEL_API} from \"../../../../constants/api\";\nimport {displayMessage, getAPI,postAPI ,interpolate,} from \"../../../../utils/common\";\nimport {Form} from \"antd/lib/index\";\nimport {WARNING_MSG_TYPE} from \"../../../../constants/dataKeys\";\nconst { Option } = Select;\nclass AddorEditLab extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n           panelCost:0,\n           tests:[],\n           selectedTest:{},\n        //    redirect:false,\n        };\n        this.loadTests = this.loadTests.bind(this);\n        this.handleCancel = this.handleCancel.bind(this);\n    }\n    componentDidMount() {\n        this.loadTests();\n    }\n\n    loadTests(){\n        let that = this;\n        let successFn = function (data) {\n            that.setState({\n                tests: data.results,\n                loading: false\n            })\n            console.log(JSON.stringify(that.state.tests));\n        };\n        let errorFn = function () {\n            that.setState({\n                loading: false\n            })\n        };\n        getAPI(interpolate(LABTEST_API, [that.props.active_practiceId]), successFn, errorFn);\n    }\n    \n\n    onChangeHandler=(value)=>{\n        this.setState({\n\n            panelCost:value,\n        })\n    }\n    onChangeSelect = (e)=>{\n        this.setState(function(prevState){\n            if(prevState.selectedTest[e]){\n                displayMessage(WARNING_MSG_TYPE, \"Item Already Added\");\n                return {};\n            }\n            let testObject = null;\n            for(let i=0;i<prevState.tests.length;i++){\n                if(prevState.tests[i].id==e){\n                    testObject = prevState.tests[i];\n                    break;\n                }\n            }\n            if(testObject){\n                return {selectedTest:{...prevState.selectedTest,[e]:testObject}}\n            }\n          return {}\n\n\n        })\n        \n    }\n    removeLabPanel = (id) => {\n        this.setState(function (prevState) {\n            return {\n               \n            }\n        });\n        console.log(\"id\",id)\n    }\n\n    handleSubmit = (e) => {\n        e.preventDefault();\n        let that = this;\n        this.props.form.validateFields((err, formData) => {\n            if (!err) {\n                let reqData = {...formData ,tests:Object.keys(this.state.selectedTest)}\n                console.log(\"test\", reqData);\n                let successFn = function (data) {\n                    if (data) {\n                        console.log(data)\n                    }\n                };\n                let errorFn = function () {\n                };\n                postAPI(interpolate(LABPANEL_API, [that.props.active_practiceId]), reqData, successFn, errorFn);\n            }\n        });\n    }\n    onChangeCostCalculate(){\n\n    }\n    handleCancel(){\n        this.props.history.push('/settings/labs');\n    }\n    render() {\n        let that = this;\n        const formItemLayout = {\n            labelCol: {\n                xs: {span: 8},\n                sm: {span: 8},\n                md: {span: 8},\n                lg: {span: 8},\n            },\n            wrapperCol: {\n                xs: {span: 16},\n                sm: {span: 16},\n                md: {span: 16},\n                lg: {span: 16},\n            },\n        };\n        let testKeys = Object.keys(this.state.selectedTest);\n        let TotalCost =0;\n         testKeys.forEach(function(key){TotalCost+=parseInt(that.state.selectedTest[key].cost)});\n        const {getFieldDecorator} = this.props.form;\n        const testOption = this.state.tests.map((test) => <Select.Option value={test.id}>{test.name}</Select.Option>)\n        return <Row>\n            <Col span={18}>\n                <Form onSubmit={this.handleSubmit}>\n                    <Form.Item  label={\"Panel Name\"} {...formItemLayout}>\n                        {getFieldDecorator('name', {\n                        \n                        })(\n                        <Input />\n                        )}\n                    </Form.Item>\n                \n                    <Form.Item label={(<span>Test Name</span>)} {...formItemLayout}>\n                        <Select style={{width:'100%'}} onChange={this.onChangeSelect} >\n                            {testOption}\n                        </Select>\n                        \n                        <div>{testKeys ? testKeys.map((key)=><p key={key}>{that.state.selectedTest[key].name} <span style={{paddingLeft: '50%'}}>{this.state.selectedTest[key].cost}</span>\n                           <Button icon={\"close\"} style={{float:'right'}} onClick={() => this.removeLabPanel(that.state.selectedTest[key].id)} type={\"danger\"} shape=\"circle\"\n                        size=\"small\"/></p>): null}</div>\n                    </Form.Item>\n                    \n                    <Form.Item  label={(<span>Panel Cost</span>)} {...formItemLayout}>\n                        {getFieldDecorator('cost', {\n                            initialValue:TotalCost,\n                            // onChange:this.onChangeHandler,\n                            \n                        })(\n                            <InputNumber/>\n                           \n                        )}\n                         <span className=\"ant-form-text\"> Total : {typeof TotalCost === 'number'  ? TotalCost : 0}</span>\n                    </Form.Item>\n\n                    <Form.Item>\n                        <Button type=\"primary\" htmlType=\"submit\">Submit</Button>\n                        &nbsp;&nbsp;&nbsp;\n                        <Button onClick={this.handleCancel}>Cancel</Button>\n                    </Form.Item>\n                </Form>\n            </Col>\n\n            \n        </Row>\n    }\n}\nexport default Form.create()(AddorEditLab);","import React from \"react\";\nimport DynamicFieldsForm from \"../../../common/DynamicFieldsForm\";\nimport {Button, Card, Divider, Form, Icon, Popconfirm, Row, Table} from \"antd\";\nimport {CHECKBOX_FIELD, INPUT_FIELD, RADIO_FIELD, SELECT_FIELD} from \"../../../../constants/dataKeys\";\nimport {Link, Route, Switch} from \"react-router-dom\";\nimport {LABPANEL_API} from \"../../../../constants/api\";\nimport {getAPI, postAPI, interpolate,} from \"../../../../utils/common\";\nimport AddorEditLabPanel from \"./AddorEditLabPanel\";\nimport CustomizedTable from \"../../../common/CustomizedTable\";\nexport default class LabPanel extends React.Component{\n    constructor(props){\n        super(props);\n        this.state = {\n            labPanel:null,\n            editTest:null,\n            selectedTest:{},\n        }\n        this.loadLabPanel = this.loadLabPanel.bind(this);\n        this.editPanels = this.editPanels.bind(this);\n    }\n    componentDidMount() {\n        this.loadLabPanel();\n    }\n\n    loadLabPanel(){\n        let that =this;\n        let successFn=function(data){\n            that.setState({\n                labPanel:data,\n                loading:false\n            })\n        };\n        let errorFn = function(){\n            that.setState({\n\n            })\n        };\n        getAPI(interpolate(LABPANEL_API, [that.props.active_practiceId]), successFn, errorFn);\n    }\n\n    editPanels(record) {\n        let that = this;\n        this.setState({\n            editTest: record,\n            loading: false\n        }, function () {\n            that.props.history.push('/settings/labs/edit');\n        })\n\n\n    }\n    deleteLabPanel(record) {\n        let that = this;\n        let reqData = {...record, is_active:false,\n            tests:Object.keys(this.state.selectedTest)\n        }\n        let successFn = function (data) {\n            that.loadLabPanel();\n        }\n        let errorFn = function () {\n        }\n        postAPI(interpolate(LABPANEL_API, [this.props.active_practiceId]), reqData, successFn, errorFn);\n    }\n\n    render() {\n        let that = this;\n        const product_margin = {}\n        if (this.state.productMargin) {\n            this.state.productMargin.forEach(function (margin) {\n                product_margin[margin.id] = (margin.name)\n            })\n        }\n        const columns = [{\n            title: 'Name',\n            dataIndex: 'name',\n            key: 'code',\n        }, {\n            title: 'Cost',\n            dataIndex: 'cost',\n            key: 'cost',\n        }, {\n            title: 'Action',\n            key: 'action',\n            render: (text, record) => (\n                <span><a onClick={() => that.editPanels(record)}>\n                Edit</a>\n                <Divider type=\"vertical\"/>\n                    <Popconfirm title=\"Are you sure delete this test?\" onConfirm={() => that.deleteLabPanel(record)}\n                                okText=\"Yes\" cancelText=\"No\">\n                        <a>Delete</a>\n                    </Popconfirm>\n              </span>\n            ),\n        }];\n\n        const subColumns =[{\n            title: 'Name',\n            dataIndex: 'name',\n            key: 'code',\n        }, {\n            title: 'Cost',\n            dataIndex: 'cost',\n            key: 'cost',\n        }, {\n            title: ' Test Instructions',\n            dataIndex: 'instruction',\n            key: 'instruction',\n        }];\n        return <Row>\n            <Route exact path={'/settings/labs/add'}\n                   render={(route) => <AddorEditLabPanel {...that.state}\n                                                    loadData={this.loadData}{...this.props} {...route}/>}/>\n            <Route exact path={'/settings/labs/edit'}\n                   render={(route) => <AddorEditLabPanel {...that.state}\n                                                    loadData={this.loadData} {...this.props} {...route}/>}/>\n            <Route exact path={'/settings/labs'}>\n                <div>\n                    <Row>\n                        <h2>\n                            <Link to=\"/settings/labs/add\">\n                                <Button type=\"primary\" style={{float: 'right'}}>\n                                    <Icon type=\"plus\"/>&nbsp;Add\n                                </Button>\n                            </Link>\n                        </h2>\n                    </Row>\n                    <CustomizedTable loading={this.state.loading} columns={columns} expandedRowRender={record => <Card><Table pagination={false} columns={subColumns} dataSource={record.tests}/></Card>} dataSource={this.state.labPanel}/>\n                </div>\n            </Route>\n\n        </Row>\n    }\n}\n\n","import React from \"react\";\nimport {Card, Tabs} from 'antd';\nimport LabTest from \"./LabTest\";\nimport LabPanel from \"./LabPanel\";\n\nconst TabPane = Tabs.TabPane;\nexport default class LabTracking extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {}\n    }\n\n    render() {\n        return <div>\n            <h2>Lab Tracking</h2>\n            <Card>\n                <Tabs>\n                    <TabPane key={\"labTests\"} tab={\"Lab Tests\"}>\n                        <LabTest {...this.props}/>\n                    </TabPane>\n                    <TabPane key={\"labPanels\"} tab={\"Lab Panels\"}>\n                        <LabPanel {...this.props}/>\n                    </TabPane>\n                </Tabs>\n            </Card>\n        </div>\n    }\n}\n","import React from \"react\";\nimport DynamicFieldsForm from \"../../../common/DynamicFieldsForm\";\nimport {Form, Card} from \"antd\";\nimport {\n    INPUT_FIELD, MULTI_SELECT_FIELD,\n    NUMBER_FIELD,\n    SELECT_FIELD,\n    SINGLE_IMAGE_UPLOAD_FIELD,\n    SUCCESS_MSG_TYPE\n} from \"../../../../constants/dataKeys\";\nimport {displayMessage, getAPI, interpolate} from \"../../../../utils/common\";\nimport {BED_PACKAGES, MEDICINE_PACKAGES, ROOM_TYPE, TAXES} from \"../../../../constants/api\";\n\nexport default class AddorEditMedicinePackages extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            editPackage: this.props.editPackage ? this.props.editPackage : null,\n            taxes: []\n        }\n    }\n\n    componentDidMount() {\n        this.loadRequiredData();\n    }\n\n    loadRequiredData = () => {\n        var that = this;\n        let successFn = function (data) {\n            that.setState({\n                taxes: data,\n            })\n        };\n        let errorFn = function () {\n        };\n        getAPI(interpolate(TAXES, [this.props.active_practiceId]), successFn, errorFn);\n\n    }\n\n    render() {\n        let that = this;\n        let MedicinePackageForm = Form.create()(DynamicFieldsForm);\n        let fields = [{\n            label: \"Package Name\",\n            key: 'name',\n            required: true,\n            initialValue: this.props.editPackage ? this.props.editPackage.name : null,\n            type: INPUT_FIELD\n        }, {\n            label: \"Image\",\n            key: 'image',\n            initialValue: this.props.editPackage ? this.props.editPackage.image : null,\n            type: SINGLE_IMAGE_UPLOAD_FIELD,\n        }, {\n            label: \"Days of Booking\",\n            key: 'no_of_days',\n            required: true,\n            initialValue: this.props.editPackage ? this.props.editPackage.no_of_days : null,\n            type: NUMBER_FIELD,\n            follow: 'INR'\n        }, {\n            label: \"Price\",\n            key: 'price',\n            required: true,\n            initialValue: this.props.editPackage ? this.props.editPackage.final_price : null,\n            type: NUMBER_FIELD,\n            follow: 'INR'\n        },\n        // {\n        //     label: \"Final Price\",\n        //     key: 'final_price',\n        //     required: true,\n        //     initialValue: this.props.editPackage ? this.props.editPackage.final_price : null,\n        //     type: NUMBER_FIELD,\n        //     follow: 'INR'\n        // },\n         {\n            label: \"Taxes\",\n            key: 'taxes',\n            initialValue: this.props.editPackage && this.props.editPackage.taxes ? this.props.editPackage.taxes.map(item => item.id) : [],\n            type: MULTI_SELECT_FIELD,\n            options: this.state.taxes.map(tax => Object.create({\n                label: tax.name + \"(\" + tax.tax_value + \"%)\",\n                value: tax.id\n            }))\n        }];\n        let formProps = {\n            method: \"post\",\n            action: interpolate(MEDICINE_PACKAGES, [this.props.active_practiceId]),\n            successFn: function () {\n                displayMessage(SUCCESS_MSG_TYPE, \"Package Saved Successfully\");\n                if (that.props.loadData)\n                    that.props.loadData();\n                that.props.history.push('/settings/medicine-packages');\n            }, errorFn: function () {\n\n            }\n        }\n        let defaultValues = [];\n        if (this.state.editPackage) {\n            defaultValues.push({key: 'id', value: this.state.editPackage.id})\n        }\n        return <div>\n            <Card>\n                <MedicinePackageForm fields={fields} formProp={formProps}\n                                     defaultValues={defaultValues}\n                                     title={this.state.editPackage ? \"Edit Medicine Package\" : \"Add Medicine Packages\"} {...this.props}/>\n            </Card>\n        </div>\n    }\n}\n","import React from \"react\";\nimport {Button, Card, Divider, Icon, Popconfirm} from 'antd';\nimport {Link, Redirect, Route, Switch} from \"react-router-dom\";\nimport CustomizedTable from \"../../../common/CustomizedTable\";\nimport {getAPI, interpolate, makeFileURL, postAPI} from \"../../../../utils/common\";\nimport {MEDICINE_PACKAGES} from \"../../../../constants/api\";\nimport AddorEditMedicinePackages from \"./AddorEditMedicinePackages\";\n\nexport default class MedicinePackages extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            loading: false,\n            packages: []\n        }\n    }\n\n    componentDidMount() {\n        this.loadData();\n    }\n\n    loadData = () => {\n        let that = this;\n        let successFn = function (data) {\n            that.setState({\n                loading: false,\n                packages: data\n            })\n        }\n        let errorFn = function () {\n            that.setState({\n                loading: false,\n            })\n        }\n        getAPI(interpolate(MEDICINE_PACKAGES, [this.props.active_practiceId]), successFn, errorFn);\n    }\n\n    deleteObject(record) {\n        let that = this;\n        let reqData = record;\n        reqData.is_active = false;\n        let successFn = function (data) {\n            that.loadData();\n        }\n        let errorFn = function () {\n        }\n        postAPI(interpolate(MEDICINE_PACKAGES, [this.props.active_practiceId]), reqData, successFn, errorFn);\n    }\n\n    editObject = (record) => {\n        this.setState({\n            editPackage: record,\n            loading: false\n        });\n        this.props.history.push('/settings/medicine-packages/edit')\n    }\n\n    render() {\n        let that = this;\n        let columns = [{\n            dataIndex: 'image',\n            key: 'image',\n            render: (value) => value ?\n                <img src={makeFileURL(value)} alt=\"\" style={{maxWidth: 200, maxHeight: 100}}/> : null\n        },{\n            title: \"Package Name\",\n            dataIndex: 'name',\n            key: 'name'\n        }, {\n            title: \"Days\",\n            dataIndex: 'no_of_days',\n            key: 'no_of_days'\n        }, {\n            title: \"Price (INR) + Tax\",\n            dataIndex: 'final_price',\n            key: 'price'\n        },\n        // {\n        //     title: \"Final Price (INR)\",\n        //     dataIndex: 'final_price',\n        //     key: 'final_price'\n        // },\n         {\n            title: 'Action',\n            key: 'action',\n            render: (text, record) => (\n                <span>\n                    <a onClick={() => this.editObject(record)}>\n                Edit</a>\n                <Divider type=\"vertical\"/>\n                  <Popconfirm title=\"Are you sure delete this item?\" onConfirm={() => that.deleteObject(record)}\n                              okText=\"Yes\" cancelText=\"No\">\n                      <a>Delete</a>\n                  </Popconfirm>\n              </span>\n            ),\n        }]\n        return <Switch>\n            <Route path={\"/settings/medicine-packages/add\"}\n                   render={(route) => <AddorEditMedicinePackages {...this.props} {...route}\n                                                                 loadData={this.loadData}/>}/>\n            <Route path={\"/settings/medicine-packages/edit\"}\n                   render={(route) => (this.state.editPackage ?\n                       <AddorEditMedicinePackages {...this.state} {...this.props} {...route}\n                                                  loadData={this.loadData}/> :\n                       <Redirect to={\"/settings/medicine-packages\"}/>)\n                   }/>\n            <Route>\n                <Card\n                    title={<h4>Medicine Packages <Link to={\"/settings/medicine-packages/add\"}><Button\n                        style={{float: 'right'}}\n                        type={\"primary\"}><Icon\n                        type={\"plus\"}/> Add</Button></Link></h4>}>\n                    <CustomizedTable dataSource={this.state.packages} loading={this.state.loading}\n                                     columns={columns}/>\n                </Card>\n            </Route>\n        </Switch>\n    }\n}\n","import React from \"react\";\nimport DynamicFieldsForm from \"../../../common/DynamicFieldsForm\";\nimport {Button, Card, Divider, Form, Modal, Popconfirm} from \"antd\";\nimport {INPUT_FIELD, NUMBER_FIELD, SUCCESS_MSG_TYPE} from \"../../../../constants/dataKeys\";\nimport {DISEASE_LIST, ROOM_TYPE} from \"../../../../constants/api\";\nimport {displayMessage, getAPI, interpolate, postAPI} from \"../../../../utils/common\";\nimport CustomizedTable from \"../../../common/CustomizedTable\";\n\nclass DiseaseList extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            redirect: false,\n            visible: false,\n            diseases: null,\n            loading: true,\n            showDeleted: false,\n            deletedLoading: false,\n            deletedRooms: [],\n            editObj: {}\n        };\n        this.loadData = this.loadData.bind(this);\n        this.deleteObject = this.deleteObject.bind(this);\n\n    }\n\n    componentDidMount() {\n        this.loadData();\n    }\n\n    loadData(deleted = false) {\n        var that = this;\n        let successFn = function (data) {\n            console.log(\"get table\");\n            if (deleted) {\n                that.setState({\n                    deletedRooms: data,\n                    deletedLoading: false\n                })\n            } else {\n                that.setState({\n                    diseases: data,\n                    loading: false\n                })\n            }\n        };\n        let errorFn = function () {\n            if (deleted) {\n                that.setState({\n                    deletedLoading: false\n                })\n            } else {\n                that.setState({\n                    loading: false\n                })\n            }\n        };\n        if (deleted) {\n            getAPI(interpolate(DISEASE_LIST, [this.props.active_practiceId]), successFn, errorFn, {\n                deleted: true,\n                practice: this.props.active_practiceId\n            });\n        } else {\n            getAPI(interpolate(DISEASE_LIST, [this.props.active_practiceId]), successFn, errorFn);\n        }\n    }\n\n    changeRedirect() {\n        var redirectVar = this.state.redirect;\n        this.setState({\n            redirect: !redirectVar,\n        });\n    }\n\n    editTax(value) {\n        this.setState({\n            editObj: value,\n            visible: true\n        })\n    }\n\n    handleCancel = () => {\n        this.setState({visible: false});\n    }\n\n    deleteObject(record, type) {\n        let that = this;\n        let reqData = record;\n        reqData.is_active = type;\n        let successFn = function (data) {\n            that.loadData();\n            if (that.state.showDeleted) {\n                that.loadData(true);\n            }\n        }\n        let errorFn = function () {\n        };\n        postAPI(interpolate(DISEASE_LIST, [this.props.active_practiceId]), reqData, successFn, errorFn)\n    }\n\n    showDeletedExpenses = () => {\n        this.setState({\n            showDeleted: true,\n            deletedLoading: true\n        });\n        this.loadData(true)\n    }\n\n    render() {\n        let that = this;\n        const columns = [{\n            title: 'Disease',\n            dataIndex: 'name',\n            key: 'name',\n        }, {\n            title: 'Action',\n            key: 'action',\n            render: (text, record) => (\n                record.is_active ? <span>\n\n              <a onClick={() => this.editTax(record)}>  Edit</a>\n                <Divider type=\"vertical\"/>\n                <Popconfirm title=\"Are you sure to delete this?\"\n                            onConfirm={() => that.deleteObject(record, false)} okText=\"Yes\" cancelText=\"No\">\n                  <a>Delete</a>\n              </Popconfirm>\n              </span> : <span>\n                    <Popconfirm title=\"Are you sure show this?\"\n                                onConfirm={() => that.deleteObject(record, true)} okText=\"Yes\" cancelText=\"No\">\n                  <a>Show</a>\n              </Popconfirm>\n                </span>\n            ),\n        }];\n        const fields = [{\n            label: \"Disease\",\n            key: \"name\",\n            required: true,\n            type: INPUT_FIELD\n        },];\n        const editfields = [{\n            label: \"Disease\",\n            key: \"name\",\n            required: true,\n            initialValue: this.state.editObj.name,\n            type: INPUT_FIELD\n        },];\n        const formProp = {\n            successFn: function (data) {\n                that.handleCancel();\n                that.loadData();\n                console.log(data);\n                console.log(\"sucess\");\n                displayMessage(SUCCESS_MSG_TYPE, \"success\");\n            },\n            errorFn: function () {\n\n            },\n            action: interpolate(DISEASE_LIST, [this.props.active_practiceId]),\n            method: \"post\",\n        }\n        const defaultValues = [{\"key\": \"practice\", \"value\": this.props.active_practiceId}];\n        const editFormDefaultValues = [{\"key\": \"practice\", \"value\": this.props.active_practiceId}, {\n            \"key\": \"id\",\n            \"value\": this.state.editObj.id\n        }];\n        const TestFormLayout = Form.create()(DynamicFieldsForm);\n        return <div>\n            <h2>Disease List</h2>\n            <Card>\n                <TestFormLayout defaultValues={defaultValues} formProp={formProp} fields={fields}/>\n                <Divider/>\n                <CustomizedTable loading={this.state.loading} columns={columns} dataSource={this.state.diseases}/>\n                {/*{this.state.showDeleted ?*/}\n                {/*<div>*/}\n                {/*<CustomizedTable loading={this.state.deletedLoading} columns={columns}*/}\n                {/*dataSource={this.state.deletedExpenses}/>*/}\n                {/*</div> :*/}\n                {/*<h4><a onClick={() => this.showDeletedExpenses()}>Show Deleted Expenses</a></h4>}*/}\n            </Card>\n            <Modal\n                visible={this.state.visible}\n                footer={null}\n                onCancel={this.handleCancel}\n            >\n\n                <TestFormLayout title=\"Edit Disease\" defaultValues={editFormDefaultValues} formProp={formProp}\n                                fields={editfields}/>\n                <Button key=\"back\" onClick={this.handleCancel}>Return</Button>,\n\n            </Modal>\n        </div>\n    }\n}\n\nexport default DiseaseList;\n","import React from \"react\";\nimport DynamicFieldsForm from \"../../../common/DynamicFieldsForm\";\nimport {Button, Modal, Card, Form, Icon, Row, Table, Divider, Popconfirm} from \"antd\";\nimport {\n    CHECKBOX_FIELD,\n    SUCCESS_MSG_TYPE,\n    INPUT_FIELD,\n    RADIO_FIELD,\n    NUMBER_FIELD,\n    SELECT_FIELD\n} from \"../../../../constants/dataKeys\";\nimport {AGENT_ROLES} from \"../../../../constants/api\"\nimport {Link} from \"react-router-dom\";\nimport {getAPI, displayMessage, interpolate, postAPI} from \"../../../../utils/common\";\n\nclass AgentRoles extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            redirect: false,\n            visible: false,\n            data: null,\n            loading:true\n        }\n        this.loadData = this.loadData.bind(this);\n        this.deleteObject = this.deleteObject.bind(this);\n    }\n\n    componentDidMount() {\n        this.loadData();\n    }\n\n    loadData() {\n        var that = this;\n        let successFn = function (data) {\n            that.setState({\n                data: data,\n                loading:false\n            })\n        };\n        let errorFn = function () {\n            that.setState({\n                loading:false\n            })\n        };\n        getAPI(interpolate(AGENT_ROLES, [this.props.active_practiceId]), successFn, errorFn);\n    }\n\n    changeRedirect() {\n        var redirectVar = this.state.redirect;\n        this.setState({\n            redirect: !redirectVar,\n        });\n    }\n\n    editFunction(value) {\n        this.setState({\n            editingId: value.id,\n            editingName: value.name,\n            visible: true,\n            loading:false\n        })\n    }\n\n    handleCancel = () => {\n        this.setState({visible: false});\n    }\n\n    deleteObject(record) {\n        let that = this;\n        let reqData = record;\n        reqData.is_active = false;\n        let successFn = function (data) {\n            that.loadData();\n        }\n        let errorFn = function () {\n        };\n        postAPI(interpolate(AGENT_ROLES, [this.props.active_practiceId]), reqData, successFn, errorFn)\n    }\n\n    render() {\n        let that = this;\n        const columns = [{\n            title: 'Name',\n            dataIndex: 'name',\n            key: 'name',\n        }, {\n            title: 'Action',\n            key: 'action',\n            render: (text, record) => (\n                <span>\n              <a onClick={() => this.editFunction(record)}>  Edit</a>\n                {/* <Divider type=\"vertical\"/>\n                    <Popconfirm title=\"Are you sure delete this item?\"\n                                onConfirm={() => that.deleteObject(record)} okText=\"Yes\" cancelText=\"No\">\n                      <a>Delete</a>\n                  </Popconfirm> */}\n              </span>\n            ),\n        }];\n        const fields = [{\n            label:\"Role Name\",\n            key: \"name\",\n            placeholder:\"Advisor roles\",\n            required: true,\n            type: INPUT_FIELD\n        },];\n        const editfields = [{\n            label:\"Role Name\",\n            key: \"name\",\n            required: true,\n            initialValue: this.state.editingName,\n            type: INPUT_FIELD\n        }];\n        const formProp = {\n            successFn: function (data) {\n                that.handleCancel();\n                that.loadData();\n                console.log(\"sucess\");\n                displayMessage(SUCCESS_MSG_TYPE, \"success\")\n\n            },\n            errorFn: function () {\n\n            },\n            action: interpolate(AGENT_ROLES, [this.props.active_practiceId]),\n            method: \"post\",\n        };\n        const defaultValues = [{\"key\": \"practice\", \"value\": this.props.active_practiceId}]\n        const editFormDefaultValues = [{\"key\": \"practice\", \"value\": this.props.active_practiceId}, {\n            \"key\": \"id\",\n            \"value\": this.state.editingId\n        }]\n\n        const TestFormLayout = Form.create()(DynamicFieldsForm);\n        return <Card title='Add Advisor Roles'>\n            <TestFormLayout defaultValues={defaultValues} formProp={formProp} fields={fields}/>\n            <Divider/>\n            <Table loading={this.state.loading} columns={columns} dataSource={this.state.data}/>\n            <Modal\n                title={\"Edit Advisor Roles\"}\n                visible={this.state.visible}\n                footer={null}\n                onCancel={this.handleCancel}>\n                <TestFormLayout defaultValues={editFormDefaultValues} formProp={formProp} fields={editfields} />\n                <Button key=\"back\" onClick={this.handleCancel}>Return</Button>\n            </Modal>\n        </Card>\n    }\n}\n\nexport default AgentRoles;\n","import React from \"react\";\nimport {\n    AutoComplete,\n    Avatar,\n    Button,\n    Card,\n    Icon,\n    Form,\n    Input,\n    Upload,\n    List,\n    Select,\n    Spin, message,\n} from 'antd';\nimport {REQUIRED_FIELD_MESSAGE} from \"../../../../constants/messages\";\nimport {SUCCESS_MSG_TYPE} from \"../../../../constants/dataKeys\";\nimport {\n    PATIENTS_LIST,\n    SEARCH_PATIENT,\n    PATIENT_PROFILE, AGENT_ROLES, FILE_UPLOAD_API,\n} from \"../../../../constants/api\"\nimport {displayMessage, getAPI, interpolate, makeFileURL, makeURL, postAPI, putAPI} from \"../../../../utils/common\";\nimport {hideMobile} from \"../../../../utils/permissionUtils\";\n\nconst FormItem = Form.Item;\nconst {Meta} = Card;\n\nclass AddOrEditAgent extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            redirect: false,\n            saving: false,\n            userListData: [],\n            agentRoles: [],\n\n\n        }\n        this.changeRedirect = this.changeRedirect.bind(this);\n        this.getPatient = this.getPatient.bind(this);\n        this.searchPatient = this.searchPatient.bind(this);\n        this.loadAgentRoles = this.loadAgentRoles.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n    }\n\n    componentDidMount() {\n        this.getPatient();\n        this.loadAgentRoles();\n    }\n\n\n    getPatient() {\n        let that = this;\n\n        let successFn = function (data) {\n            that.setState({\n                userListData: data.results,\n            })\n        };\n        let errorFn = function () {\n\n        };\n        getAPI(PATIENTS_LIST, successFn, errorFn);\n    }\n\n    loadAgentRoles() {\n        let that = this;\n        let successFn = function (data) {\n            that.setState({\n                agentRoles: data,\n                loading: false\n            })\n        };\n        let errorFn = function () {\n            that.setState({\n                loading: false\n            })\n        };\n        getAPI(AGENT_ROLES, successFn, errorFn);\n\n    }\n\n    changeRedirect() {\n        var redirectVar = this.state.redirect;\n        this.setState({\n            redirect: !redirectVar,\n        });\n    }\n\n    searchPatient(value) {\n        let that = this;\n        let successFn = function (data) {\n            if (data) {\n                that.setState({\n                    userListData: data.results\n                })\n\n            }\n        };\n        let errorFn = function () {\n        };\n        if (value){\n            getAPI(interpolate(SEARCH_PATIENT, [value]), successFn, errorFn);\n        }\n\n    }\n\n    handleSubmit = (e) => {\n        let that = this;\n        e.preventDefault();\n        this.props.form.validateFields((err, values) => {\n            if (!err) {\n                that.setState({\n                    saving: true\n                });\n\n                let reqData = {\n                    user: {},\n                    referal: values.referal,\n                    role: values.role,\n                    is_agent: true,\n                    aadhar_upload: values.aadhar_upload && values.aadhar_upload.file && values.aadhar_upload.file.response ? values.aadhar_upload.file.response.image_path : values.aadhar_upload,\n                    is_approved: true,\n                    practice: this.props.active_practiceId\n                };\n                if (this.props.editAgentData || !reqData.referal) {\n                    delete reqData.referal;\n                }\n                if (!this.state.userDetails) {\n                    reqData.user.first_name = values.first_name;\n                    reqData.user.email = values.email;\n                    reqData.user.mobile = values.mobile;\n                } else {\n                    reqData.user = this.state.userDetails.user;\n                }\n                let successFn = function (data) {\n                    that.setState({\n                        saving: false\n                    });\n                    if (that.props.loadData)\n                        that.props.loadData();\n                    if (that.props.history)\n                        that.props.history.goBack();\n\n                    if (data) {\n                        displayMessage(SUCCESS_MSG_TYPE, \"Agent Created Successfully\");\n                    }\n                };\n                let errorFn = function () {\n                    that.setState({\n                        saving: false\n                    });\n                };\n\n                if (this.state.userDetails) {\n                    putAPI(interpolate(PATIENT_PROFILE, [this.state.userDetails.id]), reqData, successFn, errorFn);\n                } else if (this.props.editAgentData) {\n                    putAPI(interpolate(PATIENT_PROFILE, [this.props.editAgentData.id]), reqData, successFn, errorFn);\n                } else {\n                    postAPI(interpolate(PATIENTS_LIST, [this.props.active_practiceId]), reqData, successFn, errorFn);\n                }\n            }\n        });\n\n    }\n    handlePatientSelect = (event) => {\n        if (event) {\n            let that = this;\n            let successFn = function (data) {\n                that.setState({\n                    userDetails: data\n                });\n            };\n            let errorFn = function () {\n            };\n            getAPI(interpolate(PATIENT_PROFILE, [event]), successFn, errorFn);\n        }\n    }\n\n    handleClick = (e) => {\n\n        this.setState({\n            userDetails: null\n        })\n\n    }\n\n\n    render() {\n        const that = this;\n        const formItemLayout = (this.props.formLayout ? this.props.formLayout : {\n            labelCol: {span: 6},\n            wrapperCol: {span: 14},\n        });\n        const formPatients = (this.props.formLayout ? this.props.formLayout : {\n            wrapperCol: {offset: 6, span: 14},\n        });\n        const {getFieldDecorator} = this.props.form;\n        const singleUploadprops = {\n            name: 'image',\n            data: {\n                name: 'hello'\n            },\n            action: makeURL(FILE_UPLOAD_API),\n            headers: {\n                authorization: 'authorization-text',\n            },\n            onChange(info) {\n                if (info.file.status !== 'uploading') {\n                    console.log(info.file, info.fileList);\n                }\n                if (info.file.status === 'done') {\n                    message.success(`${info.file.name} file uploaded successfully`);\n                } else if (info.file.status === 'error') {\n                    message.error(`${info.file.name} file upload failed.`);\n                }\n            },\n        };\n        return <Card>\n            <Spin spinning={this.state.saving}>\n                <Form onSubmit={this.handleSubmit}>\n                    {this.props.title ? <h2>{this.props.title}</h2> : null}\n\n                    {that.state.userDetails ?\n                        <FormItem key=\"id\" value={this.state.userDetails.id} {...formPatients}>\n                            <Card bordered={false} style={{background: '#ECECEC'}}>\n                                <Meta\n                                    avatar={(this.state.userDetails.image ? <Avatar src={makeFileURL(this.state.userDetails.image)}/> :\n                                        <Avatar style={{backgroundColor: '#87d068'}}>\n                                            {this.state.userDetails.user.first_name ? this.state.userDetails.user.first_name.charAt(0) :\n                                                <Icon type=\"user\"/>}\n                                        </Avatar>)}\n                                    title={this.state.userDetails.user.first_name}\n                                    description={\n                                        <span>{that.props.activePracticePermissions.PatientPhoneNumber ? this.state.userDetails.user.mobile : hideMobile(this.state.userDetails.user.mobile)}<br/>\n                                    <Button type=\"primary\" style={{float: 'right'}} onClick={this.handleClick}>Select Different</Button>\n                                    </span>}\n                                />\n\n\n                            </Card>\n                        </FormItem>\n                        : <div>\n                            <FormItem key=\"name\" label=\"Advisor Name\"  {...formItemLayout}>\n                                {getFieldDecorator(\"first_name\", {\n                                    initialValue: that.props.editAgentData ? that.props.editAgentData.user.first_name : ''\n                                })(\n                                    <AutoComplete placeholder=\"Advisor Name\"\n                                                  showSearch\n                                                  disabled={that.props.editAgentData?true:false}\n                                                  onSearch={this.searchPatient}\n                                                  defaultActiveFirstOption={false}\n                                                  showArrow={false}\n                                                  filterOption={false}\n                                                  onSelect={this.handlePatientSelect}>\n                                        {this.state.userListData.map((option) => <AutoComplete.Option\n                                            value={option.id.toString()}>\n                                            <List.Item style={{padding: 0}}>\n                                                <List.Item.Meta\n                                                    avatar={(option.image ? <Avatar src={makeFileURL(option.image)}/> :\n                                                        <Avatar style={{backgroundColor: '#87d068'}}>\n                                                            {option.user.first_name ? option.user.first_name.charAt(0) :\n                                                                <Icon type=\"user\"/>}\n                                                        </Avatar>)}\n                                                    title={option.user.first_name + \" (ID:\" + (option.custom_id?option.custom_id:option.user.id) + \")\"}\n                                                    description={that.props.activePracticePermissions.PatientPhoneNumber ? option.user.mobile : hideMobile(option.user.mobile)}\n\n                                                />\n                                            </List.Item>\n                                        </AutoComplete.Option>)}\n                                    </AutoComplete>\n                                )}\n                            </FormItem>\n                            <FormItem key=\"mobile\" label=\"Mobile Number\"   {...formItemLayout}>\n                                {getFieldDecorator(\"mobile\", {\n                                    initialValue: that.props.editAgentData ? that.props.editAgentData.user.mobile : null,\n                                    rules: [{required: true, message: REQUIRED_FIELD_MESSAGE}],\n                                })(\n                                    <Input placeholder=\"Mobile Number\" disabled={that.props.editAgentData?true:false}/>\n                                )}\n                            </FormItem>\n                            <FormItem key=\"email\" label=\"Email Address\"  {...formItemLayout}>\n                                {getFieldDecorator(\"email\", {\n                                    initialValue: that.props.editAgentData ? that.props.editAgentData.user.email : null,\n                                    rules: [{type: 'email', message: 'The input is not valid E-mail!'},\n                                        {required: true, message: REQUIRED_FIELD_MESSAGE}],\n                                })(\n                                    <Input placeholder=\"Email Address\" disabled={that.props.editAgentData?true:false}/>\n                                )}\n                            </FormItem>\n                            {this.state.editAgentData ? null :\n                                <FormItem key=\"referal\" label=\"Referer Code\"  {...formItemLayout}>\n                                    {getFieldDecorator(\"referal\", {\n                                        initialValue: that.props.editAgentData ? that.props.editAgentData.user.referer : null,\n\n                                    })(\n                                        <Input placeholder=\"Referer Code\" disabled={that.props.editAgentData?true:false}/>\n                                    )}\n                                </FormItem>}\n\n                        </div>}\n\n                    <FormItem key=\"role\" {...formItemLayout} label=\"Role Type\">\n                        {getFieldDecorator(\"role\", {initialValue: that.props.editAgentData && that.props.editAgentData.role ? that.props.editAgentData.role : null}, {\n                            rules: [{required: true, message: REQUIRED_FIELD_MESSAGE}],\n                        })(\n                            <Select>\n                                {this.state.agentRoles.map((option) => <Select.Option\n                                    value={option.id}>{option.name}</Select.Option>)}\n                            </Select>\n                        )}\n                    </FormItem>\n                    <FormItem label={\"Document Upload\"} {...formItemLayout}>\n                        {getFieldDecorator(\"aadhar_upload\",{initialValue: that.props.editAgentData && that.props.editAgentData.aadhar_upload ? that.props.editAgentData.aadhar_upload : null,\n                            rules: [{required: true, message: REQUIRED_FIELD_MESSAGE}],\n                            valuePropName: \"aadhar_upload\",\n                        })(\n                            <Upload {...singleUploadprops}>\n                                <Button>\n                                    <Icon type=\"upload\"/> Click to Upload\n                                </Button>\n                                {that.props.editAgentData && that.props.editAgentData.aadhar_upload ?\n                                    <img src={makeFileURL(that.props.editAgentData.aadhar_upload)}\n                                         style={{maxWidth: '100%'}}/> : null}\n                            </Upload>\n                        )}\n                    </FormItem>\n\n                    <FormItem {...formItemLayout}>\n                        <Button type=\"primary\" htmlType=\"submit\" style={{margin: 5}}>\n                            Submit\n                        </Button>\n                        {that.props.history ?\n                            <Button style={{margin: 5}} onClick={() => that.props.history.goBack()}>\n                                Cancel\n                            </Button> : null}\n                    </FormItem>\n                </Form>\n            </Spin>\n        </Card>\n    }\n}\n\nexport default Form.create()(AddOrEditAgent)\n","import React from \"react\";\nimport {Button, Modal, Card, Form, Icon, Row, Table, Divider, Popconfirm, Tag, Select, Col} from \"antd\";\nimport {\n    SUCCESS_MSG_TYPE,\n    INPUT_FIELD, WARNING_MSG_TYPE, NUMBER_FIELD, DATE_PICKER,\n} from \"../../../../constants/dataKeys\";\nimport {AGENT_ROLES, ALL_PRACTICE, PATIENT_PROFILE, PATIENTS_LIST, WALLET_LEDGER} from \"../../../../constants/api\"\nimport {Link, Route, Switch} from \"react-router-dom\";\nimport {getAPI, displayMessage, interpolate, postAPI, putAPI, makeFileURL} from \"../../../../utils/common\";\nimport AddOrEditAgent from \"./AddOrEditAgent\";\nimport CustomizedTable from \"../../../common/CustomizedTable\";\nimport InfiniteFeedLoaderButton from \"../../../common/InfiniteFeedLoaderButton\";\nimport PatientWalletLedger from \"../../../patients/wallet-ledger/PatientWalletLedger\";\nimport DynamicFieldsForm from \"../../../common/DynamicFieldsForm\";\nimport moment from \"moment\";\n\n// import Col from \"antd/es/grid/col\";\n\nclass AgentRoles extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            redirect: false,\n            visible: false,\n            data: null,\n            loading: true,\n            agentRoles: [],\n            practiceList: [],\n            approved: null,\n            showAgentData: null\n        };\n        this.loadData = this.loadData.bind(this);\n        this.deleteObject = this.deleteObject.bind(this);\n        this.loadAgentRoles = this.loadAgentRoles.bind(this);\n    }\n\n    componentDidMount() {\n        this.loadData();\n        this.loadAgentRoles();\n    }\n\n    loadAgentRoles() {\n        let that = this;\n        let successFn = function (data) {\n            that.setState({\n                agentRoles: data,\n            })\n        };\n        let errorFn = function () {\n        };\n        getAPI(AGENT_ROLES, successFn, errorFn);\n\n    }\n\n    loadData(page = 1) {\n        var that = this;\n        this.setState({\n            loading: true\n        })\n        let successFn = function (data) {\n            if (data.current == 1) {\n                that.setState({\n                    data: data.results,\n                    total: data.count,\n                    nextPage: data.next,\n                    loading: false\n                })\n            } else {\n                that.setState(function (prevState) {\n                    return {\n                        data: [...prevState.data, ...data.results],\n                        total: data.count,\n                        nextPage: data.next,\n                        loading: false\n                    }\n                })\n            }\n        };\n        let errorFn = function () {\n            that.setState({\n                loading: false\n            })\n        };\n        let apiParams = {\n            agent: true,\n            page\n        }\n        if (that.state.role)\n            apiParams.role = that.state.role;\n        if (that.state.approved != null) {\n            apiParams.approved = !!that.state.approved;\n        }\n        apiParams.practice = this.props.active_practiceId;\n\n        getAPI(PATIENTS_LIST, successFn, errorFn, apiParams);\n    }\n\n    changeRedirect() {\n        var redirectVar = this.state.redirect;\n        this.setState({\n            redirect: !redirectVar,\n        });\n    }\n\n    handleCancel = () => {\n        this.setState({visible: false});\n    }\n\n    editObject(record) {\n        this.setState({\n            editAgentData: record,\n            loading: false\n        });\n\n        this.props.history.push('/settings/agents/' + record.id + '/edit')\n\n    }\n\n    showWallet = (record) => {\n        this.setState({\n            showAgentData: record,\n        });\n    }\n    payAgentModal = (record) => {\n        this.setState({\n            payAgentData: record,\n        });\n    }\n\n    deleteObject(record) {\n        let that = this;\n        let reqData = {'id': record.id, is_agent: false}\n        let successFn = function (data) {\n            that.setState({\n                loading: false,\n            })\n            that.loadData();\n        }\n        let errorFn = function () {\n        };\n        putAPI(interpolate(PATIENT_PROFILE, [record.id]), reqData, successFn, errorFn)\n    }\n\n    approveAgent = (record) => {\n        let that = this;\n\n        let reqData = {'id': record.id, is_approved: true};\n        let successFn = function (data) {\n            displayMessage(SUCCESS_MSG_TYPE, \"Agent Approved Successfully!\");\n            that.setState(function (prevState) {\n                let agentList = [];\n                prevState.data.forEach(function (agent) {\n                    if (agent.id == record.id) {\n                        agent.is_approved = true\n                    }\n                    agentList.push(agent);\n                });\n                return {\n                    data: agentList,\n                    approvalLoading: false\n                }\n            })\n        }\n        let errorFn = function () {\n            that.setState({\n                approvalLoading: false\n            })\n        };\n        if (record.role) {\n            that.setState({\n                approvalLoading: true\n            })\n            putAPI(interpolate(PATIENT_PROFILE, [record.id]), reqData, successFn, errorFn)\n        } else {\n            displayMessage(WARNING_MSG_TYPE, \"Kindly assign the role before approving!\")\n        }\n    }\n    // handleChange=(key,value)=>{\n    //     console.log(\"type\",key,value)\n    //     this.props.form.setFieldsValue({\n    //         [key]: value,\n    //     });\n    // }\n    handleSubmit = (e) => {\n        let that = this;\n        e.preventDefault();\n        this.props.form.validateFieldsAndScroll((err, values) => {\n\n            if (!err) {\n                that.setState({\n                    role: values.role,\n                    approved: values.approved,\n                }, function () {\n                    that.loadData();\n                })\n            }\n        })\n    }\n\n\n    render() {\n        let that = this;\n        let i = 1;\n        const {getFieldDecorator} = this.props.form;\n        const columns = [{\n            title: 'S. No',\n            key: 'sno',\n            dataIndex: 'sno',\n            render: (item, record) => <span> {i++}</span>,\n            export: (item, record, index) => index + 1,\n        }, {\n            title: 'Name',\n            dataIndex: 'user.first_name',\n            key: 'name',\n            render: (value, record) => <Link to={\"/patient/\" + record.id + \"/profile\"}>{value}</Link>,\n            export: (item, record) => (record.user.first_name),\n        }, {\n            title: 'Email',\n            dataIndex: 'user.email',\n            key: 'email',\n            export: (item, record) => (record.user.email),\n        }, {\n            title: 'Mobile',\n            dataIndex: 'user.mobile',\n            key: 'mobile',\n            export: (item, record) => (record.user.mobile),\n        }, {\n            title: 'Referrer',\n            dataIndex: 'user.referer_data.referer.first_name',\n            key: 'referrer',\n            render: (value, record) => (value && record.user.referer_data.patient ?\n                <Link to={\"/patient/\" + record.user.referer_data.patient + \"/profile\"}>{value}</Link> : '--'),\n            export: (item, record) => (record.user.referer ? record.user.referer_data.referer.first_name : '--'),\n        }, {\n            title: 'Role',\n            dataIndex: 'role_data.name',\n            key: 'role_data',\n            export: (item, record) => (record.role_data.name),\n        }, {\n            title: 'Aadhar',\n            dataIndex: 'aadhar_id',\n            key: 'aadhar_id',\n            export: (value) => (value),\n        }, {\n            title: 'Document',\n            dataIndex: 'aadhar_upload',\n            key: 'aadhar_upload',\n            hideExport: true,\n            render: (value) => (value ? <a target=\"_blank\" href={makeFileURL(value)}>Open Document</a> : '--')\n        }, {\n            title: 'Status',\n            dataIndex: 'is_approved',\n            key: 'is_approved',\n            render: (value, record) => (\n                value ? <Tag color=\"#87d068\">Approved</Tag> : <Popconfirm\n                    title=\"Are you sure approve this Advisor?\"\n                    onConfirm={() => that.approveAgent(record)}\n                    okText=\"Yes\"\n                    cancelText=\"No\"\n                >\n                    <a href=\"#\" disabled={that.state.approvalLoading}>Approve</a>\n                </Popconfirm>\n            )\n        }, {\n            title: 'Action',\n            key: 'action',\n            hideExport: true,\n            render: (text, record) => (\n                <span>\n                     <a onClick={() => this.showWallet(record)}>  Wallet</a>\n                    <Divider type=\"vertical\"/>\n              <a onClick={() => this.payAgentModal(record)}>  Pay Out</a>\n                    <Divider type=\"vertical\"/>\n              <a onClick={() => this.editObject(record)}>  Edit</a>\n                <Divider type=\"vertical\"/>\n                    <Popconfirm title=\"Are you sure delete this item?\"\n                                onConfirm={() => that.deleteObject(record)} okText=\"Yes\" cancelText=\"No\">\n                      <a>Delete</a>\n                  </Popconfirm>\n              </span>\n            ),\n        }];\n        const status = [\n            {label: 'Approved', value: true},\n            {label: 'Pending', value: false},\n            {label: 'All', value: null}\n        ];\n        const PayAgentForm = Form.create()(DynamicFieldsForm);\n        return <Switch>\n            <Route exact path={\"/settings/agents/add\"}\n                   render={(route) => <AddOrEditAgent  {...this.props} title={\"Create Advisor\"}\n                                                       loadData={this.loadData}/>}/>\n\n            <Route exact path={\"/settings/agents/:id/edit\"}\n                   render={(route) => <AddOrEditAgent  {...this.props} {...this.state} title={\"Edit Advisor\"}\n                                                       loadData={this.loadData}/>}/>\n            <Route>\n                <Card title={<h4>Advisor <Link to={\"/settings/agents/add\"}>\n                    <Button style={{float: 'right'}} type={\"primary\"}><Icon type={\"plus\"}/>\n                        Add</Button></Link></h4>}>\n                    <Row>\n                        <Col style={{float: \"right\"}}>\n                            <Form layout=\"inline\" onSubmit={this.handleSubmit}>\n                                <Form.Item key=\"role\" label=\"Advisor Role\">\n                                    {getFieldDecorator(\"role\", {initialValue: this.state.agentRoles ? this.state.agentRoles.id : ''},\n                                    )(\n                                        <Select placeholder=\"Advisor Role\" style={{minWidth: 150}} allowClear={true}>\n                                            {this.state.agentRoles.map((option) => <Select.Option\n                                                value={option.id}>{option.name}</Select.Option>)}\n                                        </Select>\n                                    )}\n                                </Form.Item>\n\n                                <Form.Item key=\"approved\" label=\"Status\">\n                                    {getFieldDecorator(\"approved\", {initialValue: this.state.approved ? this.state.approved : null},\n                                    )(\n                                        <Select placeholder=\"status\" style={{minWidth: 150}}>\n                                            {status.map(item => <Select.Option\n                                                value={item.value}>\n                                                {item.label}\n                                            </Select.Option>)}\n                                        </Select>\n                                    )}\n                                </Form.Item>\n\n                                <Form.Item>\n                                    <Button type=\"primary\" htmlType=\"submit\" style={{margin: 5}}>\n                                        Submit\n                                    </Button>\n                                </Form.Item>\n                            </Form>\n                        </Col>\n                    </Row>\n\n                    <CustomizedTable loading={this.state.loading} columns={columns} dataSource={this.state.data}\n                                     pagination={false}/>\n                    <InfiniteFeedLoaderButton loading={this.state.loading}\n                                              loaderFunction={() => that.loadData(that.state.nextPage)}\n                                              hidden={!this.state.nextPage}/>\n                    <Modal visible={this.state.showAgentData}\n                           closable={false}\n                           centered\n                           width={1000}\n                           footer={null}\n                           style={{top: 60}}>\n                        <Button type=\"primary\"\n                                style={{position: 'absolute', top: '-50px'}}\n                                onClick={() => this.payAgentModal(this.state.showAgentData)}>Pay Out</Button>\n                        <Button icon=\"close\" type=\"danger\" shape=\"circle\"\n                                style={{position: 'absolute', top: '-50px', right: 0}}\n                                onClick={() => this.showWallet(null)}/>\n                        {this.state.showAgentData ?\n                            <PatientWalletLedger currentPatient={this.state.showAgentData}\n                                                 key={this.state.showAgentData ? this.state.showAgentData.id + this.state.payAgentData : null}/> : null}\n                    </Modal>\n                    <Modal visible={this.state.payAgentData}\n                           closable={false}\n                           centered\n                           footer={null}\n                           closeIcon={null}\n                           style={{top: 60}}>\n                        <Button icon=\"close\" type=\"danger\" shape=\"circle\"\n                                style={{position: 'absolute', top: '-50px', right: 0}}\n                                onClick={() => this.payAgentModal(null)}/>\n                        {this.state.payAgentData ? <div>\n                            <h2>Pay {this.state.payAgentData.user.first_name}</h2>\n                            <PayAgentForm formProp={{\n                                method: 'post',\n                                action: WALLET_LEDGER,\n                                successFn: function () {\n                                    that.payAgentModal(null)\n                                },\n                                errorFn: function () {\n\n                                },\n                                confirm: true,\n                                confirmText: \"Are you sure to pay out this advisor?\"\n                            }}\n                                          fields={[{\n                                              label: 'Amount',\n                                              key: 'amount',\n                                              type: NUMBER_FIELD,\n                                              required: true,\n                                              follow: 'INR'\n                                          }, {\n                                              label: 'Date',\n                                              key: 'date',\n                                              type: DATE_PICKER,\n                                              required: true,\n                                              format: 'YYYY-MM-DD',\n                                              initialValue: moment()\n                                          }, {\n                                              label: 'Comments',\n                                              key: 'comments',\n                                              type: INPUT_FIELD,\n                                              required: true,\n                                              extra: 'Comments for this transaction'\n                                          }]} defaultValues={[{\n                                key: 'ledger_type',\n                                value: 'Payout',\n                            }, {\n                                key: 'amount_type',\n                                value: 'Non Refundable',\n                            }, {\n                                key: 'practice',\n                                value: this.props.active_practiceId\n                            }, {\n                                key: 'is_mlm',\n                                value: false\n                            }, {\n                                key: 'is_cancelled',\n                                value: false\n                            }, {\n                                key: 'patient',\n                                value: this.state.payAgentData.id\n                            }, {\n                                key: 'staff',\n                                value: this.props.user.id\n                            }]}/>\n                        </div> : null}\n                    </Modal>\n                </Card>\n            </Route>\n\n        </Switch>\n\n\n    }\n}\n\nexport default Form.create()(AgentRoles);\n","import React from \"react\";\nimport {Card, Form, Row} from \"antd\";\nimport {Redirect, Route} from \"react-router\";\nimport DynamicFieldsForm from \"../../../common/DynamicFieldsForm\";\nimport {displayMessage, getAPI, interpolate} from \"../../../../utils/common\";\nimport {INPUT_FIELD, SUCCESS_MSG_TYPE} from \"../../../../constants/dataKeys\";\nimport {MEETING_USER, SINGLE_POST} from \"../../../../constants/api\";\nexport default class AddOrEditZoomUser extends React.Component{\n    constructor(props){\n        super(props);\n        this.state={\n        };\n\n        this.loadData = this.loadData.bind(this);\n    }\n\n    componentWillMount() {\n        let that=this;\n        if (that.props.match.params.id){\n            this.loadData();\n        }\n    }\n\n    changeRedirect(){\n        var redirectVar=this.state.redirect;\n        this.setState({\n            redirect:  !redirectVar,\n        })  ;\n    }\n\n    loadData(){\n        let that =this;\n        let successFn = function (data) {\n            that.setState({\n                editZoomData:data[0],\n            })\n        };\n        let errorFn = function () {\n\n        };\n        let reqData={\n            id:that.props.match.params.id\n        };\n        getAPI(MEETING_USER ,successFn, errorFn,reqData);\n\n\n    }\n\n    render() {\n        let that=this;\n        const fields=[{\n            label:'User Name',\n            key:'username',\n            type:INPUT_FIELD,\n            initialValue:that.state.editZoomData?that.state.editZoomData.username:'',\n        },{\n            label: 'API key',\n            key:'API_Key',\n            type: INPUT_FIELD,\n            initialValue:this.state.editZoomData?this.state.editZoomData.API_Key:'',\n        },{\n            label:'API Secret',\n            key:'API_Secret',\n            type:INPUT_FIELD,\n            initialValue:this.state.editZoomData?this.state.editZoomData.API_Secret:'',\n        }];\n        const TestFormLayout = Form.create()(DynamicFieldsForm);\n        let editformProp;\n\n        if(this.state.editZoomData) {\n            editformProp = {\n                successFn: function (data) {\n                    displayMessage(SUCCESS_MSG_TYPE, \"success\");\n                    that.setState({\n                        redirect: true\n                    });\n                    that.props.loadData();\n                },\n                errorFn: function () {\n\n                },\n                action: interpolate(MEETING_USER, [this.props.match.params.id]),\n                method: \"post\",\n\n            }\n        }\n\n        const formProp = {\n            successFn: function (data) {\n                displayMessage(SUCCESS_MSG_TYPE, \"success\")\n\n                that.setState({\n                    redirect: true\n                });\n                that.props.loadData();\n            },\n            errorFn: function () {\n\n            },\n            action:MEETING_USER,\n            method: \"post\",\n        };\n        let defaultValues=[{key:'id',value:this.props.match.params.id}];\n        return <Row>\n            <Card>\n                <Route exact path='/settings/zoom-user/edit/:id'\n                       render={() =>(this.props.match.params.id? <TestFormLayout title=\"Edit Zoom User\" defaultValues={defaultValues} changeRedirect= {this.changeRedirect}\n                                                     formProp={editformProp} fields={fields}/>: <Redirect to={'/settings/zoom-user'} />)}/>\n\n                <Route exact path='/settings/zoom-user/add'\n                       render={() => <TestFormLayout title=\"Add Zoom User\" changeRedirect= {this.changeRedirect}\n                                                     formProp={formProp} fields={fields}/>}/>\n\n            </Card>\n            {this.state.redirect&&    <Redirect to={'/settings/zoom-user'} />}\n        </Row>\n    }\n}\n","import React from \"react\";\nimport {Route, Switch} from \"react-router\";\nimport {Button, Card, Divider, Icon, Popconfirm, Table} from \"antd\";\nimport {Link} from \"react-router-dom\";\nimport AddOrEditZoomUser from \"./AddOrEditZoomUser\";\nimport {getAPI, interpolate, patchAPI, postAPI} from \"../../../../utils/common\";\nimport {MEETING_USER, SINGLE_POST} from \"../../../../constants/api\";\nexport default class ZoomUser extends React.Component{\n    constructor(props){\n        super(props);\n        this.state={\n            loading:true,\n        }\n        this.loadData = this.loadData.bind(this);\n    }\n    componentWillMount() {\n        this.loadData();\n    }\n\n    loadData(){\n        let that=this;\n        let successFn=function (data) {\n            that.setState({\n                zoomUser:data,\n                loading:false,\n            })\n        }\n        let errorFn =function () {\n            that.setState({\n                loading:false,\n            })\n        }\n        getAPI(MEETING_USER,successFn,errorFn);\n    }\n\n    deleteObject(record) {\n        let that = this;\n        let reqData = {};\n        reqData.id=record.id;\n        reqData.is_active = false;\n        let successFn = function (data) {\n            that.loadData();\n        };\n        let errorFn = function () {\n        };\n        postAPI(interpolate(MEETING_USER, [record.id]), reqData, successFn, errorFn)\n    }\n    render() {\n        let that=this;\n            const columns=[\n                {\n                    title: 'User Name',\n                    dataIndex: 'username',\n                    key: 'username'\n                },{\n                    title: 'API Key',\n                    dataIndex: 'API_Key',\n                    key: 'API_key'\n                },{\n                    title: 'API Secret',\n                    dataIndex: 'API_Secret',\n                    key: 'API_Secret'\n                },{\n                    title: 'Actions',\n                    render: (item) => {\n                        return <div>\n                            <Link to={\"/settings/zoom-user/edit/\" + item.id}>Edit</Link>\n                            <Divider type=\"vertical\"/>\n                            <Popconfirm title=\"Are you sure delete this item?\"\n                                        onConfirm={() => that.deleteObject(item)} okText=\"Yes\" cancelText=\"No\">\n                                <a>Delete</a>\n                            </Popconfirm>\n                        </div>\n                    }\n                }\n            ];\n        return( <div>\n                <Switch>\n                    <Route exact path='/settings/zoom-user/add'\n                           render={(route) => <AddOrEditZoomUser {...this.state} {...route}  loadData={this.loadData}/>}/>\n\n                    <Route exact path={\"/settings/zoom-user/edit/:id\"} render={(route)=><AddOrEditZoomUser loadData={this.loadData}  {...route} {...this.state}/>}/>\n\n                    <Card title=\"Zoom User\" extra={\n                        <Link to=\"/settings/zoom-user/add\" ><Button type=\"primary\"><Icon type=\"plus\"/> Add Zoom User</Button></Link>\n                    }>\n\n\n                        <Table dataSource={this.state.zoomUser} columns={columns} pagination={false}/>\n                    </Card>\n                </Switch>\n            </div>\n        )\n    }\n}","import React from \"react\";\nimport PracticeDetails from \"./options/practice-detail/PracticeDetails\"\nimport {Route, Switch} from 'react-router-dom';\nimport {Layout} from \"antd\";\nimport PracticeStaff from \"./options/practice-staff/PracticeStaff\";\nimport AddEditDoctor from \"./options/practice-staff/AddEditDoctor\";\nimport AddEditStaff from \"./options/practice-staff/AddEditStaff\";\nimport AddPracticeDetails from \"./options/practice-detail/AddPracticeDetails\";\nimport CommunicationSettings from \"./options/communication-settings/CommunicationSettings\";\nimport RecentProcedure from \"./options/procedure-catalog/RecentProcedure\";\nimport AddProcedure from \"./options/procedure-catalog/AddProcedure\";\nimport BillingSettings from \"./options/billing/BillingSettings\";\nimport EMRSettings from \"./options/emr/EMRSettings\";\nimport EditPracticeDetail from \"./options/practice-detail/EditPracticeDetail\";\nimport Prescriptions from \"./options/prescriptions/Prescriptions\";\nimport ExpensesTypes from \"./options/expenses-types/ExpensesTypes\";\nimport MedicalHistory from \"./options/medical-history/MedicalHistory\";\nimport Error404 from \"../common/errors/Error404\";\nimport CalendarSettings from \"./options/calendar/CalendarSettings\"\nimport SettingSider from \"./SettingSider\";\nimport PermissionDenied from \"../common/errors/PermissionDenied\";\nimport MlmBase from \"./options/mlm/MlmBase\";\nimport Printout from \"./options/printout/Printout\";\nimport IntegrationHome from \"./options/integration/IntegrationHome\";\nimport MailPDFSettings from \"./options/mailPDF/MailPDFSettings\";\nimport BedPackages from \"./options/bed-packages/BedPackages\";\nimport RoomTypes from \"./options/roomtypes/RoomTypes\";\nimport LoyaltySettings from \"./options/loyalty/LoyaltySettings\";\nimport LabTracking from \"./options/labs/LabTracking\";\nimport MedicinePackages from \"./options/medicine-packages/MedicinePackages\";\nimport DiseaseList from \"./options/disease-list/DiseaseList\";\nimport AgentRolesList from \"./options/agent-roles/AgentRoles\";\nimport AgentsList from \"./options/agents/AgentList\";\nimport ZoomUser from \"./options/zoom-user/ZoomUser\";\n\nconst Content = Layout.Content;\n\n\nclass SettingsDash extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            collapsed: false,\n        };\n    }\n\n    render() {\n        return <Content className=\"main-container\"\n                        style={{\n                            // margin: '24px 16px',\n                            // padding: 24,\n                            minHeight: 280,\n                            // marginLeft: '200px'\n                        }}>\n            <Layout>\n                <SettingSider {...this.props}/>\n                <Content style={{\n                    margin: '24px 16px',\n                    // padding: 24,\n                    minHeight: 280,\n                    // marginLeft: '200px'\n                }}>\n                    <Switch>\n\n                            <Route exact path=\"/settings/clinics-staff/adddoctor\"\n                                   render={(route) => (this.props.activePracticePermissions.SettingsPracticeStaff || this.props.allowAllPermissions ?\n                                          <AddEditDoctor  {...this.props} {...route} /> : <PermissionDenied/>\n                                   )}/>\n                            <Route exact path=\"/settings/clinics-staff/:doctorid/edit\"\n                                   render={(route) => (this.props.activePracticePermissions.SettingsPracticeStaff || this.props.allowAllPermissions ?\n                                          <AddEditDoctor  {...this.props} {...route} /> : <PermissionDenied/>\n                                   )}/>\n\n                            <Route exact path=\"/settings/clinics-staff/addstaff\"\n                                   render={(route) => (this.props.activePracticePermissions.SettingsPracticeStaff || this.props.allowAllPermissions ?\n                                          <AddEditStaff  {...this.props} {...route} /> : <PermissionDenied/>\n                                   )}/>\n                            <Route exact path=\"/settings/clinics-staff/staff/:staffid/edit\"\n                                   render={(route) => (this.props.activePracticePermissions.SettingsPracticeStaff || this.props.allowAllPermissions ?\n                                          <AddEditStaff  {...this.props} {...route} /> : <PermissionDenied/>\n                                   )}/>\n                        <Route path=\"/settings/clinics-staff\"\n                               render={(route) => (this.props.activePracticePermissions.SettingsPracticeStaff || this.props.allowAllPermissions ?\n                                       <PracticeStaff  {...this.props} {...route} /> : <PermissionDenied/>\n                               )}/>\n                        <Route exact path=\"/settings/clinics\"\n                               render={(route) => (this.props.activePracticePermissions.SettingsPracticeDetail || this.props.allowAllPermissions ?\n                                       <PracticeDetails  {...this.props} {...route} /> : <PermissionDenied/>\n                               )}/>\n                        <Route exact path=\"/settings/clinics/add\"\n                               render={(route) => (this.props.activePracticePermissions.SettingsPracticeDetail || this.props.allowAllPermissions ?\n                                       <AddPracticeDetails  {...this.props} {...route}/> : <PermissionDenied/>\n                               )}/>\n                        <Route exact path=\"/settings/clinics/:id/edit\"\n                               render={(route) => (this.props.activePracticePermissions.SettingsPracticeDetail || this.props.allowAllPermissions ?\n                                       <EditPracticeDetail {...this.props}\n                                                           practiceId={route.match.params.id} {...route}/> :\n                                       <PermissionDenied/>\n                               )}/>\n                        <Route exact path=\"/settings/communication-settings\"\n                               render={(route) => (this.props.activePracticePermissions.SettingsCommunincations || this.props.allowAllPermissions ?\n                                       <CommunicationSettings  {...this.props} {...route}/> : <PermissionDenied/>\n                               )}/>\n                        <Route exact path=\"/settings/calendarsettings\"\n                               render={(route) => (this.props.activePracticePermissions.SettingsCalendar || this.props.allowAllPermissions ?\n                                       <CalendarSettings  {...this.props} {...route}/> : <PermissionDenied/>\n                               )}/>\n                        <Route path=\"/settings/procedures\"\n                               render={(route) => (this.props.activePracticePermissions.SettingsProcedureCatalog || this.props.allowAllPermissions ?\n                                       <RecentProcedure  {...this.props} {...route}/> : <PermissionDenied/>\n                               )}/>\n                        <Route path=\"/settings/billing\"\n                               render={(route) => (this.props.activePracticePermissions.SettingsBilling || this.props.allowAllPermissions ?\n                                       <BillingSettings  {...this.props} {...route}/> : <PermissionDenied/>\n                               )}/>\n                        <Route exact path=\"/settings/loyalty\"\n                               render={(route) => (this.props.activePracticePermissions.SettingsLoyalty || this.props.allowAllPermissions ?\n                                       <LoyaltySettings  {...this.props} /> : <PermissionDenied/>\n                               )}/>\n                        <Route path=\"/settings/emr\"\n                               render={(route) => (this.props.activePracticePermissions.SettingsEMR || this.props.allowAllPermissions ?\n                                       <EMRSettings  {...this.props} {...route}/> : <PermissionDenied/>\n                               )}/>\n                        {/*<Route exact path=\"/settings/loyalty/add\"*/}\n                        {/*render={(route) => (this.props.activePracticePermissions.SettingsLoyalty || this.props.allowAllPermissions ?*/}\n                        {/*<AddOffer  {...this.props} {...route}/> : <PermissionDenied/>*/}\n                        {/*)}/>*/}\n                        <Route path=\"/settings/prescriptions\"\n                               render={(route) => (this.props.activePracticePermissions.SettingsPrescriptions || this.props.allowAllPermissions ?\n                                       <Prescriptions  {...this.props} {...route} /> : <PermissionDenied/>\n                               )}/>\n                        <Route exact path=\"/settings/expense-types\"\n                               render={(route) => (this.props.activePracticePermissions.SettingsExpenseTypes || this.props.allowAllPermissions ?\n                                       <ExpensesTypes  {...this.props} /> : <PermissionDenied/>\n                               )}/>\n                        <Route path=\"/settings/labs\"\n                               render={(route) => (this.props.activePracticePermissions.SettingsLabs || this.props.allowAllPermissions ?\n                                       <LabTracking  {...this.props} {...route} /> : <PermissionDenied/>\n                               )}/>\n                        <Route exact path=\"/settings/medical-history\"\n                               render={(route) => (this.props.activePracticePermissions.SettingsMedicalHistory || this.props.allowAllPermissions ?\n                                       <MedicalHistory  {...this.props} /> : <PermissionDenied/>\n                               )}/>\n                        <Route path=\"/settings/agents\"\n                               render={(route) =>(this.props.activePracticePermissions.SettingsAgents || this.props.allowAllPermissions ?\n                               <AgentsList {...this.state} {...this.props} {...route} key={this.state.active_practiceId} />:<PermissionDenied/>)}/>\n\n                        <Route path=\"/settings/agent-roles\"\n                             render={(route) =>(this.props.activePracticePermissions.SettingsAgentRoles || this.props.allowAllPermissions ?\n                                   <AgentRolesList {...this.state} {...this.props} {...route} key={this.state.active_practiceId}/>:<PermissionDenied/>)\n                            }\n\n                        />\n                        <Route path=\"/settings/mlm\"\n                               render={(route) => (this.props.activePracticePermissions.SettingsMLMSettings || this.props.allowAllPermissions ?\n                                       <MlmBase {...this.state}\n                                                {...this.props}\n                                                {...route}\n                                                key={this.state.active_practiceId}/> : <PermissionDenied/>\n                               )}/>\n                        <Route path=\"/settings/printout\"\n                               render={(route) => (this.props.activePracticePermissions.SettingsPrintouts || this.props.allowAllPermissions ?\n                                   <Printout {...this.state}\n                                             {...route}\n                                             {...this.props}\n                                             key={this.state.active_practiceId}/> : <PermissionDenied/>\n                               )}/>\n                        <Route path=\"/settings/mailpdfsettings\"\n                               render={(route) => (this.props.activePracticePermissions.SettingsEmailPDFSettings || this.props.allowAllPermissions ?\n                                   <MailPDFSettings {...this.state}\n                                                    {...route}\n                                                    {...this.props}/> : <PermissionDenied/>\n                               )}/>\n                        <Route path=\"/settings/integration\"\n                               render={(route) => <IntegrationHome {...this.state}\n                                                                   {...this.props}\n                                                                   {...route}/>}/>\n                        <Route exact path=\"/settings/roomtypes\"\n                               render={(route) => (this.props.activePracticePermissions.SettingsRoomTypes || this.props.allowAllPermissions ?\n                                       <RoomTypes  {...this.props} /> : <PermissionDenied/>\n                               )}/>\n                        <Route exact path=\"/settings/diseases\"\n                               render={(route) => (this.props.activePracticePermissions.SettingsDiseaseList || this.props.allowAllPermissions ?\n                                       <DiseaseList  {...this.props} /> : <PermissionDenied/>\n                               )}/>\n                        <Route path=\"/settings/bed-packages\"\n                               render={(route) => (this.props.activePracticePermissions.SettingsBedPackages || this.props.allowAllPermissions ?\n                                   <BedPackages {...this.state}  {...this.props}  {...route}/>:<PermissionDenied/>)}/>\n                                   \n                        <Route path=\"/settings/medicine-packages\"\n                               render={(route) =>(this.props.activePracticePermissions.SettingsMedicinePackages || this.props.allowAllPermissions ?\n                                   <MedicinePackages {...this.state} {...this.props} {...route}/>:<PermissionDenied/>)}/>\n\n                        <Route path=\"/settings/zoom-user\"\n                               render={(route) =>(this.props.activePracticePermissions.SettingsMedicinePackages || this.props.allowAllPermissions ?\n                                   <ZoomUser {...this.state} {...this.props} {...route}/>:<PermissionDenied/>)}/>\n\n                        {/*<Route path=\"/zoom-user\" render={(route)=><ZoomUser  {...this.state}*/}\n                        {/*                                                     {...this.props}*/}\n                        {/*                                                     {...route}*/}\n                        {/*                                                     key={that.state.active_practiceId}/>}/>*/}\n                        <Route component={Error404}/>\n                    </Switch>\n                </Content>\n            </Layout>\n        </Content>\n    }\n}\n\nexport default SettingsDash;\n"],"sourceRoot":""}