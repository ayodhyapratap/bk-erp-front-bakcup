{"version":3,"sources":["../node_modules/ansi-colors/index.js","../node_modules/ansi-colors/symbols.js","app/components/calendar/EventComponent.js","app/utils/calendarUtils.js","app/components/calendar/CalendarRightPanel.js","app/components/calendar/CreateAppointmentForm.js","app/components/calendar/CreateAppointment.js","app/components/calendar/Calendar.js"],"names":["colors","enabled","visible","styles","keys","process","FORCE_COLOR","wrap","style","str","nl","open","close","regex","includes","replace","define","name","codes","type","RegExp","ansi","push","Reflect","defineProperty","get","color","input","stack","n","length","setPrototypeOf","this","concat","re","ansiRegex","hasColor","hasAnsi","lastIndex","test","unstyle","none","clear","noop","stripColor","symbols","require","module","exports","isWindows","platform","isLinux","windows","bullet","check","cross","ellipsis","heart","info","line","middot","minus","plus","question","questionSmall","pointer","pointerSmall","warning","other","ballotCross","questionFull","enumerable","value","EventComponent","props","placement","content","EventPatientPopover","appointmentId","event","appointment","id","key","trigger","height","title","React","Component","calendarSettingMenu","Item","to","saveCalendarSettings","settings","lockr","CALENDAR_SETTINGS","TimeSlotWrapper","flag","dayValue","moment","isValid","format","toLowerCase","filterType","selectedDoctor","calendarTimings","daysTimings","lunch","startTime","endTime","lunchEndTime","lunchStartTime","doctorTimings","showCalendarEvents","i","blockedCalendar","doctor","isBetween","block_from","block_to","children","child","Children","only","cloneElement","className","CalendarRightPanel","changeDate","option","that","setState","prevState","selectedDate","add","subtract","todaysAppointments","loading","getAPI","interpolate","APPOINTMENT_PERPRACTICE_API","active_practiceId","data","appointmentOverview","filteredAppointment","forEach","status","CANCELLED_STATUS","todaysAppointmentFilter","todaysAppointmentOverview","todaysFilteredAppointments","start","state","end","filterTodaysAppointment","changeAppointmentStatus","currentStatus","targetStatus","APPOINTMENT_API","updateAppointmentStatus","displayMessage","ERROR_MSG_TYPE","reqData","WAITING_STATUS","waiting","ENGAGED_STATUS","engaged","CHECKOUT_STATUS","checkout","putAPI","SUCCESS_MSG_TYPE","bind","overlay","block","margin","activePracticePermissions","AddWalkinAppointment","allowAllPermissions","gutter","span","onClick","SCHEDULE_STATUS","textAlign","border","borderRadius","backgroundColor","boxShadow","spinning","size","dataSource","renderItem","apppointment","padding","textDecoration","width","marginTop","borderLeft","doctors_object","calendar_colour","AppointmentCard","marginBottom","schedule_at","patient","user","first_name","float","disabled","ChangeAppointmentStatus","FormItem","TextArea","Meta","Group","CreateAppointmentForm","loadPracticeTiming","CALENDER_SETTINGS","dataObject","timing","DAY_KEYS","dayKey","visting_hour_same_week","first_start_time","second_end_time","is_two_sessions","first_end_time","second_start_time","findOutsidePracticeTiming","loadDoctorsTiming","timeToCheckBlock","DOCTOR_VISIT_TIMING_API","findOutsideDoctorTiming","setBlockedTiming","loadAppointmentList","findBlockedTiming","BLOCK_CALENDAR","blockRow","practiceBlock","doctorBlock","practice","cal_fdate","cal_tdate","slot","practiceOutsideAvailableTiming","doctorOutsideAvailableTiming","handleSubmit","e","preventDefault","form","validateFields","err","values","saving","formData","patientDetails","patient_name","email","patient_email","mobile","patient_mobile","undefined","successFn","history","goBack","loadData","errorFn","postAPI","ALL_APPOINTMENT_API","handlePatientSelect","PATIENT_PROFILE","handleClick","redirect","practice_doctors","appointmentCategories","procedure_category","treatmentNotes","practice_staff","patientListData","appointmentDetail","procedureObjectsById","changeRedirect","loadDoctors","loadProcedureCategory","loadTreatmentNotes","searchPatient","loadAppointment","loadAppointmentCategories","match","params","appointmentid","location","search","pairValueArray","substr","split","item","keyValue","PRACTICESTAFF","staff","usersdata","role","DOCTORS_ROLE","PROCEDURE_CATEGORY","obj","pagination","EMR_TREATMENTNOTES","APPOINTMENT_CATEGORIES","redirectVar","searchPatientString","SEARCH_PATIENT","current","results","apiParams","start_time","end_time","APPOINTMENT_SCHEDULE","appointmentList","formItemLayout","formLayout","labelCol","wrapperCol","formPatients","offset","getFieldDecorator","treatmentNotesOption","drug","label","categoryOptions","category","appointmentTime","Date","onSubmit","initialValue","rules","required","message","REQUIRED_FIELD_MESSAGE","showTime","use12Hours","allowClear","onChange","showIcon","min","listStyle","display","paddingLeft","paddingRight","map","marginLeft","doctor_data","bordered","background","avatar","image","src","makeFileURL","charAt","description","PatientPhoneNumber","hideMobile","placeholder","showSearch","onSearch","defaultActiveFirstOption","showArrow","filterOption","onSelect","Option","toString","custom_id","APPOINTMENT_STATUS","notes","htmlType","CreateAppointment","defaultValues","TestFormLayout","create","exact","path","render","route","localizer","momentLocalizer","DragAndDropCalendar","withDragAndDrop","BigCalendar","Content","confirm","App","changeCalendarType","calendarType","selectedCategory","changeFilter","resizeEvent","WARNING_MSG_TYPE","events","changedEvent","nextEvents","existingEvent","parseInt","refreshFilterList","onOk","onCancel","blockedCalendarTiming","onRangeChange","date","newDate","month","onSelectedDateChange","startOf","endOf","setFilterType","setFilter","stateValues","loadDoctorTiming","filteredEvent","filterCancelledAppointment","changeState","doctorTiming","visiblePopover","appointments","practice_categories","categories_object","doctorsAppointmentCount","categoriesAppointmentCount","showAppointments","getCalendarSettings","onSelectSlot","onSelectEvent","moveEvent","eventStyleGetter","loadCalendarTimings","categories","intToRGB","hashCode","doctorLoading","doctors","doctor_object","droppedOnAllDaySlot","isAllDay","idx","indexOf","allDay","updatedEvent","splice","time","action","newEvents","endtime","ALL","CANCELLED","isSelected","color_object","opacity","AddAppointment","PermissionDenied","EditAppointment","BlockCalendar","selectedKeys","textOverflow","borderRight","fontWeight","checked","defaultValue","buttonStyle","target","Button","position","bottom","zIndex","openMorePanel","paddingInlineStart","show24HourCalendar","shape","icon","defaultDate","defaultView","step","timeslots","truncateEvents","onEventDrop","onEventResize","resizable","selectable","popup","views","week","MyWeek","day","agenda","eventPropGetter","components","timeSlotWrapper","options","range","eventOffset","dates","navigate","Navigate","PREVIOUS","NEXT","toLocaleDateString"],"mappings":"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","file":"static/js/18.f17948f1.chunk.js","sourcesContent":["'use strict';\n\nconst colors = { enabled: true, visible: true, styles: {}, keys: {} };\n\nif ('FORCE_COLOR' in process.env) {\n  colors.enabled = process.env.FORCE_COLOR !== '0';\n}\n\nconst ansi = style => {\n  style.open = `\\u001b[${style.codes[0]}m`;\n  style.close = `\\u001b[${style.codes[1]}m`;\n  style.regex = new RegExp(`\\\\u001b\\\\[${style.codes[1]}m`, 'g');\n  return style;\n};\n\nconst wrap = (style, str, nl) => {\n  let { open, close, regex } = style;\n  str = open + (str.includes(close) ? str.replace(regex, close + open) : str) + close;\n  // see https://github.com/chalk/chalk/pull/92, thanks to the\n  // chalk contributors for this fix. However, we've confirmed that\n  // this issue is also present in Windows terminals\n  return nl ? str.replace(/\\r?\\n/g, `${close}$&${open}`) : str;\n};\n\nconst style = (input, stack) => {\n  if (input === '' || input == null) return '';\n  if (colors.enabled === false) return input;\n  if (colors.visible === false) return '';\n  let str = '' + input;\n  let nl = str.includes('\\n');\n  let n = stack.length;\n  while (n-- > 0) str = wrap(colors.styles[stack[n]], str, nl);\n  return str;\n};\n\nconst define = (name, codes, type) => {\n  colors.styles[name] = ansi({ name, codes });\n  let t = colors.keys[type] || (colors.keys[type] = []);\n  t.push(name);\n\n  Reflect.defineProperty(colors, name, {\n    get() {\n      let color = input => style(input, color.stack);\n      Reflect.setPrototypeOf(color, colors);\n      color.stack = this.stack ? this.stack.concat(name) : [name];\n      return color;\n    }\n  });\n};\n\ndefine('reset', [0, 0], 'modifier');\ndefine('bold', [1, 22], 'modifier');\ndefine('dim', [2, 22], 'modifier');\ndefine('italic', [3, 23], 'modifier');\ndefine('underline', [4, 24], 'modifier');\ndefine('inverse', [7, 27], 'modifier');\ndefine('hidden', [8, 28], 'modifier');\ndefine('strikethrough', [9, 29], 'modifier');\n\ndefine('black', [30, 39], 'color');\ndefine('red', [31, 39], 'color');\ndefine('green', [32, 39], 'color');\ndefine('yellow', [33, 39], 'color');\ndefine('blue', [34, 39], 'color');\ndefine('magenta', [35, 39], 'color');\ndefine('cyan', [36, 39], 'color');\ndefine('white', [37, 39], 'color');\ndefine('gray', [90, 39], 'color');\ndefine('grey', [90, 39], 'color');\n\ndefine('bgBlack', [40, 49], 'bg');\ndefine('bgRed', [41, 49], 'bg');\ndefine('bgGreen', [42, 49], 'bg');\ndefine('bgYellow', [43, 49], 'bg');\ndefine('bgBlue', [44, 49], 'bg');\ndefine('bgMagenta', [45, 49], 'bg');\ndefine('bgCyan', [46, 49], 'bg');\ndefine('bgWhite', [47, 49], 'bg');\n\ndefine('blackBright', [90, 39], 'bright');\ndefine('redBright', [91, 39], 'bright');\ndefine('greenBright', [92, 39], 'bright');\ndefine('yellowBright', [93, 39], 'bright');\ndefine('blueBright', [94, 39], 'bright');\ndefine('magentaBright', [95, 39], 'bright');\ndefine('cyanBright', [96, 39], 'bright');\ndefine('whiteBright', [97, 39], 'bright');\n\ndefine('bgBlackBright', [100, 49], 'bgBright');\ndefine('bgRedBright', [101, 49], 'bgBright');\ndefine('bgGreenBright', [102, 49], 'bgBright');\ndefine('bgYellowBright', [103, 49], 'bgBright');\ndefine('bgBlueBright', [104, 49], 'bgBright');\ndefine('bgMagentaBright', [105, 49], 'bgBright');\ndefine('bgCyanBright', [106, 49], 'bgBright');\ndefine('bgWhiteBright', [107, 49], 'bgBright');\n\n/* eslint-disable no-control-regex */\n// this is a modified, optimized version of\n// https://github.com/chalk/ansi-regex (MIT License)\nconst re = colors.ansiRegex = /[\\u001b\\u009b][[\\]#;?()]*(?:(?:(?:[^\\W_]*;?[^\\W_]*)\\u0007)|(?:(?:[0-9]{1,4}(;[0-9]{0,4})*)?[~0-9=<>cf-nqrtyA-PRZ]))/g;\n\ncolors.hasColor = colors.hasAnsi = str => {\n  re.lastIndex = 0;\n  return !!str && typeof str === 'string' && re.test(str);\n};\n\ncolors.unstyle = str => {\n  re.lastIndex = 0;\n  return typeof str === 'string' ? str.replace(re, '') : str;\n};\n\ncolors.none = colors.clear = colors.noop = str => str; // no-op, for programmatic usage\ncolors.stripColor = colors.unstyle;\ncolors.symbols = require('./symbols');\ncolors.define = define;\nmodule.exports = colors;\n","'use strict';\n\nconst isWindows = process.platform === 'win32';\nconst isLinux = process.platform === 'linux';\n\nconst windows = {\n  bullet: '•',\n  check: '√',\n  cross: '×',\n  ellipsis: '...',\n  heart: '❤',\n  info: 'i',\n  line: '─',\n  middot: '·',\n  minus: '－',\n  plus: '＋',\n  question: '?',\n  questionSmall: '﹖',\n  pointer: '>',\n  pointerSmall: '»',\n  warning: '‼'\n};\n\nconst other = {\n  ballotCross: '✘',\n  bullet: '•',\n  check: '✔',\n  cross: '✖',\n  ellipsis: '…',\n  heart: '❤',\n  info: 'ℹ',\n  line: '─',\n  middot: '·',\n  minus: '－',\n  plus: '＋',\n  question: '?',\n  questionFull: '？',\n  questionSmall: '﹖',\n  pointer: isLinux ? '▸' : '❯',\n  pointerSmall: isLinux ? '‣' : '›',\n  warning: '⚠'\n};\n\nmodule.exports = isWindows ? windows : other;\nReflect.defineProperty(module.exports, 'windows', { enumerable: false, value: windows });\nReflect.defineProperty(module.exports, 'other', { enumerable: false, value: other });\n","import React from \"react\";\nimport {Icon, Popover} from \"antd\";\nimport EventPatientPopover from \"./EventPatientPopover\";\n\nexport default class EventComponent extends React.Component {\n    constructor(props) {\n        super(props);\n    }\n\n    render(){\n        const that=this;\n        return (\n<Popover\n  placement=\"right\"\n  content={(\n<EventPatientPopover\n  appointmentId={this.props.event.appointment.id}\n  key={this.props.event.appointment.id}\n  {...that.props}\n/>\n)}\n  trigger=\"hover\"\n>\n            <div style={{color: 'white',height:'100%'}}>\n                <h1 style={{color: 'white'}}><Icon type=\"user\" />{this.props.title}</h1>\n            </div>\n</Popover>\n)\n    }\n}\n","import {Menu} from \"antd\";\nimport React from 'react';\nimport {Link} from \"react-router-dom\";\nimport * as lockr from \"lockr\";\nimport moment from \"moment/moment\";\nimport {getAPI, interpolate} from \"./common\";\nimport {APPOINTMENT_CATEGORIES} from \"../constants/api\";\nimport {hashCode, intToRGB} from \"./clinicUtils\";\nimport {CALENDAR_SETTINGS} from \"../constants/dataKeys\";\n\nexport const calendarSettingMenu = (\n<Menu>\n        <Menu.Item key=\"1\">\n            <Link to=\"/settings/calendarsettings#timings\">\n                Modify Calendar Timings\n            </Link>\n        </Menu.Item>\n        <Menu.Item key=\"2\">\n            <Link to=\"/settings/clinics-staff#staff\">\n                Add/Edit Doctor or Staff\n            </Link>\n        </Menu.Item>\n        <Menu.Item key=\"3\">\n            <Link to=\"/settings/clinics-staff#notification\">\n                Modify SMS/Email for Doctor/Staff\n            </Link>\n        </Menu.Item>\n        <Menu.Item key=\"4\">\n            <Link to=\"/settings/communication-settings\">\n                Modify SMS/Email for Patients\n            </Link>\n        </Menu.Item>\n        <Menu.Item key=\"5\">\n            <Link to=\"/settings/calendarsettings#categories\">\n                Add/Edit Categroies\n            </Link>\n        </Menu.Item>\n</Menu>\n);\nexport const loadAppointmentCategories = function (that) {\n    const successFn = function (data) {\n        const categories_object = {}\n        const categories = data.map((item) => {\n                categories_object[item.id] = {...item, calendar_colour: intToRGB(hashCode(item.name))}\n                return categories_object[item.id]\n            }\n        )\n        that.setState({\n            categories_object,\n            practice_categories: categories,\n        })\n\n    }\n    const errorFn = function () {\n\n    }\n    getAPI(interpolate(APPOINTMENT_CATEGORIES, [that.props.active_practiceId]), successFn, errorFn)\n}\n\nexport const saveCalendarSettings = function (type, value) {\n    let settings = lockr.get(CALENDAR_SETTINGS);\n    if (!settings) {\n        settings = {}\n    }\n    settings = {...settings, [type]: value}\n    lockr.set(CALENDAR_SETTINGS, settings);\n}\nexport const getCalendarSettings = function () {\n    let settings = lockr.get(CALENDAR_SETTINGS);\n    if (!settings) {\n        settings = {}\n    }\n    return settings;\n}\n\n\nexport const TimeSlotWrapper = function (props) {\n    let flag = true;\n    const dayValue = moment(props.value).isValid() ? moment(props.value).format('dddd').toLowerCase() : null;\n    if (props.filterType != 'DOCTOR' || props.selectedDoctor == 'ALL') {\n        /**\n         * Checking for Calendar Clinic Timings\n         * */\n        if (props.calendarTimings && dayValue && props.calendarTimings[dayValue]) {\n            const daysTimings = props.calendarTimings[dayValue];\n            if (daysTimings.lunch) {\n                if (\n                    (moment(props.value, 'HH:mm:ss').format('HH:mm:ss') <= daysTimings.startTime.format('HH:mm:ss')\n                        || moment(props.value, 'HH:mm:ss').format('HH:mm:ss') > daysTimings.endTime.format('HH:mm:ss')\n                    ) || (\n                        moment(props.value, 'HH:mm:ss').format('HH:mm:ss') < daysTimings.lunchEndTime.format('HH:mm:ss')\n                        && moment(props.value, 'HH:mm:ss').format('HH:mm:ss') >= daysTimings.lunchStartTime.format('HH:mm:ss')\n                    )\n                ) {\n                    flag = false;\n                }\n            } else if (moment(props.value, 'HH:mm:ss').format('HH:mm:ss') <= daysTimings.startTime.format('HH:mm:ss') || moment(props.value, 'HH:mm:ss').format('HH:mm:ss') > daysTimings.endTime.format('HH:mm:ss')) {\n                    flag = false;\n                }\n        } else if (dayValue && !props.calendarTimings[dayValue]) {\n            /**\n             * If the practice is not opening for the day\n             * */\n            flag = false;\n        }\n    } else if (props.doctorTimings && dayValue && props.doctorTimings[dayValue]) {\n            const daysTimings = props.doctorTimings[dayValue];\n            if (daysTimings.lunch) {\n                if (\n                    (moment(props.value, 'HH:mm:ss').format('HH:mm:ss') <= daysTimings.startTime.format('HH:mm:ss')\n                        || moment(props.value, 'HH:mm:ss').format('HH:mm:ss') > daysTimings.endTime.format('HH:mm:ss')\n                    ) || (\n                        moment(props.value, 'HH:mm:ss').format('HH:mm:ss') < daysTimings.lunchEndTime.format('HH:mm:ss')\n                        && moment(props.value, 'HH:mm:ss').format('HH:mm:ss') >= daysTimings.lunchStartTime.format('HH:mm:ss')\n                    )\n                ) {\n                    flag = false;\n                }\n            } else if (moment(props.value, 'HH:mm:ss').format('HH:mm:ss') <= daysTimings.startTime.format('HH:mm:ss') || moment(props.value, 'HH:mm:ss').format('HH:mm:ss') > daysTimings.endTime.format('HH:mm:ss')) {\n                    flag = false;\n                }\n        } else if (props.doctorTimings && dayValue && !props.doctorTimings[dayValue]) {\n            /**\n             * If the doctor is not working for the day\n             * */\n            flag = false;\n        }\n    /**\n     * Checking for Events Timings\n     * */\n    if (props.showCalendarEvents && flag) {\n        for (let i = 0; i < props.blockedCalendar.length; i++) {\n            if (props.blockedCalendar[i].doctor && props.filterType == 'DOCTOR') {\n                if (props.blockedCalendar[i].doctor == props.selectedDoctor && moment(props.value).isBetween(moment(props.blockedCalendar[i].block_from), moment(props.blockedCalendar[i].block_to))) {\n                    flag = false;\n                    break;\n                }\n            } else if (moment(props.value).isBetween(moment(props.blockedCalendar[i].block_from), moment(props.blockedCalendar[i].block_to))) {\n                    flag = false;\n                    break;\n                }\n        }\n    }\n\n    if (flag)\n        return props.children;\n\n\n    const child = React.Children.only(props.children);\n    return React.cloneElement(child, {className: `${child.props.className  } rbc-off-range-bg`});\n}\n","import React from \"react\";\nimport {Button, Icon, Dropdown, Row, Col, Divider, Spin, List, Popover} from \"antd\";\nimport {Link} from \"react-router-dom\";\nimport moment from \"moment/moment\";\nimport {calendarSettingMenu} from \"../../utils/calendarUtils\";\nimport {\n    CANCELLED_STATUS,\n    CHECKOUT_STATUS,\n    ENGAGED_STATUS,\n    SCHEDULE_STATUS,\n    WAITING_STATUS\n} from \"../../constants/hardData\";\nimport {APPOINTMENT_API, APPOINTMENT_PERPRACTICE_API} from \"../../constants/api\";\nimport {displayMessage, getAPI, interpolate, putAPI} from \"../../utils/common\";\nimport EventPatientPopover from \"./EventPatientPopover\";\nimport {ERROR_MSG_TYPE, SUCCESS_MSG_TYPE} from \"../../constants/dataKeys\";\n\nexport default class CalendarRightPanel extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            todaysAppointments: [],\n            todaysFilteredAppointments: [],\n            todaysAppointmentOverview: {},\n            todaysAppointmentFilter: 'ALL',\n            selectedDate: this.props.selectedDate\n        }\n        this.todaysAppointments = this.todaysAppointments.bind(this);\n    }\n\n    componentDidMount() {\n        this.todaysAppointments()\n    }\n\n    changeDate = (option) => {\n        const that = this;\n        this.setState(function (prevState) {\n            if (option)\n                return {selectedDate: prevState.selectedDate.add(1, 'days')};\n            return {selectedDate: prevState.selectedDate.subtract(1, 'days')};\n\n        }, function () {\n            that.todaysAppointments();\n        })\n\n    }\n\n    todaysAppointments = () => {\n        const that = this;\n        that.setState({\n            loading: true\n        });\n        const successFn = function (data) {\n            that.setState(function (prevState) {\n                const appointmentOverview = {};\n                const filteredAppointment = [];\n                data.forEach(function (appointment) {\n                    if (appointment.status == CANCELLED_STATUS) {\n                        return true;\n                    }\n                    if (appointmentOverview[appointment.status]) {\n                        appointmentOverview[appointment.status] += 1\n                    } else {\n                        appointmentOverview[appointment.status] = 1;\n                    }\n                    if (prevState.todaysAppointmentFilter == 'ALL') {\n                        filteredAppointment.push(appointment)\n                    } else if (prevState.todaysAppointmentFilter == appointment.status) {\n                        filteredAppointment.push(appointment)\n                    }\n                });\n                return {\n                    todaysAppointments: data,\n                    todaysAppointmentOverview: appointmentOverview,\n                    todaysFilteredAppointments: filteredAppointment,\n                    loading: false\n                }\n            });\n        }\n        const errorFn = function () {\n            that.setState({\n                loading: false\n            })\n        }\n        getAPI(interpolate(APPOINTMENT_PERPRACTICE_API, [this.props.active_practiceId]), successFn, errorFn, {\n            start: that.state.selectedDate.format('YYYY-MM-DD'),\n            end: that.state.selectedDate.format('YYYY-MM-DD')\n        });\n    }\n\n    filterTodaysAppointment = (filterType) => {\n        this.setState(function (prevState) {\n            const filteredAppointment = [];\n            prevState.todaysAppointments.forEach(function (appointment) {\n                if (filterType == 'ALL') {\n                    filteredAppointment.push(appointment)\n                } else if (filterType == appointment.status) {\n                    filteredAppointment.push(appointment)\n                }\n            });\n            return {\n                todaysFilteredAppointments: filteredAppointment,\n                todaysAppointmentFilter: filterType\n            }\n        });\n    }\n\n    changeAppointmentStatus = (id, currentStatus, targetStatus) => {\n        const that = this;\n        const successFn = function (data) {\n            if (data.status == currentStatus) {\n                that.updateAppointmentStatus(id, currentStatus, targetStatus)\n            } else {\n                displayMessage(ERROR_MSG_TYPE, \"Appointment status has already changed. Updating Appointments...\")\n                that.todaysAppointments();\n            }\n        }\n        const errorFn = function () {\n\n        }\n        getAPI(interpolate(APPOINTMENT_API, [id]), successFn, errorFn);\n    }\n\n    updateAppointmentStatus = (id, currentStatus, targetStatus) => {\n        const that = this;\n        const reqData = {\n            status: targetStatus\n        };\n        if(targetStatus==WAITING_STATUS){\n            reqData.waiting=moment().format()\n        }else if(targetStatus==ENGAGED_STATUS){\n            reqData.engaged=moment().format()\n        }else if(targetStatus==CHECKOUT_STATUS){\n            reqData.checkout=moment().format()\n        }\n        const successFn = function (data) {\n            displayMessage(SUCCESS_MSG_TYPE, \"Appointment Status Changed Successfully!!\");\n            that.todaysAppointments()\n        }\n        const errorFn = function () {\n\n        }\n        putAPI(interpolate(APPOINTMENT_API, [id]), reqData, successFn, errorFn\n        )\n    }\n\n    render() {\n        const that = this;\n        return (\n<div>\n            <Dropdown trigger=\"click\" overlay={calendarSettingMenu}>\n                <Button block style={{margin: 5}}>\n                    <Icon type=\"setting\" /> Settings <Icon type=\"down\" />\n                </Button>\n            </Dropdown>\n            {that.props.activePracticePermissions.AddWalkinAppointment || that.props.allowAllPermissions ? (\n            <Link to='/calendar/create-appointment'>\n                <Button block type=\"primary\" style={{margin: 5}}> Walkin\n                    Appointment\n                </Button>\n            </Link>\n          ):null}\n            <Row gutter={8}>\n                <Col\n                  span={6}\n                  onClick={() => this.filterTodaysAppointment(this.state.todaysAppointmentFilter == SCHEDULE_STATUS ? 'ALL' : SCHEDULE_STATUS)}\n                  style={{\n                         textAlign: 'center',\n                         border: '1px solid #ccc',\n                         borderRadius: '3px',\n                         backgroundColor: (this.state.todaysAppointmentFilter == SCHEDULE_STATUS ? '#FF6600' : null),\n                         color: (this.state.todaysAppointmentFilter == SCHEDULE_STATUS ? 'white' : '#FF6600'),\n                         boxShadow: '0 2px 4px #111 inset'\n                     }}\n                >\n                    <small>{SCHEDULE_STATUS}</small>\n                    <h2 style={{color: (this.state.todaysAppointmentFilter == SCHEDULE_STATUS ? 'white' : '#FF6600')}}>{this.state.todaysAppointmentOverview[SCHEDULE_STATUS] ? this.state.todaysAppointmentOverview[SCHEDULE_STATUS] : 0}</h2>\n                </Col>\n                <Col\n                  span={6}\n                  onClick={() => this.filterTodaysAppointment(this.state.todaysAppointmentFilter == WAITING_STATUS ? 'ALL' : WAITING_STATUS)}\n                  style={{\n                         textAlign: 'center',\n                         border: '1px solid #ccc',\n                         borderRadius: '3px',\n                         backgroundColor: (this.state.todaysAppointmentFilter == WAITING_STATUS ? '#FC0000' : null),\n                         color: (this.state.todaysAppointmentFilter == WAITING_STATUS ? 'white' : '#FC0000'),\n                         boxShadow: '0 2px 4px #111 inset'\n                     }}\n                >\n                    <small>{WAITING_STATUS}</small>\n                    <h2 style={{color: (this.state.todaysAppointmentFilter == WAITING_STATUS ? 'white' : '#FC0000')}}>{this.state.todaysAppointmentOverview[WAITING_STATUS] ? this.state.todaysAppointmentOverview[WAITING_STATUS] : 0}</h2>\n                </Col>\n                <Col\n                  span={6}\n                  onClick={() => this.filterTodaysAppointment(this.state.todaysAppointmentFilter == ENGAGED_STATUS ? 'ALL' : ENGAGED_STATUS)}\n                  style={{\n                         textAlign: 'center',\n                         border: '1px solid #ccc',\n                         borderRadius: '3px',\n                         backgroundColor: (this.state.todaysAppointmentFilter == ENGAGED_STATUS ? '#598C01' : null),\n                         color: (this.state.todaysAppointmentFilter == ENGAGED_STATUS ? 'white' : '#598C01'),\n                         boxShadow: '0 2px 4px #111 inset'\n                     }}\n                >\n                    <small>{ENGAGED_STATUS}</small>\n                    <h2 style={{color: (this.state.todaysAppointmentFilter == ENGAGED_STATUS ? 'white' : '#598C01')}}>{this.state.todaysAppointmentOverview[ENGAGED_STATUS] ? this.state.todaysAppointmentOverview[ENGAGED_STATUS] : 0}</h2>\n                </Col>\n                <Col\n                  span={6}\n                  onClick={() => this.filterTodaysAppointment(this.state.todaysAppointmentFilter == CHECKOUT_STATUS ? 'ALL' : CHECKOUT_STATUS)}\n                  style={{\n                         textAlign: 'center',\n                         border: '1px solid #ccc',\n                         borderRadius: '3px',\n                         backgroundColor: (this.state.todaysAppointmentFilter == CHECKOUT_STATUS ? '#0094DE' : null),\n                         color: (this.state.todaysAppointmentFilter == CHECKOUT_STATUS ? 'white' : '#0094DE'),\n                         boxShadow: '0 2px 4px #111 inset'\n                     }}\n                >\n                    <small>{CHECKOUT_STATUS}</small>\n                    <h2 style={{color: (this.state.todaysAppointmentFilter == CHECKOUT_STATUS ? 'white' : '#0094DE')}}>{this.state.todaysAppointmentOverview[CHECKOUT_STATUS] ? this.state.todaysAppointmentOverview[CHECKOUT_STATUS] : 0}</h2>\n                </Col>\n            </Row>\n            <Divider>\n                <a type=\"primary\" onClick={() => this.changeDate(false)}><Icon type=\"left\" /></a>\n                {this.state.selectedDate.format(\"MMM Do\") == moment().format(\"MMM Do\") ? 'Today' : this.state.selectedDate.format(\"MMM Do\")}'s\n                Schedule ({this.state.todaysFilteredAppointments.length})\n                &nbsp;<a type=\"primary\" onClick={() => this.changeDate(true)}><Icon type=\"right\" /></a>\n            </Divider>\n            <Spin spinning={this.state.loading}>\n                <List\n                  size=\"small\"\n                  dataSource={this.state.todaysFilteredAppointments}\n                  renderItem={(apppointment) => (apppointment.status == CANCELLED_STATUS ? <div /> : (\n<List.Item\n  color=\"transparent\"\n  style={{padding: 0}}\n>\n                        <div\n                          style={{\n                                border: '1px solid #ddd',\n                                borderRadius: '5px',\n                                textDecoration: (apppointment.status == CANCELLED_STATUS ? 'line-through' : 'inherit'),\n                                backgroundColor: (apppointment.status == CANCELLED_STATUS ? '#aaa' : '#eee'),\n                                width: '100%',\n                                marginTop: '2px',\n                                borderLeft: `5px solid${  apppointment.doctor && that.props.doctors_object && that.props.doctors_object[apppointment.doctor] ? that.props.doctors_object[apppointment.doctor].calendar_colour : 'transparent'}`\n                            }}\n                        >\n                            <AppointmentCard\n                              {...apppointment}\n                              changeAppointmentStatus={this.changeAppointmentStatus}\n                              {...this.props}\n                            />\n                        </div>\n</List.Item>\n))}\n                />\n            </Spin>\n</div>\n)\n    }\n}\n\nfunction AppointmentCard(appointment) {\n    return (\n<div style={{width: '100%'}}>\n\n        <p style={{marginBottom: 0}}>\n            <Popover\n              placement=\"right\"\n              content={(\n<EventPatientPopover\n  appointmentId={appointment.id}\n  key={appointment.id}\n  {...appointment}\n/>\n)}\n            >\n            <span\n              style={{width: 'calc(100% - 60px)'}}\n            ><b>{moment(appointment.schedule_at).format(\"LT\")}</b>&nbsp;\n                {appointment.patient.user.first_name}\n            </span>\n            </Popover>\n            {appointment.status == SCHEDULE_STATUS ? (\n                <span style={{width: '70px', float: 'right'}}>\n                    <a onClick={() => appointment.changeAppointmentStatus(appointment.id, SCHEDULE_STATUS, WAITING_STATUS)} disabled={!appointment.activePracticePermissions.ChangeAppointmentStatus}> Check In</a>\n                </span>\n              ) : null}\n            {appointment.status == WAITING_STATUS ? (\n                <span style={{width: '70px', float: 'right'}}>\n                    <a onClick={() => appointment.changeAppointmentStatus(appointment.id, WAITING_STATUS, ENGAGED_STATUS)} disabled={!appointment.activePracticePermissions.ChangeAppointmentStatus}> Engage</a>\n                </span>\n              ) : null}\n            {appointment.status == ENGAGED_STATUS ? (\n                <span style={{width: '70px', float: 'right'}}>\n                    <a onClick={() => appointment.changeAppointmentStatus(appointment.id, ENGAGED_STATUS, CHECKOUT_STATUS)} disabled={!appointment.activePracticePermissions.ChangeAppointmentStatus}> Check Out</a>\n                </span>\n              ) : null}\n            {appointment.status == CHECKOUT_STATUS ? (\n                <span style={{width: '70px', float: 'right'}}>\n                    <small>Checked Out</small>\n                </span>\n              ) : null}\n\n        </p>\n</div>\n);\n}\n","import React from \"react\";\nimport {\n    Alert,\n    AutoComplete,\n    Avatar,\n    Button,\n    Card,\n    DatePicker,\n    Form,\n    Input,\n    InputNumber,\n    List,\n    Select,\n    Spin,\n    Popover,\n    Icon,\n    Row,Col,\nCheckbox, Radio} from 'antd';\nimport moment from \"moment/moment\";\nimport { red } from \"ansi-colors\";\nimport {REQUIRED_FIELD_MESSAGE} from \"../../constants/messages\";\nimport {ALL, DOCTORS_ROLE, SUCCESS_MSG_TYPE} from \"../../constants/dataKeys\";\nimport {\n    ALL_APPOINTMENT_API,\n    APPOINTMENT_API,\n    APPOINTMENT_CATEGORIES,\n    BLOCK_CALENDAR,\n    CALENDER_SETTINGS,\n    DOCTOR_VISIT_TIMING_API,\n    EMR_TREATMENTNOTES,\n    PATIENT_PROFILE,\n    PRACTICESTAFF,\n    PROCEDURE_CATEGORY,\n    SEARCH_PATIENT,\n    APPOINTMENT_PERPRACTICE_API,\n    APPOINTMENT_SCHEDULE\n} from \"../../constants/api\";\n\nimport {displayMessage, getAPI, interpolate, makeFileURL, postAPI, putAPI} from \"../../utils/common\";\nimport {APPOINTMENT_STATUS, DAY_KEYS} from \"../../constants/hardData\";\nimport {hideMobile} from \"../../utils/permissionUtils\";\n\nconst {TextArea} = Input;\nconst FormItem = Form.Item;\nconst RadioGroup = Radio.Group;\nconst CheckboxGroup = Checkbox.Group;\nconst {Meta} = Card;\nexport default class CreateAppointmentForm extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            redirect: false,\n            practice_doctors: [],\n            appointmentCategories: null,\n            procedure_category: null,\n            treatmentNotes: null,\n            practice_staff: [],\n            appointment: null,\n            loading: false,\n            patientListData: [],\n            // patientDetails: null,\n            appointmentDetail: null,\n            saving: false,\n            doctorBlock: false,\n            doctorOutsideAvailableTiming: false,\n            practiceBlock: false,\n            practiceOutsideAvailableTiming: false,\n            timeToCheckBlock: {\n                schedule_at: moment(),\n                slot: 10,\n            },\n            procedureObjectsById: {},\n            // appointmentList:[],\n            startTime:this.props.startTime,\n\n        }\n        this.changeRedirect = this.changeRedirect.bind(this);\n        this.loadDoctors = this.loadDoctors.bind(this);\n        this.loadProcedureCategory = this.loadProcedureCategory.bind(this);\n        this.loadTreatmentNotes = this.loadTreatmentNotes.bind(this);\n        this.searchPatient = this.searchPatient.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n        this.loadAppointment = this.loadAppointment.bind(this);\n        this.loadAppointmentList = this.loadAppointmentList.bind(this);\n\n    }\n\n    componentDidMount() {\n        const that = this;\n        this.loadDoctors();\n        this.loadProcedureCategory();\n        this.loadTreatmentNotes();\n        this.loadAppointmentCategories();\n        this.loadPracticeTiming();\n        this.loadAppointmentList();\n        if (this.props.match.params.appointmentid) {\n            that.loadAppointment();\n        } else if (this.props.history && this.props.history.location.search) {\n            const pairValueArray = this.props.history.location.search.substr(1).split('&');\n            if (pairValueArray.length) {\n                pairValueArray.forEach(function (item) {\n                    const keyValue = item.split('=');\n                    if (keyValue && keyValue.length == 2) {\n                        if (keyValue[0] == 'patient' && keyValue[1]) {\n                            that.handlePatientSelect(keyValue[1])\n                        }\n                    }\n                });\n            }\n        }\n    }\n\n    loadPracticeTiming = () => {\n        const that = this;\n        const successFn = function (data) {\n            let dataObject = {};\n            if (data.length)\n                dataObject = data[0];\n            const timing = {};\n            DAY_KEYS.forEach(function (dayKey) {\n                timing[dayKey] = {};\n                if (dataObject.visting_hour_same_week) {\n                    timing[dayKey].startTime = moment(dataObject.first_start_time, 'HH:mm:ss');\n                    timing[dayKey].endTime = moment(dataObject.second_end_time, 'HH:mm:ss');\n                    if (dataObject.is_two_sessions) {\n                        timing[dayKey].lunch = true;\n                        timing[dayKey].lunchStartTime = moment(dataObject.first_end_time, 'HH:mm:ss');\n                        timing[dayKey].lunchEndTime = moment(dataObject.second_start_time, 'HH:mm:ss');\n                    } else {\n                        timing[dayKey].lunch = false\n                    }\n                } else if (dataObject[dayKey]) {\n                    timing[dayKey].startTime = moment(dataObject[`first_start_time_${dayKey}`], 'HH:mm:ss');\n                    timing[dayKey].endTime = moment(dataObject[`second_end_time_${dayKey}`], 'HH:mm:ss');\n                    if (dataObject[`is_two_sessions_${dayKey}`]) {\n                        timing[dayKey].lunch = true;\n                        timing[dayKey].lunchStartTime = moment(dataObject[`first_end_time_${dayKey}`], 'HH:mm:ss');\n                        timing[dayKey].lunchEndTime = moment(dataObject[`second_start_time_${dayKey}`], 'HH:mm:ss');\n                    } else {\n                        timing[dayKey].lunch = false\n                    }\n                } else {\n                    timing[dayKey] = null\n                }\n            });\n            that.setState({\n                calendarTimings: {...timing},\n            }, function () {\n                that.findOutsidePracticeTiming();\n            });\n        };\n        const errorFn = function () {\n            that.setState({\n                calendarTimings: {}\n            })\n        };\n        getAPI(interpolate(CALENDER_SETTINGS, [this.props.active_practiceId]), successFn, errorFn);\n    }\n\n    loadDoctorsTiming = () => {\n        const that = this;\n        const successFn = function (data) {\n            let dataObject = {};\n            if (data.length)\n                dataObject = data[0];\n            const timing = {};\n            DAY_KEYS.forEach(function (dayKey) {\n                timing[dayKey] = {};\n                if (dataObject.visting_hour_same_week) {\n                    timing[dayKey].startTime = moment(dataObject.first_start_time, 'HH:mm:ss');\n                    timing[dayKey].endTime = moment(dataObject.second_end_time, 'HH:mm:ss');\n                    if (dataObject.is_two_sessions) {\n                        timing[dayKey].lunch = true;\n                        timing[dayKey].lunchStartTime = moment(dataObject.first_end_time, 'HH:mm:ss');\n                        timing[dayKey].lunchEndTime = moment(dataObject.second_start_time, 'HH:mm:ss');\n                    } else {\n                        timing[dayKey].lunch = false\n                    }\n                } else if (dataObject[dayKey]) {\n                    timing[dayKey].startTime = moment(dataObject[`first_start_time_${dayKey}`], 'HH:mm:ss');\n                    timing[dayKey].endTime = moment(dataObject[`second_end_time_${dayKey}`], 'HH:mm:ss');\n                    if (dataObject[`is_two_sessions_${dayKey}`]) {\n                        timing[dayKey].lunch = true;\n                        timing[dayKey].lunchStartTime = moment(dataObject[`first_end_time_${dayKey}`], 'HH:mm:ss');\n                        timing[dayKey].lunchEndTime = moment(dataObject[`second_start_time_${dayKey}`], 'HH:mm:ss');\n                    } else {\n                        timing[dayKey].lunch = false\n                    }\n                } else {\n                    timing[dayKey] = null\n                }\n            });\n            that.setState({\n                doctorTimings: {...timing},\n            }, function () {\n                that.findOutsideDoctorTiming();\n            });\n        }\n        const errorFn = function () {\n\n        };\n        if (that.state.timeToCheckBlock.doctor)\n            getAPI(interpolate(DOCTOR_VISIT_TIMING_API, [this.props.active_practiceId]), successFn, errorFn, {\n                doctor: that.state.timeToCheckBlock.doctor\n            });\n    }\n\n    setBlockedTiming = (type, value) => {\n        const that = this;\n        if (type) {\n            this.setState(function (prevState) {\n                return {\n                    timeToCheckBlock: {...prevState.timeToCheckBlock, [type]: value}\n                }\n            }, function () {\n                that.loadAppointmentList();\n                that.findBlockedTiming();\n                that.findOutsidePracticeTiming();\n                if (type == 'doctor') {\n                    that.loadDoctorsTiming();\n                } else {\n                    that.findOutsideDoctorTiming();\n                }\n\n            })\n        }\n    }\n\n    findBlockedTiming = () => {\n        const that = this;\n        const successFn = function (data) {\n            data.forEach(function (blockRow) {\n                if (blockRow.doctor == null) {\n                    that.setState({\n                        practiceBlock: true\n                    });\n                } else if (blockRow.doctor == that.props.timeToCheckBlock.doctor) {\n                    that.setState({\n                        doctorBlock: true\n                    });\n                }\n            });\n        }\n        const errorFn = function () {\n\n        }\n        getAPI(BLOCK_CALENDAR, successFn, errorFn, {\n            practice: this.props.active_practiceId,\n            cal_fdate: moment(that.state.timeToCheckBlock.schedule_at).format(),\n            cal_tdate: moment(that.state.timeToCheckBlock.schedule_at).add(that.state.timeToCheckBlock.slot, 'minutes').format()\n        })\n    }\n\n    findOutsidePracticeTiming = () => {\n        const that = this;\n        let flag = true;\n        if (that.state.timeToCheckBlock.schedule_at && that.state.timeToCheckBlock.slot) {\n            const {schedule_at} = that.state.timeToCheckBlock;\n            const {calendarTimings} = that.state;\n            const dayValue = moment(schedule_at).isValid() ? moment(schedule_at).format('dddd').toLowerCase() : null;\n            /**\n             * Checking for Calendar Clinic Timings\n             * */\n            if (calendarTimings && dayValue && calendarTimings[dayValue]) {\n                const daysTimings = calendarTimings[dayValue];\n                if (daysTimings.lunch) {\n                    if (\n                        (moment(schedule_at, 'HH:mm:ss').format('HH:mm:ss') <= daysTimings.startTime.format('HH:mm:ss')\n                            || moment(schedule_at, 'HH:mm:ss').format('HH:mm:ss') > daysTimings.endTime.format('HH:mm:ss')\n                        ) || (\n                            moment(schedule_at, 'HH:mm:ss').format('HH:mm:ss') < daysTimings.lunchEndTime.format('HH:mm:ss')\n                            && moment(schedule_at, 'HH:mm:ss').format('HH:mm:ss') >= daysTimings.lunchStartTime.format('HH:mm:ss')\n                        )\n                    ) {\n                        flag = false;\n                    }\n                } else if (moment(schedule_at, 'HH:mm:ss').format('HH:mm:ss') <= daysTimings.startTime.format('HH:mm:ss') || moment(schedule_at, 'HH:mm:ss').format('HH:mm:ss') > daysTimings.endTime.format('HH:mm:ss')) {\n                        flag = false;\n                    }\n            } else if (dayValue && !calendarTimings[dayValue]) {\n                /**\n                 * If the practice isnot opening for the day\n                 * */\n                flag = false;\n            }\n\n        }\n        that.setState({\n            practiceOutsideAvailableTiming: !flag\n        })\n    }\n\n    findOutsideDoctorTiming = () => {\n        const that = this;\n        let flag = true;\n        if (that.state.timeToCheckBlock.schedule_at && that.state.timeToCheckBlock.slot) {\n            const {schedule_at} = that.state.timeToCheckBlock;\n            const calendarTimings = that.state.doctorTimings;\n            const dayValue = moment(schedule_at).isValid() ? moment(schedule_at).format('dddd').toLowerCase() : null;\n            /**\n             * Checking for Calendar Clinic Timings\n             * */\n            if (calendarTimings && dayValue && calendarTimings[dayValue]) {\n                const daysTimings = calendarTimings[dayValue];\n                if (daysTimings.lunch) {\n                    if (\n                        (moment(schedule_at, 'HH:mm:ss').format('HH:mm:ss') <= daysTimings.startTime.format('HH:mm:ss')\n                            || moment(schedule_at, 'HH:mm:ss').format('HH:mm:ss') > daysTimings.endTime.format('HH:mm:ss')\n                        ) || (\n                            moment(schedule_at, 'HH:mm:ss').format('HH:mm:ss') < daysTimings.lunchEndTime.format('HH:mm:ss')\n                            && moment(schedule_at, 'HH:mm:ss').format('HH:mm:ss') >= daysTimings.lunchStartTime.format('HH:mm:ss')\n                        )\n                    ) {\n                        flag = false;\n                    }\n                } else if (moment(schedule_at, 'HH:mm:ss').format('HH:mm:ss') <= daysTimings.startTime.format('HH:mm:ss') || moment(schedule_at, 'HH:mm:ss').format('HH:mm:ss') > daysTimings.endTime.format('HH:mm:ss')) {\n                        flag = false;\n                    }\n            } else if (dayValue && calendarTimings && !calendarTimings[dayValue]) {\n                /**\n                 * If the practice isnot opening for the day\n                 * */\n                flag = false;\n            }\n        }\n        that.setState({\n            doctorOutsideAvailableTiming: !flag\n        })\n    }\n\n    loadAppointment() {\n        const that = this;\n        this.setState({\n            loading: true,\n        })\n        const successFn = function (data) {\n            that.setState({\n                appointment: data,\n                patientDetails: data.patient,\n                timeToCheckBlock: data,\n                loading: false,\n            }, function () {\n                that.findBlockedTiming();\n                that.findOutsideDoctorTiming();\n                that.loadDoctorsTiming();\n                that.loadAppointmentList();\n            });\n\n        }\n\n        const errorFn = function () {\n            that.setState({\n                loading: false,\n            })\n        }\n        getAPI(interpolate(APPOINTMENT_API, [this.props.match.params.appointmentid]), successFn, errorFn);\n\n    }\n\n    loadDoctors() {\n        const that = this;\n        const successFn = function (data) {\n            const doctor = [];\n            let selectedDoctor = {};\n            data.staff.forEach(function (usersdata) {\n                if (usersdata.role == DOCTORS_ROLE) {\n                    doctor.push(usersdata);\n                    if (that.props.user.id==usersdata.user.id) {\n                        selectedDoctor = usersdata;\n                    }\n\n                }\n            });\n            that.setState(function (prevState) {\n\n\n                return {\n                    selectedDoctor:(doctor.length && !selectedDoctor.id ? doctor[0].user.id : selectedDoctor.user.id),\n                    practice_doctors: doctor,\n                    timeToCheckBlock: {...prevState.timeToCheckBlock, doctor: (doctor.length && !selectedDoctor.id ? doctor[0].user.id: selectedDoctor.user.id)}\n                }\n            }, function () {\n                that.findBlockedTiming();\n                that.loadDoctorsTiming();\n            });\n        }\n        const errorFn = function () {\n        };\n        getAPI(interpolate(PRACTICESTAFF, [this.props.active_practiceId]), successFn, errorFn);\n    }\n\n    loadProcedureCategory() {\n        const that = this;\n        const successFn = function (data) {\n            const obj = {};\n            data.forEach(function (item) {\n                obj[item.id] = item\n            })\n            that.setState({\n                procedure_category: data,\n                procedureObjectsById: {...obj}\n            })\n        }\n        const errorFn = function () {\n\n        }\n        getAPI(interpolate(PROCEDURE_CATEGORY, [this.props.active_practiceId]), successFn, errorFn,{pagination:false})\n    }\n\n    loadTreatmentNotes() {\n        const that = this;\n        const successFn = function (data) {\n            that.setState({\n                treatmentNotes: data\n            })\n\n        }\n        const errorFn = function () {\n\n        }\n        getAPI(interpolate(EMR_TREATMENTNOTES, [this.props.active_practiceId]), successFn, errorFn)\n    }\n\n    loadAppointmentCategories() {\n        const that = this;\n        const successFn = function (data) {\n            that.setState({\n                appointmentCategories: data\n            })\n\n        }\n        const errorFn = function () {\n\n        }\n        getAPI(interpolate(APPOINTMENT_CATEGORIES, [this.props.active_practiceId]), successFn, errorFn)\n    }\n\n    changeRedirect() {\n        const redirectVar = this.state.redirect;\n        this.setState({\n            redirect: !redirectVar,\n        });\n    }\n\n    searchPatient(value) {\n        const that=this;\n        this.setState({\n            searchPatientString: value\n        });\n        const successFn = function (data) {\n            that.setState(function (prevState) {\n                if(prevState.searchPatientString == value)\n                    if (data.current > 1) {\n                        return {\n                            patientListData: [...prevState.patientListData, ...data.results],\n\n                        }\n                    }else {\n                        return {\n                            patientListData: [...data.results],\n\n                        }\n                    }\n            })\n        };\n        const errorFn = function (data) {\n            that.setState({\n                searchPatientString:null,\n            })\n        };\n        if (value){\n            getAPI(interpolate(SEARCH_PATIENT, [value]), successFn, errorFn);\n        }\n\n    };\n\n    handleSubmit = (e) => {\n        const that = this;\n        const patient = {};\n        e.preventDefault();\n        this.props.form.validateFields((err, values) => {\n            if (!err) {\n                that.setState({\n                    saving: true\n                });\n                const formData = {...values};\n                formData.patient = {user: {}};\n                if (!this.state.patientDetails) {\n                    formData.patient.user.first_name = formData.patient_name;\n                    formData.patient.user.email = formData.patient_email;\n                    formData.patient.user.mobile = formData.patient_mobile;\n                    formData.patient_email = undefined;\n                    formData.patient_name = undefined;\n                    formData.patient_mobile = undefined;\n                } else {\n                    formData.patient = this.state.patientDetails;\n                }\n                formData.practice = that.props.active_practiceId;\n                // formData.treatment_plans = []\n                // values.procedure.forEach(function (id) {\n                //     let item = that.state.procedureObjectsById[id];\n                //     formData.treatment_plans.push({\n                //         \"procedure\": item.id,\n                //         \"cost\": item.cost,\n                //         \"quantity\": 1,\n                //         \"margin\": item.margin,\n                //         \"default_notes\": item.default_notes,\n                //         \"is_active\": true,\n                //         \"is_completed\": false,\n                //         \"discount\": item.discount,\n                //         \"discount_type\": \"%\",\n                //     })\n                // });\n                // delete formData.procedure;\n                // console.log(formData);\n                const successFn = function (data) {\n                    that.setState({\n                        saving: false\n                    });\n                    if (that.props.history) {\n                        that.props.history.goBack();\n                        that.props.history.replace('/patients/appointments');\n                    }\n\n                    if (that.props.loadData)\n                        that.props.loadData();\n                    if (data) {\n                        // console.log(data)\n                        displayMessage(SUCCESS_MSG_TYPE, \"Appointment Created Successfully\");\n                    }\n                };\n                const errorFn = function () {\n                    that.setState({\n                        saving: false\n                    });\n                };\n                if (this.state.appointment) {\n                    putAPI(interpolate(APPOINTMENT_API, [this.state.appointment.id]), formData, successFn, errorFn);\n                } else {\n                    postAPI(ALL_APPOINTMENT_API, formData, successFn, errorFn);\n                }\n            }\n        });\n\n    }\n\n    handlePatientSelect = (event) => {\n        if (event) {\n            const that = this;\n            const successFn = function (data) {\n                that.setState({\n                    patientDetails: data\n                });\n            };\n            const errorFn = function () {\n            };\n            getAPI(interpolate(PATIENT_PROFILE, [event]), successFn, errorFn);\n        }\n    }\n    // handleChange = (event) => {\n    //     this.setState({})\n\n    //     // this.setState({ value: event.target.value });\n    // };\n    handleClick = (e) => {\n\n        this.setState({\n            patientDetails: null\n        })\n\n    };\n\n    loadAppointmentList(){\n        const that=this;\n        const successFn = function(data){\n            that.setState({\n                appointmentList:data,\n            })\n        }\n        const errorFn =function(data){\n        }\n        const apiParams={\n            start_time:moment(this.state.timeToCheckBlock.schedule_at).format(),\n            end_time:moment(this.state.timeToCheckBlock.schedule_at).add(this.state.timeToCheckBlock.slot, 'minutes').format(),\n            doctor:this.state.timeToCheckBlock.doctor,\n        }\n        getAPI(interpolate(APPOINTMENT_SCHEDULE,[this.props.active_practiceId]),successFn,errorFn,apiParams);\n    }\n\n    render() {\n        const that = this;\n        const formItemLayout = (this.props.formLayout ? this.props.formLayout : {\n            labelCol: {span: 6},\n            wrapperCol: {span: 14},\n        });\n        const formPatients = (this.props.formLayout ? this.props.formLayout : {\n            wrapperCol: {offset: 6, span: 14},\n        });\n        const {getFieldDecorator} = this.props.form;\n\n        // let doctorArray=this.state.practice_doctors;\n        // let loginUser =that.props.user;\n        // const doctorId={};\n        // let flag=true;\n        // doctorArray.forEach(function (items) {\n        //    if (items.user.id == that.props.user.id){\n        //        doctorId.id=that.props.user.id;\n        //        flag=false;\n        //        return false;\n        //    }\n        // },function () {\n        //     doctorId.id=doctorArray[0].user.id;\n        // });\n\n        const treatmentNotesOption = [];\n        if (this.state.treatmentNotes) {\n            this.state.treatmentNotes.forEach(function (drug) {\n                treatmentNotesOption.push({label: drug.name, value: drug.id});\n            })\n        }\n        const categoryOptions = [];\n        if (this.state.appointmentCategories) {\n            this.state.appointmentCategories.forEach(function (category) {\n                categoryOptions.push({label: category.name, value: category.id});\n            })\n        }\n        let appointmentTime = this.state.appointment ? this.state.appointment.schedule_at : this.props.startTime;\n        if (!appointmentTime) {\n            appointmentTime = new moment(new Date()).format();\n        }\n        const fields = [];\n\n        return (\n<Card>\n            <Spin spinning={this.state.saving}>\n                <Form onSubmit={this.handleSubmit}>\n                    {this.props.title ? <h2>{this.props.title}</h2> : null}\n\n                    <FormItem key=\"schedule_at\" label=\"Appointment Schedule\" {...formItemLayout}>\n                        {getFieldDecorator(\"schedule_at\",\n                            {\n                                initialValue: appointmentTime ? moment(appointmentTime) : moment(this.props.startTime),\n                                rules: [{required: true, message: REQUIRED_FIELD_MESSAGE}],\n                            })(\n                            <DatePicker\n                              showTime={{use12Hours: true}}\n                              format=\"YYYY/MM/DD hh:mm a\"\n                              allowClear={false}\n                              onChange={(value) => this.setBlockedTiming(\"schedule_at\", value)}\n                            />\n                        )}\n                        {this.state.practiceOutsideAvailableTiming ? (\n                            <Alert\n                              message=\"Selected time is outside available clinic time!!\"\n                              type=\"warning\"\n                              showIcon\n                            />\n                          ) : null}\n                        {this.state.practiceBlock ? (\n                            <Alert\n                              message=\"Selected time is blocked in this clinic !!\"\n                              type=\"warning\"\n                              showIcon\n                            />\n                          ) : null}\n                    </FormItem>\n                    <FormItem\n                      key=\"slot\"\n                      {...formItemLayout}\n                      label=\"Time Slot\"\n                    >\n                        {getFieldDecorator(\"slot\", {\n                            initialValue: this.state.appointment ? this.state.appointment.slot : 10,\n                            rules: [{required: true, message: REQUIRED_FIELD_MESSAGE}],\n                        })(\n                            <InputNumber min={1} onChange={(value) => this.setBlockedTiming(\"slot\", value)} />\n                        )}\n                        <span className=\"ant-form-text\">mins\n                        <Row style={{float:\"right\"}}>\n                            <Col span={24}>\n                                {this.state.appointmentList && this.state.appointmentList.length>0 ? (\n                                    <div span={5} style={{float:\"right\"}}>\n                                        <ul style={{listStyle:\"none\",display:\"inline-flex\",paddingLeft:'15px',paddingRight: \"10px\"}}>\n                                        {that.state.appointmentList.map((item) =>(\n<li style={{border: '1px solid #bbb', marginLeft: \"13px\",padding:\" 0.01em 14px\"}}><span style={{width: 'calc(100% - 60px)'}}><b>{moment(item.schedule_at).format(\"LT\")}</b>&nbsp;{item.patient.user.first_name}</span>\n                                        &nbsp;<b>with</b> &nbsp;{item.doctor_data.user.first_name}\n</li>\n))}\n\n                                        </ul>\n                                    </div>\n                                  )\n\n                                :null}\n                            </Col>\n                        </Row>\n\n                        </span>\n                        {this.state.appointmentList && this.state.appointmentList.length>0 ?(\n<>\n\n                                <Alert\n                                  message=\"Selected time slot have assigned someone else !! please select another slot.\"\n                                  type=\"warning\"\n                                  showIcon\n                                />\n                                {/* <div style={{backgroundColor:\"#fffbe6\"}}>\n                                    <p style={{color:red ,padding:\"7px\"}}><Icon type=\"exclamation-circle\" theme=\"twoTone\" twoToneColor=\"#faad14\" /> </p>\n                                </div> */}\n\n</>\n)\n                        :null}\n                    </FormItem>\n\n\n                    {that.state.patientDetails ? (\n                        <FormItem key=\"id\" value={this.state.patientDetails.id} {...formPatients}>\n                            <Card bordered={false} style={{background: '#ECECEC'}}>\n                                <Meta\n                                  avatar={(this.state.patientDetails.image ? <Avatar src={makeFileURL(this.state.patientDetails.image)} /> : (\n                                        <Avatar style={{backgroundColor: '#87d068'}}>\n                                            {this.state.patientDetails.user.first_name ? this.state.patientDetails.user.first_name.charAt(0) :\n                                                <Icon type=\"user\" />}\n                                        </Avatar>\n                                      ))}\n\n                                  title={this.state.patientDetails.user.first_name}\n                                  description={(\n                                        <span>{that.props.activePracticePermissions.PatientPhoneNumber ? this.state.patientDetails.user.mobile : hideMobile(this.state.patientDetails.user.mobile)}<br />\n                                    <Button type=\"primary\" style={{float: 'right'}} onClick={this.handleClick}>Add New\n                                    Patient\n                                    </Button>\n                                        </span>\n                                      )}\n                                />\n\n\n                            </Card>\n                        </FormItem>\n                      )\n                        : (\n<div>\n                            <FormItem key=\"patient_name\" label=\"Patient Name\" {...formItemLayout}>\n                                {getFieldDecorator(\"patient_name\", {\n                                    initialValue: this.state.appointment ? this.state.appointment.patient.user.first_name : null,\n                                    rules: [{required: true, message: REQUIRED_FIELD_MESSAGE}],\n                                })(\n                                    <AutoComplete\n                                      placeholder=\"Patient Name\"\n                                      showSearch\n                                      onSearch={this.searchPatient}\n                                      defaultActiveFirstOption={false}\n                                      showArrow={false}\n                                      filterOption={false}\n                                      onSelect={this.handlePatientSelect}\n                                    >\n                                        {this.state.patientListData.map((option) => (\n<AutoComplete.Option\n  value={option.id.toString()}\n>\n                                            <List.Item style={{padding: 0}}>\n                                                <List.Item.Meta\n                                                  avatar={(option.image ? <Avatar src={makeFileURL(option.image)} /> : (\n                                                        <Avatar style={{backgroundColor: '#87d068'}}>\n                                                            {option.user.first_name ? option.user.first_name.charAt(0) :\n                                                                <Icon type=\"user\" />}\n                                                        </Avatar>\n                                                      ))}\n                                                  title={`${option.user.first_name  } (ID:${  option.custom_id?option.custom_id:option.user.id  })`}\n                                                  description={that.props.activePracticePermissions.PatientPhoneNumber ? option.user.mobile : hideMobile(option.user.mobile)}\n                                                />\n\n                                            </List.Item>\n</AutoComplete.Option>\n))}\n                                    </AutoComplete>\n                                )}\n                            </FormItem>\n                            <FormItem key=\"patient_mobile\" label=\"Mobile Number\" {...formItemLayout}>\n                                {getFieldDecorator(\"patient_mobile\", {\n                                    initialValue: this.state.appointment ? this.state.appointment.patient.user.mobile : null,\n                                    rules: [{required: true, message: REQUIRED_FIELD_MESSAGE}],\n                                })(\n                                    <Input placeholder=\"Mobile Number\" />\n                                )}\n                            </FormItem>\n                            <FormItem key=\"patient_email\" label=\"Email Address\" {...formItemLayout}>\n                                {getFieldDecorator(\"patient_email\", {\n                                    initialValue: this.state.appointment ? this.state.appointment.patient.user.email : null,\n                                    rules: [{type: 'email', message: 'The input is not valid E-mail!'}],\n                                })(\n                                    <Input placeholder=\"Email Address\" />\n                                )}\n                            </FormItem>\n\n</div>\n)}\n\n                    <FormItem key=\"doctor\" {...formItemLayout} label=\"Doctor\">\n                        {getFieldDecorator(\"doctor\", {initialValue: this.state.appointment ? this.state.appointment.doctor:this.state.selectedDoctor}, {\n                            rules: [{required: true, message: REQUIRED_FIELD_MESSAGE}],\n                        })(\n                            <Select\n                              placeholder=\"Doctor\"\n                              onChange={(value) => this.setBlockedTiming(\"doctor\", value)}\n                            >\n                                {this.state.practice_doctors.map((option) => (\n<Select.Option\n  value={option.id}\n>{(`${option.user.first_name  }(${  option.user.email  })`)}\n</Select.Option>\n))}\n                            </Select>\n                        )}\n                        {this.state.doctorBlock ? (\n                            <Alert\n                              message=\"Selected time is blocked for selected doctor in this clinic!!\"\n                              type=\"warning\"\n                              showIcon\n                            />\n                          ) : null}\n                        {this.state.doctorOutsideAvailableTiming ? (\n                            <Alert\n                              message=\"Selected time is out of doctor's visit time in this clinic!!\"\n                              type=\"warning\"\n                              showIcon\n                            />\n                          ) : null}\n                        {this.state.appointmentList && this.state.appointmentList.length>0 ?(\n<>\n                            <Alert\n                              message=\"Selected time doctor's busy on other patients in  this clinic!!\"\n                              type=\"warning\"\n                              showIcon\n                            />\n</>\n):null}\n                    </FormItem>\n                    <FormItem key=\"category\" {...formItemLayout} label=\"Category\">\n                        {getFieldDecorator(\"category\", {initialValue: this.state.appointment ? this.state.appointment.category : null}, {\n                            rules: [{required: true, message: REQUIRED_FIELD_MESSAGE}],\n                        })(\n                            <Select placeholder=\"Category\">\n                                {categoryOptions.map((option) => (\n<Select.Option\n  value={option.value}\n>{option.label}\n</Select.Option>\n))}\n                            </Select>\n                        )}\n                    </FormItem>\n                    {/* <FormItem key=\"procedure\" {...formItemLayout} label=\"Procedures Planned\">\n                        {getFieldDecorator(\"procedure\", {initialValue: this.state.appointment ? this.state.appointment.procedure_data.treatment_plans.id :null}, {\n                            rules: [{required: true, message: REQUIRED_FIELD_MESSAGE}],\n                        })(\n                            <Select placeholder=\"Procedures Planned\" mode={\"multiple\"}>\n                                {this.state.procedure_category && this.state.procedure_category.map((drug) =>\n                                    <Select.Option\n                                        value={drug.id}>{drug.name}</Select.Option>\n                                )}\n                            </Select>\n                        )}\n                    </FormItem> */}\n                    {this.state.appointment ? (\n                        <FormItem key=\"status\" {...formItemLayout} label=\"Status\">\n                            {getFieldDecorator(\"status\", {initialValue: this.state.appointment.status})\n                            (\n                                <Select placeholder=\"Status\">\n                                    {APPOINTMENT_STATUS.map((option) => (\n<Select.Option\n  value={option.value}\n>{option.label}\n</Select.Option>\n))}\n                                </Select>\n                            )}\n                        </FormItem>\n                      ) : null}\n\n\n                    <FormItem key=\"notes\" {...formItemLayout} label=\"Notes\">\n                        {getFieldDecorator(\"notes\", {initialValue: this.state.appointment ? this.state.appointment.notes : null}, {\n                            rules: [{required: true, message: REQUIRED_FIELD_MESSAGE}],\n                        })(\n                            <Input placeholder=\"Notes\" />\n                        )}\n                    </FormItem>\n                    <FormItem {...formItemLayout}>\n                        <Button loading={that.state.saving} type=\"primary\" htmlType=\"submit\" style={{margin: 5}}>\n                            Submit\n                        </Button>\n                        {that.props.history ? (\n                            <Button style={{margin: 5}} onClick={() => that.props.history.goBack()}>\n                                Cancel\n                            </Button>\n                          ) : null}\n                    </FormItem>\n                </Form>\n            </Spin>\n</Card>\n)\n    }\n}\n","import React from \"react\";\nimport {Route} from \"react-router\";\nimport {Button, Card, Form, Icon, Row} from \"antd\";\nimport {Redirect} from 'react-router-dom'\nimport moment from 'moment';\nimport DynamicFieldsForm from \"../common/DynamicFieldsForm\";\nimport {\n    CHECKBOX_FIELD,\n    SINGLE_CHECKBOX_FIELD,\n    DATE_PICKER,\n    NUMBER_FIELD,\n    SUCCESS_MSG_TYPE,\n    INPUT_FIELD,\n    RADIO_FIELD,\n    SELECT_FIELD,\n    DOCTORS_ROLE\n} from \"../../constants/dataKeys\";\nimport {\n    PATIENTS_LIST,\n    ALL_APPOINTMENT_API,\n    APPOINTMENT_CATEGORIES,\n    PRACTICESTAFF,\n    PROCEDURE_CATEGORY, APPOINTMENT_API, SINGLE_PRACTICE_STAFF_API, SEARCH_PATIENT\n} from \"../../constants/api\";\nimport {getAPI, interpolate, displayMessage} from \"../../utils/common\";\nimport CreateAppointmentForm from \"./CreateAppointmentForm\";\n\n\nclass CreateAppointment extends React.Component {\n    constructor(props){\n        super(props);\n        this.state={\n\n        }\n    }\n\n    render() {\n\n        const formProp = {\n            successFn (data) {\n                displayMessage(SUCCESS_MSG_TYPE, \"success\")\n\n            },\n            errorFn () {\n\n            },\n            onFieldsDataChange (data) {\n                // console.log(data);\n            },\n            action: ALL_APPOINTMENT_API,\n            method: \"post\",\n        };\n        const defaultValues = [{\"key\": \"practice\", \"value\": this.props.active_practiceId}];\n        const that = this;\n        let editformProp;\n        // if (this.state.appointment) {\n        //     editformProp = {\n        //         successFn: function (data) {\n        //             displayMessage(SUCCESS_MSG_TYPE, \"success\");\n        //             console.log(data);\n        //         },\n        //         errorFn: function () {\n        //\n        //         },\n        //         onFieldsDataChange: function (data) {\n        //             that.setState(function (prevState) {\n        //                 return {appointment: {...prevState.appointment, ...data}}\n        //             });\n        //         },\n        //         action: interpolate(APPOINTMENT_API, [this.state.appointment.id]),\n        //         method: \"put\",\n        //     }\n        //     defaultValues = [{\"key\": \"practice\", \"value\": this.state.appointment.practice}];\n        //\n        // }\n        const TestFormLayout = Form.create()(CreateAppointmentForm);\n        return (\n<Row>\n            <Route\n              exact\n              path='/calendar/:appointmentid/edit-appointment'\n              render={(route) => (this.props.match.params.appointmentid ? (\n                       <TestFormLayout\n                         {...route}\n                         {...this.props}\n                         defaultValues={defaultValues}\n                         title=\"Edit Appointment\"\n                         changeRedirect={this.changeRedirect}\n                       />\n                     ) :\n                       <Redirect to=\"/patients/appointments/\" />)}\n            />\n\n            <Route\n              exact\n              path='/calendar/create-appointment'\n              render={(route) => (\n<TestFormLayout\n  {...this.props}\n  defaultValues={defaultValues}\n  changeRedirect={this.changeRedirect}\n  {...route}\n  title=\"ADD Appointment \"\n/>\n)}\n            />\n\n</Row>\n)\n    }\n\n\n}\n\nexport default CreateAppointment;\n","import React, {Component} from \"react\";\nimport moment from \"moment\";\nimport \"react-big-calendar/lib/addons/dragAndDrop/styles.css\";\nimport \"react-big-calendar/lib/css/react-big-calendar.css\";\nimport withDragAndDrop from \"react-big-calendar/lib/addons/dragAndDrop\";\nimport TimeGrid from 'react-big-calendar/lib/TimeGrid';\nimport {Calendar as BigCalendar, momentLocalizer, Navigate} from 'react-big-calendar';\nimport {\n    Modal,\n    Row,\n    Col,\n    Button,\n    Divider,\n    Layout,\n    Spin,\n    Menu,\n    Dropdown,\n    Icon,\n    DatePicker, Checkbox,\n    Radio\n} from \"antd\";\nimport \"./app.css\";\nimport {Route, Link, Switch} from \"react-router-dom\";\nimport * as dates from 'date-arithmetic'\nimport {DOCTORS_ROLE, SUCCESS_MSG_TYPE, WARNING_MSG_TYPE,} from \"../../constants/dataKeys\";\nimport {getAPI, putAPI, interpolate, displayMessage} from \"../../utils/common\";\nimport {\n    APPOINTMENT_PERPRACTICE_API,\n    APPOINTMENT_API,\n    PRACTICESTAFF,\n    CALENDER_SETTINGS,\n    BLOCK_CALENDAR, DOCTOR_VISIT_TIMING_API\n} from \"../../constants/api\";\nimport EventComponent from \"./EventComponent\";\nimport {\n    getCalendarSettings,\n    loadAppointmentCategories,\n    saveCalendarSettings, TimeSlotWrapper\n} from \"../../utils/calendarUtils\";\nimport CalendarRightPanel from \"./CalendarRightPanel\";\nimport {\n    CANCELLED_STATUS,\n    DAY_KEYS,\n    SCHEDULE_STATUS,\n} from \"../../constants/hardData\";\nimport CreateAppointment from \"./CreateAppointment\";\nimport PermissionDenied from \"../common/errors/PermissionDenied\";\n\nconst localizer = momentLocalizer(moment);\nconst DragAndDropCalendar = withDragAndDrop(BigCalendar);\nconst {Content} = Layout;\nconst {confirm} = Modal;\n\nclass App extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            startTime: null,\n            visiblePopover: false,\n            events: [],\n            filteredEvent: [],\n            appointments: [],\n            practice_doctors: [],\n            practice_categories: [],\n            practice_staff: [],\n            doctors_object: null,\n            categories_object: null,\n            calendarTimings: null,\n            timing: {},\n            loading: true,\n            selectedDoctor: 'ALL',\n            selectedCategory: 'ALL',\n            selectedDate: moment(),\n            filterType: 'DOCTOR',\n            calendarType: 'APPOINTMENTS',\n            doctorsAppointmentCount: {},\n            categoriesAppointmentCount: {},\n            blockedCalendar: [],\n            showCalendarEvents: true,\n            showAppointments: true,\n            doctorTiming: {},\n            ...getCalendarSettings()\n        }\n        ;\n        this.onSelectSlot = this.onSelectSlot.bind(this);\n        this.onSelectEvent = this.onSelectEvent.bind(this);\n        this.moveEvent = this.moveEvent.bind(this)\n        this.resizeEvent = this.resizeEvent.bind(this);\n        this.loadDoctors = this.loadDoctors.bind(this);\n        this.eventStyleGetter = this.eventStyleGetter.bind(this);\n        this.loadCalendarTimings = this.loadCalendarTimings.bind(this);\n        this.loadCalendarTimings()\n    }\n\n    componentDidMount() {\n        this.appointmentList(moment().startOf('day'), moment().endOf('day'));\n        this.loadDoctors();\n        loadAppointmentCategories(this);\n    }\n\n    changeCalendarType = (value) => {\n        const that = this;\n        this.setState({\n            calendarType: value,\n            selectedDoctor: 'ALL',\n            selectedCategory: 'ALL',\n            filterType: 'DOCTOR',\n        }, function () {\n            if (value == 'APPOINTMENTS') {\n                that.changeFilter('selectedDoctor', 'ALL');\n\n            } else if (value == 'AVAILABILITY') {\n                if (that.state.practice_doctors.length) {\n                    that.changeFilter('selectedDoctor', that.state.practice_doctors[0].id);\n                }\n            }\n        })\n    }\n\n    loadDoctors() {\n        const that = this;\n        that.setState({\n            doctorLoading: true\n        })\n        const successFn = function (data) {\n            const doctors = [];\n            const staff = [];\n            const doctor_object = {}\n            data.staff.forEach(function (usersdata) {\n                if (usersdata.role == DOCTORS_ROLE) {\n                    doctors.push(usersdata);\n                    doctor_object[usersdata.id] = usersdata;\n                } else {\n                    staff.push(usersdata);\n                }\n            });\n            that.setState({\n                practice_staff: staff,\n                practice_doctors: doctors,\n                doctors_object: doctor_object,\n                doctorLoading: false\n            })\n        }\n        const errorFn = function () {\n            that.setState({\n                doctorLoading: false\n            })\n        };\n        getAPI(interpolate(PRACTICESTAFF, [this.props.active_practiceId]), successFn, errorFn);\n    }\n\n    loadCalendarTimings() {\n        const that = this;\n        const successFn = function (data) {\n            let dataObject = {};\n            if (data.length)\n                dataObject = data[0];\n            const timing = {};\n            DAY_KEYS.forEach(function (dayKey) {\n                timing[dayKey] = {};\n                if (dataObject.visting_hour_same_week) {\n                    timing[dayKey].startTime = moment(dataObject.first_start_time, 'HH:mm:ss');\n                    timing[dayKey].endTime = moment(dataObject.second_end_time, 'HH:mm:ss');\n                    if (dataObject.is_two_sessions) {\n                        timing[dayKey].lunch = true;\n                        timing[dayKey].lunchStartTime = moment(dataObject.first_end_time, 'HH:mm:ss');\n                        timing[dayKey].lunchEndTime = moment(dataObject.second_start_time, 'HH:mm:ss');\n                    } else {\n                        timing[dayKey].lunch = false\n                    }\n                } else if (dataObject[dayKey]) {\n                    timing[dayKey].startTime = moment(dataObject[`first_start_time_${dayKey}`], 'HH:mm:ss');\n                    timing[dayKey].endTime = moment(dataObject[`second_end_time_${dayKey}`], 'HH:mm:ss');\n                    if (dataObject[`is_two_sessions_${dayKey}`]) {\n                        timing[dayKey].lunch = true;\n                        timing[dayKey].lunchStartTime = moment(dataObject[`first_end_time_${dayKey}`], 'HH:mm:ss');\n                        timing[dayKey].lunchEndTime = moment(dataObject[`second_start_time_${dayKey}`], 'HH:mm:ss');\n                    } else {\n                        timing[dayKey].lunch = false\n                    }\n                } else {\n                    timing[dayKey] = null\n                }\n            });\n            that.setState({\n                calendarTimings: {\n                    ...dataObject,\n                },\n                timing: {...timing},\n                loading: false\n            });\n        };\n        const errorFn = function () {\n            that.setState({\n                loading: false\n            })\n        };\n        getAPI(interpolate(CALENDER_SETTINGS, [this.props.active_practiceId]), successFn, errorFn);\n    }\n\n    /** *\n     * Calenders Functions\n     * */\n\n\n    moveEvent({event, start, end, isAllDay: droppedOnAllDaySlot}) {\n        if (event.appointment.status != SCHEDULE_STATUS) {\n            displayMessage(WARNING_MSG_TYPE, \"Action Not Allowed\");\n            return true;\n        }\n        const {events} = this.state;\n        const idx = events.indexOf(event)\n        let {allDay} = event\n        const that = this;\n        if (!event.allDay && droppedOnAllDaySlot) {\n            allDay = true\n        } else if (event.allDay && !droppedOnAllDaySlot) {\n            allDay = false\n        }\n        const updatedEvent = {...event, start, end, allDay}\n        const nextEvents = [...events]\n        const changedEvent = {\n            // \"id\": event.id,\n            \"schedule_at\": moment(start).format(),\n            \"slot\": parseInt((end - start) / 60000)\n        };\n        const successFn = function (data) {\n            displayMessage(SUCCESS_MSG_TYPE, \"time changed\");\n            nextEvents.splice(idx, 1, updatedEvent);\n            that.setState({\n                events: nextEvents,\n            }, function () {\n                that.refreshFilterList();\n            })\n        }\n        const errorFn = function () {\n        }\n        confirm({\n            title: 'Are you sure to change the time of this appointment?',\n            // content: 'Some descriptions',\n            onOk() {\n                putAPI(interpolate(APPOINTMENT_API, [event.id]), changedEvent, successFn, errorFn);\n            },\n            onCancel() {\n            },\n        });\n\n    }\n\n    resizeEvent = ({event, start, end}) => {\n        if (event.appointment.status != SCHEDULE_STATUS) {\n            displayMessage(WARNING_MSG_TYPE, \"Action Not Allowed\");\n            return true;\n        }\n        const {events} = this.state\n        let changedEvent = {};\n        const that = this;\n        const nextEvents = [];\n        events.forEach((existingEvent) => {\n            if (existingEvent.id == event.id) {\n                changedEvent = {\n                    // \"id\": event.id,\n                    \"schedule_at\": moment(start).format(),\n                    \"slot\": parseInt((end - start) / 60000)\n                };\n            }\n        })\n\n        const successFn = function (data) {\n            displayMessage(SUCCESS_MSG_TYPE, \"time changed\");\n            events.forEach((existingEvent) => {\n                nextEvents.push(existingEvent.id == event.id\n                    ? {...existingEvent, start, end}\n                    : existingEvent)\n            });\n            that.setState({\n                events: nextEvents,\n            }, function () {\n                that.refreshFilterList();\n            })\n        }\n        const errorFn = function () {\n        }\n        confirm({\n            title: 'Are you sure to change the time of this appointment?',\n            // content: 'Some descriptions',\n            onOk() {\n                putAPI(interpolate(APPOINTMENT_API, [event.id]), changedEvent, successFn, errorFn);\n            },\n            onCancel() {\n                // console.log('Cancel');\n            },\n        });\n    }\n\n\n    onSelectSlot(value) {\n        const time = moment(value.start).format();\n        if (value.action == \"doubleClick\") {\n            this.setState({\n                startTime: time,\n                redirect: true\n            });\n            this.props.history.push('/calendar/create-appointment')\n        }\n    }\n\n\n    onSelectEvent(event, e) {\n        this.setState({\n            visiblePopover: true\n        })\n        this.props.history.push(`/patients/appointments/${  event.id}`)\n    }\n\n\n    /** *\n     * List and style settings\n     * */\n\n\n    appointmentList(start, end) {\n        const that = this;\n        that.setState({\n            loading: true\n        });\n        const successFn = function (data) {\n            that.setState(function (prevState) {\n                const previousEvent = prevState.events;\n                const newEvents = [];\n                const filteredEvent = [];\n                const doctorsAppointmentCount = {};\n                const categoriesAppointmentCount = {};\n                // newEvents.concat(previousEvent);\n                data.forEach(function (appointment) {\n                    const endtime = new moment(appointment.schedule_at).add(appointment.slot, 'minutes')\n                    const event = {\n                        appointment,\n                        start: new Date(moment(appointment.schedule_at)),\n                        end: new Date(endtime),\n                        title: appointment.patient.user.first_name,\n                        id: appointment.id,\n                        doctor: appointment.doctor,\n                        loading: false\n                    };\n\n                    if (doctorsAppointmentCount.ALL) {\n                        doctorsAppointmentCount.ALL.ALL += 1\n                        if (appointment.status == CANCELLED_STATUS) {\n                            doctorsAppointmentCount.ALL.CANCELLED += 1;\n                        }\n                    } else {\n                        doctorsAppointmentCount.ALL = {}\n                        doctorsAppointmentCount.ALL.ALL = 1;\n                        if (appointment.status == CANCELLED_STATUS) {\n                            doctorsAppointmentCount.ALL.CANCELLED = 1;\n                        } else {\n                            doctorsAppointmentCount.ALL.CANCELLED = 0;\n                        }\n                    }\n                    if (appointment.doctor && doctorsAppointmentCount[appointment.doctor]) {\n                        doctorsAppointmentCount[appointment.doctor].ALL += 1\n                        if (appointment.status == CANCELLED_STATUS) {\n                            doctorsAppointmentCount[appointment.doctor].CANCELLED += 1;\n                        }\n                    } else {\n                        doctorsAppointmentCount[appointment.doctor] = {}\n                        doctorsAppointmentCount[appointment.doctor].ALL = 1;\n                        if (appointment.status == CANCELLED_STATUS) {\n                            doctorsAppointmentCount[appointment.doctor].CANCELLED = 1;\n                        } else {\n                            doctorsAppointmentCount[appointment.doctor].CANCELLED = 0;\n                        }\n                    }\n                    if (appointment.category && doctorsAppointmentCount[appointment.category]) {\n                        categoriesAppointmentCount[appointment.category] += 1\n                    } else {\n                        categoriesAppointmentCount[appointment.category] = 1;\n                    }\n                    newEvents.push(event);\n                    if (!prevState.filterCancelledAppointment && event.appointment.status == CANCELLED_STATUS) {\n                        return true;\n                    }\n                    if ((prevState.filterType == 'DOCTOR' && prevState.selectedDoctor == 'ALL') || (prevState.filterType == 'CATEGORY' && prevState.selectedCategory == 'ALL')) {\n                        filteredEvent.push(event)\n                    } else if (prevState.filterType == 'DOCTOR' && event.doctor == prevState.selectedDoctor) {\n                        filteredEvent.push(event)\n                    } else if (prevState.filterType == 'CATEGORY' && event.appointment.category == prevState.selectedCategory) {\n                        filteredEvent.push(event)\n                    }\n\n                });\n                return {\n                    events: newEvents,\n                    filteredEvent,\n                    doctorsAppointmentCount: {...doctorsAppointmentCount},\n                    categoriesAppointmentCount: {...categoriesAppointmentCount, 'ALL': data.length},\n                    appointments: data,\n                    loading: false\n                }\n            });\n        }\n        const errorFn = function () {\n            that.setState({\n                loading: false\n            })\n        }\n        getAPI(interpolate(APPOINTMENT_PERPRACTICE_API, [this.props.active_practiceId]), successFn, errorFn, {\n            start: start.format('YYYY-MM-DD'),\n            end: end.format('YYYY-MM-DD')\n        });\n        this.blockedCalendarTiming(start, end)\n    }\n\n    blockedCalendarTiming = (start, end) => {\n        const that = this;\n        const successFn = function (data) {\n            that.setState({\n                blockedCalendar: data\n            })\n        }\n        const errorFn = function () {\n\n        }\n        getAPI(BLOCK_CALENDAR, successFn, errorFn, {\n            practice: this.props.active_practiceId,\n            cal_fdate: start.format(),\n            cal_tdate: end.format()\n        })\n    };\n\n    eventStyleGetter(event, start, end, isSelected) {\n        const {doctor} = event;\n        const {category} = event.appointment;\n        let color_object = null;\n        const style = {\n            borderRadius: '0px',\n            opacity: 0.8,\n            border: '5px',\n            color: 'white',\n            display: 'block'\n        };\n        if (event.appointment.status == CANCELLED_STATUS) {\n            style.backgroundColor = '#aaa';\n            style.textDecoration = 'line-through';\n        } else {\n            if (this.state.filterType == 'DOCTOR') {\n                if (doctor && this.state.doctors_object && this.state.doctors_object[doctor]) {\n                    color_object = this.state.doctors_object[doctor].calendar_colour;\n                } else {\n                    color_object = 'black';\n                }\n            } else if (this.state.filterType == 'CATEGORY') {\n                if (category && this.state.categories_object && this.state.categories_object[category]) {\n                    color_object = `#${  this.state.categories_object[category].calendar_colour}`;\n                } else {\n                    color_object = 'black';\n                }\n            }\n            style.backgroundColor = color_object;\n        }\n        return {\n            style\n        };\n    }\n\n    onRangeChange = (e) => {\n        if (e.start && e.end) {\n            this.appointmentList(moment(e.start), moment(e.end));\n            if (moment(e.start).date() == 1) {\n                this.setState({\n                    selectedDate: moment(e.start)\n                })\n            } else {\n                const newDate = moment(e.start);\n                this.setState({\n                    selectedDate: newDate.month(newDate.month() + 1).date(1)\n                })\n            }\n        } else if (e.length) {\n            if (e.length == 7) {\n                this.appointmentList(moment(e[0]).subtract(1, 'day'), moment(e[e.length - 1]).subtract(1, 'day'));\n            } else {\n                this.appointmentList(moment(e[0]), moment(e[e.length - 1]));\n            }\n            this.setState({\n                selectedDate: moment(e[0])\n            });\n        }\n    }\n\n    onSelectedDateChange = (e) => {\n        const that = this;\n        this.setState({\n            selectedDate: moment(e)\n        },function(){\n            that.appointmentList(moment(e).startOf('day'),moment(e).endOf('day'));\n        });\n    }\n\n    setFilterType = (e) => {\n        const that = this;\n        this.setState({\n            filterType: e.key,\n            selectedDoctor: 'ALL',\n            selectedCategory: 'ALL'\n        }, function () {\n            if (e.key == 'DOCTOR') {\n                that.changeFilter('selectedDoctor', 'ALL')\n            } else if (e.key == 'CATEGORY') {\n                that.changeFilter('selectedCategory', 'ALL')\n            }\n        })\n    }\n\n    setFilter = (type, value) => {\n        const that = this;\n        this.setState({\n            [type]: value\n        }, function () {\n            saveCalendarSettings(type, value);\n            that.changeFilter('tempKey', 'ALL')\n        })\n    }\n\n    refreshFilterList = () => {\n        const stateValues = this.state;\n        if (stateValues.filterType == 'DOCTOR') {\n            this.changeFilter('selectedDoctor', stateValues.selectedDoctor)\n        } else if (stateValues.filterType == 'CATEGORY') {\n            this.changeFilter('selectedCategory', stateValues.selectedCategory)\n        }\n    }\n\n    changeFilter = (type, value) => {\n        if (type == \"selectedDoctor\" && value != 'ALL') {\n            this.loadDoctorTiming(value)\n        }\n        this.setState(function (prevState) {\n            const filteredEvent = [];\n            prevState.events.forEach(function (event) {\n                if (!prevState.filterCancelledAppointment && event.appointment.status == CANCELLED_STATUS) {\n                    return true;\n                }\n                if (value == 'ALL') {\n                    filteredEvent.push(event)\n                } else if (type == \"selectedDoctor\" && event.doctor == value) {\n                    filteredEvent.push(event)\n                } else if (type == \"selectedCategory\" && event.appointment.category == value) {\n                    filteredEvent.push(event)\n                }\n            })\n            return {\n                [type]: value,\n                filteredEvent\n            }\n        })\n    };\n\n    changeState = (type, value) => {\n        this.setState({\n            [type]: value\n        }, function () {\n            saveCalendarSettings(type, value)\n        })\n    }\n\n    loadDoctorTiming = (id) => {\n        const that = this;\n        const successFn = function (data) {\n            let dataObject = {};\n            if (data.length)\n                dataObject = data[0];\n            const timing = {};\n            DAY_KEYS.forEach(function (dayKey) {\n                timing[dayKey] = {};\n                if (dataObject.visting_hour_same_week) {\n                    timing[dayKey].startTime = moment(dataObject.first_start_time, 'HH:mm:ss');\n                    timing[dayKey].endTime = moment(dataObject.second_end_time, 'HH:mm:ss');\n                    if (dataObject.is_two_sessions) {\n                        timing[dayKey].lunch = true;\n                        timing[dayKey].lunchStartTime = moment(dataObject.first_end_time, 'HH:mm:ss');\n                        timing[dayKey].lunchEndTime = moment(dataObject.second_start_time, 'HH:mm:ss');\n                    } else {\n                        timing[dayKey].lunch = false\n                    }\n                } else if (dataObject[dayKey]) {\n                    timing[dayKey].startTime = moment(dataObject[`first_start_time_${dayKey}`], 'HH:mm:ss');\n                    timing[dayKey].endTime = moment(dataObject[`second_end_time_${dayKey}`], 'HH:mm:ss');\n                    if (dataObject[`is_two_sessions_${dayKey}`]) {\n                        timing[dayKey].lunch = true;\n                        timing[dayKey].lunchStartTime = moment(dataObject[`first_end_time_${dayKey}`], 'HH:mm:ss');\n                        timing[dayKey].lunchEndTime = moment(dataObject[`second_start_time_${dayKey}`], 'HH:mm:ss');\n                    } else {\n                        timing[dayKey].lunch = false\n                    }\n                } else {\n                    timing[dayKey] = null\n                }\n            });\n            that.setState(function (prevState) {\n                return {doctorTiming: {...prevState.doctorTiming, [id]: {...timing}}}\n            });\n        }\n        const errorFn = function () {\n\n        };\n        getAPI(interpolate(DOCTOR_VISIT_TIMING_API, [this.props.active_practiceId]), successFn, errorFn, {\n            doctor: id\n        });\n    }\n\n    render() {\n        const that = this;\n        let {startTime} = this.state;\n        // let startTime = null;\n        let endTime = null;\n        if (this.state.calendarTimings) {\n            // console.log(new Date(new moment(this.state.calendarTimings.start_time, 'HH:mm:ss')));\n            startTime = new Date(new moment(this.state.calendarTimings.start_time, 'HH:mm:ss'));\n            endTime = new Date(new moment(this.state.calendarTimings.end_time, 'HH:mm:ss'))\n\n        }\n        const summaryEvents = [];\n        // if(this.state.calendarType==)\n        return (\n<Content className=\"main-container\">\n                <div style={{padding: '5px'}}>\n                    <Switch>\n\n                        <Route\n                          exact\n                          path=\"/calendar/create-appointment\"\n                          render={(route) => (this.props.activePracticePermissions.AddAppointment || this.props.allowAllPermissions ? (\n                                   <CreateAppointment\n                                     {...this.state}\n                                     {...this.props}\n                                     {...route}\n                                     startTime={this.state.startTime}\n                                   />\n                                 ) :\n                                   <PermissionDenied />)}\n                        />\n\n                        <Route\n                          exact\n                          path=\"/calendar/:appointmentid/edit-appointment\"\n                          render={(route) => (this.props.activePracticePermissions.EditAppointment || this.props.allowAllPermissions ? (\n                                   <CreateAppointment\n                                     {...this.state}\n                                     {...this.props}\n                                     {...route}\n                                     startTime={this.state.startTime}\n                                   />\n                                 ) :\n                                   <PermissionDenied />)}\n                        />\n\n                        <Route>\n\n                            <div style={{backgroundColor: '#fff', padding: '5px 10px'}}>\n                                <Row gutter={16}>\n                                    <Col span={3}>\n\n                                        <DatePicker\n                                          onChange={this.onSelectedDateChange}\n                                          value={this.state.selectedDate}\n                                          format=\"DD-MM-YYYY\"\n                                          style={{margin: 5}}\n                                          allowClear={false}\n                                        />\n                                        {this.state.calendarType == 'APPOINTMENTS' ? (\n                                            <div>\n                                                {that.props.activePracticePermissions.BlockCalendar || that.props.allowAllPermissions ? (\n                                                    <Button block style={{margin: 5}}>\n                                                        <Link to=\"/calendar/blockcalendar\">\n                                                            <Icon type=\"stop\" /> Block Calendar\n                                                        </Link>\n                                                    </Button>\n                                                  ) : null}\n                                                <Dropdown\n                                                  trigger=\"click\"\n                                                  overlay={(\n                                                    <Menu onClick={this.setFilterType}>\n                                                        <Menu.Item key=\"DOCTOR\">\n                                                            DOCTOR\n                                                        </Menu.Item>\n                                                        <Menu.Item key=\"CATEGORY\">\n                                                            CATEGORY\n                                                        </Menu.Item>\n                                                    </Menu>\n                                                  )}\n                                                >\n                                                    <Button block style={{margin: 5}}>\n                                                        {this.state.filterType} <Icon type=\"caret-down\" />\n                                                    </Button>\n                                                </Dropdown>\n                                            </div>\n                                          ) : null}\n                                        <Spin spinning={this.state.doctorLoading}>\n                                            {this.state.filterType == 'DOCTOR' ? (\n                                                <Menu\n                                                  selectedKeys={[this.state.selectedDoctor]}\n                                                  size=\"small\"\n                                                  onClick={(e) => this.changeFilter('selectedDoctor', e.key)}\n                                                >\n                                                    {this.state.calendarType == 'APPOINTMENTS' ? (\n                                                        <Menu.Item\n                                                          key=\"ALL\"\n                                                          style={{\n                                                            marginBottom: 2,\n                                                            textOverflow: \"ellipsis\",\n                                                            borderLeft: '5px solid black',\n                                                            borderRight: 'none'\n                                                        }}\n                                                        >\n                                                            <span>({this.state.doctorsAppointmentCount.ALL ? (!this.state.filterCancelledAppointment ? (this.state.doctorsAppointmentCount.ALL.ALL - this.state.doctorsAppointmentCount.ALL.CANCELLED) : this.state.doctorsAppointmentCount.ALL.ALL) : 0}) All Doctors</span>\n                                                        </Menu.Item>\n                                                      ) : null}\n                                                    {this.state.practice_doctors.map(item => (\n                                                        <Menu.Item\n                                                          key={item.id}\n                                                          style={{\n                                                            textOverflow: \"ellipsis\",\n                                                            borderRight: 'none',\n                                                            borderLeft: `5px solid ${  item.calendar_colour}`,\n                                                            backgroundColor: this.state.selectedDoctor == item.id ? item.calendar_colour : 'inherit',\n                                                            color: this.state.selectedDoctor == item.id ? 'white' : 'inherit',\n                                                            fontWeight: this.state.selectedDoctor == item.id ? 'bold' : 'inherit',\n                                                        }}\n                                                        >\n                                                            <span>({this.state.doctorsAppointmentCount[item.id] ? (!this.state.filterCancelledAppointment ? (this.state.doctorsAppointmentCount[item.id].ALL - this.state.doctorsAppointmentCount[item.id].CANCELLED) : this.state.doctorsAppointmentCount[item.id].ALL) : 0}) {item.user.first_name}</span>\n                                                        </Menu.Item>\n                                                      )\n                                                    )}\n                                                </Menu>\n                                              )\n                                                : (\n<Menu\n  selectedKeys={[this.state.selectedCategory]}\n  size=\"small\"\n  onClick={(e) => this.changeFilter('selectedCategory', e.key)}\n>\n                                                    <Menu.Item\n                                                      key=\"ALL\"\n                                                      style={{\n                                                        marginBottom: 2,\n                                                        textOverflow: \"ellipsis\",\n                                                        borderLeft: '5px solid black',\n                                                        borderRight: 'none'\n                                                    }}\n                                                    >\n                                                        <span>({this.state.categoriesAppointmentCount.ALL ? this.state.categoriesAppointmentCount.ALL : 0}) All Categories</span>\n                                                    </Menu.Item>\n                                                    {this.state.practice_categories.map(item => (\n                                                        <Menu.Item\n                                                          key={item.id}\n                                                          style={{\n                                                            textOverflow: \"ellipsis\",\n                                                            borderRight: 'none',\n                                                            borderLeft: `5px solid #${  item.calendar_colour}`,\n                                                            backgroundColor: this.state.selectedCategory == item.id ? `#${  item.calendar_colour}` : 'inherit',\n                                                            color: this.state.selectedCategory == item.id ? 'white' : 'inherit',\n                                                            fontWeight: this.state.selectedCategory == item.id ? 'bold' : 'inherit',\n                                                        }}\n                                                        >\n                                                            <span>({this.state.categoriesAppointmentCount[item.id] ? this.state.categoriesAppointmentCount[item.id] : 0}) {item.name}</span>\n                                                        </Menu.Item>\n                                                      )\n                                                    )}\n</Menu>\n)}\n                                            <div style={{marginTop: 16}}>\n                                                <Radio.Group\n                                                  size=\"small\"\n                                                  checked={this.state.calendarType}\n                                                  defaultValue={this.state.calendarType}\n                                                  buttonStyle=\"solid\"\n                                                  onChange={(e) => this.changeCalendarType(e.target.value)}\n                                                >\n                                                    <Radio.Button value=\"APPOINTMENTS\">\n                                                        <small>Appointments</small>\n                                                    </Radio.Button>\n                                                    <Radio.Button value=\"AVAILABILITY\">\n                                                        <small>Availability</small>\n                                                    </Radio.Button>\n                                                </Radio.Group>\n                                            </div>\n                                            <div style={{position: 'fixed', bottom: 10, zIndex: 9}}>\n                                                {this.state.openMorePanel ? (\n                                                    <div style={{\n                                                        // width: 100,\n                                                        boxShadow: '0 2px 4px #111',\n                                                        border: '1px solid #bbb',\n                                                        borderRadius: 2,\n                                                        padding: 5,\n                                                        backgroundColor: 'white'\n                                                    }}\n                                                    >\n                                                        <ul style={{listStyle: 'none', paddingInlineStart: 0}}>\n                                                            <li>\n                                                                <Checkbox\n                                                                  checked={this.state.showCalendarEvents}\n                                                                  onChange={(e) => that.changeState('showCalendarEvents', e.target.checked)}\n                                                                >\n                                                                    <small>Events</small>\n                                                                </Checkbox>\n                                                            </li>\n                                                            <li>\n                                                                <Checkbox\n                                                                  checked={this.state.showAppointments}\n                                                                  onChange={(e) => that.changeState('showAppointments', e.target.checked)}\n                                                                >\n                                                                    <small>Appointments</small>\n                                                                </Checkbox>\n                                                            </li>\n                                                            <li>\n                                                                <Checkbox\n                                                                  checked={this.state.show24HourCalendar}\n                                                                  onChange={(e) => that.changeState('show24HourCalendar', e.target.checked)}\n                                                                >\n                                                                    <small>24 Hours</small>\n                                                                </Checkbox>\n                                                            </li>\n                                                            <li>\n                                                                <Checkbox\n                                                                  checked={this.state.filterCancelledAppointment}\n                                                                  onChange={(e) => that.setFilter('filterCancelledAppointment', e.target.checked)}\n                                                                >\n                                                                    <small>Cancellled Appointment</small>\n                                                                </Checkbox>\n                                                            </li>\n                                                            <li>\n                                                                <Divider />\n                                                            </li>\n                                                            <li>\n                                                                <Link to=\"/settings/clinics-staff#staff\">\n                                                                    <small>Add Doctor</small>\n                                                                </Link>\n                                                            </li>\n                                                            <li>\n                                                                <Link to=\"/settings/calendarsettings#timings\">\n                                                                    <small> Customize Calendar</small>\n                                                                </Link>\n                                                            </li>\n                                                            <li>\n                                                                <a>\n                                                                    <small>Resync</small>\n                                                                </a>\n                                                                <Button\n                                                                  onClick={() => this.changeState('openMorePanel', false)}\n                                                                  shape=\"circle\"\n                                                                  size=\"small\"\n                                                                  type=\"danger\"\n                                                                  icon=\"close\"\n                                                                  style={{float: 'right'}}\n                                                                />\n                                                            </li>\n                                                        </ul>\n\n                                                    </div>\n                                                  ) : (\n                                                    <a onClick={() => this.changeState('openMorePanel', true)}>\n                                                        More <Icon type=\"caret-down\" />\n                                                    </a>\n                                                  )}\n                                            </div>\n                                        </Spin>\n                                    </Col>\n                                    {this.state.calendarType == 'APPOINTMENTS' ? (\n                                        <div>\n                                            <Col span={16}>\n                                                <Spin size=\"large\" spinning={this.state.loading}>\n                                                    <DragAndDropCalendar\n                                                      key=\"APPOINTMENTS\"\n                                                      defaultDate={new Date()}\n                                                      localizer={localizer}\n                                                      defaultView=\"day\"\n                                                      step={10}\n                                                      timeslots={1}\n                                                      truncateEvents={false}\n                                                      events={this.state.showAppointments ? this.state.filteredEvent : []}\n\n                                                      onEventDrop={this.moveEvent}\n                                                      onEventResize={this.resizeEvent}\n                                                      resizable\n                                                      selectable\n                                                      popup={this.onSelectEvent}\n                                                      onSelectSlot={this.onSelectSlot}\n                                                        // onSelectEvent={this.onSelectEvent}\n                                                      views={{month: true, week: MyWeek, day: true, agenda: true}}\n                                                      style={{height: \"calc(100vh - 85px)\"}}\n                                                      eventPropGetter={(this.eventStyleGetter)}\n                                                      date={new Date(this.state.selectedDate.format())}\n                                                      onRangeChange={this.onRangeChange}\n                                                      components={{\n                                                            event (option) {\n                                                                return <EventComponent {...option} {...that.props} />\n                                                            },\n                                                            timeSlotWrapper (options) {\n                                                                return (\n<TimeSlotWrapper\n  {...options}\n  key={options.value.toString()}\n  blockedCalendar={that.state.blockedCalendar}\n  calendarTimings={that.state.timing}\n  doctorTimings={that.state.doctorTiming[that.state.selectedDoctor]}\n  filterType={that.state.filterType}\n  selectedDoctor={that.state.selectedDoctor}\n  showCalendarEvents={that.state.showCalendarEvents}\n/>\n)\n                                                            },\n                                                        }}\n                                                    />\n\n                                                </Spin>\n                                            </Col>\n                                            <Col span={5}>\n                                                <CalendarRightPanel\n                                                  {...this.props}\n                                                  {...this.state}\n                                                  selectedDate={this.state.selectedDate}\n                                                  key={moment(this.state.selectedDate).format('l')}\n                                                />\n                                            </Col>\n                                        </div>\n                                      )\n                                        : (\n                                        <Col span={21}>\n                                            <DragAndDropCalendar\n                                              key=\"AVAILABILITY\"\n                                              defaultDate={new Date()}\n                                              localizer={localizer}\n                                              defaultView=\"day\"\n                                              step={10}\n                                              timeslots={1}\n                                              truncateEvents={false}\n                                              events={this.state.showAppointments ? this.state.filteredEvent : []}\n                                              onEventDrop={this.moveEvent}\n                                              onEventResize={this.resizeEvent}\n                                              resizable\n                                              selectable\n                                              popup={this.onSelectEvent}\n                                              onSelectSlot={this.onSelectSlot}\n                                                // onSelectEvent={this.onSelectEvent}\n                                              views={{week: true, day: true}}\n                                              style={{height: \"calc(100vh - 85px)\"}}\n                                              eventPropGetter={(this.eventStyleGetter)}\n                                              date={new Date(this.state.selectedDate.format())}\n                                              onRangeChange={this.onRangeChange}\n                                              components={{\n                                                    event (option) {\n                                                        return <EventComponent {...option} {...that.props} />\n                                                    },\n                                                    timeSlotWrapper (options) {\n                                                        return (\n<TimeSlotWrapper\n  {...options}\n  key={options.value.toString()}\n  blockedCalendar={that.state.blockedCalendar}\n  calendarTimings={that.state.timing}\n  doctorTimings={that.state.doctorTiming[that.state.selectedDoctor]}\n  filterType={that.state.filterType}\n  selectedDoctor={that.state.selectedDoctor}\n  showCalendarEvents={that.state.showCalendarEvents}\n/>\n)\n                                                    },\n                                                }}\n                                            />\n                                        </Col>\n                                      )}\n                                </Row>\n                            </div>\n                        </Route>\n\n                    </Switch>\n                </div>\n</Content>\n        );\n    }\n}\n\nexport default App;\n\n\nclass MyWeek\n    extends React\n        .Component {\n    render() {\n        const {date} = this.props\n        const range = MyWeek.range(date)\n\n        return <TimeGrid {...this.props} range={range} eventOffset={15} />\n    }\n}\n\nMyWeek.range = date => {\n    const start = dates.add(date, -1, 'day')\n    const end = dates.add(start, 6, 'day')\n    let current = start\n    const range = []\n    while (dates.lte(current, end, 'day')) {\n        range.push(current)\n        current = dates.add(current, 1, 'day')\n    }\n    return range\n}\n\nMyWeek.navigate = (date, action) => {\n    switch (action) {\n        case Navigate.PREVIOUS:\n            return dates.add(date, -3, 'day')\n\n        case Navigate.NEXT:\n            return dates.add(date, 3, 'day')\n\n        default:\n            return date\n    }\n}\n\nMyWeek.title = date => {\n    return ` ${date.toLocaleDateString()}`\n}\n\n\nfunction MonthEventWrapper(props) {\n    return props.children;\n}\n"],"sourceRoot":""}