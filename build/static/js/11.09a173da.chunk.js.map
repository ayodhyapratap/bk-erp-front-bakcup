{"version":3,"sources":["../node_modules/lodash/mapKeys.js","../card/Meta.jsx","app/components/patients/patientGroups/PatientGroups.js","app/components/patients/PatientSelection.js","app/components/patients/patient/PatientNotes.js","app/components/patients/patient/MedicalMembership.js","app/components/patients/patient/AddOrEditAgent.js","app/components/patients/patient/PatientProfile.js","app/components/patients/patient/EditPatientDetails.js","app/components/patients/appointment/Appointment.js","app/components/patients/PatientSider.js","../timeline/TimelineItem.jsx","../timeline/Timeline.jsx","../timeline/index.jsx","../node_modules/rc-steps/es/utils.js","../node_modules/rc-steps/es/Steps.js","../node_modules/rc-steps/es/Step.js","../node_modules/rc-steps/es/index.js","../steps/index.jsx","app/components/patients/timeline/PatientTimeline.js","../node_modules/react-modal-image/es/styles.js","../node_modules/react-modal-image/es/icons.js","../node_modules/react-modal-image/es/Header.js","../node_modules/react-modal-image/es/Image.js","../node_modules/react-modal-image/es/Lightbox.js","../node_modules/react-modal-image/es/index.js","app/components/patients/files/PatientFiles.js","app/components/patients/clinicNotes/AddClinicNotes.js","app/components/patients/clinicNotes/AddClinicNotesDynamic.js","app/components/patients/clinicNotes/PatientClinicNotes.js","app/components/patients/PatientHeader.js","app/components/patients/communication/PatientCommunicationSetting.js","app/components/patients/communication/PatientCommunication.js","app/components/patients/vitalSign/AddorEditPatientVitalSigns.js","app/components/patients/vitalSign/PatientVitalSign.js","app/components/patients/completedProcedures/AddorEditDynamicCompletedTreatmentPlans.js","app/components/patients/completedProcedures/PatientCompletedProcedures.js","app/components/patients/prescriptions/PrescriptionTemplate.js","app/components/patients/prescriptions/AddorEditDynamicPatientPrescriptions.js","app/components/patients/prescriptions/PatientPrescriptions.js","app/components/patients/treatmentPlans/AddorEditDynamicTreatmentPlans.js","app/components/patients/treatmentPlans/PatientTreatmentPlans.js","app/components/patients/labOrders/AddPatientLabOrders.js","app/components/patients/labOrders/PatientLabOrders.js","app/components/patients/invoices/AddInvoicedynamic.js","app/components/patients/invoices/AddReturnInvoice.js","app/components/patients/invoices/InvoiceReturnModal.js","app/components/patients/invoices/EditReturnModal.js","app/components/patients/invoices/CancelReturnModal.js","app/components/patients/invoices/PatientInvoices.js","app/components/patients/payments/AddPaymentForm.js","app/components/patients/payments/EditPaymentModal.js","app/components/patients/payments/CancelPaymentModal.js","app/components/patients/payments/PatientPayments.js","app/components/patients/invoices/ReturnInvoices.js","app/components/patients/ledgers/PatientLedgers.js","app/utils/patientUtils.js","app/components/patients/merge/PatientMerge.js","app/components/patients/PatientRequiredNoticeCard.js","app/components/patients/files/PatientMedicalCertificate.js","app/components/patients/booking/BedBookingForm.js","app/components/patients/booking/BookingHome.js","app/components/patients/PatientHome.js","app/utils/export.js","app/components/common/CustomizedTable.js","app/components/common/InfiniteFeedLoaderButton.js","../config-provider/index.jsx","../_util/warning.js","../locale-provider/LocaleReceiver.jsx","../locale/default.jsx","../date-picker/locale/en_US.jsx","../time-picker/locale/en_US.jsx","../locale-provider/default.jsx","../node_modules/rc-pagination/lib/locale/en_US.js","../node_modules/rc-calendar/lib/locale/en_US.js","../calendar/locale/en_US.jsx","../locale-provider/index.jsx","../_util/interopDefault.js","../modal/locale.jsx","../config-provider/context.jsx","../config-provider/renderEmpty.jsx","../empty/index.jsx","../empty/empty.jsx","../empty/simple.jsx","../switch/style/index.jsx","../switch/index.jsx","../node_modules/rc-switch/es/index.js","../node_modules/rc-switch/es/Switch.js","app/components/patients/wallet-ledger/PatientWalletLedger.js"],"names":["baseAssignValue","require","baseForOwn","baseIteratee","module","exports","object","iteratee","result","value","key","__rest","s","e","t","Object","i","p","props","getPrefixCls","customizePrefixCls","className","avatar","title","description","others","prefixCls","classString","avatarDom","titleDom","descriptionDom","MetaDetail","PatientGroups","getPatientGroup","that","getAPI","interpolate","PATIENT_GROUPS","active_practiceId","data","setState","patientGroup","loading","state","this","record","reqData","is_active","postAPI","coloumns","dataIndex","render","text","onConfirm","deleteObject","okText","cancelText","fields","label","required","type","INPUT_FIELD","formProp","successFn","console","log","displayMessage","SUCCESS_MSG_TYPE","errorFn","action","method","beforeSubmit","TestFormLayout","create","DynamicFieldsForm","CustomizedTable","dataSource","columns","React","Component","Meta","Search","MonthPicker","id","PatientSelection","togglePatientGroupEditing","option","showPatientGroupModal","changeSelectedPatientGroup","selectedPatientGroup","target","currentPage","getMorePatient","addNewOptionField","form","nextKeys","getFieldValue","concat","setFieldsValue","keys","removeNewOptionField","k","length","filter","handleChangeOption","index","prevState","selectedOption","custm_col","AdvanceSearchPatient","preventDefault","validateFields","err","values","dob","moment","format","dob_gte","dob_lte","dob_month","patientData","loadAdvanceSearchPatient","page","advancedSearch","advanceLoading","current","patientListData","results","morePatientList","next","ADVANCED_SEARCH_PATIENT","morePatients","advanced_option","ADVANCED_SEARCH","sourceList","getPatientListData","bind","searchPatient","getSources","SOURCE","filteredData","sort","a","b","patient_count","PATIENTS_LIST","totalPatients","count","searchvalue","searchString","apiParams","page_size","SEARCH_PATIENT","params","parseInt","gender","age","group","advancedOptionShow","getFieldDecorator","initialValue","selectedOptionKeys","mapKeys","chooseOption","map","gutter","span","style","width","defaultValue","CHOOSE","size","onChange","Option","item","FormItems","onClick","margin","color","activePracticePermissions","ViewPatient","onSubmit","layout","display","Item","icon","htmlType","advancedOption","placeholder","enterButton","textAlign","height","overflow","padding","Group","buttonStyle","Button","backgroundColor","border","float","name","borderLeft","spinning","patient","PatientCard","showMobile","PatientPhoneNumber","showEmail","PatientEmailId","setCurrentPatient","InfiniteFeedLoaderButton","loaderFunction","hidden","visible","footer","onCancel","PermissionDenied","xs","sm","md","lg","xl","xxl","paddingBottom","image","src","makeFileURL","user","first_name","charAt","mobile","hideMobile","email","hideEmail","custom_id","toUpperCase","HAS_AGE","HAS_DOB","HAS_AADHAR_ID","HAS_EMAIL","GENDER_OPTION","HAS_GENDER","HAS_PINCODE","HAS_STREET","BLOOD_GROUPS","REFERED_BY_AGENT","PatientNotes","loadPatientCallNotes","callNotesLoading","patientId","PATIENT_CALL_NOTES","callNotes","notes","loadPatientNotes","PATIENT_NOTES","defaultValues","renderItem","staff","created_at","remarks","timestamp","MedicalMembership","redirect","currentPatient","Membership","loadMembership","MEMBERSHIP_API","SELECT_FIELD","options","MembershipItem","initilValue","DATE_PICKER","loadProfile","loadMedicalMembership","formChange","PATIENTS_MEMBERSHIP_API","AddOrEditAgent","agentRoles","loadAgentRoles","AGENT_ROLES","roles","SINGLE_IMAGE_UPLOAD_FIELD","PATIENT_PROFILE","PatientProfile","add","addAgent","agentModalVisible","addAgentModalClosed","patientProfile","medicalHistory","hide","newProps","refreshHeader","refreshWallet","ERROR_MSG_TYPE","MEDICAL_MEMBERSHIP_CANCEL_API","shape","is_agent","is_approved","referer_code","EditPatient","to","block","fontSize","href","onClickHandler","extra","deleteMembership","membership_code","medical_from","medical_to","PatientRow","role","role_data","is_age","diff","on_dialysis","referer_data","referer","secondary_mobile_no","landline_no","address","locality","city_data","state_data","country_data","pincode","medical_history_data","intToRGB","hashCode","patient_group_data","onOk","marginBottom","confirm","EditPatientDetails","loadMedicalHistory","MEDICAL_HISTORY","history","setFormParams","handleSubmit","file_enable","file_count","medical_history","patient_group","anniversary","subtract","custom_id_pre","file","response","image_path","replace","removeEmpty","putAPI","match","toggleWebCam","webCamState","getImageandUpload","fieldKey","FormData","append","FILE_UPLOAD_BASE64","onChangeValue","getState","getCity","onChangeCheckbox","changeFormType","selectedFormType","handleRelation","relation_text","handleNumberChange","number","numberValidation","membership","countrylist","stateList","cityList","country","BLOOD_GROUP_CONFIG_PARAM","PATIENT_SOURCE_CONFIG_PARAM","SMS_LANGUAGE_CONFIG_PARAM","FAMILY_RELATION_CONFIG_PARAM","GENDER_CONFIG_PARAM","changeRedirect","getCountry","loadPatientData","getPatientMembership","loadConfigParameters","COUNTRY","STATE","CITY","patientDetails","redirectVar","okType","patientDelete","push","formItemLayout","labelCol","wrapperCol","historyOption","forEach","historyItem","patientGroupOption","patientGroupItem","membershipOption","membershipItem","singleUploadprops","makeURL","FILE_UPLOAD_API","headers","authorization","info","status","message","success","error","goBack","placement","trigger","content","disabled","DeletePatient","allowAllPermissions","onDeletePatient","valuePropName","maxWidth","Math","random","WebCamField","getScreenShot","rules","validateStatus","help","errorMsg","source","showSearch","optionFilterProp","is_superuser","language","activePracticeData","aadhar_id","colon","PATIENT_AGE","min","max","blood_group","family_relation","RELATION","attendee","city","mode","paddingTop","defaultChecked","isNaN","Appointment","appointments","practice_doctors","procedure_category","treatmentNotes","practice_staff","editAppointment","deleteAppointment","loadProcedureCategory","loadDoctors","loadTreatmentNotes","appointmentid","loadAppointment","loadAllAppointments","APPOINTMENT_API","total","loadMoreAppointment","practice","pagination","ALL_APPOINTMENT_API","PROCEDURE_CATEGORY","PRACTICESTAFF","usersdata","DOCTORS_ROLE","doctor","EMR_TREATMENTNOTES","doctors","treatmentNote","schedule_at","slot","category","category_data","checked","notify_via_email","notify_via_sms","EditAppointment","AddAppointment","scroll","x","Sider","PatientSider","onHotKeyInner","keyNm","keyName","INNER_KEYS_HOTKEYS","onKeyDown","collapsible","collapsed","hideSidePanel","minHeight","background","ItemGroup","PatientAppointments","PatientCommunications","PatientBookings","PatientVitalSigns","PatientClinicalNotes","PatientTreatmentPlans","PatientCompletedProcedure","PatientFiles","PatientPrescriptions","PatientTimeline","PatientLabOrders","PatientInvoices","PatientReturns","PatientPayments","PatientLedger","TimelineItem","children","pending","dot","restProps","itemClassName","classNames","dotClassName","omit","borderColor","test","undefined","position","Timeline","_a","pendingDot","reverse","pendingNode","pendingItem","timeLineItems","getPositionCls","ele","idx","truthyItems","itemsCount","lastCls","items","pendingClass","readyClass","isFlexSupported","window","document","documentElement","_extends","assign","arguments","prototype","hasOwnProperty","call","apply","ownKeys","enumerableOnly","getOwnPropertySymbols","symbols","sym","getOwnPropertyDescriptor","enumerable","_objectWithoutProperties","excluded","sourceKeys","indexOf","_objectWithoutPropertiesLoose","sourceSymbolKeys","propertyIsEnumerable","_defineProperties","descriptor","configurable","writable","defineProperty","_getPrototypeOf","o","setPrototypeOf","getPrototypeOf","__proto__","_assertThisInitialized","self","ReferenceError","_setPrototypeOf","_defineProperty","obj","Steps","_Component","_this","instance","Constructor","TypeError","_classCallCheck","_this$props","lastStepOffsetWidth","domNode","findDOMNode","calcTimeout","clearTimeout","setTimeout","offsetWidth","lastChild","abs","flexSupported","calcStepOffsetWidth","debounce","protoProps","staticProps","subClass","superClass","constructor","_inherits","cancel","_classNames","_this2","_this$props2","_this$props2$style","direction","labelPlacement","iconPrefix","progressDot","initial","icons","isNav","_this$state","filteredChildren","Children","toArray","c","lastIndex","adjustedlabelPlacement","createElement","child","stepNumber","childProps","getOwnPropertyDescriptors","defineProperties","_objectSpread","stepIndex","wrapperStyle","onStepClick","itemWidth","adjustMarginRight","round","active","cloneElement","_possibleConstructorReturn","isString","str","PropTypes","string","any","oneOfType","bool","func","finish","node","Step","_React$Component","_getPrototypeOf2","_len","_args","Array","_key","iconClassName","iconDot","_classNames2","_this$props3","_this$props3$status","subTitle","tailContent","stepItemStyle","marginRight","accessibilityProps","tabIndex","renderIconNode","RcSteps","checkboxOption","changeFilters","filterParams","selectedFiltersIntermediate","checkAllFilters","loadTimeline","onCheckAllFiltersChange","queryParams","practice_id","showAllClinic","PATIENT_TIMELINE_API","lastDate","timelineData","checkList","sort_date","date","allCheckList","onCheckAllTimelineCard","checkedTimelineCards","indeterminate","checkAll","toggleTimelineCheckbox","returnObj","checkedList","keysList","flag","printCaseSheet","msg","startLoadingMessage","reqObj","timeline","PATIENT_TIMELINE_PDF","stopLoadingMessage","open","BACKEND_BASE_URL","report","updateFormValue","mailModalOpen","visibleMail","mailModalClose","sendCaseSheet","mail_to","_","sendMailToPatient","top","backgroundImage","hoverable","bodyStyle","chief_complaints","split","CUSTOM_STRING_SEPERATOR","observations","investigations","diagnosis","timelineClinicalNote","practice_data","doctor_data","calendar_colour","paddingLeft","timelineAppointmentCard","file_type","alt","timelineFilesCard","procedure","proc","inventory","invoice_id","payments_data","timelineInvoiceCard","temperature","temperature_part","blood_pressure_up","blood_pressure_down","timelineVitalSignCard","drugs","drug","timelinePrescriptionCard","payment_id","timelinePaymentCard","offsetTop","marginLeft","borderRadius","dateTimeStamp","treatment_plans","timelineProcedureCard","timelineTreatmentPlanCard","timelineItem","_typeof","Symbol","iterator","StyleInjector","css","head","querySelector","textContent","appendChild","appendStyle","getElementById","parentNode","removeChild","lightboxStyles","_ref","imageBackgroundColor","ZoomInIcon","fill","viewBox","xmlns","d","ZoomOutIcon","DownloadIcon","CloseIcon","SpinnerIcon","RotateIcon","Header","zoomed","toggleZoom","toggleRotate","onClose","enableDownload","enableZoom","enableRotate","download","Image","args","event","contextMenu","handleDoubleClick","onLoad","handleOnLoad","onDoubleClick","onContextMenu","handleOnContextMenu","Lightbox","move","y","moveStart","rotationDeg","keyCode","point","changedTouches","dim","contentEl","getBoundingClientRect","clientX","left","clientY","touches","coords","getCoordinatesIfOverImg","prev","addEventListener","handleKeyDown","removeEventListener","medium","large","hideDownload","hideZoom","showRotate","_this$props$imageBack","onMouseDown","handleMouseDownOrTouchStart","onMouseUp","handleMouseUpOrTouchEnd","onMouseMove","handleMouseMoveOrTouchMove","onTouchStart","onTouchEnd","onTouchMove","ref","el","transform","WebkitTransform","MsTransform","_default","modalOpen","small","smallSrcSet","cursor","maxHeight","toggleModal","srcSet","loadMailedFiles","files","loadMoreFiles","mailed","PATIENT_MAILEDFILES","filterTags","filterSearchTag","loadData","showModal","filesData","handleCancel","togglePDFModal","path","showPDFFile","sendFiles","handleVisibleChange","visibleTag","tags","showAddModal","selectedFiles","selectedTags","showAddMedicalModel","medicalCertificate","mailedfiles","loadMedicalCertificate","loadTags","lastPatient","newDate","newData","tag","notag","PATIENT_FILES","EMR_FILETAGS","loadMoreCertificate","MEDICAL_CERTIFICATE_API","ALL_MEDICAL_CERITICATE_API","selected","file_tags","MEDICAL_CERTIFICATE_PDF","PatientFilesForm","MULTI_SELECT_FIELD","formProps","triggerAddModal","tagsMenu","boxShadow","listStyle","paddingInlineStart","tagsCompleteToggle","filesWithTags","borderStyle","defaultFields","overlay","onVisibleChange","togglePatientListModal","paddingRight","borderRight","backgroundSize","filesCompleteToggle","findFileExtension","PDF_FILE_EXTENSION","deleteFile","patient_data","grid","column","actions","loadPDF","deleteMedicalCertificate","excused_duty_from","excused_duty_to","centered","frameBorder","TabPane","tabLists","tabResourcesAPI","EMR_COMPLAINTS","EMR_OBSERVATIONS","EMR_DIAGNOSES","EMR_INVESTIGATIONS","EMR_MEDICATION","AddClinicNotesDynamic","setInitialData","initialData","editClinicNotes","addValues","medication","loadRequiredResources","API","newResources","resourceList","filteredResourceList","filterStrings","tab","remove","changeValues","prevsOption","resourceAddModal","searchValues","searchStrings","filterValues","filteredItemOfGivenType","toString","toLowerCase","includes","validateFieldsAndScroll","Complaints","field","join","Investigations","Diagnoses","Notes","Observations","selectedDoctor","selectedDate","isValid","PATIENT_CLINIC_NOTES_API","changeTab","selectDoctor","practiceDoctors","selectedTab","keysObject","ResourceAddForm","validateTrigger","whitespace","onFocus","offsetBottom","allowClear","tabList","PatientClinicNotes","sendPatientMail","clinicalNotes","patientName","clinicId","sendMail","CLINIC_NOTES_PDF","clinicNotes","loadClinicNotes","editClinicNotesData","exact","route","clinicNote","marginTop","deleteClinicNote","Divider","PatientHeader","textSize","ghost","slice","lineHeight","theme","twoToneColor","toggleShowAllClinic","checkedChildren","unCheckedChildren","pendingAmount","zIndex","grand_total","valueStyle","fontWeight","precision","walletAmount","non_refundable","tile","refundable_amount","prefix","patientSettingMenu","AddPatient","maskClosable","closable","listModalVisible","right","PatientCommunicationSetting","onChanged","medicine_till","follow_up_date","saving","parient_communication_history","loadCommunication","PATIENT_COMMUNICATION_HISTORY_API","user_sms","sms_enabled","SMS_ENABLE","isSMS","email_enabled","EMAIL_ENABLE","isEmail","bithday_sms_enabled","BIRTHDAY_SMS_ENABLE","isBirth_SMS","sms_enable","email_enable","birthday_sms_email","dashed","PatientCommunication","AddorEditPatientVitalSigns","vitalSign","editVitalSign","editformProp","pulse","NUMBER_FIELD","follow","weight","resp_rate","creatinine","haemoglobin","urea","uric_acid","VITAL_SIGNS_API","PatientVitalSign","deleteVitalSign","loadVitalsigns","editObject","reportManualId","VITAL_SIGN_PDF","vitalsign","bottom","dataKey","tickFormatter","tickCount","domain","dataMin","dataMax","toFixed","strokeDasharray","labelFormatter","stroke","fillOpacity","strokeWidth","verticalAlign","x1","y1","x2","y2","offset","stopColor","stopOpacity","loadInvoices","presc","VitalSignFooter","AddorEditDynamicCompletedTreatmentPlans","calculateItem","_id","getFieldsValue","tableFormValues","addNotes","removeTreatment","randId","default_notes","editId","editTreatmentPlan","quantity","cost","discount","sendingItem","TREATMENTPLANS_API","url","loadProcedures","loadingProcedures","tableValues","treatment","filteredItems","consumeRow","TextArea","bordered","bottomPoint","overflowX","itemLayout","PatientCompletedProcedures","treatmentId","TREATMENTPLANS_PDF","treatmentPlans","completedTreatmentPlans","incompletedTreatmentPlans","productMargin","loadTreatmentPlans","editTreatmentPlanData","loadProductMargin","PRODUCT_MARGIN","incompleted","treatmentplan","is_completed","complete","editFields","deleteTreatmentPlans","treatmentFooter","PrescriptionTemplate","addInstructions","changeDurationUnits","removeDrug","formDrugList","removeLabs","addedLabs","formLabList","addLabs","WARNING_MSG_TYPE","addTemplate","prevLabs","prevAddedLabs","labs","lab","prevDrugs","prevAddedDrugs","addedDrugs","advice_data","removeTemplates","formTemplateList","dosage","does","duration_type","duration_unit","duration","frequency","does_frequency","instruction","food_time","after_food","before_food","advice","drugIitem","prescriptionTemplate","PRESCRIPTION_TEMPLATE","handleAddFields","loadDrugList","drugList","labList","loadPrescriptionTemplate","deletePrescriptionTemplate","loadLabList","LABTEST_API","item_type","DRUG","Drugs","item_name","INVENTORY_ITEM_API","formItemLayoutWithOutLabel","formItems","drugTableColumns","DOSE_REQUIRED","DURATIONS_UNIT","timing","instructions","labTablecolums","container","addDrug","maintain_inventory","renderRoute","AddorEditDynamicPatientPrescriptions","drugItem","PRESCRIPTIONS_API","editPrescription","Labs","Template","prescriptionId","prescription","drug_catalog","loadPrescriptions","loadDrugCatalog","editPrescriptionData","deletePrescriptions","nextPrescriptionPage","PRESCRIPTION_PDF","DRUG_CATALOG","strength","prescriptonFooter","AddorEditDynamicTreatmentPlans","selectedTreatments","submitCompleteTreatment","treatmentKeys","treatmentObj","TREATMENTPLANS_MARK_COMPLETE_API","treatmentCompleteToggle","AddPatientLabOrders","removeTests","lab_test","loadLabs","coloums","payments","Text","tableFormFields","batch","Addinvoicedynamic","selectedDefaultDate","loadEditInvoiceData","SINGLE_INVOICE_API","invoice","procedure_data","PROCEDURES","stocks","itemBatches","inventory_item_data","item_type_stock","item_stock","stock_quantity","stock","batch_number","unit","batchObj","selectedBatch","INVENTORY","newTableFormValues","formValue","unit_cost","taxes","tax","retail_without_tax","membershipDiscount","medical_membership","benefit","finalTableFormValues","dateValue","selectBatch","addPrescription","drug_item","selectedPrescriptions","promo_code","promoCode","discount_type","offers","saveLoading","CREATE_OR_EDIT_INVOICES","addItemThroughQR","loadingQr","qrSplitted","SEARCH_THROUGH_QR","randomId","row","qrValue","qr","setQrValue","searchItem","loadInventoryItemList","PRESCRIPTIONS","changeNetPrice","setFields","newTableValues","tableObj","totalTaxAmount","initialDiscount","initialDiscountType","offer","selectOption","taxid","taxes_list","taxObj","tax_value","totalWithoutTaxWithDiscount","total_unit_cost","retail_price","checkPromoCode","applyPromoCodeDiscounts","discountValue","valueToSet","discountApplied","discountAppliedOnProduct","loadLoyaltyDiscount","OFFERS","onChangeOption","tempArr","onChangeOffer","selectedOffer","loyaltyDiscount","onchangeDiscountSimple","retailPrice","enterPromoCode","calculateGrandTotalWithoutDiscount","grandTotal","promoCodeCheckLoading","amount","CHECK_PROMO_CODE","appliedPromoCodeDiscount","removePromoCode","classType","maxQuantityforConsume","tempValues","loadTaxes","loadingInventory","drugItems","paramsApi","UNPAID_PRESCRIPTIONS","TAXES","expiry_date","code","addonAfter","CURRENCY_TYPE","align","tip","onSearch","total_quantity","previous","reduce","parseFloat","AddReturnInvoice","bank","return_mode","editInvoice","staff_data","with_tax","return_with_tax","cash_return","advance_value","returnCashAvailable","procedure_inv","inventory_inv","INVOICE_RETURN_API","onChangeHandle","calculateReturnCashAvailable","totalAmountPaid","pay_amount","pendingPayment","worthOfReturningItems","taxAllowed","units","payment","InvoiceReturnModal","handleSubmitReturnInvoice","CANCELINVOICE_VERIFY_OTP","returnIncoiceVisible","returnInvoiceData","returnInvoiceClose","otpSent","CANCELINVOICE_RESENT_OTP","sendOTP","EditReturnModal","handleSubmitEditInvoice","editIncoiceVisible","editInvoiceData","editInvoiceClose","CancelReturnModal","handleSubmitCancelInvoice","otpField","cancelIncoiceVisible","deleteInvoice","cancel_note","OTP_DELAY_TIME","is_cancelled","SINGLE_INVOICES_API","cancelInvoiceClose","REQUIRED_FIELD_MESSAGE","INVOICE_PDF_API","returnModelOpen","CANCELINVOICE_GENERATE_OTP","invoiceId","cancelModalOpen","created_time","paymentId","invoices","loadMoreInvoice","summary","INVOICES_API","procedures","taxesdata","AddInvoicedynamic","banner","showIcon","InvoiceCard","invoiceFooter","tableObjects","reservation","medicinesPackages","reservation_data","medicines","final_price","price","mapper","bed_package","seat_type","editModelOpen","suffix","discount_value","AddPaymentForm","loadEditPyament","editPayment","addedInvoicesId","addedInvoice","totalPayingAmount","inv","invoice_data","pay_amount_wallet","calculateInvoicePayments","setPaymentAmount","addedInvoiceId","loadAvailableAdvance","AVAILABLE_ADVANCE","availableAdvance","loadPaymentModes","PAYMENT_MODES","PAYMENT_OFFLINE_MODE","paymentModeOffline","paymentModes","selectedPaymentMode","invoicesToLoad","invoiceLoading","invoicesList","addInvoiceToPayments","is_pending","foundInvoice","invoicePayments","removeInvoiceToPayments","payable","totalPayingFromAdvanceAmount","invoicePayableAmount","advanceToBeSent","totalPayableAmount","setPaymentFromAdvanceAmount","changeSelectedPaymentMode","changeNotes","selectDate","newPayment","is_advance","totalAmountPayingFromAdvance","consumedInvoices","availableAdvancePayments","maxConsumeAmount","receivedPayIdFromRazorPay","BULK_PAYMENT_API","invoiceArray","location","search","pairValueArray","substr","patientObj","RAZORPAY_KEY","handler","razorpay_payment_id","ACCEPT_PAYMENT","detail","Razorpay","borderBottom","max_allowed","step","paymentHandler","bed_package_price","EditPaymentModal","handleSubmitEditPayment","editPaymentVisible","editPaymentData","editPaymentClose","cancelPaymentVisible","CancelPaymentModal","handleSubmitCancelPayment","deletePayment","SINGLE_PAYMENT_API","cancelPaymentClose","loadPayments","PATIENT_PAYMENTS_API","PAYMENT_PDF","paymentmodes","PaymentCard","advancePay","PaymentFooter","rowKey","ReturnInvoices","RETURN_INVOICE_PDF_API","cancelReturnIncoiceVisible","editReturnInvoice","return_id","returnInvoiceId","cancelReturnInvoiceClose","handleSubmitCancelReturnInvoice","deleteReturnInvoice","returnInvoices","loadReturnInvoices","loadMoreReturnInvoice","SINGLE_RETURN_API","return_value","PatientLedgers","loadPatientLedger","loadingLedger","PATIENT_LEDGER","ledgerData","balance","totalCredit","totalDebit","dataRow","ledgerEntry","ledger_type","type_id","details","invoiceObj","invoiceDetailsString","trim","patientInvoiceDetailsInString","credit","debit","return","paymentObj","paymentDetailsString","patientPaymentDetailsInString","return_pay","payObj","patientReturnInvoiceDetailsInString","ledger","selectedList","PatientMerge","searchPatientString","removePatient","handlePatientSelect","mergePatient","patient_from","patient_to","MERGE_PATIENTS","defaultActiveFirstOption","showArrow","filterOption","handleChange","onSelect","PatientRequiredNoticeCard","PatientMedicalCertificate","handleCheck","excused_duty_checked","handleLighDutyCheck","fit_light_duty_checked","handleAttendanceCheck","attendance_checked","handleChangeStart","startDate","timeString","proof_attendance_from","excused_duty","fit_light_duty","proof_attendance","fit_light_duty_from","fit_light_duty_to","proof_attendance_date","proof_attendance_to","valid_court","invalid_court","no_mention","endDate","Date","days","handleChangeEnd","radioOption","NOTES","use12Hours","BedBookingForm","loadPackages","BED_PACKAGES","packages","loadDiseases","DISEASE_LIST","diseases","patientList","ptr","checkBedStatus","handleRoomType","calculateTotalAmount","from_date","to_date","pkgObj","no_of_days","CHECK_SEAT_AVAILABILITY","availabilitySeatTatkal","TATKAL","availabilitySeatNormal","NORMAL","start","end","paid","total_price","total_tax","rest_diseases","report_upload","BOOK_SEAT","handleClick","prevSate","payAmount","bedPkg","medicinePkg","total_medicine_price","normal_price","normal_tax_value","price_with_tax","tatkal_price","tatkal_tax_value","medicinePackage","medicineItem","choosePkg","handleMedicineSelect","changeDiscount","newTableValue","addNewFields","loadMedicinePackages","MEDICINE_PACKAGES","BOOKING_TYPE","is_or_not","available","room","input","Content","BookingHome","loadBedBookingReport","bedBookingReports","nextReport","BED_BOOKING_REPORTS","patients","bedBooking","hideReport","PatientHome","loadPatientPendingAmount","PATIENT_PENDING_AMOUNT","loadPatientWallet","AGENT_WALLET","getCommonSettings","nextProps","nextContext","currentPathLocation","foundFlag","ROUTES_TO_HIDE_PATIENT_SIDE_PANEL","matchPath","pathname","strict","redirectUrl","urlArray","splice","saveCommonSettings","MergePatients","WebAdmin","PatientWalletLedger","makeCSVString","dataArray","printColumn","line","downloadCSV","fileName","cCode","fName","bArr","charCodeAt","blob","Blob","Uint8Array","navigator","msSaveBlob","link","URL","createObjectURL","setAttribute","visibility","body","click","revokeObjectURL","getColumnSearchProps","filterDropdown","setSelectedKeys","selectedKeys","clearFilters","searchInput","onPressEnter","handleSearch","handleReset","filterIcon","filtered","onFilter","onFilterDropdownVisibleChange","select","highlightStyle","searchWords","searchText","autoEscape","textToHighlight","excelExport","pdfExport","excelColumns","hideExport","dataArrayForExcel","dataObjectToPush","export","pdf","jsPDF","addPDFHeader","rows","autoTable","startY","autoTableEndPosY","headerStyle","bodyStyles","setFontSize","addPDFFooter","save","exportToPDF","exportToExcel","pageSizeOptions","showSizeChanger","showQuickJumper","showTotal","range","startLoading","startMakingExtraLabels","extraLoadingLabel","suffixCls","getPopupContainer","renderEmpty","csp","autoInsertSpaceInButton","locale","pageHeader","config","_ANT_MARK__","ANT_MARK","context","LocaleReceiver","componentName","defaultLocaleData","antLocale","localeFromContext","localeCode","Pagination","DatePicker","TimePicker","Calendar","global","Table","filterTitle","filterConfirm","filterReset","selectAll","selectInvert","sortTitle","expand","collapse","Modal","justOkText","Popconfirm","Transfer","titles","searchPlaceholder","itemUnit","itemsUnit","Upload","uploading","removeFile","uploadError","previewFile","downloadFile","Empty","Icon","edit","copy","copied","PageHeader","back","lang","rangePlaceholder","CalendarLocale","timePickerLocale","TimePickerLocale","items_per_page","jump_to","jump_to_confirm","prev_page","next_page","prev_5","next_5","prev_3","next_3","__esModule","today","now","backToToday","ok","clear","month","year","timeSelect","dateSelect","weekSelect","monthSelect","yearSelect","decadeSelect","yearFormat","dateFormat","dayFormat","dateTimeFormat","monthBeforeYear","previousMonth","nextMonth","previousYear","nextYear","previousDecade","nextDecade","previousCentury","nextCentury","en_US","setMomentLocale","LocaleProvider","changeConfirmLocale","exist","prevProps","m","newLocale","runtimeLocale","defaultLocale","SFC","basicPrefixCls","configProps","cons","ConfigContext","defaultRenderEmpty","ConfigConsumer","PRESENTED_IMAGE_SIMPLE","defaultEmptyImg","simpleEmptyImg","imageStyle","des","imageNode","fillRule","cx","cy","rx","ry","Switch","classes","loadingIcon","insertExtraNode","warning","newChecked","setChecked","blur","_checked","newState","autoFocus","focus","switchClassName","saveNode","handleMouseUp","propTypes","defaultProps","polyfill","nextPage","selectedStartDate","startOf","selectedEndDate","endOf","agents","selectedAgents","WALLET_LEDGER","loadSumData","ledgerDetails","WALLET_LEDGER_SUM","changeExpenseFilters","loadAgents","MY_AGENTS","agent","delete"],"mappings":"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","file":"static/js/11.09a173da.chunk.js","sourcesContent":["var baseAssignValue = require('./_baseAssignValue'),\n    baseForOwn = require('./_baseForOwn'),\n    baseIteratee = require('./_baseIteratee');\n\n/**\n * The opposite of `_.mapValues`; this method creates an object with the\n * same values as `object` and keys generated by running each own enumerable\n * string keyed property of `object` thru `iteratee`. The iteratee is invoked\n * with three arguments: (value, key, object).\n *\n * @static\n * @memberOf _\n * @since 3.8.0\n * @category Object\n * @param {Object} object The object to iterate over.\n * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n * @returns {Object} Returns the new mapped object.\n * @see _.mapValues\n * @example\n *\n * _.mapKeys({ 'a': 1, 'b': 2 }, function(value, key) {\n *   return key + value;\n * });\n * // => { 'a1': 1, 'b2': 2 }\n */\nfunction mapKeys(object, iteratee) {\n  var result = {};\n  iteratee = baseIteratee(iteratee, 3);\n\n  baseForOwn(object, function(value, key, object) {\n    baseAssignValue(result, iteratee(value, key, object), value);\n  });\n  return result;\n}\n\nmodule.exports = mapKeys;\n","var __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nimport * as React from 'react';\nimport classNames from 'classnames';\nimport { ConfigConsumer } from '../config-provider';\nconst Meta = props => (<ConfigConsumer>\n    {({ getPrefixCls }) => {\n    const { prefixCls: customizePrefixCls, className, avatar, title, description } = props, others = __rest(props, [\"prefixCls\", \"className\", \"avatar\", \"title\", \"description\"]);\n    const prefixCls = getPrefixCls('card', customizePrefixCls);\n    const classString = classNames(`${prefixCls}-meta`, className);\n    const avatarDom = avatar ? <div className={`${prefixCls}-meta-avatar`}>{avatar}</div> : null;\n    const titleDom = title ? <div className={`${prefixCls}-meta-title`}>{title}</div> : null;\n    const descriptionDom = description ? (<div className={`${prefixCls}-meta-description`}>{description}</div>) : null;\n    const MetaDetail = titleDom || descriptionDom ? (<div className={`${prefixCls}-meta-detail`}>\n            {titleDom}\n            {descriptionDom}\n          </div>) : null;\n    return (<div {...others} className={classString}>\n          {avatarDom}\n          {MetaDetail}\n        </div>);\n}}\n  </ConfigConsumer>);\nexport default Meta;\n","import React from \"react\";\nimport {Card, Form, Popconfirm, Row, Divider} from 'antd';\nimport {displayMessage, getAPI, interpolate, postAPI} from \"../../../utils/common\";\nimport {OFFERS, PATIENT_GROUPS} from \"../../../constants/api\";\nimport CustomizedTable from \"../../common/CustomizedTable\";\nimport {INPUT_FIELD, SUCCESS_MSG_TYPE} from \"../../../constants/dataKeys\";\nimport DynamicFieldsForm from \"../../common/DynamicFieldsForm\";\n\nexport default class PatientGroups extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            patientGroup: [],\n            loading: true\n        }\n    }\n\n    componentDidMount() {\n        this.getPatientGroup();\n    }\n\n    getPatientGroup = () => {\n        const that = this;\n        const successFn = function (data) {\n            that.setState({\n                patientGroup: data,\n                loading: false\n            });\n        };\n        const errorFn = function () {\n            that.setState({\n                loading: false\n            })\n\n        };\n        getAPI(interpolate(PATIENT_GROUPS, [this.props.active_practiceId]), successFn, errorFn);\n    }\n\n    deleteObject(record) {\n        const that = this;\n        const reqData = record;\n        reqData.is_active = false;\n        const successFn = function (data) {\n            that.getPatientGroup();\n        }\n        const errorFn = function () {\n        }\n        postAPI(interpolate(PATIENT_GROUPS, [this.props.active_practiceId]), reqData, successFn, errorFn);\n    }\n\n    render() {\n        const that = this;\n        const coloumns = [{\n            title: 'Group Name',\n            dataIndex: 'name',\n            key: 'name'\n        }, {\n            title: 'Patient Count',\n            dataIndex: 'patient_count',\n            key: 'patient_count'\n        }, {\n            title: 'Action',\n            key: 'action',\n            render: (text, record) => (\n                <Popconfirm\n                  title=\"Are you sure delete this prescription?\"\n                  onConfirm={() => that.deleteObject(record)}\n                  okText=\"Yes\"\n                  cancelText=\"No\"\n                >\n                    <a>\n                        Delete\n                    </a>\n                </Popconfirm>\n            ),\n        }];\n        const fields = [{\n            label: \"Group Name\",\n            key: \"name\",\n            required: true,\n            type: INPUT_FIELD\n        }]\n        const formProp = {\n            successFn (data) {\n                console.log(data);\n                displayMessage(SUCCESS_MSG_TYPE, \"success\")\n                that.getPatientGroup()\n\n            },\n            errorFn () {\n\n            },\n            action: interpolate(PATIENT_GROUPS, [this.props.active_practiceId]),\n            method: \"post\",\n            beforeSubmit (data) {\n                console.log(data)\n            }\n        }\n        const TestFormLayout = Form.create()(DynamicFieldsForm);\n        return (\n<Row>\n            <TestFormLayout\n              formProp={formProp}\n              title=\"Patient Groups\"\n              fields={fields}\n              {...this.props}\n            />\n            <Divider />\n            <CustomizedTable dataSource={this.state.patientGroup} loading={this.state.loading} columns={coloumns} />\n</Row>\n)\n    }\n}\n","import React from \"react\";\nimport {\n    Avatar, Input, Card, Col, Icon, InputNumber, Radio, Row, Button, Spin, Modal, Tag,\n    DatePicker, Select, Form, Divider\n} from \"antd\";\nimport moment from \"moment\";\nimport filter from \"lodash/filter\";\nimport mapKeys from \"lodash/mapKeys\"\nimport {getAPI, interpolate, makeFileURL} from \"../../utils/common\";\nimport {\n    PATIENT_GROUPS,\n    SEARCH_PATIENT,\n    PATIENTS_LIST,\n    ADVANCED_SEARCH_PATIENT, SOURCE\n} from \"../../constants/api\";\nimport InfiniteFeedLoaderButton from \"../common/InfiniteFeedLoaderButton\";\nimport PatientGroups from \"./patientGroups/PatientGroups\";\nimport {hideEmail, hideMobile} from \"../../utils/permissionUtils\";\nimport {\n    ADVANCED_SEARCH,\n    BLOOD_GROUPS,\n    HAS_AADHAR_ID,\n    HAS_AGE,\n    HAS_DOB,\n    HAS_EMAIL,\n    HAS_GENDER, HAS_PINCODE, HAS_STREET, REFERED_BY_AGENT, GENDER_OPTION\n} from \"../../constants/hardData\";\nimport {CHOOSE} from \"../../constants/dataKeys\";\nimport PermissionDenied from \"../common/errors/PermissionDenied\";\n\nconst {Meta} = Card;\nconst {Search} = Input;\nconst {MonthPicker} = DatePicker;\nlet id = 1;\n\nclass PatientSelection extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            patientListData: [],\n            patientGroup: [],\n            morePatients: null,\n            loading: true,\n            selectedPatientGroup: 'all',\n            advanced_option: ADVANCED_SEARCH,\n            selectedOption: {},\n            sourceList: [],\n            custm_col: 8,\n            advanceLoading: false,\n        };\n        this.getPatientListData = this.getPatientListData.bind(this);\n        this.searchPatient = this.searchPatient.bind(this);\n        this.getMorePatient = this.getMorePatient.bind(this);\n        this.getSources = this.getSources.bind(this);\n    }\n\n    componentDidMount() {\n        this.getPatientListData();\n        this.getPatientGroup();\n        this.getSources();\n    }\n\n    getSources() {\n        const that = this;\n        const successFn = function (data) {\n            that.setState({\n                sourceList: data,\n            })\n        };\n        const errorFun = function () {\n\n        };\n        getAPI(SOURCE, successFn, errorFun);\n    }\n\n\n    getPatientGroup() {\n        const that = this;\n        const successFn = function (data) {\n            const filteredData = data.sort(function (a, b) {\n                return b.patient_count - a.patient_count\n            })\n            that.setState({\n                patientGroup: filteredData,\n            });\n        };\n        const errorFn = function () {\n            that.setState({})\n\n        };\n        getAPI(interpolate(PATIENT_GROUPS, [this.props.active_practiceId]), successFn, errorFn);\n    }\n\n    getPatientListData() {\n        const that = this;\n        const successFn = function (data) {\n            that.setState({\n                patientListData: data.results,\n                morePatients: data.next,\n                currentPage: data.current,\n                totalPatients: data.count,\n                loading: false,\n                // advancedOptionShow: false,\n            })\n        };\n        const errorFn = function () {\n            that.setState({\n                loading: false\n            })\n\n        };\n        getAPI(PATIENTS_LIST, successFn, errorFn);\n    }\n\n    searchPatient(value, page = 1) {\n\n        const that = this;\n        that.setState({\n            searchvalue: true,\n            searchString: value\n        });\n        const successFn = function (data) {\n            that.setState(function (prevState) {\n                if (prevState.searchString == value)\n                    if (data.current > 1) {\n                        return {\n                            patientListData: [...prevState.patientListData, ...data.results],\n                            morePatients: data.next,\n                            currentPage: data.current,\n                        }\n                    } else {\n                        return {\n                            patientListData: [...data.results],\n                            morePatients: data.next,\n                            currentPage: data.current,\n                            loading: false\n                        }\n                    }\n            })\n\n        };\n        const errorFn = function () {\n\n        };\n        const apiParams = {\n            page,\n            page_size: 20\n        };\n        if (value) {\n            getAPI(interpolate(SEARCH_PATIENT, [value]), successFn, errorFn, apiParams);\n        } else {\n            this.getPatientListData();\n        }\n    }\n\n    getMorePatient() {\n        const that = this;\n        const current = this.state.currentPage;\n\n        const successFn = function (data) {\n            if (data.current == current + 1)\n                that.setState(function (prevState) {\n                    if (data.current > 1)\n                        return {\n                            patientListData: [...prevState.patientListData, ...data.results],\n                            morePatients: data.next,\n                            currentPage: data.current,\n                        }\n                    return {\n                            patientListData: [...data.results],\n                            morePatients: data.next,\n                            currentPage: data.current,\n                            loading: false\n                        }\n                })\n        }\n        const errorFn = function () {\n\n        }\n        const params = {};\n        if (current) {\n            params.page = parseInt(current) + 1;\n        } else {\n            this.setState({\n                loading: true\n            })\n        }\n        const patientGroup = this.state.selectedPatientGroup;\n        if (patientGroup != 'all') {\n            if (patientGroup == 'smart_a' || patientGroup == 'smart_b' || patientGroup == 'smart_c' || patientGroup == 'smart_d' || patientGroup == 'smart_e' || patientGroup == 'smart_f') {\n                switch (patientGroup) {\n                    case 'smart_a':\n                        params.gender = 'male';\n                        break;\n                    case 'smart_b':\n                        params.gender = 'female';\n                        break;\n                    case 'smart_c':\n                        params.gender = 'female';\n                        params.age = 30;\n                        params.type = 'gt';\n                        break;\n                    case 'smart_d':\n                        params.gender = 'female';\n                        params.age = 30;\n                        params.type = 'lt';\n                        break;\n                    case 'smart_e':\n                        params.gender = 'male';\n                        params.age = 30;\n                        params.type = 'gt';\n                        break;\n                    case 'smart_f':\n                        params.gender = 'male';\n                        params.age = 30;\n                        params.type = 'lt';\n                        break;\n                }\n            } else {\n                params.group = this.state.selectedPatientGroup\n            }\n\n        }\n        getAPI(PATIENTS_LIST, successFn, errorFn, {...params});\n    }\n\n    togglePatientGroupEditing = (option) => {\n        this.setState({\n            showPatientGroupModal: !!option\n        });\n        if (!option) {\n            this.getPatientGroup();\n        }\n    }\n\n    changeSelectedPatientGroup = (e) => {\n        const that = this;\n        this.setState({\n            selectedPatientGroup: e.target.value,\n            currentPage: null\n        }, function () {\n            that.getMorePatient();\n        })\n    };\n\n    advancedOption(value) {\n        // console.log(\"value\",value)\n        const that = this;\n        this.getPatientListData();\n        this.setState({\n            advancedOptionShow: !value,\n            selectedOption: '',\n        });\n        if (value) {\n            that.props.form.setFieldsValue({\n                keys: [0],\n            });\n        }\n\n    }\n\n    addNewOptionField = () => {\n\n        const {form} = this.props;\n\n        const keys = form.getFieldValue('keys');\n        // console.log(\"form\",form,keys)\n        const nextKeys = keys.concat(id++);\n        form.setFieldsValue({\n            keys: nextKeys,\n        });\n    };\n\n    removeNewOptionField = (k) => {\n        const {form} = this.props;\n        const keys = form.getFieldValue('keys');\n        if (keys.length === 1) {\n            return;\n        }\n\n        form.setFieldsValue({\n            keys: keys.filter(key => key !== k),\n        });\n    };\n\n    handleChangeOption = (index, type, value) => {\n        const that = this;\n        const selectedOption = {};\n        that.setState(function (prevState) {\n            return {\n                selectedOption: {...prevState.selectedOption, [index]: value},\n                custm_col: value ? 12 : 8,\n            }\n        })\n    };\n\n    AdvanceSearchPatient = (e) => {\n        const that = this;\n        e.preventDefault();\n        let reqData = {};\n        this.props.form.validateFields((err, values) => {\n            if (!err) {\n                reqData = {\n                    ...values,\n                    dob: values.dob ? moment(values.dob).format('YYYY-MM-DD') : null,\n                    dob_gte: values.dob_gte ? moment(values.dob_gte).format('YYYY-MM-DD') : null,\n                    dob_lte: values.dob_lte ? moment(values.dob_lte).format('YYYY-MM-DD') : null,\n                    dob_month: values.dob_month ? moment(values.dob_month).format('MM') : null,\n                };\n            }\n        });\n        delete reqData.keys;\n        that.setState({\n            patientData: reqData,\n        }, function () {\n            that.loadAdvanceSearchPatient();\n        });\n\n    };\n\n    loadAdvanceSearchPatient = (page = 1) => {\n        const that = this;\n        const reqData = that.state.patientData;\n        that.setState({\n            advancedSearch: true,\n            advanceLoading: true,\n        });\n        const successFn = function (data) {\n            that.setState(function (prevState) {\n                if (data.current > 1) {\n                    return {\n                        patientListData: [...prevState.patientListData, ...data.results],\n                        morePatientList: data.next,\n                        currentPage: data.current,\n                        advanceLoading: false\n                    }\n                }\n                    return {\n                        patientListData: [...data.results],\n                        morePatientList: data.next,\n                        currentPage: data.current,\n                        advanceLoading: false\n                    }\n\n            });\n        };\n        const errorFn = function () {\n            that.setState({\n                advanceLoading: false,\n            })\n        };\n        reqData.page = page;\n        getAPI(ADVANCED_SEARCH_PATIENT, successFn, errorFn, reqData)\n\n    }\n\n    render() {\n        const that = this;\n        const {getFieldDecorator, getFieldValue} = this.props.form;\n\n        const formItemLayout = {\n            labelCol: {\n                xs: {span: 24},\n                sm: {span: 4}\n            },\n            wrapperCol: {\n                xs: {span: 24},\n                sm: {span: 20}\n            }\n        };\n        getFieldDecorator('keys', {initialValue: [0]});\n        const keys = getFieldValue('keys');\n        const selectedOptionKeys = {\n            ...mapKeys(this.state.selectedOption, function (value) {\n                return value\n            })\n        }\n        const chooseOption = keys.map((k, index) => (\n<Row gutter={12} key={k}>\n                <Col span={10}>\n                    <Select\n                      style={{width: '200px'}}\n                      defaultValue={CHOOSE}\n                      key={k}\n                      size=\"small\"\n                      onChange={(value) => this.handleChangeOption(k, 'type', value)}\n                    >\n                        <Select.Option value=\"\">{CHOOSE}</Select.Option>\n                        {filter(this.state.advanced_option, function (item) {\n                            if (that.state.selectedOption[k] == item.value)\n                                return true\n                            return !selectedOptionKeys[item.value]\n                        }).map((item) => (\n<Select.Option value={item.value} key={k}>\n                            {item.label}\n</Select.Option>\n))}\n                    </Select>\n                </Col>\n                {this.state.selectedOption ? (\n                    <>\n                        <Col span={8}>\n                            <FormItems\n                              k={k}\n                              selectedOption={this.state.selectedOption}\n                              form={this.props.form}\n                              sourceList={this.state.sourceList}\n                            />\n                        </Col>\n                        <Col span={4}>\n                            {index ? (\n                                <Button onClick={() => this.removeNewOptionField(k)} size=\"small\" style={{margin: 5}}>\n                                    <Icon\n                                      className=\"dynamic-delete-button\"\n                                      type=\"minus-circle-o\"\n                                      style={{color: \"red\"}}\n                                    />\n                                </Button>\n                            ) : null}\n                            {index == keys.length - 1 && that.state.selectedOption[k] ? (\n                                <Button onClick={this.addNewOptionField} size=\"small\" style={{margin: 5}}>\n                                    <Icon className=\"dynamic-delete-button\" type=\"plus-circle-o\" />\n                                </Button>\n                              ) : null}\n                        </Col>\n                    </>\n                  ) : null}\n</Row>\n        ));\n\n\n        return that.props.activePracticePermissions.ViewPatient ? (\n<div>\n\n            <Row gutter={16}>\n                {this.state.advancedOptionShow ? (\n                    <Form onSubmit={this.AdvanceSearchPatient} layout=\"inline\">\n                        <Row gutter={16}>\n                            <Col span={16}>\n                                {chooseOption}\n                            </Col>\n                            <Col span={4} style={{display: 'flex'}}>\n                                <Form.Item>\n                                    <Button\n                                      icon=\"search\"\n                                      htmlType=\"submit\"\n                                      onSubmit={this.AdvanceSearchPatient}\n                                      type=\"primary\"\n                                      style={{margin: 5}}\n                                    >Search\n                                    </Button>\n                                </Form.Item>\n                                <Form.Item>\n                                    <Button\n                                      style={{margin: 5}}\n                                      onClick={(value) => this.advancedOption(true)}\n                                      size=\"small\"\n                                    >Basic\n                                        Search\n                                    </Button>\n                                </Form.Item>\n                            </Col>\n                        </Row>\n                    </Form>\n                  )\n                    : (\n<>\n                        <Col span={12}>\n                            <Search\n                              style={{margin: 5}}\n                              placeholder=\"Search Patient By Name / ID / Mobile No / Aadhar No\"\n                              size=\"small\"\n                              onChange={value => this.searchPatient(value.target.value)}\n                              enterButton\n                            />\n                        </Col>\n                        <Col span={12} style={{textAlign: \"center\"}}>\n                            <Button style={{margin: 5}} onClick={(value) => this.advancedOption(false)} size=\"small\">Advance\n                                Search\n                            </Button>\n                        </Col>\n\n</>\n)}\n                <Divider style={{margin: 0}} />\n            </Row>\n            <Row gutter={16}>\n                <Col\n                  span={5}\n                  style={{\n                         height: 'calc(100% - 55px)',\n                         overflow: 'auto',\n                         padding: '10px',\n                         // backgroundColor: '#e3e5e6',\n                         // borderRight: '1px solid #ccc'\n                     }}\n                >\n                    <Radio.Group\n                      buttonStyle=\"solid\"\n                      defaultValue={this.state.selectedPatientGroup}\n                      onChange={this.changeSelectedPatientGroup}\n                    >\n                        <h2>Patients</h2>\n                        <Radio.Button\n                          key=\"all\"\n                          style={{width: '100%', backgroundColor: 'transparent', border: '0px'}}\n                          value=\"all\"\n                        >\n                            All Patients\n                            <Tag color=\"#87d068\" style={{float: 'right', margin: 4}}>\n                                {this.state.totalPatients ? this.state.totalPatients : 0}\n                            </Tag>\n                        </Radio.Button>\n                        {/* <Radio.Button style={{width: '100%', backgroundColor: 'transparent', border: '0px'}} value=\"b\"> */}\n                        {/* Recently Visited */}\n                        {/* </Radio.Button> */}\n                        {/* <Radio.Button style={{width: '100%', backgroundColor: 'transparent', border: '0px'}} value=\"c\"> */}\n                        {/* Recently Added */}\n                        {/* </Radio.Button> */}\n                        <p><br /></p>\n                        <h2>Groups</h2>\n                        <p><b>My Groups</b>\n                            <a\n                              style={{float: 'right'}}\n                              onClick={() => this.togglePatientGroupEditing(true)}\n                            >Manage\n                            </a>\n                        </p>\n                        {this.state.patientGroup.map((group) => (\n<Radio.Button\n  key={group.id}\n  style={{width: '100%', backgroundColor: 'transparent', border: '0px'}}\n  value={group.id}\n>\n                            {group.name}\n                            <Tag color=\"#87d068\" style={{float: 'right', margin: 4}}>\n                                {group.patient_count}\n                            </Tag>\n</Radio.Button>\n))}\n                        <p><br /></p>\n                        <p><b>Smart Groups</b></p>\n                        <Radio.Button\n                          style={{width: '100%', backgroundColor: 'transparent', border: '0px'}}\n                          key=\"smart_a\"\n                          value=\"smart_a\"\n                        >\n                            All Male\n                        </Radio.Button>\n                        <Radio.Button\n                          style={{width: '100%', backgroundColor: 'transparent', border: '0px'}}\n                          key=\"smart_b\"\n                          value=\"smart_b\"\n                        >\n                            All Female\n                        </Radio.Button>\n                        <Radio.Button\n                          style={{width: '100%', backgroundColor: 'transparent', border: '0px'}}\n                          key=\"smart_e\"\n                          value=\"smart_e\"\n                        >\n                            Male Over 30\n                        </Radio.Button>\n                        <Radio.Button\n                          style={{width: '100%', backgroundColor: 'transparent', border: '0px'}}\n                          key=\"smart_c\"\n                          value=\"smart_c\"\n                        >\n                            Female Over 30\n                        </Radio.Button>\n                        <Radio.Button\n                          style={{width: '100%', backgroundColor: 'transparent', border: '0px'}}\n                          key=\"smart_f\"\n                          value=\"smart_f\"\n                        >\n                            Male Under 30\n                        </Radio.Button>\n                        <Radio.Button\n                          style={{width: '100%', backgroundColor: 'transparent', border: '0px'}}\n                          key=\"smart_d\"\n                          value=\"smart_d\"\n                        >\n                            Female Under 30\n                        </Radio.Button>\n                        <p><br /></p>\n                    </Radio.Group>\n                </Col>\n                <Col span={19} style={{overflow: 'scroll', borderLeft: '1px solid #ccc'}}>\n\n\n                    <Spin spinning={this.state.loading}>\n                        <Row>\n                            {this.state.patientListData.length ?\n                                this.state.patientListData.map((patient) => (\n<PatientCard\n  {...patient}\n  key={patient.id}\n  showMobile={that.props.activePracticePermissions.PatientPhoneNumber}\n  showEmail={that.props.activePracticePermissions.PatientEmailId}\n  setCurrentPatient={that.props.setCurrentPatient}\n/>\n)) :\n                                <p style={{textAlign: 'center'}}>No Data Found</p>}\n                        </Row>\n                    </Spin>\n                    {this.state.searchvalue ? (\n<InfiniteFeedLoaderButton\n  loaderFunction={this.searchPatient}\n  loading={this.state.loading}\n  hidden={!this.state.morePatients}\n/>\n) : (this.state.advancedSearch ? (\n                        <InfiniteFeedLoaderButton\n                          loading={this.state.advanceLoading}\n                          loaderFunction={() => this.loadAdvanceSearchPatient(that.state.morePatientList)}\n                          hidden={!this.state.morePatientList}\n                        />\n                      ) : (\n                        <InfiniteFeedLoaderButton\n                          loaderFunction={this.getMorePatient}\n                          loading={this.state.loading}\n                          hidden={!this.state.morePatients}\n                        />\n                      ))}\n                </Col>\n\n                {/* <Col span={19} style={{overflow: 'scroll', borderLeft: '1px solid #ccc'}}> */}\n                {/*    <Search placeholder=\"Search Patient By Name / ID / Mobile No / Aadhar No\" */}\n                {/*            onChange={value => this.searchPatient(value.target.value)} */}\n                {/*            enterButton/> */}\n\n                {/*    <Spin spinning={this.state.loading}> */}\n                {/*        <Row> */}\n                {/*            {this.state.patientListData.length ? */}\n                {/*                this.state.patientListData.map((patient) => <PatientCard {...patient} */}\n                {/*                                                                         key={patient.id} */}\n                {/*                                                                         showMobile={that.props.activePracticePermissions.PatientPhoneNumber} */}\n                {/*                                                                         showEmail={that.props.activePracticePermissions.PatientEmailId} */}\n                {/*                                                                         setCurrentPatient={that.props.setCurrentPatient}/>) : */}\n                {/*                <p style={{textAlign: 'center'}}>No Data Found</p> */}\n                {/*            } */}\n                {/*        </Row> */}\n                {/*    </Spin> */}\n                {/*    {this.state.searchvalue ?  <InfiniteFeedLoaderButton loaderFunction={this.searchPatient} */}\n                {/*                                                         loading={this.state.loading} */}\n                {/*                                                         hidden={!this.state.morePatients}/> : */}\n\n                {/*        <InfiniteFeedLoaderButton loaderFunction={this.getMorePatient} */}\n                {/*                                  loading={this.state.loading} */}\n                {/*                                  hidden={!this.state.morePatients}/> */}\n                {/*    } */}\n\n                {/* </Col> */}\n                <Modal\n                  visible={this.state.showPatientGroupModal}\n                  footer={null}\n                  onCancel={() => this.togglePatientGroupEditing(false)}\n                >\n                    <PatientGroups {...this.props} />\n                </Modal>\n            </Row>\n</div>\n) : <PermissionDenied />\n    }\n}\n\nexport default Form.create()(PatientSelection);\n\nfunction PatientCard(patient) {\n    return (\n<Col xs={24} sm={24} md={12} lg={8} xl={8} xxl={6}>\n        <Card onClick={() => patient.setCurrentPatient(patient)} style={{margin: '3px', paddingBottom: \"8px\"}}>\n            <Meta\n              avatar={(patient.image ? <Avatar src={makeFileURL(patient.image)} size={50} /> : (\n                <Avatar style={{backgroundColor: '#87d068'}} size={50}>\n                    {patient.user.first_name ? patient.user.first_name.charAt(0) :\n                        <Icon type=\"user\" />}\n                </Avatar>\n              ))}\n              title={patient.user.first_name}\n              description={(\n                      <span>{patient.showMobile ? patient.user.mobile : hideMobile(patient.user.mobile)}<br />{patient.showEmail ? patient.user.email : hideEmail(patient.user.email)}\n                          <br />\n                          <span className=\"patientIdHighlight\">#\n                              {patient.custom_id ? patient.custom_id : patient.id}\n                              {patient.gender ? `,${  patient.gender.charAt(0).toUpperCase()}` : null}\n                          </span>\n\n                      </span>\n                    )}\n            />\n        </Card>\n</Col>\n);\n}\n\nfunction FormItems(index) {\n    return (\n        <>\n            {index.selectedOption[index.k] == 'name' ? (\n                <Form.Item key={index.key} label=\"contains\">\n                    {index.form.getFieldDecorator('name',)\n                    (<Input placeholder=\"patient Name\" size=\"small\" />)}\n                </Form.Item>\n              ) : null}\n\n            {index.selectedOption[index.k] == 'phone' ? (\n                <Form.Item key={index.key} label=\"contains\">\n                    {index.form.getFieldDecorator('phone',)\n                    (<Input placeholder=\"Contact Number\" size=\"small\" />)}\n                </Form.Item>\n              ) : null}\n\n            {index.selectedOption[index.k] == 'age' ? (\n                <Form.Item key={index.key}>\n                    {index.form.getFieldDecorator('age',)\n                    (<InputNumber placeholder=\"Patient Age\" size=\"small\" />)}\n                </Form.Item>\n              ) : null}\n\n            {index.selectedOption[index.k] == 'age_gte' ? (\n                <Form.Item key={index.key}>\n                    {index.form.getFieldDecorator('age_gte',)\n                    (<InputNumber placeholder=\"Age more than\" size=\"small\" />)}\n                </Form.Item>\n              ) : null}\n\n            {index.selectedOption[index.k] == 'age_lte' ? (\n                <Form.Item key={index.key}>\n                    {index.form.getFieldDecorator('age_lte',)\n                    (<InputNumber placeholder=\"Age Less than\" size=\"small\" />)}\n                </Form.Item>\n              ) : null}\n\n            {index.selectedOption[index.k] == 'has_age' ? (\n                <Form.Item>\n                    {index.form.getFieldDecorator('has_age')\n                    (<Select style={{width: 100}} size=\"small\">\n                        {HAS_AGE.map((option) => <Select.Option value={option.value}>{option.label} </Select.Option>)}\n                     </Select>)}\n                </Form.Item>\n              )\n                : null}\n\n            {index.selectedOption[index.k] == 'dob' ? (\n                <Form.Item key={index.key} label=\"is\">\n                    {index.form.getFieldDecorator('dob',)\n                    (<DatePicker placeholder=\"Date of Birth\" size=\"small\" />)}\n                </Form.Item>\n              ) : null}\n\n            {index.selectedOption[index.k] == 'dob_gte' ? (\n                <Form.Item key={index.key}>\n                    {index.form.getFieldDecorator('dob_gte',)\n                    (<DatePicker size=\"small\" />)}\n                </Form.Item>\n              ) : null}\n\n            {index.selectedOption[index.k] == 'dob_lte' ? (\n                <Form.Item key={index.key}>\n                    {index.form.getFieldDecorator('dob_lte',)\n                    (<DatePicker size=\"small\" />)}\n                </Form.Item>\n              ) : null}\n\n            {index.selectedOption[index.k] == 'dob_month' ? (\n                <Form.Item key={index.key}>\n                    {index.form.getFieldDecorator('dob_month',)\n                    (<MonthPicker size=\"small\" />)}\n                </Form.Item>\n              ) : null}\n\n            {index.selectedOption[index.k] == 'has_dob' ? (\n                <Form.Item>\n                    {index.form.getFieldDecorator('has_dob')\n                    (<Select style={{width: 100}} size=\"small\">\n                        {HAS_DOB.map((option) => <Select.Option value={option.value}>{option.label} </Select.Option>)}\n                     </Select>)}\n                </Form.Item>\n              )\n                : null}\n\n            {index.selectedOption[index.k] == 'patient_id' ? (\n                <Form.Item key={index.key} label=\"contains\">\n                    {index.form.getFieldDecorator('patient_id',)\n                    (<Input placeholder=\"Patient Id\" size=\"small\" />)}\n                </Form.Item>\n              ) : null}\n\n            {index.selectedOption[index.k] == 'has_aadhar' ? (\n                <Form.Item>\n                    {index.form.getFieldDecorator('has_aadhar')\n                    (<Select style={{width: 100}} size=\"small\">\n                        {HAS_AADHAR_ID.map((option) => (\n<Select.Option\n  value={option.value}\n>{option.label}\n</Select.Option>\n))}\n                     </Select>)}\n                </Form.Item>\n              )\n                : null}\n\n            {index.selectedOption[index.k] == 'aadhar' ? (\n                <Form.Item key={index.key} label=\"contains\">\n                    {index.form.getFieldDecorator('aadhar',)\n                    (<Input placeholder=\"Aadhar Id\" size=\"small\" />)}\n                </Form.Item>\n              ) : null}\n\n            {index.selectedOption[index.k] == 'email' ? (\n                <Form.Item key={index.key} label=\"contains\">\n                    {index.form.getFieldDecorator('email',)\n                    (<Input placeholder=\"Email Id\" size=\"small\" />)}\n                </Form.Item>\n              ) : null}\n\n            {index.selectedOption[index.k] == 'has_email' ? (\n                <Form.Item>\n                    {index.form.getFieldDecorator('has_email')\n                    (<Select style={{width: 100}} size=\"small\">\n                        {HAS_EMAIL.map((option) => <Select.Option value={option.value}>{option.label} </Select.Option>)}\n                     </Select>)}\n                </Form.Item>\n              )\n                : null}\n\n            {index.selectedOption[index.k] == 'gender' ? (\n                <Form.Item key={index.key} label=\"is\">\n                    {index.form.getFieldDecorator('gender')\n                    (<Select style={{width: 100}} size=\"small\">\n                        {GENDER_OPTION.map((option) => (\n<Select.Option\n  value={option.value}\n>{option.label}\n</Select.Option>\n))}\n                     </Select>)}\n                </Form.Item>\n              )\n                : null}\n\n\n            {index.selectedOption[index.k] == 'has_gender' ? (\n                <Form.Item>\n                    {index.form.getFieldDecorator('has_gender')\n                    (<Select style={{width: 100}} size=\"small\">\n                        {HAS_GENDER.map((option) => (\n<Select.Option\n  value={option.value}\n>{option.label}\n</Select.Option>\n))}\n                     </Select>)}\n                </Form.Item>\n              )\n                : null}\n\n            {index.selectedOption[index.k] == 'pincode' ? (\n                <Form.Item key={index.key} label=\"contains\">\n                    {index.form.getFieldDecorator('pincode',)\n                    (<Input placeholder=\"PINCODE\" size=\"small\" />)}\n                </Form.Item>\n              ) : null}\n\n            {index.selectedOption[index.k] == 'has_pincode' ? (\n                <Form.Item>\n                    {index.form.getFieldDecorator('has_pincode')\n                    (<Select style={{width: 100}} size=\"small\">\n                        {HAS_PINCODE.map((option) => (\n<Select.Option\n  value={option.value}\n>{option.label}\n</Select.Option>\n))}\n                     </Select>)}\n                </Form.Item>\n              )\n                : null}\n\n            {index.selectedOption[index.k] == 'has_street' ? (\n                <Form.Item>\n                    {index.form.getFieldDecorator('has_street')\n                    (<Select style={{width: 100}} size=\"small\">\n                        {HAS_STREET.map((option) => (\n<Select.Option\n  value={option.value}\n>{option.label}\n</Select.Option>\n))}\n                     </Select>)}\n                </Form.Item>\n              )\n                : null}\n\n\n            {index.selectedOption[index.k] == 'street' ? (\n                <Form.Item key={index.key} label=\"contains\">\n                    {index.form.getFieldDecorator('street',)\n                    (<Input placeholder=\"Street Address\" size=\"small\" />)}\n                </Form.Item>\n              ) : null}\n\n            {index.selectedOption[index.k] == 'blood_group' ? (\n                <Form.Item key={index.key} label=\"is\">\n                    {index.form.getFieldDecorator('blood_group')\n                    (<Select style={{width: 100}} size=\"small\">\n                        {BLOOD_GROUPS.map((option) => (\n<Select.Option\n  value={option.value}\n>{option.name}\n</Select.Option>\n))}\n                     </Select>)}\n                </Form.Item>\n              )\n                : null}\n\n            {index.selectedOption[index.k] == 'source' ? (\n                <Form.Item>\n                    {index.form.getFieldDecorator('source')\n                    (<Select style={{width: 100}} size=\"small\">\n                        {index.sourceList.map((option) => (\n<Select.Option\n  value={option.id}\n>{option.name}\n</Select.Option>\n))}\n                     </Select>)}\n                </Form.Item>\n              )\n                : null}\n\n            {index.selectedOption[index.k] == 'agent_referal' ? (\n                <Form.Item>\n                    {index.form.getFieldDecorator('agent_referal')\n                    (<Select style={{width: 100}} size=\"small\">\n                        {REFERED_BY_AGENT.map((option) => (\n<Select.Option\n  value={option.value}\n>{option.label}\n</Select.Option>\n))}\n                     </Select>)}\n                </Form.Item>\n              )\n                : null}\n\n\n        </>\n)\n}\n","import React from \"react\";\nimport {Divider,Form, List} from \"antd\";\nimport moment from \"moment\";\nimport {displayMessage, getAPI, interpolate} from \"../../../utils/common\";\nimport {INPUT_FIELD, SUCCESS_MSG_TYPE} from \"../../../constants/dataKeys\";\n\nimport DynamicFieldsForm from \"../../common/DynamicFieldsForm\";\nimport {PATIENT_CALL_NOTES, PATIENT_GROUPS, PATIENT_NOTES} from \"../../../constants/api\";\n\nexport default class PatientNotes extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            notes: [],\n            callNotesLoading:false,\n            loading:true\n        }\n    }\n\n    componentDidMount() {\n        this.loadPatientNotes();\n        this.loadPatientCallNotes();\n    }\n\n    loadPatientNotes() {\n        const that = this;\n        that.setState({\n            loading:true\n        })\n        const successFn = function (data) {\n            that.setState({\n                notes: data,\n                loading: false\n            });\n        };\n        const errorFn = function () {\n            that.setState({\n                loading: false\n            })\n\n        };\n        getAPI(interpolate(PATIENT_NOTES, [this.props.patientId, this.props.active_practiceId]), successFn, errorFn);\n    }\n\n    loadPatientCallNotes=()=>{\n      const that = this;\n      that.setState({\n          callNotesLoading:true\n      })\n      const successFn = function (data) {\n          that.setState({\n              callNotes:data,\n              callNotesLoading:false,\n          })\n      }\n      const errorFn = function (data) {\n          that.setState({\n              callNotesLoading:false\n          })\n      }\n      const apiParams ={\n          patient:this.props.patientId\n      }\n      getAPI(PATIENT_CALL_NOTES,  successFn, errorFn, apiParams);\n    };\n\n    render() {\n        const that = this;\n        const fields = [{\n            key: \"name\",\n            required: true,\n            type: INPUT_FIELD\n        }]\n        const formProp = {\n            successFn (data) {\n\n                displayMessage(SUCCESS_MSG_TYPE, \"Patient Note Added\");\n                that.loadPatientNotes();\n            },\n            errorFn () {\n\n            },\n            action: interpolate(PATIENT_NOTES, [this.props.patientId, this.props.active_practiceId]),\n            method: \"post\",\n            beforeSubmit (data) {\n\n            }\n        }\n        const defaultValues = [{key: 'patient', value: this.props.patientId}, {\n            key: 'practice',\n            value: this.props.active_practiceId\n        }]\n        const TestFormLayout = Form.create()(DynamicFieldsForm);\n        return (\n<div>\n            <Divider>Patient Notes</Divider>\n            <TestFormLayout\n              formProp={formProp}\n              defaultValues={defaultValues}\n              fields={fields}\n            />\n            <List\n              size=\"small\"\n              loading={this.state.loading}\n              dataSource={this.state.notes}\n              renderItem={item => (\n<List.Item>\n                <List.Item.Meta\n                  title={item.name}\n                  description={`by ${  item.staff ? item.staff.user.first_name : '--'} on ${moment(item.created_at).format('lll')}`}\n                />\n</List.Item>\n)}\n            />\n\n            <Divider>Voice Call Notes</Divider>\n            <List\n              size=\"small\"\n              loading={this.state.callNotesLoading}\n              dataSource={this.state.callNotes}\n              renderItem={item => (\n<List.Item>\n                <List.Item.Meta\n                  title={item.remarks?item.remarks:'--'}\n                  description={`Created on ${moment(item.timestamp).format('lll')}`}\n                />\n</List.Item>\n)}\n            />\n\n</div>\n)\n    }\n}\n","import React from \"react\";\nimport {Divider,Form} from \"antd\";\nimport moment from \"moment\";\nimport {Redirect} from \"react-router-dom\";\nimport {displayMessage, getAPI, interpolate} from \"../../../utils/common\";\nimport {PATIENTS_MEMBERSHIP_API,MEMBERSHIP_API} from \"../../../constants/api\"\nimport {INPUT_FIELD,DATE_PICKER ,SUCCESS_MSG_TYPE, SELECT_FIELD} from \"../../../constants/dataKeys\";\nimport DynamicFieldsForm from \"../../common/DynamicFieldsForm\";\n\nexport default class MedicalMembership extends React.Component{\n    constructor(props) {\n        super(props);\n        this.state = {\n            redirect:false,\n            currentPatient: this.props.currentPatient,\n            Membership:[],\n            \n        }\n        this.loadMembership =this.loadMembership.bind(this);\n    }\n\n    componentDidMount() {\n        this.loadMembership();\n    }\n\n    loadMembership(){\n        const that=this;\n        const successFn =function (data){\n            that.setState({\n                Membership:data,\n                loading:false\n            })\n        };\n        const errorFn = function(){\n            that.setState({\n                loading:false\n            })\n        };\n        if(that.state.currentPatient){\n            getAPI(interpolate(MEMBERSHIP_API ,[that.props.active_practiceId]),successFn,errorFn);\n        }\n\n    }\n\n    render(){\n        const that = this;\n        console.log(\"form state\",this.state)\n        const fields = [{\n            label: \"Type\",\n            key: \"medical_membership\",\n            type: SELECT_FIELD,\n            options: this.state.Membership.map(MembershipItem => ({label: MembershipItem.name, value: MembershipItem.id}))\n        },{\n            label:\"Start Date\",\n            key:\"medical_from\",\n            initilValue:moment(),\n            type:DATE_PICKER,format:'YYYY-MM-DD'\n\n        }];\n            const formProp = {\n                successFn (data) {\n                    displayMessage(SUCCESS_MSG_TYPE, \"Medical Membership added\");\n                    that.props.loadProfile();\n                    that.props.loadMedicalMembership();\n                    that.props.formChange();\n                },\n                errorFn () {\n                    \n                },\n                action: interpolate(PATIENTS_MEMBERSHIP_API, [this.props.patientId]),\n                method: \"post\"\n            }\n        const TestFormLayout = Form.create()(DynamicFieldsForm);\n        const defaultValues = [{key: 'patient', value: this.props.patientId}, {key: 'practice', value: this.props.active_practiceId}]\n\n        return<TestFormLayout formProp={formProp} defaultValues={defaultValues} fields={fields} />\n    }\n}","import React from \"react\";\nimport {Divider,Form} from \"antd\";\nimport {displayMessage, getAPI, interpolate} from \"../../../utils/common\";\nimport {AGENT_ROLES, PATIENT_PROFILE} from \"../../../constants/api\"\nimport {SUCCESS_MSG_TYPE, SELECT_FIELD, SINGLE_IMAGE_UPLOAD_FIELD, INPUT_FIELD} from \"../../../constants/dataKeys\";\nimport DynamicFieldsForm from \"../../common/DynamicFieldsForm\";\n\nexport default class AddOrEditAgent extends React.Component{\n    constructor(props) {\n        super(props);\n        this.state = {\n            redirect:false,\n            currentPatient: this.props.currentPatient,\n            agentRoles:[],\n\n        }\n        this.loadAgentRoles =this.loadAgentRoles.bind(this);\n    }\n\n    componentDidMount() {\n        this.loadAgentRoles();\n    }\n\n    loadAgentRoles(){\n        const that=this;\n        const successFn =function (data){\n            that.setState({\n                agentRoles:data,\n                loading:false\n            })\n        };\n        const errorFn = function(){\n            that.setState({\n                loading:false\n            })\n        };\n        getAPI(AGENT_ROLES,successFn,errorFn);\n\n    }\n\n    render(){\n        const that = this;\n        const fields = [{\n            label: \"Role Type\",\n            key: \"role\",\n            type: SELECT_FIELD,\n            options: this.state.agentRoles.map(roles => ({label: roles.name, value: roles.id}))\n        },{\n            label:\"Document Upload\",\n            key:'aadhar_upload',\n            type:SINGLE_IMAGE_UPLOAD_FIELD,\n            required:true\n        }];\n            const formProp = {\n                successFn (data) {\n                    displayMessage(SUCCESS_MSG_TYPE, \"Agent Role added\");\n                    that.props.loadProfile();\n\n                },\n                errorFn () {\n\n                },\n                action: interpolate(PATIENT_PROFILE, [this.props.patientId]),\n                method: \"put\"\n            }\n        const TestFormLayout = Form.create()(DynamicFieldsForm);\n        const defaultValues = [{key:'is_agent' , value:true}]\n\n        return<TestFormLayout formProp={formProp} defaultValues={defaultValues} fields={fields} />\n    }\n}","import React from \"react\";\nimport {Avatar, Button, Card, Col, Divider, Icon, List, Row, Popconfirm, Modal, Statistic, Tag} from \"antd\";\nimport {Link, Redirect} from \"react-router-dom\";\nimport moment from \"moment\";\nimport PatientSelection from \"../PatientSelection\";\nimport {getAPI, postAPI, interpolate, displayMessage, makeFileURL} from \"../../../utils/common\";\nimport {MEDICAL_MEMBERSHIP_CANCEL_API, PATIENTS_MEMBERSHIP_API, PATIENT_PROFILE} from \"../../../constants/api\";\nimport PatientNotes from \"./PatientNotes\";\nimport MedicalMembership from \"./MedicalMembership\";\nimport {SUCCESS_MSG_TYPE, ERROR_MSG_TYPE} from \"../../../constants/dataKeys\";\nimport {hideEmail, hideMobile} from \"../../../utils/permissionUtils\";\nimport AddOrEditAgent from \"./AddOrEditAgent\";\nimport {hashCode, intToRGB} from \"../../../utils/clinicUtils\";\n\nclass PatientProfile extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            patientProfile: null,\n            currentPatient: this.props.currentPatient,\n            medicalHistory: {},\n            loading: true,\n            add: '',\n            MedicalMembership: null,\n            hide: false,\n            agentModalVisible: false,\n        };\n        this.loadProfile = this.loadProfile.bind(this);\n        this.loadMedicalMembership = this.loadMedicalMembership.bind(this);\n    }\n\n    componentDidMount() {\n        if (this.state.currentPatient) {\n            this.loadProfile(false);\n            this.loadMedicalMembership();\n        }\n    }\n\n    formChange = (value) => {\n        this.setState({\n            add: value,\n        });\n    }\n\n    componentWillReceiveProps(newProps) {\n        const that = this;\n        if (newProps.currentPatient && newProps.currentPatient != this.state.currentPatient) {\n\n            this.setState({\n                currentPatient: newProps.currentPatient,\n            }, function () {\n                that.loadProfile(false);\n            })\n        }\n    }\n\n    loadProfile(refreshHeader = true) {\n        const that = this;\n        const successFn = function (data) {\n            that.setState({\n                patientProfile: data,\n                loading: false\n            });\n            if (that.props.refreshWallet && refreshHeader) {\n                that.props.refreshWallet();\n            }\n        };\n        const errorFn = function () {\n            that.setState({\n                loading: false\n            })\n        };\n        if (that.state.currentPatient)\n            getAPI(interpolate(PATIENT_PROFILE, [that.state.currentPatient.id]), successFn, errorFn);\n    }\n\n    loadMedicalMembership() {\n        const that = this;\n        const successFn = function (data) {\n            that.setState({\n                MedicalMembership: data[data.length - 1],\n                loading: false\n            })\n        };\n        const errorFn = function () {\n            that.setState({\n                loading: false\n            })\n        };\n        getAPI(interpolate(PATIENTS_MEMBERSHIP_API, [that.props.currentPatient.id]), successFn, errorFn);\n\n    }\n\n    onClickHandler(value) {\n        const that = this;\n        if (this.state.MedicalMembership) {\n            displayMessage(ERROR_MSG_TYPE, \"Membership !!\");\n            that.setState({\n                add: false\n            })\n        } else {\n            this.setState({\n                add: value\n            });\n        }\n\n    }\n\n    deleteMembership(id) {\n        const that = this;\n        const reqData = {\n            id,\n            is_active: false\n        }\n        const successFn = function (data) {\n            that.loadProfile();\n            that.loadMedicalMembership();\n            if (that.props.refreshWallet) {\n                that.props.refreshWallet();\n            }\n        }\n        const errorFn = function () {\n\n        };\n        postAPI(interpolate(MEDICAL_MEMBERSHIP_CANCEL_API, [that.props.currentPatient.id]), reqData, successFn, errorFn);\n    }\n\n    addAgent = () => {\n        const that = this;\n        that.setState({\n            agentModalVisible: true,\n        });\n    }\n\n    addAgentModalClosed = () => {\n        this.setState({\n            agentModalVisible: false\n        })\n    }\n\n    render() {\n        const that = this;\n        if (this.props.currentPatient) {\n            const patient = this.state.patientProfile;\n            if (!patient)\n                return <Card loading={this.state.loading} />;\n            return (\n<Card loading={this.state.loading} title=\"Patient Profile\">\n                <Row gutter={16}>\n                    <Col span={6} style={{textAlign: 'center'}}>\n                        {(patient.image ? <img src={makeFileURL(patient.image)} style={{width: '100%'}} /> : (\n                            <Avatar size={200} shape=\"square\" style={{backgroundColor: '#87d068'}}>\n                                {patient.user.first_name ? patient.user.first_name :\n                                    <Icon type=\"user\" />}\n                            </Avatar>\n                          ))}\n\n                        {patient.is_agent && patient.is_approved ? (\n<Statistic\n  title=\"Referral Code\"\n  value={patient.user.referer_code}\n/>\n) : null}\n                        {that.props.activePracticePermissions.EditPatient ? (\n                            <Link to={`/patient/${  this.state.currentPatient.id  }/profile/edit`}>\n                                <Button type=\"primary\" style={{margin:10}} block>\n                                    <Icon type=\"edit\" />&nbsp;Edit Patient Profile\n                                </Button>\n                            </Link>\n                          ) : null}\n                        <Col>\n                            <Divider />\n\n                            {this.state.add ? (\n<div><h1 style={{fontSize: '18px'}}>Medical Membership <a\n  href=\"#\"\n  onClick={() => this.onClickHandler(false)}\n>Cancel\n                                                       </a>\n     </h1>\n                                    <MedicalMembership\n                                      {...this.props}\n                                      {...this.state}\n                                      patientId={patient.id}\n                                      loadMedicalMembership={that.loadMedicalMembership}\n                                      formChange={that.formChange}\n                                      loadProfile={that.loadProfile}\n                                    />\n</div>\n)\n                                : (\n<div style={{padding: '0px'}}><h1\n  style={{fontSize: '18px', textAlign: 'center'}}\n>Medical Membership <a\n  href=\"#\"\n  onClick={() => this.onClickHandler(true)}\n>{this.state.MedicalMembership ? 'Renew' : 'Add'}\n                    </a>\n                              </h1>\n                                    {this.state.MedicalMembership ? (\n<Card\n  size=\"small\"\n  title=\"Membership\"\n  extra={(\n<Popconfirm\n  title=\"Are you sure delete this Membership?\"\n  onConfirm={() => that.deleteMembership(this.state.MedicalMembership.id)}\n  okText=\"Yes\"\n  cancelText=\"No\"\n>\n                                                                              <Button\n                                                                                icon=\"close\"\n                                                                                type=\"danger\"\n                                                                                shape=\"circle\"\n                                                                                size=\"small\"\n                                                                              />\n</Popconfirm>\n)}\n  style={{textAlign: \"center\"}}\n>\n                                            <div style={{textAlign: \"left\"}}>\n                                                <p><strong>Membership Code : </strong>\n                                                    <span>{this.state.MedicalMembership.membership_code}</span>\n                                                </p>\n                                                <p><strong>Start Date : </strong>\n                                                    <span>{this.state.MedicalMembership.medical_from}</span>\n                                                </p>\n                                                <p><strong>Valid Till : </strong>\n                                                    <span>{this.state.MedicalMembership.medical_to}</span>\n                                                </p>\n                                            </div>\n</Card>\n)\n                                        : null}\n</div>\n)}\n                        </Col>\n                    </Col>\n\n                    <Col span={12}>\n                        <PatientRow label=\"Patient Name\" value={patient.user.first_name} />\n                        <PatientRow label=\"Patient ID\" value={patient.custom_id ? patient.custom_id : patient.id} />\n                        {patient && patient.role ?\n                            <PatientRow label=\"Advisor Role\" value={patient.role_data.name} /> : null}\n                        <PatientRow label=\"Gender\" value={patient.gender} />\n                        {patient.is_age ? (\n                            <PatientRow\n                              label=\"Age\"\n                              value={patient.dob ? moment().diff(this.props.currentPatient.dob, 'years') : null}\n                            />\n                          )\n                            :\n                            <PatientRow label=\"Date of Birth\" value={patient.dob} />}\n                        <PatientRow label=\"On Dialysis?\" value={patient.on_dialysis?\"Yes\":\"No\"} />\n                        <PatientRow\n                          label=\"Referer\"\n                          value={patient.user.referer_data.referer ? (\n<Link\n  to={`/patient/${  patient.user.referer_data.patient  }/profile`}\n>{patient.user.referer_data.referer.first_name}\n</Link>\n) : \"--\"}\n                        />\n                        <Divider>Contact Details</Divider>\n                        <PatientRow\n                          label=\"Email\"\n                          value={that.props.activePracticePermissions.PatientEmailId ? patient.user.email : hideEmail(patient.user.email)}\n                        />\n                        <PatientRow\n                          label=\"Primary Mobile\"\n                          value={that.props.activePracticePermissions.PatientPhoneNumber ? patient.user.mobile : hideMobile(patient.user.mobile)}\n                        />\n                        <PatientRow\n                          label=\"Secondary Mobile\"\n                          value={that.props.activePracticePermissions.PatientPhoneNumber ? patient.secondary_mobile_no : hideMobile(patient.secondary_mobile_no)}\n                        />\n                        <PatientRow label=\"Landline No\" value={patient.landline_no} />\n                        <PatientRow label=\"Address\" value={patient.address} />\n                        <PatientRow label=\"Locality\" value={patient.locality} />\n                        <PatientRow label=\"City\" value={patient.city_data ? patient.city_data.name : null} />\n                        <PatientRow label=\"State\" value={patient.state_data ? patient.state_data.name : null} />\n                        <PatientRow label=\"Country\" value={patient.country_data ? patient.country_data.name : null} />\n                        <PatientRow label=\"Pincode\" value={patient.pincode} />\n                    </Col>\n                    <Col span={6} style={{borderLeft: '1 px solid #ccc'}}>\n                        <PatientNotes {...this.props} patientId={patient.id} />\n                        <Divider>Medical History</Divider>\n                        {patient.medical_history_data ?\n                            patient.medical_history_data.map((item, index) =>\n                                <Tag color={`#${  intToRGB(hashCode(item.name))}`}>{item.name}</Tag>) : null}\n                        {/* <List size=\"small\" loading={this.state.loading} dataSource={patient.medical_history_data} */}\n                        {/*      renderItem={(item) => */}\n                        {/*          <List.Item>{item.name}</List.Item>}/>} */}\n\n                        <Divider>Groups</Divider>\n                        <List\n                          dataSource={patient.patient_group_data}\n                          renderItem={(item) => <List.Item>{item.name}</List.Item>}\n                        />\n                        {/* <Divider>Medical Membership</Divider>\n                        <List dataSource={patient.medical_membership}\n                              renderItem={(item) => <List.Item>{item}</List.Item>}/> */}\n                    </Col>\n\n                    <Modal\n                      title=\"Add Agent\"\n                      visible={this.state.agentModalVisible}\n                      onOk={null}\n                      footer={null}\n                      onCancel={this.addAgentModalClosed}\n                    >\n                        <AddOrEditAgent patientId={patient.id} {...this.state} />\n                    </Modal>\n                </Row>\n\n</Card>\n);\n        }\n        return <PatientSelection {...this.props} />\n    }\n}\n\nexport default PatientProfile;\n\nfunction PatientRow(props) {\n    return (\n<Row gutter={16} style={{marginBottom: '5px'}}>\n        <Col span={8} style={{textAlign: 'right'}}>{props.label}:</Col>\n        <Col span={16}><strong>{props.value}</strong></Col>\n</Row>\n)\n}\n","import React from \"react\";\nimport {\n    Button,\n    Card,\n    Checkbox,\n    DatePicker,\n    Form,\n    Icon,\n    Input,\n    message,\n    Modal,\n    Select,\n    Radio,\n    Upload,\n    InputNumber,\n    Popover, Row, Col,\n} from \"antd\";\nimport moment from 'moment';\nimport {Link} from \"react-router-dom\";\nimport {\n    FILE_UPLOAD_API,\n    FILE_UPLOAD_BASE64,\n    MEDICAL_HISTORY,\n    MEMBERSHIP_API,\n    PATIENT_GROUPS,\n    PATIENT_PROFILE,\n    PATIENTS_LIST,\n    COUNTRY,\n    STATE,\n    CITY, SOURCE,\n} from \"../../../constants/api\";\nimport {\n    displayMessage,\n    getAPI,\n    interpolate,\n    makeFileURL,\n    makeURL,\n    postAPI,\n    putAPI,\n    removeEmpty\n} from \"../../../utils/common\";\nimport WebCamField from \"../../common/WebCamField\";\nimport {SUCCESS_MSG_TYPE, INPUT_FIELD, SELECT_FIELD, RELATION} from \"../../../constants/dataKeys\";\nimport {\n    PATIENT_AGE,\n    BLOOD_GROUP_CONFIG_PARAM,\n    PATIENT_SOURCE_CONFIG_PARAM,\n    SMS_LANGUAGE_CONFIG_PARAM,\n    FAMILY_RELATION_CONFIG_PARAM,\n    GENDER_CONFIG_PARAM\n} from \"../../../constants/hardData\";\nimport {loadConfigParameters} from \"../../../utils/clinicUtils\";\n\n\nconst {confirm} = Modal;\n\n\nclass EditPatientDetails extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            redirect: false,\n            history: [],\n            patientGroup: [],\n            membership: [],\n            webCamState: {},\n            countrylist: [],\n            stateList: [],\n            cityList: [],\n            sourceList: [],\n            country: this.props.currentPatient && this.props.currentPatient.country_data ? this.props.currentPatient.country : null,\n            state: this.props.currentPatient && this.props.currentPatient.state_data ? this.props.currentPatient.state : null,\n            selectedFormType: 'DOB',\n            file_count: 10,\n            file_enable: true,\n            relation_text: true,\n            loading: false,\n            [BLOOD_GROUP_CONFIG_PARAM]: [],\n            [PATIENT_SOURCE_CONFIG_PARAM]: [],\n            [SMS_LANGUAGE_CONFIG_PARAM]: [],\n            [FAMILY_RELATION_CONFIG_PARAM]: [],\n            [GENDER_CONFIG_PARAM]: [],\n            number: {}\n\n        }\n        this.changeRedirect = this.changeRedirect.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n        this.getCountry = this.getCountry.bind(this);\n        this.getState = this.getState.bind(this);\n        this.getCity = this.getCity.bind(this);\n        this.getSources = this.getSources.bind(this);\n        this.loadPatientData = this.loadPatientData.bind(this);\n    }\n\n    componentDidMount() {\n        this.loadMedicalHistory();\n        this.getPatientGroup();\n        this.getPatientMembership();\n        this.getSources();\n        this.getCountry();\n        if (this.state.country) {\n            this.getState();\n        }\n        if (this.state.state) {\n            this.getCity();\n        }\n        if (this.props.currentPatient) {\n            this.loadPatientData(this.props.currentPatient.id);\n        }\n        loadConfigParameters(this, [BLOOD_GROUP_CONFIG_PARAM, PATIENT_SOURCE_CONFIG_PARAM, SMS_LANGUAGE_CONFIG_PARAM, FAMILY_RELATION_CONFIG_PARAM, GENDER_CONFIG_PARAM])\n    }\n\n    getCountry() {\n        const that = this;\n        const successFn = function (data) {\n            that.setState({\n                countrylist: data,\n            })\n        };\n        const errorFun = function () {\n\n        };\n        getAPI(COUNTRY, successFn, errorFun);\n    }\n\n    getSources() {\n        const that = this;\n        const successFn = function (data) {\n            that.setState({\n                sourceList: data,\n            })\n        };\n        const errorFun = function () {\n\n        };\n        getAPI(SOURCE, successFn, errorFun);\n    }\n\n    getState() {\n        const that = this;\n        const successFn = function (data) {\n            that.setState({\n                stateList: data,\n            })\n\n        };\n        const errorFn = function () {\n\n        };\n        getAPI(STATE, successFn, errorFn, {country: this.state.country});\n\n\n    }\n\n    getCity() {\n        const that = this;\n        const successFn = function (data) {\n            that.setState({\n                cityList: data,\n            })\n\n        };\n        const errorFn = function () {\n\n        };\n        getAPI(CITY, successFn, errorFn, {\n            state: this.state.state,\n        });\n\n    }\n\n    getPatientMembership() {\n        const that = this;\n        const successFn = function (data) {\n            that.setState({\n                membership: data\n            })\n        }\n        const errorFn = function () {\n\n        }\n        getAPI(interpolate(MEMBERSHIP_API, [this.props.active_practiceId]), successFn, errorFn);\n    }\n\n    loadMedicalHistory = () => {\n        const that = this;\n        const successFn = function (data) {\n            that.setState({\n                history: data,\n            })\n        };\n        const errorFn = function () {\n\n        };\n\n        getAPI(interpolate(MEDICAL_HISTORY, [this.props.active_practiceId]), successFn, errorFn);\n\n    };\n\n    loadPatientData(patientId) {\n\n        const that = this;\n        const successFn = function (data) {\n            that.setState({\n                patientDetails: data,\n                loading: false\n            })\n        }\n        const errorFn = function () {\n            that.setState({\n                loading: false\n            })\n        };\n        getAPI(interpolate(PATIENT_PROFILE, [patientId]), successFn, errorFn);\n    }\n\n    changeRedirect() {\n        const redirectVar = this.state.redirect;\n        this.setState({\n            redirect: !redirectVar,\n        });\n    }\n\n    setFormParams = (type, value) => {\n        this.setState({\n            [type]: value\n        })\n    }\n\n    getPatientGroup = () => {\n        const that = this;\n        const successFn = function (data) {\n            that.setState({\n                patientGroup: data,\n                loading: false\n            });\n        };\n        const errorFn = function () {\n            that.setState({\n                loading: false\n            })\n\n        };\n        getAPI(interpolate(PATIENT_GROUPS, [this.props.active_practiceId]), successFn, errorFn);\n    }\n\n    handleSubmit = (e) => {\n        const that = this;\n        e.preventDefault();\n        this.props.form.validateFields((err, values) => {\n            if (!err) {\n                let reqData = {\n                    ...values,\n                    file_enable: !!values.file_enable,\n                    file_count: values.file_count ? values.file_count : this.state.file_count,\n                    on_dialysis: !!that.state.on_dialysis,\n                    medical_history: values.medical_history,\n                    patient_group: values.patient_group,\n                    user: {\n                        first_name: values.first_name ? values.first_name : '',\n                        mobile: values.mobile,\n                        email: values.email\n                    },\n\n\n                };\n\n                if (values.anniversary) {\n                    reqData.anniversary = moment(values.anniversary).format(\"YYYY-MM-DD\");\n                }\n\n                if (values.dob) {\n                    reqData.dob = moment(values.dob).format(\"YYYY-MM-DD\");\n                }\n                if (values.age) {\n                    reqData.is_age = true;\n                    reqData.dob = moment().subtract(values.age, 'years').format(\"YYYY-MM-DD\");\n                }\n                if (!values.custom_id) {\n                    reqData.custom_id = null;\n                } else {\n                    reqData.custom_id = values.custom_id_pre + values.custom_id;\n                }\n                const key = 'image';\n                if (reqData[key] && reqData[key].file && reqData[key].file.response)\n                    reqData[key] = reqData[key].file.response.image_path;\n                delete reqData.first_name;\n                delete reqData.email;\n                delete reqData.referer_code;\n                delete reqData.mobile;\n                delete reqData.age;\n                delete reqData.custom_id_pre;\n                that.setState({\n                    loading: true\n                });\n                const successFn = function (data) {\n                    displayMessage(\"Patient Saved Successfully!!\");\n                    that.setState({\n                        loading: false\n                    });\n                    that.props.history.replace(`/patient/${data.id}/profile`)\n                }\n                const errorFn = function () {\n                    that.setState({\n                        loading: false\n                    })\n                }\n                reqData = removeEmpty(reqData);\n\n                if (that.props.currentPatient) {\n                    putAPI(interpolate(PATIENT_PROFILE, [that.props.currentPatient.id]), reqData, successFn, errorFn);\n                } else {\n                    postAPI(interpolate(PATIENTS_LIST, [that.props.match.params.id]), reqData, successFn, errorFn);\n                }\n            }\n        });\n    }\n\n    toggleWebCam = (type, value) => {\n        this.setState(function (prevState) {\n            return {\n                webCamState: {...prevState.webCamState, [type]: value}\n            }\n        })\n    }\n\n    getImageandUpload = (fieldKey, image) => {\n        const that = this;\n        const reqData = new FormData();\n\n        reqData.append('image', image);\n        reqData.append('name', 'file');\n\n        const successFn = function (data) {\n            that.props.form.setFieldsValue({[fieldKey]: {file: {response: data}}});\n            displayMessage(SUCCESS_MSG_TYPE, \"Image Captured and processed.\");\n            that.setState(function (prevState) {\n                return {\n                    webCamState: {...prevState.webCamState, [fieldKey]: false}\n                }\n            })\n        }\n        const errorFn = function () {\n\n        }\n        postAPI(FILE_UPLOAD_BASE64, reqData, successFn, errorFn, {\n            'content-type': 'multipart/form-data'\n        });\n\n    }\n\n    onChangeValue = (type, value) => {\n        const that = this;\n        that.setState({\n            [type]: value\n        }, function () {\n            if (type == 'country') {\n                that.getState();\n            }\n            if (type == 'state') {\n                that.getCity();\n            }\n\n        })\n\n    }\n\n    setFormParams = (type, value) => {\n        this.setState({\n            [type]: value\n        })\n    };\n\n    onChangeCheckbox = () => {\n        this.setState({\n            on_dialysis: !this.state.on_dialysis,\n        });\n    };\n\n    changeFormType = (e) => {\n        this.setState({\n            selectedFormType: e.target.value\n        })\n\n    };\n\n    handleRelation = (e) => {\n        if (e) {\n            this.setState({\n                relation_text: false,\n            });\n        } else {\n            this.setState({\n                relation_text: true,\n            });\n        }\n\n    };\n\n    onDeletePatient() {\n        const that = this;\n        confirm({\n            title: 'Are you sure delete this patient?',\n            okText: 'Yes',\n            okType: 'danger',\n            cancelText: 'No',\n            onOk() {\n                that.patientDelete();\n            },\n\n        });\n    }\n\n    patientDelete() {\n        const that = this;\n        const {id} = that.state.patientDetails\n        const reqData = {'id': id, is_active: false}\n        const successFn = function () {\n            that.setState({\n                loading: false,\n            });\n            displayMessage(\"Patient Deleted!!\");\n            that.props.history.push('/patients/profile');\n        };\n        const errorFn = function () {\n        };\n        putAPI(interpolate(PATIENT_PROFILE, [id]), reqData, successFn, errorFn)\n    };\n\n    handleNumberChange = value => {\n        this.setState({\n            number: {\n                ...numberValidation(value),\n                value,\n            },\n        });\n    }\n\n    render() {\n        const that = this;\n        const {getFieldDecorator} = this.props.form;\n        const formItemLayout = ({\n            labelCol: {span: 6},\n            wrapperCol: {span: 14},\n        });\n        const historyOption = []\n        if (this.state.history) {\n            this.state.history.forEach(function (historyItem) {\n                historyOption.push({label: (historyItem.name), value: historyItem.id});\n            })\n        }\n        const patientGroupOption = []\n        if (this.state.patientGroup) {\n            this.state.patientGroup.forEach(function (patientGroupItem) {\n                patientGroupOption.push({label: (patientGroupItem.name), value: patientGroupItem.id});\n            });\n        }\n\n        const membershipOption = []\n        if (this.state.membership) {\n            this.state.membership.forEach(function (membershipItem) {\n                membershipOption.push({label: (membershipItem.name), value: membershipItem.id});\n            });\n        }\n        const singleUploadprops = {\n            name: 'image',\n            data: {\n                name: 'hello'\n            },\n            action: makeURL(FILE_UPLOAD_API),\n            headers: {\n                authorization: 'authorization-text',\n            },\n            onChange(info) {\n                if (info.file.status !== 'uploading') {\n\n                }\n                if (info.file.status === 'done') {\n                    message.success(`${info.file.name} file uploaded successfully`);\n                } else if (info.file.status === 'error') {\n                    message.error(`${info.file.name} file upload failed.`);\n                }\n            },\n        };\n        const tips =\n            'Only numbers are allowed.';\n        return (\n            <Form onSubmit={that.handleSubmit}>\n                <Card\n                    title={(\n                        <span>{that.props.currentPatient ? \"Edit Profile\" : \"Add Patient\"}&nbsp;&nbsp;\n                            <Link to=\"/patients/patientprintform\">\n                                Print Patient Form\n                            </Link>\n                        </span>\n                    )}\n                    extra={(\n                        <div><Button style={{margin: 5}} type=\"primary\" htmlType=\"submit\">Save</Button>\n                            {that.props.history ? (\n                                <Button style={{margin: 5}} onClick={() => that.props.history.goBack()}>\n                                    Cancel\n                                </Button>\n                            ) : null}\n\n                            {that.props.currentPatient ? (\n                                    <>\n                                        {this.state.patientDetails && this.state.patientDetails.is_approved ? (\n                                            <Popover\n                                                placement=\"leftBottom\"\n                                                trigger=\"hover\"\n                                                content=\"An Agent is associated. Patient can not be deleted.\"\n                                                // onConfirm={()=>that.patientDelete(this.state.patientDetails.id)}\n                                                // // onCancel={cancel}\n                                                // okText=\"Yes\"\n                                                // cancelText=\"No\"\n                                            >\n                                                <Button style={{margin: 5}} type=\"danger\" disabled>\n                                                    Delete\n                                                </Button>\n                                            </Popover>\n                                        ) : (\n                                            that.props.activePracticePermissions.DeletePatient || that.props.allowAllPermissions ?\n                                                <Button style={{margin: 5}} onClick={() => that.onDeletePatient()}\n                                                        type=\"danger\"\n                                                        disabled={!this.state.patientDetails}>\n                                                    Delete\n                                                </Button> : null\n                                        )}\n                                    </>\n                                )\n                                : null}\n\n\n                        </div>\n                    )}\n                >\n                    <Form.Item key=\"image\" {...formItemLayout} label=\"Patient Image\">\n                        {getFieldDecorator('image', {valuePropName: 'image',})(\n                            <Upload {...singleUploadprops}>\n                                <Button>\n                                    <Icon type=\"upload\"/> Select File\n                                </Button>\n                                {this.state.patientDetails && this.state.patientDetails.image ? (\n                                    <img\n                                        src={makeFileURL(this.state.patientDetails ? this.state.patientDetails.image : null)}\n                                        style={{maxWidth: '100%'}}\n                                    />\n                                ) : null}\n                            </Upload>\n                        )}\n                        <span className=\"ant-form-text\">\n                                    <a onClick={() => that.toggleWebCam('image', Math.random())}>\n                                        Open Webcam\n                                    </a>\n                        </span>\n                        <Modal\n                            footer={null}\n                            onCancel={() => that.toggleWebCam('image', false)}\n                            visible={!!that.state.webCamState.image}\n                            width={680}\n                            key={that.state.webCamState.image}\n                        >\n                            <WebCamField getScreenShot={(value) => that.getImageandUpload('image', value)}/>\n                        </Modal>\n                    </Form.Item>\n                    <Form.Item label=\"Patient Name\" {...formItemLayout}>\n                        {getFieldDecorator('first_name', {\n                            rules: [{required: true, message: 'Input Patient Name!'}],\n                            initialValue: this.state.patientDetails ? this.state.patientDetails.user.first_name : ''\n                        })\n                        (<Input placeholder=\"Patient Name\"/>)}\n                    </Form.Item>\n                    <Row>\n                        <Col span={8}>\n                            <Form.Item\n                                label=\"Patient Id\"\n                                labelCol={{span: 18}}\n                                wrapperCol={{span: 6}}\n                            >\n                                {getFieldDecorator('custom_id_pre', {\n                                    initialValue: this.state.patientDetails && this.state.patientDetails.is_agent ? 'AD' : 'BK'\n                                })\n                                (<Select>\n                                    <Select.Option value=\"BK\">BK</Select.Option>\n                                    <Select.Option value=\"AD\">AD</Select.Option>\n                                </Select>)}\n                            </Form.Item>\n                        </Col>\n                        <Col span={16}>\n                            <Form.Item\n                                labelCol={{span: 0}}\n                                wrapperCol={{span: 18}}\n                                validateStatus={this.state.number.validateStatus}\n                                help={this.state.number.errorMsg || tips}\n                            >\n                                {getFieldDecorator('custom_id', {\n                                    initialValue: this.state.patientDetails ? this.state.patientDetails.custom_id.replace(/\\D/g, '') : ''\n                                })\n                                (<InputNumber\n\n                                    style={{width: '100%'}}\n                                    placeholder=\"Patient Id\"\n                                    onChange={this.handleNumberChange}\n                                />)}\n                            </Form.Item>\n                        </Col>\n                    </Row>\n\n                    {this.state.source && this.state.source == INPUT_FIELD ? (\n                            <Form.Item key=\"source_extra\" label=\"Source\" {...formItemLayout}>\n                                {getFieldDecorator(\"source_extra\", {\n                                    initialValue: '',\n\n                                })(\n                                    <Input placeholder=\"Source\"/>\n                                )}\n                                <a onClick={() => that.setFormParams('source', SELECT_FIELD)}>Choose\n                                    Source\n                                </a>\n                            </Form.Item>\n                        )\n                        : (\n                            <Form.Item label=\"Source\" {...formItemLayout}>\n                                {getFieldDecorator('source', {initialValue: this.state.patientDetails ? this.state.patientDetails.source : null})\n                                (<Select placeholder=\"Select Source\" showSearch optionFilterProp=\"children\">\n                                    {this.state.sourceList.map((option) => (\n                                        <Select.Option value={option.id}>\n                                            {option.name}\n                                        </Select.Option>\n                                    ))}\n                                </Select>)}\n                                {this.props.user.is_superuser ? (\n                                    <a onClick={() => that.setFormParams('source', INPUT_FIELD)}>Enter New\n                                        Source\n                                    </a>\n                                ) : null}\n                            </Form.Item>\n                        )}\n                    {/* {this.state.patientDetails ? null : */}\n                    <Form.Item label=\"Referral Code\" {...formItemLayout}>\n                        {getFieldDecorator('referal', {initialValue: that.state.patientDetails && that.state.patientDetails.user.referer_data.referer ? that.state.patientDetails.user.referer_data.referer.referer_code : \"\",})\n                        (<Input placeholder=\"Referral Code\"/>)}\n                    </Form.Item>\n                    {/* } */}\n                    <Form.Item label=\"SMS Language\" {...formItemLayout}>\n                        {getFieldDecorator('language', {initialValue: this.state.patientDetails && this.state.patientDetails.language ? this.state.patientDetails.language : this.props.activePracticeData.language})\n                        (<Select>\n                            {this.state[SMS_LANGUAGE_CONFIG_PARAM].map((option) => (\n                                <Select.Option value={option}>\n                                    {option}\n                                </Select.Option>\n                            ))}\n                        </Select>)}\n                    </Form.Item>\n                    <Form.Item label=\"Aadhar ID\" {...formItemLayout}>\n                        {getFieldDecorator('aadhar_id', {initialValue: this.state.patientDetails ? this.state.patientDetails.aadhar_id : ''})\n                        (<Input placeholder=\"Patient Aadhar Number\"/>)}\n                    </Form.Item>\n\n                    <Form.Item label=\"Gender\" {...formItemLayout}>\n                        {getFieldDecorator('gender', {initialValue: this.state.patientDetails ? this.state.patientDetails.gender : null})\n                        (<Select placeholder=\"Select Gender\">\n                            {this.state[GENDER_CONFIG_PARAM].map((option) => (\n                                <Select.Option value={option.value}>\n                                    {option.label}\n                                </Select.Option>\n                            ))}\n                        </Select>)}\n                    </Form.Item>\n\n\n                    <Form.Item label=' ' {...formItemLayout} colon={false}>\n                        <Radio.Group\n                            buttonStyle=\"solid\"\n                            size=\"small\"\n                            onChange={this.changeFormType}\n                            defaultValue={this.state.selectedFormType}\n                        >\n                            {PATIENT_AGE.map((item) => <Radio value={item.value}>{item.label}</Radio>)}\n                        </Radio.Group>\n                    </Form.Item>\n                    {this.state.selectedFormType == 'DOB' ? (\n                            <Form.Item label=\"DOB\" {...formItemLayout}>\n                                {getFieldDecorator('dob', {initialValue: this.state.patientDetails && this.state.patientDetails.dob ? moment(this.state.patientDetails.dob) : ''})\n                                (<DatePicker/>)}\n                            </Form.Item>\n                        )\n                        : (\n                            <Form.Item label=\"Age\" {...formItemLayout}>\n                                {getFieldDecorator('age', {initialValue: this.state.patientDetails && this.state.patientDetails.dob ? moment().diff(this.state.patientDetails.dob, 'years') : null})\n                                (<InputNumber min={0} max={120} placeholder=\"00\"/>)}\n                                <span className=\"ant-form-text\">Years</span>\n                            </Form.Item>\n                        )}\n\n                    <Form.Item label=\"Anniversary\" {...formItemLayout}>\n                        {getFieldDecorator('anniversary', {initialValue: this.state.patientDetails && this.state.patientDetails.anniversary ? moment(this.state.patientDetails.anniversary) : null})\n                        (<DatePicker/>)}\n                    </Form.Item>\n\n                    {/* <Form.Item label=\"Blood Group\" {...formItemLayout}> */}\n                    {/*    {getFieldDecorator('blood_group', {initialValue: this.props.currentPatient ? this.props.currentPatient.blood_group : ''}) */}\n                    {/*    (<Input placeholder=\"Patient Blood Group\"/>) */}\n                    {/*    } */}\n                    {/* </Form.Item> */}\n                    <Form.Item label=\"Blood Group\" {...formItemLayout}>\n                        {getFieldDecorator(\"blood_group\", {initialValue: this.state.patientDetails ? this.state.patientDetails.blood_group : ''})\n                        (<Select placeholder=\"Blood Group\">\n                            {this.state[BLOOD_GROUP_CONFIG_PARAM].map((option) => (\n                                <Select.Option\n                                    value={option}\n                                >{option}\n                                </Select.Option>\n                            ))}\n                        </Select>)}\n                    </Form.Item>\n\n                    {/* <Form.Item label=\"Family\" {...formItemLayout}> */}\n                    {/*    {getFieldDecorator('family_relation', {initialValue: this.state.patientDetails ? this.props.currentPatient.family_relation : ''}) */}\n                    {/*    (<Input placeholder=\"Patient Family Relation\"/>) */}\n                    {/*    } */}\n                    {/* </Form.Item> */}\n\n                    <Form.Item label=\"Family\" {...formItemLayout}>\n                        <Form.Item style={{display: 'inline-block', width: 'calc(30% - 12px)'}}>\n                            {getFieldDecorator(\"family_relation\", {initialValue: this.state.patientDetails && this.state.patientDetails.family_relation != null ? this.state.patientDetails.family_relation : RELATION})\n                            (<Select onChange={(value) => this.handleRelation(value)}>\n                                <Select.Option value=\"\">{RELATION}</Select.Option>\n                                {this.state[FAMILY_RELATION_CONFIG_PARAM].map((option) => (\n                                    <Select.Option\n                                        value={option.value}\n                                    >{option.name}\n                                    </Select.Option>\n                                ))}\n                            </Select>)}\n                        </Form.Item>\n                        <span style={{display: 'inline-block', width: '14px', textAlign: 'center'}}/>\n                        <Form.Item style={{display: 'inline-block', width: 'calc(50% - 12px)'}}>\n                            {getFieldDecorator(\"attendee\", {initialValue: this.state.patientDetails ? this.state.patientDetails.attendee : ''})\n                            (<Input\n                                disabled={this.state.patientDetails && this.state.patientDetails.attendee ? false : this.state.relation_text}\n                            />)}\n                        </Form.Item>\n                    </Form.Item>\n\n\n                    <Form.Item label=\"Mobile (Primary)\" {...formItemLayout}>\n                        {getFieldDecorator('mobile', {\n                            initialValue: this.state.patientDetails ? this.state.patientDetails.user.mobile : null,\n                            rules: [{required: true, message: 'Input Mobile Number'}]\n                        })\n                        (<Input placeholder=\"Patient Mobile Number (Primary)\"/>)}\n                    </Form.Item>\n\n                    <Form.Item label=\"Mobile (Secondary)\" {...formItemLayout}>\n                        {getFieldDecorator('secondary_mobile_no', {initialValue: this.state.patientDetails ? this.state.patientDetails.secondary_mobile_no : ''})\n                        (<Input placeholder=\"Patient Mobile Number (Secondary)\"/>)}\n                    </Form.Item>\n\n                    <Form.Item label=\"Landline\" {...formItemLayout}>\n                        {getFieldDecorator('landline_no', {initialValue: this.state.patientDetails ? this.state.patientDetails.landline_no : ''})\n                        (<Input placeholder=\"Patient Landline Number\"/>)}\n                    </Form.Item>\n\n                    <Form.Item label=\"Address\" {...formItemLayout}>\n                        {getFieldDecorator('address', {initialValue: this.state.patientDetails ? this.state.patientDetails.address : ''})\n                        (<Input placeholder=\"Patient Address\"/>)}\n                    </Form.Item>\n\n                    <Form.Item label=\"Locality\" {...formItemLayout}>\n                        {getFieldDecorator('locality', {initialValue: this.state.patientDetails ? this.state.patientDetails.locality : ''})\n                        (<Input placeholder=\"Patient Locality\"/>)}\n                    </Form.Item>\n\n                    {this.state.country && this.state.country == INPUT_FIELD ? (\n                            <Form.Item key=\"country_extra\" label=\"Country\" {...formItemLayout}>\n                                {getFieldDecorator(\"country_extra\", {\n                                    initialValue: '',\n\n                                })(\n                                    <Input placeholder=\"Country\"/>\n                                )}\n                                {this.props.user.is_superuser ? (\n                                    <a onClick={() => that.setFormParams('country', SELECT_FIELD)}>Choose\n                                        Country\n                                    </a>\n                                ) : null}\n                            </Form.Item>\n                        )\n                        : (\n                            <Form.Item key=\"country\" {...formItemLayout} label=\"Country\">\n                                {getFieldDecorator(\"country\", {\n                                    initialValue: this.state.patientDetails && this.state.patientDetails.country_data ? this.state.patientDetails.country_data.id : '',\n                                })(\n                                    <Select\n                                        placeholder=\"Select Country\"\n                                        onChange={(value) => this.onChangeValue(\"country\", value)}\n                                        showSearch\n                                        optionFilterProp=\"children\"\n                                    >\n\n                                        {this.state.countrylist.map((option) => (\n                                            <Select.Option\n                                                value={option.id}\n                                            >{option.name}\n                                            </Select.Option>\n                                        ))}\n                                    </Select>\n                                )}\n                                {this.props.user.is_superuser ? (\n                                    <a onClick={() => that.setFormParams('country', INPUT_FIELD)}>Add New\n                                        Country\n                                    </a>\n                                ) : null}\n                            </Form.Item>\n                        )}\n\n\n                    {this.state.country == INPUT_FIELD || this.state.state && this.state.state == INPUT_FIELD ? (\n                            <Form.Item key=\"state_extra\" label=\"State\" {...formItemLayout}>\n                                {getFieldDecorator(\"state_extra\", {\n                                    initialValue: '',\n\n                                })(\n                                    <Input placeholder=\"State\"/>\n                                )}\n                                <a onClick={() => that.setFormParams('state', SELECT_FIELD)}>Choose\n                                    State\n                                </a>\n                            </Form.Item>\n                        )\n                        : (\n                            <Form.Item key=\"state\" {...formItemLayout} label=\"State\">\n                                {getFieldDecorator(\"state\", {\n                                    initialValue: this.state.patientDetails && this.state.patientDetails.state_data ? this.state.patientDetails.state_data.id : '',\n                                })(\n                                    <Select\n                                        placeholder=\"Select State\"\n                                        onChange={(value) => this.onChangeValue(\"state\", value)}\n                                        showSearch\n                                        optionFilterProp=\"children\"\n                                    >\n                                        {this.state.stateList.map((option) => (\n                                            <Select.Option\n                                                value={option.id}\n                                            >{option.name}\n                                            </Select.Option>\n                                        ))}\n                                    </Select>\n                                )}\n                                {this.props.user.is_superuser ? (\n                                    <a onClick={() => that.setFormParams('state', INPUT_FIELD)}>Add New\n                                        state\n                                    </a>\n                                ) : null}\n                            </Form.Item>\n                        )}\n                    {this.state.country == INPUT_FIELD || this.state.state == INPUT_FIELD || this.state.city && this.state.city == INPUT_FIELD ? (\n                            <Form.Item key=\"city_extra\" label=\"City\" {...formItemLayout}>\n                                {getFieldDecorator(\"city_extra\", {\n                                    initialValue: '',\n                                })(\n                                    <Input placeholder=\"City\"/>\n                                )}\n                                <a onClick={() => that.setFormParams('city', SELECT_FIELD)}>Choose\n                                    City\n                                </a>\n                            </Form.Item>\n                        )\n                        : (\n                            <Form.Item key=\"City\" {...formItemLayout} label=\"City\">\n                                {getFieldDecorator(\"city\", {\n                                    initialValue: this.state.patientDetails && this.state.patientDetails.city_data ? this.state.patientDetails.city_data.id : '',\n                                })(\n                                    <Select showSearch optionFilterProp=\"children\" placeholder=\"Select City\">\n                                        {this.state.cityList.map((option) => (\n                                            <Select.Option\n                                                value={option.id}\n                                            >{option.name}\n                                            </Select.Option>\n                                        ))}\n                                    </Select>\n                                )}\n                                {this.props.user.is_superuser ? (\n                                    <a onClick={() => that.setFormParams('city', INPUT_FIELD)}>Add New\n                                        City\n                                    </a>\n                                ) : null}\n                            </Form.Item>\n                        )}\n\n\n                    {/* <Form.Item label=\"City\" {...formItemLayout}>\n                        {getFieldDecorator('city_extra', {initialValue: this.props.currentPatient ? this.props.currentPatient.city : null})\n                        (<Input placeholder=\"Patient City\"/>)\n                        }\n                    </Form.Item> */}\n\n                    <Form.Item label=\"Pincode\" {...formItemLayout}>\n                        {getFieldDecorator('pincode', {initialValue: this.state.patientDetails ? this.state.patientDetails.pincode : ''})\n                        (<Input placeholder=\"Patient PINCODE\"/>)}\n                    </Form.Item>\n\n                    <Form.Item label=\"Email\" {...formItemLayout}>\n                        {getFieldDecorator('email', {\n                            initialValue: this.state.patientDetails ? this.state.patientDetails.user.email : null,\n                        })\n                        (<Input placeholder=\"Patient Email\"/>)}\n                    </Form.Item>\n\n                    <Form.Item label=\"Medical History\" {...formItemLayout}>\n                        {getFieldDecorator(\"medical_history\", {initialValue: this.state.patientDetails ? this.state.patientDetails.medical_history : []})\n                        (<Select placeholder=\"Medical History\" mode=\"multiple\">\n                            {historyOption.map((option) => (\n                                <Select.Option\n                                    value={option.value}\n                                >{option.label}\n                                </Select.Option>\n                            ))}\n                        </Select>)}\n                    </Form.Item>\n\n                    <Form.Item label=\"Patient Group\" {...formItemLayout}>\n                        {getFieldDecorator(\"patient_group\", {initialValue: this.state.patientDetails ? this.state.patientDetails.patient_group : []})\n                        (<Select placeholder=\"Patient Group\" mode=\"multiple\">\n                            {patientGroupOption.map((option) => (\n                                <Select.Option\n                                    value={option.value}\n                                >{option.label}\n                                </Select.Option>\n                            ))}\n                        </Select>)}\n                    </Form.Item>\n\n                    <Form.Item label=\"On Dialysis\" {...formItemLayout}>\n                        {getFieldDecorator('on_dialysis', {initialValue: this.state.patientDetails ? this.state.patientDetails.on_dialysis : false})\n                        (<Checkbox onChange={(e) => this.onChangeCheckbox(e)} style={{paddingTop: '4px'}}/>)}\n                    </Form.Item>\n                    <Form.Item label=\"Allow File Upload\" {...formItemLayout}>\n                        {getFieldDecorator('file_enable', {initialValue: this.state.patientDetails ? this.state.patientDetails.file_enable : true})\n                        (<Checkbox\n                            style={{paddingTop: '4px'}}\n                            defaultChecked\n                        />)}\n                    </Form.Item>\n\n                    {/* <Form.Item label=\"Allow File Upload\" {...formItemLayout}> */}\n                    {/*    {getFieldDecorator('file_enable',) */}\n                    {/*    (<Checkbox  defaultChecked={true}/>) */}\n                    {/*    } */}\n                    {/* </Form.Item> */}\n\n                    <Form.Item label=\"Max Uploads Allowed\" {...formItemLayout}>\n                        {getFieldDecorator('file_count', {initialValue: this.state.patientDetails ? this.state.patientDetails.file_count : 10})\n                        (<InputNumber min={0}/>)}\n                    </Form.Item>\n                    <Form.Item>\n                        {that.props.history ? (\n                            <Button style={{margin: 5}} onClick={() => that.props.history.goBack()}>\n                                Cancel\n                            </Button>\n                        ) : null}\n                        <Button style={{margin: 5}} type=\"primary\" htmlType=\"submit\" loading={this.state.loading}>\n                            Save\n                        </Button>\n\n                    </Form.Item>\n                </Card>\n            </Form>\n        )\n    }\n\n}\n\nexport default Form.create()(EditPatientDetails);\n\nfunction numberValidation(number) {\n    if (isNaN(number)) {\n        return {\n            validateStatus: 'error',\n            errorMsg: 'Patient ID can only be numerical value.',\n        };\n    }\n    return {\n        validateStatus: 'success',\n        errorMsg: null,\n    };\n}\n","import React from \"react\";\nimport {Link} from \"react-router-dom\";\n\nimport {Button, Card, Checkbox, Divider, Form, Icon, Popconfirm, Table} from \"antd\";\nimport moment from 'moment';\nimport DynamicFieldsForm from \"../../common/DynamicFieldsForm\";\nimport {DOCTORS_ROLE} from \"../../../constants/dataKeys\";\nimport {\n    ALL_APPOINTMENT_API,\n    APPOINTMENT_API,\n    APPOINTMENT_REPORTS,\n    EMR_TREATMENTNOTES,\n    PRACTICESTAFF,\n    PROCEDURE_CATEGORY\n} from \"../../../constants/api\";\nimport {getAPI, interpolate, putAPI} from \"../../../utils/common\";\nimport {hideEmail, hideMobile} from \"../../../utils/permissionUtils\";\nimport InfiniteFeedLoaderButton from \"../../common/InfiniteFeedLoaderButton\";\n\n\nclass Appointment extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            redirect: false,\n            appointments: null,\n            practice_doctors: [],\n            procedure_category: null,\n            treatmentNotes: null,\n            practice_staff: [],\n            loading: false\n\n        }\n        this.changeRedirect = this.changeRedirect.bind(this);\n        this.editAppointment = this.editAppointment.bind(this);\n        this.deleteAppointment = this.deleteAppointment.bind(this);\n        this.loadProcedureCategory = this.loadProcedureCategory.bind(this);\n        this.loadDoctors = this.loadDoctors.bind(this);\n\n    }\n\n    componentDidMount() {\n        // this.loadProcedureCategory();\n        this.loadDoctors();\n        this.loadTreatmentNotes();\n        if (this.props.match.params.appointmentid) {\n            this.loadAppointment(this.props.match.params.appointmentid);\n        } else {\n            this.loadAllAppointments();\n        }\n\n    }\n\n    loadAppointment(id) {\n        const that = this;\n        this.setState({\n            loading: true,\n        })\n        const successFn = function (data) {\n\n            that.setState({\n                appointments: [data],\n                loading: false,\n\n            });\n\n\n        }\n\n        const errorFn = function () {\n            that.setState({\n                loading: false,\n\n            })\n\n        }\n        getAPI(interpolate(APPOINTMENT_API, [id]), successFn, errorFn);\n\n    }\n\n    loadAllAppointments(page = 1 ) {\n        const that = this; \n        this.setState({\n            loading: true,\n        })\n        const successFn = function (data) {\n            if (data.current == 1) {\n                that.setState({\n                    appointments: data.results,\n                    total: data.count,\n                    loadMoreAppointment: data.next,\n                    loading: false,\n    \n                });\n            } else {\n                that.setState(function (prevState) {\n                    return {\n                        total: data.count,\n                        appointments: [...prevState.appointments, ...data.results],\n                        loading: false,\n                        loadMoreAppointment: data.next\n                    }\n                })\n            }\n\n           \n\n        }\n\n        const errorFn = function () {\n            that.setState({\n                loading: false,\n\n            })\n\n\n        }\n        const apiParams={\n            practice:this.props.active_practiceId,\n            pagination:true,\n            page\n        }\n        if(this.props.match.params.id){\n            apiParams.patient=this.props.match.params.id;\n        }\n\n        getAPI(ALL_APPOINTMENT_API, successFn, errorFn ,apiParams);\n\n    }\n\n\n    loadProcedureCategory() {\n        const that = this;\n        const successFn = function (data) {\n            that.setState({\n                procedure_category: data\n            })\n\n        }\n        const errorFn = function () {\n\n        }\n        getAPI(interpolate(PROCEDURE_CATEGORY, [this.props.active_practiceId]), successFn, errorFn);\n    }\n\n    loadDoctors() {\n        const that = this;\n        const successFn = function (data) {\n            data.staff.forEach(function (usersdata) {\n                if (usersdata.role == DOCTORS_ROLE) {\n                    const doctor = that.state.practice_doctors;\n                    doctor.push(usersdata);\n                    that.setState({\n                        practice_doctors: doctor,\n                    })\n                } else {\n                    const doctor = that.state.practice_staff;\n                    doctor.push(usersdata);\n                    that.setState({\n                        practice_staff: doctor,\n                    })\n                }\n            })\n\n        }\n        const errorFn = function () {\n        };\n        getAPI(interpolate(PRACTICESTAFF, [this.props.active_practiceId]), successFn, errorFn);\n\n    }\n\n    loadTreatmentNotes() {\n        const that = this;\n        const successFn = function (data) {\n            that.setState({\n                treatmentNotes: data,\n                loading: false\n            })\n\n        }\n        const errorFn = function () {\n            that.setState({\n                loading: false\n            })\n\n        }\n        getAPI(interpolate(EMR_TREATMENTNOTES, [this.props.active_practiceId]), successFn, errorFn)\n    }\n\n    changeRedirect() {\n        const redirectVar = this.state.redirect;\n        this.setState({\n            redirect: !redirectVar,\n        });\n    }\n\n    editAppointment(record) {\n\n        const {id} = record;\n        this.props.history.push(`/calendar/${  id  }/edit-appointment`)\n\n    }\n\n    deleteAppointment(record) {\n        const that = this;\n        that.setState({\n            loading: true\n        })\n        const reqData = {'is_active': false, 'status': \"Cancelled\"}\n        const successFn = function (data) {\n            that.loadAllAppointments();\n            that.setState({\n                loading: false\n            })\n\n        }\n        const errorFn = function () {\n            that.setState({\n                loading: false\n            })\n        }\n        putAPI(interpolate(APPOINTMENT_API, [record.id]), reqData, successFn, errorFn);\n    }\n\n    render() {\n        const that = this;\n        const doctors = []\n        if (this.state.practice_doctors.length) {\n            this.state.practice_doctors.forEach(function (doctor) {\n                doctors[doctor.id] = doctor.user.first_name\n            })\n        }\n        const treatmentNotes = [];\n        if (this.state.treatmentNotes) {\n            this.state.treatmentNotes.forEach(function (treatmentNote) {\n                treatmentNotes[treatmentNote.id] = treatmentNote.name\n            })\n        }\n        // const categories = {1: \"fast\", 2: \"Full Stomach\", 3: \"No Liquids\"}\n        const columns = [{\n            title: 'Schedule Time',\n            key: 'name',\n            render: (text, record) => (<span>{moment(record.schedule_at).format('LLL')},{record.slot}mins</span>\n            )\n        }, {\n            title: 'Patient ID',\n            key:'id',\n            render:(item ,record)=><span>{record.patient.custom_id?record.patient.custom_id:record.patient.id}</span>,\n            exports:(item ,record) =>(record.patient.custom_id?record.patient.custom_id:record.patient.id),\n        }, {\n            title: 'Patient Name',\n            dataIndex: 'patient.user.first_name',\n            key: 'patient_name',\n        }, {\n            title: 'Patient Mobile',\n            dataIndex: 'patient.user.mobile',\n            key: 'patient_mobile',\n            render: (value) => that.props.activePracticePermissions.PatientPhoneNumber ? value : hideMobile(value)\n        }, {\n            title: 'Email',\n            dataIndex: 'patient.user.email',\n            key: 'email',\n            render: value => that.props.activePracticePermissions.PatientEmailId ? value : hideEmail(value)\n        }, {\n            title: 'Doctor',\n            key: 'doctor',\n            render: (text, record) => (\n                <span> {doctors[record.doctor]}</span>\n            )\n        }, {\n            title: 'Procedure',\n            key: 'procedure',\n            // render: (text, record) => (\n            //     <span> {procedures[record.procedure]}</span>\n            // )\n        }, {\n            title: 'Treatment Notes',\n            key: 'notes',\n            render: (text, record) => (\n                <span> {treatmentNotes[record.notes]}</span>\n            )\n        }, {\n            title: 'Category',\n            key: 'category',\n            render: (text, record) => (\n                <span> {record.category?record.category_data.name:'--'}</span>\n            )\n        }, {\n            title: 'NotifyByEmail',\n            key: 'notify_via_email',\n            render: (text, record) => (\n                <Checkbox disabled checked={record.notify_via_email} />\n            )\n        }, {\n            title: 'NotifyBySMS',\n            key: 'notify_via_sms',\n            render: (text, record) => (\n                <Checkbox disabled checked={record.notify_via_sms} />\n            )\n        },\n\n            {\n                title: 'Action',\n                key: 'action',\n                render: (text, record) => (\n                    <span>\n                <a\n                  onClick={() => this.editAppointment(record)}\n                  disabled={!that.props.activePracticePermissions.EditAppointment}\n                >Edit\n                </a>\n                <Divider type=\"vertical\" />\n                <Popconfirm\n                  title=\"Are you sure delete this item?\"\n                  onConfirm={() => this.deleteAppointment(record)}\n                  okText=\"Yes\"\n                  cancelText=\"No\"\n                >\n                    <a disabled={!that.props.activePracticePermissions.EditAppointment}>Delete</a>\n                </Popconfirm>\n\n\n                    </span>\n                ),\n            }];\n        const TestFormLayout = Form.create()(DynamicFieldsForm);\n        if (this.props.match.params.id) {\n            return (\n<Card extra={that.props.activePracticePermissions.AddAppointment || that.props.allowAllPermissions ? (\n                <Link to={`/calendar/create-appointment?patient=${  this.props.match.params.id}`}>\n                    <Button type=\"primary\">\n                        <Icon type=\"plus\" />&nbsp;Add Appointment\n                    </Button>\n                </Link>\n              ) : null}\n>\n\n                <Table\n                  loading={this.state.loading}\n                  columns={columns}\n                  scroll={{x: 1300}}\n                  pagination={false}\n                  dataSource={this.state.appointments}\n                />\n                       \n                <InfiniteFeedLoaderButton\n                  loaderFunction={() => this.loadAllAppointments(this.state.loadMoreAppointment)}\n                  loading={this.state.loading}\n                  hidden={!this.state.loadMoreAppointment}\n                />\n\n\n</Card>\n)\n        }\n        return (\n<Card extra={that.props.activePracticePermissions.AddAppointment || that.props.allowAllPermissions ? (\n            <Link to=\"/calendar/create-appointment\">\n                <Button type=\"primary\">\n                    <Icon type=\"plus\" />&nbsp;Add Appointment\n                </Button>\n            </Link>\n          ) : null}\n>\n            <Table\n              loading={this.state.loading}\n              columns={columns}\n              scroll={{x: 1300}}\n              pagination={false}\n              dataSource={this.state.appointments}\n            />\n\n            <InfiniteFeedLoaderButton\n              loaderFunction={() => this.loadAllAppointments(this.state.loadMoreAppointment)}\n              loading={this.state.loading}\n              hidden={!this.state.loadMoreAppointment}\n            />\n\n\n</Card>\n)\n    }\n\n}\n\nexport default Appointment;\n","import React from \"react\";\nimport {Menu, Layout, Icon, Divider, Badge} from \"antd\";\nimport {Link} from \"react-router-dom\";\nimport Hotkeys from 'react-hot-keys';\nimport {INNER_KEYS_HOTKEYS} from \"../../constants/hardData\";\n\nconst {Sider} = Layout;\n\nclass PatientSider extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {};\n        this.onHotKeyInner = this.onHotKeyInner.bind(this);\n    }\n\n\n    onHotKeyInner(keyNm) {\n        const that = this;\n        switch (keyNm) {\n            case 'alt+f':\n                return (this.props.currentPatient ? this.props.history.push(`/patient/${  this.props.currentPatient.id  }/profile`) : this.props.history.push(\"/patients/profile\"));\n\n            case 'alt+a':\n                return (this.props.currentPatient ? this.props.history.push(`/patient/${  this.props.currentPatient.id  }/appointments`) : this.props.history.push(\"/patients/appointments\"));\n\n            case 'alt+o':\n                return (this.props.currentPatient ? this.props.history.push(`/patient/${  this.props.currentPatient.id  }/communications`) : this.props.history.push(\"/patients/communications\"));\n\n            case 'alt+k':\n                return (this.props.currentPatient ? this.props.history.push(`/patient/${  this.props.currentPatient.id  }/booking`) : this.props.history.push(\"/patients/profile\"));\n\n            case 'alt+m':\n                return (this.props.currentPatient ? this.props.history.push(`/patient/${  this.props.currentPatient.id  }/emr/vitalsigns`) : this.props.history.push(\"/patients/emr/vitalsigns\"));\n\n            case 'alt+n':\n                return (this.props.currentPatient ? this.props.history.push(`/patient/${  this.props.currentPatient.id  }/emr/vitalsigns`) : this.props.history.push(\"/patients/emr/vitalsigns\"));\n\n            case 'alt+t':\n                return (this.props.currentPatient ? this.props.history.push(`/patient/${  this.props.currentPatient.id  }/emr/plans`) : this.props.history.push(\"/patients/emr/plans\"));\n\n            case 'alt+l':\n                return (this.props.currentPatient ? this.props.history.push(`/patient/${  this.props.currentPatient.id  }/emr/files`) : this.props.history.push(\"/patients/emr/files\"));\n\n            case 'alt+i':\n                return (this.props.currentPatient ? this.props.history.push(`/patient/${  this.props.currentPatient.id  }/billing/invoices`) : this.props.history.push(\"/patients/billing/invoices\"));\n\n            case 'alt+e':\n                return (this.props.currentPatient ? this.props.history.push(`/patient/${  this.props.currentPatient.id  }/billing/return/invoices`) : this.props.history.push(\"/patients/billing/return/invoices\"));\n\n            case 'alt+y':\n                return (this.props.currentPatient ? this.props.history.push(`/patient/${  this.props.currentPatient.id  }/billing/payments`) : this.props.history.push(\"/patients/billing/payments\"));\n\n            case 'alt+u':\n                return (this.props.currentPatient ? this.props.history.push(`/patient/${  this.props.currentPatient.id  }/emr/workdone`) : this.props.history.push(\"/patients/emr/workdone\"));\n\n            case 'alt+s':\n                return (this.props.currentPatient ? this.props.history.push(`/patient/${  this.props.currentPatient.id  }/emr/prescriptions`) : this.props.history.push(\"/patients/emr/prescriptions\"));\n\n            case 'alt+g':\n                return (this.props.currentPatient ? this.props.history.push(`/patient/${  this.props.currentPatient.id  }/billing/ledger`) : this.props.history.push(\"/patients/profile\"));\n\n            case 'alt+w':\n                return (this.props.currentPatient ? this.props.history.push(`/patient/${  this.props.currentPatient.id  }/emr/timeline`) : this.props.history.push(\"/patients/profile\"));\n        }\n    }\n\n\n    render() {\n        const that = this;\n        return (\n<Hotkeys keyName={INNER_KEYS_HOTKEYS} onKeyDown={(value) => this.onHotKeyInner(value)}>\n            <Sider\n              trigger={null}\n              collapsible\n              collapsed={this.props.hideSidePanel}\n              style={{overflow: 'auto', minHeight: 'calc(100vh - 64px)', background: '#fff'}}\n            >\n                {/* <div className=\"logo\"/> */}\n\n                <Menu mode=\"inline\">\n                    <Menu.ItemGroup key=\"g1\" title={<Divider style={{margin: '0px'}}>Patient</Divider>}>\n                        {/* {that.props.activePracticePermissions.ViewPatient || that.props.allowAllPermissions? */}\n                        <Menu.Item key=\"17\">\n                            <Link\n                              to={this.props.currentPatient ? `/patient/${  this.props.currentPatient.id  }/profile` : \"/patients/profile\"}\n                            >\n                                <Icon type=\"user\" /><span className=\"nav-text\">Pro<span\n                                  className=\"shortcutLetterHighlight\"\n                                >f\n                                                                                  </span>ile\n                                                    </span>\n                            </Link>\n                        </Menu.Item>\n                        {/* :null} */}\n                        {that.props.activePracticePermissions.PatientAppointments || that.props.allowAllPermissions ? (\n                            <Menu.Item key=\"18\">\n                                <Link\n                                  to={this.props.currentPatient ? `/patient/${  this.props.currentPatient.id  }/appointments` : \"/patients/appointments\"}\n                                >\n                                    <Icon type=\"calendar\" /><span className=\"nav-text\"><span\n                                      className=\"shortcutLetterHighlight\"\n                                    >A\n                                                                                       </span>ppointments\n                                                            </span>\n                                </Link>\n                            </Menu.Item>\n                          )\n                            : null}\n                        {that.props.activePracticePermissions.PatientCommunications || that.props.allowAllPermissions ? (\n                            <Menu.Item key=\"19\">\n                                <Link\n                                  to={this.props.currentPatient ? `/patient/${  this.props.currentPatient.id  }/communications` : \"/patients/communications\"}\n                                >\n                                    <Icon type=\"message\" /><span className=\"nav-text\">C<span\n                                      className=\"shortcutLetterHighlight\"\n                                    >o\n                                                                                       </span>mmunications\n                                                           </span>\n                                </Link>\n                            </Menu.Item>\n                          )\n                            : null}\n                        {that.props.activePracticePermissions.PatientBookings || that.props.allowAllPermissions ? (\n                            <Menu.Item key=\"booking\" disabled={!this.props.currentPatient}>\n                                <Link\n                                  to={this.props.currentPatient ? `/patient/${  this.props.currentPatient.id  }/booking` : \"/patients/communications\"}\n                                >\n                                    <Icon type=\"book\" /><span className=\"nav-text\">Boo<span\n                                      className=\"shortcutLetterHighlight\"\n                                    >k\n                                                                                      </span>ing\n                                                        </span>\n                                </Link>\n                            </Menu.Item>\n                          )\n                            : null}\n\n                    </Menu.ItemGroup>\n                    <Menu.ItemGroup key=\"g2\" title={<Divider style={{margin: '0px'}}>EMR</Divider>}>\n                        {/* <SubMenu key=\"nestedsub1\" title={<span>EMR</span>}> */}\n                        {that.props.activePracticePermissions.PatientVitalSigns || that.props.allowAllPermissions ? (\n                            <Menu.Item key=\"20\">\n                                <Link\n                                  to={this.props.currentPatient ? `/patient/${  this.props.currentPatient.id  }/emr/vitalsigns` : \"/patients/emr/vitalsigns\"}\n                                >\n                                    <Icon type=\"heart\" /><span className=\"nav-text\">Report <span\n                                      className=\"shortcutLetterHighlight\"\n                                    >M\n                                                                                           </span>anual\n                                                         </span>\n                                </Link>\n                            </Menu.Item>\n                          )\n                            : null}\n                        {that.props.activePracticePermissions.PatientClinicalNotes || that.props.allowAllPermissions ? (\n                            <Menu.Item key=\"21\">\n                                <Link\n                                  to={this.props.currentPatient ? `/patient/${  this.props.currentPatient.id  }/emr/clinicnotes` : \"/patients/emr/clinicnotes\"}\n                                >\n                                    <Icon type=\"solution\" /><span className=\"nav-text\">Clinical <span\n                                      className=\"shortcutLetterHighlight\"\n                                    >N\n                                                                                                </span>otes\n                                                            </span>\n                                </Link>\n                            </Menu.Item>\n                          )\n                            : null}\n                        {that.props.activePracticePermissions.PatientTreatmentPlans || that.props.allowAllPermissions ? (\n                            <Menu.Item key=\"30\">\n                                <Link\n                                  to={this.props.currentPatient ? `/patient/${  this.props.currentPatient.id  }/emr/plans` : \"/patients/emr/plans\"}\n                                >\n                                    <Icon type=\"read\" /><span className=\"nav-text\"><span\n                                      className=\"shortcutLetterHighlight\"\n                                    >T\n                                                                                   </span>reatment\n                                    Plans\n                                                        </span>\n                                </Link>\n                            </Menu.Item>\n                          )\n                            : null}\n                        {that.props.activePracticePermissions.PatientCompletedProcedure || that.props.allowAllPermissions ? (\n                            <Menu.Item key=\"22\">\n                                <Link\n                                  to={this.props.currentPatient ? `/patient/${  this.props.currentPatient.id  }/emr/workdone` : \"/patients/emr/workdone\"}\n                                >\n                                    <Icon type=\"check-circle\" /><span className=\"nav-text\">Completed Proced<span\n                                      className=\"shortcutLetterHighlight\"\n                                    >u\n                                                                                                           </span>re\n                                                                </span>\n                                </Link>\n                            </Menu.Item>\n                          )\n                            : null}\n                        {that.props.activePracticePermissions.PatientFiles || that.props.allowAllPermissions ? (\n                            <Menu.Item key=\"23\">\n                                <Link\n                                  to={this.props.currentPatient ? `/patient/${  this.props.currentPatient.id  }/emr/files` : \"/patients/emr/files\"}\n                                >\n                                    <Icon type=\"picture\" /><span className=\"nav-text\">Fi<span\n                                      className=\"shortcutLetterHighlight\"\n                                    >l\n                                                                                        </span>es\n                                                           </span>\n                                </Link>\n                            </Menu.Item>\n                          )\n                            : null}\n                        {that.props.activePracticePermissions.PatientPrescriptions || that.props.allowAllPermissions ? (\n                            <Menu.Item key=\"24\">\n                                <Link\n                                  to={this.props.currentPatient ? `/patient/${  this.props.currentPatient.id  }/emr/prescriptions` : \"/patients/emr/prescriptions\"}\n                                >\n                                    <Icon type=\"solution\" /><span className=\"nav-text\">Pre<span\n                                      className=\"shortcutLetterHighlight\"\n                                    >s\n                                                                                          </span>criptions\n                                                            </span>\n                                </Link>\n                            </Menu.Item>\n                          )\n                            : null}\n                        {that.props.activePracticePermissions.PatientTimeline || that.props.allowAllPermissions ? (\n                            <Menu.Item key=\"25\" disabled={!this.props.currentPatient}>\n                                <Link\n                                  to={this.props.currentPatient ? `/patient/${  this.props.currentPatient.id  }/emr/timeline` : \"/patients/profile\"}\n                                >\n                                    <Icon type=\"clock-circle\" /><span className=\"nav-text\">Timeline <span\n                                      className=\"shortcutLetterHighlight\"\n                                    >w\n                                                                                                    </span>\n                                                                </span>\n                                </Link>\n                            </Menu.Item>\n                          )\n                            : null}\n                        {that.props.activePracticePermissions.PatientLabOrders || that.props.allowAllPermissions ? (\n                            <Menu.Item key=\"26\" disabled={!this.props.currentPatient || true}>\n                                <Link\n                                  to={this.props.currentPatient ? `/patient/${  this.props.currentPatient.id  }/emr/labtrackings` : \"/patients/profile\"}\n                                >\n                                    <Icon type=\"solution\" /><span className=\"nav-text\">Lab Orders</span>\n                                </Link>\n                            </Menu.Item>\n                          )\n                            : null}\n                    </Menu.ItemGroup>\n                    {/* </SubMenu> */}\n                    <Menu.ItemGroup key=\"g3\" title={<Divider style={{margin: '0px'}}>Billing</Divider>}>\n\n                        {that.props.activePracticePermissions.PatientInvoices || that.props.allowAllPermissions ? (\n                            <Menu.Item key=\"27\">\n                                <Link\n                                  to={this.props.currentPatient ? `/patient/${  this.props.currentPatient.id  }/billing/invoices` : \"/patients/billing/invoices\"}\n                                >\n                                    <Icon type=\"audit\" /><span className=\"nav-text\"><span\n                                      className=\"shortcutLetterHighlight\"\n                                    >I\n                                                                                    </span>nvoices\n                                                         </span>\n                                </Link>\n                            </Menu.Item>\n                          )\n                            : null}\n                        {that.props.activePracticePermissions.PatientReturns || that.props.allowAllPermissions ? (\n                            <Menu.Item key=\"31\">\n                                <Link\n                                  to={this.props.currentPatient ? `/patient/${  this.props.currentPatient.id  }/billing/return/invoices` : \"/patients/billing/return/invoices\"}\n                                >\n                                    <Icon type=\"redo\" /><span className=\"nav-text\">Invoices R<span\n                                      className=\"shortcutLetterHighlight\"\n                                    >e\n                                                                                             </span>turn\n                                                        </span>\n                                </Link>\n                            </Menu.Item>\n                          )\n                            : null}\n                        {that.props.activePracticePermissions.PatientPayments || that.props.allowAllPermissions ? (\n                            <Menu.Item key=\"28\">\n                                <Link\n                                  to={this.props.currentPatient ? `/patient/${  this.props.currentPatient.id  }/billing/payments` : \"/patients/billing/payments\"}\n                                >\n                                    <Icon type=\"dollar\" /><span className=\"nav-text\">Pa<span\n                                      className=\"shortcutLetterHighlight\"\n                                    >y\n                                                                                       </span>ments\n                                                          </span>\n                                </Link>\n                            </Menu.Item>\n                          )\n                            : null}\n                        {that.props.activePracticePermissions.PatientLedger || that.props.allowAllPermissions ? (\n                            <Menu.Item key=\"29\" disabled={!this.props.currentPatient}>\n                                <Link\n                                  to={this.props.currentPatient ? `/patient/${  this.props.currentPatient.id  }/billing/ledger` : \"/patients/profile\"}\n                                >\n                                    <Icon type=\"book\" /><span className=\"nav-text\">Led<span\n                                      className=\"shortcutLetterHighlight\"\n                                    >g\n                                                                                      </span>er\n                                                        </span>\n                                </Link>\n                            </Menu.Item>\n                          )\n                            : null}\n                        {this.props.currentPatient && this.props.currentPatient.is_agent && (that.props.activePracticePermissions.PatientLedger || that.props.allowAllPermissions) ? (\n                            <Menu.Item key=\"32\" disabled={!this.props.currentPatient}>\n                                <Link\n                                  to={this.props.currentPatient ? `/patient/${  this.props.currentPatient.id  }/billing/wallet` : \"/patients/profile\"}\n                                >\n                                    <Icon type=\"wallet\" /><span className=\"nav-text\">Wallet Ledger</span>\n                                </Link>\n                            </Menu.Item>\n                          )\n                            : null}\n                    </Menu.ItemGroup>\n                </Menu>\n\n            </Sider>\n</Hotkeys>\n)\n    }\n}\n\nexport default PatientSider;\n","var __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nimport * as React from 'react';\nimport classNames from 'classnames';\nimport omit from 'omit.js';\nimport { ConfigConsumer } from '../config-provider';\nconst TimelineItem = props => (<ConfigConsumer>\n    {({ getPrefixCls }) => {\n    const { prefixCls: customizePrefixCls, className, color = '', children, pending, dot } = props, restProps = __rest(props, [\"prefixCls\", \"className\", \"color\", \"children\", \"pending\", \"dot\"]);\n    const prefixCls = getPrefixCls('timeline', customizePrefixCls);\n    const itemClassName = classNames({\n        [`${prefixCls}-item`]: true,\n        [`${prefixCls}-item-pending`]: pending,\n    }, className);\n    const dotClassName = classNames({\n        [`${prefixCls}-item-head`]: true,\n        [`${prefixCls}-item-head-custom`]: dot,\n        [`${prefixCls}-item-head-${color}`]: true,\n    });\n    return (<li {...omit(restProps, ['position'])} className={itemClassName}>\n          <div className={`${prefixCls}-item-tail`}/>\n          <div className={dotClassName} style={{ borderColor: /blue|red|green|gray/.test(color) ? undefined : color }}>\n            {dot}\n          </div>\n          <div className={`${prefixCls}-item-content`}>{children}</div>\n        </li>);\n}}\n  </ConfigConsumer>);\nTimelineItem.defaultProps = {\n    color: 'blue',\n    pending: false,\n    position: '',\n};\nexport default TimelineItem;\n","var __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nimport * as React from 'react';\nimport classNames from 'classnames';\nimport TimelineItem from './TimelineItem';\nimport Icon from '../icon';\nimport { ConfigConsumer } from '../config-provider';\nexport default class Timeline extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.renderTimeline = ({ getPrefixCls }) => {\n            const _a = this.props, { prefixCls: customizePrefixCls, pending = null, pendingDot, children, className, reverse, mode } = _a, restProps = __rest(_a, [\"prefixCls\", \"pending\", \"pendingDot\", \"children\", \"className\", \"reverse\", \"mode\"]);\n            const prefixCls = getPrefixCls('timeline', customizePrefixCls);\n            const pendingNode = typeof pending === 'boolean' ? null : pending;\n            const classString = classNames(prefixCls, {\n                [`${prefixCls}-pending`]: !!pending,\n                [`${prefixCls}-reverse`]: !!reverse,\n                [`${prefixCls}-${mode}`]: !!mode,\n            }, className);\n            const pendingItem = pending ? (<TimelineItem pending={!!pending} dot={pendingDot || <Icon type=\"loading\"/>}>\n        {pendingNode}\n      </TimelineItem>) : null;\n            const timeLineItems = reverse\n                ? [pendingItem, ...React.Children.toArray(children).reverse()]\n                : [...React.Children.toArray(children), pendingItem];\n            const getPositionCls = (ele, idx) => {\n                if (mode === 'alternate') {\n                    if (ele.props.position === 'right')\n                        return `${prefixCls}-item-right`;\n                    if (ele.props.position === 'left')\n                        return `${prefixCls}-item-left`;\n                    return idx % 2 === 0 ? `${prefixCls}-item-left` : `${prefixCls}-item-right`;\n                }\n                if (mode === 'left')\n                    return `${prefixCls}-item-left`;\n                if (mode === 'right')\n                    return `${prefixCls}-item-right`;\n                if (ele.props.position === 'right')\n                    return `${prefixCls}-item-right`;\n                return '';\n            };\n            // Remove falsy items\n            const truthyItems = timeLineItems.filter(item => !!item);\n            const itemsCount = React.Children.count(truthyItems);\n            const lastCls = `${prefixCls}-item-last`;\n            const items = React.Children.map(truthyItems, (ele, idx) => {\n                const pendingClass = idx === itemsCount - 2 ? lastCls : '';\n                const readyClass = idx === itemsCount - 1 ? lastCls : '';\n                return React.cloneElement(ele, {\n                    className: classNames([\n                        ele.props.className,\n                        !reverse && !!pending ? pendingClass : readyClass,\n                        getPositionCls(ele, idx),\n                    ]),\n                });\n            });\n            return (<ul {...restProps} className={classString}>\n        {items}\n      </ul>);\n        };\n    }\n    render() {\n        return <ConfigConsumer>{this.renderTimeline}</ConfigConsumer>;\n    }\n}\nTimeline.Item = TimelineItem;\nTimeline.defaultProps = {\n    reverse: false,\n    mode: '',\n};\n","import Timeline from './Timeline';\nexport default Timeline;\n","// eslint-disable-next-line import/prefer-default-export\nexport function isFlexSupported() {\n  if (typeof window !== 'undefined' && window.document && window.document.documentElement) {\n    var documentElement = window.document.documentElement;\n    return 'flex' in documentElement.style || 'webkitFlex' in documentElement.style || 'Flex' in documentElement.style || 'msFlex' in documentElement.style;\n  }\n\n  return false;\n}","function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (typeof call === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n/* eslint react/no-did-mount-set-state: 0 */\nimport React, { cloneElement, Children, Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { findDOMNode } from 'react-dom';\nimport classNames from 'classnames';\nimport debounce from 'lodash/debounce';\nimport { isFlexSupported } from './utils';\n\nvar Steps =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Steps, _Component);\n\n  function Steps(props) {\n    var _this;\n\n    _classCallCheck(this, Steps);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Steps).call(this, props));\n\n    _defineProperty(_assertThisInitialized(_this), \"onStepClick\", function (next) {\n      var _this$props = _this.props,\n          onChange = _this$props.onChange,\n          current = _this$props.current;\n\n      if (onChange && current !== next) {\n        onChange(next);\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"calcStepOffsetWidth\", function () {\n      if (isFlexSupported()) {\n        return;\n      }\n\n      var lastStepOffsetWidth = _this.state.lastStepOffsetWidth; // Just for IE9\n\n      var domNode = findDOMNode(_assertThisInitialized(_this));\n\n      if (domNode.children.length > 0) {\n        if (_this.calcTimeout) {\n          clearTimeout(_this.calcTimeout);\n        }\n\n        _this.calcTimeout = setTimeout(function () {\n          // +1 for fit edge bug of digit width, like 35.4px\n          var offsetWidth = (domNode.lastChild.offsetWidth || 0) + 1; // Reduce shake bug\n\n          if (lastStepOffsetWidth === offsetWidth || Math.abs(lastStepOffsetWidth - offsetWidth) <= 3) {\n            return;\n          }\n\n          _this.setState({\n            lastStepOffsetWidth: offsetWidth\n          });\n        });\n      }\n    });\n\n    _this.state = {\n      flexSupported: true,\n      lastStepOffsetWidth: 0\n    };\n    _this.calcStepOffsetWidth = debounce(_this.calcStepOffsetWidth, 150);\n    return _this;\n  }\n\n  _createClass(Steps, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.calcStepOffsetWidth();\n\n      if (!isFlexSupported()) {\n        this.setState({\n          flexSupported: false\n        });\n      }\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {\n      this.calcStepOffsetWidth();\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      if (this.calcTimeout) {\n        clearTimeout(this.calcTimeout);\n      }\n\n      if (this.calcStepOffsetWidth && this.calcStepOffsetWidth.cancel) {\n        this.calcStepOffsetWidth.cancel();\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _classNames,\n          _this2 = this;\n\n      var _this$props2 = this.props,\n          prefixCls = _this$props2.prefixCls,\n          _this$props2$style = _this$props2.style,\n          style = _this$props2$style === void 0 ? {} : _this$props2$style,\n          className = _this$props2.className,\n          children = _this$props2.children,\n          direction = _this$props2.direction,\n          type = _this$props2.type,\n          labelPlacement = _this$props2.labelPlacement,\n          iconPrefix = _this$props2.iconPrefix,\n          status = _this$props2.status,\n          size = _this$props2.size,\n          current = _this$props2.current,\n          progressDot = _this$props2.progressDot,\n          initial = _this$props2.initial,\n          icons = _this$props2.icons,\n          onChange = _this$props2.onChange,\n          restProps = _objectWithoutProperties(_this$props2, [\"prefixCls\", \"style\", \"className\", \"children\", \"direction\", \"type\", \"labelPlacement\", \"iconPrefix\", \"status\", \"size\", \"current\", \"progressDot\", \"initial\", \"icons\", \"onChange\"]);\n\n      var isNav = type === 'navigation';\n      var _this$state = this.state,\n          lastStepOffsetWidth = _this$state.lastStepOffsetWidth,\n          flexSupported = _this$state.flexSupported;\n      var filteredChildren = React.Children.toArray(children).filter(function (c) {\n        return !!c;\n      });\n      var lastIndex = filteredChildren.length - 1;\n      var adjustedlabelPlacement = progressDot ? 'vertical' : labelPlacement;\n      var classString = classNames(prefixCls, \"\".concat(prefixCls, \"-\").concat(direction), className, (_classNames = {}, _defineProperty(_classNames, \"\".concat(prefixCls, \"-\").concat(size), size), _defineProperty(_classNames, \"\".concat(prefixCls, \"-label-\").concat(adjustedlabelPlacement), direction === 'horizontal'), _defineProperty(_classNames, \"\".concat(prefixCls, \"-dot\"), !!progressDot), _defineProperty(_classNames, \"\".concat(prefixCls, \"-navigation\"), isNav), _defineProperty(_classNames, \"\".concat(prefixCls, \"-flex-not-supported\"), !flexSupported), _classNames));\n      return React.createElement(\"div\", _extends({\n        className: classString,\n        style: style\n      }, restProps), Children.map(filteredChildren, function (child, index) {\n        if (!child) {\n          return null;\n        }\n\n        var stepNumber = initial + index;\n\n        var childProps = _objectSpread({\n          stepNumber: \"\".concat(stepNumber + 1),\n          stepIndex: stepNumber,\n          prefixCls: prefixCls,\n          iconPrefix: iconPrefix,\n          wrapperStyle: style,\n          progressDot: progressDot,\n          icons: icons,\n          onStepClick: onChange && _this2.onStepClick\n        }, child.props);\n\n        if (!flexSupported && direction !== 'vertical') {\n          if (isNav) {\n            childProps.itemWidth = \"\".concat(100 / (lastIndex + 1), \"%\");\n            childProps.adjustMarginRight = 0;\n          } else if (index !== lastIndex) {\n            childProps.itemWidth = \"\".concat(100 / lastIndex, \"%\");\n            childProps.adjustMarginRight = -Math.round(lastStepOffsetWidth / lastIndex + 1);\n          }\n        } // fix tail color\n\n\n        if (status === 'error' && index === current - 1) {\n          childProps.className = \"\".concat(prefixCls, \"-next-error\");\n        }\n\n        if (!child.props.status) {\n          if (stepNumber === current) {\n            childProps.status = status;\n          } else if (stepNumber < current) {\n            childProps.status = 'finish';\n          } else {\n            childProps.status = 'wait';\n          }\n        }\n\n        childProps.active = stepNumber === current;\n        return cloneElement(child, childProps);\n      }));\n    }\n  }]);\n\n  return Steps;\n}(Component);\n\n_defineProperty(Steps, \"propTypes\", {\n  type: PropTypes.string,\n  prefixCls: PropTypes.string,\n  className: PropTypes.string,\n  iconPrefix: PropTypes.string,\n  direction: PropTypes.string,\n  labelPlacement: PropTypes.string,\n  children: PropTypes.any,\n  status: PropTypes.string,\n  size: PropTypes.string,\n  progressDot: PropTypes.oneOfType([PropTypes.bool, PropTypes.func]),\n  style: PropTypes.object,\n  initial: PropTypes.number,\n  current: PropTypes.number,\n  icons: PropTypes.shape({\n    finish: PropTypes.node,\n    error: PropTypes.node\n  }),\n  onChange: PropTypes.func\n});\n\n_defineProperty(Steps, \"defaultProps\", {\n  type: 'default',\n  prefixCls: 'rc-steps',\n  iconPrefix: 'rc',\n  direction: 'horizontal',\n  labelPlacement: 'horizontal',\n  initial: 0,\n  current: 0,\n  status: 'process',\n  size: '',\n  progressDot: false\n});\n\nexport { Steps as default };","function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (typeof call === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\n\nfunction isString(str) {\n  return typeof str === 'string';\n}\n\nvar Step =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Step, _React$Component);\n\n  function Step() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Step);\n\n    for (var _len = arguments.length, _args = new Array(_len), _key = 0; _key < _len; _key++) {\n      _args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Step)).call.apply(_getPrototypeOf2, [this].concat(_args)));\n\n    _defineProperty(_assertThisInitialized(_this), \"onClick\", function () {\n      var _this$props = _this.props,\n          onClick = _this$props.onClick,\n          onStepClick = _this$props.onStepClick,\n          stepIndex = _this$props.stepIndex;\n\n      if (onClick) {\n        onClick.apply(void 0, arguments);\n      }\n\n      onStepClick(stepIndex);\n    });\n\n    return _this;\n  }\n\n  _createClass(Step, [{\n    key: \"renderIconNode\",\n    value: function renderIconNode() {\n      var _classNames;\n\n      var _this$props2 = this.props,\n          prefixCls = _this$props2.prefixCls,\n          progressDot = _this$props2.progressDot,\n          stepNumber = _this$props2.stepNumber,\n          status = _this$props2.status,\n          title = _this$props2.title,\n          description = _this$props2.description,\n          icon = _this$props2.icon,\n          iconPrefix = _this$props2.iconPrefix,\n          icons = _this$props2.icons;\n      var iconNode;\n      var iconClassName = classNames(\"\".concat(prefixCls, \"-icon\"), \"\".concat(iconPrefix, \"icon\"), (_classNames = {}, _defineProperty(_classNames, \"\".concat(iconPrefix, \"icon-\").concat(icon), icon && isString(icon)), _defineProperty(_classNames, \"\".concat(iconPrefix, \"icon-check\"), !icon && status === 'finish' && icons && !icons.finish), _defineProperty(_classNames, \"\".concat(iconPrefix, \"icon-close\"), !icon && status === 'error' && icons && !icons.error), _classNames));\n      var iconDot = React.createElement(\"span\", {\n        className: \"\".concat(prefixCls, \"-icon-dot\")\n      }); // `progressDot` enjoy the highest priority\n\n      if (progressDot) {\n        if (typeof progressDot === 'function') {\n          iconNode = React.createElement(\"span\", {\n            className: \"\".concat(prefixCls, \"-icon\")\n          }, progressDot(iconDot, {\n            index: stepNumber - 1,\n            status: status,\n            title: title,\n            description: description\n          }));\n        } else {\n          iconNode = React.createElement(\"span\", {\n            className: \"\".concat(prefixCls, \"-icon\")\n          }, iconDot);\n        }\n      } else if (icon && !isString(icon)) {\n        iconNode = React.createElement(\"span\", {\n          className: \"\".concat(prefixCls, \"-icon\")\n        }, icon);\n      } else if (icons && icons.finish && status === 'finish') {\n        iconNode = React.createElement(\"span\", {\n          className: \"\".concat(prefixCls, \"-icon\")\n        }, icons.finish);\n      } else if (icons && icons.error && status === 'error') {\n        iconNode = React.createElement(\"span\", {\n          className: \"\".concat(prefixCls, \"-icon\")\n        }, icons.error);\n      } else if (icon || status === 'finish' || status === 'error') {\n        iconNode = React.createElement(\"span\", {\n          className: iconClassName\n        });\n      } else {\n        iconNode = React.createElement(\"span\", {\n          className: \"\".concat(prefixCls, \"-icon\")\n        }, stepNumber);\n      }\n\n      return iconNode;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _classNames2;\n\n      var _this$props3 = this.props,\n          className = _this$props3.className,\n          prefixCls = _this$props3.prefixCls,\n          style = _this$props3.style,\n          itemWidth = _this$props3.itemWidth,\n          active = _this$props3.active,\n          _this$props3$status = _this$props3.status,\n          status = _this$props3$status === void 0 ? 'wait' : _this$props3$status,\n          iconPrefix = _this$props3.iconPrefix,\n          icon = _this$props3.icon,\n          wrapperStyle = _this$props3.wrapperStyle,\n          adjustMarginRight = _this$props3.adjustMarginRight,\n          stepNumber = _this$props3.stepNumber,\n          disabled = _this$props3.disabled,\n          description = _this$props3.description,\n          title = _this$props3.title,\n          subTitle = _this$props3.subTitle,\n          progressDot = _this$props3.progressDot,\n          tailContent = _this$props3.tailContent,\n          icons = _this$props3.icons,\n          stepIndex = _this$props3.stepIndex,\n          onStepClick = _this$props3.onStepClick,\n          onClick = _this$props3.onClick,\n          restProps = _objectWithoutProperties(_this$props3, [\"className\", \"prefixCls\", \"style\", \"itemWidth\", \"active\", \"status\", \"iconPrefix\", \"icon\", \"wrapperStyle\", \"adjustMarginRight\", \"stepNumber\", \"disabled\", \"description\", \"title\", \"subTitle\", \"progressDot\", \"tailContent\", \"icons\", \"stepIndex\", \"onStepClick\", \"onClick\"]);\n\n      var classString = classNames(\"\".concat(prefixCls, \"-item\"), \"\".concat(prefixCls, \"-item-\").concat(status), className, (_classNames2 = {}, _defineProperty(_classNames2, \"\".concat(prefixCls, \"-item-custom\"), icon), _defineProperty(_classNames2, \"\".concat(prefixCls, \"-item-active\"), active), _defineProperty(_classNames2, \"\".concat(prefixCls, \"-item-disabled\"), disabled === true), _classNames2));\n\n      var stepItemStyle = _objectSpread({}, style);\n\n      if (itemWidth) {\n        stepItemStyle.width = itemWidth;\n      }\n\n      if (adjustMarginRight) {\n        stepItemStyle.marginRight = adjustMarginRight;\n      }\n\n      var accessibilityProps = {};\n\n      if (onStepClick && !disabled) {\n        accessibilityProps.role = 'button';\n        accessibilityProps.tabIndex = 0;\n        accessibilityProps.onClick = this.onClick;\n      }\n\n      return React.createElement(\"div\", _extends({}, restProps, {\n        className: classString,\n        style: stepItemStyle\n      }), React.createElement(\"div\", _extends({\n        onClick: onClick\n      }, accessibilityProps, {\n        className: \"\".concat(prefixCls, \"-item-container\")\n      }), React.createElement(\"div\", {\n        className: \"\".concat(prefixCls, \"-item-tail\")\n      }, tailContent), React.createElement(\"div\", {\n        className: \"\".concat(prefixCls, \"-item-icon\")\n      }, this.renderIconNode()), React.createElement(\"div\", {\n        className: \"\".concat(prefixCls, \"-item-content\")\n      }, React.createElement(\"div\", {\n        className: \"\".concat(prefixCls, \"-item-title\")\n      }, title, subTitle && React.createElement(\"div\", {\n        title: subTitle,\n        className: \"\".concat(prefixCls, \"-item-subtitle\")\n      }, subTitle)), description && React.createElement(\"div\", {\n        className: \"\".concat(prefixCls, \"-item-description\")\n      }, description))));\n    }\n  }]);\n\n  return Step;\n}(React.Component);\n\n_defineProperty(Step, \"propTypes\", {\n  className: PropTypes.string,\n  prefixCls: PropTypes.string,\n  style: PropTypes.object,\n  wrapperStyle: PropTypes.object,\n  itemWidth: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n  active: PropTypes.bool,\n  disabled: PropTypes.bool,\n  status: PropTypes.string,\n  iconPrefix: PropTypes.string,\n  icon: PropTypes.node,\n  adjustMarginRight: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n  stepNumber: PropTypes.string,\n  stepIndex: PropTypes.number,\n  description: PropTypes.any,\n  title: PropTypes.any,\n  subTitle: PropTypes.any,\n  progressDot: PropTypes.oneOfType([PropTypes.bool, PropTypes.func]),\n  tailContent: PropTypes.any,\n  icons: PropTypes.shape({\n    finish: PropTypes.node,\n    error: PropTypes.node\n  }),\n  onClick: PropTypes.func,\n  onStepClick: PropTypes.func\n});\n\nexport { Step as default };","import Steps from './Steps';\nimport Step from './Step';\nSteps.Step = Step;\nexport { Step };\nexport default Steps;","import * as React from 'react';\nimport * as PropTypes from 'prop-types';\nimport RcSteps from 'rc-steps';\nimport Icon from '../icon';\nimport { ConfigConsumer } from '../config-provider';\nexport default class Steps extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.renderSteps = ({ getPrefixCls }) => {\n            const prefixCls = getPrefixCls('steps', this.props.prefixCls);\n            const iconPrefix = getPrefixCls('', this.props.iconPrefix);\n            const icons = {\n                finish: <Icon type=\"check\" className={`${prefixCls}-finish-icon`}/>,\n                error: <Icon type=\"close\" className={`${prefixCls}-error-icon`}/>,\n            };\n            return <RcSteps icons={icons} {...this.props} prefixCls={prefixCls} iconPrefix={iconPrefix}/>;\n        };\n    }\n    render() {\n        return <ConfigConsumer>{this.renderSteps}</ConfigConsumer>;\n    }\n}\nSteps.Step = RcSteps.Step;\nSteps.defaultProps = {\n    current: 0,\n};\nSteps.propTypes = {\n    prefixCls: PropTypes.string,\n    iconPrefix: PropTypes.string,\n    current: PropTypes.number,\n};\n","import React from \"react\";\nimport {\n    Button,\n    Card,\n    Icon,\n    Steps,\n    Timeline,\n    Row,\n    Col,\n    Checkbox,\n    Spin,\n    Tag,\n    Table,\n    Affix,\n    Tooltip,\n    Input,\n    Modal\n} from \"antd\";\nimport moment from \"moment\";\nimport * as _ from \"lodash\";\nimport {\n    getAPI,\n    interpolate,\n    makeFileURL,\n    postAPI,\n    startLoadingMessage,\n    stopLoadingMessage\n} from \"../../../utils/common\";\nimport {PATIENT_TIMELINE_API, PATIENT_TIMELINE_PDF, TREATMENTPLANS_PDF} from \"../../../constants/api\";\nimport {CUSTOM_STRING_SEPERATOR} from \"../../../constants/hardData\";\nimport {BACKEND_BASE_URL} from \"../../../config/connect\";\nimport {ERROR_MSG_TYPE, SUCCESS_MSG_TYPE} from \"../../../constants/dataKeys\";\nimport {sendMail} from \"../../../utils/clinicUtils\";\n\nconst {Step} = Steps;\n\nconst checkboxOption = [{\n    label: <span style={{width: '100%'}}>Appointment</span>,\n    value: 'appointments'\n}, {\n    label: <span style={{width: '100%'}}>Report Manual</span>,\n    value: 'vital_signs'\n}, {\n    label: <span style={{width: '100%'}}>Clinic Notes</span>,\n    value: 'clinic_notes'\n}, {\n    label: <span style={{width: '100%'}}>Treatment Plans</span>,\n    value: 'treatment_plans'\n}, {\n    label: <span style={{width: '100%'}}>Procedures</span>,\n    value: 'procedures'\n}, {\n    label: <span style={{width: '100%'}}>Files</span>,\n    value: 'files'\n}, {\n    label: <span style={{width: '100%'}}>Prescriptions</span>,\n    value: 'prescriptions'\n}, {\n    label: <span style={{width: '100%'}}>Invoices</span>,\n    value: 'invoices'\n}, {\n    label: <span style={{width: '100%'}}>Payments</span>,\n    value: 'payments'\n}];\n\nclass PatientTimeline extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            filterParams: ['appointments', 'vital_signs', 'clinic_notes', 'treatment_plans', 'procedures', 'files', 'prescriptions', 'invoices', 'payments'],\n            checkAllFilters: true,\n            selectedFiltersIntermediate: false,\n            timelineData: [],\n            checkedTimelineCards: []\n        }\n    }\n\n    componentDidMount() {\n        this.loadTimeline();\n    }\n\n    changeFilters = (value) => {\n        const that = this;\n        this.setState({\n            filterParams: value,\n            selectedFiltersIntermediate: !!value.length && value.length < checkboxOption.length,\n            checkAllFilters: value.length === checkboxOption.length,\n        }, function () {\n            that.loadTimeline()\n        })\n    }\n\n    onCheckAllFiltersChange = e => {\n        const that = this;\n        this.setState({\n            filterParams: e.target.checked ? checkboxOption.map(item => item.value) : [],\n            selectedFiltersIntermediate: false,\n            checkAllFilters: e.target.checked,\n        }, function () {\n            that.loadTimeline()\n        });\n    };\n\n    loadTimeline = () => {\n        const that = this;\n        const queryParams = {\n            practice_id: this.props.active_practiceId\n        };\n        that.setState({\n            loading: true\n        })\n        this.state.filterParams.forEach(function (value) {\n            queryParams[value] = 1\n        });\n        const successFn = function (data) {\n            let lastDate = moment().add(5, 'year');\n            that.setState(function () {\n                const timelineData = [];\n                const checkList = {};\n                data.forEach(function (item) {\n                    if (lastDate.format('YMD') != moment(item.sort_date).format('YMD')) {\n                        lastDate = moment(item.sort_date);\n                        timelineData.push({type: 'Time', date: item.sort_date})\n                    }\n                    timelineData.push(item);\n                    if (item.type != 'Appointments') {\n                        if (checkList[item.type]) {\n                            checkList[item.type][item.id] = true;\n                        } else {\n                            checkList[item.type] = {[item.id]: true}\n                        }\n                    }\n                });\n                return {\n                    timelineData,\n                    loading: false,\n                    allCheckList: checkList\n                }\n            })\n        }\n\n        const errorFn = function () {\n            that.setState({\n                loading: false\n            })\n        }\n        if (this.props.showAllClinic && this.props.match.params.id) {\n            delete (queryParams.practice_id)\n        }\n        getAPI(interpolate(PATIENT_TIMELINE_API, [this.props.match.params.id]), successFn, errorFn, queryParams);\n    }\n\n    onCheckAllTimelineCard = (e) => {\n        this.setState(function (prevState) {\n            return {\n                checkedTimelineCards: e.target.checked ? {...prevState.allCheckList} : {},\n                indeterminate: false,\n                checkAll: e.target.checked,\n            }\n        });\n    }\n\n    toggleTimelineCheckbox = (type, id, checked) => {\n        this.setState(function (prevState) {\n            const returnObj = {};\n            const checkedList = prevState.checkedTimelineCards;\n            if (checkedList[type]) {\n                checkedList[type][id] = !!checked\n            } else {\n                checkedList[type] = {[id]: !!checked}\n            }\n            if (!checked) {\n                returnObj.checkAll = false;\n                returnObj.indeterminate = true;\n                delete checkedList[type][id]\n                if (Object.keys(checkedList[type]).length) {\n\n                } else {\n                    delete checkedList[type]\n                    if (!Object.keys(checkedList).length) {\n                        returnObj.indeterminate = false;\n                    }\n                }\n\n            } else {\n                returnObj.indeterminate = true;\n                if (Object.keys(prevState.allCheckList).length == Object.keys(checkedList).length) {\n                    const keysList = Object.keys(prevState.allCheckList);\n                    let flag = false\n                    for (let i = 0; i < keysList.length; i++) {\n                        if (Object.keys(prevState.allCheckList[keysList[i]]).length != Object.keys(checkedList[keysList[i]]).length) {\n                            flag = true;\n                            returnObj.checkAll = false;\n                            break;\n                        }\n                    }\n                    if (!flag) {\n                        returnObj.indeterminate = false;\n                        returnObj.checkAll = true\n                    }\n                }\n            }\n            returnObj.checkedTimelineCards = checkedList;\n            return returnObj;\n        });\n    };\n\n    printCaseSheet = () => {\n        const that = this;\n        const msg = startLoadingMessage(\"Starting print case sheet...\");\n        const reqObj = {\n            practice: that.props.active_practiceId,\n            timeline: []\n        }\n        const keys = Object.keys(this.state.checkedTimelineCards);\n        keys.forEach(function (key) {\n            reqObj.timeline.push({\n                type: key,\n                id: Object.keys(that.state.checkedTimelineCards[key])\n            })\n        });\n        const successFn = function (data) {\n            stopLoadingMessage(msg, SUCCESS_MSG_TYPE, \"Fetched report successfully!!\");\n            window.open(BACKEND_BASE_URL + data.report);\n        }\n        const errorFn = function () {\n            stopLoadingMessage(msg, ERROR_MSG_TYPE, \"Case sheet printing failed!!\");\n        }\n        postAPI(interpolate(PATIENT_TIMELINE_PDF, [this.props.match.params.id]), reqObj, successFn, errorFn);\n    }\n\n    updateFormValue =(type,value)=>{\n        this.setState({\n            [type]: value\n        })\n    };\n\n    mailModalOpen =() =>{\n        this.setState({\n            visibleMail:true\n        })\n    };\n\n    mailModalClose =() =>{\n        this.setState({\n            visibleMail:false\n        })\n    };\n\n\n    sendCaseSheet =()=>{\n        this.mailModalOpen()\n        this.setState({\n            mail_to:_.get(this.props.currentPatient,'user.email')\n        })\n\n    };\n\n    sendMailToPatient =()=>{\n        const that =this;\n        const {mail_to  } = this.state;\n\n        const reqObj = {\n            mail_to,\n            practice: that.props.active_practiceId,\n            timeline: []\n        }\n        const keys = Object.keys(this.state.checkedTimelineCards);\n        keys.forEach(function (key) {\n            reqObj.timeline.push({\n                type: key,\n                id: Object.keys(that.state.checkedTimelineCards[key])\n            })\n        });\n\n        const successFn =function(data){\n\n        }\n        const errorFn = function(data){\n\n        }\n        postAPI(interpolate(PATIENT_TIMELINE_PDF,[this.props.match.params.id]),reqObj, successFn ,errorFn)\n        this.mailModalClose();\n    }\n\n    render() {\n        const that = this;\n        const {timelineData} =this.state\n\n\n        return (\n<Card\n  title=\"Timeline\"\n  extra={(\n<Button.Group>\n                         <Button onClick={() => this.sendCaseSheet(this.state.timelineData)}><Icon type=\"mail\" /> Case Sheet</Button>\n                         <Button type=\"primary\" onClick={() => this.printCaseSheet()}>Print Case Sheet</Button>\n</Button.Group>\n)}\n>\n            <Spin spinning={this.state.loading}>\n                <Row>\n                    <Col span={4}>\n                        <Checkbox\n                          indeterminate={this.state.selectedFiltersIntermediate}\n                          onChange={this.onCheckAllFiltersChange}\n                          checked={this.state.checkAllFilters}\n                        >\n                            <b>Select all</b>\n                        </Checkbox>\n                        <br />\n                        <Checkbox.Group\n                          size=\"large\"\n                          value={this.state.filterParams}\n                          options={checkboxOption}\n                            // defaultValue={['Apple']}\n                          onChange={this.changeFilters}\n                        />\n                    </Col>\n                    <Col span={20}>\n                        <Affix top={10}>\n                            <h4 style={{\n                                textAlign: 'right', padding: '5px',\n                                backgroundImage: 'linear-gradient(to left, white , transparent)',\n                            }}\n                            ><Checkbox\n                              indeterminate={this.state.indeterminate}\n                              onChange={this.onCheckAllTimelineCard}\n                              checked={this.state.checkAll}\n                            >Select All\n                             </Checkbox>\n                            </h4>\n                        </Affix>\n                        <Timeline progressDot current={1} direction=\"vertical\">\n                            {this.state.timelineData.map(item => (\n                                <Timeline.Item dot={item.type == 'Time' ? (\n<Icon\n  type=\"clock-circle-o\"\n  style={{fontSize: '25px'}}\n/>\n) : null}\n                                >{timelineItem({\n                                    ...item,\n                                    checkedTimelineCards: that.state.checkedTimelineCards,\n                                    toggleTimelineCheckbox: that.toggleTimelineCheckbox\n                                })}\n                                </Timeline.Item>\n                              ))}\n                        </Timeline>\n\n                        <Modal\n                          title={null}\n                          visible={this.state.visibleMail}\n                          onOk={this.sendMailToPatient}\n                          onCancel={this.mailModalClose}\n                          footer={[\n                                <Button key=\"back\" onClick={this.mailModalClose}>\n                                    Cancel\n                                </Button>,\n                                <Button key=\"submit\" type=\"primary\" onClick={this.sendMailToPatient}>\n                                    Send\n                                </Button>,\n                            ]}\n                        >\n                            <p>Send Timeline To {_.get(this.props.currentPatient,'user.first_name')} ?</p>\n                            <Input\n                              value={this.state.mail_to}\n                              placeholder=\"Email\"\n                              onChange={(e)=>that.updateFormValue('mail_to',e.target.value)}\n                            />\n                        </Modal>\n                    </Col>\n                </Row>\n            </Spin>\n\n</Card>\n)\n    }\n}\n\nexport default PatientTimeline;\n\nfunction\n\ndateTimeStamp(item) {\n    return (\n<span><Affix top={20} offsetTop={30}><h2 style={{\n        marginLeft: '10px',\n        padding: '5px',\n        backgroundImage: 'linear-gradient(to right, #ddd , white)',\n        borderRadius: '4px'\n    }}\n>{moment(item.date).format('LL')}\n                                     </h2>\n      </Affix>\n</span>\n)\n}\n\nfunction timelineItem(item) {\n    switch (item.type) {\n        case 'Clinical Notes':\n            return timelineClinicalNote(item);\n        case 'Appointments':\n            return timelineAppointmentCard(item);\n        case 'Files':\n            return timelineFilesCard(item);\n        case 'Invoices':\n            return timelineInvoiceCard(item);\n        case 'Vital Signs':\n            return timelineVitalSignCard(item);\n        case 'Prescriptions':\n            return timelinePrescriptionCard(item);\n        case 'Payments':\n            return timelinePaymentCard(item);\n        case 'Time':\n            return dateTimeStamp(item);\n        case 'Procedures':\n            return timelineProcedureCard(item);\n        case 'Treatment Plans':\n            return timelineTreatmentPlanCard(item);\n        default:\n            return item.type\n    }\n}\n\nfunction\n\ntimelineAppointmentCard(item) {\n    return (\n<Card\n  hoverable\n  bodyStyle={{backgroundColor: (item.checkedTimelineCards[item.type] && item.checkedTimelineCards[item.type][item.id] ? '#B5EEFF' : 'initial')}}\n>\n        <h2><Icon type=\"calendar\" /> Appointment\n            {item.practice_data ? (\n<Tag style={{float: 'right'}}>\n                <Tooltip title=\"Practice Name\">\n                    <b>{item.practice_data.name} </b>\n                </Tooltip>\n</Tag>\n) : null}\n        </h2>\n        {item.doctor_data ? (\n            <p style={{\n                borderLeft: `5px solid ${  item.doctor_data.calendar_colour}`,\n                paddingLeft: '5px'\n            }}\n            >{item.doctor_data.user.first_name}\n            </p>\n          ) : null}\n\n        {moment(item.schedule_at).format('hh:mm A')} to {moment(item.schedule_at).add(item.slot, 'mins').format('HH:mm A')}\n</Card>\n);\n}\n\nfunction timelineFilesCard(item) {\n    return (\n<Card\n  hoverable\n  bodyStyle={{backgroundColor: (item.checkedTimelineCards[item.type] && item.checkedTimelineCards[item.type][item.id] ? '#B5EEFF' : 'initial')}}\n>\n        <h2><Icon type=\"picture\" /> File<Checkbox\n          size=\"large\"\n          style={{float: 'right'}}\n          checked={(item.checkedTimelineCards[item.type] ? item.checkedTimelineCards[item.type][item.id] : false)}\n          onChange={(e) => item.toggleTimelineCheckbox(item.type, item.id, e.target.checked)}\n        />\n            {item.practice_data ? (\n<Tag style={{float: 'right'}}>\n                <Tooltip title=\"Practice Name\">\n                    <b>{item.practice_data.name} </b>\n                </Tooltip>\n</Tag>\n) : null}\n        </h2>\n        <img src={makeFileURL(item.file_type)} alt=\"\" style={{height: 100}} />\n</Card>\n)\n}\n\nfunction\n\ntimelineInvoiceCard(item) {\n    return (\n<Card\n  hoverable\n  bodyStyle={{backgroundColor: (item.checkedTimelineCards[item.type] && item.checkedTimelineCards[item.type][item.id] ? '#B5EEFF' : 'initial')}}\n>\n        <h2><Icon type=\"audit\" /> Invoice<Checkbox\n          size=\"large\"\n          style={{float: 'right'}}\n          checked={(item.checkedTimelineCards[item.type] ? item.checkedTimelineCards[item.type][item.id] : false)}\n          onChange={(e) => item.toggleTimelineCheckbox(item.type, item.id, e.target.checked)}\n        />\n            {item.practice_data ? (\n<Tag style={{float: 'right'}}>\n                <Tooltip title=\"Practice Name\">\n                    <b>{item.practice_data.name} </b>\n                </Tooltip>\n</Tag>\n) : null}\n        </h2>\n        {item.procedure.map(proc => <Tag>{proc.name}</Tag>)}\n        {item.inventory.map(proc => <Tag>{proc.name}</Tag>)}\n        <br /><b>{item.invoice_id}</b>\n        <br /><b>Invoice Amount: INR {item.total}</b>\n        <br /><b>Paid Amount: INR {item.payments_data}</b>\n        <br /><b>Due Amount: INR {item.total - item.payments_data}</b>\n</Card>\n)\n}\n\nfunction\n\ntimelineClinicalNote(item) {\n    return (\n<Card\n  hoverable\n  bodyStyle={{backgroundColor: (item.checkedTimelineCards[item.type] && item.checkedTimelineCards[item.type][item.id] ? '#B5EEFF' : 'initial')}}\n>\n        <h2><Icon type=\"solution\" /> Clinical Note Added<Checkbox\n          size=\"large\"\n          style={{float: 'right'}}\n          checked={(item.checkedTimelineCards[item.type] ? item.checkedTimelineCards[item.type][item.id] : false)}\n          onChange={(e) => item.toggleTimelineCheckbox(item.type, item.id, e.target.checked)}\n        />\n            {item.practice ? (\n<Tag style={{float: 'right'}}>\n                <Tooltip title=\"Practice Name\">\n                    <b>{item.practice.name} </b>\n                </Tooltip>\n</Tag>\n) : null}\n        </h2>\n        {item.chief_complaints ? (\n            <p>Chief Complaints\n                <ul>\n                    {item.chief_complaints.split(CUSTOM_STRING_SEPERATOR).map(item =>\n                        item ? <li>{item}</li> : null)}\n                </ul>\n            </p>\n          )\n            : null}\n        {item.observations ? (\n            <p>Observations\n                <ul>\n                    {item.observations.split(CUSTOM_STRING_SEPERATOR).map(item =>\n                        item ? <li>{item}</li> : null)}\n                </ul>\n            </p>\n          )\n            : null}\n        {item.investigations ? (\n            <p>Investigations\n                <ul>\n                    {item.investigations.split(CUSTOM_STRING_SEPERATOR).map(item =>\n                        item ? <li>{item}</li> : null)}\n                </ul>\n            </p>\n          )\n            : null}\n        {item.diagnosis ? (\n            <p>Diagnosis\n                <ul>\n                    {item.diagnosis.split(CUSTOM_STRING_SEPERATOR).map(item =>\n                        item ? <li>{item}</li> : null)}\n                </ul>\n            </p>\n          )\n            : null}\n        {item.notes ? (\n            <p>Notes\n                <ul>\n                    {item.notes.split(CUSTOM_STRING_SEPERATOR).map(item =>\n                        item ? <li>{item}</li> : null)}\n                </ul>\n            </p>\n          )\n            : null}\n</Card>\n);\n}\n\nfunction\n\ntimelineVitalSignCard(item) {\n    const columns = [{\n        title: 'Time',\n        dataIndex: 'created_at',\n        key: 'name',\n        render: created_at => <span>{moment(created_at).format('hh:mm A')}</span>,\n    }, {\n        title: 'Temp(F)',\n        key: 'temperature',\n        render: (text, record) => (\n            <span> {record.temperature}<br />,{record.temperature_part}</span>\n        )\n    }, {\n        title: 'Pulse (BPM)',\n        dataIndex: 'pulse',\n        key: 'pulse',\n    }, {\n        title: 'RR breaths/min',\n        dataIndex: 'resp_rate',\n        key: 'resp_rate',\n    }, {\n        title: 'SYS/DIA mmhg',\n        key: 'address',\n        render: (text, record) => (\n<>{record.blood_pressure_up ?\n                <span> {record.blood_pressure_up}/{record.blood_pressure_down}<br />,{record.position}</span> : null}\n</>\n        )\n    }, {\n        title: 'WEIGHT kg',\n        dataIndex: 'weight',\n        key: 'weight',\n    }, {\n        title: \"Creatinine Level\",\n        key: \"creatinine\",\n        dataIndex: \"creatinine\",\n    }, {\n        title: \"Haemoglobin Level\",\n        key: \"haemoglobin\",\n        dataIndex: \"haemoglobin\",\n    }, {\n        title: \"Urea Level\",\n        key: \"urea\",\n        dataIndex: \"urea\",\n\n    }, {\n        title: \"Uric Acid Level\",\n        key: \"uric_acid\",\n        dataIndex: \"uric_acid\",\n    }];\n    return (\n<Card\n  hoverable\n  bodyStyle={{backgroundColor: (item.checkedTimelineCards[item.type] && item.checkedTimelineCards[item.type][item.id] ? '#B5EEFF' : 'initial')}}\n>\n        <h2><Icon type=\"heart\" /> Report Manual Recorded<Checkbox\n          size=\"large\"\n          style={{float: 'right'}}\n          checked={(item.checkedTimelineCards[item.type] ? item.checkedTimelineCards[item.type][item.id] : false)}\n          onChange={(e) => item.toggleTimelineCheckbox(item.type, item.id, e.target.checked)}\n        />\n            {item.practice_data ? (\n<Tag style={{float: 'right'}}>\n                <Tooltip title=\"Practice Name\">\n                    <b>{item.practice_data.name} </b>\n                </Tooltip>\n</Tag>\n) : null}\n        </h2>\n        {item.doctor_data ? (\n            <p style={{\n                borderLeft: `5px solid ${  item.doctor_data.calendar_colour}`,\n                paddingLeft: '5px'\n            }}\n            >{item.doctor_data.user.first_name}\n            </p>\n          ) : null}\n        <Table\n          columns={columns}\n          size=\"small\"\n          pagination={false}\n          dataSource={[item]}\n        />\n</Card>\n)\n}\n\nfunction\n\ntimelinePrescriptionCard(item) {\n    return (\n<Card\n  hoverable\n  bodyStyle={{backgroundColor: (item.checkedTimelineCards[item.type] && item.checkedTimelineCards[item.type][item.id] ? '#B5EEFF' : 'initial')}}\n>\n        <h2><Icon type=\"solution\" /> Prescription Added<Checkbox\n          size=\"large\"\n          style={{float: 'right'}}\n          checked={(item.checkedTimelineCards[item.type] ? item.checkedTimelineCards[item.type][item.id] : false)}\n          onChange={(e) => item.toggleTimelineCheckbox(item.type, item.id, e.target.checked)}\n        />\n            {item.practice ? (\n<Tag style={{float: 'right'}}>\n                <Tooltip title=\"Practice Name\">\n                    <b>{item.practice.name} </b>\n                </Tooltip>\n</Tag>\n) : null}\n        </h2>\n        {item.doctor ? (\n            <p style={{\n                borderLeft: `5px solid ${  item.doctor.calendar_colour}`,\n                paddingLeft: '5px'\n            }}\n            >{item.doctor.user.first_name}\n            </p>\n          ) : null}\n        {item.drugs.map(drug => <Tag>{drug.name}</Tag>)}\n\n</Card>\n)\n}\n\nfunction\n\ntimelinePaymentCard(item) {\n    return (\n<Card\n  hoverable\n  bodyStyle={{backgroundColor: (item.checkedTimelineCards[item.type] && item.checkedTimelineCards[item.type][item.id] ? '#B5EEFF' : 'initial')}}\n>\n        <h2><Icon type=\"dollar\" /> Payment<Checkbox\n          size=\"large\"\n          style={{float: 'right'}}\n          checked={(item.checkedTimelineCards[item.type] ? item.checkedTimelineCards[item.type][item.id] : false)}\n          onChange={(e) => item.toggleTimelineCheckbox(item.type, item.id, e.target.checked)}\n        />\n            {item.practice_data ? (\n<Tag style={{float: 'right'}}>\n                <Tooltip title=\"Practice Name\">\n                    <b>{item.practice_data.name} </b>\n                </Tooltip>\n</Tag>\n) : null}\n        </h2>\n        <b>{item.payment_id}</b>\n        <br /><b>Amount Paid: INR {item.total}</b>\n</Card>\n)\n}\n\nfunction\n\ntimelineProcedureCard(item) {\n    return (\n<Card\n  hoverable\n  bodyStyle={{backgroundColor: (item.checkedTimelineCards[item.type] && item.checkedTimelineCards[item.type][item.id] ? '#B5EEFF' : 'initial')}}\n>\n        <h2>Procedure Performed<Checkbox\n          size=\"large\"\n          style={{float: 'right'}}\n          checked={(item.checkedTimelineCards[item.type] ? item.checkedTimelineCards[item.type][item.id] : false)}\n          onChange={(e) => item.toggleTimelineCheckbox(item.type, item.id, e.target.checked)}\n        />\n            {item.practice ? (\n<Tag style={{float: 'right'}}>\n                <Tooltip title=\"Practice Name\">\n                    <b>{item.practice.name} </b>\n                </Tooltip>\n</Tag>\n) : null}\n        </h2>\n        {item.doctor ? (\n            <p style={{\n                borderLeft: `5px solid ${  item.doctor.calendar_colour}`,\n                paddingLeft: '5px'\n            }}\n            >{item.doctor.user.first_name}\n            </p>\n          ) : null}\n        {item.treatment_plans.map(item => <Tag>{item.procedure.name}</Tag>)}\n</Card>\n)\n}\n\nfunction\n\ntimelineTreatmentPlanCard(item) {\n    return (\n<Card\n  hoverable\n  bodyStyle={{backgroundColor: (item.checkedTimelineCards[item.type] && item.checkedTimelineCards[item.type][item.id] ? '#B5EEFF' : 'initial')}}\n>\n        <h2>Treatment Plan <Checkbox\n          size=\"large\"\n          style={{float: 'right'}}\n          checked={(item.checkedTimelineCards[item.type] ? item.checkedTimelineCards[item.type][item.id] : false)}\n          onChange={(e) => item.toggleTimelineCheckbox(item.type, item.id, e.target.checked)}\n        />\n            {item.practice ? (\n<Tag style={{float: 'right'}}>\n                <Tooltip title=\"Practice Name\">\n                    <b>{item.practice.name} </b>\n                </Tooltip>\n</Tag>\n) : null}\n        </h2>\n        {item.doctor ? (\n            <p style={{\n                borderLeft: `5px solid ${  item.doctor.calendar_colour}`,\n                paddingLeft: '5px'\n            }}\n            >{item.doctor.user.first_name}\n            </p>\n          ) : null}\n        {item.treatment_plans.map(item => <Tag>{item.procedure.name}</Tag>)}\n</Card>\n)\n}\n","function _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nimport { Component } from \"react\";\n\nfunction appendStyle(id, css) {\n  if (!document.head.querySelector(\"#\" + id)) {\n    var node = document.createElement(\"style\");\n    node.textContent = css;\n    node.type = \"text/css\";\n    node.id = id;\n    document.head.appendChild(node);\n  }\n}\n\nvar StyleInjector =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(StyleInjector, _Component);\n\n  function StyleInjector() {\n    _classCallCheck(this, StyleInjector);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(StyleInjector).apply(this, arguments));\n  }\n\n  _createClass(StyleInjector, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      appendStyle(this.props.name, this.props.css);\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      var node = document.getElementById(this.props.name);\n      node.parentNode.removeChild(node);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return null;\n    }\n  }]);\n\n  return StyleInjector;\n}(Component);\n\nexport { StyleInjector as default };\nexport var lightboxStyles = function lightboxStyles(_ref) {\n  var imageBackgroundColor = _ref.imageBackgroundColor;\n  return \"\\n  body {\\n    overflow: hidden;\\n  }\\n\\n  .__react_modal_image__modal_container {\\n    position: fixed;\\n    z-index: 5000;\\n    left: 0;\\n    top: 0;\\n    width: 100%;\\n    height: 100%;\\n    background-color: rgba(0, 0, 0, 0.8);\\n    touch-action: none;\\n    overflow: hidden;\\n  }\\n\\n  .__react_modal_image__modal_content {\\n    position: relative;\\n    height: 100%;\\n    width: 100%;\\n  }\\n\\n  .__react_modal_image__modal_content img, \\n  .__react_modal_image__modal_content svg {\\n    position: absolute;\\n    top: 50%;\\n    left: 50%;\\n    transform: translate3d(-50%, -50%, 0);\\n    -webkit-transform: translate3d(-50%, -50%, 0);\\n    -ms-transform: translate3d(-50%, -50%, 0);\\n    overflow: hidden;\\n  }\\n\\n  .__react_modal_image__medium_img {\\n    max-width: 98%;\\n    max-height: 98%;\\n    background-color: \".concat(imageBackgroundColor, \";\\n  }\\n\\n  .__react_modal_image__large_img {\\n    cursor: move;\\n    background-color: \").concat(imageBackgroundColor, \"\\n  }\\n\\n  .__react_modal_image__icon_menu a {\\n    display: inline-block;\\n    font-size: 40px;\\n    cursor: pointer;\\n    line-height: 40px;\\n    box-sizing: border-box;\\n    border: none;\\n    padding: 0px 5px 0px 5px;\\n    margin-left: 10px;\\n    color: white;\\n    background-color: rgba(0, 0, 0, 0);\\n  }\\n\\n  .__react_modal_image__icon_menu {\\n    display: inline-block;\\n    float: right;\\n  }\\n\\n  .__react_modal_image__caption {\\n    display: inline-block;\\n    color: white;\\n    font-size: 120%;\\n    padding: 10px;\\n    margin: 0;\\n  }\\n\\n  .__react_modal_image__header {\\n    position: absolute;\\n    top: 0;\\n    width: 100%;\\n    background-color: rgba(0, 0, 0, 0.7);\\n    overflow: hidden;\\n  }\\n\");\n};","/* \n  Icons from https://material.io/icons/\n*/\nimport React from \"react\";\nexport var ZoomInIcon = function ZoomInIcon() {\n  return React.createElement(\"svg\", {\n    fill: \"#ffffff\",\n    height: \"24\",\n    viewBox: \"0 0 24 24\",\n    width: \"24\",\n    xmlns: \"http://www.w3.org/2000/svg\"\n  }, React.createElement(\"path\", {\n    d: \"M0 0h24v24H0z\",\n    fill: \"none\"\n  }), React.createElement(\"path\", {\n    d: \"M7 14H5v5h5v-2H7v-3zm-2-4h2V7h3V5H5v5zm12 7h-3v2h5v-5h-2v3zM14 5v2h3v3h2V5h-5z\"\n  }));\n};\nexport var ZoomOutIcon = function ZoomOutIcon() {\n  return React.createElement(\"svg\", {\n    fill: \"#ffffff\",\n    height: \"24\",\n    viewBox: \"0 0 24 24\",\n    width: \"24\",\n    xmlns: \"http://www.w3.org/2000/svg\"\n  }, React.createElement(\"path\", {\n    d: \"M0 0h24v24H0z\",\n    fill: \"none\"\n  }), React.createElement(\"path\", {\n    d: \"M5 16h3v3h2v-5H5v2zm3-8H5v2h5V5H8v3zm6 11h2v-3h3v-2h-5v5zm2-11V5h-2v5h5V8h-3z\"\n  }));\n};\nexport var DownloadIcon = function DownloadIcon() {\n  return React.createElement(\"svg\", {\n    fill: \"#ffffff\",\n    height: \"24\",\n    viewBox: \"0 0 24 24\",\n    width: \"24\",\n    xmlns: \"http://www.w3.org/2000/svg\"\n  }, React.createElement(\"path\", {\n    d: \"M19 9h-4V3H9v6H5l7 7 7-7zM5 18v2h14v-2H5z\"\n  }), React.createElement(\"path\", {\n    d: \"M0 0h24v24H0z\",\n    fill: \"none\"\n  }));\n};\nexport var CloseIcon = function CloseIcon() {\n  return React.createElement(\"svg\", {\n    fill: \"#ffffff\",\n    height: \"24\",\n    viewBox: \"0 0 24 24\",\n    width: \"24\",\n    xmlns: \"http://www.w3.org/2000/svg\"\n  }, React.createElement(\"path\", {\n    d: \"M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z\"\n  }), React.createElement(\"path\", {\n    d: \"M0 0h24v24H0z\",\n    fill: \"none\"\n  }));\n};\nexport var SpinnerIcon = function SpinnerIcon() {\n  return React.createElement(\"svg\", {\n    fill: \"#ffffff\",\n    height: \"48\",\n    viewBox: \"0 0 24 24\",\n    width: \"48\",\n    xmlns: \"http://www.w3.org/2000/svg\"\n  }, React.createElement(\"path\", {\n    d: \"M6 2v6h.01L6 8.01 10 12l-4 4 .01.01H6V22h12v-5.99h-.01L18 16l-4-4 4-3.99-.01-.01H18V2H6zm10 14.5V20H8v-3.5l4-4 4 4zm-4-5l-4-4V4h8v3.5l-4 4z\"\n  }), React.createElement(\"path\", {\n    d: \"M0 0h24v24H0V0z\",\n    fill: \"none\"\n  }));\n};\nexport var RotateIcon = function RotateIcon() {\n  return React.createElement(\"svg\", {\n    fill: \"#ffffff\",\n    width: \"24\",\n    height: \"24\",\n    viewBox: \"0 0 24 24\",\n    xmlns: \"http://www.w3.org/2000/svg\"\n  }, React.createElement(\"path\", {\n    fill: \"none\",\n    d: \"M0 0h24v24H0V0zm0 0h24v24H0V0z\"\n  }), React.createElement(\"path\", {\n    d: \"M7.47 21.49C4.2 19.93 1.86 16.76 1.5 13H0c.51 6.16 5.66 11 11.95 11 .23 0 .44-.02.66-.03L8.8 20.15l-1.33 1.34zM12.05 0c-.23 0-.44.02-.66.04l3.81 3.81 1.33-1.33C19.8 4.07 22.14 7.24 22.5 11H24c-.51-6.16-5.66-11-11.95-11zM16 14h2V8c0-1.11-.9-2-2-2h-6v2h6v6zm-8 2V4H6v2H4v2h2v8c0 1.1.89 2 2 2h8v2h2v-2h2v-2H8z\"\n  }));\n};","import React from \"react\";\nimport { ZoomInIcon, ZoomOutIcon, DownloadIcon, CloseIcon, RotateIcon } from \"./icons\";\n\nvar Header = function Header(_ref) {\n  var image = _ref.image,\n      alt = _ref.alt,\n      zoomed = _ref.zoomed,\n      toggleZoom = _ref.toggleZoom,\n      toggleRotate = _ref.toggleRotate,\n      onClose = _ref.onClose,\n      enableDownload = _ref.enableDownload,\n      enableZoom = _ref.enableZoom,\n      enableRotate = _ref.enableRotate;\n  return React.createElement(\"div\", {\n    className: \"__react_modal_image__header\"\n  }, React.createElement(\"span\", {\n    className: \"__react_modal_image__icon_menu\"\n  }, enableDownload && React.createElement(\"a\", {\n    href: image,\n    download: true\n  }, React.createElement(DownloadIcon, null)), enableZoom && React.createElement(\"a\", {\n    onClick: toggleZoom\n  }, zoomed ? React.createElement(ZoomOutIcon, null) : React.createElement(ZoomInIcon, null)), enableRotate && React.createElement(\"a\", {\n    onClick: toggleRotate\n  }, React.createElement(RotateIcon, null)), React.createElement(\"a\", {\n    onClick: onClose\n  }, React.createElement(CloseIcon, null))), alt && React.createElement(\"span\", {\n    className: \"__react_modal_image__caption\"\n  }, alt));\n};\n\nexport default Header;","function _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { Component } from \"react\";\nimport { SpinnerIcon } from \"./icons\";\n\nvar Image =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Image, _Component);\n\n  function Image() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Image);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Image)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      loading: true\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleOnLoad\", function () {\n      _this.setState({\n        loading: false\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleOnContextMenu\", function (event) {\n      !_this.props.contextMenu && event.preventDefault();\n    });\n\n    return _this;\n  }\n\n  _createClass(Image, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          id = _this$props.id,\n          className = _this$props.className,\n          src = _this$props.src,\n          style = _this$props.style,\n          handleDoubleClick = _this$props.handleDoubleClick;\n      return React.createElement(\"div\", null, this.state.loading && React.createElement(SpinnerIcon, null), React.createElement(\"img\", {\n        id: id,\n        className: className,\n        src: src,\n        style: style,\n        onLoad: this.handleOnLoad,\n        onDoubleClick: handleDoubleClick,\n        onContextMenu: this.handleOnContextMenu\n      }));\n    }\n  }]);\n\n  return Image;\n}(Component);\n\nexport { Image as default };","function _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { Component } from \"react\";\nimport StyleInjector, { lightboxStyles } from \"./styles\";\nimport Header from \"./Header\";\nimport Image from \"./Image\";\n\nvar Lightbox =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Lightbox, _Component);\n\n  function Lightbox() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Lightbox);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Lightbox)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      move: {\n        x: 0,\n        y: 0\n      },\n      moveStart: undefined,\n      zoomed: false,\n      rotationDeg: 0\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleKeyDown\", function (event) {\n      // ESC or ENTER closes the modal\n      if (event.keyCode === 27 || event.keyCode === 13) {\n        _this.props.onClose();\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"getCoordinatesIfOverImg\", function (event) {\n      var point = event.changedTouches ? event.changedTouches[0] : event;\n\n      if (point.target.id !== \"react-modal-image-img\") {\n        // the img was not a target of the coordinates\n        return;\n      }\n\n      var dim = _this.contentEl.getBoundingClientRect();\n\n      var x = point.clientX - dim.left;\n      var y = point.clientY - dim.top;\n      return {\n        x: x,\n        y: y\n      };\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleMouseDownOrTouchStart\", function (event) {\n      event.preventDefault();\n\n      if (event.touches && event.touches.length > 1) {\n        // more than one finger, ignored\n        return;\n      }\n\n      var coords = _this.getCoordinatesIfOverImg(event);\n\n      if (!coords) {\n        // click outside the img => close modal\n        _this.props.onClose();\n      }\n\n      if (!_this.state.zoomed) {\n        // do not allow drag'n'drop if zoom has not been applied\n        return;\n      }\n\n      _this.setState(function (prev) {\n        return {\n          moveStart: {\n            x: coords.x - prev.move.x,\n            y: coords.y - prev.move.y\n          }\n        };\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleMouseMoveOrTouchMove\", function (event) {\n      event.preventDefault();\n\n      if (!_this.state.zoomed || !_this.state.moveStart) {\n        // do not allow drag'n'drop if zoom has not been applied\n        // or if there has not been a click\n        return;\n      }\n\n      if (event.touches && event.touches.length > 1) {\n        // more than one finger, ignored\n        return;\n      }\n\n      var coords = _this.getCoordinatesIfOverImg(event);\n\n      if (!coords) {\n        return;\n      }\n\n      _this.setState(function (prev) {\n        return {\n          move: {\n            x: coords.x - prev.moveStart.x,\n            y: coords.y - prev.moveStart.y\n          }\n        };\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleMouseUpOrTouchEnd\", function (event) {\n      _this.setState({\n        moveStart: undefined\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"toggleZoom\", function (event) {\n      event.preventDefault();\n\n      _this.setState(function (prev) {\n        return {\n          zoomed: !prev.zoomed,\n          // reset position if zoomed out\n          move: prev.zoomed ? {\n            x: 0,\n            y: 0\n          } : prev.move\n        };\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"toggleRotate\", function (event) {\n      event.preventDefault();\n      var rotationDeg = _this.state.rotationDeg;\n\n      if (rotationDeg === 360) {\n        _this.setState({\n          rotationDeg: 90\n        });\n\n        return;\n      }\n\n      _this.setState(function (prevState) {\n        return {\n          rotationDeg: prevState.rotationDeg += 90\n        };\n      });\n    });\n\n    return _this;\n  }\n\n  _createClass(Lightbox, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      document.addEventListener(\"keydown\", this.handleKeyDown, false);\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      document.removeEventListener(\"keydown\", this.handleKeyDown, false);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$props = this.props,\n          medium = _this$props.medium,\n          large = _this$props.large,\n          alt = _this$props.alt,\n          onClose = _this$props.onClose,\n          hideDownload = _this$props.hideDownload,\n          hideZoom = _this$props.hideZoom,\n          showRotate = _this$props.showRotate,\n          _this$props$imageBack = _this$props.imageBackgroundColor,\n          imageBackgroundColor = _this$props$imageBack === void 0 ? \"black\" : _this$props$imageBack;\n      var _this$state = this.state,\n          move = _this$state.move,\n          zoomed = _this$state.zoomed,\n          rotationDeg = _this$state.rotationDeg;\n      return React.createElement(\"div\", null, React.createElement(StyleInjector, {\n        name: \"__react_modal_image__lightbox\",\n        css: lightboxStyles({\n          imageBackgroundColor: imageBackgroundColor\n        })\n      }), React.createElement(\"div\", {\n        className: \"__react_modal_image__modal_container\"\n      }, React.createElement(\"div\", {\n        className: \"__react_modal_image__modal_content\",\n        onMouseDown: this.handleMouseDownOrTouchStart,\n        onMouseUp: this.handleMouseUpOrTouchEnd,\n        onMouseMove: this.handleMouseMoveOrTouchMove,\n        onTouchStart: this.handleMouseDownOrTouchStart,\n        onTouchEnd: this.handleMouseUpOrTouchEnd,\n        onTouchMove: this.handleMouseMoveOrTouchMove,\n        ref: function ref(el) {\n          _this2.contentEl = el;\n        }\n      }, zoomed && React.createElement(Image, {\n        id: \"react-modal-image-img\",\n        className: \"__react_modal_image__large_img\",\n        src: large || medium,\n        style: {\n          transform: \"translate3d(-50%, -50%, 0) translate3d(\".concat(move.x, \"px, \").concat(move.y, \"px, 0) rotate(\").concat(rotationDeg, \"deg)\"),\n          WebkitTransform: \"translate3d(-50%, -50%, 0) translate3d(\".concat(move.x, \"px, \").concat(move.y, \"px, 0) rotate(\").concat(rotationDeg, \"deg)\"),\n          MsTransform: \"translate3d(-50%, -50%, 0) translate3d(\".concat(move.x, \"px, \").concat(move.y, \"px, 0) rotate(\").concat(rotationDeg, \"deg)\")\n        },\n        handleDoubleClick: this.toggleZoom\n      }), !zoomed && React.createElement(Image, {\n        id: \"react-modal-image-img\",\n        className: \"__react_modal_image__medium_img\",\n        src: medium || large,\n        handleDoubleClick: this.toggleZoom,\n        contextMenu: !medium,\n        style: {\n          transform: \"translate3d(-50%, -50%, 0) rotate(\".concat(rotationDeg, \"deg)\"),\n          WebkitTransform: \"translate3d(-50%, -50%, 0) rotate(\".concat(rotationDeg, \"deg)\"),\n          MsTransform: \"translate3d(-50%, -50%, 0) rotate(\".concat(rotationDeg, \"deg)\")\n        }\n      })), React.createElement(Header, {\n        image: large || medium,\n        alt: alt,\n        zoomed: zoomed,\n        toggleZoom: this.toggleZoom,\n        toggleRotate: this.toggleRotate,\n        onClose: onClose,\n        enableDownload: !hideDownload,\n        enableZoom: !hideZoom,\n        enableRotate: !!showRotate\n      })));\n    }\n  }]);\n\n  return Lightbox;\n}(Component);\n\nexport { Lightbox as default };","function _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { Component } from \"react\";\nimport Lightbox from \"./Lightbox\";\nexport { default as Lightbox } from \"./Lightbox\";\n\nvar _default =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(_default, _Component);\n\n  function _default() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, _default);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(_default)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      modalOpen: false\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"toggleModal\", function () {\n      _this.setState(function (prev) {\n        return {\n          modalOpen: !prev.modalOpen\n        };\n      });\n    });\n\n    return _this;\n  }\n\n  _createClass(_default, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          className = _this$props.className,\n          small = _this$props.small,\n          smallSrcSet = _this$props.smallSrcSet,\n          medium = _this$props.medium,\n          large = _this$props.large,\n          alt = _this$props.alt,\n          hideDownload = _this$props.hideDownload,\n          hideZoom = _this$props.hideZoom,\n          showRotate = _this$props.showRotate,\n          imageBackgroundColor = _this$props.imageBackgroundColor;\n      var modalOpen = this.state.modalOpen;\n      return React.createElement(\"div\", null, React.createElement(\"img\", {\n        className: className,\n        style: {\n          cursor: \"pointer\",\n          maxWidth: \"100%\",\n          maxHeight: \"100%\"\n        },\n        onClick: this.toggleModal,\n        src: small,\n        srcSet: smallSrcSet,\n        alt: alt\n      }), modalOpen && React.createElement(Lightbox, {\n        medium: medium,\n        large: large,\n        alt: alt,\n        onClose: this.toggleModal,\n        hideDownload: hideDownload,\n        hideZoom: hideZoom,\n        showRotate: showRotate,\n        imageBackgroundColor: imageBackgroundColor\n      }));\n    }\n  }]);\n\n  return _default;\n}(Component);\n\nexport { _default as default };","import React from \"react\";\nimport {\n    Button,\n    Card,\n    Col,\n    Icon,\n    List,\n    Modal,\n    Radio,\n    Row,\n    Checkbox,\n    Menu,\n    Dropdown,\n    Input,\n    Popconfirm,\n    Affix, Tag\n    , Form\n} from \"antd\";\nimport {Redirect, Link} from 'react-router-dom';\nimport Meta from \"antd/lib/card/Meta\";\nimport ModalImage from \"react-modal-image\";\nimport moment from \"moment\";\nimport * as _ from \"lodash\";\nimport {\n    getAPI,\n    postAPI,\n    putAPI,\n    interpolate,\n    makeFileURL,\n    displayMessage,\n    findFileExtension\n} from \"../../../utils/common\";\nimport {\n    ALL_PATIENT_FILES,\n    EMR_FILETAGS,\n    PATIENT_FILES,\n    MEDICAL_CERTIFICATE_API,\n    MEDICAL_CERTIFICATE_PDF,\n    ALL_MEDICAL_CERITICATE_API,\n    PATIENT_MAILEDFILES\n} from \"../../../constants/api\";\nimport DynamicFieldsForm from \"../../common/DynamicFieldsForm\";\n\nimport {\n    MULTI_SELECT_FIELD,\n    SINGLE_IMAGE_UPLOAD_FIELD,\n    INPUT_FIELD,\n    ERROR_MSG_TYPE,\n    SUCCESS_MSG_TYPE\n} from \"../../../constants/dataKeys\";\nimport InfiniteFeedLoaderButton from \"../../common/InfiniteFeedLoaderButton\";\nimport {BACKEND_BASE_URL} from \"../../../config/connect\";\n\nimport {PDF_FILE_EXTENSION} from \"../../../constants/hardData\";\n\nclass PatientFiles extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            files: [],\n            tags: [],\n            showAddModal: false,\n            loading: true,\n            selectedFiles: {},\n            selectedTags: {},\n            filterSearchTag: null,\n            showAddMedicalModel: false,\n            // filterSearchMedical:''\n            medicalCertificate: [],\n            visible: false,\n            filesData: {},\n            mailedfiles: [],\n            visibleTag: false,\n        };\n        this.loadData = this.loadData.bind(this);\n        this.loadMedicalCertificate = this.loadMedicalCertificate.bind(this);\n    }\n\n    componentWillMount() {\n        this.loadData();\n        this.loadTags();\n        this.loadMedicalCertificate();\n    }\n\n    loadData(page = 1) {\n        const that = this;\n        this.setState({\n            loading: true\n        })\n        const successFn = function (data) {\n            that.setState(function (prevState) {\n                let lastPatient = null;\n                if (data.current == 1) {\n                    const newData = data.results.map(file => {\n                        if (moment(file.created_at).format('YYYYMMDD') != moment(lastPatient).format('YYYYMMDD')) {\n                            lastPatient = moment(file.created_at);\n                            return {...file, newDate: true}\n                        }\n                        return {...file, newDate: false}\n                    });\n                    return {\n                        files: newData,\n                        total: data.count,\n                        loadMoreFiles: data.next,\n                        loading: false,\n                    }\n                }\n                const newData = data.results.map(file => {\n                    if (moment(file.created_at).format('YYYYMMDD') != moment(lastPatient).format('YYYYMMDD')) {\n                        lastPatient = moment(file.created_at);\n                        return {...file, newDate: true}\n                    }\n                    return {...file, newDate: false}\n                });\n                return {\n                    files: [...prevState.files, ...newData],\n                    loadMoreFiles: data.next,\n                    loading: false\n                }\n\n\n            })\n        }\n        const errorFn = function () {\n            that.setState({\n                loading: false\n            })\n        }\n        const apiParams = {\n            page,\n            practice: this.props.active_practiceId,\n        };\n\n        if (this.props.match.params.id) {\n            apiParams.patient = this.props.match.params.id;\n        }\n        if (this.props.showAllClinic && this.props.match.params.id) {\n            delete (apiParams.practice)\n        }\n        if (this.state.filterSearchTag) {\n            apiParams.tag = this.state.filterSearchTag\n        } else if (this.state.filterSearchTag == '') {\n            apiParams.notag = true\n        }\n        getAPI(PATIENT_FILES, successFn, errorFn, apiParams);\n\n    }\n\n    loadTags() {\n        const that = this;\n        const successFn = function (data) {\n            that.setState({\n                tags: data,\n                loading: false\n            })\n        }\n        const errorFn = function () {\n            that.setState({\n                loading: false\n            })\n        }\n        getAPI(interpolate(EMR_FILETAGS, [this.props.active_practiceId]), successFn, errorFn);\n    }\n\n    loadMedicalCertificate(page = 1) {\n        const that = this;\n        that.setState({\n            loading: true\n        });\n        const successFn = function (data) {\n            if (data.current == 1) {\n\n                that.setState({\n                    total: data.count,\n                    medicalCertificate: data.results,\n                    loading: false,\n                    loadMoreCertificate: data.next\n                })\n            } else {\n                that.setState(function (prevState) {\n                    return {\n                        total: data.count,\n                        medicalCertificate: [...prevState.medicalCertificate, ...data.results],\n                        loading: false,\n                        loadMoreCertificate: data.next\n                    }\n                })\n            }\n        }\n\n\n        //     that.setState({\n        //         medicalCertificate: data.results,\n        //         loading:false\n        //     })\n        // }\n        const errorFn = function () {\n            that.setState({\n                loading: false\n            })\n\n        }\n        if (this.props.currentPatient) {\n            getAPI(interpolate(MEDICAL_CERTIFICATE_API, [this.props.active_practiceId, this.props.currentPatient.id, page]), successFn, errorFn);\n        }\n        if (this.props.showAllClinic && this.props.currentPatient) {\n            getAPI(interpolate(ALL_MEDICAL_CERITICATE_API, [this.props.currentPatient.id, page]), successFn, errorFn);\n        } else {\n            getAPI(interpolate(ALL_MEDICAL_CERITICATE_API, [this.props.active_practiceId, page]), successFn, errorFn);\n        }\n\n    }\n\n    loadMailedFiles = (page = 1) => {\n        const that = this;\n        const successFn = function (data) {\n            that.setState(function (prevState) {\n                if (data.current == 1) {\n                    return {\n                        files: [...data.results],\n                        total: data.count,\n                        loadMoreFiles: data.next,\n                        loading: false,\n                    }\n                }\n                return {\n                    files: [...prevState.files, ...data.results],\n                    loadMoreFiles: data.next,\n                    loading: false\n                }\n\n\n            })\n        }\n        const errorFn = function () {\n\n        }\n        const params = {\n            mailed: true,\n            page,\n            practice: this.props.active_practiceId,\n        }\n        if (this.props.currentPatient) {\n            params.patient = this.props.currentPatient.id;\n        }\n        if (this.props.showAllClinic && this.props.currentPatient) {\n            delete (params.practice)\n        }\n        getAPI(PATIENT_MAILEDFILES, successFn, errorFn, params);\n    }\n\n    triggerAddModal(option) {\n        this.setState({\n            showAddModal: !!option\n        })\n    }\n\n    triggerAddMedicalCertificateModal(option) {\n        this.setState({\n            showAddMedicalModel: !!option\n        })\n    }\n\n    filesCompleteToggle(id, option) {\n        this.setState(function (prevState) {\n            const selected = {...prevState.selectedFiles}\n            if (option) {\n                selected[id] = !!option\n            } else {\n                delete selected[id];\n            }\n            return {selectedFiles: {...selected}}\n        });\n    }\n\n    tagsCompleteToggle(id, option) {\n        this.setState(function (prevState) {\n            const selected = {...prevState.selectedTags}\n            if (option) {\n                selected[id] = !!option\n            } else {\n                delete selected[id];\n            }\n            return {selectedTags: {...selected}}\n        });\n    }\n\n    filesWithTags() {\n        const that = this;\n        const reqData = {\n            id: Object.keys(this.state.selectedFiles),\n            file_tags: Object.keys(this.state.selectedTags),\n            patient: this.props.match.params.id,\n        };\n        const successFn = function () {\n            that.setState({\n                selectedFiles: {},\n                visibleTag: false,\n            })\n            that.loadData()\n        }\n        const errorFn = function () {\n\n        }\n        postAPI(interpolate(PATIENT_FILES, [this.props.match.params.id]), reqData, successFn, errorFn)\n    }\n\n    filterTags = (e) => {\n        const that = this;\n        this.setState({\n            filterSearchTag: e.target.value\n        }, function () {\n            that.loadData();\n        })\n    }\n\n    deleteMedicalCertificate(item) {\n        const that = this;\n        const reqData = {\n            is_active: false,\n            patient: item.patient,\n            id: item.id\n        }\n\n        const successFn = function (data) {\n            that.loadData();\n            that.loadMedicalCertificate();\n        }\n        const errorFn = function () {\n\n        };\n        postAPI(interpolate(MEDICAL_CERTIFICATE_API, [that.props.active_practiceId]), reqData, successFn, errorFn);\n    }\n\n    deleteFile(item) {\n        const that = this;\n        const reqData = {\n            id: item.id,\n            patient: item.patient,\n            is_active: false\n        }\n        const successFn = function (data) {\n            that.setState({\n                showPDFFile: false\n            })\n            that.loadData();\n        }\n        const errorFn = function () {\n            displayMessage(ERROR_MSG_TYPE, \"Please Select Patient.\")\n\n        }\n        postAPI(interpolate(PATIENT_FILES, [this.props.match.params.id]), reqData, successFn, errorFn);\n    }\n\n    loadPDF(id) {\n        const that = this;\n        const successFn = function (data) {\n            if (data.report)\n                window.open(BACKEND_BASE_URL + data.report);\n        }\n        const errorFn = function () {\n\n        }\n        getAPI(interpolate(MEDICAL_CERTIFICATE_PDF, [id]), successFn, errorFn);\n    }\n\n    showModal = (item) => {\n        this.setState(function () {\n            return {visible: true, filesData: {...item}}\n        });\n    };\n\n    handleCancel = () => {\n        this.setState({visible: false});\n    };\n\n    togglePDFModal = (path) => {\n        this.setState({\n            showPDFFile: path\n        })\n    }\n\n    updateFormValue = (type, value) => {\n        this.setState({\n            [type]: value\n        })\n    };\n\n    mailModalOpen = () => {\n        this.setState({\n            visibleMail: true\n        })\n    };\n\n    mailModalClose = () => {\n        this.setState({\n            visibleMail: false\n        })\n    };\n\n\n    sendFiles = () => {\n        this.mailModalOpen()\n        this.setState({\n            mail_to: _.get(this.props.currentPatient, 'user.email')\n        })\n\n    };\n\n    handleVisibleChange = () => {\n        console.log(\"sdad\")\n        this.setState({\n            visibleTag: !this.state.visibleTag,\n        });\n    };\n\n    render() {\n        const that = this;\n        const PatientFilesForm = Form.create()(DynamicFieldsForm);\n        const fields = [{\n            key: 'file_type',\n            label: 'File',\n            type: SINGLE_IMAGE_UPLOAD_FIELD,\n            required: true\n        }, {\n            key: 'file_tags',\n            label: 'Tags',\n            type: MULTI_SELECT_FIELD,\n            options: this.state.tags.map(tag => ({label: tag.name, value: tag.id}))\n        }];\n        const formProps = {\n            method: 'post',\n            successFn() {\n                that.triggerAddModal(false);\n                that.loadData()\n            },\n            errorFn() {\n            },\n            action: interpolate(PATIENT_FILES, [this.props.match.params.id])\n        }\n        const tagsMenu = (\n            <div style={{\n                // width: 100,\n                boxShadow: '0 2px 4px #111',\n                border: '1px solid #bbb',\n                borderRadius: 2,\n                paddingBottom: '30px',\n                backgroundColor: 'white'\n            }}\n            >\n                <ul style={{listStyle: 'none', paddingInlineStart: 0, paddingTop: 10}}>\n                    {this.state.tags ? (\n                            <div>\n                                {this.state.tags.map((tag) => (\n                                    <li key={tag.id}>\n                                        <Checkbox\n                                          value={tag.id}\n                                          onChange={(e) => that.tagsCompleteToggle(tag.id, e.target.checked)}\n                                          checked={that.state.selectedTags[tag.id]}\n                                        >{tag.name}\n                                        </Checkbox>\n                                    </li>\n                                ))}\n                            </div>\n                        )\n                        : null}\n                </ul>\n                <span>\n                    <Button\n                      type=\"primary\"\n                      onClick={() => this.filesWithTags()}\n                      style={{float: \"right\", borderStyle: \"none\"}}\n                    >Done\n                    </Button>\n                </span>\n            </div>\n        );\n        const defaultFields = [{key: 'is_active', value: true}, {\n            key: 'patient',\n            value: this.props.currentPatient ? this.props.currentPatient.id : null\n        }, {key: 'practice', value: this.props.active_practiceId}];\n\n\n        return (\n            <Card\n              title=\"Files\"\n              extra={this.props.match.params.id ? (\n                    <Button.Group>\n                        <Link to={`/patient/${this.props.match.params.id}/emr/create-medicalCertificate`}>\n                            <Button\n                              type=\"primary\"\n                            >\n                                <Icon type=\"plus\" />&nbsp;Add Medical Certificate\n                            </Button>\n                        </Link>\n\n                        <Dropdown\n                          overlay={tagsMenu}\n                          trigger={['click']}\n                          placement=\"bottomLeft\"\n                          onVisibleChange={that.handleVisibleChange}\n                          visible={that.state.visibleTag}\n                        >\n                            <Button><Icon type=\"plus\" />Add/Remove File Tags</Button>\n                        </Dropdown>\n\n                        <Button onClick={() => this.triggerAddModal(true)}><Icon type=\"plus\" />Add</Button>\n                        <Button\n                          style={{marginRight: \"10px\"}}\n                          onClick={() => that.sendFiles()}\n                        >\n                            <Icon type=\"mail\" /> &nbsp; Send to patient\n                        </Button>\n                    </Button.Group>\n                ) : (\n                    <Button.Group>\n                        <Button\n                          type=\"primary\"\n                          style={{marginRight: \"10px\"}}\n                          onClick={() => this.props.togglePatientListModal(true)}\n                        >\n                            <Icon type=\"plus\" />&nbsp; Add Medical Certificate\n                        </Button>\n\n                        <Dropdown\n                          overlay={tagsMenu}\n                          trigger={['click']}\n                          placement=\"bottomLeft\"\n                          onVisibleChange={that.handleVisibleChange}\n                          visible={that.state.visibleTag}\n                        >\n\n                            <Button><Icon type=\"plus\" />Add/Remove File Tags</Button>\n                        </Dropdown>\n\n                        <Button\n                          type=\"primary\"\n                          style={{marginRight: \"10px\"}}\n                          onClick={() => this.props.togglePatientListModal(true)}\n                        >\n                            <Icon type=\"plus\" /> &nbsp; Add\n                        </Button>\n                    </Button.Group>\n                )}\n            >\n                <Row gutter={8}>\n                    <Col\n                      span={6}\n                      style={{\n                            height: 'calc(100vh - 55px)',\n                            overflow: 'auto',\n                            paddingRight: '10px',\n                            // backgroundColor: '#e3e5e6',\n                            borderRight: '1px solid #ccc'\n                        }}\n                    >\n                        <Radio.Group buttonStyle=\"solid\" defaultValue=\"all\" onChange={this.filterTags}>\n                            <h2>Uploaded Files</h2>\n                            <Radio.Button\n                              style={{width: '100%', backgroundColor: 'transparent', border: '0px'}}\n                              value={null}\n                            >\n                                All Files\n                            </Radio.Button>\n                            {this.state.tags.map(tag => (\n                                <Radio.Button\n                                  key={tag.id}\n                                  style={{width: '100%', backgroundColor: 'transparent', border: '0px'}}\n                                  value={tag.id}\n                                >\n                                    {tag.name}\n                                </Radio.Button>\n                            ))}\n\n                            <Radio.Button\n                              style={{width: '100%', backgroundColor: 'transparent', border: '0px'}}\n                              value=\"\"\n                            >\n                                Untagged Files\n                            </Radio.Button>\n                            <p><br /></p>\n\n                        </Radio.Group>\n\n                        <Radio.Group buttonStyle=\"solid\" defaultValue=\"\">\n                            <h2>Generated Files</h2>\n                            <Radio.Button\n                              key=\"0\"\n                              style={{width: '100%', backgroundColor: 'transparent', border: '0px'}}\n                              value=\"a\"\n                              onClick={() => this.loadMailedFiles()}\n                            >\n                                Emailed Files\n                            </Radio.Button>\n\n                            <Radio.Button\n                              key=\"1\"\n                              style={{width: '100%', backgroundColor: 'transparent', border: '0px'}}\n                              onClick={() => this.loadMedicalCertificate()}\n                            >\n                                Medical Leave Certificate\n                            </Radio.Button>\n                        </Radio.Group>\n                    </Col>\n                    <Col span={18}>\n                        <Row>\n                            {this.state.files.map(item => (\n                                <>\n                                    {item.newDate ? (\n                                        <Col span={24}>\n                                            <Affix top={20} offsetTop={30}><h2 style={{\n                                                marginLeft: '10px',\n                                                padding: '5px',\n                                                backgroundImage: 'linear-gradient(to right, #ddd , white)',\n                                                borderRadius: '4px'\n                                            }}\n                                            >{moment(item.created_at).format('LL')}\n                                                                           </h2>\n                                            </Affix>\n                                        </Col>\n                                    ) : null}\n                                    <Col span={8}>\n                                        <div\n                                            // onClick={() => this.showModal(item)}\n                                          style={{\n                                                width: '100%',\n                                                height: '150px',\n                                                border: '1px solid #bbb',\n                                                // background: '#fff url(\"' + makeFileURL(item.file_type) + '\") no-repeat center center',\n                                                backgroundSize: 'cover',\n                                                padding: 'auto',\n                                                overflow: 'hidden'\n\n                                            }}\n                                        >\n                                            <Checkbox\n                                              key={item.id}\n                                              disabled={(item.practice != this.props.active_practiceId)}\n                                              style={{\n                                                    margin: 10,\n                                                    position: 'absolute',\n                                                    top: 5,\n                                                    left: 5,\n                                                    boxShadow: '0 0px 5px #000 '\n                                                }}\n                                              onChange={(e) => that.filesCompleteToggle(item.id, e.target.checked)}\n                                              checked={that.state.selectedFiles[item.id]}\n                                            />\n\n                                            {findFileExtension(item.file_type) == PDF_FILE_EXTENSION ? (\n                                                <div\n                                                  style={{textAlign: 'center', paddingTop: 30, height: '100%'}}\n                                                  onClick={() => this.togglePDFModal(item)}\n                                                >\n                                                    <Icon type=\"file-pdf\" style={{fontSize: '56px', color: '#08c'}} />\n                                                    <h4>Preview Not Avaialable</h4>\n                                                </div>\n                                            ) : (\n                                                <ModalImage\n                                                  style={{border: \"3px solid red\"}}\n                                                    // small={makeFileURL(this.state.filesData.file_type)}\n                                                  large={makeFileURL(item.file_type)}\n                                                  small={makeFileURL(item.file_type)}\n                                                  alt={(\n                                                        <Button\n                                                          type=\"danger\"\n                                                          onClick={() => this.deleteFile(item)}\n                                                        >\n                                                            <Icon type=\"delete\" />\n                                                        </Button>\n                                                    )}\n                                                />\n                                            )}\n                                        </div>\n                                        <Card bodyStyle={{padding: 3}} style={{marginBottom: 15}}>\n                                            <Link to={`/patient/${item.patient_data.id}/emr/files/`}><h4>\n                                                <b>{item.patient_data.user.first_name}&nbsp;({item.patient_data.custom_id})</b>\n                                                                                                     </h4>\n                                            </Link>\n                                            <Tag><b>{item.practice_data ? item.practice_data.name : '--'}</b></Tag>\n                                        </Card>\n                                    </Col>\n                                </>\n                            ))}\n                        </Row>\n                        <Row>\n                            <Col span={24}>\n                                <InfiniteFeedLoaderButton\n                                  loaderFunction={() => this.loadData(that.state.loadMoreFiles)}\n                                  loading={this.state.loading}\n                                  hidden={!this.state.loadMoreFiles}\n                                />\n                            </Col>\n\n                        </Row>\n                        <Card title=\"Medical Certificate\">\n                            <List\n                              loading={this.state.loading}\n                              grid={{gutter: 16, column: 3}}\n                              dataSource={this.state.medicalCertificate}\n                              renderItem={item => (\n                                    <Card\n                                      style={{width: 600}}\n                                      actions={[<p>{`Issued on : ${item.date}`}</p>,\n                                            <a onClick={() => this.loadPDF(item.id)}><Icon type=\"printer\" /></a>,\n                                            <Popconfirm\n                                              title=\"Are you sure delete this item?\"\n                                              onConfirm={() => this.deleteMedicalCertificate(item)}\n                                              okText=\"Yes\"\n                                              cancelText=\"No\"\n                                            >\n                                                <Icon type=\"delete\" />\n                                            </Popconfirm>\n                                        ]}\n                                    >\n                                        <Meta\n                                          title={`${\"Medical Leave #\" + \"\"}${item.id}`}\n                                          description={`Excused From :${item.excused_duty_from} till ${item.excused_duty_to}`}\n                                        />\n                                    </Card>\n                                )}\n                            />\n                            <InfiniteFeedLoaderButton\n                              loaderFunction={() => this.loadData(that.state.loadMoreCertificate)}\n                              loading={this.state.loading}\n                              hidden={!this.state.loadMoreCertificate}\n                            />\n\n\n                        </Card>\n\n\n                    </Col>\n\n                </Row>\n                <Modal\n                  title={null}\n                  visible={this.state.visibleMail}\n                  onOk={this.sendMailToPatient}\n                  onCancel={this.mailModalClose}\n                  footer={[\n                        <Button key=\"back\" onClick={this.mailModalClose}>\n                            Cancel\n                        </Button>,\n                        <Button key=\"submit\" type=\"primary\" onClick={this.sendMailToPatient}>\n                            Send\n                        </Button>,\n                    ]}\n                >\n                    <p>Send Timeline To {_.get(this.props.currentPatient, 'user.first_name')} ?</p>\n                    <Input\n                      value={this.state.mail_to}\n                      placeholder=\"Email\"\n                      onChange={(e) => that.updateFormValue('mail_to', e.target.value)}\n                    />\n                </Modal>\n                <Modal\n                  visible={this.state.showAddModal}\n                  onCancel={() => this.triggerAddModal(false)}\n                  footer={null}\n                >\n                    <PatientFilesForm\n                      title=\"Add Files\"\n                      fields={fields}\n                      defaultValues={defaultFields}\n                      formProp={formProps}\n                    />\n                </Modal>\n                <Modal\n                  visible={this.state.showPDFFile}\n                  key={this.state.showPDFFile}\n                  centered\n                  width={1000}\n                  onCancel={() => this.togglePDFModal(false)}\n                  footer={null}\n                  style={{padding: 0}}\n                  title={(\n<h4><span\n  style={{color: 'red', textAlign: 'right'}}\n  onClick={() => this.deleteFile(this.state.showPDFFile)}\n>DELETE\n    </span>\n</h4>\n)}\n                >\n                    {this.state.showPDFFile ? (\n                        <iframe\n                          src={makeFileURL(this.state.showPDFFile.file_type)}\n                          frameBorder=\"0\"\n                          style={{width: '100%', minHeight: '80vh'}}\n                        />\n                      ) : null}\n                </Modal>\n            </Card>\n        )\n\n\n        return (\n            <Card title=\"Files\">\n                <Row gutter={8}>\n                    <Col\n                      span={6}\n                      style={{\n                            height: 'calc(100vh - 55px)',\n                            overflow: 'auto',\n                            paddingRight: '10px',\n                            // backgroundColor: '#e3e5e6',\n                            borderRight: '1px solid #ccc'\n                        }}\n                    >\n                        <Radio.Group buttonStyle=\"solid\" defaultValue=\"all\" onChange={this.filterTags}>\n                            <h2>Uploaded Files</h2>\n                            <Radio.Button\n                              style={{width: '100%', backgroundColor: 'transparent', border: '0px'}}\n                              value={null}\n                            >\n                                All Files\n                            </Radio.Button>\n                            {this.state.tags.map(tag => (\n                                <Radio.Button\n                                  key={tag.id}\n                                  style={{width: '100%', backgroundColor: 'transparent', border: '0px'}}\n                                  value={tag.id}\n                                >\n                                    {tag.name}\n                                </Radio.Button>\n                            ))}\n\n                            <Radio.Button\n                              style={{width: '100%', backgroundColor: 'transparent', border: '0px'}}\n                              value=\"\"\n                            >\n                                Untagged Files\n                            </Radio.Button>\n                            <p><br /></p>\n\n                        </Radio.Group>\n\n                        <Radio.Group buttonStyle=\"solid\" defaultValue=\"\">\n                            <h2>Generated Files</h2>\n                            <Radio.Button\n                              style={{width: '100%', backgroundColor: 'transparent', border: '0px'}}\n                              value=\"b\"\n                              onClick={() => this.loadMailedFiles()}\n                            >\n                                Emailed Files\n                            </Radio.Button>\n\n                            <Radio.Button\n                              style={{width: '100%', backgroundColor: 'transparent', border: '0px'}}\n                              onClick={() => this.loadMedicalCertificate()}\n                              value=''\n                            >\n                                Medical Leave Certificate\n                            </Radio.Button>\n                        </Radio.Group>\n                    </Col>\n                    <Col span={18}>\n                        <Row>\n                            {this.state.files.map(item => (\n                                <>\n                                    {item.newDate ? (\n                                        <Col span={24}>\n                                            <Affix top={20} offsetTop={30}><h2 style={{\n                                                marginLeft: '10px',\n                                                padding: '5px',\n                                                backgroundImage: 'linear-gradient(to right, #ddd , white)',\n                                                borderRadius: '4px'\n                                            }}\n                                            >{moment(item.created_at).format('LL')}\n                                                                           </h2>\n                                            </Affix>\n                                        </Col>\n                                    ) : null}\n                                    <Col span={8}>\n                                        <div\n                                            // onClick={() => this.showModal(item)}\n                                          style={{\n                                                width: '100%',\n                                                height: '150px',\n                                                border: '1px solid #bbb',\n                                                // background: '#fff url(\"' + makeFileURL(item.file_type) + '\") no-repeat center center',\n                                                backgroundSize: 'cover',\n                                                padding: 'auto',\n                                                overflow: 'hidden'\n\n                                            }}\n                                        >\n                                            <Checkbox\n                                              key={item.id}\n                                              disabled={(item.practice != this.props.active_practiceId)}\n                                              style={{\n                                                    margin: 10,\n                                                    position: 'absolute',\n                                                    top: 5,\n                                                    left: 5,\n                                                    boxShadow: '0 0px 5px #000 '\n                                                }}\n                                              onChange={(e) => that.filesCompleteToggle(item.id, e.target.checked)}\n                                              checked={that.state.selectedFiles[item.id]}\n                                            />\n                                            <ModalImage\n                                              style={{border: \"3px solid red\"}}\n                                                // small={makeFileURL(this.state.filesData.file_type)}\n                                              large={makeFileURL(item.file_type)}\n                                              small={makeFileURL(item.file_type)}\n                                              alt={(\n                                                    <Button\n                                                      type=\"danger\"\n                                                      onClick={() => this.deleteFile(item)}\n                                                    >\n                                                        <Icon type=\"delete\" />\n                                                    </Button>\n                                                )}\n                                            />\n                                        </div>\n                                        <Card bodyStyle={{padding: 3}} style={{marginBottom: 15}}>\n                                            <Link to={`/patient/${item.patient_data.id}/emr/files/`}><h4>\n                                                <b>{item.patient_data.user.first_name}&nbsp;({item.patient_data.custom_id})</b>\n                                                                                                     </h4>\n                                            </Link>\n                                            <Tag><b>{item.practice_data ? item.practice_data.name : '--'}</b></Tag>\n                                        </Card>\n                                    </Col>\n                                </>\n                            ))}\n                        </Row>\n                        <Row>\n                            <Col span={24}>\n                                <InfiniteFeedLoaderButton\n                                  loaderFunction={() => this.loadData(that.state.loadMoreFiles)}\n                                  loading={this.state.loading}\n                                  hidden={!this.state.loadMoreFiles}\n                                />\n                            </Col>\n                        </Row>\n                        <Card title=\"Medical Certificate\">\n                            <List\n                              loading={this.state.loading}\n                              grid={{gutter: 16, column: 3}}\n                              dataSource={this.state.medicalCertificate}\n                              renderItem={item => (\n                                    <Card\n                                      style={{width: 600}}\n                                      actions={[<p>{`Issued on : ${item.date}`}</p>,\n                                            <a onClick={() => this.loadPDF(item.id)}><Icon type=\"printer\" /></a>,\n                                            <Popconfirm\n                                              title=\"Are you sure delete this item?\"\n                                              onConfirm={() => this.deleteMedicalCertificate(item)}\n                                              okText=\"Yes\"\n                                              cancelText=\"No\"\n                                            >\n                                                <Icon type=\"delete\" />\n                                            </Popconfirm>\n                                        ]}\n                                    >\n                                        <Meta\n                                          title={`${\"Medical Leave #\" + \"\"}${item.id}`}\n                                          description={`Excused From :${item.excused_duty_from} till ${item.excused_duty_to}`}\n                                        />\n                                    </Card>\n                                )}\n                            />\n                            <InfiniteFeedLoaderButton\n                              loaderFunction={() => this.loadMedicalCertificate(that.state.loadMoreCertificate)}\n                              loading={this.state.loading}\n                              hidden={!this.state.loadMoreCertificate}\n                            />\n                        </Card>\n\n\n                    </Col>\n\n                </Row>\n                <Modal\n                  visible={this.state.showAddModal}\n                  onCancel={() => this.triggerAddModal(false)}\n                  footer={null}\n                >\n                    <PatientFilesForm\n                      title=\"Add Files\"\n                      fields={fields}\n                      defaultValues={defaultFields}\n                      formProp={formProps}\n                    />\n                </Modal>\n            </Card>\n        )\n\n\n    }\n}\n\nexport default PatientFiles;\n","import React from \"react\";\nimport {Route} from \"react-router\";\n\nimport {Button, Card, Form, Icon, Row} from \"antd\";\nimport {Redirect} from 'react-router-dom'\nimport moment from 'moment';\nimport DynamicFieldsForm from \"../../common/DynamicFieldsForm\";\nimport {\n    CHECKBOX_FIELD,\n    DATE_PICKER,\n    SINGLE_CHECKBOX_FIELD,\n    NUMBER_FIELD,\n    SUCCESS_MSG_TYPE,\n    INPUT_FIELD,\n    RADIO_FIELD,\n    SELECT_FIELD\n} from \"../../../constants/dataKeys\";\nimport {\n    PRESCRIPTIONS_API,\n    DRUG_CATALOG,\n    ALL_PRESCRIPTIONS_API,\n    INVOICES_API,\n    PROCEDURE_CATEGORY, TAXES, PATIENT_CLINIC_NOTES_API\n} from \"../../../constants/api\";\nimport {getAPI, interpolate, displayMessage} from \"../../../utils/common\";\n\n\nclass AddClinicNotes extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            redirect: false,\n            drug_catalog: this.props.drug_catalog ? this.props.drug_catalog : null,\n            procedure_category: this.props.procedure_category ? this.props.procedure_category : null,\n            taxes_list: this.props.taxes_list ? this.props.taxes_list : null,\n            editClinicNotes: this.props.editClinicNotes ? this.props.editClinicNotes : null,\n\n        }\n        this.changeRedirect = this.changeRedirect.bind(this);\n        console.log(\"Working or not\");\n\n    }\n\n    componentDidMount() {\n\n    }\n\n    loadDrugCatalog() {\n        const that = this;\n        const successFn = function (data) {\n            that.setState({\n                drug_catalog: data\n            })\n\n        }\n        const errorFn = function () {\n\n        }\n        getAPI(interpolate(DRUG_CATALOG, [this.props.active_practiceId]), successFn, errorFn)\n    }\n\n    loadProcedureCategory() {\n        const that = this;\n        const successFn = function (data) {\n            that.setState({\n                procedure_category: data\n            })\n\n        }\n        const errorFn = function () {\n\n        }\n        getAPI(interpolate(PROCEDURE_CATEGORY, [this.props.active_practiceId]), successFn, errorFn);\n    }\n\n    loadTaxes() {\n        const that = this;\n        const successFn = function (data) {\n            console.log(\"get table\");\n            that.setState({\n                taxes_list: data,\n            })\n        };\n        const errorFn = function () {\n        };\n        getAPI(interpolate(TAXES, [this.props.active_practiceId]), successFn, errorFn);\n\n    }\n\n    changeRedirect() {\n        const redirectVar = this.state.redirect;\n        this.setState({\n            redirect: !redirectVar,\n        });\n    }\n\n    render() {\n\n        const fields = [{\n            label: \"Name\",\n            key: \"name\",\n            required: true,\n            initialValue: this.state.editClinicNotes ? this.state.editClinicNotes.name : null,\n            type: INPUT_FIELD\n        }, {\n            label: \"Chief Complaints\",\n            key: \"chief_complaints\",\n            initialValue: this.state.editClinicNotes ? this.state.editClinicNotes.chief_complaints : null,\n            type: INPUT_FIELD\n        }, {\n            label: \"Investigations\",\n            key: \"investigations\",\n            initialValue: this.state.editClinicNotes ? this.state.editClinicNotes.investigations : null,\n            type: INPUT_FIELD,\n        }, {\n            label: \"Diagnosis\",\n            key: \"diagnosis\",\n            initialValue: this.state.editClinicNotes ? this.state.editClinicNotes.diagnosis : null,\n            type: INPUT_FIELD,\n        }, {\n            label: \"Notes\",\n            key: \"notes\",\n            initialValue: this.state.editClinicNotes ? this.state.editClinicNotes.notes : null,\n            type: INPUT_FIELD,\n        }, {\n            label: \"Observations\",\n            key: \"observations\",\n            initialValue: this.state.editClinicNotes ? this.state.editClinicNotes.observations : null,\n            type: INPUT_FIELD,\n        }];\n\n\n        let editformProp;\n        const TestFormLayout = Form.create()(DynamicFieldsForm);\n        const that = this;\n        const formProp = {\n            successFn (data) {\n                displayMessage(SUCCESS_MSG_TYPE, \"success\")\n                if (that.props.loadData)\n                    that.props.loadData()\n                console.log(data);\n            },\n            errorFn () {\n\n            },\n            action: interpolate(PATIENT_CLINIC_NOTES_API, [this.props.match.params.id]),\n            method: \"post\",\n        }\n        let defaultValues = [{key: 'is_active', value: true}]\n        if (this.state.editClinicNotes) {\n            defaultValues = [{key: 'is_active', value: true}, {\"key\": \"id\", \"value\": this.state.editClinicNotes.id}];\n        }\n        return (\n<Row>\n            <Card>\n                <Route\n                  exact\n                  path='/patient/:id/emr/clinicnotes/edit'\n                  render={() => (this.state.editClinicNotes ? (\n                           <TestFormLayout\n                             defaultValues={defaultValues}\n                             title=\"Edit Clinic notes\"\n                             changeRedirect={this.changeRedirect}\n                             formProp={formProp}\n                             fields={fields}\n                           />\n                         ) :\n                           <Redirect to={`/patient/${  this.props.match.params.id  }/billing/invoices`} />)}\n                />\n                <Route\n                  exact\n                  path='/patient/:id/emr/clinicnotes/add'\n                  render={() => (\n<TestFormLayout\n  title=\"Add Clinic Notes\"\n  changeRedirect={this.changeRedirect}\n  formProp={formProp}\n  fields={fields}\n/>\n)}\n                />\n\n\n            </Card>\n            {this.state.redirect && <Redirect to={`/patient/${  this.props.match.params.id  }/emr/clinicnotes`} />}\n</Row>\n)\n\n    }\n}\n\nexport default AddClinicNotes;\n","import React from \"react\";\nimport {\n    Row,\n    Card,\n    Col,\n    Form,\n    Tabs,\n    Button,\n    Icon,\n    List,\n    Input,\n    Divider,\n    Affix,\n    DatePicker,\n    Menu,\n    Dropdown,\n    Modal\n} from 'antd';\nimport moment from \"moment\";\nimport {displayMessage, getAPI, interpolate, postAPI} from \"../../../utils/common\";\nimport {\n    EMR_COMPLAINTS,\n    EMR_DIAGNOSES,\n    EMR_INVESTIGATIONS, EMR_MEDICATION,\n    EMR_OBSERVATIONS,\n    EMR_TREATMENTNOTES, PATIENT_CLINIC_NOTES_API\n} from \"../../../constants/api\";\nimport DynamicFieldsForm from \"../../common/DynamicFieldsForm\";\nimport {INPUT_FIELD, SUCCESS_MSG_TYPE} from \"../../../constants/dataKeys\";\nimport {CUSTOM_STRING_SEPERATOR} from \"../../../constants/hardData\";\nimport {loadDoctors} from \"../../../utils/clinicUtils\";\n\nconst {TabPane} = Tabs;\nconst tabLists = ['Complaints', 'Observations', 'Diagnoses', 'Investigations', 'Notes','Recent Medication'];\nconst tabResourcesAPI = {\n    'Complaints': EMR_COMPLAINTS,\n    'Observations': EMR_OBSERVATIONS,\n    'Diagnoses': EMR_DIAGNOSES,\n    'Investigations': EMR_INVESTIGATIONS,\n    'Notes': EMR_TREATMENTNOTES,\n    'Recent Medication' : EMR_MEDICATION\n};\nlet id = 0;\n\nclass AddClinicNotesDynamic extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            resourceList: {},\n            filteredResourceList: {},\n            filterStrings: {},\n            practiceDoctors: [],\n            selectedDoctor: {},\n            selectedDate: moment(),\n            resourceAddModal: null,\n            selectedTab: 'Complaints',\n            editClinicNotes: this.props.editClinicNotes ? this.props.editClinicNotes : null,\n\n        }\n    }\n\n    componentDidMount() {\n        loadDoctors(this);\n        this.loadRequiredResources(interpolate(EMR_COMPLAINTS, [this.props.active_practiceId]), 'Complaints');\n        this.loadRequiredResources(interpolate(EMR_OBSERVATIONS, [this.props.active_practiceId]), 'Observations');\n        this.loadRequiredResources(interpolate(EMR_DIAGNOSES, [this.props.active_practiceId]), 'Diagnoses');\n        this.loadRequiredResources(interpolate(EMR_INVESTIGATIONS, [this.props.active_practiceId]), 'Investigations');\n        this.loadRequiredResources(interpolate(EMR_TREATMENTNOTES, [this.props.active_practiceId]), 'Notes');\n        this.loadRequiredResources(interpolate(EMR_MEDICATION, [this.props.active_practiceId]), 'Recent Medication');\n        if (this.state.editClinicNotes) {\n            this.setInitialData();\n        }\n    }\n\n    setInitialData = () => {\n        const that = this;\n        const initialData = this.state.editClinicNotes;\n        if (initialData.chief_complaints)\n            initialData.chief_complaints.split(CUSTOM_STRING_SEPERATOR).forEach(str => setTimeout(function () {\n                if (str.length)\n                    that.addValues('Complaints', str)\n            }, 500));\n        if (initialData.investigations)\n            initialData.investigations.split(CUSTOM_STRING_SEPERATOR).forEach(str => setTimeout(function () {\n                if (str.length)\n                    that.addValues('Investigations', str)\n            }, 500));\n        if (initialData.diagnosis)\n            initialData.diagnosis.split(CUSTOM_STRING_SEPERATOR).forEach(str => setTimeout(function () {\n                if (str.length)\n                    that.addValues('Diagnoses', str)\n            }, 500));\n        if (initialData.notes)\n            initialData.notes.split(CUSTOM_STRING_SEPERATOR).forEach(str => setTimeout(function () {\n                if (str.length)\n                    that.addValues('Notes', str)\n            }, 500));\n        if (initialData.observations)\n            initialData.observations.split(CUSTOM_STRING_SEPERATOR).forEach(str => setTimeout(function () {\n                if (str.length)\n                    that.addValues('Observations', str)\n            }, 500));\n        if (initialData.medication)\n            initialData.medication.split(CUSTOM_STRING_SEPERATOR).forEach(str => setTimeout(function () {\n                if (str.length)\n                    that.addValues('Recent Medication', str)\n            }, 500));\n\n    }\n\n    loadRequiredResources = (API, key) => {\n        const that = this;\n        const successFn = function (data) {\n            that.setState(function (prevState) {\n                const newResources = {...prevState.resourceList, [key]: data}\n                return {\n                    resourceList: newResources,\n                    filteredResourceList: newResources,\n                    filterStrings: {}\n                }\n            })\n        }\n        const errorFn = function () {\n            console.log(`${key  } fetching error`);\n        }\n        getAPI(API, successFn, errorFn);\n    }\n\n    add = (tab) => {\n        const {form} = this.props;\n        // can use data-binding to get\n        const keys = form.getFieldValue(tab);\n        const nextKeys = keys.concat(++id);\n        // can use data-binding to set\n        // important! notify form to detect changes\n        form.setFieldsValue({\n            [tab]: nextKeys,\n        });\n    };\n\n    remove = (tab, k) => {\n        const {form} = this.props;\n        // can use data-binding to get\n        const keys = form.getFieldValue(tab);\n        // We need at least one passenger\n        if (keys.length === 1) {\n            return;\n        }\n\n        // can use data-binding to set\n        form.setFieldsValue({\n            [tab]: keys.filter(key => key !== k),\n        });\n    };\n\n    addValues = (tab, value) => {\n        const {form} = this.props;\n        // can use data-binding to get\n        const keys = form.getFieldValue(tab);\n        const nextKeys = keys.concat(++id);\n        // can use data-binding to set\n        // important! notify form to detect changes\n        form.setFieldsValue({\n            [tab]: nextKeys,\n            [`field[${keys[keys.length - 1]}]`]: value,\n        });\n    }\n\n    changeValues = (tab, id) => {\n        const {form} = this.props;\n        // can use data-binding to get\n        const keys = form.getFieldValue(tab);\n        if (keys.indexOf(id) == keys.length - 1) {\n            this.add(tab);\n        }\n    }\n\n    toggleModal = (option) => {\n        let prevsOption = null;\n        const that = this;\n        this.setState(function (prevState) {\n            console.log(prevState.resourceAddModal);\n            if (prevState.resourceAddModal)\n                prevsOption = prevState.resourceAddModal;\n            return {resourceAddModal: option}\n        }, function () {\n            if (prevsOption) {\n                that.loadRequiredResources(interpolate(tabResourcesAPI[prevsOption], [that.props.active_practiceId]), prevsOption);\n            }\n        });\n\n    }\n\n    searchValues = (type, value) => {\n        const that = this;\n        this.setState(function (prevState) {\n            const searchValues = {...prevState.searchStrings};\n            searchValues[type] = value;\n            return {searchStrings: searchValues}\n        }, function () {\n            that.filterValues(type);\n        });\n    }\n\n    filterValues = (type) => {\n        this.setState(function (prevState) {\n            let filteredItemOfGivenType = [];\n            if (prevState.resourceList[type]) {\n                if (prevState.searchStrings[type]) {\n                    prevState.resourceList[type].forEach(function (item) {\n                        if (item.name && item.name\n                            .toString()\n                            .toLowerCase()\n                            .includes(prevState.searchStrings[type].toLowerCase())) {\n                            filteredItemOfGivenType.push(item);\n                        }\n                    });\n                } else {\n                    filteredItemOfGivenType = prevState.resourceList[type];\n                }\n            }\n            return {\n                filteredResourceList: {...prevState.filteredResourceList, [type]: filteredItemOfGivenType}\n            }\n        });\n    }\n\n    handleSubmit = (e) => {\n        const that = this;\n        e.preventDefault();\n        this.props.form.validateFieldsAndScroll((err, values) => {\n            if (!err) {\n                const reqData = {};\n                reqData.chief_complaints = values.Complaints.map(id => values.field[id]).join(CUSTOM_STRING_SEPERATOR);\n                reqData.investigations = values.Investigations.map(id => values.field[id]).join(CUSTOM_STRING_SEPERATOR);\n                reqData.diagnosis = values.Diagnoses.map(id => values.field[id]).join(CUSTOM_STRING_SEPERATOR);\n                reqData.notes = values.Notes.map(id => values.field[id]).join(CUSTOM_STRING_SEPERATOR);\n                reqData.observations = values.Observations.map(id => values.field[id]).join(CUSTOM_STRING_SEPERATOR);\n                reqData.medication = values['Recent Medication'].map(id => values.field[id]).join(CUSTOM_STRING_SEPERATOR);\n                reqData.patient = that.props.match.params.id;\n                reqData.practice = that.props.active_practiceId;\n                reqData.doctor = that.state.selectedDoctor && that.state.selectedDoctor.id ? that.state.selectedDoctor.id : that.state.selectedDoctor;\n                reqData.date = that.state.selectedDate && moment(that.state.selectedDate).isValid() ? moment(that.state.selectedDate).format('YYYY-MM-DD') : null\n                if (that.state.editClinicNotes)\n                    reqData.id = that.state.editClinicNotes.id;\n                const successFn = function (data) {\n                    if (that.props.loadData){\n                        that.props.loadData();\n                    }\n\n                    if (that.props.history){\n                        that.props.history.replace(`/patient/${  that.props.match.params.id  }/emr/clinicnotes/`);\n                    }\n\n                };\n                const errorFn = function () {\n\n                }\n                postAPI(interpolate(PATIENT_CLINIC_NOTES_API, [this.props.match.params.id]), reqData, successFn, errorFn);\n            }\n        });\n\n    }\n\n    changeTab = (e, tab) => {\n        // this.setState({\n        //     selectedTab: tab\n        // });\n\n\n    }\n\n    selectDoctor = (doctor) => {\n        this.setState({\n            selectedDoctor: doctor\n        })\n    }\n\n    selectedDate = (date) => {\n        this.setState({\n            selectedDate: date\n        })\n    }\n\n    render() {\n        const that = this;\n        const {getFieldDecorator, getFieldValue} = this.props.form;\n        const formItemLayout = {\n            labelCol: {\n                xs: {span: 24},\n                sm: {span: 4},\n            },\n            wrapperCol: {\n                xs: {span: 24},\n                sm: {span: 20},\n            },\n        };\n        const keysObject = {};\n        tabLists.forEach(function (tab) {\n            getFieldDecorator(tab, {initialValue: [++id]});\n            keysObject[tab] = getFieldValue(tab);\n        });\n\n\n        const keys = keysObject;\n        const ResourceAddForm = Form.create()(DynamicFieldsForm);\n        return (\n<Card>\n            <Row>\n                <Col span={18}>\n                    <h2>Clinical Notes</h2>\n                    <Form onSubmit={this.handleSubmit}>\n                        {tabLists.map(tab => (\n                            <div>\n                                <Divider style={{margin: 5}}>{tab}</Divider>\n                                <div style={{\n                                    backgroundColor: (tab == that.state.selectedTab ? '#ddd' : 'initial'),\n                                    padding: 10\n                                }}\n                                >\n                                    {keys[tab].map((k, index) => (\n                                        <Form.Item\n                                          {...formItemLayout}\n                                          label={`${tab  } ${  index + 1}`}\n                                          key={k}\n                                        >\n                                            {getFieldDecorator(`field[${k}]`, {\n                                                validateTrigger: ['onChange', 'onBlur'],\n                                                rules: [{\n                                                    whitespace: true,\n                                                }],\n                                            })(<Input\n                                              placeholder={tab}\n                                              style={{width: '60%', marginRight: 8}}\n                                              key={k}\n                                              onFocus={(e) => that.changeTab(e, tab)}\n                                              onChange={() => that.changeValues(tab, k)}\n                                            />)}\n                                            {keys[tab].length - 1 != index ? (\n                                                <Button\n                                                  shape=\"circle\"\n                                                  type=\"danger\"\n                                                  size=\"small\"\n                                                  icon=\"delete\"\n                                                  onClick={() => this.remove(tab, k)}\n                                                />\n                                            ) : null}\n                                        </Form.Item>\n                                    ))}\n                                </div>\n                            </div>\n                          )\n                        )}\n                        <Affix offsetBottom={0}>\n                            <Card>\n                                <Row>\n                                    <span>by &nbsp;&nbsp;</span>\n                                    <Dropdown\n                                      placement=\"topCenter\"\n                                      overlay={(\n<Menu>\n                                        {this.state.practiceDoctors.map(doctor => (\n                                            <Menu.Item key=\"0\">\n                                                <a onClick={() => this.selectDoctor(doctor)}>{doctor.user.first_name}</a>\n                                            </Menu.Item>\n                                          ))}\n</Menu>\n)}\n                                      trigger={['click']}\n                                    >\n                                        <a className=\"ant-dropdown-link\" href=\"#\">\n                                            <b>\n                                                {this.state.selectedDoctor.user ? this.state.selectedDoctor.user.first_name : 'No DOCTORS Found'}\n                                            </b>\n                                        </a>\n                                    </Dropdown>\n                                    <span> &nbsp;&nbsp;on&nbsp;&nbsp;</span>\n                                    <DatePicker\n                                      value={this.state.selectedDate}\n                                      allowClear={false}\n                                      onChange={(value) => this.selectedDate(value)}\n                                      format=\"DD-MM-YYYY\"\n                                    />\n                                    <Button type=\"primary\" htmlType=\"submit\" style={{float: 'right', margin: 5}}>\n                                        Save\n                                    </Button>\n                                    {that.props.history ? (\n                                        <Button\n                                          style={{margin: 5, float: 'right'}}\n                                          onClick={() => that.props.history.goBack()}\n                                        >\n                                            Cancel\n                                        </Button>\n                                      ) : null}\n                                </Row>\n                                <Row>\n                                    Next Follow up\n                                </Row>\n                            </Card>\n                        </Affix>\n                    </Form>\n                </Col>\n                <Col span={6}>\n                    <Tabs type=\"card\">\n                        {tabLists.map(tabList => (\n<TabPane tab={tabList} key={tabList}>\n                            <div style={{padding: 5}}>\n                                <Button type=\"primary\" block size=\"small\" onClick={() => that.toggleModal(tabList)}>\n                                    <Icon type=\"plus\" />Add&nbsp;{tabList}\n                                </Button>\n                                <div style={{backgroundColor: '#ddd', padding: 8}}>\n                                    <Input.Search\n                                      placeholder={`Search in ${  tabList  } ...`}\n                                      onChange={e => this.searchValues(tabList, e.target.value)}\n                                    />\n                                </div>\n                                <List\n                                  key={tabList}\n                                  size=\"small\"\n                                  dataSource={that.state.filteredResourceList[tabList]}\n                                  renderItem={item => (\n<List.Item\n  key={item.id}\n  onClick={() => this.addValues(tabList, item.name)}\n>\n                                          {item.name}\n</List.Item>\n)}\n                                />\n                            </div>\n</TabPane>\n))}\n                    </Tabs>\n                </Col>\n                <Modal\n                  visible={!!this.state.resourceAddModal}\n                  onCancel={() => that.toggleModal(null)}\n                  title={`Add ${  this.state.resourceAddModal}`}\n                  footer={null}\n                >\n                    {this.state.resourceAddModal ? (\n                        <ResourceAddForm\n                          fields={[{\n                                label: this.state.resourceAddModal,\n                                required: true,\n                                type: INPUT_FIELD,\n                                key: 'name'\n                            }]}\n                          defaultValues={[{key: 'practice', value: this.props.active_practiceId}]}\n                          formProp={{\n                                method: 'post',\n                                action: interpolate(tabResourcesAPI[this.state.resourceAddModal], [this.props.active_practiceId]),\n                                successFn () {\n                                    that.toggleModal(null);\n                                    displayMessage(SUCCESS_MSG_TYPE, `${that.state.resourceAddModal  } added successfully!!`);\n                                },\n                                errorFn (err) {\n                                    console.log(err);\n                                }\n                            }}\n                        />\n                      ) : null}\n                </Modal>\n            </Row>\n</Card>\n)\n    }\n}\n\nexport default Form.create()(AddClinicNotesDynamic)\n","import {\n    Button,\n    Card,\n    Checkbox,\n    Divider,\n    Icon,\n    Table,\n    Dropdown,\n    Menu,\n    Col,\n    Row,\n    Tag,\n    Spin,\n    Tooltip,\n    Avatar,\n    Form, Input\n,Modal} from \"antd\";\nimport React from \"react\";\nimport moment from \"moment\";\nimport {Route, Switch} from \"react-router\";\nimport {Link, Redirect} from \"react-router-dom\";\nimport * as _ from 'lodash'\nimport {getAPI, interpolate, postAPI, putAPI} from \"../../../utils/common\";\nimport {INVOICES_API, PATIENT_CLINIC_NOTES_API, CLINIC_NOTES_PDF} from \"../../../constants/api\";\nimport AddClinicNotes from \"./AddClinicNotes\";\nimport {CUSTOM_STRING_SEPERATOR} from \"../../../constants/hardData\";\nimport AddClinicNotesDynamic from \"./AddClinicNotesDynamic\";\n\nimport {BACKEND_BASE_URL} from \"../../../config/connect\";\nimport InfiniteFeedLoaderButton from \"../../common/InfiniteFeedLoaderButton\";\nimport {sendMail} from  \"../../../utils/clinicUtils\";\n\nconst {confirm} = Modal;\n\nclass PatientClinicNotes extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            currentPatient: this.props.currentPatient,\n            active_practiceId: this.props.active_practiceId,\n            clinicNotes: [],\n            editClinicNotes: null,\n            loading: true,\n            mail_to:null,\n\n        }\n        this.loadClinicNotes = this.loadClinicNotes.bind(this);\n        this.editClinicNotesData = this.editClinicNotesData.bind(this);\n    }\n\n    componentDidMount() {\n        // if (this.props.match.params.id) {\n        this.loadClinicNotes();\n        // }\n\n    }\n\n    loadClinicNotes(page = 1) {\n        const that = this;\n        const successFn = function (data) {\n            that.setState(function (prevState) {\n                if (data.current == 1)\n                    return {\n                        clinicNotes: [...data.results],\n                        next: data.next,\n                        loading: false\n                    }\n                return {\n                    clinicNotes: [...prevState.clinicNotes, ...data.results],\n                    next: data.next,\n                    loading: false\n                }\n            })\n        }\n        const errorFn = function () {\n            that.setState({\n                loading: false\n            })\n\n        }\n        const apiParams = {\n            page,\n            practice: this.props.active_practiceId\n        };\n        if (this.props.match.params.id) {\n            apiParams.patient = this.props.match.params.id;\n        }\n        if (this.props.showAllClinic && this.props.match.params.id) {\n            delete (apiParams.practice)\n        }\n\n        getAPI(PATIENT_CLINIC_NOTES_API, successFn, errorFn, apiParams)\n\n    }\n\n\n    editClinicNotesData(record) {\n        this.setState({\n            editClinicNotes: record,\n            loading: false\n        });\n        const {id} = this.props.match.params\n        this.props.history.push(`/patient/${  id  }/emr/clinicnotes/edit`)\n\n    }\n\n    deleteClinicNote(record) {\n        const that = this;\n        confirm({\n            title: 'Are you sure to delete this item?',\n            okText: 'Yes',\n            okType: 'danger',\n            cancelText: 'No',\n            onOk() {\n                const reqData = {id: record.id, patient: record.patient, is_active: false};\n                const successFn = function (data) {\n                    that.loadClinicNotes();\n                }\n                const errorFn = function () {\n                }\n                postAPI(interpolate(PATIENT_CLINIC_NOTES_API, [that.props.match.params.id]), reqData, successFn, errorFn);\n            },\n            onCancel() {\n                console.log('Cancel');\n            },\n        });\n    }\n\n    loadPDF(id) {\n        const that = this;\n        const successFn = function (data) {\n            if (data.report)\n                window.open(BACKEND_BASE_URL + data.report);\n        }\n        const errorFn = function () {\n\n        }\n        getAPI(interpolate(CLINIC_NOTES_PDF, [id]), successFn, errorFn);\n    }\n\n    updateFormValue =(type,value)=>{\n        this.setState({\n            [type]: value\n        })\n    };\n\n    mailModalOpen =() =>{\n        this.setState({\n            visibleMail:true\n        })\n    };\n\n    mailModalClose =() =>{\n        this.setState({\n            visibleMail:false\n        })\n    };\n\n    sendPatientMail =(clinicalNotes)=>{\n        this.mailModalOpen()\n        this.setState({\n            patientName:_.get(clinicalNotes,'patient.user.first_name'),\n            clinicId:_.get(clinicalNotes,'id'),\n            mail_to:_.get(clinicalNotes,'patient.user.email')\n        })\n\n    };\n\n    sendMailToPatient =()=>{\n        const {mail_to ,clinicId } = this.state;\n        const apiParams ={\n            mail_to,\n        }\n        sendMail(interpolate(CLINIC_NOTES_PDF,[clinicId]),apiParams)\n        this.mailModalClose();\n    }\n\n    render() {\n\n        const that = this;\n        const columns = [{\n            title: 'Time',\n            dataIndex: 'created_at',\n            key: 'name',\n            render: created_at => <span>{moment(created_at).format('LLL')}</span>,\n        }, {\n            title: 'Name',\n            dataIndex: 'name',\n            key: 'name',\n        }, {\n            title: 'Chief Complaints',\n            dataIndex: 'chief_complaints',\n            key: 'chief_complaints',\n        }, {\n            title: 'Investigations',\n            dataIndex: 'investigations',\n            key: 'investigations',\n        }, {\n            title: 'Diagnosis',\n            dataIndex: 'diagnosis',\n            key: 'diagnosis',\n        }, {\n            title: 'Notes',\n            dataIndex: 'notes',\n            key: 'notes',\n        }, {\n            title: 'Observations',\n            dataIndex: 'observations',\n            key: 'observations',\n        }, {\n            title: 'Action',\n            key: 'action',\n            render: (text, record) => (\n                <span>\n                <a onClick={() => this.editClinicNotesData(record)}>Edit</a>\n                <Divider type=\"vertical\" />\n                <a href=\"javascript:;\">Delete</a>\n                </span>\n            ),\n        }];\n\n        if (this.props.match.params.id) {\n            return (\n<div><Switch>\n                <Route\n                  exact\n                  path='/patient/:id/emr/clinicnotes/add'\n                  render={(route) => (\n<AddClinicNotesDynamic\n  {...route}\n  {...this.props}\n  loadData={this.loadClinicNotes}\n/>\n)}\n                />\n                <Route\n                  exact\n                  path='/patient/:id/emr/clinicnotes/edit'\n                  render={(route) => (this.state.editClinicNotes ? (\n<AddClinicNotesDynamic\n  {...this.state}\n  {...route}\n  loadData={this.loadClinicNotes}\n/>\n) :\n                           <Redirect to={`/patient/${  that.props.match.params.id  }/emr/clinicnotes/`} />)}\n                />\n                <Route>\n                    <div>\n                        <Card\n                          bodyStyle={{padding: 0}}\n                          title={this.state.currentPatient ? `${this.state.currentPatient.user.first_name  } ClinicNotes` : \"ClinicNotes\"}\n                          extra={(\n<Button.Group>\n                                  <Link to={`/patient/${  this.props.match.params.id  }/emr/clinicnotes/add`}>\n                                      <Button type=\"primary\">\n                                          <Icon type=\"plus\" />Add\n                                      </Button>\n                                  </Link>\n</Button.Group>\n)}\n                        >\n\n                            {/* <Table loading={this.state.loading} columns={columns} dataSource={this.state.clinicNotes}/> */}\n\n                        </Card>\n                        {this.state.clinicNotes.map(clinicNote => (\n<Card\n  style={{marginTop: 20}}\n  title={<small>{clinicNote.date ? moment(clinicNote.date).format('ll') : null}</small>}\n  extra={(\n<Dropdown.Button\n  size=\"small\"\n  style={{float: 'right'}}\n  overlay={(\n<Menu>\n                                    <Menu.Item\n                                      key=\"1\"\n                                      onClick={() => that.editClinicNotesData(clinicNote)}\n                                      disabled={(clinicNote.practice && clinicNote.practice.id != this.props.active_practiceId)}\n                                    >\n                                        <Icon type=\"edit\" />\n                                        Edit\n                                    </Menu.Item>\n                                    <Menu.Item\n                                      key=\"2\"\n                                      onClick={() => that.deleteClinicNote(clinicNote)}\n                                      disabled={(clinicNote.practice && clinicNote.practice.id != this.props.active_practiceId)}\n                                    >\n                                        <Icon type=\"delete\" />\n                                        Delete\n                                    </Menu.Item>\n                                    <Menu.Divider />\n                                    <Menu.Item key=\"3\">\n                                        <Link\n                                          to={`/patient/${  clinicNote.patient  }/emr/timeline`}\n                                        >\n                                            <Icon\n                                              type=\"clock-circle\"\n                                            />\n                                            &nbsp;\n                                            Patient Timeline\n                                        </Link>\n                                    </Menu.Item>\n                                    <Menu.Divider />\n                                    <Menu.Item key=\"4\">\n                                        <a onClick={() => this.sendPatientMail(clinicNote)}><Icon\n                                          type=\"mail\"\n                                        /> Send mail to patient\n                                        </a>\n                                    </Menu.Item>\n</Menu>\n)}\n>\n                                <a onClick={() => this.loadPDF(clinicNote.id)}><Icon\n                                  type=\"printer\"\n                                />\n                                </a>\n\n</Dropdown.Button>\n)}\n>\n\n                            <Modal\n                              title={null}\n                              visible={this.state.visibleMail}\n                              onOk={this.sendMailToPatient}\n                              onCancel={this.mailModalClose}\n                              footer={[\n                                    <Button key=\"back\" onClick={this.mailModalClose}>\n                                        Cancel\n                                    </Button>,\n                                    <Button key=\"submit\" type=\"primary\" onClick={this.sendMailToPatient}>\n                                        Send\n                                    </Button>,\n                                ]}\n                            >\n                                <p>Send Clinical Notes To {_.get(clinicNote,'patient.user.first_name')} ?</p>\n                                <Input\n                                  value={this.state.mail_to}\n                                  placeholder=\"Email\"\n                                  onChange={(e)=>that.updateFormValue('mail_to',e.target.value)}\n                                />\n                            </Modal>\n\n                            <Row>\n                                <Col span={6}>\n                                    <h3>Complaints</h3>\n                                </Col>\n                                <Col span={18} style={{borderLeft: '1px solid #ccc', padding: 4}}>\n                                    <div style={{minHeight: 30}}>\n                                        {clinicNote.chief_complaints ? clinicNote.chief_complaints.split(CUSTOM_STRING_SEPERATOR).map((str, index) =>\n                                            <span>{index ? <br /> : null}{str}</span>) : null}\n                                    </div>\n                                    <Divider style={{margin: 0}} />\n                                </Col>\n                            </Row>\n                            <Row>\n                                <Col span={6}>\n                                    <h3>Observations</h3>\n                                </Col>\n                                <Col span={18} style={{borderLeft: '1px solid #ccc', padding: 4}}>\n                                    <div style={{minHeight: 30}}>\n                                        {clinicNote.observations ? clinicNote.observations.split(CUSTOM_STRING_SEPERATOR).map((str, index) =>\n                                            <span>{index ? <br /> : null}{str}</span>) : null}\n                                    </div>\n                                    <Divider style={{margin: 0}} />\n                                </Col>\n                            </Row>\n                            <Row>\n                                <Col span={6}>\n                                    <h3>Investigations</h3>\n                                </Col>\n                                <Col span={18} style={{borderLeft: '1px solid #ccc', padding: 4}}>\n                                    <div style={{minHeight: 30}}>\n                                        {clinicNote.investigations ? clinicNote.investigations.split(CUSTOM_STRING_SEPERATOR).map((str, index) =>\n                                            <span>{index ? <br /> : null}{str}</span>) : null}\n                                    </div>\n                                    <Divider style={{margin: 0}} />\n                                </Col>\n                            </Row>\n                            <Row>\n                                <Col span={6}>\n                                    <h3>Diagnoses</h3>\n                                </Col>\n                                <Col span={18} style={{borderLeft: '1px solid #ccc', padding: 4}}>\n                                    <div style={{minHeight: 30}}>\n                                        {clinicNote.diagnosis ? clinicNote.diagnosis.split(CUSTOM_STRING_SEPERATOR).map((str, index) =>\n                                            <span>{index ? <br /> : null}{str}</span>) : null}\n                                    </div>\n                                    <Divider style={{margin: 0}} />\n                                </Col>\n                            </Row>\n                            <Row>\n                                <Col span={6}>\n                                    <h3>Notes</h3>\n                                </Col>\n                                <Col span={18} style={{borderLeft: '1px solid #ccc', padding: 4}}>\n                                    <div style={{minHeight: 30}}>\n                                        {clinicNote.notes ? clinicNote.notes.split(CUSTOM_STRING_SEPERATOR).map((str, index) =>\n                                            <span>{index ? <br /> : null}{str}</span>) : null}\n                                    </div>\n                                    <Divider style={{margin: 0}} />\n                                </Col>\n                            </Row>\n                            <Row>\n                                <Col span={6}>\n                                    <h3>Recent Medications</h3>\n                                </Col>\n                                <Col span={18} style={{borderLeft: '1px solid #ccc', padding: 4}}>\n                                    <div style={{minHeight: 30}}>\n                                        {clinicNote.medication ? clinicNote.medication.split(CUSTOM_STRING_SEPERATOR).map((str, index) =>\n                                            <span>{index ? <br /> : null}{str}</span>) : null}\n                                    </div>\n                                    <Divider style={{margin: 0}} />\n                                </Col>\n                            </Row>\n                            <div>\n                                {clinicNote.doctor ? (\n                                    <Tag color={clinicNote.doctor ? clinicNote.doctor.calendar_colour : null}>\n                                        <b>{`prescribed by  ${  clinicNote.doctor.user.first_name}`} </b>\n                                    </Tag>\n                                  ) : null}\n                                {clinicNote.practice ? (\n<Tag style={{float: 'right'}}>\n                                    <Tooltip title=\"Practice Name\">\n                                        <b>{clinicNote.practice.name} </b>\n                                    </Tooltip>\n</Tag>\n) : null}\n                            </div>\n</Card>\n))}\n                        <Spin spinning={this.state.loading}>\n                            <Row />\n                        </Spin>\n                        <InfiniteFeedLoaderButton\n                          loaderFunction={() => this.loadClinicNotes(that.state.next)}\n                          loading={this.state.loading}\n                          hidden={!this.state.next}\n                        />\n\n\n                    </div>\n                </Route>\n     </Switch>\n</div>\n)\n        }\n        \n            return (\n<div>\n                <Card\n                  bodyStyle={{padding: 0}}\n                  title={this.state.currentPatient ? `${this.state.currentPatient.user.first_name  } Clinic Notes` : \"Clinic Notes\"}\n                  extra={(\n<Button.Group>\n                          <Button type=\"primary\" onClick={() => this.props.togglePatientListModal(true)}>\n                              <Icon type=\"plus\" />Add\n                          </Button>\n</Button.Group>\n)}\n                />\n                {this.state.clinicNotes.map(clinicNote => (\n<Card\n  style={{marginTop: 10}}\n  key={clinicNote.id}\n  extra={(\n<Dropdown.Button\n  size=\"small\"\n  overlay={(\n<Menu>\n                            <Menu.Item\n                              key=\"1\"\n                              onClick={() => that.editClinicNotesData(clinicNote)}\n                              disabled={(clinicNote.practice && clinicNote.practice.id != this.props.active_practiceId)}\n                            >\n                                <Icon type=\"edit\" />\n                                Edit\n                            </Menu.Item>\n                            <Menu.Item\n                              key=\"2\"\n                              onClick={() => that.deleteClinicNote(clinicNote)}\n                              disabled={(clinicNote.practice && clinicNote.practice.id != this.props.active_practiceId)}\n                            >\n                                <Icon type=\"delete\" />\n                                Delete\n                            </Menu.Item>\n                            <Menu.Divider />\n                            <Menu.Item key=\"3\">\n                                <Link\n                                  to={`/patient/${  clinicNote.patient  }/emr/timeline`}\n                                >\n                                    <Icon type=\"clock-circle\" />\n                                    &nbsp;\n                                    Patient Timeline\n                                </Link>\n                            </Menu.Item>\n\n                            <Menu.Divider />\n                            <Menu.Item key=\"4\">\n                                <a onClick={() => this.sendPatientMail(clinicNote)}><Icon\n                                  type=\"mail\"\n                                /> Send mail to patient\n                                </a>\n                            </Menu.Item>\n</Menu>\n)}\n>\n                        <a onClick={() => this.loadPDF(clinicNote.id)}><Icon\n                          type=\"printer\"\n                        />\n                        </a>\n</Dropdown.Button>\n)}\n  title={(\n<div>\n                        <small>{clinicNote.date ? moment(clinicNote.date).format('ll') : null}\n                            <Link to={`/patient/${  clinicNote.patient.id  }/emr/clinicnotes`}>\n                                &nbsp;&nbsp; {clinicNote.patient.user ? clinicNote.patient.user.first_name : null} (ID: {clinicNote.patient.custom_id?clinicNote.patient.custom_id:clinicNote.patient.id})&nbsp;\n                            </Link>\n                            <span>, {clinicNote.patient.gender}</span>\n                        </small>\n</div>\n)}\n>\n\n\n                    <Row>\n                        <Col span={6}>\n                            <h3>Complaints</h3>\n                        </Col>\n                        <Col span={18} style={{borderLeft: '1px solid #ccc', padding: 4}}>\n                            <div style={{minHeight: 30}}>\n                                {clinicNote.chief_complaints ? clinicNote.chief_complaints.split(CUSTOM_STRING_SEPERATOR).map((str, index) =>\n                                    <span key={str}>{index ? <br /> : null}{str}</span>) : null}\n                            </div>\n                            <Divider style={{margin: 0}} />\n                        </Col>\n                    </Row>\n                    <Row>\n                        <Col span={6}>\n                            <h3>Observations</h3>\n                        </Col>\n                        <Col span={18} style={{borderLeft: '1px solid #ccc', padding: 4}}>\n                            <div style={{minHeight: 30}}>\n                                {clinicNote.observations ? clinicNote.observations.split(CUSTOM_STRING_SEPERATOR).map((str, index) =>\n                                    <span key={str}>{index ? <br /> : null}{str}</span>) : null}\n                            </div>\n                            <Divider style={{margin: 0}} />\n                        </Col>\n                    </Row>\n                    <Row>\n                        <Col span={6}>\n                            <h3>Investigations</h3>\n                        </Col>\n                        <Col span={18} style={{borderLeft: '1px solid #ccc', padding: 4}}>\n                            <div style={{minHeight: 30}}>\n                                {clinicNote.investigations ? clinicNote.investigations.split(CUSTOM_STRING_SEPERATOR).map((str, index) =>\n                                    <span key={str}>{index ? <br /> : null}{str}</span>) : null}\n                            </div>\n                            <Divider style={{margin: 0}} />\n                        </Col>\n                    </Row>\n                    <Row>\n                        <Col span={6}>\n                            <h3>Diagnoses</h3>\n                        </Col>\n                        <Col span={18} style={{borderLeft: '1px solid #ccc', padding: 4}}>\n                            <div style={{minHeight: 30}}>\n                                {clinicNote.diagnosis ? clinicNote.diagnosis.split(CUSTOM_STRING_SEPERATOR).map((str, index) =>\n                                    <span key={str}>{index ? <br /> : null}{str}</span>) : null}\n                            </div>\n                            <Divider style={{margin: 0}} />\n                        </Col>\n                    </Row>\n                    <Row>\n                        <Col span={6}>\n                            <h3>Notes</h3>\n                        </Col>\n                        <Col span={18} style={{borderLeft: '1px solid #ccc', padding: 4}}>\n                            <div style={{minHeight: 30}}>\n                                {clinicNote.notes ? clinicNote.notes.split(CUSTOM_STRING_SEPERATOR).map((str, index) =>\n                                    <span key={str}>{index ? <br /> : null}{str}</span>) : null}\n                            </div>\n                            <Divider style={{margin: 0}} />\n                        </Col>\n                    </Row>\n                    <Row>\n                        <Col span={6}>\n                            <h3>Recent Medications</h3>\n                        </Col>\n                        <Col span={18} style={{borderLeft: '1px solid #ccc', padding: 4}}>\n                            <div style={{minHeight: 30}}>\n                                {clinicNote.medication ? clinicNote.medication.split(CUSTOM_STRING_SEPERATOR).map((str, index) =>\n                                    <span>{index ? <br /> : null}{str}</span>) : null}\n                            </div>\n                            <Divider style={{margin: 0}} />\n                        </Col>\n                    </Row>\n                    <div>\n                        {clinicNote.doctor ? (\n                            <Tag color={clinicNote.doctor ? clinicNote.doctor.calendar_colour : null}>\n                                <b>{`prescribed by  ${  clinicNote.doctor.user.first_name}`} </b>\n                            </Tag>\n                          ) : null}\n                        {clinicNote.practice ? (\n<Tag style={{float: 'right'}}>\n                            <Tooltip title=\"Practice Name\">\n                                <b>{clinicNote.practice.name} </b>\n                            </Tooltip>\n</Tag>\n) : null}\n                    </div>\n\n</Card>\n))}\n                <Spin spinning={this.state.loading}>\n                    <Row />\n                </Spin>\n                <InfiniteFeedLoaderButton\n                  loaderFunction={() => this.loadClinicNotes(that.state.next)}\n                  loading={this.state.loading}\n                  hidden={!this.state.next}\n                />\n\n                <Modal\n                  title={null}\n                  visible={this.state.visibleMail}\n                  onOk={this.sendMailToPatient}\n                  onCancel={this.mailModalClose}\n                  footer={[\n                        <Button key=\"back\" onClick={this.mailModalClose}>\n                            Cancel\n                        </Button>,\n                        <Button key=\"submit\" type=\"primary\" onClick={this.sendMailToPatient}>\n                            Send\n                        </Button>,\n                    ]}\n                >\n                    <p>Send Clinical Notes To {that.state.patientName} ?</p>\n                    <Input\n                      value={this.state.mail_to}\n                      placeholder=\"Email\"\n                      onChange={(e)=>that.updateFormValue('mail_to',e.target.value)}\n                    />\n                </Modal>\n</div>\n)\n        \n\n    }\n}\n\nexport default PatientClinicNotes;\n","import React from \"react\";\nimport {\n    Avatar,\n    Button,\n    Icon,\n    Layout,\n    Tooltip,\n    Dropdown,\n    Tag,\n    Switch,\n    Statistic,\n    Popover,\n    List,\n    Modal\n} from \"antd\";\nimport {Link} from \"react-router-dom\";\nimport PatientSelection from \"./PatientSelection\";\nimport {hashCode, intToRGB, patientSettingMenu} from \"../../utils/clinicUtils\";\nimport {makeFileURL} from \"../../utils/common\";\n\nconst {Header} = Layout;\n\n\nclass PatientHeader extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {};\n    }\n\n    componentDidMount() {\n        const that = this;\n        if (that.props.refreshWallet) {\n            that.props.refreshWallet();\n        }\n    }\n\n\n    render() {\n        const that = this;\n        return (\n<Header className=\"header\" style={{background: '#e4e4e4', padding: '0px 20px'}}>\n            <div>\n                {this.props.currentPatient ? (\n                    <div style={{display: 'inline'}}>\n                        <div style={{display: 'inline', textSize: '15px'}}>\n                            <Tooltip title=\"Switch Back to All Patients\">\n                                <Button onClick={() => this.props.setCurrentPatient(null)} type=\"primary\" ghost>\n                                    <Icon type=\"arrow-left\" />\n                                </Button>\n                            </Tooltip>\n                        </div>\n\n                        <a\n                          style={{padding: '8px', fontSize: '15px'}}\n                          onClick={() => this.props.togglePatientListModal(true)}\n                        >\n                            {(this.props.currentPatient.image ?\n                                <Avatar src={makeFileURL(this.props.currentPatient.image)} /> : (\n                                <Avatar style={{backgroundColor: '#87d068'}}>\n                                    {this.props.currentPatient.user.first_name ? this.props.currentPatient.user.first_name.charAt(0) :\n                                        <Icon type=\"user\" />}\n                                </Avatar>\n                              ))}\n                            &nbsp;&nbsp;{that.props.currentPatient.user.first_name.length < 16 ? that.props.currentPatient.user.first_name : `${that.props.currentPatient.user.first_name.slice(0, 12)  }...`}\n                            <small><i><b> [ID: {that.props.currentPatient.custom_id ? that.props.currentPatient.custom_id : that.props.currentPatient.id}]</b></i></small>\n\n                        </a>\n                        {this.props.MedicalMembership ? (\n                            <Popover\n                              placement=\"rightTop\"\n                              title=\"Patient Membership\"\n                              content={(\n<div><p><strong>Membership Code : </strong>\n                                         <span>{this.props.MedicalMembership.membership_code}</span>\n     </p>\n                                         <p><strong>Start Date : </strong>\n                                             <span>{this.props.MedicalMembership.medical_from}</span>\n                                         </p>\n                                         <p><strong>Valid Till : </strong>\n                                             <span>{this.props.MedicalMembership.medical_to}</span>\n                                         </p>\n</div>\n)}\n                            >\n                                <div style={{\n                                    display: 'inline',\n                                    // float: 'left',\n                                    maxWidth: 50,\n                                    // position: 'absolute',\n                                    // paddingLeft: 173,\n                                    // margin: '12px 15px',\n                                    fontSize: 30,\n                                    lineHeight: \"40px\"\n                                }}\n                                >\n                                    <Icon type=\"crown\" theme=\"twoTone\" twoToneColor=\"#FFBA3A\" />\n                                </div>\n                            </Popover>\n                          ) : null}\n                        <Popover\n                          placement=\"topLeft\"\n                          title=\"Medical History\"\n                          content={(\n<div\n  style={{width: 250}}\n>{that.props.currentPatient.medical_history_data ? that.props.currentPatient.medical_history_data.map((item, index) =>\n                                     <Tag color={`#${  intToRGB(hashCode(item.name))}`}>{item.name}</Tag>) : null}\n</div>\n)}\n                        >\n\n                            {that.props.currentPatient.medical_history_data ? that.props.currentPatient.medical_history_data.map((item, index) =>\n                                index > 0 ? index == 1 &&\n                                    <Tag>+{that.props.currentPatient.medical_history_data.length - 1}</Tag> :\n                                    <Tag color={`#${  intToRGB(hashCode(item.name))}`}>{item.name}</Tag>) : null}\n\n                        </Popover>\n                        <Switch\n                          style={{marginLeft: 20}}\n                          checked={this.props.showAllClinic}\n                          onChange={(value) => this.props.toggleShowAllClinic(value)}\n                          checkedChildren=\"All Clinics\"\n                          unCheckedChildren=\"Current Clinic\"\n                        />\n                        {this.props.pendingAmount ? (\n<>\n                            <Button style={{marginLeft: '20px'}} type=\"primary\" size=\"small\">\n                                <Link to={`/patient/${  this.props.currentPatient.id  }/billing/payments/add`}>Pay!</Link>\n                            </Button>\n                            <Popover\n                              placement=\"rightTop\"\n                              content={(\n<List\n  size=\"small\"\n  dataSource={this.props.pendingAmount.practice_data}\n  renderItem={item => (\n<List.Item><List.Item.Meta\n  title={item.name}\n  description={`Rs. ${  item.total < 0 ? `${item.total * -1  } (Advance)` : item.total}`}\n/>\n</List.Item>\n)}\n/>\n)}\n                              title=\"Pending Payments\"\n                            >\n\n                                <div style={{\n                                    display: 'inline',\n                                    float: 'left',\n                                    maxWidth: 200,\n                                    position: 'absolute',\n                                    margin: '5px 15px',\n                                    zIndex: 5\n                                }}\n                                >\n                                    <Statistic\n                                      title=\"Amount Due\"\n                                      value={this.props.pendingAmount.grand_total}\n                                      valueStyle={{\n                                                   color: this.props.pendingAmount.grand_total > 0 ? '#cf1322' : 'initial',\n                                                   fontWeight: 500,\n                                                   fontSize:20\n                                               }}\n                                      precision={2}\n                                    />\n\n                                </div>\n                            </Popover>\n</>\n) : null}\n\n                        {this.props.walletAmount && this.props.walletAmount.length ? (\n                            <Popover\n                              placement=\"rightTop\"\n                              title=\"Agent Wallet Amount\"\n                              content={(\n<p>\n                                         {/* Refundable : {this.state.walletAmount[0].refundable_amount} <br/> */}\n                                         Non-Refundable : {this.props.walletAmount[0].non_refundable}\n</p>\n)}\n                            >\n                                <div style={{\n                                    display: 'inline',\n                                    float: 'left',\n                                    maxWidth: 400,\n                                    position: 'absolute',\n                                    paddingLeft: 150,\n                                    margin: '20px 15px'\n                                }}\n                                >\n                                    <Statistic\n                                      tile=\"wallet\"\n                                      value={this.props.walletAmount[0].refundable_amount + this.props.walletAmount[0].non_refundable}\n                                      precision={2}\n                                      valueStyle={{\n                                                   fontSize:20\n                                               }}\n                                      prefix={<Icon type=\"wallet\" twoToneColor=\"#a2711c\" />}\n                                    />\n                                </div>\n                            </Popover>\n                          ) : null}\n                    </div>\n                  ) : (\n                    <a\n                      style={{padding: '8px', fontSize: '20px'}}\n                      onClick={() => this.props.togglePatientListModal(true)}\n                    >\n                        <div style={{display: 'inline'}}><Icon type=\"solution\" /> &nbsp; All Patient</div>\n                    </a>\n                  )}\n                <Dropdown overlay={patientSettingMenu}>\n                    <Button style={{float: 'right', margin: '15px'}}>\n                        <Icon type=\"setting\" /> Settings <Icon type=\"down\" />\n                    </Button>\n                </Dropdown>\n                {that.props.activePracticePermissions.AddPatient || that.props.allowAllPermissions ? (\n                    <Link to=\"/patients/profile/add\">\n                        <Button type=\"primary\" style={{float: 'right', margin: '15px'}}>\n                            <Icon type=\"plus\" /> Add Patient\n                        </Button>\n                    </Link>\n                  ) : null}\n\n            </div>\n            <Modal\n              width={1300}\n              maskClosable={false}\n              centered\n              footer={null}\n              closable={false}\n              visible={this.props.listModalVisible}\n              style={{\n                    height: 'calc(100vh - 120px)',\n                }}\n            >\n                <Button\n                  icon=\"close\"\n                  type=\"danger\"\n                  shape=\"circle\"\n                  style={{position: 'absolute', top: '-50px', right: 0}}\n                  onClick={() =>\n                            this.props.togglePatientListModal(false)}\n                />\n                <PatientSelection {...this.props} />\n            </Modal>\n</Header>\n)\n    }\n}\n\nexport default PatientHeader;\n\n\n","import React from \"react\";\nimport {Button, List, DatePicker,Card, Form, Icon, Row, Table, Divider, Col, Radio} from \"antd\";\nimport {Link} from \"react-router-dom\";\nimport moment from \"moment\";\nimport DynamicFieldsForm from \"../../common/DynamicFieldsForm\";\nimport {SINGLE_CHECKBOX_FIELD, SUCCESS_MSG_TYPE} from \"../../../constants/dataKeys\";\nimport {getAPI, displayMessage, interpolate, putAPI} from \"../../../utils/common\";\nimport {PATIENT_COMMUNICATION_HISTORY_API, PATIENT_PROFILE} from \"../../../constants/api\";\nimport {SMS_ENABLE, BIRTHDAY_SMS_ENABLE, EMAIL_ENABLE} from \"../../../constants/hardData\";\nimport CustomizedTable from \"../../common/CustomizedTable\";\n\nclass PatientCommunicationSetting extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            parient_communication_history: null,\n            patientProfile: null,\n            saving: false\n        };\n\n        this.loadCommunication = this.loadCommunication.bind(this);\n        this.loadProfile = this.loadProfile.bind(this);\n    }\n\n    componentDidMount() {\n        if (this.props.currentPatient) {\n            this.loadCommunication();\n            this.loadProfile();\n        }\n    }\n\n    loadProfile() {\n        const that = this;\n        const successFn = function (data) {\n            that.setState({\n                patientProfile: data,\n                loading: false\n            });\n        };\n        const errorFn = function () {\n            that.setState({\n                loading: false\n            })\n        };\n        getAPI(interpolate(PATIENT_PROFILE, [that.props.match.params.id]), successFn, errorFn);\n    }\n\n    loadCommunication() {\n        const that = this;\n        const successFn = function (data) {\n            that.setState({\n                parient_communication_history: data.user_sms,\n                loading: false\n            })\n        }\n        const errorFn = function () {\n            that.setState({\n                loading: false\n            })\n        }\n        getAPI(interpolate(PATIENT_COMMUNICATION_HISTORY_API, [this.props.currentPatient.user.id]), successFn, errorFn)\n    }\n\n    changeRedirect() {\n        const redirectVar = this.state.redirect;\n        this.setState({\n            redirect: !redirectVar,\n        });\n    }\n\n    onChanged = (name, value) => {\n        this.setState({\n            [name]: value,\n        });\n    }\n\n    handleSubmit = (e) => {\n        const that = this;\n        e.preventDefault();\n        this.props.form.validateFields((err, values) => {\n            if (!err) {\n                const reqData = {...values,\n                    medicine_till:moment(values.medicine_till).format('YYYY-MM-DD'),\n                    follow_up_date:moment(values.follow_up_date).format('YYYY-MM-DD'),\n                };\n                that.setState({\n                    saving: true\n                });\n                const successFn = function (data) {\n                    displayMessage(SUCCESS_MSG_TYPE, \"Communication Settings Saved Successfully!!\");\n                    that.setState({\n                        saving: false\n                    });\n                }\n                const errorFn = function () {\n                    that.setState({\n                        saving: false\n                    });\n                }\n                putAPI(interpolate(PATIENT_PROFILE, [this.props.currentPatient.id]), reqData, successFn, errorFn);\n            }\n        });\n    }\n\n\n    render() {\n        const {getFieldDecorator} = this.props.form;\n        const formItemLayout = {\n            labelCol: {\n                xs: {span: 8},\n                sm: {span: 8},\n                md: {span: 8},\n                lg: {span: 8},\n            },\n            wrapperCol: {\n                xs: {span: 16},\n                sm: {span: 16},\n                md: {span: 16},\n                lg: {span: 16},\n            },\n        };\n\n\n        const columns = [{\n            title: 'SENT TIME',\n            dataIndex: 'created_at',\n            key: 'created_at',\n            render: created_at => <span>{moment(created_at).format('LLL')}</span>,\n        }, {\n            title: 'MESSAGE',\n            dataIndex: 'body',\n            key: 'body',\n        }, {\n            title: 'TYPE',\n            dataIndex: 'sms_type',\n            key: 'sms_type',\n        }, {\n            title: 'MESSAGE STATUS',\n            dataIndex: 'status',\n            key: 'status',\n        }];\n\n\n        const sms_enabled = SMS_ENABLE.map((isSMS) => <Radio value={isSMS.value}>{isSMS.title}</Radio>)\n        const email_enabled = EMAIL_ENABLE.map((isEmail) => <Radio value={isEmail.value}>{isEmail.title}</Radio>)\n        const bithday_sms_enabled = BIRTHDAY_SMS_ENABLE.map((isBirth_SMS) => (\n<Radio\n  value={isBirth_SMS.value}\n>{isBirth_SMS.title}\n</Radio>\n));\n        return (\n<Form onSubmit={this.handleSubmit}>\n                <Card\n                  title={this.props.currentPatient ? `${this.props.currentPatient.user.first_name  } Communication` : \"Patient Communication\"}\n                  extra={(\n<Button type=\"primary\" htmlType=\"submit\" loading={this.state.saving}>\n                        <Icon type=\"save\" /> Save Communication Setting\n</Button>\n)}\n                >\n\n                    <Form.Item {...formItemLayout} key=\"sms_enable\"> <label>\n                        <span className=\"ant-form-text\">Enable SMS the patient : </span>\n                        {getFieldDecorator('sms_enable', {initialValue: this.state.patientProfile ? this.state.patientProfile.sms_enable : false})\n                        (\n                            <Radio.Group onChange={(e) => this.onChanged('sms_enable', e.target.value)}>\n                                {sms_enabled}\n                            </Radio.Group>\n                        )}\n                                                                     </label>\n                    </Form.Item>\n\n                    <Form.Item {...formItemLayout} key=\"email_enable\"> <label> <span\n                      className=\"ant-form-text\"\n                    >Enable Email the patient : \n                                                                               </span>\n                        {getFieldDecorator('email_enable', {initialValue: this.state.patientProfile ? this.state.patientProfile.email_enable : false})\n                        (\n                            <Radio.Group onChange={(e) => this.onChanged('email_enable', e.target.value)}>\n                                {email_enabled}\n                            </Radio.Group>\n                        )}\n                                                                       </label>\n                    </Form.Item>\n\n                    <Form.Item {...formItemLayout} key=\"birthday_sms_email\"> <label> <span\n                      className=\"ant-form-text\"\n                    > Send Birthday wish SMS & Email : \n                                                                                     </span>\n                        {getFieldDecorator('birthday_sms_email', {initialValue: this.state.patientProfile ? this.state.patientProfile.birthday_sms_email : false})\n                        (\n                            <Radio.Group onChange={(e) => this.onChanged('birthday_sms_email', e.target.value)}>\n                                {bithday_sms_enabled}\n                            </Radio.Group>\n                        )}\n                                                                             </label>\n                    </Form.Item>\n\n                    <Form.Item {...formItemLayout} key=\"medicine_till\"> <label>\n                        <span\n                          className=\"ant-form-text\"\n                        > Medicine Till Date : \n                        </span>\n                            {getFieldDecorator('medicine_till', {initialValue: this.state.patientProfile && this.state.patientProfile.medicine_till? moment(this.state.patientProfile.medicine_till) : moment()})\n                                (<DatePicker allowClear={false} format=\"YYYY-MM-DD\" />\n                            )}\n                                                                        </label>\n                    </Form.Item>\n\n                    <Form.Item {...formItemLayout} key=\"medicine_till\"> <label>\n                        <span\n                          className=\"ant-form-text\"\n                        > Next follow-up To : \n                        </span>\n                        {getFieldDecorator('follow_up_date', {initialValue: this.state.patientProfile && this.state.patientProfile.follow_up_date ? moment(this.state.patientProfile.follow_up_date) : moment()})\n                        (<DatePicker allowClear={false} format=\"YYYY-MM-DD\" />\n                        )}\n                                                                        </label>\n                    </Form.Item>\n\n\n\n\n                    <div>\n                        <Divider dashed />\n                        <h2>Past Communication</h2>\n                        <CustomizedTable\n                          loading={this.state.loading}\n                          columns={columns}\n                          dataSource={this.state.parient_communication_history}\n                        />\n                    </div>\n                </Card>\n</Form>\n        );\n\n    }\n}\n\nexport default Form.create()(PatientCommunicationSetting);\n","import React from \"react\";\nimport {Card, Button, Table, Icon} from \"antd\";\nimport {Link} from \"react-router-dom\";\nimport PatientCommunicationSetting from \"./PatientCommunicationSetting\";\n\nclass PatientCommunication extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {};\n    }\n\n    render() {\n        return <PatientCommunicationSetting {...this.state} {...this.props} />\n    }\n}\n\nexport default PatientCommunication;\n","import React from \"react\";\nimport {Route} from \"react-router\";\n\nimport {Card, Form, Row} from \"antd\";\nimport {Redirect} from 'react-router-dom'\nimport moment from \"moment\";\nimport DynamicFieldsForm from \"../../common/DynamicFieldsForm\";\nimport {DATE_PICKER, NUMBER_FIELD, SELECT_FIELD, SUCCESS_MSG_TYPE} from \"../../../constants/dataKeys\";\nimport {VITAL_SIGNS_API} from \"../../../constants/api\";\nimport {displayMessage, interpolate} from \"../../../utils/common\";\n\n\nclass AddorEditPatientVitalSigns extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            redirect: false,\n            vitalSign: null,\n            editVitalSign: this.props.editVitalSign ? this.props.editVitalSign : null,\n\n        }\n        this.changeRedirect = this.changeRedirect.bind(this);\n\n    }\n\n\n    changeRedirect() {\n        const redirectVar = this.state.redirect;\n        this.setState({\n            redirect: !redirectVar,\n        });\n    }\n\n    render() {\n        const fields = [{\n            label: \"Pulse\",\n            key: \"pulse\",\n            // required: true,\n            initialValue: this.props.editVitalSign ? this.props.editVitalSign.pulse : null,\n            type: NUMBER_FIELD,\n            follow: 'BPM'\n        }, {\n            label: \"Temperature\",\n            key: \"temperature\",\n            initialValue: this.props.editVitalSign ? this.props.editVitalSign.temperature : null,\n            type: NUMBER_FIELD,\n            follow: 'Fahrenheit'\n        }, {\n            label: \"Temperature Part\",\n            key: \"temperature_part\",\n            type: SELECT_FIELD,\n            initialValue: this.props.editVitalSign ? this.props.editVitalSign.temperature_part : null,\n            options: [{label: \"forehead\", value: \"forehead\"}, {label: \"armpit\", value: \"armpit\"}, {\n                label: \"oral \",\n                value: \"oral\"\n            }]\n        }, {\n            label: \"Blood Pressure Up\",\n            key: \"blood_pressure_up\",\n            initialValue: this.props.editVitalSign ? this.props.editVitalSign.blood_pressure_up : null,\n            type: NUMBER_FIELD,\n            follow: 'mmhg'\n        }, {\n            label: \"Blood Pressure Down\",\n            key: \"blood_pressure_down\",\n            initialValue: this.props.editVitalSign ? this.props.editVitalSign.blood_pressure_down : null,\n            type: NUMBER_FIELD,\n            follow: 'mmhg'\n        }, {\n            label: \"Position\",\n            key: \"position\",\n            type: SELECT_FIELD,\n            initialValue: this.props.editVitalSign ? this.props.editVitalSign.position : null,\n            options: [{label: \"standing\", value: \"standing\"}, {label: \"sitting\", value: \"sitting\"}]\n        }, {\n            label: \"Weight\",\n            key: \"weight\",\n            initialValue: this.props.editVitalSign ? this.props.editVitalSign.weight : null,\n            type: NUMBER_FIELD,\n            follow: 'kg.'\n        }, {\n            label: \"Resp Rate\",\n            key: \"resp_rate\",\n            initialValue: this.props.editVitalSign ? this.props.editVitalSign.resp_rate : null,\n            type: NUMBER_FIELD,\n            follow: 'breaths/min'\n        }, {\n            label: \"Creatinine Level\",\n            key: \"creatinine\",\n            initialValue: this.props.editVitalSign ? this.props.editVitalSign.creatinine : null,\n            type: NUMBER_FIELD,\n        }, {\n            label: \"Haemoglobin Level\",\n            key: \"haemoglobin\",\n            initialValue: this.props.editVitalSign ? this.props.editVitalSign.haemoglobin : null,\n            type: NUMBER_FIELD,\n        }, {\n            label: \"Urea Level\",\n            key: \"urea\",\n            initialValue: this.props.editVitalSign ? this.props.editVitalSign.urea : null,\n            type: NUMBER_FIELD,\n        }, {\n            label: \"Uric Acid Level\",\n            key: \"uric_acid\",\n            initialValue: this.props.editVitalSign ? this.props.editVitalSign.uric_acid : null,\n            type: NUMBER_FIELD,\n        },{\n            label:'Date',\n            key:'date',\n            initialValue:this.props.editVitalSign && this.props.editVitalSign.date ?this.props.editVitalSign.date:moment(),\n            type:DATE_PICKER,\n            required:true,\n        }];\n\n\n        let editformProp;\n        const defaultValues = [{key: 'patient', value: this.props.match.params.id}, {\n            key: 'practice',\n            value: this.props.active_practiceId\n        }];\n        const that = this;\n        const TestFormLayout = Form.create()(DynamicFieldsForm);\n        if (this.state.editVitalSign) {\n            editformProp = {\n                successFn (data) {\n                    displayMessage(SUCCESS_MSG_TYPE, \"success\")\n                    if (that.props.loadData){\n                        that.props.loadData();\n                    }\n                    if (that.props.history){\n                        that.props.history.replace(`/patient/${ that.props.match.params.id }/emr/vitalsigns`)\n                    }\n\n                },\n                errorFn () {\n\n                },\n                action: interpolate(VITAL_SIGNS_API, [this.props.match.params.id]),\n                method: \"post\",\n            }\n            defaultValues.push({\"key\": \"id\", \"value\": this.state.editVitalSign.id})\n        }\n        const formProp = {\n            successFn (data) {\n                displayMessage(SUCCESS_MSG_TYPE, \"success\")\n                if (that.props.loadData) {\n                    that.props.loadData();\n                }\n                if (that.props.history){\n                    that.props.history.replace(`/patient/${ that.props.match.params.id }/emr/vitalsigns`)\n                }\n            },\n            errorFn () {\n\n            },\n            action: interpolate(VITAL_SIGNS_API, [this.props.match.params.id]),\n            method: \"post\",\n        }\n\n\n        return (\n<Row>\n            <Card>\n                <Route\n                  exact\n                  path='/patient/:id/emr/vitalsigns/edit'\n                  render={() => (this.state.editVitalSign ? (\n                           <TestFormLayout\n                             defaultValues={defaultValues}\n                             title=\"Edit Report Manual\"\n                             changeRedirect={this.changeRedirect}\n                             formProp={editformProp}\n                             fields={fields}\n                           />\n                         ) :\n                           <Redirect to='/patients/profile' />)}\n                />\n                <Route\n                  exact\n                  path='/patient/:id/emr/vitalsigns/add'\n                  render={() => (\n<TestFormLayout\n  title=\"Add Report Manual\"\n  defaultValues={defaultValues}\n  changeRedirect={this.changeRedirect}\n  formProp={formProp}\n  fields={fields}\n/>\n)}\n                />\n\n\n            </Card>\n            {this.state.redirect && <Redirect to={`/patient/${  this.props.match.params.id  }/emr/vitalsigns`} />}\n</Row>\n)\n\n    }\n}\n\nexport default AddorEditPatientVitalSigns;\n","import React from \"react\";\nimport {Button, Card, Divider, Icon, Input, Modal, Table, Tabs, Tag, Tooltip as AntTooltip} from \"antd\";\nimport {Link, Route, Switch} from \"react-router-dom\";\nimport moment from 'moment';\nimport {\n    CartesianGrid,\n    Legend,\n    Line,\n    Tooltip,\n    XAxis,\n    YAxis,\n    ResponsiveContainer,\n    ComposedChart,\n} from 'recharts';\nimport * as _ from \"lodash\";\nimport {CLINIC_NOTES_PDF, VITAL_SIGN_PDF, VITAL_SIGNS_API} from \"../../../constants/api\";\nimport {displayMessage, getAPI, interpolate, postAPI} from \"../../../utils/common\";\nimport CustomizedTable from \"../../common/CustomizedTable\";\nimport AddorEditPatientVitalSigns from \"./AddorEditPatientVitalSigns\";\nimport {BACKEND_BASE_URL} from \"../../../config/connect\";\nimport InfiniteFeedLoaderButton from \"../../common/InfiniteFeedLoaderButton\";\nimport {SUCCESS_MSG_TYPE} from \"../../../constants/dataKeys\";\nimport {sendMail} from \"../../../utils/clinicUtils\";\n\nconst {confirm} = Modal;\n\nclass PatientVitalSign extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            currentPatient: this.props.currentPatient,\n            vitalsign: [],\n            loading: true\n        }\n        this.loadVitalsigns = this.loadVitalsigns.bind(this);\n\n    }\n\n    componentDidMount() {\n        this.loadVitalsigns();\n    }\n\n    loadVitalsigns(page = 1) {\n        const that = this;\n        const successFn = function (data) {\n            that.setState(function (prevState) {\n                if (data.current == 1) {\n                    return {\n                        vitalsign: [...data.results],\n                        next: data.next,\n                        loading: false\n                    }\n                }\n                return {\n                    vitalsign: [...prevState.vitalsign, ...data.results],\n                    next: data.next,\n                    loading: false\n                }\n            })\n        }\n        const errorFn = function () {\n\n        }\n        const apiParams = {\n            page,\n            practice: this.props.active_practiceId\n        };\n        if (this.props.match.params.id) {\n            apiParams.patient = this.props.match.params.id;\n        }\n        if (this.props.showAllClinic && this.props.match.params.id) {\n            delete (apiParams.practice)\n        }\n        getAPI(VITAL_SIGNS_API, successFn, errorFn, apiParams)\n    }\n\n    deleteVitalSign = (record) => {\n        const that = this;\n        confirm({\n            title: 'Are you sure to delete this item?',\n            okText: 'Yes',\n            okType: 'danger',\n            cancelText: 'No',\n            onOk() {\n                const reqData = {...record, is_active: false};\n                const successFn = function (data) {\n                    that.loadVitalsigns();\n                    displayMessage(SUCCESS_MSG_TYPE, \"Deleted Successfully!!\")\n\n                };\n                const errorFn = function () {\n\n                };\n                postAPI(interpolate(VITAL_SIGNS_API, [record.patient]), reqData, successFn, errorFn)\n            },\n            onCancel() {\n                console.log('Cancel');\n            },\n        });\n    }\n\n    editObject = (record) => {\n        this.setState({\n            editVitalSign: record,\n            loading: false\n        });\n        if (this.props.match.params.id) {\n            const {id} = this.props.match.params;\n            this.props.history.push(`/patient/${  id  }/emr/vitalsigns/edit`)\n        } else {\n            this.props.history.push(`/patient/${  record.patient  }/emr/vitalsigns`);\n        }\n\n\n    }\n\n    loadPDF(id) {\n        const that = this;\n        const successFn = function (data) {\n            if (data.report)\n                window.open(BACKEND_BASE_URL + data.report);\n        }\n        const errorFn = function () {\n\n        }\n        getAPI(interpolate(VITAL_SIGN_PDF, [id]), successFn, errorFn);\n    }\n\n    updateFormValue =(type,value)=>{\n        this.setState({\n            [type]: value\n        })\n    };\n\n    mailModalOpen =() =>{\n        this.setState({\n            visibleMail:true\n        })\n    };\n\n    mailModalClose =() =>{\n        this.setState({\n            visibleMail:false\n        })\n    };\n\n    sendPatientMail =(record)=>{\n        this.mailModalOpen()\n        this.setState({\n            patientName:_.get(record,'patient_data.user.first_name'),\n            reportManualId:_.get(record,'id'),\n            mail_to:_.get(record,'patient_data.user.email')\n        })\n\n    };\n\n    sendMailToPatient =()=>{\n        const {mail_to ,reportManualId } = this.state;\n        const apiParams ={\n            mail_to,\n        }\n        sendMail(interpolate(VITAL_SIGN_PDF,[reportManualId]),apiParams)\n        this.mailModalClose();\n    }\n\n    render() {\n        const that = this;\n        const{vitalsign} =this.state;\n        const columns = [{\n            title: 'Date',\n            dataIndex: 'date',\n            key: 'date',\n            render: (item, record) => <span>{record.date ? moment(record.date).format('LL') : ''}</span>,\n        }, {\n            title: 'Temp(F)',\n            key: 'temperature',\n            render: (text, record) => (\n                <span> {record.temperature}<br />,{record.temperature_part}</span>\n            )\n        }, {\n            title: 'Pulse (BPM)',\n            dataIndex: 'pulse',\n            key: 'pulse',\n        }, {\n            title: 'RR breaths/min',\n            dataIndex: 'resp_rate',\n            key: 'resp_rate',\n        }, {\n            title: 'SYS/DIA mmhg',\n            key: 'address',\n            render: (text, record) => (\n                <span> {record.blood_pressure_up}/{record.blood_pressure_down}<br />,{record.position}</span>\n            )\n        }, {\n            title: 'WEIGHT kg',\n            dataIndex: 'weight',\n            key: 'weight',\n        }, {\n            title: \"Creatinine Level\",\n            key: \"creatinine\",\n            dataIndex: \"creatinine\",\n        }, {\n            title: \"Haemoglobin Level\",\n            key: \"haemoglobin\",\n            dataIndex: \"haemoglobin\",\n        }, {\n            title: \"Urea Level\",\n            key: \"urea\",\n            dataIndex: \"urea\",\n\n        }, {\n            title: \"Uric Acid Level\",\n            key: \"uric_acid\",\n            dataIndex: \"uric_acid\",\n        }, {\n            title: 'Action',\n            key: 'action',\n            render: (text, record) => (\n                <span>\n                    <a onClick={() => this.loadPDF(record.id)}>Print\n                    </a>\n                    <Divider type=\"vertical\" />\n                  <a\n                    onClick={() => this.editObject(record)}\n                    disabled={(record.practice != that.props.active_practiceId)}\n                  >Edit\n                  </a>\n                    <Divider type=\"vertical\" />\n                    <a\n                      onClick={() => that.deleteVitalSign(record)}\n                      disabled={(record.practice != that.props.active_practiceId)}\n                    >Delete\n                    </a>\n\n                    <Divider type=\"vertical\" />\n                    <a onClick={() => that.sendPatientMail(record)}>Send to patient\n                    </a>\n                </span>\n            ),\n        }];\n\n        if (this.props.match.params.id) {\n            return (\n<Switch>\n                <Route\n                  path='/patient/:id/emr/vitalsigns/add'\n                  render={(route) => (\n<AddorEditPatientVitalSigns\n  {...this.props}\n  key={this.state.currentPatient ? this.state.currentPatient.id : null}\n  {...this.state}\n  {...route}\n  loadData={this.loadVitalsigns}\n/>\n)}\n                />\n                <Route\n                  path='/patient/:id/emr/vitalsigns/edit'\n                  render={(route) => (\n<AddorEditPatientVitalSigns\n  {...this.props}\n  key={this.state.currentPatient ? this.state.currentPatient.id : null}\n  {...this.state}\n  {...route}\n  loadData={this.loadVitalsigns}\n/>\n)}\n                />\n                <Route>\n                    <Card\n                      title={this.state.currentPatient ? `${this.state.currentPatient.user.first_name  } Report Manual` : \"Patient Report Manual\"}\n                      extra={(\n<Button.Group>\n                            <Link to={`/patient/${  this.props.match.params.id  }/emr/vitalsigns/add`}>\n                                <Button type=\"primary\">\n                                    <Icon type=\"plus\" />Add\n                                </Button>\n                            </Link>\n</Button.Group>\n)}\n                    >\n                        <Tabs>\n                            <Tabs.TabPane tab=\"Charts\" key={1} style={{margin: 'auto'}}>\n                                <Divider>Pulse Chart (bpm)</Divider>\n                                <div style={{height: 200}}>\n                                    <ResponsiveContainer>\n                                        <ComposedChart\n                                          width={700}\n                                          height={200}\n                                          data={this.state.vitalsign.reverse()}\n                                          margin={{top: 10, right: 30, left: 0, bottom: 0}}\n                                        >\n                                            {/* <defs> */}\n                                            {/*    <linearGradient id=\"colorUv\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\"> */}\n                                            {/*        <stop offset=\"5%\" stopColor=\"#8884d8\" stopOpacity={0.8}/> */}\n                                            {/*        <stop offset=\"95%\" stopColor=\"#8884d8\" stopOpacity={0}/> */}\n                                            {/*    </linearGradient> */}\n                                            {/*    <Legend verticalAlign=\"top\" height={36}/> */}\n                                            {/* </defs> */}\n                                            <XAxis\n                                              dataKey=\"date\"\n                                              tickFormatter={(value) => {\n                                                return moment(value).format('LL')\n                                            }}\n                                              tickCount={that.state.vitalsign.length}\n                                            />\n                                            <YAxis\n                                              domain={[dataMin => (Math.abs(dataMin)), dataMax => (dataMax * 1.1).toFixed(0)]}\n                                            />\n                                            <CartesianGrid strokeDasharray=\"3 3\" />\n                                            <Tooltip\n                                              labelFormatter={(value) => (value && moment(value).isValid() ? moment(value).format('LL') : '--')}\n                                            />\n                                            <Line\n                                              type=\"monotone\"\n                                              dataKey=\"pulse\"\n                                              stroke=\"#8884d8\"\n                                              fillOpacity={1}\n                                              strokeWidth={4}\n                                              fill=\"url(#colorUv)\"\n                                            />\n                                        </ComposedChart>\n                                    </ResponsiveContainer>\n                                </div>\n                                <Divider>Temperature (F)</Divider>\n                                <div style={{height: 200}}>\n                                    <ResponsiveContainer>\n                                        <ComposedChart\n                                          width={700}\n                                          height={200}\n                                          data={this.state.vitalsign.reverse()}\n                                          margin={{top: 10, right: 30, left: 0, bottom: 0}}\n                                        >\n                                            <Legend verticalAlign=\"top\" height={36} />\n                                            <defs>\n                                                <linearGradient id=\"colorUv\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n                                                    <stop offset=\"5%\" stopColor=\"#82ca9d\" stopOpacity={0.8} />\n                                                    <stop offset=\"95%\" stopColor=\"#82ca9d\" stopOpacity={0} />\n                                                </linearGradient>\n                                            </defs>\n                                            <XAxis\n                                              dataKey=\"date\"\n                                              tickFormatter={(value) => {\n                                                return moment(value).format('LL')\n                                            }}\n                                              tickCount={this.state.vitalsign.length}\n                                            />\n                                            <YAxis\n                                              domain={[dataMin => (Math.abs(dataMin)), dataMax => (dataMax * 1.1).toFixed(0)]}\n                                            />\n                                            <CartesianGrid strokeDasharray=\"3 3\" />\n\n                                            <Tooltip\n                                              labelFormatter={(value) => (value && moment(value).isValid() ? moment(value).format('LL') : '--')}\n                                            />\n                                            <Line\n                                              type=\"monotone\"\n                                              dataKey=\"temperature\"\n                                              stroke=\"#82ca9d\"\n                                              fillOpacity={1}\n                                              strokeWidth={4}\n                                              fill=\"url(#colorUv)\"\n                                            />\n                                        </ComposedChart>\n                                    </ResponsiveContainer>\n                                </div>\n                                <Divider>Blood Pressure (mmhg)</Divider>\n                                <div style={{height: 200}}>\n                                    <ResponsiveContainer>\n                                        <ComposedChart\n                                          width={700}\n                                          height={200}\n                                          data={this.state.vitalsign.reverse()}\n                                          margin={{top: 10, right: 30, left: 0, bottom: 0}}\n                                        >\n                                            <defs>\n                                                <linearGradient id=\"colorUv\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n                                                    <stop offset=\"5%\" stopColor=\"#ffc658\" stopOpacity={0.8} />\n                                                    <stop offset=\"95%\" stopColor=\"#ffc658\" stopOpacity={0} />\n                                                </linearGradient>\n                                            </defs>\n                                            <XAxis\n                                              dataKey=\"date\"\n                                              tickFormatter={(value) => {\n                                                return moment(value).format('LL')\n                                            }}\n                                              tickCount={this.state.vitalsign.length}\n                                            />\n                                            <YAxis\n                                              domain={[dataMin => (Math.abs(dataMin)), dataMax => (dataMax * 1.1).toFixed(0)]}\n                                            />\n                                            <CartesianGrid strokeDasharray=\"3 3\" />\n                                            <Tooltip\n                                              labelFormatter={(value) => (value && moment(value).isValid() ? moment(value).format('LL') : '--')}\n                                            />\n                                            <Line\n                                              type=\"monotone\"\n                                              dataKey=\"blood_pressure_up\"\n                                              stroke=\"#ffc658\"\n                                              fillOpacity={1}\n                                              strokeWidth={4}\n                                              fill=\"url(#colorUv)\"\n                                            />\n                                            <Line\n                                              type=\"monotone\"\n                                              dataKey=\"blood_pressure_down\"\n                                              stroke=\"#82ca9d\"\n                                              fillOpacity={1}\n                                              strokeWidth={4}\n                                              fill=\"url(#colorUv)\"\n                                            />\n                                        </ComposedChart>\n                                    </ResponsiveContainer>\n                                </div>\n                                <Divider>Weight (kg)</Divider>\n                                <div style={{height: 200}}>\n                                    <ResponsiveContainer>\n                                        <ComposedChart\n                                          width={700}\n                                          height={200}\n                                          data={this.state.vitalsign.reverse()}\n                                          margin={{top: 10, right: 30, left: 0, bottom: 0}}\n                                        >\n                                            <defs>\n                                                <linearGradient id=\"colorUv\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n                                                    <stop offset=\"5%\" stopColor=\"#8884d8\" stopOpacity={0.8} />\n                                                    <stop offset=\"95%\" stopColor=\"#8884d8\" stopOpacity={0} />\n                                                </linearGradient>\n                                                <linearGradient id=\"colorPv\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n                                                    <stop offset=\"5%\" stopColor=\"#82ca9d\" stopOpacity={0.8} />\n                                                    <stop offset=\"95%\" stopColor=\"#82ca9d\" stopOpacity={0} />\n                                                </linearGradient>\n                                            </defs>\n                                            <XAxis\n                                              dataKey=\"date\"\n                                              tickFormatter={(value) => {\n                                                return moment(value).format('LL')\n                                            }}\n                                              tickCount={this.state.vitalsign.length}\n                                            />\n                                            <YAxis\n                                              domain={[dataMin => (Math.abs(dataMin)), dataMax => (dataMax * 1.1).toFixed(0)]}\n                                            />\n                                            <CartesianGrid strokeDasharray=\"3 3\" />\n                                            <Tooltip\n                                              labelFormatter={(value) => (value && moment(value).isValid() ? moment(value).format('LL') : '--')}\n                                            />\n                                            <Line\n                                              type=\"monotone\"\n                                              dataKey=\"weight\"\n                                              stroke=\"#8884d8\"\n                                              fillOpacity={1}\n                                              strokeWidth={4}\n                                              fill=\"url(#colorUv)\"\n                                            />\n                                        </ComposedChart>\n                                    </ResponsiveContainer>\n                                </div>\n                                <Divider>Respiratory Rate (breaths/min)</Divider>\n                                <div style={{height: 200}}>\n                                    <ResponsiveContainer>\n                                        <ComposedChart\n                                          width={700}\n                                          height={200}\n                                          data={this.state.vitalsign.reverse()}\n                                          margin={{top: 10, right: 30, left: 0, bottom: 0}}\n                                        >\n                                            <defs>\n                                                <linearGradient id=\"colorUv\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n                                                    <stop offset=\"5%\" stopColor=\"#82ca9d\" stopOpacity={0.8} />\n                                                    <stop offset=\"95%\" stopColor=\"#82ca9d\" stopOpacity={0} />\n                                                </linearGradient>\n                                                <linearGradient id=\"colorPv\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n                                                    <stop offset=\"5%\" stopColor=\"#82ca9d\" stopOpacity={0.8} />\n                                                    <stop offset=\"95%\" stopColor=\"#82ca9d\" stopOpacity={0} />\n                                                </linearGradient>\n                                            </defs>\n                                            <XAxis\n                                              dataKey=\"date\"\n                                              tickFormatter={(value) => {\n                                                return moment(value).format('LL')\n                                            }}\n                                              tickCount={this.state.vitalsign.length}\n                                            />\n                                            <YAxis\n                                              domain={[dataMin => (Math.abs(dataMin)), dataMax => (dataMax * 1.1).toFixed(0)]}\n                                            />\n                                            <CartesianGrid strokeDasharray=\"3 3\" />\n                                            <Tooltip\n                                              labelFormatter={(value) => (value && moment(value).isValid() ? moment(value).format('LL') : '--')}\n                                            />\n                                            <Line\n                                              type=\"monotone\"\n                                              dataKey=\"resp_rate\"\n                                              stroke=\"#82ca9d\"\n                                              fillOpacity={1}\n                                              strokeWidth={4}\n                                              fill=\"url(#colorUv)\"\n                                            />\n                                        </ComposedChart>\n                                    </ResponsiveContainer>\n                                </div>\n                                <Divider>Creatinine Level</Divider>\n                                <div style={{height: 200}}>\n                                    <ResponsiveContainer>\n                                        <ComposedChart\n                                          width={700}\n                                          height={200}\n                                          data={this.state.vitalsign.reverse()}\n                                          margin={{top: 10, right: 30, left: 0, bottom: 0}}\n                                        >\n                                            <defs>\n                                                <linearGradient id=\"colorUv\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n                                                    <stop offset=\"5%\" stopColor=\"#82ca9d\" stopOpacity={0.8} />\n                                                    <stop offset=\"95%\" stopColor=\"#82ca9d\" stopOpacity={0} />\n                                                </linearGradient>\n                                                <linearGradient id=\"colorPv\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n                                                    <stop offset=\"5%\" stopColor=\"#82ca9d\" stopOpacity={0.8} />\n                                                    <stop offset=\"95%\" stopColor=\"#82ca9d\" stopOpacity={0} />\n                                                </linearGradient>\n                                            </defs>\n                                            <XAxis\n                                              dataKey=\"date\"\n                                              tickFormatter={(value) => {\n                                                return moment(value).format('LL')\n                                            }}\n                                              tickCount={this.state.vitalsign.length}\n                                            />\n                                            <YAxis\n                                              domain={[dataMin => (Math.abs(dataMin)), dataMax => (dataMax * 1.1).toFixed(0)]}\n                                            />\n                                            <CartesianGrid strokeDasharray=\"3 3\" />\n                                            <Tooltip\n                                              labelFormatter={(value) => (value && moment(value).isValid() ? moment(value).format('LL') : '--')}\n                                            />\n                                            <Line\n                                              type=\"monotone\"\n                                              dataKey=\"creatinine\"\n                                              stroke=\"#82ca9d\"\n                                              fillOpacity={1}\n                                              strokeWidth={4}\n                                              fill=\"url(#colorUv)\"\n                                            />\n                                        </ComposedChart>\n                                    </ResponsiveContainer>\n                                </div>\n                                <Divider>Haemoglobin Level</Divider>\n                                <div style={{height: 200}}>\n                                    <ResponsiveContainer>\n                                        <ComposedChart\n                                          width={700}\n                                          height={200}\n                                          data={this.state.vitalsign.reverse()}\n                                          margin={{top: 10, right: 30, left: 0, bottom: 0}}\n                                        >\n                                            <defs>\n                                                <linearGradient id=\"colorUv\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n                                                    <stop offset=\"5%\" stopColor=\"#82ca9d\" stopOpacity={0.8} />\n                                                    <stop offset=\"95%\" stopColor=\"#82ca9d\" stopOpacity={0} />\n                                                </linearGradient>\n                                                <linearGradient id=\"colorPv\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n                                                    <stop offset=\"5%\" stopColor=\"#82ca9d\" stopOpacity={0.8} />\n                                                    <stop offset=\"95%\" stopColor=\"#82ca9d\" stopOpacity={0} />\n                                                </linearGradient>\n                                            </defs>\n                                            <XAxis\n                                              dataKey=\"date\"\n                                              tickFormatter={(value) => {\n                                                return moment(value).format('LL')\n                                            }}\n                                              tickCount={this.state.vitalsign.length}\n                                            />\n                                            <YAxis\n                                              domain={[dataMin => (Math.abs(dataMin)), dataMax => (dataMax * 1.1).toFixed(0)]}\n                                            />\n                                            <CartesianGrid strokeDasharray=\"3 3\" />\n                                            <Tooltip\n                                              labelFormatter={(value) => (value && moment(value).isValid() ? moment(value).format('LL') : '--')}\n                                            />\n                                            <Line\n                                              type=\"monotone\"\n                                              dataKey=\"haemoglobin\"\n                                              stroke=\"#82ca9d\"\n                                              fillOpacity={1}\n                                              strokeWidth={4}\n                                              fill=\"url(#colorUv)\"\n                                            />\n                                        </ComposedChart>\n                                    </ResponsiveContainer>\n                                </div>\n                                <Divider>Urea Level</Divider>\n                                <div style={{height: 200}}>\n                                    <ResponsiveContainer>\n                                        <ComposedChart\n                                          width={700}\n                                          height={200}\n                                          data={this.state.vitalsign.reverse()}\n                                          margin={{top: 10, right: 30, left: 0, bottom: 0}}\n                                        >\n                                            <defs>\n                                                <linearGradient id=\"colorUv\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n                                                    <stop offset=\"5%\" stopColor=\"#82ca9d\" stopOpacity={0.8} />\n                                                    <stop offset=\"95%\" stopColor=\"#82ca9d\" stopOpacity={0} />\n                                                </linearGradient>\n                                                <linearGradient id=\"colorPv\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n                                                    <stop offset=\"5%\" stopColor=\"#82ca9d\" stopOpacity={0.8} />\n                                                    <stop offset=\"95%\" stopColor=\"#82ca9d\" stopOpacity={0} />\n                                                </linearGradient>\n                                            </defs>\n                                            <XAxis\n                                              dataKey=\"date\"\n                                              tickFormatter={(value) => {\n                                                return moment(value).format('LL')\n                                            }}\n                                              tickCount={this.state.vitalsign.length}\n                                            />\n                                            <YAxis\n                                              domain={[dataMin => (Math.abs(dataMin)), dataMax => (dataMax * 1.1).toFixed(0)]}\n                                            />\n                                            <CartesianGrid strokeDasharray=\"3 3\" />\n                                            <Tooltip\n                                              labelFormatter={(value) => (value && moment(value).isValid() ? moment(value).format('LL') : '--')}\n                                            />\n                                            <Line\n                                              type=\"monotone\"\n                                              dataKey=\"urea\"\n                                              stroke=\"#82ca9d\"\n                                              fillOpacity={1}\n                                              strokeWidth={4}\n                                              fill=\"url(#colorUv)\"\n                                            />\n                                        </ComposedChart>\n                                    </ResponsiveContainer>\n                                </div>\n                                <Divider>Uric Acid Level</Divider>\n                                <div style={{height: 200}}>\n                                    <ResponsiveContainer>\n                                        <ComposedChart\n                                          width={700}\n                                          height={200}\n                                          data={this.state.vitalsign.reverse()}\n                                          margin={{top: 10, right: 30, left: 0, bottom: 0}}\n                                        >\n                                            <defs>\n                                                <linearGradient id=\"colorUv\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n                                                    <stop offset=\"5%\" stopColor=\"#82ca9d\" stopOpacity={0.8} />\n                                                    <stop offset=\"95%\" stopColor=\"#82ca9d\" stopOpacity={0} />\n                                                </linearGradient>\n                                                <linearGradient id=\"colorPv\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n                                                    <stop offset=\"5%\" stopColor=\"#82ca9d\" stopOpacity={0.8} />\n                                                    <stop offset=\"95%\" stopColor=\"#82ca9d\" stopOpacity={0} />\n                                                </linearGradient>\n                                            </defs>\n                                            <XAxis\n                                              dataKey=\"date\"\n                                              tickFormatter={(value) => {\n                                                return moment(value).format('LL')\n                                            }}\n                                              tickCount={this.state.vitalsign.length}\n                                            />\n                                            <YAxis\n                                              domain={[dataMin => (Math.abs(dataMin)), dataMax => (dataMax * 1.1).toFixed(0)]}\n                                            />\n                                            <CartesianGrid strokeDasharray=\"3 3\" />\n                                            <Tooltip\n                                              labelFormatter={(value) => (value && moment(value).isValid() ? moment(value).format('LL') : '--')}\n                                            />\n                                            <Line\n                                              type=\"monotone\"\n                                              dataKey=\"uric_acid\"\n                                              stroke=\"#82ca9d\"\n                                              fillOpacity={1}\n                                              strokeWidth={4}\n                                              fill=\"url(#colorUv)\"\n                                            />\n                                        </ComposedChart>\n                                    </ResponsiveContainer>\n                                </div>\n                            </Tabs.TabPane>\n                            <Tabs.TabPane tab=\"Details\" key={2}>\n                                <CustomizedTable\n                                  columns={columns}\n                                  pagination={false}\n                                  dataSource={this.state.vitalsign}\n                                />\n                                <InfiniteFeedLoaderButton\n                                  loaderFunction={() => this.loadInvoices(that.state.next)}\n                                  loading={this.state.loading}\n                                  hidden={!this.state.next}\n                                />\n                                <Modal\n                                  title={null}\n                                  visible={this.state.visibleMail}\n                                  onOk={this.sendMailToPatient}\n                                  onCancel={this.mailModalClose}\n                                  footer={[\n                                        <Button key=\"back\" onClick={this.mailModalClose}>\n                                            Cancel\n                                        </Button>,\n                                        <Button key=\"submit\" type=\"primary\" onClick={this.sendMailToPatient}>\n                                            Send\n                                        </Button>,\n                                    ]}\n                                >\n                                    <p>Send Report Manual To {this.state.patientName} ?</p>\n                                    <Input\n                                      value={this.state.mail_to}\n                                      placeholder=\"Email\"\n                                      onChange={(e)=>that.updateFormValue('mail_to',e.target.value)}\n                                    />\n                                </Modal>\n                            </Tabs.TabPane>\n\n                        </Tabs>\n                    </Card>\n                </Route>\n</Switch>\n)\n        } \n            return (\n<div>\n                <Card\n                  bodyStyle={{padding: 0}}\n                  title={this.state.currentPatient ? `${this.state.currentPatient.user.first_name  } Report Manual` : \"Patients Report Manual\"}\n                  extra={(\n<Button.Group>\n                        <Button type=\"primary\" onClick={() => that.props.togglePatientListModal(true)}>\n                            <Icon type=\"plus\" />Add\n                        </Button>\n</Button.Group>\n)}\n                />\n                {this.state.vitalsign.map(vitalsign => (\n<div>\n                    <Card\n                      style={{marginTop: 10}}\n                      title={(\n<small>{vitalsign.date ? moment(vitalsign.date).format('ll') : null}\n                              <Link to={`/patient/${  vitalsign.patient_data.id  }/emr/vitalsigns`}>\n                                  &nbsp;&nbsp; {vitalsign.patient_data.user ? vitalsign.patient_data.user.first_name : null} (ID: {vitalsign.patient_data.custom_id ? vitalsign.patient_data.custom_id : vitalsign.patient_data.id})&nbsp;\n                              </Link>\n                              <span>, {vitalsign.patient_data.gender}</span>\n</small>\n)}\n                      bodyStyle={{padding: 0}}\n                    >\n                        <Table\n                          columns={columns}\n                          pagination={false}\n                          dataSource={[vitalsign]}\n                          footer={() => VitalSignFooter(vitalsign)}\n                        />\n                    </Card>\n</div>\n))}\n                <InfiniteFeedLoaderButton\n                  loaderFunction={() => this.loadVitalsigns(that.state.next)}\n                  loading={this.state.loading}\n                  hidden={!this.state.next}\n                />\n\n                <Modal\n                  title={null}\n                  visible={this.state.visibleMail}\n                  onOk={this.sendMailToPatient}\n                  onCancel={this.mailModalClose}\n                  footer={[\n                        <Button key=\"back\" onClick={this.mailModalClose}>\n                            Cancel\n                        </Button>,\n                        <Button key=\"submit\" type=\"primary\" onClick={this.sendMailToPatient}>\n                            Send\n                        </Button>,\n                    ]}\n                >\n                    <p>Send Report Manual  To {this.state.patientName} ?</p>\n                    <Input\n                      value={this.state.mail_to}\n                      placeholder=\"Email\"\n                      onChange={(e)=>that.updateFormValue('mail_to',e.target.value)}\n                    />\n                </Modal>\n</div>\n)\n        \n    }\n\n}\n\nexport default PatientVitalSign;\n\nfunction CustomizedTooltip(value, name, props) {\n    console.log(value, name, props);\n    return [\"formatted value\", \"formatted name\"]\n}\n\nfunction VitalSignFooter(presc) {\n    if (presc) {\n        console.log(presc)\n        return (\n<div>\n            {presc.doctor ? (\n<Tag color={presc.doctor ? presc.doctor.calendar_colour : null}>\n                <b>{`prescribed by  ${  presc.doctor.user.first_name}`} </b>\n</Tag>\n) : null}\n\n            {presc.practice_data ? (\n<Tag style={{float: 'right'}}>\n                <AntTooltip title=\"Practice Name\">\n                    <b>{presc.practice_data.name} </b>\n                </AntTooltip>\n</Tag>\n) : null}\n</div>\n)\n    }\n    return null\n}\n","import React from \"react\";\nimport {\n    Card,\n    Row,\n    Form,\n    Col,\n    List,\n    Button,\n    Table,\n    InputNumber,\n    Input,\n    Icon,\n    Affix,\n    Dropdown,\n    Menu,\n    DatePicker\n} from 'antd';\nimport {remove} from 'lodash';\nimport {Redirect} from 'react-router-dom';\nimport moment from \"moment\";\nimport {displayMessage, getAPI, interpolate, postAPI} from \"../../../utils/common\";\nimport {PRACTICESTAFF, PROCEDURE_CATEGORY, TREATMENTPLANS_API} from \"../../../constants/api\";\nimport {DOCTORS_ROLE} from \"../../../constants/dataKeys\";\nimport {loadDoctors} from \"../../../utils/clinicUtils\";\n\n\nclass AddorEditDynamicCompletedTreatmentPlans extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            loadingProcedures: true,\n            procedure_category: [],\n            tableFormValues: [],\n            addNotes: {},\n            practiceDoctors: [],\n            selectedDoctor: {},\n            selectedDate: moment()\n        }\n    }\n\n    componentDidMount() {\n        if (this.props.editId) {\n            this.setState(function (prevState) {\n                const tableValues = [];\n                this.props.editTreatmentPlan.treatment_plans.forEach(function (treatment) {\n                    const randId = Math.random().toFixed(7);\n                    tableValues.push({\n                        ...treatment,\n                        ...treatment.procedure,\n                        _id: randId,\n                    })\n                });\n                return {\n                    ...this.props.editTreatmentPlan,\n                    tableFormValues: tableValues,\n                    selectedDate: moment(this.props.editTreatmentPlan.date),\n                    selectedDoctor: this.props.editTreatmentPlan.doctor\n                }\n            })\n        }\n        this.loadProcedures();\n        loadDoctors(this);\n    }\n\n    calculateItem = (_id) => {\n        const {getFieldsValue} = this.props.form;\n        // console.log(getFieldsValue());\n        this.setState(function (prevState) {\n            const newtableFormValues = [...prevState.tableFormValues];\n            newtableFormValues.forEach(function (item) {\n\n            });\n        });\n    }\n\n    addNotes = (_id, option) => {\n        this.setState(function (prevState) {\n            return {addNotes: {...prevState.addNotes, [_id]: !!option}}\n        })\n    }\n\n    removeTreatment = (_id) => {\n        this.setState(function (prevState) {\n            return {\n                tableFormValues: [...remove(prevState.tableFormValues, function (item) {\n                    return item._id != _id;\n                })]\n            }\n        });\n    }\n\n    add = (item) => {\n        const that = this;\n        this.setState(function (prevState) {\n            const randId = Math.random().toFixed(7);\n            return {\n                addNotes: {...prevState.addNotes, [randId]: !!item.default_notes},\n                tableFormValues: [{\n                    ...item,\n                    _id: randId,\n                }, ...prevState.tableFormValues]\n            }\n        }, function () {\n            // if (that.bottomPoint)\n            //     that.bottomPoint.scrollIntoView({behavior: 'smooth'});\n        });\n    };\n\n    loadProcedures() {\n        const that = this;\n        const params = {};\n        if (this.state.searchString) {\n            params.name = this.state.searchString;\n        }\n        that.setState({\n            loadingProcedures: true\n        })\n        const successFn = function (data) {\n            if (!params.name || that.state.searchString == params.name)\n                that.setState({\n                    // procedure_category: data.results,\n                    loadingProcedures: false,\n                    filteredItems: data.results,\n                })\n        };\n        const errorFn = function () {\n            that.setState({\n                loadingProcedures: false\n            })\n        };\n\n        getAPI(interpolate(PROCEDURE_CATEGORY, [this.props.active_practiceId]), successFn, errorFn, params);\n    }\n\n    selectDoctor = (doctor) => {\n        this.setState({\n            selectedDoctor: doctor\n        })\n    }\n\n    selectedDate = (date) => {\n        this.setState({\n            selectedDate: date\n        })\n    }\n\n    handleSubmit = (e) => {\n        const that = this;\n        e.preventDefault();\n        this.props.form.validateFields((err, values) => {\n            if (!err) {\n                // console.log('Received values of form: ', values);\n                const reqData = {\n                    treatment_plans: [],\n                    patient: that.props.match.params.id,\n                    \"doctor\": that.state.selectedDoctor.id,\n                    \"date\": that.state.selectedDate && moment(that.state.selectedDate).isValid() ? that.state.selectedDate.format('YYYY-MM-DD') : null,\n                    \"practice\": that.props.active_practiceId,\n                };\n                if (that.props.editId) {\n                    reqData.id = that.props.editTreatmentPlan.id\n                }\n                that.state.tableFormValues.forEach(function (item) {\n                    // console.log(item);\n                    item.quantity = values.quantity[item._id];\n                    item.cost = values.cost[item._id];\n                    item.discount = values.discount[item._id];\n                    if (values.notes)\n                        item.notes = values.notes[item._id];\n                    const sendingItem = {\n                        \"procedure\": item.id,\n                        \"cost\": item.cost,\n                        \"quantity\": item.quantity,\n                        \"margin\": item.margin,\n                        \"default_notes\": item.notes,\n                        \"is_active\": true,\n                        \"is_completed\": true,\n                        \"discount\": item.discount,\n                        \"discount_type\": \"%\",\n\n                    };\n                    reqData.treatment_plans.push(sendingItem);\n                });\n\n                const successFn = function (data) {\n                    displayMessage(\"Inventory updated successfully\");\n                    if (that.props.loadData)\n                        that.props.loadData();\n                    const url = `/patient/${  that.props.match.params.id  }/emr/workdone`;\n                    that.props.history.replace(url);\n                };\n                const errorFn = function () {\n\n                };\n                postAPI(interpolate(TREATMENTPLANS_API, [that.props.match.params.id]), reqData, successFn, errorFn);\n            }\n        });\n    };\n\n    searchValues = (value) => {\n        const that = this;\n        this.setState(function (prevState) {\n            return {searchString: value}\n        }, function () {\n            that.loadProcedures();\n        });\n        return false;\n    }\n\n    render() {\n        const that = this;\n        const {getFieldDecorator, getFieldValue, getFieldsValue} = this.props.form;\n        const formItemLayout = {\n            labelCol: {\n                xs: {span: 24},\n                sm: {span: 4},\n            },\n            wrapperCol: {\n                xs: {span: 24},\n                sm: {span: 20},\n            },\n        };\n        const formItemLayoutWithOutLabel = {\n            labelCol: {\n                xs: {span: 24},\n                sm: {span: 24},\n            },\n            wrapperCol: {\n                xs: {span: 24},\n                sm: {span: 24},\n            },\n        };\n        const consumeRow = [{\n            title: 'Treatments',\n            dataIndex: 'name',\n            key: 'name',\n            render: (name, record) => (\n<span>\n                <b>{name}</b><br />\n                {this.state.addNotes[record._id] || this.props.editId ? (\n                    <Form.Item\n                      key={`default_notes[${record._id}]`}\n                      {...formItemLayout}\n                    >\n                        {getFieldDecorator(`notes[${record._id}]`, {\n                            validateTrigger: ['onChange', 'onBlur'],\n                            rules: [{\n                                message: \"This field is required.\",\n                            }],\n                            initialValue: record.default_notes\n                        })(\n                            <Input.TextArea min={0} placeholder=\"Notes...\" />\n                        )}\n                    </Form.Item>\n                  )\n                    : <a onClick={() => this.addNotes(record._id, true)}>+ Add Note</a>}\n</span>\n)\n        }, {\n            title: 'Quantity',\n            dataIndex: 'quantity',\n            key: 'quantity',\n            render: (name, record) => (\n<Form.Item\n  key={`quantity[${record._id}]`}\n  {...formItemLayout}\n>\n                {getFieldDecorator(`quantity[${record._id}]`, {\n                    validateTrigger: ['onChange', 'onBlur'],\n                    rules: [{\n                        required: true,\n                        message: \"This field is required.\",\n                    }],\n                    initialValue: record.quantity,\n                })(\n                    <InputNumber\n                      min={0}\n                      placeholder=\"Quantity\"\n                      size=\"small\"\n                      onChange={() => this.calculateItem(record._id)}\n                    />\n                )}\n</Form.Item>\n)\n        }, {\n            title: 'Cost',\n            dataIndex: 'cost',\n            key: 'cost',\n            render: (name, record) => (\n<Form.Item\n  key={`cost[${record._id}]`}\n  {...formItemLayout}\n>\n                {getFieldDecorator(`cost[${record._id}]`, {\n                    validateTrigger: ['onChange', 'onBlur'],\n                    rules: [{\n                        required: true,\n                        message: \"This field is required.\",\n                    }],\n                    initialValue: record.cost\n                })(\n                    <InputNumber\n                      min={0}\n                      placeholder=\"Cost\"\n                      size=\"small\"\n                      onChange={() => this.calculateItem(record._id)}\n                    />\n                )}\n</Form.Item>\n)\n        }, {\n            title: 'Discount',\n            dataIndex: 'discount',\n            key: 'discount',\n            render: (name, record) => (\n<Form.Item\n  key={`discount[${record._id}]`}\n  {...formItemLayout}\n>\n                {getFieldDecorator(`discount[${record._id}]`, {\n                    validateTrigger: ['onChange', 'onBlur'],\n                    rules: [{\n                        message: \"This field is required.\",\n                    }],\n                })(\n                    <InputNumber\n                      min={0}\n                      placeholder=\"Discount\"\n                      size=\"small\"\n                      onChange={() => this.calculateItem(record._id)}\n                    />\n                )} %\n</Form.Item>\n)\n        }, {\n            title: 'Total',\n            dataIndex: 'total',\n            key: 'total',\n            render: (total, record) => (\n<span>\n                {total}\n                <Button\n                  icon=\"close\"\n                  onClick={() => this.removeTreatment(record._id)}\n                  type=\"danger\"\n                  shape=\"circle\"\n                  size=\"small\"\n                />\n</span>\n)\n        }];\n        return (\n<div>\n\n            <Card title=\"Completed Procedures\">\n                <Row>\n                    <Col span={17}>\n                        <Form onSubmit={this.handleSubmit}>\n                            <Table\n                              pagination={false}\n                              bordered\n                              dataSource={this.state.tableFormValues}\n                              columns={consumeRow}\n                            />\n\n                            <Affix offsetBottom={0}>\n                                <Card>\n                                    <span>by &nbsp;&nbsp;</span>\n                                    <Dropdown\n                                      placement=\"topCenter\"\n                                      overlay={(\n<Menu>\n                                        {this.state.practiceDoctors.map(doctor => (\n                                            <Menu.Item key=\"0\">\n                                                <a onClick={() => this.selectDoctor(doctor)}>{doctor.user.first_name}</a>\n                                            </Menu.Item>\n                                          ))}\n</Menu>\n)}\n                                      trigger={['click']}\n                                    >\n                                        <a className=\"ant-dropdown-link\" href=\"#\">\n                                            <b>\n                                                {this.state.selectedDoctor.user ? this.state.selectedDoctor.user.first_name : 'No DOCTORS Found'}\n                                            </b>\n                                        </a>\n                                    </Dropdown>\n                                    <span> &nbsp;&nbsp;on&nbsp;&nbsp;</span>\n                                    <DatePicker\n                                      value={this.state.selectedDate}\n                                      onChange={(value) => this.selectedDate(value)}\n                                      format=\"DD-MM-YYYY\"\n                                      allowClear={false}\n                                    />\n                                    <Form.Item\n                                      {...formItemLayoutWithOutLabel}\n                                      style={{marginBottom: 0, float: 'right'}}\n                                    >\n                                        <Button type=\"primary\" htmlType=\"submit\" style={{margin: 5}}>Save Treatment\n                                            Plan\n                                        </Button>\n                                        {that.props.history ? (\n                                            <Button\n                                              style={{margin: 5, float: 'right'}}\n                                              onClick={() => that.props.history.goBack()}\n                                            >\n                                                Cancel\n                                            </Button>\n                                          ) : null}\n                                    </Form.Item>\n                                </Card>\n                            </Affix>\n                            <div ref={el => {\n                                that.bottomPoint = el;\n                            }}\n                            />\n                        </Form>\n                    </Col>\n                    <Col span={7}>\n                        <Affix offsetTop={0}>\n                            <div style={{backgroundColor: '#ddd', padding: 8}}>\n                                <Input.Search\n                                  placeholder=\"Search in plans ...\"\n                                  onChange={e => this.searchValues(e.target.value)}\n                                />\n                            </div>\n                            <List\n                              size=\"small\"\n                              loading={this.state.loadingProcedures}\n                              style={{maxHeight: '100vh', overflowX: 'scroll'}}\n                              itemLayout=\"horizontal\"\n                              dataSource={this.state.filteredItems}\n                              renderItem={item => (\n                                      <List.Item onClick={() => this.add(item)}>\n                                          <List.Item.Meta\n                                            title={item.name}\n                                          />\n                                      </List.Item>\n)}\n                            />\n                        </Affix>\n                    </Col>\n                </Row>\n            </Card>\n\n</div>\n)\n    }\n}\n\nexport default Form.create()(AddorEditDynamicCompletedTreatmentPlans)\n","import React from \"react\";\nimport {Button, Card, Checkbox, Divider, Icon, Table, Popconfirm, Menu, Dropdown, Tag, Tooltip, Input,Modal} from \"antd\";\nimport moment from \"moment\";\nimport {Link, Redirect, Route, Switch} from \"react-router-dom\";\nimport * as _ from \"lodash\";\nimport {getAPI, interpolate, putAPI, postAPI, displayMessage} from \"../../../utils/common\";\nimport {\n    PROCEDURE_CATEGORY,\n    PRODUCT_MARGIN,\n    TREATMENTPLANS_API,\n    SINGLE_REATMENTPLANS_API,\n    TREATMENTPLANS_PDF\n} from \"../../../constants/api\";\nimport {SELECT_FIELD, SUCCESS_MSG_TYPE} from \"../../../constants/dataKeys\";\nimport AddorEditDynamicCompletedTreatmentPlans from \"./AddorEditDynamicCompletedTreatmentPlans\";\nimport InfiniteFeedLoaderButton from \"../../common/InfiniteFeedLoaderButton\";\nimport {BACKEND_BASE_URL} from \"../../../config/connect\";\n\nimport {sendMail} from \"../../../utils/clinicUtils\";\n\nconst {confirm} = Modal;\n\nclass PatientCompletedProcedures extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            currentPatient: this.props.currentPatient,\n            active_practiceId: this.props.active_practiceId,\n            treatmentPlans: [],\n            procedure_category: null,\n            completedTreatmentPlans: [],\n            incompletedTreatmentPlans: [],\n            productMargin: [],\n            loading: true\n        }\n        this.loadTreatmentPlans = this.loadTreatmentPlans.bind(this);\n        this.editTreatmentPlanData = this.editTreatmentPlanData.bind(this);\n    }\n\n    componentDidMount() {\n        this.loadTreatmentPlans();\n        this.loadProductMargin();\n    }\n\n    loadProductMargin() {\n        const that = this;\n        const successFn = function (data) {\n            that.setState({\n                productMargin: data,\n                loading: false\n            })\n        }\n        const errorFn = function () {\n            that.setState({\n                loading: false\n            })\n        }\n        getAPI(PRODUCT_MARGIN, successFn, errorFn);\n    }\n\n    loadTreatmentPlans(page = 1) {\n        const incompleted = [];\n        const that = this;\n        const successFn = function (data) {\n            that.setState(function (prevState) {\n                if (data.current == 1)\n                    return {\n                        treatmentPlans: [...data.results],\n                        next: data.next,\n                        loading: false\n                    }\n                return {\n                    treatmentPlans: [...prevState.treatmentPlans, ...data.results],\n                    next: data.next,\n                    loading: false\n                }\n            })\n            data.results.forEach(function (treatmentplan) {\n                if (!treatmentplan.is_completed) {\n                    incompleted.push(treatmentplan)\n                }\n            })\n            that.setState(function (prevState) {\n                return {\n                    incompletedTreatmentPlans: [...prevState.incompletedTreatmentPlans, ...incompleted],\n                    loading: false\n                }\n            })\n        }\n        const errorFn = function () {\n            that.setState({\n                loading: false\n            })\n\n        }\n        const apiParams = {\n            page,\n            practice: this.props.active_practiceId,\n            complete: true\n        };\n        if (this.props.match.params.id) {\n            apiParams.patient = this.props.match.params.id;\n        }\n        if (this.props.showAllClinic && this.props.match.params.id) {\n            delete (apiParams.practice)\n        }\n        getAPI(TREATMENTPLANS_API, successFn, errorFn, apiParams)\n    }\n\n    editTreatmentPlanData(record) {\n        this.setState({\n            editTreatmentPlan: record,\n        });\n        // console.log(\"props history\",this.props);\n        const {id} = this.props.match.params;\n        this.props.history.push(`/patient/${  id  }/emr/workdone/edit`);\n\n    }\n\n    deleteTreatmentPlans(record) {\n        const that = this;\n        confirm({\n            title: 'Are you sure to delete this item?',\n            okText: 'Yes',\n            okType: 'danger',\n            cancelText: 'No',\n            onOk() {\n                const obj = {\n                    id: record.id,\n                    patient: record.patient.id,\n                    is_active: false\n                }\n\n\n                const successFn = function (data) {\n                    displayMessage(SUCCESS_MSG_TYPE, \"Completed Procedure Deleted Successfully!\");\n                    that.loadTreatmentPlans();\n                }\n                const errorFn = function () {\n\n                };\n                postAPI(interpolate(TREATMENTPLANS_API, [that.props.match.params.id], null), obj, successFn, errorFn);\n            },\n            onCancel() {\n                console.log('Cancel');\n            },\n        });\n    }\n\n    loadPDF(id) {\n        const that = this;\n        const successFn = function (data) {\n            if (data.report)\n                window.open(BACKEND_BASE_URL + data.report);\n        }\n        const errorFn = function () {\n\n        }\n        getAPI(interpolate(TREATMENTPLANS_PDF, [id]), successFn, errorFn);\n    }\n\n    updateFormValue =(type,value)=>{\n        this.setState({\n            [type]: value\n        })\n    };\n\n    mailModalOpen =() =>{\n        this.setState({\n            visibleMail:true\n        })\n    };\n\n    mailModalClose =() =>{\n        this.setState({\n            visibleMail:false\n        })\n    };\n\n    sendPatientMail =(treatment)=>{\n        this.mailModalOpen()\n        this.setState({\n            patientName:_.get(treatment,'patient.user.first_name'),\n            treatmentId:_.get(treatment,'id'),\n            mail_to:_.get(treatment,'patient.user.email')\n        })\n\n    };\n\n    sendMailToPatient =()=>{\n        const {mail_to ,treatmentId } = this.state;\n        const apiParams ={\n            mail_to,\n        }\n        sendMail(interpolate(TREATMENTPLANS_PDF,[treatmentId]),apiParams)\n        this.mailModalClose();\n    }\n\n    render() {\n        const that = this;\n\n        const columns = [{\n            title: '',\n            key: 'is_completed',\n            render: (text, record) => (record.is_completed ?\n                <Icon type=\"check-circle\" theme=\"twoTone\" style={{marginLeft: '8px', fontSize: '20px'}} /> :\n                null)\n        }, {\n            title: 'Procedure',\n            key: 'procedure.name',\n            dataIndex: 'procedure.name',\n\n        }, {\n            title: 'Quantity',\n            dataIndex: 'quantity',\n            initialValue: (this.state.editFields ? this.state.editFields.quantity : null),\n            key: 'quantity',\n        }, {\n            title: 'Discount',\n            dataIndex: 'discount',\n            key: 'discount',\n        }, {\n            title: 'Cost per  Unit',\n            dataIndex: 'cost',\n            key: 'cost',\n        }, {\n            title: 'Notes',\n            dataIndex: 'default_notes',\n            key: 'default_notes',\n        }];\n\n        if (this.props.match.params.id) {\n            return (\n<div>\n                <Switch>\n                    <Route\n                      exact\n                      path='/patient/:id/emr/workdone/add'\n                      render={(route) => <AddorEditDynamicCompletedTreatmentPlans {...this.state} {...that.props} {...route} loadData={this.loadTreatmentPlans} />}\n                    />\n                    <Route\n                      exact\n                      path='/patient/:id/emr/workdone/edit'\n                      render={(route) => (this.state.editTreatmentPlan ? (\n                               <AddorEditDynamicCompletedTreatmentPlans\n                                 {...this.state}\n                                 {...route}\n                                 {...that.props}\n                                 editId={this.state.editTreatmentPlan.id}\n                                 loadData={this.loadTreatmentPlans}\n                               />\n                             ) :\n                               <Redirect to={`/patient/${  this.props.match.params.id  }/emr/workdone`} />)}\n                    />\n                    <Route>\n\n                        <div>\n                            <Card\n                              bodyStyle={{padding: 0}}\n                              title={this.state.currentPatient ? `${this.state.currentPatient.user.first_name  } Completed Procedures` : \"Completed Procedures \"}\n                              extra={(\n<Button.Group>\n                                    <Link\n                                      to={`/patient/${  this.props.match.params.id  }/emr/workdone/add`}\n                                    ><Button><Icon\n                                      type=\"plus\"\n                                    />Add\n                                     </Button>\n                                    </Link>\n</Button.Group>\n)}\n                            />\n\n                            {this.state.treatmentPlans.map((treatment) => (\n<Card\n  bodyStyle={{padding: 0}}\n  style={{marginTop: 15}}\n>\n                                    <div style={{padding: 16}}>\n                                        <h4>{treatment.date ? moment(treatment.date).format('ll') : null}\n                                            <Dropdown.Button\n                                              size=\"small\"\n                                              style={{float: 'right'}}\n                                              overlay={(\n<Menu>\n                                                    <Menu.Item\n                                                      key=\"1\"\n                                                      onClick={() => that.editTreatmentPlanData(treatment)}\n                                                      disabled={(treatment.practice && treatment.practice.id != this.props.active_practiceId)}\n                                                    >\n                                                        <Icon type=\"edit\" />\n                                                        Edit\n                                                    </Menu.Item>\n                                                    <Menu.Item\n                                                      key=\"2\"\n                                                      onClick={() => that.deleteTreatmentPlans(treatment)}\n                                                      disabled={(treatment.practice && treatment.practice.id != this.props.active_practiceId)}\n                                                    >\n                                                        <Icon type=\"delete\" />\n                                                        Delete\n                                                    </Menu.Item>\n                                                    <Menu.Divider />\n                                                    <Menu.Item key=\"3\">\n                                                        <Link to={`/patient/${  treatment.patient  }/emr/timeline`}>\n                                                            <Icon type=\"clock-circle\" />\n                                                            &nbsp;\n                                                            Patient Timeline\n                                                        </Link>\n                                                    </Menu.Item>\n\n                                                    <Menu.Divider />\n                                                    <Menu.Item key=\"4\">\n                                                        <a onClick={() => this.sendPatientMail(treatment)}><Icon\n                                                          type=\"mail\"\n                                                        /> Send mail to patient\n                                                        </a>\n                                                    </Menu.Item>\n\n</Menu>\n)}\n                                            >\n                                                <a onClick={() => this.loadPDF(treatment.id)}><Icon type=\"printer\" /></a>\n                                            </Dropdown.Button>\n                                        </h4>\n\n                                    </div>\n                                    <Table\n                                      loading={this.state.loading}\n                                      columns={columns}\n                                      dataSource={treatment.treatment_plans}\n                                      footer={() => treatmentFooter(treatment)}\n                                      pagination={false}\n                                      key={treatment.id}\n                                    />\n</Card>\n)\n                            )}\n                            <InfiniteFeedLoaderButton\n                              loaderFunction={() => this.loadTreatmentPlans(that.state.next)}\n                              loading={this.state.loading}\n                              hidden={!this.state.next}\n                            />\n                            <Modal\n                              title={null}\n                              visible={this.state.visibleMail}\n                              onOk={this.sendMailToPatient}\n                              onCancel={this.mailModalClose}\n                              footer={[\n                                    <Button key=\"back\" onClick={this.mailModalClose}>\n                                        Cancel\n                                    </Button>,\n                                    <Button key=\"submit\" type=\"primary\" onClick={this.sendMailToPatient}>\n                                        Send\n                                    </Button>,\n                                ]}\n                            >\n                                <p>Send complete procedure To {this.state.patientName} ?</p>\n                                <Input\n                                  value={this.state.mail_to}\n                                  placeholder=\"Email\"\n                                  onChange={(e)=>that.updateFormValue('mail_to',e.target.value)}\n                                />\n                            </Modal>\n                        </div>\n                    </Route>\n                </Switch>\n</div>\n)\n        }\n        \n            return (\n<div>\n                <Card\n                  bodyStyle={{padding: 0}}\n                  title={this.state.currentPatient ? `${this.state.currentPatient.user.first_name  } Completed Procedures` : \"Completed Procedures \"}\n                  extra={(\n<Button.Group>\n                        <Button onClick={() => this.props.togglePatientListModal(true)}>\n                            <Icon\n                              type=\"plus\"\n                            />Add\n                        </Button>\n</Button.Group>\n)}\n                />\n                {this.state.treatmentPlans.map((treatment) => (\n<Card\n  bodyStyle={{padding: 0}}\n  key={treatment.id}\n  style={{marginTop: 15}}\n>\n                        <div style={{padding: 16}}>\n                            <h4>{treatment.date ? moment(treatment.date).format('ll') : null}\n                            <Link to={`/patient/${  treatment.patient.id  }/emr/workdone`}>\n                             &nbsp;&nbsp; {treatment.patient.user?treatment.patient.user.first_name:null} (ID: {treatment.patient.custom_id?treatment.patient.custom_id:treatment.patient.id})&nbsp;\n                            </Link>\n                            <span>, {treatment.patient.gender}</span>\n                                <Dropdown.Button\n                                  size=\"small\"\n                                  style={{float: 'right'}}\n                                  overlay={(\n<Menu>\n                                        <Menu.Item key=\"1\" disabled={(treatment.practice && treatment.practice.id != this.props.active_practiceId)}>\n                                            <Link to={`/patient/${  treatment.patient.id  }/emr/workdone/edit`}>\n                                                <Icon type=\"edit\" />\n                                                &nbsp;\n                                                Edit\n                                            </Link>\n                                        </Menu.Item>\n                                        <Menu.Item\n                                          key=\"2\"\n                                          onClick={() => that.deleteTreatmentPlans(treatment)}\n                                          disabled={(treatment.practice && treatment.practice.id != this.props.active_practiceId)}\n                                        >\n                                            <Icon type=\"delete\" />\n                                            Delete\n                                        </Menu.Item>\n                                        <Menu.Divider />\n                                        <Menu.Item key=\"3\">\n                                            <Link to={`/patient/${  treatment.patient.id  }/emr/timeline`}>\n                                                <Icon type=\"clock-circle\" />\n                                                &nbsp;\n                                                Patient Timeline\n                                            </Link>\n                                        </Menu.Item>\n\n                                        <Menu.Divider />\n                                        <Menu.Item key=\"4\">\n                                            <a onClick={() => this.sendPatientMail(treatment)}><Icon\n                                              type=\"mail\"\n                                            /> Send mail to patient\n                                            </a>\n                                        </Menu.Item>\n</Menu>\n)}\n                                >\n                                    <a onClick={() => this.loadPDF(treatment.id)}><Icon type=\"printer\" /></a>\n                                </Dropdown.Button>\n                            </h4>\n\n                        </div>\n                        <Table\n                          loading={this.state.loading}\n                          columns={columns}\n                          dataSource={treatment.treatment_plans}\n                          footer={() => treatmentFooter(treatment)}\n                          pagination={false}\n                          key={treatment.id}\n                        />\n\n</Card>\n)\n                )}\n                <InfiniteFeedLoaderButton\n                  loaderFunction={() => this.loadTreatmentPlans(that.state.next)}\n                  loading={this.state.loading}\n                  hidden={!this.state.next}\n                />\n\n                <Modal\n                  title={null}\n                  visible={this.state.visibleMail}\n                  onOk={this.sendMailToPatient}\n                  onCancel={this.mailModalClose}\n                  footer={[\n                        <Button key=\"back\" onClick={this.mailModalClose}>\n                            Cancel\n                        </Button>,\n                        <Button key=\"submit\" type=\"primary\" onClick={this.sendMailToPatient}>\n                            Send\n                        </Button>,\n                    ]}\n                >\n                    <p>Send Treatment Notes To {this.state.patientName} ?</p>\n                    <Input\n                      value={this.state.mail_to}\n                      placeholder=\"Email\"\n                      onChange={(e)=>that.updateFormValue('mail_to',e.target.value)}\n                    />\n                </Modal>\n</div>\n)\n        \n\n    }\n}\n\nexport default PatientCompletedProcedures;\n\nfunction treatmentFooter(presc) {\n    if (presc) {\n\n        return (\n<div>\n            {presc.doctor ? (\n<Tag color={presc.doctor ? presc.doctor.calendar_colour : null}>\n                <b>{`Completed by  ${  presc.doctor.user.first_name}`} </b>\n</Tag>\n) : null}\n            {presc.practice ? (\n<Tag style={{float: 'right'}}>\n                <Tooltip title=\"Practice Name\">\n                    <b>{presc.practice.name} </b>\n                </Tooltip>\n</Tag>\n) : null}\n</div>\n)\n    }\n    return null\n}\n","import React from \"react\";\nimport {\n    Card,\n    Row,\n    Col,\n    Form,\n    Table,\n    Divider,\n    Tabs,\n    List,\n    Button,\n    Input,\n    Select,\n    Radio,\n    InputNumber,\n    Icon,\n    Affix,\n    Popconfirm,\n    Tag\n} from 'antd';\nimport {remove} from \"lodash\";\nimport {Link, Route, Switch} from \"react-router-dom\";\nimport {DRUG_CATALOG, INVENTORY_ITEM_API, LABTEST_API,PRESCRIPTIONS_API, PRESCRIPTION_TEMPLATE} from \"../../../constants/api\";\nimport {displayMessage, getAPI, interpolate, postAPI, putAPI} from \"../../../utils/common\";\nimport {DURATIONS_UNIT, DOSE_REQUIRED, DRUG} from \"../../../constants/hardData\";\nimport {WARNING_MSG_TYPE} from \"../../../constants/dataKeys\";\n\n\nconst {TabPane} = Tabs;\nlet id = 0;\n\n\nclass PrescriptionTemplate extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            items: {},\n            filteredItems: {},\n            drugList: [],\n            labList: [],\n            formDrugList: [],\n            formLabList: [],\n            addInstructions: {},\n            changeDurationUnits: {},\n            addedDrugs: {},\n            addedLabs: {},\n            addTemplate: {},\n            formTemplateList: [],\n            searchStrings: {}\n\n        }\n        this.loadPrescriptionTemplate = this.loadPrescriptionTemplate.bind(this);\n        this.deletePrescriptionTemplate = this.deletePrescriptionTemplate.bind(this);\n    }\n\n    componentDidMount() {\n        this.loadDrugList();\n        this.loadLabList();\n        this.loadPrescriptionTemplate();\n    }\n\n    loadPrescriptionTemplate() {\n        const that = this;\n        const successFn = function (data) {\n            that.setState({\n                prescriptionTemplate: data.results,\n            })\n        };\n        const errorFn = function () {\n\n        };\n        console.log(\"template\", that.state.prescriptionTemplate);\n        getAPI(interpolate(PRESCRIPTION_TEMPLATE, [that.props.active_practiceId]), successFn, errorFn)\n    }\n\n    loadLabList() {\n        const that = this;\n        const successFn = function (data) {\n            that.setState({\n                labList: data.results,\n            })\n        };\n        const errorFn = function () {\n\n        };\n        getAPI(interpolate(LABTEST_API, [that.props.active_practiceId]), successFn, errorFn);\n    }\n\n    loadDrugList(page = 1) {\n        const that = this;\n        const successFn = function (data) {\n            that.setState(function (prevState) {\n                const items = {...prevState.items}\n                return {\n                    items: {...items, \"Drugs\": data.results},\n                    filteredItems: {...prevState.filteredItems, \"Drugs\": data.results}\n                }\n            })\n        }\n        const errorFn = function () {\n\n        }\n        const params = {\n            practice: this.props.active_practiceId,\n            item_type: DRUG,\n            page\n        };\n        if (that.state.searchStrings.Drugs) {\n            params.item_name = that.state.searchStrings.Drugs\n        }\n        getAPI(INVENTORY_ITEM_API, successFn, errorFn, params);\n    }\n\n    addDrug(item) {\n        this.setState(function (prevState) {\n            const randId = Math.random().toFixed(7);\n            if (prevState.addedDrugs[item.id]) {\n                displayMessage(WARNING_MSG_TYPE, \"Item Already Added\");\n                return false;\n            }\n            return {\n                addedDrugs: {...prevState.addedDrugs, [item.id]: true},\n                formDrugList: [...prevState.formDrugList, {\n                    ...item,\n                    _id: randId,\n                }]\n            }\n        });\n\n    }\n\n    addInstructions = (_id, option) => {\n        this.setState(function (prevState) {\n            return {addInstructions: {...prevState.addInstructions, [_id]: !!option}}\n        })\n    }\n\n    changeDurationUnits = (_id, option) => {\n        this.setState(function (prevState) {\n            return {changeDurationUnits: {...prevState.changeDurationUnits, [_id]: !!option}}\n        })\n    }\n\n    removeDrug = (_id) => {\n        this.setState(function (prevState) {\n            return {\n                formDrugList: [...remove(prevState.formDrugList, function (item) {\n                    return item._id != _id;\n                })]\n            }\n        });\n    }\n\n    removeLabs = (_id, item) => {\n        this.setState(function (prevState) {\n            return {\n                addedLabs: {...prevState.addedLabs, [item.id]: false},\n                formLabList: [...remove(prevState.formLabList, function (item) {\n                    return item._id != _id;\n                })]\n            }\n        });\n    }\n\n    addLabs = (item) => {\n        this.setState(function (prevState) {\n            const randId = Math.random().toFixed(7);\n            console.log(\"LAb state\", prevState);\n            if (prevState.addedLabs[item.id]) {\n                displayMessage(WARNING_MSG_TYPE, \"Item Already Added\");\n                return false;\n            }\n            return {\n                addedLabs: {...prevState.addedLabs, [item.id]: true},\n                formLabList: [...prevState.formLabList, {\n                    ...item,\n                    _id: randId,\n                }]\n            }\n            // console.log(\"ide\",this.state.tableFormValues);\n        });\n    };\n\n    addTemplate = (item) => {\n        this.setState(function (prevState) {\n            // console.log(\"templateData state\",prevState);\n            const randId = Math.random().toFixed(7);\n            if (prevState.addTemplate[item.id]) {\n                displayMessage(WARNING_MSG_TYPE, \"Item Already Added\");\n                return false;\n            }\n            const prevLabs = [...prevState.formLabList];\n            let prevAddedLabs = {...prevState.addedLabs};\n            if (item.labs)\n                item.labs.forEach(function (lab) {\n                    const randId = Math.random().toFixed(7);\n                    prevLabs.push({\n                        ...lab,\n                        _id: randId,\n                    });\n                    prevAddedLabs = {...prevAddedLabs, [lab.id]: true}\n                });\n\n            const prevDrugs = [...prevState.formDrugList];\n            let prevAddedDrugs = {...prevState.addedDrugs};\n            if (item.drugs)\n                item.drugs.forEach(function (drugs) {\n                    const randId = Math.random().toFixed(7);\n                    prevDrugs.push({\n                        ...drugs,\n                        _id: randId,\n                        advice_data: item.advice_data,\n                    });\n                    prevAddedDrugs = {...prevAddedDrugs, [drugs.id]: true}\n\n                })\n\n\n            return {\n                addedLabs: prevAddedLabs,\n                formLabList: prevLabs,\n                addedDrugs: prevAddedDrugs,\n                formDrugList: prevDrugs\n            }\n\n        });\n    };\n\n    removeTemplates = (_id, item) => {\n        this.setState(function (prevState) {\n            return {\n                addTemplate: {...prevState.addTemplate, [item.id]: false},\n                formTemplateList: [...remove(prevState.formTemplateList, function (item) {\n                    return item._id != _id;\n                })]\n            }\n        });\n    }\n\n    handleSubmit = (e) => {\n        const that = this;\n        e.preventDefault();\n        this.props.form.validateFields((err, values) => {\n            console.log(\"value form\", values);\n\n            if (!err) {\n\n                const reqData = {\n                    ...values,\n                    drug: [],\n                    labs: [],\n                    advice_data: [],\n                    patient: that.props.match.params.id,\n                    practice: that.props.active_practiceId,\n\n                };\n\n                that.state.formDrugList.forEach(function (item) {\n                    console.log(\"advice search\", item);\n                    item.dosage = values.does[item._id];\n                    item.duration_type = values.duration_unit[item._id];\n                    item.duration = values.duration[item._id];\n                    item.frequency = values.does_frequency[item._id];\n                    if (values.instruction) {\n                        item.instruction = values.instruction[item._id];\n                    }\n                    if (values.food_time[item._id]) {\n                        item.after_food = true;\n                        item.before_food = false;\n                    } else {\n                        item.before_food = true;\n                        item.after_food = false;\n                    }\n\n                    if (item.advice_data) {\n                        item.advice_data.map(function (advice) {\n                            reqData.advice_data.push(advice.id)\n                        })\n                    }\n                    const drugIitem = {\n                        \"inventory\": item.id,\n                        \"name\": item.name,\n                        \"dosage\": item.dosage,\n                        \"frequency\": item.frequency,\n                        \"duration\": item.duration,\n                        \"duration_type\": item.duration_type,\n                        \"instruction\": item.instruction,\n                        \"before_food\": item.before_food,\n                        \"after_food\": item.after_food,\n                        \"advice_data\": that.state.prescriptionTemplate.advice_data,\n                        \"is_active\": true,\n                    };\n                    reqData.drug.push(drugIitem);\n                });\n                that.state.formLabList.forEach(function (item) {\n                    reqData.labs.push(item.id);\n                });\n                const successFn = function (data) {\n                    // let url = '/patient/' + that.props.match.params.id + '/emr/prescriptions';\n                    that.props.history.goBack();\n                }\n                const errorFn = function () {\n\n                }\n                console.log(\"final\", reqData);\n                postAPI(interpolate(PRESCRIPTION_TEMPLATE, [that.props.active_practiceId]), reqData, successFn, errorFn);\n            }\n        });\n    }\n\n    deletePrescriptionTemplate(id) {\n        const that = this;\n        const reqData = {id, is_active: false};\n        const successFn = function (data) {\n            that.loadPrescriptionTemplate();\n        };\n        const errorFn = function () {\n        };\n        postAPI(interpolate(PRESCRIPTION_TEMPLATE, [that.props.active_practiceId]), reqData, successFn, errorFn);\n\n    }\n\n    handleAddFields = () => {\n        const {form} = this.props;\n        const keys = form.getFieldValue(\"keys\");\n        const nextKeys = keys.concat(id++);\n        form.setFieldsValue({\n            keys: nextKeys\n        });\n    };\n\n    remove = (k) => {\n        const {form} = this.props;\n        const keys = form.getFieldValue('keys');\n        if (keys.length === 1) {\n            return;\n        }\n        form.setFieldsValue({\n            keys: keys.filter(key => key !== k),\n        });\n    }\n\n    onChange = e => {\n        this.setState({});\n    };\n\n    searchValues = (type, value) => {\n        const that = this;\n        this.setState(function (prevState) {\n            const searchValues = {...prevState.searchStrings};\n            searchValues[type] = value;\n            return {searchStrings: searchValues}\n        }, function () {\n            if (type == 'Drugs')\n                that.loadDrugList();\n            else\n                that.filterValues(type);\n        });\n    }\n\n    filterValues = (type) => {\n        this.setState(function (prevState) {\n            let filteredItemOfGivenType = [];\n            if (prevState.items[type]) {\n                if (prevState.searchStrings[type]) {\n                    prevState.items[type].forEach(function (item) {\n                        if (item.name && item.name\n                            .toString()\n                            .toLowerCase()\n                            .includes(prevState.searchStrings[type].toLowerCase())) {\n                            filteredItemOfGivenType.push(item);\n                        }\n                    });\n                } else {\n                    filteredItemOfGivenType = prevState.items[type];\n                }\n            }\n            return {\n                filteredItems: {...prevState.filteredItems, [type]: filteredItemOfGivenType}\n            }\n        });\n    }\n\n    render() {\n        const that = this;\n        const formItemLayout = {\n            labelCol: {\n                xs: {span: 24},\n                sm: {span: 4}\n            },\n            wrapperCol: {\n                xs: {span: 24},\n                sm: {span: 12}\n            }\n        };\n        const formItemLayoutWithOutLabel = {\n            wrapperCol: {\n                xs: {span: 24, offset: 0},\n                sm: {span: 12, offset: 4}\n            }\n        };\n        const {getFieldDecorator, getFieldValue, getFieldsValue} = this.props.form;\n\n        getFieldDecorator('keys', {initialValue: []});\n        const keys = getFieldValue('keys');\n        const formItems = keys.map((k, index) => (\n            <Form.Item\n              {...(index === 0 ? formItemLayout : formItemLayoutWithOutLabel)}\n              label={index === 0 ? 'Advice' : ''}\n              required={false}\n              key={k}\n            >\n                {getFieldDecorator(`advice_data[${k}]`, {\n                    validateTrigger: ['onChange', 'onBlur'],\n\n                })(\n                    <Input style={{width: '60%', marginRight: 8}} />\n                )}\n                {keys.length > 1 ? (\n                    <Icon\n                      className=\"dynamic-delete-button\"\n                      type=\"minus-circle-o\"\n                      onClick={() => this.remove(k)}\n                    />\n                ) : null}\n            </Form.Item>\n        ));\n\n        const drugTableColumns = [{\n            title: 'Drug Name',\n            dataIndex: 'name',\n            key: 'name',\n            render: name => <h2>{name}</h2>\n        }, {\n            title: 'Dosage & Frequency',\n            dataIndex: 'dosage',\n            key: 'dosage',\n            render: (dosage, record) => (\n<div><Form.Item\n  extra={<span>does(s)</span>}\n  key={`does[${record._id}]`}\n>\n                {getFieldDecorator(`does[${record._id}]`, {\n                        validateTrigger: ['onChange', 'onBlur'],\n\n                    },\n                    {\n                        rules: [{message: \"This field is required.\",}],\n                    })(\n                    <InputNumber min={0} size=\"small\" />\n                )}\n\n     </Form.Item>\n                <Form.Item\n                  key={`does_frequency[${record._id}]`}\n                >\n                    {getFieldDecorator(`does_frequency[${record._id}]`, {\n                        validateTrigger: ['onChange', 'onBlur'],\n                        rules: [{\n                            message: \"This field is required.\",\n                        }],\n                        initialValue: 'twice daily'\n                    })(\n                        <Select size=\"small\" onChange={() => this.changeDurationUnits(record._id, false)}>\n                            {DOSE_REQUIRED.map(item => (\n<Select.Option\n  value={item.value}\n>{item.label}\n</Select.Option>\n))}\n                        </Select>\n                    )}\n                </Form.Item>\n</div>\n)\n        }, {\n            title: 'Duration',\n            dataIndex: 'duration',\n            key: 'duration',\n            render: (duration, record) => (\n<div>\n                <Form.Item\n                  key={`duration[${record._id}]`}\n                >\n                    {getFieldDecorator(`duration[${record._id}]`, {\n                            validateTrigger: ['onChange', 'onBlur']\n                        },\n                        {\n                            rules: [{message: \"This field is required.\",}],\n                        })(\n                        <InputNumber min={0} size=\"small\" />\n                    )}\n                </Form.Item>\n                <Form.Item\n                  key={`duration_unit[${record._id}]`}\n                >\n                    {getFieldDecorator(`duration_unit[${record._id}]`, {\n                        validateTrigger: ['onChange', 'onBlur'],\n                        rules: [{\n                            message: \"This field is required.\",\n                        }],\n                        initialValue: 'day(s)'\n                    })(\n                        <Select size=\"small\" onChange={() => this.changeDurationUnits(record._id, false)}>\n                            {DURATIONS_UNIT.map(item => (\n<Select.Option\n  value={item.value}\n>{item.label}\n</Select.Option>\n))}\n                        </Select>\n                    )}\n                </Form.Item>\n</div>\n)\n        },\n            // {this.state.prescriptionTemplate.advice_data ? true:false},\n            {\n                title: 'Instructions',\n                dataIndex: 'instruction',\n                key: 'instruction',\n                render: (instruction, record) => (\n                    <div>\n                        {this.state.addInstructions[record._id] ? (\n                            <Form.Item\n                              extra={(\n<a onClick={() => this.addInstructions(record._id, false)}>Remove\n                                    Instructions\n</a>\n)}\n                              key={`instruction[${record._id}]`}\n                            >\n                                {getFieldDecorator(`instruction[${record._id}]`, {\n                                    validateTrigger: ['onChange', 'onBlur'],\n                                    rules: [{\n                                        message: \"This field is required.\",\n                                    }],\n                                })(\n                                    <Input.TextArea min={0} placeholder=\"Instructions...\" size=\"small\" />\n                                )}\n\n                            </Form.Item>\n                          )\n                            : <a onClick={() => this.addInstructions(record._id, true)}>+ Add Instructions</a>}\n                    </div>\n                  )}, {\n                title: \"Timing\",\n                dataIndex: \"food_time\",\n                key: 'food_time',\n                render: (timing, record) => (\n<div>\n                    <Form.Item key={`food_time[${record._id}]`}>\n                        {getFieldDecorator(`food_time[${record._id}]`)(\n                            <Radio.Group onChange={this.onChange}>\n                                <Radio value={1}>After Food</Radio>\n                                <Radio value={0}>Before Food</Radio>\n                            </Radio.Group>\n                        )}\n                    </Form.Item>\n\n</div>\n)\n\n            },\n\n            {\n                title: '',\n                dataIndex: 'action',\n                key: 'action',\n                render: (instructions, record) => (\n<Form.Item>\n                    <Button\n                      icon=\"close\"\n                      onClick={() => this.removeDrug(record._id)}\n                      type=\"danger\"\n                      shape=\"circle\"\n                      size=\"small\"\n                    />\n</Form.Item>\n)\n            }];\n        const labTablecolums = [{\n            title: 'Name',\n            dataIndex: 'name',\n            key: 'name',\n            render: (name, record) => (\n<span>\n                <b>{name}</b>\n</span>\n)\n        }, {\n            title: 'Cost',\n            dataIndex: 'cost',\n            key: 'cost',\n            render: (name, record) => <span>{record.cost}</span>\n        }, {\n            title: 'Total',\n            dataIndex: 'total',\n            key: 'total',\n            render: (total, record) => (\n<span>\n                {total}\n                <Button\n                  icon=\"close\"\n                  onClick={() => this.removeLabs(record._id, record)}\n                  type=\"danger\"\n                  shape=\"circle\"\n                  size=\"small\"\n                />\n</span>\n)\n        }];\n\n        return (\n<Card title=\"Prescriptions Template\">\n            <Row>\n                <Col span={18}>\n                    <Form onSubmit={this.handleSubmit}>\n                        <Form.Item {...formItemLayout} label=\"Template Name\">\n                            {getFieldDecorator('name', {})(\n                                <Input />\n                            )}\n                        </Form.Item>\n\n                        <Form.Item {...formItemLayout} label=\"Schedule\">\n                            {getFieldDecorator('schedule', {})(\n                                <InputNumber min={1} />\n                            )}\n\n                        </Form.Item>\n                        <Table\n                          pagination={false}\n                          bordered={false}\n                          columns={drugTableColumns}\n                          dataSource={this.state.formDrugList}\n                        />\n\n                        <Divider> Lab Test</Divider>\n                        <Table\n                          pagination={false}\n                          bordered={false}\n                          columns={labTablecolums}\n                          dataSource={this.state.formLabList}\n                        />\n\n\n                        <Divider />\n                        {formItems}\n                        <Form.Item {...formItemLayoutWithOutLabel}>\n                            <Button type=\"dashed\" onClick={this.handleAddFields} style={{width: '60%'}}>\n                                <Icon type=\"plus\" /> Add advice field\n                            </Button>\n                        </Form.Item>\n                        <Affix target={() => this.container}>\n                            <Button type=\"primary\" htmlType=\"submit\">\n                                Save\n                            </Button>\n                        </Affix>\n                    </Form>\n                </Col>\n                <Col span={6}>\n                    <Tabs type=\"card\">\n                        <TabPane tab=\"Drugs\" key=\"1\">\n                            <div style={{backgroundColor: '#ddd', padding: 8}}>\n                                <Input.Search\n                                  key=\"Drugs\"\n                                  placeholder=\"Search in Medicine...\"\n                                  onChange={e => this.searchValues(\"Drugs\", e.target.value)}\n                                />\n                            </div>\n                            <List\n                              size=\"small\"\n                              itemLayout=\"horizontal\"\n                              dataSource={this.state.filteredItems.Drugs}\n                              renderItem={item => (\n                                      <List.Item\n                                        onClick={() => this.addDrug(item)}\n                                        actions={(item.maintain_inventory ? null : [<Tag>Not Sold</Tag>])}\n                                      >\n                                          <List.Item.Meta\n                                            title={item.name}\n                                          />\n                                      </List.Item>\n)}\n                            />\n                        </TabPane>\n                        <TabPane tab=\"Labs\" key=\"2\">\n                            <List\n                              size=\"small\"\n                              itemLayout=\"horizontal\"\n                              dataSource={this.state.labList}\n                              renderItem={item => (\n                                      <List.Item onClick={() => this.addLabs(item)}>\n                                          <List.Item.Meta\n                                            title={item.name}\n                                          />\n                                      </List.Item>\n)}\n                            />\n                        </TabPane>\n                        <TabPane tab=\"Template\" key=\"3\">\n\n                            <List\n                              size=\"small\"\n                              itemLayout=\"horizontal\"\n                              dataSource={this.state.prescriptionTemplate}\n\n                              renderItem={item => (\n                                      <List.Item onConfirm={() => that.deletePrescriptionTemplate(item.id)}>\n                                          <List.Item.Meta onClick={() => this.addTemplate(item)} title={item.name} />\n                                          <Popconfirm\n                                            title=\"Are you sure delete this item?\"\n                                            onConfirm={() => that.deletePrescriptionTemplate(item.id)}\n                                            okText=\"Yes\"\n                                            cancelText=\"No\"\n                                          >\n                                              <a>Delete</a>\n                                          </Popconfirm>\n                                      </List.Item>\n)}\n                            />\n                        </TabPane>\n                    </Tabs>\n                </Col>\n                <Switch>\n                    <Route\n                      exact\n                      path='/patient/:id/prescriptions/template/add'\n                      renderRoute={(route) => <PrescriptionTemplate {...this.state} {...route} />}\n                    />\n                </Switch>\n            </Row>\n</Card>\n)\n    }\n}\n\nexport default Form.create()(PrescriptionTemplate);\n","import React from \"react\";\nimport {\n    Card,\n    Row,\n    Col,\n    Form,\n    Table,\n    Divider,\n    Tabs,\n    List,\n    Button,\n    Input,\n    Select,\n    Radio,\n    InputNumber,\n    Icon,\n    Affix,\n    Popconfirm,\n    DatePicker,\n    Dropdown,\n    Menu, Tag\n} from 'antd';\nimport {remove} from \"lodash\";\nimport {Link, Route, Switch} from \"react-router-dom\";\nimport moment from \"moment\";\nimport {DRUG_CATALOG, INVENTORY_ITEM_API, LABTEST_API, PRACTICESTAFF,PRESCRIPTIONS_API, PRESCRIPTION_TEMPLATE} from \"../../../constants/api\";\nimport {displayMessage, getAPI, interpolate, postAPI, putAPI} from \"../../../utils/common\";\nimport {DURATIONS_UNIT, DOSE_REQUIRED, DRUG} from \"../../../constants/hardData\";\nimport {DOCTORS_ROLE, WARNING_MSG_TYPE} from \"../../../constants/dataKeys\";\n\nimport PrescriptionTemplate from \"./PrescriptionTemplate\";\nimport {loadDoctors} from \"../../../utils/clinicUtils\";\n\nconst {TabPane} = Tabs;\n\nclass AddorEditDynamicPatientPrescriptions extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            items: {},\n            filteredItems: {},\n            formDrugList: [],\n            formLabList: [],\n            addInstructions: {},\n            changeDurationUnits: {},\n            addedDrugs: {},\n            addedLabs: {},\n            addTemplate: {},\n            formTemplateList: [],\n            practiceDoctors: [],\n            selectedDoctor: {},\n            selectedDate: moment(),\n            searchStrings: {}\n        }\n        this.loadPrescriptionTemplate = this.loadPrescriptionTemplate.bind(this);\n        this.deletePrescriptionTemplate = this.deletePrescriptionTemplate.bind(this);\n    }\n\n    componentDidMount() {\n        const that = this;\n        this.loadDrugList();\n        this.loadLabList();\n        this.loadPrescriptionTemplate();\n        loadDoctors(this);\n        if (this.props.editId) {\n            this.setState(function (prevState) {\n                const drugList = [];\n                const addInstructions = {};\n                const addedLabs = {};\n                // let dosage = {};\n                // let frequency = {};\n                // let duration = {};\n                // let duration_type = {};\n                that.props.editPrescription.drugs.forEach(function (drug) {\n                    const _id = Math.random();\n                    drugList.push({...drug, _id, food_time: (drug.after_food ? 1 : 0)});\n                    addInstructions[_id] = !!drug.instruction;\n                    // dosage[_id] = drug.dosage;\n                    // frequency[_id] = drug.frequency;\n                    // duration[_id] = drug.duration;\n                    // duration_type[_id] = drug.duration_type;\n                });\n                const labList = []\n                that.props.editPrescription.labs.forEach(lab => {\n                    labList.push({\n                        ...lab,\n                        _id: Math.random()\n                    });\n                    addedLabs[lab.id] = true\n                })\n\n                return {\n                    ...that.props.editPrescription,\n                    formDrugList: [...drugList],\n                    formLabList: [...labList],\n                    addInstructions: {...addInstructions},\n                    addedLabs: {...addedLabs},\n                    // dosage: {...dosage},\n                    // frequency: {...frequency},\n                    // duration: {...duration},\n                    // duration_type: {...duration_type},\n                    selectedDoctor: that.props.editPrescription.doctor,\n                    selectedDate: moment(that.props.editPrescription.date).isValid() ? moment(that.props.editPrescription.date) : moment()\n                }\n            })\n        }\n    }\n\n    selectDoctor = (doctor) => {\n        this.setState({\n            selectedDoctor: doctor\n        })\n    }\n\n    selectedDate = (date) => {\n        this.setState({\n            selectedDate: date\n        })\n    }\n\n    loadPrescriptionTemplate() {\n        const that = this;\n        const successFn = function (data) {\n            that.setState(function (prevState) {\n                const items = {...prevState.items}\n                return {\n                    items: {...items, \"Template\": data.results},\n                    filteredItems: {...prevState.filteredItems, \"Template\": data.results}\n                }\n            })\n\n        };\n        const errorFn = function () {\n\n        };\n        getAPI(interpolate(PRESCRIPTION_TEMPLATE, [that.props.active_practiceId]), successFn, errorFn)\n    }\n\n    loadLabList() {\n        const that = this;\n        const successFn = function (data) {\n            that.setState(function (prevState) {\n                const items = {...prevState.items}\n                return {\n                    items: {...items, \"Labs\": data.results},\n                    filteredItems: {...prevState.filteredItems, \"Labs\": data.results}\n                }\n            })\n        };\n        const errorFn = function () {\n\n        };\n        getAPI(interpolate(LABTEST_API, [that.props.active_practiceId]), successFn, errorFn);\n    }\n\n    loadDrugList(page = 1) {\n        const that = this;\n        const searchString = that.state.searchStrings.Drugs;\n        const successFn = function (data) {\n            if (searchString == that.state.searchStrings.Drugs)\n                that.setState(function (prevState) {\n                    const items = {...prevState.items}\n                    return {\n                        items: {...items, \"Drugs\": data.results},\n                        filteredItems: {...prevState.filteredItems, \"Drugs\": data.results}\n                    }\n                })\n        }\n        const errorFn = function () {\n\n        }\n        const params = {\n            practice: this.props.active_practiceId,\n            item_type: DRUG,\n            page\n        };\n        if (searchString) {\n            params.item_name = searchString\n        }\n        getAPI(INVENTORY_ITEM_API, successFn, errorFn, params);\n    }\n\n\n    addDrug(item) {\n        this.setState(function (prevState) {\n            const randId = Math.random().toFixed(7);\n            return {\n                addedDrugs: {...prevState.addedDrugs, [item.id]: true},\n                formDrugList: [{\n                    ...item,\n                    _id: randId,\n                }, ...prevState.formDrugList]\n            }\n        });\n\n    }\n\n    addInstructions = (_id, option) => {\n        this.setState(function (prevState) {\n            return {addInstructions: {...prevState.addInstructions, [_id]: !!option}}\n        })\n    }\n\n    changeDurationUnits = (_id, option) => {\n        this.setState(function (prevState) {\n            return {changeDurationUnits: {...prevState.changeDurationUnits, [_id]: !!option}}\n        })\n    }\n\n    removeDrug = (_id) => {\n        this.setState(function (prevState) {\n            return {\n                formDrugList: [...remove(prevState.formDrugList, function (item) {\n                    return item._id != _id;\n                })]\n            }\n        });\n    }\n\n    removeLabs = (_id, item) => {\n        this.setState(function (prevState) {\n            return {\n                addedLabs: {...prevState.addedLabs, [item.id]: false},\n                formLabList: [...remove(prevState.formLabList, function (item) {\n                    return item._id != _id;\n                })]\n            }\n        });\n    }\n\n    addLabs = (item) => {\n        this.setState(function (prevState) {\n            const randId = Math.random().toFixed(7);\n            if (prevState.addedLabs[item.id]) {\n                displayMessage(WARNING_MSG_TYPE, \"Item Already Added\");\n                return false;\n            }\n            return {\n                addedLabs: {...prevState.addedLabs, [item.id]: true},\n                formLabList: [...prevState.formLabList, {\n                    ...item,\n                    _id: randId,\n                }]\n            }\n        });\n    };\n\n    addTemplate = (item) => {\n        this.setState(function (prevState) {\n            if (prevState.addTemplate[item.id]) {\n                displayMessage(WARNING_MSG_TYPE, \"Item Already Added\");\n                return false;\n            }\n            const prevLabs = [...prevState.formLabList];\n            let prevAddedLabs = {...prevState.addedLabs};\n            item.labs.forEach(function (lab) {\n                const randId = Math.random().toFixed(7);\n                prevLabs.push({\n                    ...lab,\n                    _id: randId,\n                });\n                prevAddedLabs = {...prevAddedLabs, [lab.id]: true}\n            });\n\n            const prevDrugs = [...prevState.formDrugList];\n            const prevAddedDrugs = {...prevState.addedDrugs};\n            item.drugs.forEach(function (drugs) {\n                const randId = Math.random().toFixed(7);\n                prevDrugs.push({\n                    ...drugs,\n                    _id: randId,\n                    advice_data: item.advice_data,\n                });\n                prevAddedLabs = {...prevAddedDrugs, [drugs.id]: true}\n\n            })\n\n\n            return {\n                addedLabs: prevAddedLabs,\n                formLabList: prevLabs,\n                addedDrugs: prevAddedDrugs,\n                formDrugList: prevDrugs\n            }\n\n        });\n    };\n\n    removeTemplates = (_id, item) => {\n        this.setState(function (prevState) {\n            return {\n                addTemplate: {...prevState.addTemplate, [item.id]: false},\n                formTemplateList: [...remove(prevState.formTemplateList, function (item) {\n                    return item._id != _id;\n                })]\n            }\n        });\n    }\n\n    handleSubmit = (e) => {\n        const that = this;\n        e.preventDefault();\n        this.props.form.validateFields((err, values) => {\n            if (!err) {\n                const reqData = {\n                    drugs: [],\n                    labs: [],\n                    patient: parseInt(that.props.match.params.id),\n                    practice: that.props.active_practiceId,\n                    doctor: that.state.selectedDoctor ? that.state.selectedDoctor.id : null,\n                    date: that.state.selectedDate ? that.state.selectedDate.format('YYYY-MM-DD') : null,\n                    advice_data: []\n                };\n                if (that.props.editId) {\n                    reqData.id = that.props.editId;\n                }\n                that.state.formDrugList.forEach(function (item) {\n                    item.dosage = values.dosage[item._id];\n                    item.duration_type = values.duration_type[item._id];\n                    item.duration = values.duration[item._id];\n                    item.frequency = values.frequency[item._id];\n                    if (values.instruction) {\n                        item.instruction = values.instruction[item._id];\n                    }\n                    if (values.food_time[item._id]) {\n                        item.after_food = true;\n                        item.before_food = false;\n                    } else {\n                        item.before_food = true;\n                        item.after_food = false;\n                    }\n\n                    // if (item.advice_data) {\n                    //     item.advice_data.map(function (advice) {\n                    //         reqData.advice_data.push(advice.id)\n                    //     })\n                    // }\n                    const drugItem = {\n                        \"inventory\": item.id,\n                        \"name\": item.name,\n                        \"dosage\": item.dosage,\n                        \"frequency\": item.frequency,\n                        \"duration_type\": item.duration_type,\n                        \"duration\": item.duration,\n                        \"instruction\": item.instruction,\n                        \"before_food\": item.before_food,\n                        \"after_food\": item.after_food,\n                        \"is_active\": true,\n                    };\n                    reqData.drugs.push(drugItem);\n                    // console.log(\"item drug\", item);\n                });\n                that.state.formLabList.forEach(function (item) {\n                    reqData.labs.push(item.id);\n                });\n                const successFn = function (data) {\n                    if (that.props.loadData)\n                        that.props.loadData();\n                    const url = `/patient/${  that.props.match.params.id  }/emr/prescriptions`;\n                    that.props.history.replace(url);\n                }\n                const errorFn = function () {\n\n                }\n                postAPI(interpolate(PRESCRIPTIONS_API, [that.props.match.params.id]), reqData, successFn, errorFn);\n            } else {\n                // console.log(err);\n            }\n        });\n    }\n\n    deletePrescriptionTemplate(id) {\n        const that = this;\n        const reqData = {id, is_active: false};\n        const successFn = function (data) {\n            that.loadPrescriptionTemplate();\n        };\n        const errorFn = function () {\n        };\n        postAPI(interpolate(PRESCRIPTION_TEMPLATE, [that.props.active_practiceId]), reqData, successFn, errorFn);\n\n    }\n\n    onChange = e => {\n        this.setState({});\n    };\n\n    searchValues = (type, value) => {\n        const that = this;\n        this.setState(function (prevState) {\n            const searchValues = {...prevState.searchStrings};\n            searchValues[type] = value;\n            return {searchStrings: searchValues}\n        }, function () {\n            if (type == 'Drugs')\n                that.loadDrugList();\n            else\n                that.filterValues(type);\n        });\n    }\n\n    filterValues = (type) => {\n        this.setState(function (prevState) {\n            let filteredItemOfGivenType = [];\n            if (prevState.items[type]) {\n                if (prevState.searchStrings[type]) {\n                    prevState.items[type].forEach(function (item) {\n                        if (item.name && item.name\n                            .toString()\n                            .toLowerCase()\n                            .includes(prevState.searchStrings[type].toLowerCase())) {\n                            filteredItemOfGivenType.push(item);\n                        }\n                    });\n                } else {\n                    filteredItemOfGivenType = prevState.items[type];\n                }\n            }\n            return {\n                filteredItems: {...prevState.filteredItems, [type]: filteredItemOfGivenType}\n            }\n        });\n    }\n\n    render() {\n        const that = this;\n        const {getFieldDecorator, getFieldValue, getFieldsValue} = this.props.form;\n        const drugTableColumns = [{\n            title: 'Medicine Name',\n            dataIndex: 'name',\n            key: 'name',\n            render: name => <h2>{name}</h2>\n        }, {\n            title: 'Dosage & Frequency',\n            dataIndex: 'dosage',\n            key: 'dosage',\n            render: (dosage, record) => (\n<div>\n                <Form.Item\n                  extra={<span>does(s)</span>}\n                  key={`dosage[${record._id}]`}\n                >\n                    {getFieldDecorator(`dosage[${record._id}]`, {\n                        validateTrigger: ['onChange', 'onBlur'],\n                        rules: [{message: \"This field is required.\",}],\n                        initialValue: record.dosage,\n                        min: 0\n                    })(\n                        <InputNumber size=\"small\" />\n                    )}\n                </Form.Item>\n                <Form.Item\n                  key={`frequency[${record._id}]`}\n                >\n                    {getFieldDecorator(`frequency[${record._id}]`, {\n                        validateTrigger: ['onChange', 'onBlur'],\n                        rules: [{\n                            message: \"This field is required.\",\n                        }],\n                        initialValue: record.frequency || DOSE_REQUIRED[0].value\n                    })(\n                        <Select size=\"small\" onChange={() => this.changeDurationUnits(record._id, false)}>\n                            {DOSE_REQUIRED.map(item => (\n<Select.Option\n  value={item.value}\n>{item.label}\n</Select.Option>\n))}\n                        </Select>\n                    )}\n                </Form.Item>\n</div>\n)\n        }, {\n            title: 'Duration',\n            dataIndex: 'duration',\n            key: 'duration',\n            render: (duration, record) => (\n<div>\n                <Form.Item\n                  key={`duration[${record._id}]`}\n                >\n                    {getFieldDecorator(`duration[${record._id}]`, {\n                        validateTrigger: ['onChange', 'onBlur'],\n                        rules: [{message: \"This field is required.\",}],\n                        initialValue: record.duration,\n                        min: 0\n                    })(\n                        <InputNumber size=\"small\" />\n                    )}\n                </Form.Item>\n                <Form.Item\n                  key={`duration_type[${record._id}]`}\n                >\n                    {getFieldDecorator(`duration_type[${record._id}]`, {\n                        validateTrigger: ['onChange', 'onBlur'],\n                        rules: [{\n                            message: \"This field is required.\",\n                        }],\n                        initialValue: record.duration_type || DURATIONS_UNIT[0].value\n                    })(\n                        <Select size=\"small\" onChange={() => this.changeDurationUnits(record._id, false)}>\n                            {DURATIONS_UNIT.map(item => (\n<Select.Option\n  value={item.value}\n>{item.label}\n</Select.Option>\n))}\n                        </Select>\n                    )}\n                </Form.Item>\n</div>\n)\n        }, {\n            title: 'Instructions',\n            dataIndex: 'instruction',\n            key: 'instruction',\n            render: (instruction, record) => (\n                <div>\n                    {this.state.addInstructions[record._id] ? (\n                        <Form.Item\n                          extra={(\n<a onClick={() => this.addInstructions(record._id, false)}>Remove\n                                Instructions\n</a>\n)}\n                          key={`instruction[${record._id}]`}\n                        >\n                            {getFieldDecorator(`instruction[${record._id}]`, {\n                                validateTrigger: ['onChange', 'onBlur'],\n                                rules: [{\n                                    message: \"This field is required.\",\n                                }],\n                                initialValue: record.instruction\n                            })(\n                                <Input.TextArea placeholder=\"Instructions...\" size=\"small\" />\n                            )}\n\n                        </Form.Item>\n                      )\n                        : <a onClick={() => this.addInstructions(record._id, true)}>+ Add Instructions</a>}\n                </div>\n              )}, {\n            title: \"Timing\",\n            dataIndex: \"food_time\",\n            key: 'food_time',\n            render: (timing, record) => (\n<div>\n                <Form.Item key={`food_time[${record._id}]`}>\n                    {getFieldDecorator(`food_time[${record._id}]`, {\n                        initialValue: record.food_time || 0\n                    })(\n                        <Radio.Group onChange={this.onChange}>\n                            <Radio value={1}>after</Radio>\n                            <Radio value={0}>before</Radio>\n                        </Radio.Group>\n                    )}\n                </Form.Item>\n\n</div>\n)\n\n        }, {\n            title: '',\n            dataIndex: 'action',\n            key: 'action',\n            render: (instructions, record) => (\n<Form.Item>\n                <Button\n                  icon=\"close\"\n                  onClick={() => this.removeDrug(record._id)}\n                  type=\"danger\"\n                  shape=\"circle\"\n                  size=\"small\"\n                />\n</Form.Item>\n)\n        }];\n        const labTablecolums = [{\n            title: 'Name',\n            dataIndex: 'name',\n            key: 'name',\n            render: (name, record) => (\n<span>\n                <b>{name}</b>\n</span>\n)\n        }, {\n            title: 'Cost',\n            dataIndex: 'cost',\n            key: 'cost',\n            render: (name, record) => <span>{record.cost}</span>\n        }, {\n            title: 'Total',\n            dataIndex: 'total',\n            key: 'total',\n            render: (total, record) => (\n<span>\n                {total}\n                <Button\n                  icon=\"close\"\n                  onClick={() => this.removeLabs(record._id, record)}\n                  type=\"danger\"\n                  shape=\"circle\"\n                  size=\"small\"\n                />\n</span>\n)\n        }];\n\n        return (\n<Card title=\"Prescriptions\">\n            <Row>\n                <Col span={18}>\n                    <Form onSubmit={this.handleSubmit}>\n                        <Table\n                          pagination={false}\n                          bordered={false}\n                          columns={drugTableColumns}\n                          dataSource={this.state.formDrugList}\n                        />\n\n                        <Divider> Lab Test</Divider>\n                        <Table\n                          pagination={false}\n                          bordered={false}\n                          columns={labTablecolums}\n                          dataSource={this.state.formLabList}\n                        />\n\n                        <Affix offsetBottom={0}>\n                            <Card>\n                                <span>by &nbsp;&nbsp;</span>\n                                <Dropdown\n                                  placement=\"topCenter\"\n                                  overlay={(\n<Menu>\n                                    {this.state.practiceDoctors.map(doctor => (\n                                        <Menu.Item key=\"0\">\n                                            <a onClick={() => this.selectDoctor(doctor)}>{doctor.user.first_name}</a>\n                                        </Menu.Item>\n                                      ))}\n</Menu>\n)}\n                                  trigger={['click']}\n                                >\n                                    <a className=\"ant-dropdown-link\" href=\"#\">\n                                        <b>\n                                            {this.state.selectedDoctor.user ? this.state.selectedDoctor.user.first_name : 'No DOCTORS Found'}\n                                        </b>\n                                    </a>\n                                </Dropdown>\n                                <span> &nbsp;&nbsp;on&nbsp;&nbsp;</span>\n                                <DatePicker\n                                  value={this.state.selectedDate}\n                                  onChange={(value) => this.selectedDate(value)}\n                                  format=\"DD-MM-YYYY\"\n                                  allowClear={false}\n                                />\n\n                                <Button type=\"primary\" htmlType=\"submit\" style={{margin: 5, float: 'right'}}>\n                                    Save\n                                </Button>\n                                {that.props.history ? (\n                                    <Button\n                                      style={{margin: 5, float: 'right'}}\n                                      onClick={() => that.props.history.goBack()}\n                                    >\n                                        Cancel\n                                    </Button>\n                                  ) : null}\n                            </Card>\n                        </Affix>\n                    </Form>\n                </Col>\n                <Col span={6}>\n                    <Tabs type=\"card\">\n                        <TabPane tab=\"Medicine\" key=\"1\">\n                            <div style={{backgroundColor: '#ddd', padding: 8}}>\n                                <Input.Search\n                                  key=\"Drugs\"\n                                  placeholder=\"Search in Medicine...\"\n                                  onChange={e => this.searchValues(\"Drugs\", e.target.value)}\n                                />\n                            </div>\n                            <List\n                              size=\"small\"\n                              itemLayout=\"horizontal\"\n                              dataSource={this.state.filteredItems.Drugs}\n                              renderItem={item => (\n                                      <List.Item\n                                        onClick={() => this.addDrug(item)}\n                                        actions={(item.maintain_inventory ? null : [<Tag>Not Sold</Tag>])}\n                                      >\n                                          <List.Item.Meta\n                                            title={item.name}\n                                          />\n                                      </List.Item>\n)}\n                            />\n                        </TabPane>\n                        <TabPane tab=\"Labs\" key=\"2\">\n                            <div style={{backgroundColor: '#ddd', padding: 8}}>\n                                <Input.Search\n                                  key=\"Labs\"\n                                  placeholder=\"Search in Labs...\"\n                                  onChange={e => this.searchValues(\"Labs\", e.target.value)}\n                                />\n                            </div>\n                            <List\n                              size=\"small\"\n                              itemLayout=\"horizontal\"\n                              dataSource={this.state.filteredItems.Labs}\n                              renderItem={item => (\n                                      <List.Item onClick={() => this.addLabs(item)}>\n                                          <List.Item.Meta\n                                            title={item.name}\n                                          />\n                                      </List.Item>\n)}\n                            />\n                        </TabPane>\n                        <TabPane tab=\"Template\" key=\"3\">\n                            <div>\n                                <Link to={`/patient/${  this.props.match.params.id  }/prescriptions/template/add`}>\n                                    <Button type=\"primary\" block size=\"small\">\n                                        <Icon type=\"plus\" />&nbsp;Add Template\n                                    </Button>\n                                </Link>\n                            </div>\n                            <Divider style={{margin: 0}} />\n                            <div style={{backgroundColor: '#ddd', padding: 8}}>\n                                <Input.Search\n                                  key=\"Template\"\n                                  placeholder=\"Search in Template...\"\n                                  onChange={e => this.searchValues(\"Template\", e.target.value)}\n                                />\n                            </div>\n                            <List\n                              size=\"small\"\n                              itemLayout=\"horizontal\"\n                              dataSource={this.state.filteredItems.Template}\n                              renderItem={item => (\n                                      <List.Item onConfirm={() => that.deletePrescriptionTemplate(item.id)}>\n                                          <List.Item.Meta onClick={() => this.addTemplate(item)} title={item.name} />\n                                          <Popconfirm\n                                            title=\"Are you sure delete this item?\"\n                                            onConfirm={() => that.deletePrescriptionTemplate(item.id)}\n                                            okText=\"Yes\"\n                                            cancelText=\"No\"\n                                          >\n                                              <a>Delete</a>\n                                          </Popconfirm>\n                                      </List.Item>\n)}\n                            />\n                        </TabPane>\n                    </Tabs>\n                </Col>\n                <Switch>\n                    <Route\n                      exact\n                      path='/patient/:id/prescriptions/template/add'\n                      render={(route) => <PrescriptionTemplate {...this.state} {...route} />}\n                    />\n                </Switch>\n            </Row>\n</Card>\n)\n    }\n}\n\nexport default Form.create()(AddorEditDynamicPatientPrescriptions);\n","import React from \"react\";\nimport {\n    Table,\n    Button,\n    Card,\n    Icon,\n    Tag, Menu,\n    Dropdown, Modal, Tooltip, Spin, Row, Input\n} from \"antd\";\nimport {Link} from \"react-router-dom\";\nimport moment from \"moment\";\nimport {Redirect, Switch, Route} from \"react-router\";\nimport * as _ from \"lodash\";\nimport {\n    PRESCRIPTIONS_API,\n    DRUG_CATALOG,\n    PATIENT_PROFILE,\n    PATIENTS_LIST,\n    PRESCRIPTION_PDF, TREATMENTPLANS_PDF\n} from \"../../../constants/api\";\nimport {getAPI, interpolate, displayMessage, postAPI, putAPI} from \"../../../utils/common\";\nimport AddorEditDynamicPatientPrescriptions from \"./AddorEditDynamicPatientPrescriptions\";\nimport InfiniteFeedLoaderButton from \"../../common/InfiniteFeedLoaderButton\";\nimport {BACKEND_BASE_URL} from \"../../../config/connect\";\nimport {sendMail} from \"../../../utils/clinicUtils\";\n\nconst {confirm} = Modal;\n\nclass PatientPrescriptions extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            currentPatient: this.props.currentPatient,\n            active_practiceId: this.props.active_practiceId,\n            prescription: [],\n            drug_catalog: null,\n            editPrescription: null,\n            loading: true\n        }\n        this.loadPrescriptions = this.loadPrescriptions.bind(this);\n        this.loadDrugCatalog = this.loadDrugCatalog.bind(this);\n        this.editPrescriptionData = this.editPrescriptionData.bind(this);\n        this.deletePrescriptions = this.deletePrescriptions.bind(this);\n\n    }\n\n    componentDidMount() {\n        // if (this.props.match.params.id) {\n        this.loadPrescriptions();\n        this.loadDrugCatalog();\n        // }\n\n    }\n\n    loadPrescriptions(page = 1) {\n        const that = this;\n        this.setState({\n            loading: true\n        })\n        const successFn = function (data) {\n            that.setState({\n                prescription: data.results,\n                nextPrescriptionPage: data.next,\n                loading: false\n            })\n        }\n        const errorFn = function () {\n            that.setState({\n                loading: false\n            })\n\n        }\n        const apiParams = {\n            page,\n            practice: this.props.active_practiceId\n        };\n        if (this.props.match.params.id) {\n            apiParams.patient = this.props.match.params.id;\n        }\n        if (this.props.showAllClinic && this.props.match.params.id) {\n            delete (apiParams.practice)\n        }\n        getAPI(PRESCRIPTIONS_API, successFn, errorFn, apiParams)\n    }\n\n    loadPDF(id) {\n        const that = this;\n        const successFn = function (data) {\n            if (data.report)\n                window.open(BACKEND_BASE_URL + data.report);\n        }\n        const errorFn = function () {\n\n        }\n        getAPI(interpolate(PRESCRIPTION_PDF, [id]), successFn, errorFn);\n    }\n\n\n    loadDrugCatalog() {\n        const that = this;\n        const successFn = function (data) {\n            that.setState({\n                drug_catalog: data,\n            })\n\n        }\n        const errorFn = function () {\n            that.setState({})\n\n        }\n        getAPI(interpolate(DRUG_CATALOG, [this.props.active_practiceId]), successFn, errorFn)\n    }\n\n    editPrescriptionData(record) {\n        const that = this;\n        this.setState({\n            editPrescription: record,\n        }, function () {\n            that.props.history.push(`/patient/${  record.patient  }/emr/prescriptions/edit`)\n        });\n\n\n    }\n\n    deletePrescriptions(record) {\n        const that = this;\n        confirm({\n            title: 'Are you sure to delete this item?',\n            okText: 'Yes',\n            okType: 'danger',\n            cancelText: 'No',\n            onOk() {\n                const reqData = {\"id\": record.id, patient: record.patient, is_active: false};\n                const successFn = function (data) {\n                    that.loadPrescriptions();\n                }\n                const errorFn = function () {\n                }\n                postAPI(interpolate(PRESCRIPTIONS_API, [that.props.match.params.id]), reqData, successFn, errorFn);\n            },\n            onCancel() {\n                console.log('Cancel');\n            },\n        });\n    }\n\n\n    updateFormValue =(type,value)=>{\n        this.setState({\n            [type]: value\n        })\n    };\n\n    mailModalOpen =() =>{\n        this.setState({\n            visibleMail:true\n        })\n    };\n\n    mailModalClose =() =>{\n        this.setState({\n            visibleMail:false\n        })\n    };\n\n    sendPatientMail =(presc)=>{\n        this.mailModalOpen()\n        this.setState({\n            patientName:_.get(presc,'patient.user.first_name'),\n            prescriptionId:_.get(presc,'id'),\n            mail_to:_.get(presc,'patient.user.email')\n        })\n\n    };\n\n    sendMailToPatient =()=>{\n        const {mail_to ,prescriptionId } = this.state;\n        const apiParams ={\n            mail_to,\n        }\n        sendMail(interpolate(TREATMENTPLANS_PDF,[prescriptionId]),apiParams)\n        this.mailModalClose();\n    }\n\n\n\n    render() {\n        const drugs = {}\n        if (this.state.drug_catalog) {\n\n            this.state.drug_catalog.forEach(function (drug) {\n                drugs[drug.id] = (`${drug.name  },${  drug.strength}`)\n            })\n        }\n        const that = this;\n        const columns = [{\n            title: 'Drug',\n            key: 'name',\n            dataIndex: 'name',\n        }, {\n            title: 'Frequency',\n            dataIndex: 'frequency',\n            key: 'frequency',\n            render: (frequency, record) => <span>{record.dosage}&nbsp;{record.frequency}</span>\n        }, {\n            title: 'Duration',\n            dataIndex: 'duration',\n            key: 'duration',\n            render: (duration, record) => <span>{duration}&nbsp;{record.duration_type}</span>\n        }, {\n            title: 'Instruction',\n            dataIndex: 'instruction',\n            key: 'instruction',\n            render: (instruction, record) => (\n<span>\n                    {record.before_food ? <Tag>before food </Tag> : null}\n                {record.after_food ? <Tag>after food</Tag> : null}\n                {instruction}\n</span>\n)\n        }];\n\n        if (this.props.match.params.id) {\n            return (\n<div><Switch>\n                <Route\n                  exact\n                  path='/patient/:id/emr/prescriptions/add'\n                  render={(route) => (\n<AddorEditDynamicPatientPrescriptions\n  {...this.state}\n  {...this.props}\n  loadData={this.loadPrescriptions}\n  {...route}\n/>\n)}\n                />\n                <Route\n                  exact\n                  path='/patient/:id/emr/prescriptions/edit'\n                  render={(route) => (that.state.editPrescription ? (\n                           <AddorEditDynamicPatientPrescriptions\n                             {...this.state}\n                             {...route}\n                             {...this.props}\n                             loadData={this.loadPrescriptions}\n                             editId={that.state.editPrescription.id}\n                           />\n                         ) :\n                           <Redirect to={`/patient/${  that.props.match.params.id  }/emr/prescriptions`} />)}\n                />\n                <Route>\n                    <div>\n                        <Card\n                          bodyStyle={{padding: 0}}\n                          title={this.state.currentPatient ? `${this.state.currentPatient.user.first_name  } Prescriptions` : \"Prescriptions\"}\n                          extra={(\n<Button.Group style={{float: 'right'}}>\n                                <Link to={`/patient/${  this.props.match.params.id  }/emr/prescriptions/add`}>\n                                    <Button type=\"primary\"><Icon type=\"plus\" />Add</Button>\n                                </Link>\n</Button.Group>\n)}\n                        />\n\n                        {this.state.prescription.map((presc) => (\n<div>\n                            <Card\n                              style={{marginTop: 10}}\n                              bodyStyle={{padding: 0}}\n                              title={<small>{presc.date ? moment(presc.date).format('ll') : null}</small>}\n                              extra={(\n<Dropdown.Button\n  size=\"small\"\n  style={{float: 'right'}}\n  overlay={(\n<Menu>\n                                          <Menu.Item\n                                            key=\"1\"\n                                            onClick={() => that.editPrescriptionData(presc)}\n                                            disabled={(presc.practice && presc.practice.id != that.props.active_practiceId)}\n                                          >\n                                              <Icon type=\"edit\" />\n                                              Edit\n                                          </Menu.Item>\n                                          <Menu.Item\n                                            key=\"2\"\n                                            onClick={() => that.deletePrescriptions(presc)}\n                                            disabled={(presc.practice && presc.practice.id != that.props.active_practiceId)}\n                                          >\n                                              <Icon type=\"delete\" />\n                                              Delete\n                                          </Menu.Item>\n\n\n\n                                          <Menu.Divider />\n                                          <Menu.Item key=\"3\">\n                                              <Link to={`/patient/${  presc.patient  }/emr/timeline`}>\n                                                  <Icon type=\"clock-circle\" />\n                                                  &nbsp;\n                                                  Patient Timeline\n                                              </Link>\n                                          </Menu.Item>\n\n                                          <Menu.Divider />\n                                          <Menu.Item key=\"4\">\n                                              <a onClick={() => this.sendPatientMail(presc)}><Icon\n                                                type=\"mail\"\n                                              /> Send mail to patient\n                                              </a>\n                                          </Menu.Item>\n\n</Menu>\n)}\n>\n                                      <a onClick={() => this.loadPDF(presc.id)}><Icon type=\"printer\" /></a>\n</Dropdown.Button>\n)}\n                            >\n\n                                <Modal\n                                  title={null}\n                                  visible={this.state.visibleMail}\n                                  onOk={this.sendMailToPatient}\n                                  onCancel={this.mailModalClose}\n                                  footer={[\n                                        <Button key=\"back\" onClick={this.mailModalClose}>\n                                            Cancel\n                                        </Button>,\n                                        <Button key=\"submit\" type=\"primary\" onClick={this.sendMailToPatient}>\n                                            Send\n                                        </Button>,\n                                    ]}\n                                >\n                                    <p>Send Prescription  To {this.state.patientName} ?</p>\n                                    <Input\n                                      value={this.state.mail_to}\n                                      placeholder=\"Email\"\n                                      onChange={(e)=>that.updateFormValue('mail_to',e.target.value)}\n                                    />\n                                </Modal>\n\n\n                                <Table\n                                  columns={columns}\n                                  dataSource={presc.drugs}\n                                  pagination={false}\n                                  footer={() => prescriptonFooter(presc)}\n                                  key={presc.id}\n                                />\n                            </Card>\n</div>\n))}\n                        <Spin spinning={this.state.loading}>\n                            <Row />\n                        </Spin>\n                        <InfiniteFeedLoaderButton\n                          loading={this.state.loading}\n                          loaderFunction={() => this.loadPrescriptions(this.state.nextPrescriptionPage)}\n                          hidden={!this.state.nextPrescriptionPage}\n                        />\n                    </div>\n                </Route>\n     </Switch>\n\n</div>\n)\n        }\n        \n            return (\n<div>\n                <Card\n                  bodyStyle={{padding: 0}}\n                  title={this.state.currentPatient ? `${this.state.currentPatient.user.first_name  } Prescriptions` : \"Prescriptions\"}\n                  extra={(\n<Button.Group style={{float: 'right'}}>\n                        <Button type=\"primary\" onClick={() => this.props.togglePatientListModal(true)}>\n                            <Icon type=\"plus\" />Add\n                        </Button>\n</Button.Group>\n)}\n                />\n                {this.state.prescription.map((presc) => (\n<div key={presc.id}>\n                    <Card\n                      style={{marginTop: 10,}}\n                      bodyStyle={{padding: 0}}\n                      title={(\n<small>{presc.date ? moment(presc.date).format('ll') : null}\n                              <Link to={`/patient/${  presc.patient.id  }/emr/prescriptions`}>\n                                  &nbsp;&nbsp; {presc.patient.user ? presc.patient.user.first_name : null} (ID: {presc.patient.custom_id?presc.patient.custom_id:presc.patient.id})&nbsp;\n                              </Link>\n                              <span>, {presc.patient.gender}</span>\n</small>\n)}\n                      extra={(\n<Dropdown.Button\n  size=\"small\"\n  style={{float: 'right'}}\n  overlay={(\n<Menu>\n                                  <Menu.Item\n                                    key=\"1\"\n                                    onClick={() => that.editPrescriptionData(presc)}\n                                    disabled={(presc.practice && presc.practice.id != that.props.active_practiceId)}\n                                  >\n                                      <Icon type=\"edit\" />\n                                      Edit\n                                  </Menu.Item>\n                                  <Menu.Item\n                                    key=\"2\"\n                                    onClick={() => that.deletePrescriptions(presc)}\n                                    disabled={(presc.practice && presc.practice.id != that.props.active_practiceId)}\n                                  >\n                                      <Icon type=\"delete\" />\n                                      Delete\n                                  </Menu.Item>\n                                  <Menu.Divider />\n                                  <Menu.Item key=\"3\">\n                                      <Link to={`/patient/${  presc.patient  }/emr/timeline`}>\n                                          <Icon type=\"clock-circle\" />\n                                          &nbsp;\n                                          Patient Timeline\n                                      </Link>\n                                  </Menu.Item>\n\n                                  <Menu.Divider />\n                                  <Menu.Item key=\"4\">\n                                      <a onClick={() => this.sendPatientMail(presc)}><Icon\n                                        type=\"mail\"\n                                      /> Send mail to patient\n                                      </a>\n                                  </Menu.Item>\n</Menu>\n)}\n>\n                              <a onClick={() => this.loadPDF(presc.id)}><Icon type=\"printer\" /></a>\n</Dropdown.Button>\n)}\n                    >\n                        <Table\n                          columns={columns}\n                          dataSource={presc.drugs}\n                          pagination={false}\n                          footer={() => prescriptonFooter(presc)}\n                          key={presc.id}\n                        />\n                    </Card>\n</div>\n))}\n                <Spin spinning={this.state.loading}>\n                    <Row />\n                </Spin>\n                <InfiniteFeedLoaderButton\n                  loading={this.state.loading}\n                  loaderFunction={() => this.loadPrescriptions(this.state.nextPrescriptionPage)}\n                  hidden={!this.state.nextPrescriptionPage}\n                />\n\n                <Modal\n                  title={null}\n                  visible={this.state.visibleMail}\n                  onOk={this.sendMailToPatient}\n                  onCancel={this.mailModalClose}\n                  footer={[\n                        <Button key=\"back\" onClick={this.mailModalClose}>\n                            Cancel\n                        </Button>,\n                        <Button key=\"submit\" type=\"primary\" onClick={this.sendMailToPatient}>\n                            Send\n                        </Button>,\n                    ]}\n                >\n                    <p>Send Prescription To {this.state.patientName} ?</p>\n                    <Input\n                      value={this.state.mail_to}\n                      placeholder=\"Email\"\n                      onChange={(e)=>that.updateFormValue('mail_to',e.target.value)}\n                    />\n                </Modal>\n</div>\n)\n        \n\n    }\n}\n\nexport default PatientPrescriptions;\n\nfunction prescriptonFooter(presc) {\n    if (presc) {\n\n        return (\n<div>\n            {presc.doctor ? (\n<Tooltip title=\"Doctor\"><Tag color={presc.doctor ? presc.doctor.calendar_colour : null}>\n                <b>{`prescribed by  ${  presc.doctor.user.first_name}`} </b>\n                        </Tag>\n</Tooltip>\n) : null}\n            {presc.practice ? (\n<Tag style={{float: 'right'}}>\n                <Tooltip title=\"Practice Name\">\n                    <b>{presc.practice.name} </b>\n                </Tooltip>\n</Tag>\n) : null}\n            {presc.labs.length ? (\n<div>\n                +{presc.labs.length}&nbsp;Lab Orders\n                {/* <Divider style={{margin:0}}/> */}\n</div>\n) : null}\n</div>\n)\n    }\n    return null\n}\n\nfunction prescriptionHeader(presc) {\n    if (presc) {\n        return <span>{presc.date ? moment(presc.date).format('lll') : null}</span>\n    }\n    return null;\n}\n","import React from \"react\";\nimport {\n    Card,\n    Row,\n    Form,\n    Col,\n    List,\n    Button,\n    Table,\n    InputNumber,\n    Input,\n    Icon,\n    Affix,\n    Dropdown,\n    Menu,\n    DatePicker\n} from 'antd';\nimport {remove} from 'lodash';\nimport {Redirect} from 'react-router-dom';\nimport moment from \"moment\";\nimport {displayMessage, getAPI, interpolate, postAPI} from \"../../../utils/common\";\nimport {PRACTICESTAFF, PROCEDURE_CATEGORY, TREATMENTPLANS_API} from \"../../../constants/api\";\nimport {DOCTORS_ROLE} from \"../../../constants/dataKeys\";\nimport {loadDoctors} from \"../../../utils/clinicUtils\";\n\n\nclass AddorEditDynamicTreatmentPlans extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            loadingProcedures: true,\n            procedure_category: [],\n            tableFormValues: [],\n            addNotes: {},\n            practiceDoctors: [],\n            selectedDoctor: {},\n            selectedDate: moment()\n        }\n    }\n\n    componentDidMount() {\n        if (this.props.editId) {\n            this.setState(function (prevState) {\n                const tableValues = [];\n                this.props.editTreatmentPlan.treatment_plans.forEach(function (treatment) {\n                    const randId = Math.random().toFixed(7);\n                    tableValues.push({\n                        ...treatment,\n                        ...treatment.procedure,\n                        _id: randId,\n                    })\n                });\n                return {\n                    ...this.props.editTreatmentPlan,\n                    tableFormValues: tableValues,\n                    selectedDate: moment(this.props.editTreatmentPlan.date),\n                    selectedDoctor: this.props.editTreatmentPlan.doctor\n                }\n            })\n        }\n        this.loadProcedures();\n        loadDoctors(this);\n    }\n\n    calculateItem = (_id) => {\n        const {getFieldsValue} = this.props.form;\n        // console.log(getFieldsValue());\n        this.setState(function (prevState) {\n            const newtableFormValues = [...prevState.tableFormValues];\n            newtableFormValues.forEach(function (item) {\n\n            });\n        });\n    }\n\n    addNotes = (_id, option) => {\n        this.setState(function (prevState) {\n            return {addNotes: {...prevState.addNotes, [_id]: !!option}}\n        })\n    }\n\n    removeTreatment = (_id) => {\n        this.setState(function (prevState) {\n            return {\n                tableFormValues: [...remove(prevState.tableFormValues, function (item) {\n                    return item._id != _id;\n                })]\n            }\n        });\n    }\n\n    add = (item) => {\n        const that = this;\n        this.setState(function (prevState) {\n            const randId = Math.random().toFixed(7);\n            return {\n                addNotes: {...prevState.addNotes, [randId]: !!item.default_notes},\n                tableFormValues: [{\n                    ...item,\n                    _id: randId,\n                },...prevState.tableFormValues]\n            }\n        }, function () {\n            // if (that.bottomPoint)\n            //     that.bottomPoint.scrollIntoView({behavior: 'smooth'});\n        });\n    };\n\n    loadProcedures() {\n        const that = this;\n        const params = {};\n        if (this.state.searchString) {\n            params.name = this.state.searchString;\n        }\n        that.setState({\n            loadingProcedures: true\n        })\n        const successFn = function (data) {\n            if (!params.name || that.state.searchString == params.name)\n                that.setState({\n                    // procedure_category: data.results,\n                    loadingProcedures: false,\n                    filteredItems: data.results,\n                })\n        };\n        const errorFn = function () {\n            that.setState({\n                loadingProcedures: false\n            })\n        };\n\n        getAPI(interpolate(PROCEDURE_CATEGORY, [this.props.active_practiceId]), successFn, errorFn, params);\n    }\n\n    selectDoctor = (doctor) => {\n        this.setState({\n            selectedDoctor: doctor\n        })\n    }\n\n    selectedDate = (date) => {\n        this.setState({\n            selectedDate: date\n        })\n    }\n\n    handleSubmit = (e) => {\n        const that = this;\n        e.preventDefault();\n        this.props.form.validateFields((err, values) => {\n            if (!err) {\n                // console.log('Received values of form: ', values);\n                const reqData = {\n                    treatment_plans: [],\n                    patient: that.props.match.params.id,\n                    \"doctor\": that.state.selectedDoctor.id,\n                    \"date\": that.state.selectedDate && moment(that.state.selectedDate).isValid() ? that.state.selectedDate.format('YYYY-MM-DD') : null,\n                    \"practice\": that.props.active_practiceId,\n                };\n                if (that.props.editId) {\n                    reqData.id = that.props.editTreatmentPlan.id\n                }\n                that.state.tableFormValues.forEach(function (item) {\n                    // console.log(item);\n                    item.quantity = values.quantity[item._id];\n                    item.cost = values.cost[item._id];\n                    item.discount = values.discount[item._id];\n                    if (values.notes)\n                        item.notes = values.notes[item._id];\n                    const sendingItem = {\n                        \"procedure\": item.id,\n                        \"cost\": item.cost,\n                        \"quantity\": item.quantity,\n                        \"margin\": item.margin,\n                        \"default_notes\": item.default_notes,\n                        \"is_active\": true,\n                        \"is_completed\": item.is_completed || false,\n                        \"discount\": item.discount,\n                        \"discount_type\": \"%\",\n                    };\n                    reqData.treatment_plans.push(sendingItem);\n                });\n\n                const successFn = function (data) {\n                    displayMessage(\"Inventory updated successfully\");\n                    if(that.props.loadData)\n                        that.props.loadData();\n                    const url = `/patient/${  that.props.match.params.id  }/emr/plans`;\n                    that.props.history.replace(url);\n                }\n                const errorFn = function () {\n\n                }\n                postAPI(interpolate(TREATMENTPLANS_API, [that.props.match.params.id]), reqData, successFn, errorFn);\n            }\n        });\n    }\n\n    searchValues = (value) => {\n        const that = this;\n        this.setState(function (prevState) {\n            return {searchString: value}\n        }, function () {\n            that.loadProcedures();\n        });\n        return false;\n    }\n\n    render() {\n        const that = this;\n        const {getFieldDecorator, getFieldValue, getFieldsValue} = this.props.form;\n        const formItemLayout = {\n            labelCol: {\n                xs: {span: 24},\n                sm: {span: 4},\n            },\n            wrapperCol: {\n                xs: {span: 24},\n                sm: {span: 20},\n            },\n        };\n        const formItemLayoutWithOutLabel = {\n            labelCol: {\n                xs: {span: 24},\n                sm: {span: 24},\n            },\n            wrapperCol: {\n                xs: {span: 24},\n                sm: {span: 24},\n            },\n        };\n        const consumeRow = [{\n            title: 'Treatments',\n            dataIndex: 'name',\n            key: 'name',\n            render: (name, record) => (\n<span>\n                <b>{name}</b><br />\n                {this.state.addNotes[record._id] ? (\n                    <Form.Item\n                      key={`default_notes[${record._id}]`}\n                      {...formItemLayout}\n                    >\n                        {getFieldDecorator(`default_notes[${record._id}]`, {\n                            validateTrigger: ['onChange', 'onBlur'],\n                            rules: [{\n                                message: \"This field is required.\",\n                            }],\n                            initialValue: record.default_notes\n                        })(\n                            <Input.TextArea min={0} placeholder=\"Notes...\" />\n                        )}\n                    </Form.Item>\n                  )\n                    : <a onClick={() => this.addNotes(record._id, true)}>+ Add Note</a>}\n</span>\n)\n        }, {\n            title: 'Quantity',\n            dataIndex: 'quantity',\n            key: 'quantity',\n            render: (name, record) => (\n<Form.Item\n  key={`quantity[${record._id}]`}\n  {...formItemLayout}\n>\n                {getFieldDecorator(`quantity[${record._id}]`, {\n                    validateTrigger: ['onChange', 'onBlur'],\n                    rules: [{\n                        required: true,\n                        message: \"This field is required.\",\n                    }],\n                    initialValue: 1\n                })(\n                    <InputNumber\n                      min={0}\n                      placeholder=\"Quantity\"\n                      size=\"small\"\n                      onChange={() => this.calculateItem(record._id)}\n                    />\n                )}\n</Form.Item>\n)\n        }, {\n            title: 'Cost',\n            dataIndex: 'cost',\n            key: 'cost',\n            render: (name, record) => (\n<Form.Item\n  key={`cost[${record._id}]`}\n  {...formItemLayout}\n>\n                {getFieldDecorator(`cost[${record._id}]`, {\n                    validateTrigger: ['onChange', 'onBlur'],\n                    rules: [{\n                        required: true,\n                        message: \"This field is required.\",\n                    }],\n                    initialValue: record.cost\n                })(\n                    <InputNumber\n                      min={0}\n                      placeholder=\"Cost\"\n                      size=\"small\"\n                      onChange={() => this.calculateItem(record._id)}\n                    />\n                )}\n</Form.Item>\n)\n        }, {\n            title: 'Discount',\n            dataIndex: 'discount',\n            key: 'discount',\n            render: (name, record) => (\n<Form.Item\n  key={`discount[${record._id}]`}\n  {...formItemLayout}\n>\n                {getFieldDecorator(`discount[${record._id}]`, {\n                    validateTrigger: ['onChange', 'onBlur'],\n                    rules: [{\n                        message: \"This field is required.\",\n                    }],\n                })(\n                    <InputNumber\n                      min={0}\n                      placeholder=\"Discount\"\n                      size=\"small\"\n                      onChange={() => this.calculateItem(record._id)}\n                    />\n                )} %\n</Form.Item>\n)\n        }, {\n            title: 'Total',\n            dataIndex: 'total',\n            key: 'total',\n            render: (total, record) => (\n<span>\n                {total}\n                <Button\n                  icon=\"close\"\n                  onClick={() => this.removeTreatment(record._id)}\n                  type=\"danger\"\n                  shape=\"circle\"\n                  size=\"small\"\n                />\n</span>\n)\n        }];\n        return (\n<div>\n\n            <Card title=\"Treatment Plans\">\n                <Row>\n\n                    <Col span={17}>\n                        <Form onSubmit={this.handleSubmit}>\n                            <Table\n                              pagination={false}\n                              bordered\n                              dataSource={this.state.tableFormValues}\n                              columns={consumeRow}\n                            />\n\n                            <Affix offsetBottom={0}>\n                                <Card>\n                                    <span>by &nbsp;&nbsp;</span>\n                                    <Dropdown\n                                      placement=\"topCenter\"\n                                      overlay={(\n<Menu>\n                                        {this.state.practiceDoctors.map(doctor => (\n                                            <Menu.Item key=\"0\">\n                                                <a onClick={() => this.selectDoctor(doctor)}>{doctor.user.first_name}</a>\n                                            </Menu.Item>\n                                          ))}\n</Menu>\n)}\n                                      trigger={['click']}\n                                    >\n                                        <a className=\"ant-dropdown-link\" href=\"#\">\n                                            <b>\n                                                {this.state.selectedDoctor.user ? this.state.selectedDoctor.user.first_name : 'No DOCTORS Found'}\n                                            </b>\n                                        </a>\n                                    </Dropdown>\n                                    <span> &nbsp;&nbsp;on&nbsp;&nbsp;</span>\n                                    <DatePicker\n                                      value={this.state.selectedDate}\n                                      onChange={(value) => this.selectedDate(value)}\n                                      format=\"DD-MM-YYYY\"\n                                      allowClear={false}\n                                    />\n                                    <Form.Item\n                                      {...formItemLayoutWithOutLabel}\n                                      style={{marginBottom: 0, float: 'right'}}\n                                    >\n                                        <Button type=\"primary\" htmlType=\"submit\" style={{margin: 5}}>Save Treatment\n                                            Plan\n                                        </Button>\n                                        {that.props.history ? (\n                                            <Button\n                                              style={{margin: 5, float: 'right'}}\n                                              onClick={() => that.props.history.goBack()}\n                                            >\n                                                Cancel\n                                            </Button>\n                                          ) : null}\n                                    </Form.Item>\n                                </Card>\n                            </Affix>\n                            <div ref={el => {\n                                that.bottomPoint = el;\n                            }}\n                            />\n                        </Form>\n                    </Col>\n                    <Col span={7}>\n                        <Affix offsetTop={0}>\n                            <div style={{backgroundColor: '#ddd', padding: 8}}>\n                                <Input.Search\n                                  placeholder=\"Search in plans ...\"\n                                  onChange={e => this.searchValues(e.target.value)}\n                                />\n                            </div>\n                            <List\n                              size=\"small\"\n                              style={{maxHeight: '100vh', overflowX: 'scroll'}}\n                              itemLayout=\"horizontal\"\n                              dataSource={this.state.filteredItems}\n                              loading={this.state.loadingProcedures}\n                              renderItem={item => (\n                                      <List.Item onClick={() => this.add(item)}>\n                                          <List.Item.Meta\n                                            title={item.name}\n                                          />\n                                      </List.Item>\n)}\n                            />\n                        </Affix>\n                    </Col>\n                </Row>\n            </Card>\n\n</div>\n)\n    }\n}\n\nexport default Form.create()(AddorEditDynamicTreatmentPlans)\n","import React from \"react\";\nimport {Checkbox, Table, Button, Card, Icon, Tag, Menu, Dropdown, Modal, Spin, Tooltip, Input} from \"antd\";\nimport {Link} from \"react-router-dom\";\nimport moment from \"moment\";\nimport {Redirect, Switch, Route} from \"react-router\";\nimport * as _ from \"lodash\";\nimport {\n    CLINIC_NOTES_PDF,\n    PROCEDURE_CATEGORY,\n    TREATMENTPLANS_API,\n    TREATMENTPLANS_MARK_COMPLETE_API,\n    TREATMENTPLANS_PDF\n} from \"../../../constants/api\";\nimport {getAPI, interpolate, displayMessage, postAPI} from \"../../../utils/common\";\nimport AddorEditDynamicTreatmentPlans from \"./AddorEditDynamicTreatmentPlans\";\nimport {SUCCESS_MSG_TYPE} from \"../../../constants/dataKeys\";\nimport {BACKEND_BASE_URL} from \"../../../config/connect\";\nimport InfiniteFeedLoaderButton from \"../../common/InfiniteFeedLoaderButton\";\nimport {sendMail} from \"../../../utils/clinicUtils\";\n\nconst {confirm} = Modal;\n\nclass PatientTreatmentPlans extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            currentPatient: this.props.currentPatient,\n            active_practiceId: this.props.active_practiceId,\n            treatmentPlans: [],\n            procedure_category: null,\n            incompletedTreatmentPlans: [],\n            loading: true,\n            selectedTreatments: {}\n        }\n        this.loadTreatmentPlans = this.loadTreatmentPlans.bind(this);\n        this.editTreatmentPlanData = this.editTreatmentPlanData.bind(this);\n        this.submitCompleteTreatment = this.submitCompleteTreatment.bind(this);\n    }\n\n    componentDidMount() {\n        this.loadTreatmentPlans();\n    }\n\n    loadTreatmentPlans(page = 1) {\n        const incompleted = [];\n        const that = this;\n        this.setState({\n            loading: true\n        })\n        const successFn = function (data) {\n            that.setState(function (prevState) {\n                if (data.current == 1) {\n                    return {\n                        treatmentPlans: [...data.results],\n                        next: data.next,\n                        loading: false\n                    }\n                }\n                return {\n                    treatmentPlans: [...prevState.treatmentPlans, ...data.results],\n                    next: data.next,\n                    loading: false\n                }\n            });\n            data.results.forEach(function (treatmentplan) {\n                if (!treatmentplan.is_completed) {\n                    incompleted.push(treatmentplan)\n                }\n            });\n            that.setState(function (prevState) {\n                if (data.current == 1) {\n                    return {\n                        incompletedTreatmentPlans: [...incompleted],\n                        loading: false\n                    }\n                }\n                return {\n                    incompletedTreatmentPlans: [...prevState.incompletedTreatmentPlans, ...incompleted],\n                    loading: false\n                }\n            })\n        }\n        const errorFn = function () {\n            that.setState({\n                loading: false\n            })\n\n        };\n        const apiParams = {\n            page,\n            practice: this.props.active_practiceId\n        };\n        if (this.props.match.params.id) {\n            apiParams.patient = this.props.match.params.id;\n        }\n        if (this.props.showAllClinic && this.props.match.params.id) {\n            delete (apiParams.practice)\n        }\n        getAPI(TREATMENTPLANS_API, successFn, errorFn, apiParams)\n\n    }\n\n    editTreatmentPlanData(record) {\n        console.log(\"record\",record.id);\n        this.setState({\n            editTreatmentPlan: record,\n            loading: false\n        });\n        const id = record.patient;\n        this.props.history.push(`/patient/${  record.id  }/emr/plans/edit`)\n\n    }\n\n\n    deleteTreatmentPlans(record) {\n        const that = this;\n        confirm({\n            title: 'Are you sure to delete this item?',\n            okText: 'Yes',\n            okType: 'danger',\n            cancelText: 'No',\n            onOk() {\n                const reqData = {\n                    id: record.id,\n                    patient: record.patient.id,\n                    is_active: false,\n                }\n                const successFn = function (data) {\n                    that.loadTreatmentPlans();\n                    displayMessage(SUCCESS_MSG_TYPE, \"Treatment Plan Deleted Successfully!\");\n\n                }\n                const errorFn = function () {\n\n                };\n                postAPI(interpolate(TREATMENTPLANS_API, [that.props.match.params.id], null), reqData, successFn, errorFn);\n            },\n            onCancel() {\n                console.log('Cancel');\n            },\n        });\n\n\n    }\n\n    treatmentCompleteToggle(id, option) {\n        this.setState(function (prevState) {\n            return {selectedTreatments: {...prevState.selectedTreatments, [id]: !!option}}\n        });\n    }\n\n    submitCompleteTreatment() {\n        const that = this;\n        const {selectedTreatments} = this.state;\n        const treatmentKeys = Object.keys(selectedTreatments);\n        // let reqTreatmentsArray = [];\n        const reqData = {\n            treatment: [],\n            patient: that.props.match.params.id\n        };\n        treatmentKeys.forEach(function (item) {\n            const treatmentObj = {id: item, is_completed: selectedTreatments[item]};\n            reqData.treatment.push(treatmentObj);\n        });\n        const successFn = function (data) {\n            that.loadTreatmentPlans();\n            that.setState({\n                selectedTreatments: {}\n            })\n        }\n        const errorFn = function () {\n\n        }\n        postAPI(interpolate(TREATMENTPLANS_MARK_COMPLETE_API, [this.props.match.params.id]), reqData, successFn, errorFn)\n    }\n\n    loadPDF(id) {\n        const that = this;\n        const successFn = function (data) {\n            if (data.report)\n                window.open(BACKEND_BASE_URL + data.report);\n        }\n        const errorFn = function () {\n\n        }\n        getAPI(interpolate(TREATMENTPLANS_PDF, [id]), successFn, errorFn);\n    }\n\n    updateFormValue =(type,value)=>{\n        this.setState({\n            [type]: value\n        })\n    };\n\n    mailModalOpen =() =>{\n        this.setState({\n            visibleMail:true\n        })\n    };\n\n    mailModalClose =() =>{\n        this.setState({\n            visibleMail:false\n        })\n    };\n\n    sendPatientMail =(treatment)=>{\n        this.mailModalOpen()\n        this.setState({\n            patientName:_.get(treatment,'patient.user.first_name'),\n            treatmentId:_.get(treatment,'id'),\n            mail_to:_.get(treatment,'patient.user.email')\n        })\n\n    };\n\n    sendMailToPatient =()=>{\n        const {mail_to ,treatmentId } = this.state;\n        const apiParams ={\n            mail_to,\n        }\n        sendMail(interpolate(TREATMENTPLANS_PDF,[treatmentId]),apiParams)\n        this.mailModalClose();\n    }\n\n    render() {\n        const that = this;\n\n        const columns = [{\n            title: '',\n            key: 'is_completed',\n            render: (text, record) => (record.is_completed ?\n                <Icon type=\"check-circle\" theme=\"twoTone\" style={{marginLeft: '8px', fontSize: '20px'}} /> : (\n                <Checkbox\n                  key={record.id}\n                  onChange={(e) => this.treatmentCompleteToggle(record.id, e.target.checked)}\n                  value={this.state.selectedTreatments[record.id]}\n                />\n              ))\n        }, {\n            title: 'Procedure',\n            dataIndex: 'procedure',\n            key: 'procedure',\n            render: (text, record) => (\n                <span> {text.name}</span>\n            )\n        }, {\n            title: 'Quantity',\n            dataIndex: 'quantity',\n            key: 'quantity',\n        }, {\n            title: 'Discount',\n            dataIndex: 'discount',\n            key: 'discount',\n        }, {\n            title: 'Cost per  Unit',\n            dataIndex: 'cost',\n            key: 'cost',\n        }, {\n            title: 'Notes',\n            dataIndex: 'default_notes',\n            key: 'default_notes',\n        }];\n\n        if (this.props.match.params.id) {\n            return (\n<div><Switch>\n                <Route\n                  exact\n                  path='/patient/:id/emr/plans/add'\n                  render={(route) => (\n<AddorEditDynamicTreatmentPlans\n  {...this.state}\n  {...route}\n  {...that.props}\n  loadData={this.loadTreatmentPlans}\n/>\n)}\n                />\n                <Route\n                  exact\n                  path='/patient/:id/emr/plans/edit'\n                  render={(route) => (this.state.editTreatmentPlan ? (\n                           <AddorEditDynamicTreatmentPlans\n                             {...this.state}\n                             {...route}\n                             {...that.props}\n                             loadData={this.loadTreatmentPlans}\n                             editId={this.state.editTreatmentPlan.id}\n                           />\n                         ) :\n                           <Redirect to={`/patient/${  this.props.match.params.id  }/emr/plans`} />)}\n                />\n                <div>\n                    <Card\n                      bodyStyle={{padding: 0}}\n                      title={this.state.currentPatient ? `${this.state.currentPatient.user.first_name  } TreatmentPlans` : \"TreatmentPlans\"}\n                      extra={(\n<Button.Group>\n                            <Button onClick={this.submitCompleteTreatment}>\n                                <Icon type=\"save\" />Save\n                            </Button>\n                            <Link to={`/patient/${  this.props.match.params.id  }/emr/plans/add`}>\n                                <Button type=\"primary\">\n                                    <Icon type=\"plus\" />Add\n                                </Button>\n                            </Link>\n</Button.Group>\n)}\n                    />\n                    <Spin spinning={this.state.loading}>\n                        {this.state.treatmentPlans.map((treatment) => (\n<Card\n  bodyStyle={{padding: 0}}\n  style={{marginTop: 15}}\n>\n                                <div style={{padding: 16}}>\n                                    <h4>{treatment.date ? moment(treatment.date).format('ll') : null}\n                                        <Dropdown.Button\n                                          size=\"small\"\n                                          style={{float: 'right'}}\n                                          overlay={(\n<Menu>\n                                                <Menu.Item\n                                                  key=\"1\"\n                                                  onClick={() => that.editTreatmentPlanData(treatment)}\n                                                  disabled={(treatment.practice && treatment.practice.id != this.props.active_practiceId)}\n                                                >\n                                                    <Icon type=\"edit\" />\n                                                    Edit\n                                                </Menu.Item>\n                                                <Menu.Item\n                                                  key=\"2\"\n                                                  onClick={() => that.deleteTreatmentPlans(treatment)}\n                                                  disabled={(treatment.practice && treatment.practice.id != this.props.active_practiceId)}\n                                                >\n                                                    <Icon type=\"delete\" />\n                                                    Delete\n                                                </Menu.Item>\n                                                <Menu.Divider />\n                                                <Menu.Item key=\"3\">\n                                                    <Link to={`/patient/${  treatment.patient  }/emr/timeline`}>\n                                                        <Icon type=\"clock-circle\" />\n                                                        &nbsp;\n                                                        Patient Timeline\n                                                    </Link>\n                                                </Menu.Item>\n\n                                                <Menu.Divider />\n                                                <Menu.Item key=\"4\">\n                                                    <a onClick={() => this.sendPatientMail(treatment)}><Icon\n                                                      type=\"mail\"\n                                                    /> Send mail to patient\n                                                    </a>\n                                                </Menu.Item>\n</Menu>\n)}\n                                        >\n                                            <a onClick={() => this.loadPDF(treatment.id)}><Icon type=\"printer\" /></a>\n                                        </Dropdown.Button>\n\n                                    </h4>\n\n                                </div>\n                                <Table\n                                  loading={this.state.loading}\n                                  columns={columns}\n                                  dataSource={treatment.treatment_plans}\n                                  footer={() => treatmentFooter(treatment)}\n                                  pagination={false}\n                                  key={treatment.id}\n                                />\n\n</Card>\n)\n                        )}\n                    </Spin>\n                    <InfiniteFeedLoaderButton\n                      loaderFunction={() => this.loadTreatmentPlans(that.state.next)}\n                      loading={this.state.loading}\n                      hidden={!this.state.next}\n                    />\n                    <Modal\n                      title={null}\n                      visible={this.state.visibleMail}\n                      onOk={this.sendMailToPatient}\n                      onCancel={this.mailModalClose}\n                      footer={[\n                            <Button key=\"back\" onClick={this.mailModalClose}>\n                                Cancel\n                            </Button>,\n                            <Button key=\"submit\" type=\"primary\" onClick={this.sendMailToPatient}>\n                                Send\n                            </Button>,\n                        ]}\n                    >\n                        <p>Send Treatment  To {this.state.patientName} ?</p>\n                        <Input\n                          value={this.state.mail_to}\n                          placeholder=\"Email\"\n                          onChange={(e)=>that.updateFormValue('mail_to',e.target.value)}\n                        />\n                    </Modal>\n                </div>\n     </Switch>\n\n</div>\n)\n        } \n            return (\n<div>\n                <Card\n                  bodyStyle={{padding: 0}}\n                  title={this.state.currentPatient ? `${this.state.currentPatient.user.first_name  } TreatmentPlans` : \"TreatmentPlans\"}\n                  extra={(\n<Button.Group>\n                        <Button onClick={this.submitCompleteTreatment}>\n                            <Icon type=\"save\" />Save\n                        </Button>\n                        <Button type=\"primary\" onClick={() => this.props.togglePatientListModal(true)}>\n                            <Icon type=\"plus\" />Add\n                        </Button>\n</Button.Group>\n)}\n                />\n                <Spin spinning={this.state.loading}>\n                    {this.state.treatmentPlans.map((treatment) => (\n<Card\n  bodyStyle={{padding: 0}}\n  key={treatment.id}\n  style={{marginTop: 15}}\n>\n                            <div style={{padding: 16}}>\n                                <h4>{treatment.date ? moment(treatment.date).format('ll') : null}\n                                <Link to={`/patient/${  treatment.patient.id  }/emr/plans`}>\n                                    &nbsp;&nbsp; {treatment.patient.user?treatment.patient.user.first_name:null} (ID: {treatment.patient.custom_id?treatment.patient.custom_id:treatment.patient.id})&nbsp;\n                                </Link>\n                                <span>, {treatment.patient.gender}</span>\n\n                                    <Dropdown.Button\n                                      size=\"small\"\n                                      style={{float: 'right'}}\n                                      overlay={(\n<Menu>\n                                            <Menu.Item key=\"1\" disabled={(treatment.practice && treatment.practice.id != this.props.active_practiceId)}>\n                                                <Link to={`/patient/${  treatment.patient.id  }/emr/plans/edit`}>\n                                                    <Icon type=\"edit\" />\n                                                    &nbsp;\n                                                    Edit\n                                                </Link>\n                                            </Menu.Item>\n                                            <Menu.Item\n                                              key=\"2\"\n                                              onClick={() => that.deleteTreatmentPlans(treatment)}\n                                              disabled={(treatment.practice && treatment.practice.id != this.props.active_practiceId)}\n                                            >\n                                                <Icon type=\"delete\" />\n                                                Delete\n                                            </Menu.Item>\n                                            <Menu.Divider />\n                                            <Menu.Item key=\"3\">\n                                                <Link to={`/patient/${  treatment.patient  }/emr/timeline`}>\n                                                    <Icon type=\"clock-circle\" />\n                                                    &nbsp;\n                                                    Patient Timeline\n                                                </Link>\n                                            </Menu.Item>\n\n                                            <Menu.Divider />\n                                            <Menu.Item key=\"4\">\n                                                <a onClick={() => this.sendPatientMail(treatment)}><Icon\n                                                  type=\"mail\"\n                                                /> Send mail to patient\n                                                </a>\n                                            </Menu.Item>\n\n</Menu>\n)}\n                                    >\n                                        <a onClick={() => this.loadPDF(treatment.id)}><Icon type=\"printer\" /></a>\n                                    </Dropdown.Button>\n                                </h4>\n\n                            </div>\n                            <Table\n                              loading={this.state.loading}\n                              columns={columns}\n                              dataSource={treatment.treatment_plans}\n                              footer={() => treatmentFooter(treatment)}\n                              pagination={false}\n                              key={treatment.id}\n                            />\n\n</Card>\n)\n                    )}\n                </Spin>\n                <InfiniteFeedLoaderButton\n                  loaderFunction={() => this.loadTreatmentPlans(that.state.next)}\n                  loading={this.state.loading}\n                  hidden={!this.state.next}\n                />\n                <Modal\n                  title={null}\n                  visible={this.state.visibleMail}\n                  onOk={this.sendMailToPatient}\n                  onCancel={this.mailModalClose}\n                  footer={[\n                        <Button key=\"back\" onClick={this.mailModalClose}>\n                            Cancel\n                        </Button>,\n                        <Button key=\"submit\" type=\"primary\" onClick={this.sendMailToPatient}>\n                            Send\n                        </Button>,\n                    ]}\n                >\n                    <p>Send Treatment To {this.state.patientName} ?</p>\n                    <Input\n                      value={this.state.mail_to}\n                      placeholder=\"Email\"\n                      onChange={(e)=>that.updateFormValue('mail_to',e.target.value)}\n                    />\n                </Modal>\n</div>\n)\n        \n\n    }\n}\n\nexport default PatientTreatmentPlans;\n\n\nfunction treatmentFooter(presc) {\n    if (presc) {\n\n        return (\n<div>\n            {presc.doctor ? (\n<Tag color={presc.doctor ? presc.doctor.calendar_colour : null}>\n                <b>{`prescribed by  ${  presc.doctor.user.first_name}`} </b>\n</Tag>\n) : null}\n            {presc.practice ? (\n<Tag style={{float: 'right'}}>\n                <Tooltip title=\"Practice Name\">\n                    <b>{presc.practice.name} </b>\n                </Tooltip>\n</Tag>\n) : null}\n</div>\n)\n    }\n    return null\n}\n","import React from \"react\";\nimport {Card, Row, Form, Col, List, Button, Table, InputNumber, Input, Icon} from 'antd';\nimport {remove} from 'lodash';\nimport {displayMessage, getAPI, interpolate, postAPI} from \"../../../utils/common\";\nimport {LABTEST_API} from \"../../../constants/api\";\nimport {WARNING_MSG_TYPE} from \"../../../constants/dataKeys\";\n\nclass AddPatientLabOrders extends React.Component{\n    constructor(props){\n        super(props);\n        this.state={\n        \tlab_test:[],\n        \ttableFormValues: [],\n        \taddedLabs : {}\n        }\n        console.log(\"urgent\",this.props.active_practiceId);\n    }\n\n    componentDidMount() {\n        this.loadLabs();\n    }\n\n    loadLabs(){\n    \tconst that =this;\n    \tconst successFn = function(data){\n    \t\tthat.setState({\n    \t\t\tlab_test: data,\n    \t\t})\n    \t};\n    \tconst errorFn = function(){\n\n    \t};\n    \tgetAPI(interpolate(LABTEST_API, [that.props.active_practiceId]), successFn, errorFn);\n    }\n\n    calculateItem = (_id) => {\n        const {getFieldsValue} = this.props.form;\n        console.log(getFieldsValue());\n        this.setState(function (prevState) {\n            const newtableFormValues = [...prevState.tableFormValues];\n            newtableFormValues.forEach(function (item) {\n\n            });\n        });\n    }\n\n    removeTests = (_id,item) => {\n        this.setState(function (prevState) {\n            return {\n            \taddedLabs:{...prevState.addedLabs,[item.id]:false},\n                tableFormValues: [...remove(prevState.tableFormValues, function (item) {\n                    return item._id != _id;\n                })]\n            }\n        });\n    }\n\n    add = (item) => {\n    \tconsole.log(\"item\",item);\n        this.setState(function (prevState) {\n        \tconsole.log(\"preview\",prevState);\n            const randId = Math.random().toFixed(7);\n            if(prevState.addedLabs[item.id]){\n            \tdisplayMessage(WARNING_MSG_TYPE,\"Item Already Added\");\n            \treturn false;\n            }\n            return {\n            \taddedLabs:{...prevState.addedLabs,[item.id]:true},\n                tableFormValues: [...prevState.tableFormValues, {\n                    ...item,\n                    _id: randId,\n                }]\n            }\n        });\n    };\n\n     handleSubmit = (e) => {\n        const that = this;\n        e.preventDefault();\n        this.props.form.validateFields((err, values) => {\n            if (!err) {\n                const reqData = {\n                    treatment: [],\n                    patient: that.props.match.params.id\n                };\n                that.state.tableFormValues.forEach(function (item) {\n                    item.cost = values.cost[item._id];\n                    const sendingItem = {\n                        \"name\": item.id,\n                        \"cost\": item.cost,\n                        \"instruction\":item.instruction,\n                        \"is_active\":true,\n                        \"practice\":item.practice,\n                        \"margin\":item.margin,\n\n                    };\n                    reqData.treatment.push(sendingItem);\n                });\n                const successFn = function (data) {\n                    displayMessage(\"Inventory updated successfully\");\n\n                }\n                const errorFn = function () {\n\n                }\n                console.log(\"DataSet\",reqData);\n                // postAPI(interpolate(\"API name\" [that.props.match.params.id]), reqData, successFn, errorFn);\n            }\n        });\n    }\n\n\n    render(){\n    \tconst that = this;\n        const {getFieldDecorator, getFieldValue, getFieldsValue} = this.props.form;\n        const formItemLayout = {\n            labelCol: {\n                xs: {span: 24},\n                sm: {span: 4},\n            },\n            wrapperCol: {\n                xs: {span: 24},\n                sm: {span: 20},\n            },\n        };\n        const formItemLayoutWithOutLabel = {\n            labelCol: {\n                xs: {span: 24},\n                sm: {span: 24},\n            },\n            wrapperCol: {\n                xs: {span: 24},\n                sm: {span: 24},\n            },\n        };\n        const coloums = [{\n            title: 'Name',\n            dataIndex: 'name',\n            key: 'name',\n            render: (name, record) => (\n<span>\n                <b>{name}</b>\n</span>\n)\n        }, {\n            title: 'Cost',\n            dataIndex: 'cost',\n            key: 'cost',\n            render: (name, record) => (\n<span><Form.Item\n  key={`cost[${record._id}]`}\n  {...formItemLayout}\n>\n                {getFieldDecorator(`cost[${record._id}]`, {\n                    validateTrigger: ['onChange', 'onBlur'],\n                    rules: [{\n                        required: true,\n                        message: \"This field is required.\",\n                    }],\n                    initialValue: record.cost\n                })}\n      </Form.Item>\n</span>\n)\n        },  {\n            title: 'Total',\n            dataIndex: 'total',\n            key: 'total',\n            render: (total, record) => (\n<span>\n                {total}\n                <a onClick={() => this.removeTests(record._id,record)}>\n                    <Icon type=\"close-circle\" theme=\"twoTone\" twoToneColor=\"#f00\" />\n                </a>\n</span>\n)\n        }];\n        return (\n<div>\n            <Form onSubmit={this.handleSubmit}>\n                <Card\n                  title=\"Patient Lab Orders\"\n                  bodyStyle={{padding: 0}}\n                  extra={(\n<Form.Item {...formItemLayoutWithOutLabel} style={{marginBottom: 0}}>\n                          <Button type=\"primary\" htmlType=\"submit\">Save Lab Orders</Button>\n</Form.Item>\n)}\n                >\n                    <Row gutter={16}>\n                        <Col span={7}>\n                            <List\n                              size=\"small\"\n                              itemLayout=\"horizontal\"\n                              dataSource={this.state.lab_test}\n                              renderItem={item => (\n                                      <List.Item>\n                                          <List.Item.Meta\n                                            title={item.name}\n                                          />\n                                          <Button\n                                            type=\"primary\"\n                                            size=\"small\"\n                                            shape=\"circle\"\n                                            onClick={() => this.add(item)}\n                                            icon=\"arrow-right\"\n                                          />\n                                      </List.Item>\n)}\n                            />\n                        </Col>\n                        <Col span={17}>\n\n                            <Table\n                              pagination={false}\n                              bordered\n                              dataSource={this.state.tableFormValues}\n                              columns={coloums}\n                            />\n\n\n                        </Col>\n                    </Row>\n                </Card>\n            </Form>\n</div>\n)\n    }\n}\nexport default Form.create()(AddPatientLabOrders);\n","import React from \"react\";\nimport {Card, Button, Icon, Table, Divider, Checkbox} from \"antd\";\nimport {Link} from \"react-router-dom\";\nimport moment from \"moment\";\nimport {Route, Switch} from \"react-router\";\nimport  AddPatientLabOrders from \"./AddPatientLabOrders\";\n\nclass PatientLabOrders extends React.Component{\n\tconstructor(props){\n        super(props);\n        this.state={\n            currentPatient: this.props.currentPatient,\n            active_practiceId: this.props.active_practiceId,\n        \tloading:false,\n        }\n    }\n\n    render(){\n    \tconst columns = [{\n            title: 'Time',\n            dataIndex: 'created_at',\n            key: 'name',\n            render: created_at => <span>{moment(created_at).format('LLL')}</span>,\n        }, {\n            title: 'Drug',\n            key: 'drug',\n\n        }, {\n            title: 'Quantity',\n            dataIndex: 'qunatity',\n            key: 'quantity',\n        }, {\n            title: 'Cost Per  Unit',\n            dataIndex: 'cost',\n            key: 'cost',\n        }, {\n            title: 'Completed',\n            key: 'is_completed',\n            render: (text, record) => (\n                <Checkbox checked={record.is_completed} />\n            )\n        }, {\n            title: 'Action',\n            key: 'action',\n            render: (text, record) => (\n                <span>\n                <a onClick={() => this.editPrescriptionData(record)}>Edit</a>\n                <Divider type=\"vertical\" />\n                <a href=\"javascript:;\">Delete</a>\n                </span>\n            ),\n        }];\n\n    \treturn (\n<div><Switch>\n              <Route\n                exact\n                path='/patient/:id/emr/labtrackings/add'\n                render={(route) => <AddPatientLabOrders {...this.state} {...route} />}\n              />\n              <Card\n                title={this.state.currentPatient?`${this.state.currentPatient.user.first_name  } Lab Order`:\"Patients Lab Order\"}\n                extra={(\n<Button.Group>\n                    <Link to={`/patient/${this.props.match.params.id}/emr/labtrackings/add`}><Button><Icon type=\"plus\" />Add</Button></Link>\n</Button.Group>\n)}\n              >\n\n                  <Table loading={this.state.loading} columns={columns} dataSource={this.state.payments} />\n\n              </Card>\n     </Switch>\n\n</div>\n)\n    }\n\n}\n\nexport default PatientLabOrders;\n","import React from \"react\";\nimport {\n    Affix,\n    Button,\n    Card,\n    Col,\n    DatePicker, Divider,\n    Dropdown,\n    Form, Icon,\n    Input,\n    InputNumber,\n    List,\n    Menu,\n    Row,\n    Select,\n    Spin,\n    Table,\n    Tabs,\n    Tag, Typography\n} from \"antd\";\nimport moment from \"moment\";\nimport {initialize} from \"react-ga\";\nimport {displayMessage, getAPI, interpolate, postAPI, putAPI} from \"../../../utils/common\";\nimport {CURRENCY_TYPE, DRUG, INVENTORY, PRESCRIPTIONS, PROCEDURES} from \"../../../constants/hardData\";\nimport {\n    CHECK_PROMO_CODE,\n    CREATE_OR_EDIT_INVOICES,\n    INVENTORY_ITEM_API, OFFERS,\n    PROCEDURE_CATEGORY,\n    SEARCH_THROUGH_QR,\n    SINGLE_INVOICE_API,\n    TAXES,\n    UNPAID_PRESCRIPTIONS\n} from \"../../../constants/api\";\nimport {loadDoctors} from \"../../../utils/clinicUtils\";\n\nconst {Search} = Input;\nconst {TabPane} = Tabs;\nconst {Text} = Typography;\nconst tableFormFields = {\n    _id: null,\n    quantity: 0,\n    batch: null\n};\n\nclass Addinvoicedynamic extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            classType: props.type,\n            tableFormValues: [],\n            maxQuantityforConsume: {},\n            items: {},\n            practiceDoctors: [],\n            selectedPrescriptions: [],\n            selectedDate: moment(),\n            stocks: {},\n            itemBatches: {},\n            saveLoading: false,\n            qrValue: '',\n            searchItem: '',\n            selectedDoctor: {},\n            tempValues: {},\n            offers: [],\n            loading: false,\n            taxes_list: [],\n            promoCode: '',\n            appliedPromoCodeDiscount: null,\n            promoCodeCheckLoading: false\n        }\n\n    }\n\n    componentDidMount() {\n        const that = this;\n        loadDoctors(this);\n        this.loadInventoryItemList();\n        this.loadProcedures();\n        this.loadPrescriptions();\n        this.loadTaxes();\n        this.loadLoyaltyDiscount();\n        if (this.props.editId) {\n            setTimeout(function () {\n                that.setState({\n                    loading: false,\n                })\n                that.loadEditInvoiceData();\n            }, 2000);\n\n\n        }\n    }\n\n    selectedDefaultDate = (date) => {\n        this.setState({\n            selectedDate: date\n        })\n    }\n\n    loadEditInvoiceData = () => {\n        const that = this;\n        const successFn = function (data) {\n            const invoice = data;\n            that.setState(function (prevState) {\n                const tableValues = [];\n                invoice.procedure.forEach(function (proc) {\n                    tableValues.push({\n                        ...proc.procedure_data,\n                        ...proc,\n                        selectedDoctor: proc.doctor_data,\n                        selectedDate: moment(proc.date).isValid() ? moment(proc.date) : null,\n                        _id: Math.random().toFixed(7),\n                        item_type: PROCEDURES\n                    })\n                });\n                const stocks = {...prevState.stocks};\n                const itemBatches = {...prevState.itemBatches};\n                invoice.inventory.forEach(function (proc) {\n\n                    // if (!itemBatches[proc.inventory]) {\n                        itemBatches[proc.inventory] = proc.inventory_item_data.item_type_stock.item_stock || [];\n                    // }\n                    if (stocks[proc.inventory]) {\n                        const stock_quantity = stocks[proc.inventory];\n                        if (proc.inventory_item_data.item_type_stock && proc.inventory_item_data.item_type_stock.item_stock)\n                            proc.inventory_item_data.item_type_stock.item_stock.forEach(function (stock) {\n                                if (stock_quantity[stock.batch_number])\n                                    stock_quantity[stock.batch_number] += stock.quantity;\n                                else\n                                    stock_quantity[stock.batch_number] = stock.quantity;\n                            });\n                    } else {\n                        const stock_quantity = {}\n                        if (proc.inventory_item_data.item_type_stock && proc.inventory_item_data.item_type_stock.item_stock)\n                            proc.inventory_item_data.item_type_stock.item_stock.forEach(function (stock) {\n                                stock_quantity[stock.batch_number] = stock.quantity\n                            });\n                        stocks[proc.inventory_item_data.id] = stock_quantity;\n                    }\n\n                    if (stocks[proc.inventory]) {\n                        const stock_quantity = stocks[proc.inventory];\n                        if (stock_quantity[proc.batch_number])\n                            stock_quantity[proc.batch_number] += proc.unit;\n                        else\n                            stock_quantity[proc.batch_number] = proc.unit;\n                    } else {\n                        const stock_quantity = {};\n                        stock_quantity[proc.batch_number] = proc.unit;\n                        stocks[proc.inventory] = stock_quantity;\n                    }\n                    if (itemBatches[proc.inventory])\n                        itemBatches[proc.inventory].forEach(function (batchObj) {\n                            if (batchObj.batch_number == proc.batch_number)\n                                proc.selectedBatch = batchObj;\n                        });\n                    tableValues.push({\n                        ...proc.inventory_item_data,\n                        ...proc,\n                        selectedDoctor: proc.doctor_data,\n                        _id: Math.random().toFixed(7),\n                        item_type: INVENTORY,\n\n                    });\n                });\n                return {\n                    tableFormValues: tableValues,\n                    selectedDate: moment(invoice.date).isValid() ? moment(invoice.date) : null,\n                    stocks,\n                    itemBatches\n                }\n            })\n        }\n        const errorFn = function () {\n\n        }\n        getAPI(interpolate(SINGLE_INVOICE_API, [this.props.editId]), successFn, errorFn);\n    };\n\n    loadInventoryItemList(page = 1) {\n        const that = this;\n        const searchString = this.state.searchItem;\n        that.setState({\n            loadingInventory: true\n        })\n        const successFn = function (reqData) {\n            const data = reqData.results;\n            const drugItems = [];\n            if (that.state.searchItem == searchString)\n                that.setState(function (prevState) {\n                        const stocks = {...prevState.stocks};\n                        const itemBatches = {...prevState.itemBatches};\n                        data.forEach(function (item) {\n                            // if (item.item_type == DRUG) {\n                            drugItems.push(item);\n                            if (stocks[item.id]) {\n                                const stock_quantity = stocks[item.id];\n                                if (item.item_type_stock && item.item_type_stock.item_stock)\n                                    item.item_type_stock.item_stock.forEach(function (stock) {\n                                        if (stock_quantity[stock.batch_number])\n                                            stock_quantity[stock.batch_number] += stock.quantity;\n                                        else\n                                            stock_quantity[stock.batch_number] = stock.quantity;\n                                    });\n                            } else {\n                                const stock_quantity = {}\n                                if (item.item_type_stock && item.item_type_stock.item_stock)\n                                    item.item_type_stock.item_stock.forEach(function (stock) {\n                                        stock_quantity[stock.batch_number] = stock.quantity\n                                    });\n                                stocks[item.id] = stock_quantity;\n                            }\n                            if (item.item_type_stock.item_stock) {\n                                console.log(itemBatches,itemBatches[item.id],item);\n                                if (itemBatches[item.id])\n                                    itemBatches[item.id] = [...itemBatches[item.id], ...item.item_type_stock.item_stock];\n                                else\n                                    itemBatches[item.id] = [...item.item_type_stock.item_stock];\n                            }\n\n                        });\n                        const {items} = prevState;\n                        items[INVENTORY] = {...reqData, results: drugItems};\n                        return {\n                            items,\n                            stocks: {...prevState.stocks, ...stocks},\n                            itemBatches: {...prevState.itemBatches, ...itemBatches},\n                            loadingInventory: false,\n                        }\n                    }, function () {\n                        if (that.props.editId) {\n                            that.loadEditInvoiceData();\n                        }\n                    }\n                )\n\n        }\n        const errorFn = function () {\n            that.setState({\n                loadingInventory: false\n            })\n        }\n        const paramsApi = {\n            practice: this.props.active_practiceId,\n            maintain_inventory: true,\n            page\n        }\n        if (this.state.searchItem) {\n            paramsApi.item_name = searchString;\n        }\n\n        getAPI(INVENTORY_ITEM_API, successFn, errorFn, paramsApi);\n    }\n\n    loadProcedures(page = 1) {\n        const that = this;\n        const searchString = this.state.searchItem;\n        const successFn = function (data) {\n            const {items} = that.state;\n            items[PROCEDURES] = data;\n            if (that.state.searchItem == searchString)\n                that.setState({\n                    items,\n                })\n        };\n        const errorFn = function () {\n        };\n        const paramsApi = {\n            practice: this.props.active_practiceId,\n            page\n        }\n        if (this.state.searchItem) {\n            paramsApi.name = searchString;\n        }\n        getAPI(interpolate(PROCEDURE_CATEGORY, [this.props.active_practiceId]), successFn, errorFn, paramsApi);\n    }\n\n    loadPrescriptions() {\n        const that = this;\n        const searchString = this.state.searchItem;\n        const successFn = function (data) {\n            if (that.state.searchItem == searchString)\n                that.setState(function (prevState) {\n                    return {\n                        items: {...prevState.items, [PRESCRIPTIONS]: data}\n                    }\n                })\n        };\n        const errorFn = function () {\n        };\n        const paramsApi = {\n            practice: this.props.active_practiceId,\n        }\n        if (this.state.searchItem) {\n            paramsApi.item_name = searchString;\n        }\n        getAPI(interpolate(UNPAID_PRESCRIPTIONS, [that.props.match.params.id]), successFn, errorFn, paramsApi);\n    }\n\n    loadTaxes() {\n        const that = this;\n        const successFn = function (data) {\n            that.setState({\n                taxes_list: data,\n            })\n        };\n        const errorFn = function () {\n        };\n        getAPI(interpolate(TAXES, [this.props.active_practiceId]), successFn, errorFn);\n\n    }\n\n    remove = (k) => {\n        this.setState(function (prevState) {\n            const newTableFormValues = [];\n            prevState.tableFormValues.forEach(function (formValue) {\n                if (formValue._id != k)\n                    newTableFormValues.push(formValue);\n            });\n            return {\n                tableFormValues: newTableFormValues\n            }\n        });\n    }\n\n\n    add = (item, randId = Math.random().toFixed(7)) => {\n        this.setState(function (prevState) {\n            if (item.item_type == PROCEDURES) {\n                item = {\n                    ...item,\n                    id: undefined,\n                    unit: 1,\n                    unit_cost: item.cost,\n                    procedure: item.id,\n                    selectedDoctor: prevState.selectedDoctor ? prevState.selectedDoctor : null,\n                    selectedDate: moment(),\n                    taxes: item.taxes.map(tax => tax.id)\n                }\n            } else if (item.item_type == INVENTORY) {\n                item = {\n                    ...item,\n                    id: undefined,\n                    inventory: item.id,\n                    unit_cost: item.retail_without_tax,\n                    selectedDoctor: prevState.selectedDoctor ? prevState.selectedDoctor : null,\n                }\n            }\n            let membershipDiscount = 0;\n            if (this.props.MedicalMembership) {\n                membershipDiscount = this.props.MedicalMembership.medical_membership.benefit;\n            }\n            return {\n                tableFormValues: [{\n                    ...tableFormFields,\n                    ...item,\n                    id: undefined,\n                    _id: randId,\n                    discount: membershipDiscount\n                }, ...prevState.tableFormValues]\n            }\n        });\n    };\n\n    selectDoctor = (doctor, id, type) => {\n        this.setState(function (prevState) {\n            const finalTableFormValues = [];\n            prevState.tableFormValues.forEach(function (formValue) {\n                if (formValue._id == id && formValue.item_type == type) {\n                    finalTableFormValues.push({...formValue, selectedDoctor: doctor});\n\n                } else {\n                    finalTableFormValues.push(formValue);\n\n                }\n            });\n            return {\n                tableFormValues: finalTableFormValues,\n            }\n        })\n    }\n\n    selectedDate = (dateValue, id, type) => {\n        this.setState(function (prevState) {\n            const finalTableFormValues = [];\n            prevState.tableFormValues.forEach(function (formValue) {\n                if (formValue._id == id && formValue.item_type == type) {\n                    finalTableFormValues.push({...formValue, selectedDate: dateValue})\n                } else {\n                    finalTableFormValues.push(formValue)\n                }\n            });\n            return {\n                tableFormValues: finalTableFormValues\n            }\n        })\n    }\n\n    selectBatch = (batch, id, type) => {\n        this.setState(function (prevState) {\n            const finalTableFormValues = [];\n            prevState.tableFormValues.forEach(function (formValue) {\n                if (formValue._id == id && formValue.item_type == type) {\n                    finalTableFormValues.push({...formValue, selectedBatch: batch})\n                } else {\n                    finalTableFormValues.push(formValue)\n                }\n            });\n            return {\n                tableFormValues: finalTableFormValues\n            }\n        })\n    }\n\n    addPrescription = (item) => {\n        const that = this;\n        item.drugs.forEach(function (drug_item) {\n            if (drug_item.inventory.maintain_inventory)\n                that.add({...drug_item.inventory, item_type: INVENTORY, inventory: item.inventory.id, id: undefined})\n        });\n        that.setState(function (prevState) {\n            return {selectedPrescriptions: [...prevState.selectedPrescriptions, item.id]}\n        })\n    }\n\n    handleSubmit = (goBack) => {\n        const that = this;\n        this.props.form.validateFields((err, values) => {\n            if (!err) {\n                that.setState({\n                    // saveLoading: true\n                });\n                const reqData = {\n                    promo_code: that.state.promoCode,\n                    practice: that.props.active_practiceId,\n                    patient: that.props.match.params.id,\n                    unit: null,\n                    cost: null,\n                    discount: null,\n                    taxes: 0,\n                    total: null,\n                    procedure: [],\n                    inventory: [],\n                    prescription: that.state.selectedPrescriptions,\n                    notes: values.notes,\n                    date: that.state.selectedDate && moment(that.state.selectedDate).isValid() ? that.state.selectedDate.format('YYYY-MM-DD') : null,\n                };\n                that.state.tableFormValues.forEach(function (item) {\n                    item.unit = values.unit[item._id];\n                    item.taxes = values.taxes[item._id];\n                    // item.unit_cost = values.unit_cost[item._id];\n                    // item.discount = values.discount[item._id];\n                    // item.discount_type = values.discount_type[item._id];\n                    // item.offers = values.offers;\n                    switch (item.item_type) {\n                        case PROCEDURES:\n                            reqData.procedure.push({\n                                \"name\": item.name,\n                                \"unit\": item.unit,\n                                \"procedure\": item.procedure,\n                                \"default_notes\": null,\n                                \"is_active\": true,\n                                \"margin\": item.margin,\n                                \"taxes\": item.taxes,\n                                \"unit_cost\": item.unit_cost,\n                                // \"unit_cost\": item.total_unit_cost?item.total_unit_cost:item.unit_cost,\n                                \"discount\": item.discount,\n                                \"discount_type\": item.discount_type,\n                                \"offers\": item.offers,\n                                \"doctor\": item.selectedDoctor ? item.selectedDoctor.id : null,\n                                id: that.props.editId ? item.id : undefined\n                            });\n                            break;\n                        case INVENTORY:\n                            reqData.inventory.push({\n                                \"inventory\": item.inventory,\n                                \"name\": item.name,\n                                \"unit\": item.unit,\n                                \"taxes\": item.taxes,\n                                \"unit_cost\": item.unit_cost,\n                                // \"unit_cost\": item.total_unit_cost?item.total_unit_cost:item.unit_cost,\n                                \"discount\": item.discount,\n                                \"discount_type\": item.discount_type,\n                                \"offers\": item.offers,\n                                \"doctor\": item.selectedDoctor ? item.selectedDoctor.id : null,\n                                \"instruction\": item.instruction,\n                                \"is_active\": true,\n                                batch_number: item.selectedBatch ? item.selectedBatch.batch_number : null,\n                                id: that.props.editId ? item.id : undefined\n                            });\n                            break;\n                        default:\n                            return null;\n                    }\n                });\n                const successFn = function (data) {\n                    that.setState({\n                        saveLoading: false\n                    });\n                    displayMessage(\"Inventory updated successfully\");\n                    that.props.loadData();\n                    if (goBack) {\n                        that.props.history.goBack()\n                    } else {\n                        const url = `/patient/${  that.props.match.params.id  }/billing/payments/add?invoices=${  data.id}`;\n                        that.props.history.replace(url);\n                    }\n                };\n                const errorFn = function () {\n                    that.setState({\n                        saveLoading: false\n                    });\n                };\n                if (that.props.editId) {\n                    putAPI(interpolate(SINGLE_INVOICE_API, [that.props.editId]), reqData, successFn, errorFn);\n                } else {\n                    postAPI(CREATE_OR_EDIT_INVOICES, reqData, successFn, errorFn);\n                }\n\n            }\n        });\n    }\n\n    addItemThroughQR = (value) => {\n        const that = this;\n        that.setState({\n            loadingQr: true,\n        })\n        const qrSplitted = value.split('*');\n        const successFn = function (data) {\n\n            const item = data;\n            const {setFieldsValue, getFieldsValue, getFieldValue} = that.props.form;\n            const randomId = Math.random().toFixed(7);\n            let flag = true\n            that.state.tableFormValues.forEach(function (row) {\n                if (row.name == qrSplitted[0]) {\n                    const {_id} = row;\n                    const batch = row.selectedBatch.batch_number;\n                    const quantity = getFieldValue(`unit[${_id}]`);\n                    if (batch == qrSplitted[1]) {\n                        flag = false;\n                        setFieldsValue({\n                            [`unit[${_id}]`]: quantity + 1\n                        })\n                    }\n                }\n            });\n            if (flag) {\n                let unit_cost = null;\n                if (data.item_type_stock && data.item_type_stock.item_stock)\n                    data.item_type_stock.item_stock.forEach(function (stock) {\n                        if (stock.batch_number == qrSplitted[1]) {\n                            data.selectedBatch = stock;\n                            unit_cost = stock.unit_cost\n                        }\n                    })\n                that.add({...data, item_type: INVENTORY}, randomId);\n\n                setFieldsValue({\n                    [`unit_cost[${randomId}]`]: unit_cost,\n                })\n            }\n            that.setState(function (prevState) {\n                // if (prevState.items && prevState.items[INVENTORY]) {\n                //     prevState.items[INVENTORY].forEach(function (inventItem) {\n                //         console.log(item.inventory_item)\n                //         if (inventItem.id == item.inventory_item) {\n                //             console.log(inventItem);\n                //             that.add({...inventItem, item_type: INVENTORY});\n                //\n                //         }\n                //     })\n                // }\n                return {\n                    loadingQr: false,\n                    qrValue: ''\n                }\n            });\n        }\n        const errorFn = function () {\n\n        }\n        getAPI(SEARCH_THROUGH_QR, successFn, errorFn, {qr: value, form: 'Invoice'})\n    }\n\n    setQrValue = (e) => {\n        const {value} = e.target;\n        this.setState({\n            qrValue: value\n        })\n    }\n\n    searchValues = (e, type) => {\n        const that = this;\n        const {value} = e.target;\n        this.setState({\n            searchItem: value,\n        }, function () {\n            if (type == INVENTORY)\n                that.loadInventoryItemList();\n            else if (type == PRESCRIPTIONS)\n                that.loadPrescriptions();\n            else if (type == PROCEDURES)\n                that.loadProcedures();\n        })\n\n    }\n\n    changeNetPrice = (id, value) => {\n        const that = this;\n        const {getFieldsValue, setFields} = this.props.form;\n        setTimeout(function () {\n            const values = getFieldsValue();\n            if (values.unit_cost[id] || values.unit[id] || values.discount[id] || values.discount_type[id]) {\n                that.setState(function (prevState) {\n                    const newTableValues = []\n                    prevState.tableFormValues.forEach(function (tableObj) {\n                        if (tableObj._id == id) {\n                            let totalTaxAmount = 0;\n                            let initialDiscount = 0;\n                            let initialDiscountType = '%';\n                            let offer = null;\n                            let selectOption = tableObj.selectOption || tableObj.selectOption == false ? tableObj.selectOption : false;\n                            values.taxes[id].forEach(function (taxid) {\n                                prevState.taxes_list.forEach(function (taxObj) {\n                                    if (taxObj.id == taxid)\n                                        totalTaxAmount += taxObj.tax_value;\n                                })\n                            });\n                            if (value && value == '0') {\n                                selectOption = false\n                            }\n                            if (values.discount_type && values.discount_type[id]) {\n                                initialDiscount = values.discount[id];\n                                initialDiscountType = values.discount_type[id];\n                                offer = null;\n                            } else {\n                                initialDiscount = values.discount[id] ? values.discount[id].toString().split('#')[0] : '';\n                                initialDiscountType = values.discount[id] ? values.discount[id].toString().split('#')[1] : '';\n                                offer = values.discount[id] ? values.discount[id].toString().split('#')[2] : null;\n                            }\n\n                            let total = values.unit[id] * (values.unit_cost[id] ? values.unit_cost[id] : 0);\n\n                            if (initialDiscountType == '%' && initialDiscount) {\n                                if (initialDiscount > 100) {\n                                    initialDiscount = 100\n                                }\n                                total *= (1 - (initialDiscount * 0.01));\n                            } else if (initialDiscountType == 'INR' && initialDiscount) {\n                                if (total > initialDiscount) {\n                                    total -= initialDiscount;\n                                } else {\n                                    total = 0;\n                                }\n                            }\n\n                            total *= (1 + totalTaxAmount * 0.01);\n                            const totalWithoutTaxWithDiscount = total / values.unit[id];\n\n                            newTableValues.push({\n                                ...tableObj,\n                                total_unit_cost: totalWithoutTaxWithDiscount,\n                                total,\n                                selectOption,\n                                discount: initialDiscount,\n                                discount_type: initialDiscountType,\n                                offers: offer\n                            })\n                        } else {\n                            newTableValues.push(tableObj);\n                        }\n                    })\n                    return {tableFormValues: newTableValues}\n                })\n            } else {\n                that.setState({\n                    retail_price: 0\n                })\n            }\n            that.checkPromoCode();\n        }, 1000);\n\n    };\n\n    applyPromoCodeDiscounts = (discountValue) => {\n        const that = this;\n        const {setFieldsValue, getFieldsValue} = that.props.form;\n        const newTableValues = [];\n        const values = getFieldsValue();\n        let initialDiscount = discountValue;\n        const valueToSet = {};\n        that.state.tableFormValues.forEach(function (tableObj) {\n            let totalTaxAmount = 0;\n            const initialDiscountType = 'INR';\n            let discountApplied = 0;\n            const offer = null;\n            const selectOption = tableObj.selectOption || tableObj.selectOption == false ? tableObj.selectOption : false;\n            values.taxes[tableObj._id].forEach(function (taxid) {\n                that.state.taxes_list.forEach(function (taxObj) {\n                    if (taxObj.id == taxid)\n                        totalTaxAmount += taxObj.tax_value;\n                })\n            });\n\n            let total = values.unit[tableObj._id] * (values.unit_cost[tableObj._id] ? values.unit_cost[tableObj._id] : 0);\n            let discountAppliedOnProduct = 0;\n            if (initialDiscountType == 'INR' && initialDiscount) {\n                if (total > initialDiscount) {\n                    total -= initialDiscount;\n                    discountAppliedOnProduct = initialDiscount;\n                    discountApplied = initialDiscount;\n                    initialDiscount = 0;\n\n                } else {\n                    initialDiscount -= total;\n                    discountAppliedOnProduct = total;\n                    discountApplied = total;\n                    total = 0;\n                }\n            }\n\n            total *= (1 + totalTaxAmount * 0.01);\n            const totalWithoutTaxWithDiscount = total / values.unit[tableObj._id];\n\n            newTableValues.push({\n                ...tableObj,\n                total_unit_cost: totalWithoutTaxWithDiscount,\n                total,\n                selectOption,\n                discount: discountAppliedOnProduct,\n                discount_type: initialDiscountType,\n                offers: offer\n            })\n            valueToSet[`discount[${tableObj._id}]`] = discountApplied.toFixed(2);\n            valueToSet[`discount_type[${tableObj._id}]`] = initialDiscountType;\n        });\n        that.setState({\n            tableFormValues: newTableValues\n        });\n        setFieldsValue(valueToSet);\n    }\n\n    loadLoyaltyDiscount = () => {\n        const that = this;\n        const successFn = function (data) {\n            that.setState({\n                offers: data,\n                // loading: false\n            })\n        };\n        const errorFn = function () {\n            that.setState({\n                // loading: true\n            })\n        };\n        getAPI(interpolate(OFFERS, [this.props.active_practiceId]), successFn, errorFn);\n    };\n\n    onChangeOption = (type, id) => {\n        const that = this;\n        that.setState(function (prevState) {\n            const tempArr = [];\n\n            prevState.tableFormValues.forEach(function (formValue) {\n\n                if (formValue._id == id) {\n                    tempArr.push({...formValue, selectOption: true})\n                } else {\n                    tempArr.push(formValue)\n                }\n            });\n            return {tableFormValues: tempArr}\n        });\n    };\n\n    onChangeOffer = (value, id) => {\n        const that = this;\n        that.setState(function (prevState) {\n            const selectedOffer = [];\n            prevState.tableFormValues.forEach(function (formValue) {\n                if (formValue._id == id) {\n\n                    if (value == 'none') {\n                        selectedOffer.push({...formValue, loyaltyDiscount: null})\n                    }\n                    if (value == '0') {\n                        selectedOffer.push({...formValue, selectOption: false})\n                    } else {\n                        prevState.offers.forEach(function (item) {\n\n                            if (item.id == value) {\n                                selectedOffer.push({...formValue, loyaltyDiscount: item.discount})\n                            }\n                        });\n                    }\n                } else {\n                    selectedOffer.push(formValue);\n                }\n            });\n            return {tableFormValues: selectedOffer}\n\n        });\n\n    };\n\n\n    onchangeDiscountSimple = (value, id) => {\n        console.log(value, id);\n        const that = this;\n        that.setState(function (prevState) {\n            const selectedOffer = [];\n            prevState.tableFormValues.forEach(function (formValue) {\n                if (formValue._id == id) {\n\n                    const retailPrice = formValue.unit_cost / (1 + value * 0.01);\n                    console.log(retailPrice);\n                    selectedOffer.push({...formValue, loyaltyDiscount: value})\n\n                } else {\n                    selectedOffer.push(formValue);\n                }\n            });\n            return {tableFormValues: selectedOffer}\n\n        });\n\n    }\n\n    enterPromoCode = (e) => {\n        this.setState({\n            promoCode: e.target.value\n        })\n    }\n\n    calculateGrandTotalWithoutDiscount = () => {\n        let grandTotal = 0;\n        const that = this;\n        const {getFieldsValue} = this.props.form;\n        const values = getFieldsValue();\n        this.state.tableFormValues.forEach(function (tableObj) {\n            let totalTaxAmount = 0;\n            values.taxes[tableObj._id].forEach(function (taxid) {\n                that.state.taxes_list.forEach(function (taxObj) {\n                    if (taxObj.id == taxid)\n                        totalTaxAmount += taxObj.tax_value;\n                })\n            });\n            let total = values.unit[tableObj._id] * (values.unit_cost[tableObj._id] ? values.unit_cost[tableObj._id] : 0);\n            total *= (1 + totalTaxAmount * 0.01);\n            grandTotal += total\n        });\n        return grandTotal;\n    };\n\n    checkPromoCode = (e) => {\n        const that = this;\n        that.setState({\n            promoCodeCheckLoading: true\n        })\n        const successFn = function (data) {\n            that.setState({\n                appliedPromoCodeDiscount: data.discount,\n                promoCodeCheckLoading: false\n            });\n            that.applyPromoCodeDiscounts(data.discount)\n        };\n        const errorFn = function () {\n\n            that.setState({\n                promoCodeCheckLoading: false, appliedPromoCodeDiscount: null, promoCode: ''\n            })\n        };\n        const params = {\n            promo_code: this.state.promoCode,\n            practice: this.props.active_practiceId,\n            patient: that.props.match.params.id,\n            amount: this.calculateGrandTotalWithoutDiscount()\n        };\n        if (params.promo_code)\n            getAPI(CHECK_PROMO_CODE, successFn, errorFn, params);\n        else\n            that.setState({\n                promoCodeCheckLoading: false\n            })\n    }\n\n    removePromoCode = () => {\n        this.setState({\n            appliedPromoCodeDiscount: 0,\n            promoCodeCheckLoading: false,\n            promoCode: ''\n        });\n        this.applyPromoCodeDiscounts(0)\n    }\n\n    render() {\n        const that = this;\n        const {getFieldDecorator} = this.props.form;\n        const formItemLayout = {\n            labelCol: {\n                xs: {span: 24},\n                sm: {span: 4},\n            },\n            wrapperCol: {\n                xs: {span: 24},\n                sm: {span: 24},\n                md: {span: 24},\n                lg: {span: 24},\n                xl: {span: 24},\n            },\n        };\n        const formItemLayoutWithOutLabel = {\n            labelCol: {\n                xs: {span: 24},\n                sm: {span: 24},\n            },\n            wrapperCol: {\n                xs: {span: 24},\n                sm: {span: 24},\n            },\n        };\n        getFieldDecorator('keys', {initialValue: []});\n        let consumeRow = [{\n            title: 'Item Name',\n            key: 'item_name',\n            dataIndex: 'name',\n            width: 180,\n            render (name, record) {\n                switch (record.item_type) {\n                    case PROCEDURES:\n                        return (\n<Form.Item\n  key={`name[${record._id}]`}\n  {...formItemLayout}\n>\n                            {getFieldDecorator(`name[${record._id}]`, {\n                                validateTrigger: ['onChange', 'onBlur'],\n                                initialValue: name,\n                                rules: [{\n                                    required: true,\n                                    message: \"This field is required.\",\n                                }],\n                            })(\n                                <Input min={0} placeholder=\"Item name\" size=\"small\" />\n                            )}\n                            <span>by &nbsp;&nbsp;</span>\n                            <Dropdown\n                              placement=\"topCenter\"\n                              overlay={(\n<Menu>\n                                {that.state.practiceDoctors.map(doctor => (\n                                    <Menu.Item key=\"0\">\n                                        <a onClick={() => that.selectDoctor(doctor, record._id, PROCEDURES)}>{doctor.user.first_name}</a>\n                                    </Menu.Item>\n                                  ))}\n</Menu>\n)}\n                              trigger={['click']}\n                            >\n                                <a className=\"ant-dropdown-link\" href=\"#\">\n                                    <b>\n                                        {record.selectedDoctor.user ? record.selectedDoctor.user.first_name : 'No DOCTORS Found'}\n                                    </b>\n                                </a>\n                            </Dropdown>\n                            <span> &nbsp;&nbsp;on&nbsp;&nbsp;</span>\n                            <DatePicker\n                              value={record.selectedDate}\n                              size=\"small\"\n                              onChange={(value) => that.selectedDate(value, record._id, PROCEDURES)}\n                              format=\"DD-MM-YYYY\"\n                            />\n</Form.Item>\n);\n                    case PRESCRIPTIONS:\n                        return <b>{record.name}</b>;\n                    case INVENTORY:\n                        return (\n<div>\n                            <span>{record.name}</span>\n\n                            <span><br />by &nbsp;&nbsp;</span>\n                            <Dropdown\n                              placement=\"topCenter\"\n                              overlay={(\n<Menu>\n                                {that.state.practiceDoctors.map(doctor => (\n                                    <Menu.Item key={doctor.id}>\n                                        <a onClick={() => that.selectDoctor(doctor, record._id, INVENTORY)}>{doctor.user.first_name}</a>\n                                    </Menu.Item>\n                                  ))}\n</Menu>\n)}\n                              trigger={['click']}\n                            >\n                                <a className=\"ant-dropdown-link\" href=\"#\">\n                                    <b>\n                                        {record.selectedDoctor.user ? record.selectedDoctor.user.first_name : 'No DOCTORS Found'}\n                                    </b>\n                                </a>\n                            </Dropdown>\n                            <span><br />from batch &nbsp;&nbsp;</span>\n                            <Dropdown\n                              placement=\"topCenter\"\n                              overlay={(\n<Menu>\n                                {that.state.itemBatches[record.inventory] && that.state.itemBatches[record.inventory].map((batch, index) =>\n                                    (moment() >= moment(batch.expiry_date) ? (\n<Menu.Item key={index} disabled>\n                                        {batch.batch_number}&nbsp;({batch.quantity}) &nbsp;&nbsp;{batch.expiry_date}\n</Menu.Item>\n) : (\n<Menu.Item key={index}>\n                                        <a onClick={() => that.selectBatch(batch, record._id, INVENTORY)}>{batch.batch_number}&nbsp;({batch.quantity}) &nbsp;&nbsp;{batch.expiry_date}</a>\n</Menu.Item>\n)))}\n</Menu>\n)}\n                              trigger={['click']}\n                            >\n                                <a className=\"ant-dropdown-link\" href=\"#\">\n                                    <b>\n                                        {record.selectedBatch ? record.selectedBatch.batch_number : 'Select Batch'}\n                                    </b>\n                                </a>\n                            </Dropdown>\n</div>\n)\n                    default:\n                        return null;\n                }\n            }\n        }];\n        consumeRow = consumeRow.concat([{\n            title: 'Unit',\n            key: 'unit',\n            width: 100,\n            dataIndex: 'unit',\n            render: (item, record) => (record.item_type == INVENTORY ? (\n                    <Form.Item\n                      key={`unit[${record._id}]`}\n                      {...formItemLayout}\n                    >\n                        {getFieldDecorator(`unit[${record._id}]`, {\n                            validateTrigger: ['onChange', 'onBlur'],\n                            initialValue: record.unit || 0,\n                            rules: [{\n                                required: true,\n                                message: \"This field is required.\",\n                            }],\n                        })(\n                            <InputNumber\n                              min={1}\n                              max={(record.selectedBatch && that.state.stocks[record.inventory] && that.state.stocks[record.inventory][record.selectedBatch.batch_number] ? that.state.stocks[record.inventory][record.selectedBatch.batch_number] : 0)}\n                              placeholder=\"units\"\n                              size=\"small\"\n                              onChange={(value) => this.changeNetPrice(record._id, record.discount)}\n                              disabled={!(record.selectedBatch && that.state.stocks[record.inventory] && that.state.stocks[record.inventory][record.selectedBatch.batch_number])}\n                            />\n                        )}\n                    </Form.Item>\n                  )\n                    : (\n<Form.Item\n  key={`unit[${record._id}]`}\n  {...formItemLayout}\n>\n                        {getFieldDecorator(`unit[${record._id}]`, {\n                            initialValue: record.unit || 0,\n                            validateTrigger: ['onChange', 'onBlur'],\n                            rules: [{\n                                required: true,\n                                message: \"This field is required.\",\n                            }],\n                        })(\n                            <InputNumber\n                              min={1}\n                              max={100}\n                              placeholder=\"unit\"\n                              size=\"small\"\n                              onChange={(value) => this.changeNetPrice(record._id, record.discount)}\n                            />\n                        )}\n</Form.Item>\n)\n            )\n        }, {\n            title: 'Unit Cost',\n            key: 'unit_cost',\n            width: 100,\n            dataIndex: 'unit_cost',\n\n            render: (item, record) => (\n<Form.Item\n  key={`unit_cost[${record._id}]`}\n  {...formItemLayout}\n>\n                {getFieldDecorator(`unit_cost[${record._id}]`, {\n                    validateTrigger: ['onChange', 'onBlur'],\n                    initialValue: record.item_type == INVENTORY ? record.retail_without_tax : record.cost,\n                    rules: [{\n                        required: true,\n                        message: \"This field is required.\",\n                    }],\n                })(\n                    <InputNumber\n                      min={1}\n                      placeholder=\"Unit Cost\"\n                      size=\"small\"\n                      onChange={() => that.changeNetPrice(record._id, record.discount)}\n                    />\n                )}\n</Form.Item>\n)\n            // render: (item, record) => item ? item.toFixed(2) : null\n        }, {\n            title: 'Discount',\n            key: 'discount',\n            dataIndex: 'discount',\n            render: (item, record) => (record.selectOption ? (\n                <Form.Item\n                  key={`discount[${record._id}]`}\n                  extra={\n                               <span>{record && record.discount ? `${record.discount  } ${  record.discount_type  } Discount` : null} </span>\n}\n                >\n                    {getFieldDecorator(`discount[${record._id}]`, {\n                        initialValue: record.offers,\n                        validateTrigger: ['onChange', 'onBlur'],\n                    })\n                    (<Select\n                      style={{width: 150}}\n                      onChange={(value) => that.changeNetPrice(record._id, value)}\n                      size=\"small\"\n                      disabled={this.state.appliedPromoCodeDiscount}\n                    >\n                        <Select.Option value=\"0\">Custom Offer</Select.Option>\n                        {that.state.offers.map(option => (\n<Select.Option\n  value={`${option.discount  }#${  option.unit  }#${  option.id}`}\n>{option.code}\n</Select.Option>\n))}\n                     </Select>)}\n                </Form.Item>\n              ) : (\n<Form.Item\n  extra={(\n<a\n  onClick={() => that.onChangeOption('selectOption', record._id)}\n  disabled={this.state.appliedPromoCodeDiscount}\n>Choose Offer\n</a>\n)}\n  key={`discount[${record._id}]`}\n  {...formItemLayout}\n>\n                    {getFieldDecorator(`discount[${record._id}]`, {\n                        initialValue: record.discount ? record.discount : 0,\n                        validateTrigger: ['onChange', 'onBlur'],\n                    })(\n                        <Input\n                          placeholder=\"discount\"\n                          disabled={this.state.appliedPromoCodeDiscount}\n                          addonAfter={getFieldDecorator(`discount_type[${record._id}]`, {\n                                   initialValue: record.discount_type || '%',\n                               })(\n                                   <Select\n                                     onChange={(value) => that.changeNetPrice(record._id, value)}\n                                     disabled={this.state.appliedPromoCodeDiscount}\n                                   >\n                                       {CURRENCY_TYPE.map(option => (\n<Select.Option\n  value={option.value}\n> {option.value}\n</Select.Option>\n))}\n                                   </Select>\n                               )}\n                          size=\"small\"\n                          style={{width: 150}}\n                          onChange={(e) => this.changeNetPrice(record._id, e.target.value)}\n                        />\n                    )}\n</Form.Item>\n))\n        }, {\n            title: 'Taxes',\n            key: 'taxes',\n            dataIndex: 'taxes',\n            render: (item, record) => (\n<Form.Item\n  key={`taxes[${record._id}]`}\n  {...formItemLayout}\n>\n                {getFieldDecorator(`taxes[${record._id}]`, {\n                    initialValue: record.taxes || [],\n                    validateTrigger: ['onChange', 'onBlur'],\n                })(\n                    <Select\n                      placeholder=\"Taxes\"\n                      size=\"small\"\n                      mode=\"multiple\"\n                      style={{width: 150}}\n                      onChange={() => that.changeNetPrice(record._id, record.discount)}\n                    >\n                        {this.state.taxes_list && this.state.taxes_list.map((tax) => (\n<Select.Option\n  value={tax.id}\n>{tax.name}@{tax.tax_value}%\n</Select.Option>\n))}\n                    </Select>\n                )}\n</Form.Item>\n)\n        }, {\n            title: 'Total Unit Cost',\n            key: 'total_unit_cost',\n            width: 80,\n            align: 'right',\n            dataIndex: 'total_unit_cost',\n            render: (item, record) =>\n                <span>{item ? item.toFixed(2) : '0.00'}</span>,\n        }, {\n            title: 'Total',\n            key: 'total',\n            width: 80,\n            align: 'right',\n            dataIndex: 'total',\n            render: (item, record) => item ? item.toFixed(2) : '0.00'\n\n        }]);\n\n        consumeRow = consumeRow.concat([{\n            key: '_id',\n            dataIndex: '_id',\n            render: (value, record) => (\n<Button\n  icon=\"close\"\n  onClick={() => that.remove(record._id)}\n  type=\"danger\"\n  shape=\"circle\"\n  size=\"small\"\n/>\n)\n        }]);\n\n        return (\n<div>\n            <Spin spinning={this.state.saveLoading} tip=\"Saving Invoice...\">\n                <Spin spinning={this.state.promoCodeCheckLoading} tip=\"Checking Promo Code and Discounts...\">\n                    <Card\n                      title={this.props.editId ? `Edit Invoice (INV ${  this.props.editId  })` : \"Add Invoice\"}\n                      extra={(\n<Search\n  loading={this.state.loadingQr}\n  value={this.state.qrValue}\n  onChange={this.setQrValue}\n  placeholder=\"Search QR Code\"\n  onSearch={this.addItemThroughQR}\n  style={{width: 200}}\n/>\n)}\n                      bodyStyle={{padding: 0}}\n                    >\n                        <Row>\n                            <Col span={6}>\n                                <Tabs size=\"small\" type=\"card\">\n                                    <TabPane tab={INVENTORY} key={INVENTORY}>\n                                        <div style={{backgroundColor: '#ddd', padding: 8}}>\n                                            <Input.Search\n                                              placeholder={`Search in ${  INVENTORY}`}\n                                              onChange={(value) => this.searchValues(value, INVENTORY)}\n                                            />\n                                        </div>\n                                        <List\n                                          size=\"small\"\n                                          itemLayout=\"horizontal\"\n                                          loading={this.state.loadingInventory}\n                                          dataSource={this.state.items && this.state.items[INVENTORY] ? this.state.items[INVENTORY].results : []}\n                                          renderItem={item => (\n                                                  <List.Item>\n                                                      <List.Item.Meta\n                                                        title={`${item.name  } (${  item.total_quantity  })`}\n                                                      />\n                                                      <Button\n                                                        type=\"primary\"\n                                                        size=\"small\"\n                                                        shape=\"circle\"\n                                                        onClick={() => this.add({\n                                                                  ...item,\n                                                                  item_type: INVENTORY\n                                                              })}\n                                                        icon=\"arrow-right\"\n                                                      />\n                                                  </List.Item>\n)}\n                                        />\n                                        {this.state.items && this.state.items[INVENTORY] ? (\n                                            <div style={{textAlign: 'center'}}>\n                                                <a\n                                                  style={{margin: 5}}\n                                                  disabled={!this.state.items[INVENTORY].previous}\n                                                  onClick={() => this.loadInventoryItemList(this.state.items[INVENTORY].previous)}\n                                                >\n                                                    <Icon type=\"left\" />Previous\n                                                </a>\n                                                <Divider type=\"vertical\" />\n                                                <a\n                                                  style={{margin: 5}}\n                                                  disabled={!this.state.items[INVENTORY].next}\n                                                  onClick={() => this.loadInventoryItemList(this.state.items[INVENTORY].next)}\n                                                >\n                                                    Next<Icon type=\"right\" />\n                                                </a>\n                                            </div>\n                                          ) : null}\n                                    </TabPane>\n                                    <TabPane tab={PRESCRIPTIONS} key={PRESCRIPTIONS}>\n                                        <List\n                                          size=\"small\"\n                                          itemLayout=\"horizontal\"\n                                          dataSource={this.state.items ? this.state.items[PRESCRIPTIONS] : []}\n                                          renderItem={item => (\n                                                  <List.Item>\n                                                      <List.Item.Meta\n                                                        title={item.drugs.map(drug_item => (\n<div>\n                                                              <span>{drug_item.name}</span> {drug_item.inventory.maintain_inventory ? null : (\n                                                              <Tag\n                                                                color=\"red\"\n                                                                style={{\n                                                                  float: 'right',\n                                                                  lineHeight: '18px'\n                                                              }}\n                                                              >Not Sold\n                                                              </Tag>\n                                                            )}<br />\n</div>\n))}\n                                                        description={item.doctor ? (\n                                                              <Tag\n                                                                color={item.doctor ? item.doctor.calendar_colour : null}\n                                                              >\n                                                                  <b>{`prescribed by  ${  item.doctor.user.first_name}`} </b>\n                                                              </Tag>\n                                                            ) : null}\n                                                      />\n                                                      <Button\n                                                        type=\"primary\"\n                                                        size=\"small\"\n                                                        shape=\"circle\"\n                                                        onClick={() => this.addPrescription({...item})}\n                                                        icon=\"arrow-right\"\n                                                      />\n                                                  </List.Item>\n)}\n                                        />\n                                    </TabPane>\n                                    <TabPane tab={PROCEDURES} key={PROCEDURES}>\n                                        <div style={{backgroundColor: '#ddd', padding: 8}}>\n                                            <Input.Search\n                                              placeholder={`Search in ${  PROCEDURES}`}\n                                              onChange={(value) => this.searchValues(value, PROCEDURES)}\n                                            />\n                                        </div>\n                                        <List\n                                          size=\"small\"\n                                          itemLayout=\"horizontal\"\n                                          dataSource={this.state.items && this.state.items[PROCEDURES] ? this.state.items[PROCEDURES].results : []}\n                                          renderItem={item => (\n                                                  <List.Item>\n                                                      <List.Item.Meta\n                                                        title={item.name}\n                                                      />\n                                                      <Button\n                                                        type=\"primary\"\n                                                        size=\"small\"\n                                                        shape=\"circle\"\n                                                        onClick={() => this.add({\n                                                                  ...item,\n                                                                  item_type: PROCEDURES\n                                                              })}\n                                                        icon=\"arrow-right\"\n                                                      />\n                                                  </List.Item>\n)}\n                                        />\n                                        {this.state.items && this.state.items[PROCEDURES] ? (\n                                            <div style={{textAlign: 'center'}}>\n                                                <a\n                                                  style={{margin: 5}}\n                                                  disabled={!this.state.items[PROCEDURES].previous}\n                                                  onClick={() => this.loadProcedures(this.state.items[PROCEDURES].previous)}\n                                                >\n                                                    <Icon type=\"left\" />Previous\n                                                </a>\n                                                <Divider type=\"vertical\" />\n                                                <a\n                                                  style={{margin: 5}}\n                                                  disabled={!this.state.items[PROCEDURES].next}\n                                                  onClick={() => this.loadProcedures(this.state.items[PROCEDURES].next)}\n                                                >\n                                                    Next<Icon type=\"right\" />\n                                                </a>\n                                            </div>\n                                          ) : null}\n                                    </TabPane>\n\n                                </Tabs>\n                            </Col>\n                            <Col span={18}>\n                                <Form>\n                                    <Table\n                                      pagination={false}\n                                      loading={that.state.loading}\n                                      bordered\n                                      dataSource={this.state.tableFormValues}\n                                      columns={consumeRow}\n                                    />\n                                    <Affix offsetBottom={0}>\n                                        <Card>\n                                            <Col span={8}>\n                                                <Form.Item\n                                                  label=\"Notes\"\n                                                  key=\"notes\"\n                                                  {...formItemLayout}\n                                                >\n                                                    {getFieldDecorator(`notes`, {\n                                                        initialValue: this.state.notes,\n                                                        validateTrigger: ['onChange', 'onBlur'],\n                                                    })(\n                                                        <Input.TextArea row={2} placeholder=\"Notes...\" size=\"small\" />\n                                                    )}\n                                                </Form.Item>\n                                                <h3>Grand\n                                                    Total: <b>{this.state.tableFormValues.reduce(function (total, item) {\n                                                        return (parseFloat(total) + (item && item.total ? item.total : 0)).toFixed(2);\n                                                    }, 0)}\n                                                           </b>\n                                                </h3>\n                                            </Col>\n                                            <span> &nbsp;&nbsp;on&nbsp;&nbsp;</span>\n                                            <DatePicker\n                                              value={this.state.selectedDate}\n                                              onChange={(value) => this.selectedDefaultDate(value)}\n                                              format=\"DD-MM-YYYY\"\n                                              allowClear={false}\n                                            />\n\n                                            <Form.Item\n                                              {...formItemLayoutWithOutLabel}\n                                              style={{marginBottom: 0, float: 'right'}}\n                                            >\n\n                                                <Button\n                                                  type=\"primary\"\n                                                  htmlType=\"submit\"\n                                                  onClick={() => this.handleSubmit(true)}\n                                                  style={{margin: 5}}\n                                                >Save Invoice\n                                                </Button>\n                                                <Button\n                                                  type=\"primary\"\n                                                  htmlType=\"submit\"\n                                                  onClick={() => this.handleSubmit(false)}\n                                                  style={{margin: 5}}\n                                                >Save & Create Payment\n                                                </Button>\n                                                {that.props.history ? (\n                                                    <Button\n                                                      style={{margin: 5, float: 'right'}}\n                                                      onClick={() => that.props.history.goBack()}\n                                                    >\n                                                        Cancel\n                                                    </Button>\n                                                  ) : null}\n                                            </Form.Item>\n                                        </Card>\n                                    </Affix>\n                                </Form>\n                                <Row>\n                                    <Col span={12} style={{padding: 10}}>\n\n                                        <div>\n                                            {this.state.appliedPromoCodeDiscount ? (\n<div>\n                                                <Tag>'{this.state.promoCode}' Applied <Icon\n                                                  onClick={() => this.removePromoCode()}\n                                                  theme=\"twoTone\"\n                                                  twoToneColor=\"#f00\"\n                                                  type=\"close-circle\"\n                                                />\n                                                </Tag>\n                                                <Text type=\"success\"><br />Discount\n                                                    INR {this.state.appliedPromoCodeDiscount}\n                                                </Text>\n</div>\n) : (\n<div>\n                                                <Search\n                                                  enterButton=\"Apply\"\n                                                  value={this.state.promoCode}\n                                                  placeholder=\"Promo Code\"\n                                                  onChange={this.enterPromoCode}\n                                                  onSearch={this.checkPromoCode}\n                                                  style={{width: 200}}\n                                                />\n</div>\n)}\n                                        </div>\n                                    </Col>\n                                </Row>\n                            </Col>\n                        </Row>\n                    </Card>\n                </Spin>\n            </Spin>\n</div>\n)\n\n    }\n}\n\nexport default Form.create()(Addinvoicedynamic);\n","import React from \"react\";\nimport {\n    Affix,\n    Button,\n    Card,\n    Col,\n    DatePicker,\n    Dropdown,\n    Form,\n    Input,\n    InputNumber,\n    List,\n    Menu,\n    Row,\n    Select,\n    Spin,\n    Table,\n    Tabs,\n    Tag,\n    Checkbox, Divider\n} from \"antd\";\nimport moment from \"moment\";\nimport {displayMessage, getAPI, interpolate, postAPI, putAPI} from \"../../../utils/common\";\nimport {DRUG, INVENTORY, PRESCRIPTIONS, PROCEDURES} from \"../../../constants/hardData\";\nimport {\n    INVENTORY_ITEM_API,\n    PROCEDURE_CATEGORY,\n    SEARCH_THROUGH_QR,\n    TAXES,\n    UNPAID_PRESCRIPTIONS,\n    INVOICE_RETURN_API, SINGLE_INVOICE_API\n} from \"../../../constants/api\";\nimport {loadDoctors} from \"../../../utils/clinicUtils\";\n\nconst {Search} = Input;\nconst {MonthPicker} = DatePicker;\nconst {TabPane} = Tabs;\n\nconst tableFormFields = {\n    _id: null,\n    quantity: 0,\n    batch: null\n};\n\nclass AddReturnInvoice extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            editInvoice: this.props.editInvoice,\n            classType: props.type,\n            tableFormValues: [],\n            maxQuantityforConsume: {},\n            items: {},\n            practiceDoctors: [],\n            selectedPrescriptions: [],\n            selectedDate: moment(),\n            stocks: {},\n            itemBatches: {},\n            saveLoading: false,\n            qrValue: '',\n            searchItem: '',\n            return_with_tax: false,\n            returnCashAvailable: 0\n        }\n\n    }\n\n    componentDidMount() {\n        loadDoctors(this);\n        // this.loadInventoryItemList();\n        this.loadProcedures();\n        this.loadPrescriptions();\n        this.loadTaxes();\n        if (this.props.editId) {\n            this.loadEditInvoiceData();\n        }\n    }\n\n    selectedDefaultDate = (date) => {\n        this.setState({\n            selectedDate: date\n        })\n    }\n\n    loadEditInvoiceData = () => {\n        const that = this;\n        const successFn = function (data) {\n            const invoice = data;\n            that.setState(function (prevState) {\n                const tableValues = [];\n                invoice.procedure.forEach(function (proc) {\n                    tableValues.push({\n                        ...proc.procedure_data,\n                        ...proc,\n                        selectedDoctor: proc.doctor_data,\n                        selectedDate: moment(proc.date).isValid() ? moment(proc.date) : null,\n                        _id: Math.random().toFixed(7),\n                        item_type: PROCEDURES\n                    })\n                });\n                const stocks = {...prevState.stocks};\n                const itemBatches = {...prevState.itemBatches};\n                invoice.inventory.forEach(function (proc) {\n\n                    if (!itemBatches[proc.inventory]) {\n                        itemBatches[proc.inventory] = proc.inventory_item_data.item_type_stock.item_stock;\n                    }\n                    if (stocks[proc.inventory]) {\n                        const stock_quantity = stocks[proc.inventory];\n                        if (proc.inventory_item_data.item_type_stock && proc.inventory_item_data.item_type_stock.item_stock)\n                            proc.inventory_item_data.item_type_stock.item_stock.forEach(function (stock) {\n                                if (stock_quantity[stock.batch_number])\n                                    stock_quantity[stock.batch_number] += stock.quantity;\n                                else\n                                    stock_quantity[stock.batch_number] = stock.quantity;\n                            });\n                    } else {\n                        const stock_quantity = {}\n                        if (proc.inventory_item_data.item_type_stock && proc.inventory_item_data.item_type_stock.item_stock)\n                            proc.inventory_item_data.item_type_stock.item_stock.forEach(function (stock) {\n                                stock_quantity[stock.batch_number] = stock.quantity\n                            });\n                        stocks[proc.inventory_item_data.id] = stock_quantity;\n                    }\n\n                    if (stocks[proc.inventory]) {\n                        const stock_quantity = stocks[proc.inventory];\n                        if (stock_quantity[proc.batch_number])\n                            stock_quantity[proc.batch_number] += proc.unit;\n                        else\n                            stock_quantity[proc.batch_number] = proc.unit;\n                    } else {\n                        const stock_quantity = {};\n                        stock_quantity[proc.batch_number] = proc.unit;\n                        stocks[proc.inventory] = stock_quantity;\n                    }\n                    if (itemBatches[proc.inventory])\n                        itemBatches[proc.inventory].forEach(function (batchObj) {\n                            if (batchObj.batch_number == proc.batch_number)\n                                proc.selectedBatch = batchObj;\n                        });\n                    tableValues.push({\n                        ...proc.inventory_item_data,\n                        ...proc,\n                        selectedDoctor: proc.doctor_data,\n                        _id: Math.random().toFixed(7),\n                        item_type: INVENTORY,\n\n                    });\n                });\n                return {\n                    tableFormValues: tableValues,\n                    selectedDate: moment(invoice.date).isValid() ? moment(invoice.date) : null,\n                    stocks,\n                    itemBatches\n                }\n            })\n        }\n        const errorFn = function () {\n\n        }\n        getAPI(interpolate(SINGLE_INVOICE_API, [this.props.editId]), successFn, errorFn);\n    }\n\n    loadInventoryItemList() {\n        const that = this;\n        const successFn = function (reqData) {\n            const data = reqData.results;\n            const drugItems = [];\n            const equipmentItems = [];\n            const supplesItems = [];\n\n            that.setState(function (prevState) {\n                    const stocks = {...prevState.stocks};\n                    const itemBatches = {};\n                    data.forEach(function (item) {\n                        if (item.item_type == DRUG) {\n                            drugItems.push(item);\n                            if (stocks[item.id]) {\n                                const stock_quantity = stocks[item.id]\n                                if (item.item_type_stock && item.item_type_stock.item_stock)\n                                    item.item_type_stock.item_stock.forEach(function (stock) {\n                                        if (stock_quantity[stock.batch_number])\n                                            stock_quantity[stock.batch_number] += stock.quantity;\n                                        else\n                                            stock_quantity[stock.batch_number] += stock.quantity;\n                                    });\n                            } else {\n                                const stock_quantity = {}\n                                if (item.item_type_stock && item.item_type_stock.item_stock)\n                                    item.item_type_stock.item_stock.forEach(function (stock) {\n                                        stock_quantity[stock.batch_number] = stock.quantity\n                                    });\n                                stocks[item.id] = stock_quantity;\n                            }\n                            itemBatches[item.id] = item.item_type_stock.item_stock;\n                        }\n\n                    });\n                    const {items} = that.state;\n                    items[INVENTORY] = drugItems;\n                    return {\n                        items,\n                        stocks: {...prevState.stocks, ...stocks},\n                        itemBatches: {...prevState.itemBatches, ...itemBatches}\n                    }\n                }, function () {\n                    if (that.props.editId) {\n                        that.loadEditInvoiceData();\n                    }\n                }\n            )\n\n        }\n        const errorFn = function () {\n        }\n        const paramsApi = {\n            page_size: 1000,\n            practice: this.props.active_practiceId,\n            maintain_inventory: true,\n        }\n        if (this.state.searchItem) {\n            paramsApi.item_name = this.state.searchItem;\n        }\n\n        getAPI(INVENTORY_ITEM_API, successFn, errorFn, paramsApi);\n    }\n\n    loadProcedures() {\n        const that = this;\n        const successFn = function (data) {\n            const {items} = that.state;\n            items[PROCEDURES] = data;\n            that.setState({\n                items,\n            })\n        };\n        const errorFn = function () {\n        };\n\n        getAPI(interpolate(PROCEDURE_CATEGORY, [this.props.active_practiceId]), successFn, errorFn);\n    }\n\n    loadPrescriptions() {\n        const that = this;\n        const successFn = function (data) {\n\n            that.setState(function (prevState) {\n                return {\n                    items: {...prevState.items, [PRESCRIPTIONS]: data}\n                }\n            })\n        };\n        const errorFn = function () {\n        };\n        getAPI(interpolate(UNPAID_PRESCRIPTIONS, [that.props.match.params.id]), successFn, errorFn);\n    }\n\n    loadTaxes() {\n        const that = this;\n        const successFn = function (data) {\n            that.setState({\n                taxes_list: data,\n            })\n        };\n        const errorFn = function () {\n        };\n        getAPI(interpolate(TAXES, [this.props.active_practiceId]), successFn, errorFn);\n\n    }\n\n    remove = (k) => {\n        this.setState(function (prevState) {\n            const newTableFormValues = [];\n            prevState.tableFormValues.forEach(function (formValue) {\n                if (formValue._id != k)\n                    newTableFormValues.push(formValue);\n            });\n            return {\n                tableFormValues: newTableFormValues\n            }\n        });\n    }\n\n\n    add = (item, randId = Math.random().toFixed(7)) => {\n        this.setState(function (prevState) {\n            if (item.item_type == PROCEDURES) {\n                item = {\n                    ...item,\n                    id: undefined,\n                    unit_cost: item.cost,\n                    procedure: item.id,\n                    selectedDoctor: prevState.selectedDoctor ? prevState.selectedDoctor : null,\n                    selectedDate: moment(),\n                    taxes: item.taxes.map(tax => tax.id)\n                }\n            } else if (item.item_type == INVENTORY) {\n                item = {\n                    ...item,\n                    id: undefined,\n                    inventory: item.id,\n                    unit_cost: item.retail_without_tax,\n                    selectedDoctor: prevState.selectedDoctor ? prevState.selectedDoctor : null,\n                }\n            }\n            return {\n                tableFormValues: [...prevState.tableFormValues, {\n                    ...tableFormFields,\n                    ...item,\n                    id: undefined,\n                    _id: randId,\n                }]\n            }\n        });\n    };\n\n    selectDoctor = (doctor, id, type) => {\n        this.setState(function (prevState) {\n            const finalTableFormValues = [];\n            prevState.tableFormValues.forEach(function (formValue) {\n                if (formValue._id == id && formValue.item_type == type) {\n                    finalTableFormValues.push({...formValue, selectedDoctor: doctor})\n                } else {\n                    finalTableFormValues.push(formValue)\n                }\n            });\n            return {\n                tableFormValues: finalTableFormValues\n            }\n        })\n    }\n\n    selectedDate = (dateValue, id, type) => {\n        this.setState(function (prevState) {\n            const finalTableFormValues = [];\n            prevState.tableFormValues.forEach(function (formValue) {\n                if (formValue._id == id && formValue.item_type == type) {\n                    finalTableFormValues.push({...formValue, selectedDate: dateValue})\n                } else {\n                    finalTableFormValues.push(formValue)\n                }\n            });\n            return {\n                tableFormValues: finalTableFormValues\n            }\n        })\n    }\n\n    selectBatch = (batch, id, type) => {\n        this.setState(function (prevState) {\n            const finalTableFormValues = [];\n            prevState.tableFormValues.forEach(function (formValue) {\n                if (formValue._id == id && formValue.item_type == type) {\n                    finalTableFormValues.push({...formValue, selectedBatch: batch})\n                } else {\n                    finalTableFormValues.push(formValue)\n                }\n            });\n            return {\n                tableFormValues: finalTableFormValues\n            }\n        })\n    }\n\n    addPrescription = (item) => {\n        const that = this;\n        item.drugs.forEach(function (drug_item) {\n            if (drug_item.inventory.maintain_inventory)\n                that.add({...drug_item.inventory, item_type: INVENTORY, inventory: item.inventory.id, id: undefined})\n        });\n        that.setState(function (prevState) {\n            return {selectedPrescriptions: [...prevState.selectedPrescriptions, item.id]}\n        })\n    }\n\n    handleSubmit = (e) => {\n        const that = this;\n        e.preventDefault();\n        this.props.form.validateFields((err, values) => {\n            if (!err) {\n                that.setState({\n                    saveLoading: true\n                });\n                const reqData = {\n                    bank: '',\n                    number: '',\n                    practice: that.props.active_practiceId,\n                    return_mode: null,\n                    invoice: this.props.editInvoice.id,\n                    procedure: [],\n                    inventory: [],\n                    notes: values.notes,\n                    patient: that.props.match.params.id,\n                    staff: this.props.editInvoice.staff_data ? this.props.editInvoice.staff_data.id : null,\n                    prescription: that.state.selectedPrescriptions,\n                    date: that.state.selectedDate && moment(that.state.selectedDate).isValid() ? that.state.selectedDate.format('YYYY-MM-DD') : null,\n                    with_tax: !!this.state.return_with_tax,\n                    cash_return: values.cash_return,\n                    advance_value: this.state.returnCashAvailable - values.cash_return || 0,\n                };\n                that.state.tableFormValues.forEach(function (item) {\n                    item.unit = values.unit[item._id];\n                    const {id} = item;\n                    delete (item.id);\n                    // item.taxes = values.taxes[item._id];\n                    // item.unit_cost = values.unit_cost[item._id];\n                    // item.discount = values.discount[item._id];\n                    // item.discount_type = '%';\n                    if (item.unit)\n                        switch (item.item_type) {\n                            case PROCEDURES:\n                                reqData.procedure.push({\n                                    ...item,\n                                    // \"name\": item.name,\n                                    \"unit\": item.unit,\n                                    // \"procedure\": item.procedure,\n                                    // \"default_notes\": null,\n                                    // \"is_active\": true,\n                                    // \"margin\": item.margin,\n                                    // \"taxes\": item.taxes,\n                                    // \"unit_cost\": item.unit_cost,\n                                    // \"discount\": item.discount,\n                                    // \"discount_type\": \"%\",\n                                    // \"offers\": 1,\n                                    procedure_inv: id,\n                                    // \"doctor\": item.selectedDoctor ? item.selectedDoctor.id : null,\n                                    // id:item.id\n                                });\n                                break;\n                            case INVENTORY:\n                                reqData.inventory.push({\n                                    ...item,\n                                    // \"inventory\": item.inventory,\n                                    // \"name\": item.name,\n                                    \"unit\": item.unit,\n                                    // \"taxes\": item.taxes,\n                                    // \"unit_cost\": item.unit_cost,\n                                    // \"discount\": item.discount,\n                                    // \"discount_type\": \"%\",\n                                    // \"offers\": null,\n                                    inventory_inv: id,\n                                    // \"doctor\": item.selectedDoctor ? item.selectedDoctor.id : null,\n                                    // \"instruction\": item.instruction,\n                                    // \"is_active\": true,\n                                    // batch_number: item.selectedBatch ? item.selectedBatch.batch_number : null,\n                                    // id: item.id\n                                });\n                                break;\n                            default:\n                                return null;\n                        }\n                });\n                const successFn = function (data) {\n                    that.setState({\n                        saveLoading: false\n                    });\n                    displayMessage(\"Inventory updated successfully\");\n                    that.props.loadData();\n                    const url = `/patient/${  that.props.match.params.id  }/billing/invoices`;\n                    that.props.history.replace(url);\n                }\n                const errorFn = function () {\n                    that.setState({\n                        saveLoading: false\n                    });\n                }\n\n                postAPI(INVOICE_RETURN_API, reqData, successFn, errorFn);\n\n            }\n        });\n    }\n\n    addItemThroughQR = (value) => {\n        const that = this;\n        that.setState({\n            loadingQr: true,\n        })\n        const qrSplitted = value.split('*');\n        const successFn = function (data) {\n\n            const item = data;\n            const {setFieldsValue, getFieldsValue, getFieldValue} = that.props.form;\n            const randomId = Math.random().toFixed(7);\n            let flag = true\n            that.state.tableFormValues.forEach(function (row) {\n                if (row.name == qrSplitted[0]) {\n                    const {_id} = row;\n                    const batch = row.selectedBatch.batch_number;\n                    const quantity = getFieldValue(`unit[${_id}]`);\n                    if (batch == qrSplitted[1]) {\n                        flag = false;\n                        setFieldsValue({\n                            [`unit[${_id}]`]: quantity + 1\n                        })\n                    }\n                }\n            });\n            if (flag) {\n                let unit_cost = null;\n                if (data.item_type_stock && data.item_type_stock.item_stock)\n                    data.item_type_stock.item_stock.forEach(function (stock) {\n                        if (stock.batch_number == qrSplitted[1]) {\n                            data.selectedBatch = stock;\n                            unit_cost = stock.unit_cost\n                        }\n                    })\n                that.add({...data, item_type: INVENTORY}, randomId);\n\n                setFieldsValue({\n                    [`unit_cost[${randomId}]`]: unit_cost,\n                })\n            }\n            that.setState(function (prevState) {\n\n                return {\n                    loadingQr: false,\n                    qrValue: ''\n                }\n            });\n        }\n        const errorFn = function () {\n\n        }\n        getAPI(SEARCH_THROUGH_QR, successFn, errorFn, {qr: value, form: 'Invoice'})\n    }\n\n    setQrValue = (e) => {\n        const {value} = e.target;\n        this.setState({\n            qrValue: value\n        })\n    }\n\n    searchValues = (e) => {\n        const {value} = e.target;\n        this.setState({\n            searchItem: value,\n        }, function () {\n            this.loadInventoryItemList();\n        })\n\n    }\n\n    changeNetPrice = (id) => {\n        const that = this;\n        const {getFieldsValue, setFields} = this.props.form;\n        setTimeout(function () {\n            const values = getFieldsValue();\n            if (values.total_unit_cost[id]) {\n\n                that.setState(function (prevState) {\n                    const newTableValues = []\n                    prevState.tableFormValues.forEach(function (tableObj) {\n                        if (tableObj._id == id) {\n                            let totalTaxAmount = 0;\n                            values.taxes[id].forEach(function (taxid) {\n                                prevState.taxes_list.forEach(function (taxObj) {\n                                    if (taxObj.id == taxid)\n                                        totalTaxAmount += taxObj.tax_value;\n                                })\n                            });\n                            const retailPrice = values.total_unit_cost[id] / (1 + totalTaxAmount * 0.01);\n                            newTableValues.push({...tableObj, unit_cost: retailPrice})\n                        } else {\n                            newTableValues.push(tableObj);\n                        }\n                    })\n                    return {tableFormValues: newTableValues}\n                })\n            } else {\n                that.setState({\n                    retail_price: 0\n                })\n            }\n        }, 1000);\n\n    }\n\n    onChangeHandle = (e) => {\n        const that = this;\n        this.setState({\n            return_with_tax: e.target.checked\n        }, function () {\n            that.calculateReturnCashAvailable();\n        })\n    }\n\n    calculateReturnCashAvailable = () => {\n        const that = this;\n        const totalAmountPaid = this.state.editInvoice.payments.reduce((a, b) => a + b.pay_amount, 0);\n        const totalInvoiceAmount = this.state.editInvoice.total;\n        const pendingPayment = totalInvoiceAmount - totalAmountPaid;\n        let worthOfReturningItems = 0;\n        const {getFieldsValue} = this.props.form;\n        setTimeout(function () {\n            const values = getFieldsValue();\n            const taxAllowed = that.state.return_with_tax;\n            that.state.tableFormValues.forEach(function (item) {\n                const units = values.unit[item._id];\n                if (item.item_type == INVENTORY) {\n                    worthOfReturningItems += units * item.unit_cost;\n                    worthOfReturningItems += (taxAllowed ? (item.tax_value / item.unit) * units : null);\n                } else if (item.item_type == PRESCRIPTIONS) {\n                    worthOfReturningItems += units * item.unit_cost;\n                    worthOfReturningItems += (taxAllowed ? (item.tax_value / item.unit) * units : null);\n                } else if (item.item_type == PROCEDURES) {\n                    worthOfReturningItems += units * item.unit_cost;\n                    worthOfReturningItems += (taxAllowed ? (item.tax_value / item.unit) * units : null);\n                }\n            });\n            that.setState({\n                returnCashAvailable: (worthOfReturningItems > pendingPayment ? worthOfReturningItems - pendingPayment : 0).toFixed(2)\n            });\n        }, 500);\n\n\n    }\n\n    render() {\n        const that = this;\n        const {getFieldDecorator, getFieldValue, getFieldsValue} = this.props.form;\n        const formItemLayout = {\n            labelCol: {\n                xs: {span: 24},\n                sm: {span: 4},\n            },\n            wrapperCol: {\n                xs: {span: 24},\n                sm: {span: 24},\n                md: {span: 24},\n                lg: {span: 24},\n                xl: {span: 24},\n            },\n        };\n\n        const formItemLayoutWithOutLabel = {\n            labelCol: {\n                xs: {span: 24},\n                sm: {span: 24},\n            },\n            wrapperCol: {\n                xs: {span: 24},\n                sm: {span: 24},\n            },\n        };\n        getFieldDecorator('keys', {initialValue: []});\n        let consumeRow = [{\n            title: 'Item Name',\n            key: 'item_name',\n            dataIndex: 'name',\n            render (name, record) {\n                switch (record.item_type) {\n                    case PROCEDURES:\n                        return (\n<Form.Item\n  key={`name[${record._id}]`}\n  {...formItemLayout}\n>\n                            {getFieldDecorator(`name[${record._id}]`, {\n                                validateTrigger: ['onChange', 'onBlur'],\n                                initialValue: name,\n                                rules: [{\n                                    required: true,\n                                    message: \"This field is required.\",\n                                }],\n                            })(\n                                <Input min={0} placeholder=\"Item name\" size=\"small\" disabled />\n                            )}\n                            <span>by &nbsp;&nbsp;</span>\n                            <Dropdown\n                              placement=\"topCenter\"\n                              disabled\n                              overlay={(\n<Menu>\n                                {that.state.practiceDoctors.map(doctor => (\n                                    <Menu.Item key=\"0\">\n                                        <a onClick={() => that.selectDoctor(doctor, record._id, PROCEDURES)}>{doctor.user.first_name}</a>\n                                    </Menu.Item>\n                                  ))}\n</Menu>\n)}\n                              trigger={['click']}\n                            >\n                                <a className=\"ant-dropdown-link\" href=\"#\">\n                                    <b>\n                                        {record.selectedDoctor.user ? record.selectedDoctor.user.first_name : 'No DOCTORS Found'}\n                                    </b>\n                                </a>\n                            </Dropdown>\n                            <span> &nbsp;&nbsp;on&nbsp;&nbsp;</span>\n                            <DatePicker\n                              value={record.selectedDate}\n                              disabled\n                              size=\"small\"\n                              onChange={(value) => that.selectedDate(value, record._id, PROCEDURES)}\n                              format=\"DD-MM-YYYY\"\n                            />\n</Form.Item>\n);\n                    case PRESCRIPTIONS:\n                        return <b>{record.name}</b>;\n                    case INVENTORY:\n                        return (\n<div>\n                            {record.name}\n                            <span><br />by &nbsp;&nbsp;</span>\n                            <Dropdown\n                              placement=\"topCenter\"\n                              disabled\n                              overlay={(\n<Menu>\n                                {that.state.practiceDoctors.map(doctor => (\n                                    <Menu.Item key={doctor.id}>\n                                        <a onClick={() => that.selectDoctor(doctor, record._id, PROCEDURES)}>{doctor.user.first_name}</a>\n                                    </Menu.Item>\n                                  ))}\n</Menu>\n)}\n                              trigger={['click']}\n                            >\n                                <a className=\"ant-dropdown-link\" href=\"#\">\n                                    <b>\n                                        {record.selectedDoctor && record.selectedDoctor.user ? record.selectedDoctor.user.first_name : '+Add Doctor'}\n                                    </b>\n                                </a>\n                            </Dropdown>\n                            <span><br />from batch &nbsp;&nbsp;</span>\n                            <Dropdown\n                              placement=\"topCenter\"\n                              disabled\n                              overlay={(\n<Menu>\n                                {that.state.itemBatches[record.inventory] && that.state.itemBatches[record.inventory].map((batch, index) =>\n                                    (moment() >= moment(batch.expiry_date) ? (\n<Menu.Item key={index} disabled>\n                                        {batch.batch_number}&nbsp;({batch.quantity}) &nbsp;&nbsp;{batch.expiry_date}\n</Menu.Item>\n) : (\n<Menu.Item key={index}>\n                                        <a onClick={() => that.selectBatch(batch, record._id, INVENTORY)}>{batch.batch_number}&nbsp;({batch.quantity}) &nbsp;&nbsp;{batch.expiry_date}</a>\n</Menu.Item>\n)))}\n</Menu>\n)}\n                              trigger={['click']}\n                            >\n                                <a className=\"ant-dropdown-link\" href=\"#\">\n                                    <b>\n                                        {record.selectedBatch ? record.selectedBatch.batch_number : 'Select Batch'}\n                                    </b>\n                                </a>\n                            </Dropdown>\n                            {record.selectedBatch && record.selectedBatch.expiry_date && moment(record.selectedBatch.expiry_date)<moment()? <Tag color=\"#f50\">Expired</Tag> : null}\n</div>\n)\n                    default:\n                        return null;\n                }\n            }\n        }];\n        consumeRow = consumeRow.concat([{\n            title: 'Returning Unit',\n            key: 'unit',\n            width: 100,\n            dataIndex: 'unit',\n            render: (item, record) => (record.item_type == INVENTORY ? (\n                    <Form.Item\n                      key={`unit[${record._id}]`}\n                      {...formItemLayout}\n                    >\n                        {getFieldDecorator(`unit[${record._id}]`, {\n                            validateTrigger: ['onChange', 'onBlur'],\n                            initialValue: 0,\n                        })(\n                            <InputNumber\n                              max={(record.unit)}\n                              onChange={this.calculateReturnCashAvailable}\n                              min={0}\n                              placeholder=\"units\"\n                              size=\"small\"\n                              disabled={!(record.selectedBatch && that.state.stocks[record.inventory] && that.state.stocks[record.inventory][record.selectedBatch.batch_number])}\n                            />\n                        )}\n                        <span className=\"ant-form-text\">Items: {record.unit}</span>\n                    </Form.Item>\n                  )\n\n                    : (\n<Form.Item\n  key={`unit[${record._id}]`}\n  {...formItemLayout}\n>\n                        {getFieldDecorator(`unit[${record._id}]`, {\n                            initialValue: 0,\n                            validateTrigger: ['onChange', 'onBlur'],\n                        })(\n                            <InputNumber\n                              min={0}\n                              max={record.unit}\n                              placeholder=\"unit\"\n                              size=\"small\"\n                              onChange={this.calculateReturnCashAvailable}\n                            />\n                        )}\n                        <span className=\"ant-form-text\">Items: {record.unit}</span>\n</Form.Item>\n)\n            )\n        }, {\n            title: 'Unit Cost',\n            key: 'unit_cost',\n            width: 100,\n            dataIndex: 'unit_cost',\n            render: (item, record) => item ? item.toFixed(2) : null\n        }, {\n            title: 'discount %',\n            key: 'discount',\n            width: 100,\n            dataIndex: 'discount',\n            render: (item, record) => (\n<Form.Item\n  key={`discount[${record._id}]`}\n  {...formItemLayout}\n>\n                {getFieldDecorator(`discount[${record._id}]`, {\n                    initialValue: record.discount,\n                    validateTrigger: ['onChange', 'onBlur'],\n\n                })(\n                    <InputNumber min={0} max={100} placeholder=\"discount\" size=\"small\" disabled />\n                )}\n</Form.Item>\n)\n        }, {\n            title: 'Taxes',\n            key: 'taxes',\n            dataIndex: 'taxes',\n            render: (item, record) => (\n<Form.Item\n  key={`taxes[${record._id}]`}\n  {...formItemLayout}\n>\n                {getFieldDecorator(`taxes[${record._id}]`, {\n                    initialValue: record.taxes || [],\n                    validateTrigger: ['onChange', 'onBlur'],\n                })(\n                    <Select\n                      placeholder=\"Taxes\"\n                      size=\"small\"\n                      mode=\"multiple\"\n                      disabled\n                      style={{width: 150}}\n                      onChange={() => that.changeNetPrice(record._id)}\n                    >\n                        {this.state.taxes_list && this.state.taxes_list.map((tax) => (\n<Select.Option\n  value={tax.id}\n>{tax.name}@{tax.tax_value}%\n</Select.Option>\n))}\n                    </Select>\n                )}\n</Form.Item>\n)\n        }, {\n            title: 'Total Unit Cost',\n            key: 'total',\n            width: 100,\n            dataIndex: 'total',\n            render: (item, record) => (record.unit ? (record.total / record.unit).toFixed(2) : record.total.toFixed(2))\n        }]);\n\n        return (\n<div>\n            <Spin spinning={this.state.saveLoading} tip=\"Saving Invoice...\">\n                <Row gutter={16}>\n                    <Col span={20}>\n                        <Card\n                          title={this.props.editId ? `Return Invoice (INV ${  this.props.editId  })` : \"Add Invoice\"}\n                          bodyStyle={{padding: 0}}\n                        >\n                            <Row gutter={16}>\n                                <Col span={24}>\n                                    <Form onSubmit={this.handleSubmit} layout=\"inline\">\n                                        <Table\n                                          pagination={false}\n                                          bordered\n                                          dataSource={this.state.tableFormValues}\n                                          columns={consumeRow}\n                                        />\n                                        <Affix offsetBottom={0}>\n                                            <Card>\n                                                <Row gutter={16}>\n                                                    <Col span={6}>\n\n                                                        <span> &nbsp;&nbsp;on&nbsp;&nbsp;</span>\n                                                        <DatePicker\n                                                          value={this.state.selectedDate}\n                                                          disabled\n                                                          onChange={(value) => this.selectedDefaultDate(value)}\n                                                          format=\"DD-MM-YYYY\"\n                                                          allowClear={false}\n                                                        />\n                                                        <br />\n                                                        <br />\n                                                        <Checkbox\n                                                          onChange={this.onChangeHandle}\n                                                          defaultChecked={this.state.return_with_tax}\n                                                        >\n                                                            Return With Tax\n                                                        </Checkbox>\n                                                    </Col>\n                                                    <Col span={8}>\n                                                        <Form.Item label=\"Returned Cash \">\n                                                            {getFieldDecorator('cash_return',\n                                                            )\n                                                            (<InputNumber\n                                                              min={0}\n                                                              max={this.state.returnCashAvailable}\n                                                              placeholder=\"Cash Returned\"\n                                                            />)}\n                                                            <span><br />Max Cash Return Allowed (INR) {this.state.returnCashAvailable}</span>\n                                                        </Form.Item>\n                                                    </Col>\n                                                    <Col span={10}>\n                                                        <Form.Item\n                                                          label=\"Notes\"\n                                                          key=\"notes\"\n                                                        >\n                                                            {getFieldDecorator(`notes`, {\n                                                                initialValue: this.state.tableFormValues.notes,\n                                                                validateTrigger: ['onChange', 'onBlur'],\n                                                            })(\n                                                                <Input.TextArea\n                                                                  row={2}\n                                                                  placeholder=\"Notes...\"\n                                                                  size=\"small\"\n                                                                  style={{width: '100%'}}\n                                                                />\n                                                            )}\n                                                        </Form.Item>\n                                                        <Form.Item\n                                                          {...formItemLayoutWithOutLabel}\n                                                          style={{marginBottom: 0, float: 'right'}}\n                                                        >\n                                                            <Button\n                                                              type=\"primary\"\n                                                              htmlType=\"submit\"\n                                                              style={{margin: 5}}\n                                                            >Save Return Invoice\n                                                            </Button>\n                                                            {that.props.history ? (\n                                                                <Button\n                                                                  style={{margin: 5, float: 'right'}}\n                                                                  onClick={() => that.props.history.goBack()}\n                                                                >\n                                                                    Cancel\n                                                                </Button>\n                                                              ) : null}\n                                                        </Form.Item>\n\n                                                    </Col>\n                                                </Row>\n\n\n                                            </Card>\n                                        </Affix>\n                                    </Form>\n                                </Col>\n                            </Row>\n                        </Card>\n                    </Col>\n                    <Col span={4}>\n                        <Divider>Payments Done</Divider>\n                        <List\n                          dataSource={this.state.editInvoice.payments}\n                          renderItem={payment => (\n<Card\n  title={payment.payment_id}\n  style={{marginBottom: 10}}\n  bodyStyle={{padding: 5}}\n>\n                                  <p>Paid (INR)<span\n                                    style={{float: 'right', fontWeight: 600}}\n                                  > {payment.pay_amount.toFixed(2)}\n                                               </span>\n                                  </p>\n</Card>\n)}\n                        />\n                    </Col>\n                </Row>\n            </Spin>\n</div>\n)\n\n    }\n}\n\nexport default Form.create()(AddReturnInvoice);\n","import React from \"react\";\nimport {Button, Card, Form, Icon, Input, Modal} from \"antd\";\nimport {CANCELINVOICE_RESENT_OTP, CANCELINVOICE_VERIFY_OTP} from \"../../../constants/api\";\nimport {getAPI, postAPI} from \"../../../utils/common\";\n\nclass InvoiceReturnModal extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            returnIncoiceVisible: this.props.returnIncoiceVisible,\n            otpSent:this.props.otpSent,\n\n        };\n    }\n\n    handleSubmitReturnInvoice = (e) => {\n        const that = this;\n        e.preventDefault();\n        this.props.form.validateFields((err, values) => {\n            if (!err) {\n                const reqData = {\n                    ...values,\n                    practice: this.props.active_practiceId,\n                }\n                const successFn = function (data) {\n                    that.setState({\n                        returnIncoiceVisible: false,\n                    });\n                    that.returnInvoiceData(that.props.editInvoice)\n                    that.props.returnInvoiceClose();\n                };\n                const errorFn = function () {\n\n                };\n                postAPI(CANCELINVOICE_VERIFY_OTP, reqData, successFn, errorFn);\n            }\n        });\n    };\n\n    returnInvoiceData = (record) => {\n        const that = this;\n        // let id = this.props.match.params.id;\n        this.setState({\n            editInvoice: record,\n        }, function () {\n            that.props.history.push(`/patient/${  record.patient_data.id  }/billing/invoices/return/`)\n        });\n    }\n\n\n\n    sendOTP() {\n        const that = this;\n        const successFn = function (data) {\n\n        };\n        const errorFn = function () {\n\n        };\n        getAPI(CANCELINVOICE_RESENT_OTP, successFn, errorFn);\n    }\n\n    render() {\n        const that = this;\n        const {getFieldDecorator} = that.props.form;\n        return(\n            <Modal\n              visible={(this.state.returnIncoiceVisible && that.props.editInvoice && that.props.editInvoice.id == that.props.invoice.id)}\n              title=\"Return Invoice\"\n              footer={null}\n              onOk={that.props.handleSubmitReturnInvoice}\n              onCancel={that.props.returnInvoiceClose}\n            >\n                <Form>\n                    <Form.Item>\n                        {getFieldDecorator('otp', {\n                            rules: [{required: true, message: 'Please input Otp!'}],\n                        })(\n                            <Input\n                              prefix={<Icon type=\"user\" style={{color: 'rgba(0,0,0,.25)'}} />}\n                              placeholder=\"Otp\"\n                            />,\n                        )}\n                    </Form.Item>\n                    <Form.Item>\n                        {that.props.otpSent ? (\n<a style={{float: 'right'}} type=\"primary\" onClick={that.sendOTP}>\n                            Resend Otp ?\n</a>\n) : null}\n                        <Button size=\"small\" type=\"primary\" htmlType=\"submit\" onClick={that.handleSubmitReturnInvoice}>\n                            Submit\n                        </Button>&nbsp;\n                        <Button size=\"small\" onClick={that.props.returnInvoiceClose}>\n                            Close\n                        </Button>\n                    </Form.Item>\n                </Form>\n            </Modal>\n        )\n    }\n\n\n}\nexport default Form.create()(InvoiceReturnModal);\n","import React from \"react\";\nimport {Button, Card, Form, Icon, Input, Modal} from \"antd\";\nimport moment from \"moment\";\nimport {CANCELINVOICE_GENERATE_OTP, CANCELINVOICE_RESENT_OTP, CANCELINVOICE_VERIFY_OTP} from \"../../../constants/api\";\nimport {getAPI, postAPI} from \"../../../utils/common\";\nimport {OTP_DELAY_TIME} from \"../../../constants/dataKeys\";\n\nclass EditReturnModal extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            otpSent:this.props.otpSent,\n            returnIncoiceVisible: this.props.returnIncoiceVisible,\n            editIncoiceVisible: this.props.editIncoiceVisible,\n\n\n        };\n    }\n\n    handleSubmitEditInvoice = (e) => {\n        const that = this;\n        e.preventDefault();\n        this.props.form.validateFields((err, values) => {\n            if (!err) {\n                const reqData = {\n                    ...values,\n                    practice: this.props.active_practiceId,\n                }\n                const successFn = function (data) {\n                    that.setState({\n                        editIncoiceVisible: false,\n                    });\n                    that.editInvoiceData(that.props.editInvoice);\n                    that.props.editInvoiceClose();\n                };\n                const errorFn = function () {\n\n                };\n                postAPI(CANCELINVOICE_VERIFY_OTP, reqData, successFn, errorFn);\n            }\n        });\n    };\n\n    editInvoiceData = (record) => {\n        const that = this;\n        // let id = this.props.match.params.id;\n        this.setState({\n            editInvoice: record,\n        }, function () {\n            that.props.history.push(`/patient/${  record.patient_data.id  }/billing/invoices/edit/`)\n        });\n    };\n\n\n    sendOTP() {\n        const that = this;\n        const successFn = function (data) {\n\n        };\n        const errorFn = function () {\n\n        };\n        getAPI(CANCELINVOICE_RESENT_OTP, successFn, errorFn);\n    }\n\n    render() {\n        const that = this;\n        const {getFieldDecorator} = that.props.form;\n        return(\n            <Modal\n              visible={(that.state.editIncoiceVisible && that.props.editInvoice && that.props.editInvoice.id == that.props.invoice.id)}\n              title=\"Edit Invoice\"\n              footer={null}\n              onOk={that.handleSubmitEditInvoice}\n              onCancel={that.props.editInvoiceClose}\n                \n            >\n                <Form>\n                    <Form.Item>\n                        {getFieldDecorator('otp', {\n                            rules: [{required: true, message: 'Please input Otp!'}],\n                        })(\n                            <Input\n                              prefix={<Icon type=\"user\" style={{color: 'rgba(0,0,0,.25)'}} />}\n                              placeholder=\"Otp\"\n                            />,\n                        )}\n                    </Form.Item>\n                    <Form.Item>\n                        {that.props.otpSent ? (\n<a style={{float: 'right'}} type=\"primary\" onClick={that.sendOTP}>\n                            Resend Otp ?\n</a>\n) : null}\n                        <Button size=\"small\" type=\"primary\" htmlType=\"submit\" onClick={that.handleSubmitEditInvoice}>\n                            Submit\n                        </Button>&nbsp;\n                        <Button size=\"small\" onClick={that.props.editInvoiceClose}>\n                            Close\n                        </Button>\n                    </Form.Item>\n                </Form>\n            </Modal>\n        )\n    }\n\n\n}\nexport default Form.create()(EditReturnModal);\n","import React from \"react\";\nimport {Button, Card, Form, Icon, Input, Modal} from \"antd\";\nimport moment from \"moment\";\nimport {\n    CANCELINVOICE_RESENT_OTP,\n    CANCELINVOICE_VERIFY_OTP,\n    SINGLE_INVOICES_API\n} from \"../../../constants/api\";\nimport {displayMessage, getAPI, interpolate, postAPI, putAPI} from \"../../../utils/common\";\nimport {SUCCESS_MSG_TYPE, OTP_DELAY_TIME} from \"../../../constants/dataKeys\";\nimport { REQUIRED_FIELD_MESSAGE } from \"../../../constants/messages\";\n\nconst { TextArea } = Input;\nclass CancelReturnModal extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            cancelIncoiceVisible: this.props.cancelIncoiceVisible,\n            otpSent:this.props.otpSent,\n            otpField:false\n\n        };\n    }\n\n    componentDidMount(){\n        const that =this;\n        const created_time = moment().diff(that.props.editInvoice.created_at, 'minutes');\n        if(created_time>OTP_DELAY_TIME){\n            that.setState({\n                otpField:true\n            })\n        }\n       \n    }\n\n    handleSubmitCancelInvoice = (e) => {\n        const that = this;\n        const {otpField} =that.state;\n        e.preventDefault();\n        this.props.form.validateFields((err, values) => {\n            if (!err) {\n                const reqData = {\n                    ...values,\n                    practice: this.props.active_practiceId,\n                }\n                const successFn = function (data) {\n                    that.setState({\n                        cancelIncoiceVisible: false,\n                    });\n                    that.deleteInvoice(that.props.editInvoice.patient, that.props.editInvoice.id, values.cancel_note)\n                };\n                const errorFn = function () {\n\n                };\n                if(otpField){\n                    postAPI(CANCELINVOICE_VERIFY_OTP, reqData, successFn, errorFn);\n                }else{\n                    that.deleteInvoice(that.props.editInvoice.patient, that.props.editInvoice.id, values.cancel_note)\n                }\n               \n            }\n        });\n    }\n\n\n    deleteInvoice(patient, invoice, cancel_note) {\n        const that = this;\n        const reqData = {\n            patient, \n            is_cancelled: true,\n            cancel_note\n        };\n        const successFn = function (data) {\n            that.props.cancelInvoiceClose();\n            displayMessage(SUCCESS_MSG_TYPE, \"Invoice cancelled successfully\")\n            that.props.loadInvoices();\n        }\n        const errorFn = function () {\n        }\n        putAPI(interpolate(SINGLE_INVOICES_API, [invoice]), reqData, successFn, errorFn);\n    }\n\n   \n\n    sendOTP() {\n        const that = this;\n        const successFn = function (data) {\n\n        };\n        const errorFn = function () {\n\n        };\n        getAPI(CANCELINVOICE_RESENT_OTP, successFn, errorFn);\n    }\n\n    render() {\n        const that = this;\n        const {otpField} =this.state;\n        \n        const {getFieldDecorator} = that.props.form;\n        return(\n            <Modal\n              visible={that.state.cancelIncoiceVisible}\n              title=\"Cancel Invoice\"\n              footer={null}\n              onOk={that.handleSubmitCancelInvoice}\n              onCancel={that.props.cancelInvoiceClose}\n            >\n                <Form>\n                    <Form.Item key=\"cancel_notes\">\n                        {getFieldDecorator('cancel_note',{\n                            rules:[{required:true, message:REQUIRED_FIELD_MESSAGE}],\n                        })(\n                            <TextArea placeholder=\"cancel notes\" />\n                        )}\n                    </Form.Item>\n                    { otpField && (\n                        <Form.Item key=\"cancelOtp\">\n                            {getFieldDecorator('otp', {\n                                rules: [{required: true, message: 'Please input Otp!'}],\n                            })(\n                                <Input\n                                  prefix={<Icon type=\"user\" style={{color: 'rgba(0,0,0,.25)'}} />}\n                                  placeholder=\"Otp\"\n                                />\n                            )}\n                        </Form.Item>\n                      )}\n                    <Form.Item>\n                        {that.props.otpSent ? (\n<a style={{float: 'right'}} type=\"primary\" onClick={that.sendOTP}>\n                            Resend Otp ?\n</a>\n) : null}\n                        <Button size=\"small\" type=\"primary\" htmlType=\"submit\" onClick={that.handleSubmitCancelInvoice}>\n                            Submit\n                        </Button>&nbsp;\n                        <Button size=\"small\" onClick={that.cancelInvoiceClose}>\n                            Close\n                        </Button>\n                    </Form.Item>\n                </Form>\n            </Modal>\n        )\n    }\n\n\n}\nexport default Form.create()(CancelReturnModal);\n","import React from \"react\";\nimport {\n    Affix,\n    Alert,\n    Button,\n    Card,\n    Col,\n    Divider,\n    Dropdown,\n    Icon,\n    Menu,\n    Modal,\n    Row,\n    Spin,\n    Statistic,\n    Table,\n    Tag,\n    Tooltip,\n    Form, Input\n} from \"antd\";\nimport moment from \"moment\";\nimport {Route, Switch} from \"react-router\";\nimport {Link, Redirect} from \"react-router-dom\";\nimport * as _ from \"lodash\";\nimport {displayMessage, getAPI, interpolate, putAPI, postAPI} from \"../../../utils/common\";\nimport {\n    DRUG_CATALOG,\n    INVOICE_PDF_API,\n    INVOICES_API,\n    PROCEDURE_CATEGORY,\n    SINGLE_INVOICES_API,\n    TAXES,\n    CANCELINVOICE_GENERATE_OTP,\n    CANCELINVOICE_VERIFY_OTP,\n    CANCELINVOICE_RESENT_OTP, PAYMENT_PDF,\n} from \"../../../constants/api\";\nimport AddInvoicedynamic from \"./AddInvoicedynamic\";\nimport InfiniteFeedLoaderButton from \"../../common/InfiniteFeedLoaderButton\";\nimport {BACKEND_BASE_URL} from \"../../../config/connect\";\nimport {SUCCESS_MSG_TYPE, OTP_DELAY_TIME} from \"../../../constants/dataKeys\";\nimport AddReturnInvoice from \"./AddReturnInvoice\";\nimport InvoiceReturnModal from \"./InvoiceReturnModal\";\nimport EditReturnModal from \"./EditReturnModal\";\nimport CancelReturnModal from \"./CancelReturnModal\";\nimport {sendMail} from \"../../../utils/clinicUtils\";\n\nconst {confirm} = Modal;\n\nclass PatientInvoices extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            currentPatient: this.props.currentPatient,\n            active_practiceId: this.props.active_practiceId,\n            invoices: [],\n            drug_catalog: null,\n            procedure_category: null,\n            taxes_list: null,\n            editInvoice: null,\n            loading: true,\n            returnIncoiceVisible: false,\n            editIncoiceVisible: false,\n            cancelIncoiceVisible: false,\n        }\n        this.loadInvoices = this.loadInvoices.bind(this);\n        this.loadDrugCatalog = this.loadDrugCatalog.bind(this);\n        this.loadProcedureCategory = this.loadProcedureCategory.bind(this);\n        this.loadTaxes = this.loadTaxes.bind(this);\n    }\n\n    componentDidMount() {\n        this.loadInvoices();\n    }\n\n    loadInvoices(page = 1) {\n        const that = this;\n        if (that.props.refreshWallet && page == 1) {\n            that.props.refreshWallet();\n        }\n        that.setState({\n            loading: true\n        });\n        const successFn = function (data) {\n            if (data.current == 1) {\n                that.setState({\n                    total: data.count,\n                    invoices: data.results,\n                    loading: false,\n                    loadMoreInvoice: data.next\n                })\n            } else {\n                that.setState(function (prevState) {\n                    return {\n                        total: data.count,\n                        invoices: [...prevState.invoices, ...data.results],\n                        loading: false,\n                        loadMoreInvoice: data.next\n                    }\n                })\n            }\n        }\n        const errorFn = function () {\n            that.setState({\n                loading: false\n            })\n\n        }\n        const apiParams = {\n            page,\n            practice: this.props.active_practiceId,\n            summary: true\n        };\n        if (this.props.match.params.id) {\n            apiParams.patient = this.props.match.params.id;\n        }\n        // if (this.props.showAllClinic && this.props.match.params.id) {\n        //     delete (apiParams.practice)\n        // }\n        getAPI(INVOICES_API, successFn, errorFn, apiParams);\n    }\n\n    loadDrugCatalog() {\n        const that = this;\n        const successFn = function (data) {\n            that.setState({\n                drug_catalog: data,\n            })\n        }\n        const errorFn = function () {\n\n        }\n        getAPI(interpolate(DRUG_CATALOG, [this.props.active_practiceId]), successFn, errorFn)\n    }\n\n    loadProcedureCategory() {\n        const that = this;\n        const successFn = function (data) {\n            that.setState({\n                procedure_category: data,\n            })\n        }\n        const errorFn = function () {\n\n\n        }\n        getAPI(interpolate(PROCEDURE_CATEGORY, [this.props.active_practiceId]), successFn, errorFn);\n    }\n\n    loadTaxes() {\n        const that = this;\n        const successFn = function (data) {\n            that.setState({\n                taxes_list: data,\n            })\n        };\n        const errorFn = function () {\n        };\n        getAPI(interpolate(TAXES, [this.props.active_practiceId]), successFn, errorFn);\n\n    }\n\n\n    loadPDF = (id) => {\n        const that = this;\n        const successFn = function (data) {\n            if (data.report)\n                window.open(BACKEND_BASE_URL + data.report);\n        }\n        const errorFn = function () {\n\n        }\n        getAPI(interpolate(INVOICE_PDF_API, [id]), successFn, errorFn);\n    }\n\n\n    returnModelOpen = (record) => {\n        const that = this;\n        // let created_time = moment().diff(record.created_at, 'minutes');\n        // if (created_time > OTP_DELAY_TIME) {\n            that.setState({\n                returnIncoiceVisible: true,\n                editIncoiceVisible: false,\n                cancelIncoiceVisible: false,\n                editInvoice: record,\n            });\n\n            const reqData = {\n                practice: this.props.active_practiceId,\n                type: `${'Invoice' + ':'}${  record.invoice_id  } ` + `Return`\n            };\n            const successFn = function (data) {\n                that.setState({\n                    otpSent: true,\n                    patientId: record.patient,\n                    invoiceId: record.id\n                })\n            };\n            const errorFn = function () {\n\n            };\n            postAPI(CANCELINVOICE_GENERATE_OTP, reqData, successFn, errorFn);\n        // } else {\n        //     this.setState({\n        //         editInvoice: record,\n        //     }, function () {\n        //         that.props.history.push(\"/patient/\" + record.patient_data.id + \"/billing/invoices/return/\")\n        //     });\n        // }\n    };\n\n\n    editModelOpen(record) {\n        const that = this;\n        const created_time = moment().diff(record.created_at, 'minutes');\n\n        \n            that.setState({\n                editIncoiceVisible: true,\n                cancelIncoiceVisible: false,\n                returnIncoiceVisible: false,\n                editInvoice: record,\n            });\n\n            const reqData = {\n                practice: this.props.active_practiceId,\n                type: `${'Invoice' + ':'}${  record.invoice_id  } ` + `Edit`\n            }\n            const successFn = function (data) {\n                that.setState({\n                    otpSent: true,\n                    patientId: record.patient,\n                    invoiceId: record.id\n                })\n            }\n            const errorFn = function () {\n\n            };\n            if (created_time > OTP_DELAY_TIME) {\n                postAPI(CANCELINVOICE_GENERATE_OTP, reqData, successFn, errorFn);\n\n            } \n\n    };\n\n\n    cancelModalOpen = (record) => {\n        const that = this;\n        const created_time = moment().diff(record.created_at, 'minutes');\n\n        \n\n            that.setState({\n                cancelIncoiceVisible: true,\n                editIncoiceVisible: false,\n                returnIncoiceVisible: false,\n                editInvoice: record\n            });\n\n            const reqData = {\n                practice: this.props.active_practiceId,\n                type: `${'Invoice' + ':'}${  record.invoice_id  } ` + ` Cancellation`\n            }\n            const successFn = function (data) {\n                that.setState({\n                    otpSent: true,\n                    patientId: record.patient,\n                    invoiceId: record.id\n                })\n            }\n            const errorFn = function () {\n\n            };\n            if (created_time > OTP_DELAY_TIME) {\n                postAPI(CANCELINVOICE_GENERATE_OTP, reqData, successFn, errorFn);\n\n            } \n    };\n\n    deleteInvoice(patient, invoice) {\n        const that = this;\n        const reqData = {patient, is_cancelled: true};\n        const successFn = function (data) {\n            displayMessage(SUCCESS_MSG_TYPE, \"Invoice cancelled successfully\")\n            that.loadInvoices();\n        }\n        const errorFn = function () {\n        }\n        putAPI(interpolate(SINGLE_INVOICES_API, [invoice]), reqData, successFn, errorFn);\n    }\n\n    editInvoiceClose = () => {\n        this.setState({\n            editIncoiceVisible: false\n        })\n    };\n\n    returnInvoiceClose = () => {\n        this.setState({\n            returnIncoiceVisible: false\n        })\n    };\n\n    cancelInvoiceClose = () => {\n        this.setState({\n            cancelIncoiceVisible: false\n        })\n    };\n\n\n    updateFormValue =(type,value)=>{\n        this.setState({\n            [type]: value\n        })\n    };\n\n    mailModalOpen =() =>{\n        this.setState({\n            visibleMail:true\n        })\n    };\n\n    mailModalClose =() =>{\n        this.setState({\n            visibleMail:false\n        })\n    };\n\n    sendPatientMail =(invoice)=>{\n        this.mailModalOpen()\n        this.setState({\n            patientName:_.get(invoice,'patient_data.user.first_name'),\n            paymentId:_.get(invoice,'id'),\n            mail_to:_.get(invoice,'patient_data.user.email')\n        })\n\n    };\n\n    sendMailToPatient =()=>{\n        const {mail_to ,paymentId } = this.state;\n        const apiParams ={\n            mail_to,\n        }\n        sendMail(interpolate(INVOICE_PDF_API,[paymentId]),apiParams)\n        this.mailModalClose();\n    }\n\n\n\n    render() {\n        const that = this;\n        const drugs = {}\n        if (this.state.drug_catalog) {\n\n            this.state.drug_catalog.forEach(function (drug) {\n                drugs[drug.id] = (`${drug.name  },${  drug.strength}`)\n            })\n        }\n        const procedures = {}\n        if (this.state.procedure_category) {\n            this.state.procedure_category.forEach(function (procedure) {\n                procedures[procedure.id] = procedure.name;\n            })\n        }\n\n        const taxesdata = {}\n        if (this.state.taxes_list) {\n            this.state.taxes_list.forEach(function (tax) {\n                taxesdata[tax.id] = tax.name;\n            })\n        }\n\n        if (this.props.match.params.id) {\n            return (\n<div>\n                <Switch>\n                    <Route\n                      path='/patient/:id/billing/invoices/add'\n                      render={(route) => (\n<AddInvoicedynamic\n  {...route}\n  {...this.props}\n  loadData={this.loadInvoices}\n/>\n)}\n                    />\n                    <Route\n                      path='/patient/:id/billing/invoices/edit'\n                      render={(route) => (\n                               this.state.editInvoice ? (\n                                   <AddInvoicedynamic\n                                     {...this.state}\n                                     {...route}\n                                     {...this.props}\n                                     editId={this.state.editInvoice.id}\n                                     loadData={this.loadInvoices}\n                                   />\n                                 ) :\n                                   <Redirect to={`/patient/${  this.props.match.params.id  }/billing/invoices`} />\n                           )}\n                    />\n                    <Route\n                      path='/patient/:id/billing/invoices/return'\n                      render={(route) => (\n                               this.state.editInvoice ? (\n                                   <AddReturnInvoice\n                                     {...this.state}\n                                     {...route}\n                                     editId={this.state.editInvoice.id}\n                                     loadData={this.loadInvoices}\n                                   />\n                                 ) :\n                                   <Redirect to={`/patient/${  this.props.match.params.id  }/billing/invoices`} />\n                           )}\n                    />\n                    <Route>\n                        <div>\n                            <Alert\n                              banner\n                              showIcon\n                              type=\"info\"\n                              message=\"The invoices shown are only for the current selected practice!\"\n                            />\n                            <Affix offsetTop={0}>\n                                <Card\n                                  bodyStyle={{padding: 0}}\n                                  style={{boxShadow: '0 5px 8px rgba(0, 0, 0, 0.09)'}}\n                                  title={(this.state.currentPatient ? `${this.state.currentPatient.user.first_name  } Invoice ` : \"Invoices \") + (this.state.total ? `(Total:${this.state.total})` : '')}\n                                  extra={(\n<Button.Group>\n                                          <Link to={`/patient/${  this.props.match.params.id  }/billing/invoices/add`}>\n                                              <Button type=\"primary\">\n                                                  <Icon type=\"plus\" />Add\n                                              </Button>\n                                          </Link>\n</Button.Group>\n)}\n                                />\n                            </Affix>\n                            {this.state.invoices.map(invoice => InvoiceCard(invoice, that))}\n                            <Spin spinning={this.state.loading}>\n                                <Row />\n                            </Spin>\n                            <InfiniteFeedLoaderButton\n                              loaderFunction={() => this.loadInvoices(this.state.loadMoreInvoice)}\n                              loading={this.state.loading}\n                              hidden={!this.state.loadMoreInvoice}\n                            />\n\n                        </div>\n                    </Route>\n                </Switch>\n                <Modal\n                  title={null}\n                  visible={this.state.visibleMail}\n                  onOk={this.sendMailToPatient}\n                  onCancel={this.mailModalClose}\n                  footer={[\n                        <Button key=\"back\" onClick={this.mailModalClose}>\n                            Cancel\n                        </Button>,\n                        <Button key=\"submit\" type=\"primary\" onClick={this.sendMailToPatient}>\n                            Send\n                        </Button>,\n                    ]}\n                >\n                    <p>Send Invoice To {this.state.patientName} ?</p>\n                    <Input\n                      value={that.state.mail_to}\n                      placeholder=\"Email\"\n                      onChange={(e)=>that.updateFormValue('mail_to',e.target.value)}\n                    />\n                </Modal>\n\n                {that.state.cancelIncoiceVisible ? (\n                            <CancelReturnModal\n                              key=\"cancelInvoice1\"\n                              {...that.state}\n                              cancelInvoiceClose={that.cancelInvoiceClose}\n                              loadInvoices={that.loadInvoices}\n                            />\n                          )\n                           :null}\n\n\n</div>\n)\n        } \n            return (\n<div>\n                <Affix offsetTop={0}>\n                    <Card\n                      bodyStyle={{padding: 0}}\n                      style={{boxShadow: '0 5px 8px rgba(0, 0, 0, 0.09)'}}\n                      title={(this.state.currentPatient ? `${this.state.currentPatient.user.first_name  } Invoice ` : \"Invoice \") + (this.state.total ? `(Total:${this.state.total})` : '')}\n                      extra={(\n<Button.Group>\n                              <Button type=\"primary\" onClick={() => this.props.togglePatientListModal(true)}>\n                                  <Icon type=\"plus\" />Add\n                              </Button>\n</Button.Group>\n)}\n                    />\n                </Affix>\n                {this.state.invoices.map(invoice => InvoiceCard(invoice, that))}\n                <Spin spinning={this.state.loading}>\n                    <Row />\n                </Spin>\n                <InfiniteFeedLoaderButton\n                  loaderFunction={() => this.loadInvoices(this.state.loadMoreInvoice)}\n                  loading={this.state.loading}\n                  hidden={!this.state.loadMoreInvoice}\n                />\n\n                <Modal\n                  title={null}\n                  visible={this.state.visibleMail}\n                  onOk={this.sendMailToPatient}\n                  onCancel={this.mailModalClose}\n                  footer={[\n                        <Button key=\"back\" onClick={this.mailModalClose}>\n                            Cancel\n                        </Button>,\n                        <Button key=\"submit\" type=\"primary\" onClick={this.sendMailToPatient}>\n                            Send\n                        </Button>,\n                    ]}\n                >\n                    <p>Send invoice To {this.state.patientName} ?</p>\n                    <Input\n                      value={that.state.mail_to}\n                      placeholder=\"Email\"\n                      onChange={(e)=>that.updateFormValue('mail_to',e.target.value)}\n                    />\n                </Modal>\n\n                {that.state.cancelIncoiceVisible ? (\n                            <CancelReturnModal\n                              key=\"cancelInvoice2\"\n                              {...that.state}\n                              cancelInvoiceClose={that.cancelInvoiceClose}\n                              loadInvoices={that.loadInvoices}\n                            />\n                          )\n                           :null}\n</div>\n)\n        \n\n    }\n}\n\nexport default Form.create()(PatientInvoices);\n\nfunction invoiceFooter(presc) {\n    if (presc) {\n        return (\n<p>\n            {presc.doctor ? (\n<Tooltip title=\"Doctor\"><Tag color={presc.doctor ? presc.doctor.calendar_colour : null}>\n                <b>{`prescribed by  ${  presc.doctor.user.first_name}`} </b>\n                        </Tag>\n</Tooltip>\n) : null}\n            {presc.practice ? (\n<Tag style={{float: 'right'}}>\n                <Tooltip title=\"Practice Name\">\n                    <b>{presc.practice.name} </b>\n                </Tooltip>\n</Tag>\n) : null}\n            {presc.notes ? <p>Notes: {presc.notes}</p> : null}\n            {presc.cancel_note ? <p>Cancel Notes: {presc.cancel_note}</p> : null}\n</p>\n)\n\n\n    }\n    return null\n}\n\nfunction InvoiceCard(invoice, that) {\n    let tableObjects = [];\n    const {getFieldDecorator} = that.props.form;\n    if (invoice.reservation) {\n        const medicinesPackages = invoice.reservation_data.medicines.map(item => Object.create({\n            ...item,\n            unit: 1,\n            total: item.final_price,\n            unit_cost: item.price,\n            discount: 0\n        }));\n        const mapper = {\n            \"NORMAL\": {total: 'final_normal_price', tax: \"normal_tax_value\", unit_cost: \"normal_price\"},\n            \"TATKAL\": {total: 'final_tatkal_price', tax: \"tatkal_tax_value\", unit_cost: \"tatkal_price\"}\n        }\n        tableObjects = [...tableObjects, {\n            ...invoice.reservation_data.bed_package,\n            unit: 1,\n            total: invoice.reservation_data.bed_package ? invoice.reservation_data.bed_package[mapper[invoice.reservation_data.seat_type].total] : null,\n            tax_value: invoice.reservation_data.bed_package ? invoice.reservation_data.bed_package[mapper[invoice.reservation_data.seat_type].tax] : null,\n            unit_cost: invoice.reservation_data.bed_package ? invoice.reservation_data.bed_package[mapper[invoice.reservation_data.seat_type].unit_cost] : null\n        }, ...medicinesPackages]\n    }\n    return (\n<Card\n  key={invoice.id}\n  style={{marginTop: 10}}\n  bodyStyle={{padding: 0}}\n  title={(\n<small>{invoice.date ? moment(invoice.date).format('ll') : null}\n            {that.state.currentPatient ? null : (\n<span>\n            <Link to={`/patient/${  invoice.patient_data ? invoice.patient_data.id : null  }/billing/invoices`}>\n                &nbsp;&nbsp; {invoice.patient_data ? invoice.patient_data.user.first_name : null} (ID: {invoice.patient_data && invoice.patient_data.custom_id ? invoice.patient_data.custom_id : invoice.patient_data.id})&nbsp;\n            </Link>, {invoice.patient_data ? invoice.patient_data.gender : null}\n</span>\n)}\n</small>\n)}\n  extra={(\n<Dropdown.Button\n  size=\"small\"\n  style={{float: 'right'}}\n  overlay={(\n<Menu>\n                <Menu.Item key=\"1\">\n                    {/* onClick={() => that.editInvoiceData(invoice)} disabled={!that.props.match.params.id}> */}\n                    <Link\n                      to={`/patient/${  invoice.patient_data ? invoice.patient_data.id : null  }/billing/payments/add?invoices=${  invoice.id}`}\n                    >\n                        <Icon type=\"dollar\" />\n                        &nbsp;\n                        Pay\n                    </Link>\n                </Menu.Item>\n                <Menu.Divider />\n                <Menu.Item\n                  key=\"2\"\n                  onClick={() => that.editModelOpen(invoice)}\n                  disabled={(invoice.practice != that.props.active_practiceId) || invoice.payments_data || invoice.is_cancelled}\n                >\n                    <Icon type=\"edit\" />\n                    Edit\n                </Menu.Item>\n                <Menu.Item\n                  key=\"5\"\n                  onClick={() => that.returnModelOpen(invoice)}\n                  disabled={(invoice.practice != that.props.active_practiceId) || invoice.is_cancelled}\n                >\n                    <Icon type=\"redo\" />\n                    Return\n                </Menu.Item>\n                <Menu.Item\n                  key=\"3\"\n                  onClick={() => that.cancelModalOpen(invoice)}\n                  disabled={(invoice.practice != that.props.active_practiceId) || invoice.payments_data || invoice.is_cancelled}\n                >\n                    <Icon type=\"delete\" />\n                    Cancel\n                </Menu.Item>\n                <Menu.Divider />\n                <Menu.Item key=\"4\">\n                    <Link to={`/patient/${  invoice.patient  }/emr/timeline`}>\n                        <Icon type=\"clock-circle\" />\n                        Patient Timeline\n                    </Link>\n                </Menu.Item>\n\n                <Menu.Divider />\n                <Menu.Item key=\"5\">\n                    <a onClick={() => that.sendPatientMail(invoice)}><Icon\n                      type=\"mail\"\n                    /> Send mail to patient\n                    </a>\n                </Menu.Item>\n</Menu>\n)}\n>\n            <a onClick={() => that.loadPDF(invoice.id)}><Icon\n              type=\"printer\"\n            />\n            </a>\n</Dropdown.Button>\n)}\n>\n        <Row gutter={8}>\n            <Col xs={24} sm={24} md={6} lg={4} xl={4} xxl={4} style={{padding: 10}}>\n                {invoice.is_cancelled ?\n                    <Alert message=\"Cancelled\" type=\"error\" showIcon /> : null}\n                <Divider style={{marginBottom: 0}}>{invoice.invoice_id}</Divider>\n                <Statistic\n                  title=\"Paid / Total \"\n                  value={(invoice.payments_data ? invoice.payments_data.toFixed(2) : 0)}\n                  suffix={`/ ${  invoice.total.toFixed(2)}`}\n                />\n            </Col>\n            <Col xs={24} sm={24} md={18} lg={20} xl={20} xxl={20}>\n                {invoice.type == \"Membership Amount.\" ? (\n                    <Table\n                      bordered\n                      pagination={false}\n                      columns={columns}\n                      dataSource={[{\n                            inventory: true,\n                            name: \"Membership\",\n                            unit_cost: invoice.total,\n                            unit: 1,\n                            discount_value: 0,\n                            tax_value: 0,\n                            total: invoice.total\n                        }]}\n                      footer={() => invoiceFooter({practice: invoice.practice_data, notes: invoice.notes, cancel_note : invoice.cancel_note})}\n                    />\n                  ) : (\n                    <Table\n                      bordered\n                      pagination={false}\n                      columns={columns}\n                      dataSource={[...tableObjects, ...invoice.inventory, ...invoice.procedure]}\n                      footer={() => invoiceFooter({practice: invoice.practice_data, notes: invoice.notes, cancel_note : invoice.cancel_note})}\n                    />\n                  )}\n\n            </Col>\n        </Row>\n\n\n        \n\n        {that.state.editIncoiceVisible && that.state.otpSent &&\n        <EditReturnModal key=\"editInvoice\" {...that.state} invoice={invoice} editInvoiceClose={that.editInvoiceClose} {...that.props} />}\n\n        {that.state.returnIncoiceVisible && that.state.otpSent && (\n<InvoiceReturnModal\n  key=\"returnInvoice\"\n  {...that.state}\n  invoice={invoice}\n  returnInvoiceClose={that.returnInvoiceClose}\n  {...that.props}\n/>\n)}\n\n</Card>\n)\n}\n\nconst columns = [{\n    title: 'Treatment & Products',\n    dataIndex: 'drug',\n    key: 'drug',\n    render: (text, record) => (\n        <span> <b>{record.name ? record.name : null}</b>\n                    <br /> {record.doctor_data ? (\n                <Tag color={record.doctor_data ? record.doctor_data.calendar_colour : null}>\n                    <b>{`prescribed by  ${  record.doctor_data.user.first_name}`} </b>\n                </Tag>\n              ) : null}\n        </span>\n)\n}, {\n    title: 'Cost',\n    dataIndex: 'unit_cost',\n    key: 'unit_cost',\n    render: (item, record) => <span>{record.unit_cost ? record.unit_cost.toFixed(2) : null}</span>\n}, {\n    title: 'Unit',\n    dataIndex: 'unit',\n    key: 'unit',\n}, {\n    title: 'Discount',\n    dataIndex: 'discount_value',\n    key: 'discount_value',\n    render: (item, record) => <span>{record.discount_value ? record.discount_value.toFixed(2) : null}</span>\n}, {\n    title: 'Tax',\n    dataIndex: 'tax_value',\n    key: 'tax_value',\n    render: (item, record) => <span>{record.tax_value ? record.tax_value.toFixed(2) : null}</span>\n}, {\n    title: 'Total',\n    dataIndex: 'total',\n    key: 'total',\n    render: item => item ? item.toFixed(2) : null\n}];\n","import React from \"react\";\nimport {\n    Button,\n    Card,\n    Col,\n    Divider,\n    InputNumber,\n    List,\n    Popconfirm,\n    Row,\n    Select,\n    DatePicker,\n    Spin,\n    Input,\n    Form\n} from 'antd';\nimport moment from \"moment\";\nimport {displayMessage, getAPI, interpolate, postAPI, putAPI} from \"../../../utils/common\";\nimport {\n    ACCEPT_PAYMENT,\n    AVAILABLE_ADVANCE, BULK_PAYMENT_API,\n    INVOICES_API,\n    PATIENT_PAYMENTS_API,\n    PAYMENT_MODES,\n    SINGLE_PAYMENT_API\n} from \"../../../constants/api\";\nimport {SUCCESS_MSG_TYPE, WARNING_MSG_TYPE} from \"../../../constants/dataKeys\";\nimport {PAYMENT_OFFLINE_MODE, PROCEDURES} from \"../../../constants/hardData\";\nimport {RAZORPAY_KEY} from \"../../../config/connect\";\n\nclass AddPaymentForm extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            invoicesList: [],\n            invoiceLoading: true,\n            addedInvoiceId: {},\n            addedInvoice: [],\n            paymentModes: [],\n            totalPayableAmount: 0,\n            invoicePayments: {},\n            totalPayingAmount: 0,\n            totalPayingFromAdvanceAmount: 0,\n            selectedPaymentMode: null,\n            availableAdvance: null,\n            advanceToBeSent: 0,\n            selectDate: moment(),\n            loading: false,\n            paymentModeOffline:false\n        }\n        this.loadEditPyament = this.loadEditPyament.bind(this);\n    }\n\n    componentWillMount() {\n        const that = this;\n        if (that.props.editPayment && that.props.editPayment.invoices) {\n            that.loadEditPyament(that.props.editPayment.invoices);\n            // let addedInvoicesId = {};\n            // let addedInvoice = [];\n            // let totalPayingAmount = 0;\n            // this.props.editPayment.invoices.forEach(function (inv) {\n            //     console.log(\"Item\",inv);\n            //     addedInvoicesId[inv.invoice] = true;\n            //     addedInvoice.push({...inv, ...inv.invoice_data});\n            //     totalPayingAmount += inv.pay_amount + inv.pay_amount_wallet\n            // })\n            // that.setState({\n            //     addedInvoiceId: addedInvoicesId,\n            //     addedInvoice: addedInvoice,\n            //     // totalPayingAmount : totalPayingAmount\n            // }, function () {\n            //     console.log(\"Infinity Loop\");\n            //     that.calculateInvoicePayments();\n            //     that.setPaymentAmount(totalPayingAmount);\n            // })\n\n\n        }\n        let invoiceArray = [];\n        if (this.props.history && this.props.history.location.search) {\n            const pairValueArray = this.props.history.location.search.substr(1).split('&');\n            if (pairValueArray.length) {\n                pairValueArray.forEach(function (item) {\n                    if ((item.split('='))[0] == 'invoices') {\n                        invoiceArray = ((item.split('='))[1]).split(',');\n                    }\n                })\n            }\n        }\n        this.loadInvoices(invoiceArray);\n        this.loadPaymentModes();\n        this.loadAvailableAdvance();\n    }\n\n    loadEditPyament = (editPayment) => {\n        const that = this;\n        const addedInvoicesId = {};\n        const addedInvoice = [];\n        let totalPayingAmount = 0;\n        this.setState(function (prevState) {\n            editPayment.forEach(function (inv) {\n                addedInvoicesId[inv.invoice] = true;\n                addedInvoice.push({...inv, ...inv.invoice_data});\n                totalPayingAmount += inv.pay_amount + inv.pay_amount_wallet;\n            }, function () {\n                that.calculateInvoicePayments();\n                that.setPaymentAmount(totalPayingAmount);\n            });\n            return {\n                addedInvoice,\n                addedInvoiceId: addedInvoicesId,\n            }\n        });\n    };\n\n    loadAvailableAdvance = () => {\n        const that = this;\n        const sucessFn = function (data) {\n            that.setState({\n                availableAdvance: data\n            });\n        }\n        const errorFn = function () {\n\n        }\n        getAPI(interpolate(AVAILABLE_ADVANCE, [that.props.match.params.id]), sucessFn, errorFn, {\n            practice_id: this.props.active_practiceId\n        })\n    }\n\n    loadPaymentModes = () => {\n        const that = this;\n        const successFn = function (data) {\n            if (data.length) {\n                if (data[0].mode ==PAYMENT_OFFLINE_MODE ){\n                    that.setState({\n                        paymentModeOffline:true\n                    })\n                }\n                that.setState({\n                    paymentModes: data,\n                    selectedPaymentMode: data[0].id\n                })\n            }\n        };\n        const errorFn = function () {\n        };\n        getAPI(interpolate(PAYMENT_MODES, [this.props.active_practiceId]), successFn, errorFn);\n    }\n\n    loadInvoices = (invoicesToLoad) => {\n        const that = this;\n        that.setState({\n            invoiceLoading: true\n        });\n        const successFn = function (data) {\n            that.setState(function (prevState) {\n                return {\n                    invoicesList: [...data.results, ...prevState.addedInvoice],\n                    invoiceLoading: false,\n                    loadMoreInvoice: data.next\n                }\n            }, function () {\n                if (invoicesToLoad) {\n                    invoicesToLoad.forEach(function (id) {\n                        that.addInvoiceToPayments(id)\n                    })\n                }\n                that.calculateInvoicePayments();\n            })\n        }\n        const errorFn = function () {\n            that.setState({\n                invoiceLoading: false\n            })\n\n        }\n        getAPI(INVOICES_API, successFn, errorFn, {\n            page: that.state.loadMoreInvoice || 1,\n            is_cancelled: false,\n            is_pending: true,\n            patient: this.props.match.params.id,\n            practice: this.props.active_practiceId\n        });\n    }\n\n    addInvoiceToPayments = (id) => {\n        const that = this;\n        this.setState(function (prevState) {\n            let foundInvoice = null;\n            prevState.invoicesList.forEach(function (invoice) {\n                if (invoice.id == id)\n                    foundInvoice = invoice\n            })\n            if (foundInvoice)\n                return {\n                    addedInvoice: [...prevState.addedInvoice, foundInvoice],\n                    addedInvoiceId: {...prevState.addedInvoiceId, [id]: true},\n                    invoicePayments: {...prevState.addedInvoiceId, [id]: 0}\n                }\n            return null;\n        }, function () {\n            that.calculateInvoicePayments()\n        })\n    }\n\n    removeInvoiceToPayments = (id) => {\n        const that = this;\n        this.setState(function (prevState) {\n            const foundInvoice = [];\n            prevState.addedInvoice.forEach(function (invoice) {\n                if (invoice.id != id)\n                    foundInvoice.push(invoice)\n            })\n            if (foundInvoice)\n                return {\n                    addedInvoice: foundInvoice,\n                    addedInvoiceId: {...prevState.addedInvoiceId, [id]: false},\n                }\n            return null\n        }, function () {\n            that.calculateInvoicePayments();\n        })\n    }\n\n    calculateInvoicePayments = () => {\n        this.setState(function (prevState) {\n            let payable = 0;\n            let totalPayingAmount = prevState.totalPayingAmount + prevState.totalPayingFromAdvanceAmount;\n            const invoicePayments = {};\n            prevState.addedInvoice.forEach(function (invoice) {\n                // invoice.inventory.forEach(function (invent) {\n                //     payable += invent.total\n                // });\n                // invoice.procedure.forEach(function (proc) {\n                //     payable += proc.unit * proc.total\n                // });\n                let invoicePayableAmount = invoice.total - invoice.payments_data;\n                if (invoice.pay_amount)\n                    invoicePayableAmount += invoice.pay_amount;\n                if (invoice.pay_amount_wallet)\n                    invoicePayableAmount += invoice.pay_amount_wallet;\n                payable += invoicePayableAmount;\n                if (totalPayingAmount >= invoicePayableAmount) {\n                    totalPayingAmount -= invoicePayableAmount;\n                    invoicePayments[invoice.id] = invoicePayableAmount;\n                } else {\n                    invoicePayments[invoice.id] = totalPayingAmount;\n                    totalPayingAmount = 0;\n                }\n\n            });\n\n            return {\n                advanceToBeSent: totalPayingAmount,\n                totalPayableAmount: payable.toFixed(2),\n                invoicePayments\n            }\n        });\n    }\n\n    setPaymentAmount = (value) => {\n        const that = this;\n        this.setState({\n            totalPayingAmount: value\n        }, function () {\n            that.calculateInvoicePayments();\n        })\n    }\n\n    setPaymentFromAdvanceAmount = (value) => {\n        const that = this;\n        this.setState({\n            totalPayingFromAdvanceAmount: value\n        }, function () {\n            that.calculateInvoicePayments();\n        })\n    }\n\n    changeSelectedPaymentMode = (e) => {\n        const {paymentModes} =this.state;\n        paymentModes.forEach((item)=>{\n           if (item.id == e){\n               if (item.mode == PAYMENT_OFFLINE_MODE){\n                   this.setState({\n                       paymentModeOffline:true,\n                   })\n               }else {\n                   this.setState({\n                       paymentModeOffline:false,\n                   })\n               }\n           }\n        });\n        this.setState({\n            selectedPaymentMode: e\n        })\n    };\n\n    changeNotes = (e) => {\n        this.setState({\n            notes: e\n        })\n    };\n\n    selectedDate = (value) => {\n        const that = this;\n        that.setState({\n            selectDate: value,\n        })\n    };\n\n    handleSubmit = (e) => {\n        if (!this.state.totalPayingAmount) {\n            displayMessage(WARNING_MSG_TYPE, \"Payment Amount of O INR is not allowed.\");\n            return false\n        }\n        this.setState({\n            loading: true\n        })\n        const that = this;\n        const newPayment = {\n            \"invoices\": [],\n            \"bank\": \"\",\n            \"number\": 0,\n            \"is_active\": true,\n            notes: that.state.notes,\n            \"is_cancelled\": false,\n            \"practice\": that.props.active_practiceId,\n            \"patient\": that.props.match.params.id,\n            \"payment_mode\": that.state.selectedPaymentMode,\n            advance_value: that.state.advanceToBeSent,\n            \"is_advance\": !!that.state.advanceToBeSent,\n            \"date\": moment(that.state.selectDate).format(\"YYYY-MM-DD\"),\n        }\n        const reqData = []\n        if (that.state.totalPayingAmount - that.state.totalPayableAmount > 1) {\n            reqData.advance_value = that.state.totalPayingAmount - that.state.totalPayableAmount;\n            reqData.is_advance = true;\n        }\n        const invoices = Object.keys(that.state.invoicePayments);\n        const invoicePayments = {...that.state.invoicePayments};\n        let totalAmountPayingFromAdvance = that.state.totalPayingFromAdvanceAmount;\n        let consumedInvoices = 0;\n        if (totalAmountPayingFromAdvance) {\n            that.state.availableAdvance.data.forEach(function (availableAdvancePayments) {\n                let maxConsumeAmount = totalAmountPayingFromAdvance;\n                if (availableAdvancePayments.advance_value < maxConsumeAmount) {\n                    maxConsumeAmount = availableAdvancePayments.advance_value;\n                }\n                if(maxConsumeAmount<0){\n                    maxConsumeAmount = 0;\n                }\n                let i = 0;\n                while (totalAmountPayingFromAdvance && invoices.length > consumedInvoices) {\n                    if (invoicePayments[invoices[consumedInvoices]] && maxConsumeAmount > invoicePayments[invoices[consumedInvoices]]) {\n                        availableAdvancePayments.advance_value -= invoicePayments[invoices[consumedInvoices]];\n                        availableAdvancePayments.invoices.push({\n                            \"pay_amount_advance\": invoicePayments[invoices[consumedInvoices]],\n                            \"pay_amount\": invoicePayments[invoices[consumedInvoices]],\n                            \"is_active\": true,\n                            \"invoice\": invoices[consumedInvoices],\n                        });\n                        consumedInvoices++;\n                        totalAmountPayingFromAdvance -= invoicePayments[invoices[consumedInvoices]];\n                        invoicePayments[invoices[consumedInvoices]] -= invoicePayments[invoices[consumedInvoices]];\n                    } else if (invoicePayments[invoices[consumedInvoices]]) {\n                        availableAdvancePayments.invoices.push({\n                            \"pay_amount_advance\": maxConsumeAmount,\n                            \"pay_amount\": maxConsumeAmount,\n                            \"is_active\": true,\n                            \"invoice\": invoices[consumedInvoices],\n                        });\n\n                        invoicePayments[invoices[consumedInvoices]] -= maxConsumeAmount;\n                        totalAmountPayingFromAdvance -= maxConsumeAmount;\n                        availableAdvancePayments.advance_value -= maxConsumeAmount;\n                    }\n                    if (!availableAdvancePayments.advance_value) {\n                        availableAdvancePayments.is_advance = false;\n                    }\n                    console.log(i++);\n                }\n                reqData.push(availableAdvancePayments);\n            });\n        }\n\n        for (; invoices.length > consumedInvoices; consumedInvoices++) {\n            newPayment.invoices.push({\n                \"pay_amount\": invoicePayments[invoices[consumedInvoices]],\n                \"type\": \"Invoice\",\n                \"is_active\": true,\n                \"invoice\": invoices[consumedInvoices],\n            });\n        }\n        if (this.props.editPayment && this.props.editPayment.id)\n            newPayment.id = this.props.editPayment.id;\n        if (newPayment.invoices.length || newPayment.id || newPayment.is_advance) {\n            reqData.push(newPayment);\n        }\n        if (that.state.receivedPayIdFromRazorPay) {\n            newPayment.bank = \"RazorPay\";\n            newPayment.number = that.state.receivedPayIdFromRazorPay;\n        }\n        console.log(reqData);\n        const successFn = function (data) {\n            that.setState({\n                loading: false\n            });\n            // if (that.props.loadData)\n            that.props.loadData();\n            that.props.history.replace(`/patient/${  that.props.match.params.id  }/billing/payments`)\n        };\n        const errorFn = function () {\n            that.setState({\n                loading: false\n            });\n        };\n         postAPI(BULK_PAYMENT_API, reqData, successFn, errorFn)\n    };\n\n    paymentHandler(inv, patientObj, cost,) {\n        if (!cost) {\n            displayMessage(WARNING_MSG_TYPE, \"Payment Amount of O INR is not allowed.\");\n            return false\n        }\n        const that = this;\n        const options = {\n            key: RAZORPAY_KEY,\n            amount: cost.toFixed(2) * 100,\n            name: patientObj.custom_id,\n\n            description: `Payment for ${  inv}`,\n            \"prefill\": {\n                \"name\": patientObj.user.first_name,\n                \"email\": patientObj.user.email,\n                \"contact\": patientObj.user.mobile\n            },\n            handler(response) {\n                const paymentId = response.razorpay_payment_id;\n                const reqData = {\n                    \"payment_id\": paymentId,\n                    \"amount\": cost\n                };\n                that.setState({\n                    loading: true\n                });\n                const successFn = function (data) {\n                    displayMessage(SUCCESS_MSG_TYPE, data.detail);\n                    that.setState({\n                        loading: false,\n                        receivedPayIdFromRazorPay: paymentId\n                    }, function () {\n                        that.handleSubmit();\n                    });\n\n                };\n                const errorFn = function () {\n                    that.setState({\n                        loading: false\n                    });\n                    console.log('Request failed');\n                };\n                // Using my server endpoints to capture the payment\n                postAPI(ACCEPT_PAYMENT, reqData, successFn, errorFn);\n            },\n        };\n        const rzp1 = new window.Razorpay(options);\n        rzp1.open();\n    }\n\n    render() {\n        const that = this;\n        return (\n<div>\n            <Spin spinning={this.state.loading} size=\"large\">\n                <Row gutter={8}>\n                    <Col xs={24} sm={24} md={16} lg={16} xl={18} xxl={18}>\n                        <Card>\n                            <Row>\n                                <Col span={24}>\n                                    {/* <Statistic title=\"Paid / Total \" value={93} suffix={\"/ \" + invoice.total}/> */}\n                                    {/* </Col> */}\n                                    {/* <Col xs={24} sm={24} md={16} lg={16} xl={18} xxl={18}> */}\n\n                                    <table style={{width: '100%'}}>\n                                        <tbody>\n                                        <tr style={{borderBottom: '2px solid #ccc'}}>\n                                            <td style={{width: '20%'}}>\n                                                <small>INVOICE NO</small>\n                                            </td>\n                                            <td style={{width: '20%'}}>\n                                                <small>PROCEDURE</small>\n                                            </td>\n                                            <td style={{width: '20%', textAlign: 'right'}}>\n                                                <small>DUE(INR)</small>\n                                            </td>\n                                            <td style={{width: '20%', textAlign: 'right'}}>\n                                                <small>PAY NOW(INR)</small>\n                                            </td>\n                                            <td style={{width: '20%', textAlign: 'right'}}>\n                                                <small>DUE AFTER PAYMENT(INR)</small>\n                                            </td>\n                                        </tr>\n\n                                        {this.state.addedInvoice.map(invoice => (\n                                            <tr style={{borderBottom: '2px solid #ccc'}}>\n                                                <td>\n                                                    <Button\n                                                      size=\"small\"\n                                                      type=\"danger\"\n                                                      shape=\"circle\"\n                                                      icon=\"close\"\n                                                      style={{position: 'absolute', right: '-35px'}}\n                                                      onClick={() => this.removeInvoiceToPayments(invoice.id)}\n                                                    />\n                                                    <h3>{invoice.invoice_id}</h3>\n                                                    {invoice.date}\n                                                </td>\n                                                <td>\n                                                    {invoice.procedure.map(proc => `${proc.procedure_data.name  }, `)}\n                                                    {invoice.inventory.map(proc => `${proc.inventory_item_data.name  }, `)}\n                                                    {invoice.reservation ? `${invoice.type  },` : null}\n                                                    {invoice.reservation_data && invoice.reservation_data.medicines ? invoice.reservation_data.medicines.map(item => `${item.name  },`) : null}\n                                                </td>\n                                                <td style={{textAlign: 'right'}}>\n                                                    <b>{(invoice.total - invoice.payments_data + (invoice.pay_amount || 0) + (invoice.pay_amount_wallet || 0)).toFixed(2)}</b>\n                                                </td>\n                                                <td style={{textAlign: 'right'}}>\n                                                    <b>{that.state.invoicePayments[invoice.id]}</b>\n                                                </td>\n                                                <td style={{textAlign: 'right'}}>\n                                                    <b>{(invoice.total - invoice.payments_data + (invoice.pay_amount || 0) + (invoice.pay_amount_wallet || 0) - that.state.invoicePayments[invoice.id]).toFixed(2)}</b>\n                                                </td>\n                                            </tr>\n                                          )\n                                        )}\n                                        </tbody>\n                                    </table>\n                                </Col>\n                            </Row>\n                            <Row style={{borderBottom: '2px dashed #ccc', marginTop: '20px'}}>\n                                <Col span={6}><h3>Total Payable :</h3></Col>\n                                <Col span={6}><h2>{this.state.totalPayableAmount}</h2></Col>\n                            </Row>\n                            <Row gutter={16} style={{marginTop: '20px'}}>\n                                <Col span={12}>\n                                    <Row>\n\n                                        <Col span={12}>\n                                            <h3>Amount From Advance :<br />\n                                                <small>Available: {this.state.availableAdvance ? this.state.availableAdvance.max_allowed : 0} INR</small>\n                                            </h3>\n                                        </Col>\n                                        <Col span={12}>\n                                            <InputNumber\n                                              min={0}\n                                              step={1}\n                                              max={this.state.availableAdvance ? this.state.availableAdvance.max_allowed : 0}\n                                              disabled={!this.state.availableAdvance || !this.state.availableAdvance.max_allowed}\n                                              value={this.state.totalPayingFromAdvanceAmount}\n                                              onChange={this.setPaymentFromAdvanceAmount}\n                                            />\n                                        </Col>\n                                    </Row>\n                                    <Row>\n                                        <Col span={12}>\n                                            <h3>Pay Now:</h3>\n                                        </Col>\n                                        <Col span={12}>\n                                            <InputNumber\n                                              min={0}\n                                              step={1}\n                                              value={this.state.totalPayingAmount}\n                                              onChange={this.setPaymentAmount}\n                                            />\n                                        </Col>\n                                    </Row>\n\n                                </Col>\n                                <Col span={12}>\n                                    <Row>\n                                        <Col span={10}>\n                                            <h3>Payment Mode :</h3>\n\n                                        </Col>\n                                        <Col span={12}>\n                                            <Select\n                                              style={{width: '100%'}}\n                                              value={this.state.selectedPaymentMode}\n                                              onChange={this.changeSelectedPaymentMode}\n                                            >\n                                                {this.state.paymentModes.map(mode => (\n<Select.Option\n  value={mode.id}\n  key={mode.id}\n>\n                                                    {mode.mode}\n\n</Select.Option>\n))}\n                                            </Select>\n                                            <br />\n                                            <br />\n                                        </Col>\n                                    </Row>\n                                    <Row>\n                                        <Col span={24}>\n                                            <Input.TextArea row={2} placeholder=\"Notes...\" size=\"small\" onChange={(e)=>this.changeNotes(e.target.value)}>\n                                                {this.state.notes}\n                                            </Input.TextArea>\n                                        </Col>\n                                    </Row>\n\n                                    <Row>\n                                        <Col span={6}>\n                                            <br />\n                                            <span> &nbsp;&nbsp;on&nbsp;&nbsp;</span>\n                                            <DatePicker\n                                              style={{width: 150}}\n                                              defaultValue={moment()}\n                                              onChange={(value) => that.selectedDate(value)}\n                                              allowClear={false}\n                                            />\n                                        </Col>\n                                    </Row>\n                                </Col>\n\n                            </Row>\n                            <Row>\n                                <Col span={24} style={{align: 'center'}}>\n\n                                    <Popconfirm\n                                      title={`Are you sure to take payment of INR ${  this.state.totalPayingAmount  }?`}\n                                      onConfirm={() => this.paymentHandler(this.state.addedInvoice.map(inv => inv.invoice_id).join(', '), this.props.currentPatient, this.state.totalPayingAmount)}\n                                    >\n                                        <Button type=\"primary\" style={{margin: 5}} disabled={that.props.editPayment && that.props.editPayment.invoices || that.state.paymentModeOffline}>Pay Online & Save Payments</Button>\n                                    </Popconfirm>\n\n                                    <Popconfirm\n                                      title={`Are you sure to take payment of INR ${  this.state.totalPayingAmount  }?`}\n                                      onConfirm={this.handleSubmit}\n                                    >\n                                        <Button type=\"primary\" style={{margin: 5}}>Only Save Payments</Button>\n                                    </Popconfirm>\n                                </Col>\n                            </Row>\n                        </Card>\n                    </Col>\n                    <Col xs={24} sm={24} md={6} lg={8} xl={6} xxl={6}>\n                        <List\n                          loading={this.state.invoiceLoading}\n                          dataSource={this.state.invoicesList}\n                          renderItem={invoice => (that.state.addedInvoiceId[invoice.id] ?\n                                  <div /> : (\n                                  <Card\n                                    hoverable\n                                    onClick={() => this.addInvoiceToPayments(invoice.id)}\n                                    style={{marginBottom: '10px'}}\n                                  >\n                                      <table style={{width: '100%'}}>\n                                          <tbody>\n                                          <tr>\n                                              <td style={{maxWidth: 'calc(100% - 60px)'}}><h4>{invoice.invoice_id}</h4>\n                                              </td>\n                                              <td style={{textAlign: 'right'}}><b>{invoice.date}</b></td>\n                                          </tr>\n                                          </tbody>\n                                      </table>\n                                      <Divider style={{margin: 0}} />\n                                      <table style={{width: '100%'}}>\n                                          <tbody>\n                                          {invoice.procedure.map(proc => (\n<tr>\n                                              <td style={{maxWidth: 'calc(100% - 60px)'}}>{proc.procedure_data.name}</td>\n                                              <td style={{textAlign: 'right'}}>\n                                                  <b>{(proc.unit * proc.unit_cost).toFixed(2)}</b>\n                                              </td>\n</tr>\n))}\n                                          {invoice.inventory.map(proc => (\n<tr>\n                                              <td style={{maxWidth: 'calc(100% - 60px)'}}>{proc.inventory_item_data.name}</td>\n                                              <td style={{textAlign: 'right'}}>\n                                                  <b>{(proc.unit * proc.unit_cost).toFixed(2)}</b>\n                                              </td>\n</tr>\n))}\n                                          {invoice.reservation ? (\n                                              <tr>\n                                                  <td style={{maxWidth: 'calc(100% - 60px)'}}>{invoice.type}</td>\n                                                  <td style={{textAlign: 'right'}}>\n                                                      <b>{invoice.reservation_data.bed_package_price ? invoice.reservation_data.bed_package_price.toFixed(2) : null}</b>\n                                                  </td>\n                                              </tr>\n                                            ) : null}\n\n                                          {invoice.reservation_data && invoice.reservation_data.medicines ? (\n<>\n                                                  {invoice.reservation_data.medicines.map(item => (\n<tr>\n                                                      <td style={{maxWidth: 'calc(100% - 60px)'}}>{item.name}</td>\n                                                      <td style={{textAlign: 'right'}}><b>{item.final_price.toFixed(2)}</b>\n                                                      </td>\n</tr>\n))}\n</>\n)\n                                              : null}\n                                          </tbody>\n                                      </table>\n                                      <Divider style={{margin: 0}} />\n                                      <table style={{width: '100%'}}>\n                                          <tbody>\n                                          <tr>\n                                              <td style={{maxWidth: 'calc(100% - 60px)'}}>Invoice Amount</td>\n                                              <td style={{textAlign: 'right'}}><b>{invoice.total.toFixed(2)}</b></td>\n                                          </tr>\n                                          <tr>\n                                              <td style={{maxWidth: 'calc(100% - 60px)'}}>Paid Amount</td>\n                                              <td style={{textAlign: 'right'}}>\n                                                  <b>{invoice.payments_data ? invoice.payments_data.toFixed(2) : 0}</b>\n                                              </td>\n                                          </tr>\n                                          <tr>\n                                              <td style={{maxWidth: 'calc(100% - 60px)'}}><b>Amount Due</b></td>\n                                              <td style={{textAlign: 'right'}}>\n                                                  <b>{(invoice.total - invoice.payments_data).toFixed(2)}</b>\n                                              </td>\n                                          </tr>\n                                          </tbody>\n                                      </table>\n\n                                  </Card>\n                                ))}\n                        />\n                    </Col>\n                </Row>\n            </Spin>\n</div>\n)\n    }\n}\n\nexport default AddPaymentForm;\n","import React from \"react\";\nimport {Button, Card, Form, Icon, Input, Modal} from \"antd\";\nimport {CANCELINVOICE_RESENT_OTP, CANCELINVOICE_VERIFY_OTP} from \"../../../constants/api\";\nimport {getAPI, postAPI} from \"../../../utils/common\";\n\nclass EditPaymentModal extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            otpSent:this.props.otpSent,\n            editPaymentVisible: this.props.editPaymentVisible,\n            cancelPaymentVisible:this.props.cancelPaymentVisible,\n\n\n        };\n        this.editPaymentData = this.editPaymentData.bind(this);\n    }\n\n    handleSubmitEditPayment = (e) => {\n        const that = this;\n        e.preventDefault();\n        this.props.form.validateFields((err, values) => {\n            if (!err) {\n                const reqData = {\n                    ...values,\n                    practice: this.props.active_practiceId,\n                }\n                const successFn = function (data) {\n                    that.setState({\n                        editPaymentVisible: false,\n                    });\n                    that.editPaymentData(that.props.editPayment);\n                    that.props.editPaymentClose();\n                };\n                const errorFn = function () {\n\n                };\n                postAPI(CANCELINVOICE_VERIFY_OTP, reqData, successFn, errorFn);\n            }\n        });\n    };\n\n    editPaymentData = (record) => {\n        const that = this;\n        that.props.history.push(`/patient/${  record.patient  }/billing/payments/edit/`);\n    };\n\n\n    sendOTP() {\n        const that = this;\n        const successFn = function (data) {\n\n        };\n        const errorFn = function () {\n\n        };\n        getAPI(CANCELINVOICE_RESENT_OTP, successFn, errorFn);\n    }\n\n    render() {\n        const that = this;\n        const {getFieldDecorator} = that.props.form;\n        return(\n            <Modal\n              visible={(that.state.editPaymentVisible && that.props.editPayment && that.props.editPayment.id == that.props.payment.id)}\n              title=\"Edit Invoice\"\n              footer={null}\n              onOk={that.handleSubmitEditPayment}\n              onCancel={that.props.editPaymentClose}\n            >\n                <Form>\n                    <Form.Item>\n                        {getFieldDecorator('otp', {\n                            rules: [{required: true, message: 'Please input Otp!'}],\n                        })(\n                            <Input\n                              prefix={<Icon type=\"user\" style={{color: 'rgba(0,0,0,.25)'}} />}\n                              placeholder=\"Otp\"\n                            />,\n                        )}\n                    </Form.Item>\n                    <Form.Item>\n                        {that.props.otpSent ? (\n<a style={{float: 'right'}} type=\"primary\" onClick={that.sendOTP}>\n                            Resend Otp ?\n</a>\n) : null}\n                        <Button size=\"small\" type=\"primary\" htmlType=\"submit\" onClick={that.handleSubmitEditPayment}>\n                            Submit\n                        </Button>&nbsp;\n                        <Button size=\"small\" onClick={that.props.editPaymentClose}>\n                            Close\n                        </Button>\n                    </Form.Item>\n                </Form>\n            </Modal>\n        )\n    }\n\n\n}\nexport default Form.create()(EditPaymentModal);\n","import React from \"react\";\nimport {Button, Card, Form, Icon, Input, Modal} from \"antd\";\nimport moment from \"moment\";\nimport {\n    CANCELINVOICE_RESENT_OTP,\n    CANCELINVOICE_VERIFY_OTP,\n    SINGLE_INVOICES_API, SINGLE_PAYMENT_API\n} from \"../../../constants/api\";\nimport {displayMessage, getAPI, interpolate, postAPI, putAPI} from \"../../../utils/common\";\nimport {SUCCESS_MSG_TYPE, OTP_DELAY_TIME} from \"../../../constants/dataKeys\";\nimport { REQUIRED_FIELD_MESSAGE } from \"../../../constants/messages\";\n\nconst TextArea =Input;\nclass CancelPaymentModal extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            cancelPaymentVisible: this.props.cancelPaymentVisible,\n            otpSent:this.props.otpSent,\n            otpField:false,\n\n        };\n    }\n\n    componentDidMount(){\n        const that =this;\n        const created_time = moment().diff(that.props.editPayment.created_at, 'minutes');\n        if (created_time > OTP_DELAY_TIME) {\n            that.setState({\n                otpField:true,\n            })\n        }\n\n    }\n\n\n    handleSubmitCancelPayment = (e) => {\n        const that = this;\n        e.preventDefault();\n        this.props.form.validateFields((err, values) => {\n            if (!err) {\n                const reqData = {\n                    ...values,\n                    practice: this.props.active_practiceId,\n                }\n                const successFn = function (data) {\n                    that.setState({\n                        cancelPaymentVisible: false,\n                    });\n                    that.deletePayment(that.props.editPayment.patient_data , that.props.editPayment.id, values.cancel_note);\n        \n                };\n                const errorFn = function () {\n\n                };\n                if(that.state.otpField){\n                    postAPI(CANCELINVOICE_VERIFY_OTP, reqData, successFn, errorFn);\n                }else{\n                    that.deletePayment(that.props.editPayment.patient_data, that.props.editPayment.id, values.cancel_note);\n                }\n                \n            }\n        });\n    }\n\n\n\n    deletePayment(patient, payment , cancel_note) {\n        const that = this;\n        console.log(\"log\",patient ,payment, cancel_note)\n        const reqData = {\n            patient: patient.id, \n            is_cancelled: true,\n            cancel_note,\n        };\n        const successFn = function (data) {\n            that.props.cancelPaymentClose();\n            displayMessage(SUCCESS_MSG_TYPE, \"Payment cancelled successfully\")\n            that.props.loadPayments();\n        };\n        const errorFn = function () {\n        };\n        putAPI(interpolate(SINGLE_PAYMENT_API, [payment]), reqData, successFn, errorFn);\n\n    }\n\n\n    sendOTP() {\n        const that = this;\n        const successFn = function (data) {\n\n        };\n        const errorFn = function () {\n\n        };\n        getAPI(CANCELINVOICE_RESENT_OTP, successFn, errorFn);\n    }\n\n    render() {\n        const that = this;\n        const {otpField} = this.state;\n        const {getFieldDecorator} = that.props.form;\n        return(\n            <Modal\n              visible={that.state.cancelPaymentVisible}\n              title=\"Cancel Payment\"\n              footer={null}\n              onOk={that.handleSubmitCancelPayment}\n              onCancel={that.props.cancelPaymentClose}\n\n            >\n                <Form>\n                    <Form.Item key=\"text-area-note\"> \n                        {getFieldDecorator('cancel_note',{\n                            rules:[{required:true, message:REQUIRED_FIELD_MESSAGE}],\n                        })(\n                            <TextArea placeholder=\"cancel notes\" />\n                        )}\n                    </Form.Item>\n\n                    {otpField ? (\n                        <Form.Item key=\"otp\">\n                            {getFieldDecorator('otp', {\n                                rules: [{required: otpField, message: 'Please input Otp!'}],\n                            })(\n                                <Input\n                                  prefix={<Icon type=\"user\" style={{color: 'rgba(0,0,0,.25)'}} />}\n                                  placeholder=\"Otp\"\n                                />,\n                            )}\n                        </Form.Item>\n                      ) :null}\n\n                    <Form.Item key=\"btn\">\n                        {that.state.otpSent ? (\n<a style={{float: 'right'}} type=\"primary\" onClick={that.sendOTP}>\n                            Resend Otp ?\n</a>\n) : null}\n                        <Button size=\"small\" type=\"primary\" htmlType=\"submit\" onClick={that.handleSubmitCancelPayment}>\n                            Submit\n                        </Button>&nbsp;\n                        <Button size=\"small\" onClick={that.props.cancelPaymentClose}>\n                            Close\n                        </Button>\n                    </Form.Item>\n                </Form>\n            </Modal>\n        )\n    }\n\n\n}\nexport default Form.create()(CancelPaymentModal);\n","import React from \"react\";\n\nimport {\n    Alert,\n    Button,\n    Card,\n    Col,\n    Divider,\n    Dropdown,\n    Icon,\n    Menu,\n    Row,\n    Spin,\n    Table,\n    Tag,\n    Tooltip,\n    Form,\n    Input, Statistic\n,Modal} from \"antd\";\nimport moment from \"moment\";\nimport {Link, Redirect} from \"react-router-dom\";\nimport {Route, Switch} from \"react-router\";\nimport * as _ from \"lodash\";\nimport {displayMessage, getAPI, interpolate, putAPI, postAPI} from \"../../../utils/common\";\nimport {\n    PATIENT_PAYMENTS_API,\n    PAYMENT_PDF,\n    SINGLE_PAYMENT_API,\n    CANCELINVOICE_VERIFY_OTP,\n    CANCELINVOICE_GENERATE_OTP,\n    CANCELINVOICE_RESENT_OTP, TREATMENTPLANS_PDF\n} from \"../../../constants/api\";\nimport AddPaymentForm from \"./AddPaymentForm\";\nimport InfiniteFeedLoaderButton from \"../../common/InfiniteFeedLoaderButton\";\nimport {BACKEND_BASE_URL} from \"../../../config/connect\";\nimport {OTP_DELAY_TIME, SUCCESS_MSG_TYPE} from \"../../../constants/dataKeys\";\n\nimport EditPaymentModal from \"./EditPaymentModal\";\nimport InvoiceReturnModal from \"../invoices/InvoiceReturnModal\";\nimport CancelPaymentModal from \"./CancelPaymentModal\";\nimport {sendMail} from \"../../../utils/clinicUtils\";\n\nconst {confirm} = Modal;\n\nclass PatientPayments extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            payments: [],\n            active_practiceId: this.props.active_practiceId,\n            loading: true,\n            otpSent: false,\n            editPaymentVisible: false,\n            editPayment: null,\n        }\n\n    }\n\n    componentDidMount() {\n        const that = this;\n        this.loadPayments();\n\n    }\n\n\n    loadPayments = (page = 1) => {\n        const that = this;\n        if (that.props.refreshWallet && page == 1) {\n            that.props.refreshWallet();\n        }\n        this.setState({\n            loading: true\n        });\n        const successFn = function (data) {\n            that.setState(function (prevState) {\n                if (data.current == 1)\n                    return {\n                        payments: [...data.results],\n                        next: data.next,\n                        loading: false\n                    }\n                return {\n                    payments: [...prevState.payments, ...data.results],\n                    next: data.next,\n                    loading: false\n                }\n            })\n        }\n        const errorFn = function () {\n            that.setState({\n                loading: false\n            })\n\n        }\n        const apiParams = {\n            page,\n            practice: this.props.active_practiceId,\n        };\n        if (this.props.match.params.id) {\n            apiParams.patient = this.props.match.params.id;\n        }\n        // if (this.props.showAllClinic && this.props.match.params.id) {\n        //     delete (apiParams.practice)\n        // }\n        getAPI(PATIENT_PAYMENTS_API, successFn, errorFn, apiParams);\n    };\n\n\n    loadPDF = (id) => {\n        const that = this;\n        const successFn = function (data) {\n            if (data.report)\n                window.open(BACKEND_BASE_URL + data.report);\n        };\n        const errorFn = function () {\n\n        };\n        getAPI(interpolate(PAYMENT_PDF, [id]), successFn, errorFn);\n    };\n\n    updateFormValue = (type, value) => {\n        this.setState({\n            [type]: value\n        })\n    };\n\n    mailModalOpen = () => {\n        this.setState({\n            visibleMail: true\n        })\n    };\n\n    mailModalClose = () => {\n        this.setState({\n            visibleMail: false\n        })\n    };\n\n    sendPatientMail = (payment) => {\n        this.mailModalOpen()\n        this.setState({\n            patientName: _.get(payment, 'patient_data.user.first_name'),\n            paymentId: _.get(payment, 'id'),\n            mail_to: _.get(payment, 'patient_data.user.email')\n        })\n\n    };\n\n    sendMailToPatient = () => {\n        const {mail_to, paymentId} = this.state;\n        const apiParams = {\n            mail_to,\n        }\n        sendMail(interpolate(PAYMENT_PDF, [paymentId]), apiParams)\n        this.mailModalClose();\n    }\n\n\n    editModelOpen = (record) => {\n        const that = this;\n\n        const created_time = moment().diff(record.created_at, 'minutes');\n        console.log(\"otp\",created_time);\n        if (created_time > OTP_DELAY_TIME) {\n            that.setState({\n                editPaymentVisible: true,\n                cancelPaymentVisible: false,\n                editPayment: record,\n            });\n            const reqData = {\n                practice: this.props.active_practiceId,\n                type: `${'Payment' + ':'}${  record.payment_id  } ` + `Edit`\n            }\n            const successFn = function (data) {\n                that.setState({\n                    otpSent: true,\n                    patientId: record.patient,\n                    paymentId: record.payment_id\n                })\n            };\n            const errorFn = function () {\n\n            };\n\n            postAPI(CANCELINVOICE_GENERATE_OTP, reqData, successFn, errorFn);\n        } else {\n            that.setState({\n                editPayment: record,\n            }, function () {\n                that.props.history.push(`/patient/${  record.patient  }/billing/payments/edit`)\n            });\n        }\n    };\n\n\n    editPaymentData = (record) => {\n        const that = this;\n        // let id = this.props.match.params.id;\n        that.setState({\n            editPayment: record,\n        }, function () {\n            that.props.history.push(`/patient/${  record.patient  }/billing/payments/edit/`)\n        });\n    };\n    // editPaymentClose = () => {\n    //     this.setState({\n    //         editPaymentVisible: false\n    //     })\n    // };\n    //\n    // handleSubmitEditPayment = (e) => {\n    //     let that = this;\n    //     e.preventDefault();\n    //     this.props.form.validateFields((err, values) => {\n    //         if (!err) {\n    //             let reqData = {\n    //                 ...values,\n    //                 practice: this.props.active_practiceId,\n    //             };\n    //             let successFn = function (data) {\n    //                 that.setState({\n    //                     editPaymentVisible: false,\n    //                 });\n    //                 that.editPaymentData(that.state.editPayment);\n    //\n    //             };\n    //             let errorFn = function () {\n    //\n    //             };\n    //             postAPI(CANCELINVOICE_VERIFY_OTP, reqData, successFn, errorFn);\n    //         }\n    //     });\n    // };\n    // editPaymentData=(record)=>{\n    //     let that =this;\n    //     console.log('\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\">',record);\n    //     that.setState({\n    //         editPayment:record,\n    //     },function () {\n    //         that.props.history.push(\"/patient/\" + record.patient + \"/billing/payments/edit\")\n    //     });\n    //\n    // };\n\n    cancelModalOpen = (record) => {\n        const that = this;\n        const created_time = moment().diff(record.created_at, 'minutes');\n        console.log(\"otp\",created_time,OTP_DELAY_TIME, record);\n        console.log(created_time>OTP_DELAY_TIME)\n            that.setState({\n                editPaymentVisible: false,\n                cancelPaymentVisible: true,\n                editPayment: record,\n            });\n            const reqData = {\n                practice: this.props.active_practiceId,\n                type: `${'Payment' + ':'}${  record.payment_id  } ` + ` Cancellation`\n            }\n            const successFn = function (data) {\n                that.setState({\n                    otpSent: true,\n                    patientId: record.patient,\n                    paymentId: record.id\n                })\n            }\n            const errorFn = function () {\n\n            };\n            if (created_time > OTP_DELAY_TIME) {\n                postAPI(CANCELINVOICE_GENERATE_OTP, reqData, successFn, errorFn);\n            } \n    };\n\n    deletePayment(patient, payment) {\n        const that = this;\n        const reqData = {patient, is_cancelled: true};\n        const successFn = function (data) {\n            displayMessage(SUCCESS_MSG_TYPE, \"Payment cancelled successfully\")\n            that.loadPayments();\n        };\n        const errorFn = function () {\n        };\n        putAPI(interpolate(SINGLE_PAYMENT_API, [payment]), reqData, successFn, errorFn);\n\n    }\n\n\n    editPaymentClose = () => {\n        this.setState({\n            editPaymentVisible: false\n        })\n    };\n\n    cancelPaymentClose = () => {\n        this.setState({\n            cancelPaymentVisible: false\n        })\n    }\n\n\n    render() {\n        const that = this;\n        const paymentmodes = {}\n        if (this.state.paymentModes) {\n            this.state.paymentModes.forEach(function (mode) {\n                paymentmodes[mode.id] = mode.mode;\n            })\n        }\n\n\n        if (this.props.match.params.id) {\n            return (\n<div>\n                <Switch>\n                    <Route\n                      exact\n                      path='/patient/:id/billing/payments/add'\n                      render={(route) => (\n<AddPaymentForm\n  {...this.state}\n  {...route}\n  {...this.props}\n  loadData={this.loadPayments}\n/>\n)}\n                    />\n                    <Route\n                      exact\n                      path='/patient/:id/billing/payments/edit'\n                      render={(route) => (that.state.editPayment ? (\n                               <AddPaymentForm\n                                 {...this.state}\n                                 {...route}\n                                 {...this.props}\n                                 paymentId={this.state.paymentId}\n                                 loadData={this.loadPayments}\n                               />\n                             ) :\n                               <Redirect to={`/patient/${  route.match.params.id  }/billing/payments`} />)}\n                    />\n                    <Route>\n                        <div>\n                            <Alert\n                              banner\n                              showIcon\n                              type=\"info\"\n                              message=\"The payments shown are only for the current selected practice!\"\n                            />\n                            <Card\n                              bodyStyle={{padding: 0}}\n                              title={this.state.currentPatient ? `${this.state.currentPatient.name  } Payments` : \"Payments\"}\n                              extra={(\n<Button.Group>\n                                    <Link\n                                      to={`/patient/${  this.props.match.params.id  }/billing/payments/add`}\n                                    ><Button><Icon\n                                      type=\"plus\"\n                                    />Add\n                                     </Button>\n                                    </Link>\n</Button.Group>\n)}\n                            />\n                            {this.state.payments.map(payment => PaymentCard(payment, this))}\n                            <Spin spinning={this.state.loading}>\n                                <Row />\n                            </Spin>\n                            <InfiniteFeedLoaderButton\n                              loaderFunction={() => this.loadPayments(that.state.next)}\n                              loading={this.state.loading}\n                              hidden={!this.state.next}\n                            />\n                        </div>\n                    </Route>\n                </Switch>\n                <Modal\n                  title={null}\n                  visible={this.state.visibleMail}\n                  onOk={this.sendMailToPatient}\n                  onCancel={this.mailModalClose}\n                  footer={[\n                        <Button key=\"back\" onClick={this.mailModalClose}>\n                            Cancel\n                        </Button>,\n                        <Button key=\"submit\" type=\"primary\" onClick={this.sendMailToPatient}>\n                            Send\n                        </Button>,\n                    ]}\n                >\n                    <p>Send Payment To {this.state.patientName} ?</p>\n                    <Input\n                      value={that.state.mail_to}\n                      placeholder=\"Email\"\n                      onChange={(e) => that.updateFormValue('mail_to', e.target.value)}\n                    />\n                </Modal>\n\n                {that.state.cancelPaymentVisible ? (\n                    <CancelPaymentModal\n                      {...that.state}\n                      key=\"cancel_payment\"\n                      cancelPaymentClose={that.cancelPaymentClose}\n                      loadPayments={that.loadPayments}\n                    />\n                  ):null}\n\n</div>\n)\n        } \n            return (\n<div>\n                <Card\n                  bodyStyle={{padding: 0}}\n                  title={this.state.currentPatient ? `${this.state.currentPatient.name  } Payments` : \"Payments\"}\n                  extra={(\n<Button.Group>\n                        {/* onClick={() => this.props.togglePatientListModal(true)} */}\n                        <Button type=\"primary\" onClick={() => this.props.togglePatientListModal(true)}>\n                            <Icon type=\"plus\" />Add\n                        </Button>\n</Button.Group>\n)}\n                />\n                {this.state.payments.map(payment => PaymentCard(payment, this))}\n                <Spin spinning={this.state.loading}>\n                    <Row />\n                </Spin>\n                <InfiniteFeedLoaderButton\n                  loaderFunction={() => this.loadPayments(that.state.next)}\n                  loading={this.state.loading}\n                  hidden={!this.state.next}\n                />\n                <Modal\n                  title={null}\n                  visible={this.state.visibleMail}\n                  onOk={this.sendMailToPatient}\n                  onCancel={this.mailModalClose}\n                  footer={[\n                        <Button key=\"back\" onClick={this.mailModalClose}>\n                            Cancel\n                        </Button>,\n                        <Button key=\"submit\" type=\"primary\" onClick={this.sendMailToPatient}>\n                            Send\n                        </Button>,\n                    ]}\n                >\n                    <p>Send Payment To {this.state.patientName} ?</p>\n                    <Input\n                      value={that.state.mail_to}\n                      placeholder=\"Email\"\n                      onChange={(e) => that.updateFormValue('mail_to', e.target.value)}\n                    />\n                </Modal>\n\n                {that.state.cancelPaymentVisible ? (\n                    <CancelPaymentModal\n                      {...that.state}\n                      key=\"cancel_payment\"\n                      cancelPaymentClose={that.cancelPaymentClose}\n                      loadPayments={that.loadPayments}\n                    />\n                  ):null}\n\n</div>\n)\n        \n\n    }\n}\n\nexport default Form.create()(PatientPayments);\n\nconst columns = [{\n    title: 'INVOICE',\n    dataIndex: 'invoice_id',\n    key: 'invoice',\n    render: invoice => <span>{invoice}</span>,\n}, {\n    title: 'Amount Paid',\n    key: 'pay_amount',\n    dataIndex: 'pay_amount',\n    render: value => value ? value.toFixed(2) : 0,\n}];\n\nfunction PaymentCard(payment, that) {\n    const {getFieldDecorator} = that.props.form;\n    const advancePay = [];\n    if (payment.is_advance) {\n        advancePay.push({\n            invoice_id: \"Advance Payment\",\n            pay_amount: payment.advance_value\n        })\n    }\n    return (\n<Card\n  style={{marginTop: 10}} \n  key={payment.id}\n  bodyStyle={{padding: 0}}\n  title={(payment.patient_data && !that.props.currentPatient ? (\n                     <small>{payment.date ? moment(payment.date).format('lll') : null}\n                         <Link to={`/patient/${  payment.patient_data.id  }/billing/payments`}>\n                             &nbsp;&nbsp; {payment.patient_data.user.first_name} (ID: {payment.patient_data.custom_id ? payment.patient_data.custom_id : payment.patient_data.id})&nbsp;\n                         </Link>\n                         <span>, {payment.patient_data.gender}</span>\n                     </small>\n                   )\n                     : <small>{payment.created_at ? moment(payment.created_at).format('lll') : null}</small>)}\n  extra={(\n<Dropdown.Button\n  size=\"small\"\n  style={{float: 'right'}}\n  overlay={(\n<Menu>\n                         <Menu.Item\n                           key=\"2\"\n                           onClick={() => that.editModelOpen(payment)}\n                           disabled={(payment.practice != that.props.active_practiceId)}\n                         >\n                             <Icon type=\"edit\" />\n                             Edit\n                         </Menu.Item>\n                         <Menu.Item\n                           key=\"3\"\n                           onClick={() => that.cancelModalOpen(payment)}\n                           disabled={(payment.practice != that.props.active_practiceId) || payment.is_cancelled}\n                         >\n                             <Icon type=\"delete\" />\n                             Cancel\n                         </Menu.Item>\n                         <Menu.Divider />\n                         <Menu.Item key=\"4\">\n                             <Link to={`/patient/${  payment.patient  }/emr/timeline`}>\n                                 <Icon type=\"clock-circle\" />\n                                 Patient Timeline\n                             </Link>\n                         </Menu.Item>\n\n                         <Menu.Divider />\n                         <Menu.Item key=\"4\">\n                             <a onClick={() => that.sendPatientMail(payment)}><Icon\n                               type=\"mail\"\n                             /> Send mail to patient\n                             </a>\n                         </Menu.Item>\n\n</Menu>\n)}\n>\n                     <a onClick={() => that.loadPDF(payment.id)}><Icon\n                       type=\"printer\"\n                     />\n                     </a>\n</Dropdown.Button>\n)}\n>\n\n\n        <Row gutter={8}>\n            <Col xs={24} sm={24} md={6} lg={4} xl={4} xxl={4} style={{padding: 10}}>\n                {payment.is_cancelled ?\n                    <Alert message=\"Cancelled\" type=\"error\" showIcon /> : null}\n                <Divider style={{marginBottom: 0}}>{payment.payment_id}</Divider>\n\n            </Col>\n            <Col xs={24} sm={24} md={18} lg={20} xl={20} xxl={20}>\n\n                <Table\n                  columns={columns}\n                  pagination={false}\n                  footer={() => PaymentFooter({practice: payment.practice_data, notes: payment.notes, cancel_note : payment.cancel_note})}\n                  dataSource={[...payment.invoices, ...advancePay]}\n                  rowKey={payment.id}\n                />\n            </Col>\n        </Row>\n\n        {that.state.editPaymentVisible && that.state.otpSent && (\n        <EditPaymentModal\n          {...that.state}\n          payment={payment}\n          editPaymentClose={that.editPaymentClose}\n          key={payment.id}\n          editPaymentData={that.editPaymentData}\n          {...that.props}\n        />\n      )}\n\n        \n\n</Card>\n)\n}\n\nfunction PaymentFooter(presc) {\n    if (presc) {\n        return (\n<p>\n            {presc.doctor ? (\n<Tooltip title=\"Doctor\"><Tag color={presc.doctor ? presc.doctor.calendar_colour : null}>\n                <b>{`prescribed by  ${  presc.doctor.user.first_name}`} </b>\n                        </Tag>\n</Tooltip>\n) : null}\n            {presc.practice ? (\n<Tag style={{float: 'right'}}>\n                <Tooltip title=\"Practice Name\">\n                    <b>{presc.practice.name} </b>\n                </Tooltip>\n</Tag>\n) : null}\n            {presc.notes ? <p>Notes: {presc.notes}</p> : null}\n            {presc.cancel_note ? <p>Cancel Notes: {presc.cancel_note}</p> : null}\n</p>\n)\n    }\n    return null\n}\n","import React from \"react\";\nimport {\n    Affix,\n    Alert,\n    Card,\n    Col,\n    Divider,\n    Modal,\n    Row,\n    Spin,\n    Statistic,\n    Table,\n    Tag,\n    Tooltip,\n    Form,\n    Menu,\n    Icon,\n    Button,\n    Dropdown,\n    Input,\n} from \"antd\";\nimport moment from \"moment\";\nimport {Route, Switch} from \"react-router\";\nimport {Link, Redirect} from \"react-router-dom\";\nimport * as _ from \"lodash\";\nimport {displayMessage, getAPI, interpolate, putAPI, postAPI} from \"../../../utils/common\";\nimport {\n    INVOICE_RETURN_API,\n    DRUG_CATALOG,\n    PROCEDURE_CATEGORY,\n    TAXES,\n    RETURN_INVOICE_PDF_API,\n    SINGLE_RETURN_API,\n    CANCELINVOICE_GENERATE_OTP,\n    CANCELINVOICE_RESENT_OTP,\n    CANCELINVOICE_VERIFY_OTP, INVOICE_PDF_API\n} from \"../../../constants/api\";\nimport InfiniteFeedLoaderButton from \"../../common/InfiniteFeedLoaderButton\";\nimport {BACKEND_BASE_URL} from \"../../../config/connect\";\nimport {SUCCESS_MSG_TYPE, OTP_DELAY_TIME} from \"../../../constants/dataKeys\";\nimport {sendMail} from \"../../../utils/clinicUtils\";\nimport { REQUIRED_FIELD_MESSAGE } from \"../../../constants/messages\";\n\n\nconst { TextArea } = Input;\nclass ReturnInvoices extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            currentPatient: this.props.currentPatient,\n            active_practiceId: this.props.active_practiceId,\n            returnInvoices: [],\n            drug_catalog: null,\n            procedure_category: null,\n            taxes_list: null,\n            loading: true,\n            cancelReturnIncoiceVisible:false,\n            otpField:false,\n        }\n        this.loadReturnInvoices = this.loadReturnInvoices.bind(this);\n        this.loadDrugCatalog = this.loadDrugCatalog.bind(this);\n        this.loadProcedureCategory = this.loadProcedureCategory.bind(this);\n        this.loadTaxes = this.loadTaxes.bind(this);\n\n    }\n\n    componentDidMount() {\n        const that =this\n        that.loadReturnInvoices();\n       \n    }\n\n    loadReturnInvoices(page = 1) {\n        const that = this;\n        if (that.props.refreshWallet && page==1){\n            that.props.refreshWallet();\n        }\n        that.setState({\n            loading: true\n        });\n        const successFn = function (data) {\n            if (data.current == 1) {\n                that.setState({\n                    total: data.count,\n                    returnInvoices: data.results,\n                    loading: false,\n                    loadMoreReturnInvoice: data.next\n                })\n            } else {\n                that.setState(function (prevState) {\n                    return {\n                        total: data.count,\n                        returnInvoices: [...prevState.returnInvoices, ...data.results],\n                        loading: false,\n                        loadMoreReturnInvoice: data.next\n                    }\n                })\n            }\n        }\n        const errorFn = function () {\n            that.setState({\n                loading: false\n            })\n\n        }\n        const apiParams = {\n            page,\n            practice: this.props.active_practiceId,\n        };\n        if (this.props.match.params.id) {\n            apiParams.patient = this.props.match.params.id;\n        }\n        // if (this.props.showAllClinic && this.props.match.params.id) {\n        //     delete (apiParams.practice)\n        // }\n        getAPI(INVOICE_RETURN_API, successFn, errorFn, apiParams);\n    }\n\n    loadDrugCatalog() {\n        const that = this;\n        const successFn = function (data) {\n            that.setState({\n                drug_catalog: data,\n            })\n        }\n        const errorFn = function () {\n\n        }\n        getAPI(interpolate(DRUG_CATALOG, [this.props.active_practiceId]), successFn, errorFn)\n    }\n\n    loadProcedureCategory() {\n        const that = this;\n        const successFn = function (data) {\n            that.setState({\n                procedure_category: data,\n            })\n        }\n        const errorFn = function () {\n\n\n        }\n        getAPI(interpolate(PROCEDURE_CATEGORY, [this.props.active_practiceId]), successFn, errorFn);\n    }\n\n    loadTaxes() {\n        const that = this;\n        const successFn = function (data) {\n            that.setState({\n                taxes_list: data,\n            })\n        };\n        const errorFn = function () {\n        };\n        getAPI(interpolate(TAXES, [this.props.active_practiceId]), successFn, errorFn);\n\n    }\n\n\n\n    loadPDF = (id) => {\n        const that = this;\n        const successFn = function (data) {\n            if (data.report)\n                window.open(BACKEND_BASE_URL + data.report);\n        }\n        const errorFn = function () {\n\n        }\n        getAPI(interpolate(RETURN_INVOICE_PDF_API, [id]), successFn, errorFn);\n    }\n\n\n    updateFormValue =(type,value)=>{\n        this.setState({\n            [type]: value\n        })\n    };\n\n    mailModalOpen =() =>{\n        this.setState({\n            visibleMail:true\n        })\n    };\n\n    mailModalClose =() =>{\n        this.setState({\n            visibleMail:false\n        })\n    };\n\n    sendPatientMail =(invoice)=>{\n        this.mailModalOpen()\n        this.setState({\n            patientName:_.get(invoice,'patient_data.user.first_name'),\n            paymentId:_.get(invoice,'id'),\n            mail_to:_.get(invoice,'patient_data.user.email')\n        })\n\n    };\n\n    sendMailToPatient =()=>{\n        const {mail_to ,paymentId } = this.state;\n        const apiParams ={\n            mail_to,\n        }\n        sendMail(interpolate(RETURN_INVOICE_PDF_API,[paymentId]),apiParams)\n        this.mailModalClose();\n    }\n\n    cancelModalOpen = (record) => {\n        const that = this;\n        const created_time=moment().diff(record.created_at,'minutes');\n            if(created_time>OTP_DELAY_TIME){\n                that.setState({\n                    otpField:true\n                })\n            }\n            that.setState({\n                cancelReturnIncoiceVisible: true,\n                editReturnInvoice: record,\n                patientId:record.patient\n            });\n            const reqData = {\n                practice: this.props.active_practiceId,\n                type: `${'Return Invoice' + ':'}${  record.return_id  } ` + ` Cancellation`\n            }\n            const successFn = function (data) {\n                that.setState({\n                    otpSent: true,\n                    patientId: record.patient,\n                    returnInvoiceId: record.id\n                })\n            }\n            const errorFn = function () {\n\n            };\n            if(created_time >OTP_DELAY_TIME){\n                postAPI(CANCELINVOICE_GENERATE_OTP, reqData, successFn, errorFn);\n            }\n    };\n\n\n    sendOTP() {\n        const that = this;\n        const successFn = function (data) {\n\n        }\n        const errorFn = function () {\n\n        }\n        getAPI(CANCELINVOICE_RESENT_OTP, successFn, errorFn);\n    }\n\n    cancelReturnInvoiceClose = () => {\n        this.setState({\n            cancelReturnIncoiceVisible: false\n        })\n    }\n\n    handleSubmitCancelReturnInvoice = (e) => {\n        const that = this;\n        const created_time=moment().diff(that.state.editReturnInvoice.created_at,'minutes');\n        e.preventDefault();\n        this.props.form.validateFields((err, values) => {\n            if (!err) {\n                const reqData = {\n                    ...values,\n                    practice: this.props.active_practiceId,\n                }\n\n                const successFn = function (data) {\n                    that.setState({\n                        cancelReturnIncoiceVisible: false,\n                        otpField:false,\n                    });\n                    that.deleteReturnInvoice(that.state.patientId, that.state.returnInvoiceId, values.cancel_note)\n                };\n                const errorFn = function () {\n\n                };\n                if(created_time >OTP_DELAY_TIME){\n                    postAPI(CANCELINVOICE_VERIFY_OTP, reqData, successFn, errorFn);\n                }else{\n                    that.deleteReturnInvoice(that.state.patientId, that.state.editReturnInvoice.id, values.cancel_note)\n                }\n            }\n        });\n    }\n\n    // deleteReturnInvoice(patient ,returnInvoiceId)\n    deleteReturnInvoice(patient ,returnInvoiceId ,cancel_note) {\n        const that = this;\n        const reqData = {patient, \n            is_cancelled: true,\n            cancel_note\n        };\n        const successFn = function (data) {\n            displayMessage(SUCCESS_MSG_TYPE, \"Return Invoice cancelled successfully\")\n            that.loadReturnInvoices();\n            that.cancelReturnInvoiceClose();\n        }\n        const errorFn = function () {\n        }\n        putAPI(interpolate(SINGLE_RETURN_API, [returnInvoiceId]), reqData, successFn, errorFn);\n     }\n\n    render() {\n        const that = this;\n        const drugs = {}\n        if (this.state.drug_catalog) {\n\n            this.state.drug_catalog.forEach(function (drug) {\n                drugs[drug.id] = (`${drug.name  },${  drug.strength}`)\n            })\n        }\n        const procedures = {}\n        if (this.state.procedure_category) {\n            this.state.procedure_category.forEach(function (procedure) {\n                procedures[procedure.id] = procedure.name;\n            })\n        }\n\n        const taxesdata = {}\n        if (this.state.taxes_list) {\n            this.state.taxes_list.forEach(function (tax) {\n                taxesdata[tax.id] = tax.name;\n            })\n        }\n        const {getFieldDecorator} = that.props.form;\n\n        if (this.props.match.params.id) {\n            return (\n<div>\n                <Switch>\n                    <Route>\n                        <div>\n                            <Alert\n                              banner\n                              showIcon\n                              type=\"info\"\n                              message=\"The invoices return shown are only for the current selected practice!\"\n                            />\n                            <Affix offsetTop={0}>\n                                <Card\n                                  bodyStyle={{padding: 0}}\n                                  style={{boxShadow: '0 5px 8px rgba(0, 0, 0, 0.09)'}}\n                                  title={(this.state.currentPatient ? `${this.state.currentPatient.user.first_name  } Invoice Return` : \"Invoices Return \") + (this.state.total ? `(Total:${this.state.total})` : '')}\n                                />\n                            </Affix>\n                            {this.state.returnInvoices.map(invoice => InvoiceCard(invoice, that))}\n                            <Spin spinning={this.state.loading}>\n                                <Row />\n                            </Spin>\n                            <InfiniteFeedLoaderButton\n                              loaderFunction={() => this.loadInvoices(this.state.loadMoreInvoice)}\n                              loading={this.state.loading}\n                              hidden={!this.state.loadMoreInvoice}\n                            />\n\n                        </div>\n                    </Route>\n                </Switch>\n\n                <Modal\n                  title={null}\n                  visible={this.state.visibleMail}\n                  onOk={this.sendMailToPatient}\n                  onCancel={this.mailModalClose}\n                  footer={[\n                        <Button key=\"back\" onClick={this.mailModalClose}>\n                            Cancel\n                        </Button>,\n                        <Button key=\"submit\" type=\"primary\" onClick={this.sendMailToPatient}>\n                            Send\n                        </Button>,\n                    ]}\n                >\n                    <p>Send invoice To {this.state.patientName} ?</p>\n                    <Input\n                      value={that.state.mail_to}\n                      placeholder=\"Email\"\n                      onChange={(e)=>that.updateFormValue('mail_to',e.target.value)}\n                    />\n                </Modal>\n\n                <Modal\n                  visible={that.state.cancelReturnIncoiceVisible}\n                  title=\"Cancel Return Invoice\"\n                  footer={null}\n                  onOk={that.handleSubmitCancelReturnInvoice}\n                  onCancel={that.cancelReturnInvoiceClose}\n                >\n                    <Form>\n                        <Form.Item key=\"cancel_notes\">\n                            {getFieldDecorator('cancel_note',{\n                                rules:[{required:true, message:REQUIRED_FIELD_MESSAGE}],\n                            })(\n                                <TextArea placeholder=\"cancel notes\" />\n                            )}\n                        </Form.Item>\n                        {that.state.otpField && (\n                            <Form.Item>\n                                {getFieldDecorator('otp', {\n                                    rules: [{required: true, message: 'Please input Otp!'}],\n                                })(\n                                    <Input\n                                      prefix={<Icon type=\"user\" style={{color: 'rgba(0,0,0,.25)'}} />}\n                                      placeholder=\"Otp\"\n                                    />,\n                                )}\n                            </Form.Item>\n                          )}\n                        <Form.Item>\n                            {that.state.otpSent ? (\n<a style={{float: 'right'}} type=\"primary\" onClick={that.sendOTP}>\n                                Resend Otp ?\n</a>\n) : null}\n                            <Button size=\"small\" type=\"primary\" htmlType=\"submit\" onClick={that.handleSubmitCancelReturnInvoice}>\n                                Submit\n                            </Button>&nbsp;\n                            <Button size=\"small\" onClick={that.cancelReturnInvoiceClose}>\n                                Close\n                            </Button>\n                        </Form.Item>\n                    </Form>\n                </Modal>\n\n</div>\n)\n        } \n            return (\n<div>\n                <Affix offsetTop={0}>\n                    <Card\n                      bodyStyle={{padding: 0}}\n                      style={{boxShadow: '0 5px 8px rgba(0, 0, 0, 0.09)'}}\n                      title={(this.state.currentPatient ? `${this.state.currentPatient.user.first_name  } Invoice Return` : \"Invoice Return \") + (this.state.total ? `(Total:${this.state.total})` : '')}\n                    />\n                </Affix>\n                {this.state.returnInvoices.map(invoice => InvoiceCard(invoice, that))}\n                <Spin spinning={this.state.loading}>\n                    <Row />\n                </Spin>\n                <InfiniteFeedLoaderButton\n                  loaderFunction={() => this.loadInvoices(this.state.loadMoreInvoice)}\n                  loading={this.state.loading}\n                  hidden={!this.state.loadMoreInvoice}\n                />\n\n                <Modal\n                  title={null}\n                  visible={this.state.visibleMail}\n                  onOk={this.sendMailToPatient}\n                  onCancel={this.mailModalClose}\n                  footer={[\n                        <Button key=\"back\" onClick={this.mailModalClose}>\n                            Cancel\n                        </Button>,\n                        <Button key=\"submit\" type=\"primary\" onClick={this.sendMailToPatient}>\n                            Send\n                        </Button>,\n                    ]}\n                >\n                    <p>Send invoice To {this.state.patientName} ?</p>\n                    <Input\n                      value={that.state.mail_to}\n                      placeholder=\"Email\"\n                      onChange={(e)=>that.updateFormValue('mail_to',e.target.value)}\n                    />\n                </Modal>\n\n                <Modal\n                  visible={that.state.cancelReturnIncoiceVisible}\n                  title=\"Cancel Return Invoice\"\n                  footer={null}\n                  onOk={that.handleSubmitCancelReturnInvoice}\n                  onCancel={that.cancelReturnInvoiceClose}\n                >\n                    <Form>\n                        <Form.Item key=\"cancel_notes\">\n                            {getFieldDecorator('cancel_note',{\n                                rules:[{required:true, message:REQUIRED_FIELD_MESSAGE}],\n                            })(\n                                <TextArea placeholder=\"cancel notes\" />\n                            )}\n                        </Form.Item>\n                        {that.state.otpField && (\n                            <Form.Item>\n                                {getFieldDecorator('otp', {\n                                    rules: [{required: true, message: 'Please input Otp!'}],\n                                })(\n                                    <Input\n                                      prefix={<Icon type=\"user\" style={{color: 'rgba(0,0,0,.25)'}} />}\n                                      placeholder=\"Otp\"\n                                    />,\n                                )}\n                            </Form.Item>\n                          )}\n                        <Form.Item>\n                            {that.state.otpSent ? (\n<a style={{float: 'right'}} type=\"primary\" onClick={that.sendOTP}>\n                                Resend Otp ?\n</a>\n) : null}\n                            <Button size=\"small\" type=\"primary\" htmlType=\"submit\" onClick={that.handleSubmitCancelReturnInvoice}>\n                                Submit\n                            </Button>&nbsp;\n                            <Button size=\"small\" onClick={that.cancelReturnInvoiceClose}>\n                                Close\n                            </Button>\n                        </Form.Item>\n                    </Form>\n                </Modal>\n\n</div>\n)\n        \n\n    }\n}\n\nexport default Form.create()(ReturnInvoices);\n\nfunction invoiceFooter(presc) {\n    if (presc) {\n        return (\n<p>\n            {presc.staff ? (\n<Tooltip title=\"Staff\"><Tag color={presc.staff ? presc.staff_data.calendar_colour : null}>\n                <b>{`Return by  ${  presc.staff_data.user.first_name}`} </b>\n                       </Tag>\n</Tooltip>\n) : null}\n            {presc.practice ? (\n<Tag style={{float: 'right'}}>\n                <Tooltip title=\"Practice Name\">\n                    <b>{presc.practice_data.name} </b>\n                </Tooltip>\n</Tag>\n) : null}\n            {presc.notes ? <p>Notes: {presc.notes}</p> : null}\n            {presc.cancel_note ? <p>Cancel Notes: {presc.cancel_note}</p> : null}\n</p>\n)\n    }\n    return null\n}\n\nfunction InvoiceCard(invoice, that) {\n    \n\n    return (\n<Card\n  key={invoice.id}\n  style={{marginTop: 10}}\n  bodyStyle={{padding: 0}}\n  title={(\n<small>{invoice.date ? moment(invoice.date).format('ll') : null}\n            {that.state.currentPatient ? null : (\n<span>\n            <Link to={`/patient/${  invoice.patient_data ? invoice.patient_data.id : null  }/billing/return/invoices`}>\n                &nbsp;&nbsp; {invoice.patient_data ? invoice.patient_data.user.first_name : null} (ID: {invoice.patient_data.custom_id? invoice.patient_data.custom_id :invoice.patient_data.id })&nbsp;\n            </Link>, {invoice.patient_data ? invoice.patient_data.gender : null}\n</span>\n)}\n</small>\n)}\n  extra={(\n<Dropdown.Button\n  size=\"small\"\n  style={{float: 'right'}}\n  overlay={(\n<Menu>\n                {/* <Menu.Item key=\"1\" onClick={() => that.deleteReturnInvoice(invoice)} */}\n                <Menu.Item\n                  key=\"1\"\n                  onClick={() =>that.cancelModalOpen(invoice)}\n                  disabled={(invoice.practice != that.props.active_practiceId) || invoice.payments_data || invoice.is_cancelled}\n                >\n                    <Icon type=\"delete\" />\n                    Cancel\n                </Menu.Item>\n                <Menu.Divider />\n                <Menu.Item key=\"2\">\n                    <a onClick={() => that.sendPatientMail(invoice)}><Icon\n                      type=\"mail\"\n                    /> Send mail to patient\n                    </a>\n                </Menu.Item>\n</Menu>\n)}\n>\n            <a onClick={() => that.loadPDF(invoice.id)}><Icon\n              type=\"printer\"\n            />\n            </a>\n</Dropdown.Button>\n)}\n>\n        <Row gutter={8}>\n            <Col xs={24} sm={24} md={6} lg={4} xl={4} xxl={4} style={{padding: 10}}>\n                {invoice.is_cancelled ?\n                    <Alert message=\"Cancelled\" type=\"error\" showIcon /> : null}\n                <Divider style={{marginBottom: 0}}>{invoice.return_id}</Divider>\n                <Statistic\n                  title=\"Cash / Return \"\n                  value={(invoice.cash_return ? invoice.cash_return.toFixed(2) : 0)}\n                  suffix={`/ ${  invoice.return_value ? invoice.return_value.toFixed(2):0}`}\n                />\n            </Col>\n            <Col xs={24} sm={24} md={18} lg={20} xl={20} xxl={20}>\n\n                    <Table\n                      bordered\n                      pagination={false}\n                      columns={columns}\n                      dataSource={[...invoice.inventory, ...invoice.procedure]}\n                      footer={() => invoiceFooter({...invoice})}\n                    />\n            </Col>\n        </Row>\n\n        \n\n\n</Card>\n)\n}\n\nconst columns = [{\n    title: 'Treatment & Products',\n    dataIndex: 'drug',\n    key: 'drug',\n    render: (text, record) => (\n        <span> <b>{record.name ? record.name : null}</b>\n                    {/* <br/> {record.staff_data ?\n                <Tag color={record.staff_data ? record.staff_data.calendar_colour : null}>\n                    <b>{\"return by  \" + record.staff_data.user.first_name} </b>\n                </Tag> : null} */}\n        </span>\n)\n}, {\n    title: 'Cost',\n    dataIndex: 'unit_cost',\n    key: 'unit_cost',\n    render: (item, record) => <span>{record.unit_cost ? record.unit_cost.toFixed(2) : null}</span>\n}, {\n    title: 'Unit',\n    dataIndex: 'unit',\n    key: 'unit',\n}, {\n    title: 'Discount',\n    dataIndex: 'discount_value',\n    key: 'discount_value',\n    render: (item, record) => <span>{record.discount_value ? record.discount_value.toFixed(2) : null}</span>\n}, {\n    title: 'Tax',\n    dataIndex: 'tax_value',\n    key: 'tax_value',\n    render: (item, record) => <span>{record.tax_value ? record.tax_value.toFixed(2) : null}</span>\n}, {\n    title: 'Total',\n    dataIndex: 'total',\n    key: 'total',\n    render: item => item ? item.toFixed(2) : null\n}];\n","import React from \"react\";\nimport {Card, Table, Row, Button, Icon, Checkbox, Col} from \"antd\";\nimport {Link} from \"react-router-dom\";\nimport {BACKEND_BASE_URL} from \"../../../config/connect\";\nimport {getAPI, interpolate} from \"../../../utils/common\";\nimport {PATIENT_LEDGER} from \"../../../constants/api\";\nimport {\n    patientInvoiceDetailsInString,\n    patientPaymentDetailsInString,\n    patientReturnInvoiceDetailsInString\n} from \"../../../utils/patientUtils\";\n\nclass PatientLedgers extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            loading: false,\n            ledger: [],\n            loadingLedger: false,\n            selectedList: {},\n            credit: 0,\n            debit: 0,\n            balance: 0,\n        }\n    }\n\n    componentDidMount() {\n        this.loadPatientLedger();\n    }\n\n    loadPatientLedger = () => {\n        const that = this;\n        if (that.props.refreshWallet){\n            that.props.refreshWallet();\n        }\n        this.setState({\n            loadingLedger: true\n        })\n        const successFn = function (data) {\n            const ledgerData = [];\n            let balance = 0;\n            let totalCredit = 0;\n            let totalDebit = 0;\n            data.forEach(function (dataRow) {\n                const ledgerEntry = {\n                    date: dataRow.date,\n                    type: dataRow.ledger_type\n                };\n                if (dataRow.ledger_type == 'Invoice') {\n                    ledgerEntry.type_id = dataRow.invoice_id;\n                    ledgerEntry.details = patientInvoiceDetailsInString(dataRow);\n                    ledgerEntry.credit = dataRow.total;\n                    ledgerEntry.debit = 0;\n                    ledgerEntry.return = 0;\n                    ledgerEntry.cash_return = 0;\n\n                } else if (dataRow.ledger_type == 'Payment') {\n                    ledgerEntry.type_id = dataRow.payment_id;\n                    ledgerEntry.details = patientPaymentDetailsInString(dataRow);\n                    if (dataRow.return_pay) {\n                        ledgerEntry.credit = 0;\n                        ledgerEntry.debit = 0;\n                        ledgerEntry.return = -1 * (dataRow.total + dataRow.advance_value);\n                    } else {\n                        ledgerEntry.credit = 0;\n                        ledgerEntry.debit = dataRow.total + dataRow.advance_value;\n                        ledgerEntry.return = 0;\n                    }\n                    ledgerEntry.cash_return = 0;\n\n                } else if (dataRow.ledger_type == 'Return') {\n                    ledgerEntry.type_id = dataRow.return_id;\n                    ledgerEntry.details = patientReturnInvoiceDetailsInString(dataRow);\n                    ledgerEntry.credit = dataRow.cash_return;\n                    ledgerEntry.debit = 0;\n                    ledgerEntry.return = dataRow.return_value;\n                    if(dataRow.with_tax == false){\n                        ledgerEntry.credit += dataRow.taxes;\n                    }\n                    ledgerEntry.cash_return = dataRow.cash_return;\n                }\n                balance += ledgerEntry.credit;\n                balance -= ledgerEntry.debit;\n                totalDebit += ledgerEntry.debit;\n                totalCredit += ledgerEntry.credit;\n                ledgerEntry.balance = balance;\n                ledgerData.push(ledgerEntry);\n            });\n            that.setState({\n                loadingLedger: false,\n                credit: totalCredit,\n                debit: totalDebit,\n                balance,\n                ledger: ledgerData\n            })\n        }\n        const errorFn = function () {\n            that.setState({\n                loadingLedger: false\n            })\n        }\n        const apiParams = {\n            practice_id: this.props.active_practiceId\n        };\n        if (this.props.showAllClinic && this.props.match.params.id) {\n            delete (apiParams.practice)\n        }\n        getAPI(interpolate(PATIENT_LEDGER, [that.props.currentPatient.id]), successFn, errorFn, apiParams);\n    }\n\n    ledgerCompleteToggle(id, option) {\n        this.setState(function (prevState) {\n            return {selectedList: {...prevState.selectedList, [id]: !!option}}\n        });\n    }\n\n    loadPDF = (id) => {\n        const that = this;\n        const successFn = function (data) {\n            if (data.report)\n                window.open(BACKEND_BASE_URL + data.report);\n        }\n        const errorFn = function () {\n\n        }\n        // getAPI(interpolate(INVOICE_PDF_API, [id]), successFn, errorFn);\n    }\n\n    render() {\n        const columns = [\n            //     {\n            //     title: '',\n            //     key: 'is_completed',\n            //     render: (text, record) => (record.is_completed ?\n            //         <Icon type=\"check-circle\" theme=\"twoTone\" style={{marginLeft: '8px', fontSize: '20px'}}/> :\n            //         <Checkbox key={record.id}\n            //                   onChange={(e) => this.ledgerCompleteToggle(record.id, e.target.checked)}\n            //                   value={this.state.selectedList[record.id]}/>)\n            // },\n            {\n                title: 'Date',\n                key: 'date',\n                dataIndex: \"date\",\n                width:120\n            }, {\n                title: 'Invoice/ Receipt/ Return No',\n                key: 'type_id',\n                dataIndex: \"type_id\",\n            }, {\n                title: 'Details',\n                key: 'details',\n                dataIndex: \"details\",\n            }, {\n                title: 'Type',\n                key: 'type',\n                dataIndex: \"type\",\n            }, {\n                title: 'Return(INR)',\n                key: 'return',\n                dataIndex: \"return\",\n                align: \"right\",\n                render: value => value.toFixed(2)\n            }, {\n                title: 'Cash Return(INR)',\n                key: 'cash_return',\n                dataIndex: \"cash_return\",\n                align: \"right\",\n                render: value => value.toFixed(2)\n            }, {\n                title: 'Credit(INR)',\n                key: 'credit',\n                dataIndex: \"credit\",\n                align: \"right\",\n                render: value => value.toFixed(2)\n            }, {\n                title: 'Debit(INR)',\n                key: 'debit',\n                dataIndex: \"debit\",\n                align: \"right\",\n                render: value => value.toFixed(2)\n            }, {\n                title: 'Balance(INR)',\n                key: 'balance',\n                dataIndex: \"balance\",\n                align: \"right\",\n                render: value => value.toFixed(2)\n            }];\n        return (\n<Row>\n            <Card\n              title={this.state.currentPatient ? `${this.state.currentPatient.name  } Payment Ledger` : \"Patient Ledgers\"}\n              extra={(\n<Button.Group>\n                    {/* <Button type=\"primary\"> */}\n                    {/*    <Icon type=\"printer\"/>Print billing summary */}\n                    {/* </Button> */}\n                    <Link to={`/patient/${  this.props.match.params.id  }/billing/payments`}> <Button\n                      type=\"primary\"\n                    >\n                        <Icon type=\"plus\" />&nbsp;Add Payment\n                                                                                              </Button>\n                    </Link>\n\n                    <Link to={`/patient/${  this.props.match.params.id  }/billing/invoices`}> <Button\n                      type=\"primary\"\n                    >\n                        <Icon type=\"plus\" />&nbsp;Add Invoice\n                                                                                              </Button>\n                    </Link>&nbsp;\n\n                    {/* <Button type=\"primary\" onClick={() => this.loadPDF()}> */}\n                    {/*    <Icon type=\"printer\"/>&nbsp;Print */}\n                    {/* </Button>&nbsp; */}\n\n                    {/* <Button type=\"primary\" onClick={this.submitLedgers}> */}\n                    {/*    <Icon type=\"save\"/>Send Payment Reminder */}\n                    {/* </Button> */}\n</Button.Group>\n)}\n            >\n                <Table\n                  loading={this.state.loadingLedger}\n                  columns={columns}\n                  dataSource={this.state.ledger}\n                  pagination={false}\n                />\n                <Row style={{marginTop: 20, textAlign: 'center'}}>\n                    <Col span={8}>\n                        <h3>Total Credit: {this.state.credit.toFixed(2)}</h3>\n                    </Col>\n                    <Col span={8}>\n                        <h3>Total Debit: {this.state.debit.toFixed(2)}</h3>\n                    </Col>\n                    <Col span={8}>\n                        <h3>Total\n                            Balance: {this.state.balance < 0 ? `${(this.state.balance * -1).toFixed(2)  } (Advance)` : this.state.balance.toFixed(2)}\n                        </h3>\n                    </Col>\n                </Row>\n            </Card>\n</Row>\n)\n    }\n}\n\nexport default PatientLedgers;\n","\nexport const patientInvoiceDetailsInString = function (invoiceObj) {\n    let invoiceDetailsString = '';\n    if (invoiceObj.type != \"Invoice\")\n        invoiceDetailsString += `${invoiceObj.type  }, `;\n    if (invoiceObj.procedure)\n        invoiceObj.procedure.forEach(function (proc) {\n            if (proc.procedure_data)\n                invoiceDetailsString += `${proc.procedure_data.name  }, `\n        });\n    if (invoiceObj.inventory)\n        invoiceObj.inventory.forEach(function (proc) {\n            if (proc.inventory_item_data)\n                invoiceDetailsString += `${proc.inventory_item_data.name  }, `\n        });\n    if (invoiceObj.reservation)\n        invoiceDetailsString += `${invoiceObj.type  },`;\n    if (invoiceObj.reservation_data && invoiceObj.reservation_data.medicines)\n        invoiceObj.reservation_data.medicines.forEach(function (proc) {\n            invoiceDetailsString += `${proc.name  },`\n        });\n\n    return invoiceDetailsString.trim(',');\n\n}\n\nexport const patientPaymentDetailsInString = function (paymentObj) {\n    let paymentDetailsString = '';\n    if (paymentObj.invoices)\n        paymentObj.invoices.forEach(function (inv) {\n            if (inv.invoice)\n                paymentDetailsString += `${inv.invoice.invoice_id  }, `\n        })\n    return paymentDetailsString;\n}\n\nexport const patientReturnInvoiceDetailsInString = function (payObj) {\n    let paymentDetailsString = '';\n    if (payObj.procedure)\n        payObj.procedure.forEach(function (proc) {\n            if (proc.procedure_data)\n                paymentDetailsString += `${proc.procedure_data.name  }, `\n        });\n    if (payObj.inventory)\n        payObj.inventory.forEach(function (proc) {\n            paymentDetailsString += `${proc.name  }, `\n        });\n    if (payObj.reservation)\n        paymentDetailsString += `${payObj.type  },`;\n    if (payObj.reservation_data && payObj.reservation_data.medicines)\n        payObj.reservation_data.medicines.forEach(function (proc) {\n            paymentDetailsString += `${proc.name  },`\n        });\n\n    return paymentDetailsString.trim(',');\n\n}\n","import React from \"react\";\nimport {Row, Alert, Card, Col, AutoComplete, List, Avatar, Button, Icon, Spin} from 'antd';\nimport {displayMessage, getAPI, interpolate, makeFileURL, postAPI} from \"../../../utils/common\";\nimport {MERGE_PATIENTS, PATIENT_PROFILE, SEARCH_PATIENT} from \"../../../constants/api\";\nimport {ERROR_MSG_TYPE, SUCCESS_MSG_TYPE} from \"../../../constants/dataKeys\";\n\nexport default class PatientMerge extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            patient_from: null,\n            patient_to: null,\n            loading: false,\n            patientListData: [],\n        }\n\n    }\n\n    searchPatient = (value) => {\n        this.setState({\n            searchPatientString: value\n        })\n        // console.log(e.target.value);\n        const that = this;\n        const successFn = function (data) {\n            if (data) {\n                that.setState({\n                    patientListData: data.results,\n\n                })\n                // console.log(\"list\",that.state.patientListData);\n            }\n        };\n        const errorFn = function () {\n        };\n        if (value){\n            getAPI(interpolate(SEARCH_PATIENT, [value]), successFn, errorFn);\n        }\n\n    };\n\n    removePatient = (type) => {\n        this.setState({\n            [type]: null\n        })\n    };\n\n    handlePatientSelect = (event, type) => {\n        console.log(event);\n        if (event) {\n            const that = this;\n            const successFn = function (data) {\n                that.setState({\n                    [type]: data\n\n                });\n                // console.log(\"event\",that.state.patientDetails);\n            };\n            const errorFn = function () {\n            };\n            getAPI(interpolate(PATIENT_PROFILE, [event]), successFn, errorFn);\n        }\n    }\n\n    mergePatient = () => {\n        this.setState({\n            loading: true\n        })\n        const that = this;\n        const reqData = {\n            patient_from: this.state.patient_from.id,\n            patient_to: this.state.patient_to.id\n        }\n        const successFn = function (data) {\n            displayMessage(SUCCESS_MSG_TYPE, \"Patients Merged Successfully!!\");\n            that.setState({\n                loading: false,\n                patient_from: null,\n                patient_to: null\n            });\n        }\n        const errorFn = function () {\n            displayMessage(ERROR_MSG_TYPE, \"Patients Merging Failed!!\");\n            that.setState({\n                loading: false,\n            })\n        }\n        postAPI(MERGE_PATIENTS, reqData, successFn, errorFn);\n    }\n\n    render() {\n        const that = this;\n        return (\n<div>\n\n            <h2>Merge Patients</h2>\n            <Card>\n                <Alert\n                  message=\"Profile details and records of Patient 1 will be moved to Patient 2. You cannot undo this action once done.\"\n                  type=\"warning\"\n                />\n                <Spin spinning={this.state.loading}>\n\n                    <Row gutter={16} style={{marginTop: 10}}>\n                        <Col span={12} style={{textAlign: 'center'}}>\n                            <h3>Patient 1</h3>\n                            {this.state.patient_from ? (\n                                <Card bordered={false} style={{background: '#ECECEC', textAlign: 'left'}}>\n                                    <Card.Meta\n                                      avatar={(this.state.patient_from.image ? <Avatar src={makeFileURL(this.state.patient_from.image)} /> : (\n                                            <Avatar style={{backgroundColor: '#87d068'}}>\n                                                {this.state.patient_from.user.first_name ? this.state.patient_from.user.first_name.charAt(0) :\n                                                    <Icon type=\"user\" />}\n                                            </Avatar>\n                                          ))}\n\n                                      title={this.state.patient_from.user.first_name}\n                                      description={this.state.patient_from.user.mobile}\n\n                                    />\n\n                                    <Button\n                                      type=\"primary\"\n                                      style={{float: 'right'}}\n                                      onClick={() => this.removePatient('patient_from')}\n                                    >Select Different\n                                        Patient\n                                    </Button>\n                                </Card>\n                              ) : (\n                                <AutoComplete\n                                  placeholder=\"Patient Name\"\n                                  showSearch\n                                  onSearch={this.searchPatient}\n                                  defaultActiveFirstOption={false}\n                                  showArrow={false}\n                                    // value={this.state.patient_from}\n                                  filterOption={false}\n                                  onChange={this.handleChange}\n                                  onSelect={(e) => this.handlePatientSelect(e, 'patient_from')}\n                                >\n                                    {this.state.patientListData.map((option) => (\n<AutoComplete.Option\n  value={option.id.toString()}\n>\n                                        <List.Item style={{padding: 0}}>\n                                            <List.Item.Meta\n                                              avatar={(option.image ? <Avatar src={makeFileURL(option.image)} /> : (\n                                                    <Avatar style={{backgroundColor: '#87d068'}}>\n                                                        {option.user.first_name ? option.user.first_name.charAt(0) :\n                                                            <Icon type=\"user\" />}\n                                                    </Avatar>\n                                                  ))}\n                                              title={`${option.user.first_name  } (${  option.user.id  })`}\n                                              description={<small>{option.user.mobile}</small>}\n                                            />\n\n                                        </List.Item>\n</AutoComplete.Option>\n))}\n                                </AutoComplete>\n                              )}\n                            {/* {this.state.patient_from ? <List.Item style={{padding: 0}}> */}\n                            {/* <List.Item.Meta */}\n                            {/* avatar={<Avatar */}\n                            {/* src=\"https://zos.alipayobjects.com/rmsportal/ODTLcjxAfvqbxHnVXCYX.png\"/>} */}\n                            {/* title={that.state.patient_from.user.first_name + \" (\" + that.state.patient_from.user.id + \")\"} */}\n                            {/* description={<small>{that.state.patient_from.user.mobile}</small>} */}\n                            {/* /> */}\n\n                            {/* </List.Item>:null} */}\n                        </Col>\n                        <Col span={12} style={{textAlign: 'center'}}>\n                            <h3>Patient 2</h3>\n                            {this.state.patient_to ? (\n                                <Card bordered={false} style={{background: '#ECECEC', textAlign: 'left'}}>\n                                    <Card.Meta\n                                      avatar={(this.state.patient_to.image ? <Avatar src={makeFileURL(this.state.patient_to.image)} /> : (\n                                            <Avatar style={{backgroundColor: '#87d068'}}>\n                                                {this.state.patient_to.user.first_name ? this.state.patient_to.user.first_name.charAt(0) :\n                                                    <Icon type=\"user\" />}\n                                            </Avatar>\n                                          ))}\n                                      title={this.state.patient_to.user.first_name}\n                                      description={this.state.patient_to.user.mobile}\n\n                                    />\n\n                                    <Button\n                                      type=\"primary\"\n                                      style={{float: 'right'}}\n                                      onClick={() => this.removePatient('patient_to')}\n                                    >Select Different\n                                        Patient\n                                    </Button>\n                                </Card>\n                              ) : (\n                                <AutoComplete\n                                  placeholder=\"Patient Name\"\n                                  showSearch\n                                  onSearch={this.searchPatient}\n                                  defaultActiveFirstOption={false}\n                                  showArrow={false}\n                                    // value={this.state.patient_from}\n                                  filterOption={false}\n                                  onChange={this.handleChange}\n                                  onSelect={(e) => this.handlePatientSelect(e, 'patient_to')}\n                                >\n                                    {this.state.patientListData.map((option) => (\n<AutoComplete.Option\n  value={option.id.toString()}\n>\n                                        <List.Item style={{padding: 0}}>\n                                            <List.Item.Meta\n                                              avatar={(option.image ? <Avatar src={makeFileURL(option.image)} /> : (\n                                                    <Avatar style={{backgroundColor: '#87d068'}}>\n                                                        {option.user.first_name ? option.user.first_name.charAt(0) :\n                                                            <Icon type=\"user\" />}\n                                                    </Avatar>\n                                                  ))}\n                                              title={`${option.user.first_name  } (${  option.user.id  })`}\n                                              description={<small>{option.user.mobile}</small>}\n                                            />\n\n                                        </List.Item>\n</AutoComplete.Option>\n))}\n                                </AutoComplete>\n                              )}\n                            {/* {this.state.patient_to ? <List.Item style={{padding: 0}}> */}\n                            {/* <List.Item.Meta */}\n                            {/* avatar={<Avatar */}\n                            {/* src=\"https://zos.alipayobjects.com/rmsportal/ODTLcjxAfvqbxHnVXCYX.png\"/>} */}\n                            {/* title={that.state.patient_to.user.first_name + \" (\" + that.state.patient_to.user.id + \")\"} */}\n                            {/* description={<small>{that.state.patient_to.user.mobile}</small>} */}\n                            {/* /> */}\n\n                            {/* </List.Item>:null} */}\n                        </Col>\n                        <Col span={24} style={{textAlign: 'center', marginTop: 30}}>\n                            <Button\n                              disabled={this.state.loading || !this.state.patient_from || !this.state.patient_to}\n                              type=\"primary\"\n                              onClick={this.mergePatient}\n                            >\n                                <Icon type=\"plus\" />Merge Patients\n                            </Button>\n                        </Col>\n                    </Row>\n\n                </Spin>\n            </Card>\n</div>\n)\n    }\n}\n","import React from \"react\";\nimport {Button, Card, Icon} from 'antd';\n\nexport default class PatientRequiredNoticeCard extends React.Component {\n    constructor(props) {\n        super(props);\n    }\n\n    render() {\n        const that = this;\n        return (\n<Card style={{textAlign: 'center'}}>\n            <h2> Please select patient to further continue !!</h2>\n            {this.props.togglePatientListModal ? (\n                <Button type=\"primary\" onClick={() => that.props.togglePatientListModal(true)}><Icon\n                  type=\"user\"\n                /> Select Patient\n                </Button>\n              ) : null}\n</Card>\n)\n    }\n}\n","import React from \"react\";\nimport {Route} from \"react-router\";\nimport {\n    Form,\n    Icon,\n    Input,\n    Button,\n    Checkbox,\n    Card,\n    DatePicker,\n    Radio,\n    Row,\n    Col,\n    Select,\n    TimePicker,\n    Affix,\n    Dropdown,\n    Menu\n} from 'antd';\nimport {Redirect, Link} from 'react-router-dom'\nimport moment from 'moment';\nimport {postAPI, interpolate, displayMessage} from \"../../../utils/common\";\nimport {NOTES} from \"../../../constants/hardData\";\nimport {MEDICAL_CERTIFICATE_API} from \"../../../constants/api\";\nimport {SUCCESS_MSG_TYPE ,ERROR_MSG_TYPE} from \"../../../constants/dataKeys\";\nimport {loadDoctors} from \"../../../utils/clinicUtils\";\n\n\nconst {TextArea} = Input;\nconst {Option} = Select;\n\nclass PatientMedicalCertificate extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            redirect: false,\n            excused_duty_checked: false,\n            fit_light_duty_checked: false,\n            attendance_checked: false,\n            startDate: this.props.value,\n            endDate: new Date(),\n            proof_attendance_from: null,\n            days: 0,\n            practiceDoctors: [],\n            selectedDoctor: {},\n            selectedDate: moment(),\n            value: ''\n        }\n        this.handleChangeStart = this.handleChangeStart.bind(this);\n        this.handleChangeEnd = this.handleChangeEnd.bind(this);\n    }\n\n    componentDidMount() {\n        loadDoctors(this);\n    }\n\n    changeRedirect() {\n        const redirectVar = this.state.redirect;\n        this.setState({\n            redirect: !redirectVar,\n        });\n    }\n\n    handleCheck = (e) => {\n        this.setState({\n            excused_duty_checked: !this.state.excused_duty_checked\n        });\n    }\n\n    handleLighDutyCheck = (e) => {\n        this.setState({\n            fit_light_duty_checked: !this.state.fit_light_duty_checked\n        });\n    }\n\n    onChangeHandle = (e) => {\n        this.setState({\n            value: e.target.value,\n        });\n    }\n\n    handleAttendanceCheck = (e) => {\n        this.setState({\n            attendance_checked: !this.state.attendance_checked\n        });\n    }\n\n    handleChangeStart = (date) => {\n        this.setState({\n            startDate: date\n        });\n\n    }\n\n    handleChangeEnd(date) {\n        this.setState({\n            endDate: date\n        });\n    }\n\n    // totalDays(){\n    //     let {startDate, endDate} = this.state;\n    //     let amount = endDate.diff(startDate ,\"days\");\n    //     this.setState({\n    //     days: amount\n    //     });\n    // }\n\n    onChange = (timeString) => {\n        this.setState({\n            proof_attendance_from: timeString\n        });\n    }\n\n    selectedDate = (date) => {\n        this.setState({\n            selectedDate: date\n        })\n    }\n\n    selectDoctor = (doctor) => {\n        this.setState({\n            selectedDoctor: doctor\n        })\n    }\n\n    handleSubmit = (e) => {\n        const that = this;\n        e.preventDefault();\n        this.props.form.validateFields((err, values) => {\n\n            if(values.excused_duty || values.fit_light_duty || values.proof_attendance){\n                if (!err) {\n                    const reqData = {\n                        ...values,\n                        doctor: that.state.selectedDoctor.id,\n                        practice: that.props.active_practiceId,\n                        date: that.state.selectedDate && moment(that.state.selectedDate).isValid() ? that.state.selectedDate.format('YYYY-MM-DD') : null,\n                        excused_duty_from: moment(values.excused_duty_from).format(\"YYYY-MM-DD\"),\n                        excused_duty_to: moment(values.excused_duty_to).format(\"YYYY-MM-DD\"),\n                        fit_light_duty_from: moment(values.fit_light_duty_from).format(\"YYYY-MM-DD\"),\n                        fit_light_duty_to: moment(values.fit_light_duty_to).format(\"YYYY-MM-DD\"),\n                        proof_attendance_date: moment(values.proof_attendance_date).format(\"YYYY-MM-DD\"),\n                        proof_attendance_from: moment(values.proof_attendance_from).format('LT'),\n                        proof_attendance_to: moment(values.proof_attendance_to).format('LT'),\n                        patient: that.props.match.params.id,\n                        is_active: true,\n                        valid_court:false,\n                        invalid_court:false,\n                        no_mention:false\n                    };\n                    if(values.group)\n                        reqData[values.group] = true\n                    delete reqData.group;\n                    const successFn = function (data) {\n                        displayMessage(SUCCESS_MSG_TYPE, \"Medical Certificate Generated.\");\n                        that.props.history.replace(`/patient/${  that.props.match.params.id  }/emr/files`);\n                    }\n                    const errorFn = function () {\n                        that.setState({});\n                    }\n                    postAPI(interpolate(MEDICAL_CERTIFICATE_API, [this.props.currentPatient.id]), reqData, successFn, errorFn);\n                }\n            }else{\n               displayMessage(ERROR_MSG_TYPE,\"Please select at least one of the above options\");\n            }\n\n        });\n    }\n\n    render() {\n        const {getFieldDecorator} = this.props.form;\n        const formItemLayout = {\n            labelCol: {\n                xs: {span: 24},\n                sm: {span: 8},\n                md: {span: 8},\n                lg: {span: 8},\n            },\n            wrapperCol: {\n                xs: {span: 24},\n                sm: {span: 16},\n                md: {span: 16},\n                lg: {span: 16},\n            },\n        };\n        const that = this;\n        const radioOption = NOTES.map((option) => <Radio value={option.value}>{option.label}</Radio>)\n        return (\n<Form onSubmit={this.handleSubmit} {...formItemLayout}>\n                <Card\n                  title=\"ADD MEDICAL LEAVE CERTIFICATE\"\n                  extra={(\n<Button.Group>\n                          <Button type=\"primary\" htmlType=\"submit\">Save Certificate</Button>\n</Button.Group>\n)}\n                >\n\n\n                    <Form.Item>\n                        {getFieldDecorator('excused_duty', {})(\n                            (<Checkbox onClick={this.handleCheck} defaultChecked={this.state.excused_duty_checked}>Excused\n                                from duty\n                             </Checkbox>),\n                        )}\n                    </Form.Item>\n                    {this.state.excused_duty_checked ? (\n                        <Row>\n                            <Col span={6} offset={6}>\n                                <Form.Item label=\"From\">\n                                    {getFieldDecorator('excused_duty_from', {})\n                                    (\n                                        <DatePicker />\n                                    )}\n                                </Form.Item>\n\n                                <Form.Item label=\"till\">\n                                    {getFieldDecorator('excused_duty_to', {})\n                                    (\n                                        <DatePicker />\n                                    )}\n                                </Form.Item>\n\n                            </Col>\n                            <Col span={6}>\n                                <Form.Item>\n                                    {getFieldDecorator('excused_duty_from_session', {\n                                        initialValue: \"Morning\"\n                                    })\n                                    (\n                                        <Select>\n                                            <Option value=\"Morning\">Morning Session</Option>\n                                            <Option value=\"Morning\">Evening Session</Option>\n                                        </Select>\n                                    )}\n\n                                </Form.Item>\n\n                                <Form.Item>\n                                    {getFieldDecorator('excused_duty_to_session', {\n                                        initialValue: \"Morning\"\n                                    })\n                                    (\n                                        <Select>\n                                            <Option value=\"Morning\">Morning Session</Option>\n                                            <Option value=\"Morning\">Evening Session</Option>\n                                        </Select>\n                                    )}\n                                </Form.Item>\n\n                            </Col>\n\n                        </Row>\n                      )\n\n                        : null}\n\n\n                    <Form.Item>\n                        {getFieldDecorator('fit_light_duty', {})(\n                            (<Checkbox\n                              onClick={this.handleLighDutyCheck}\n                              defaultChecked={this.state.fit_light_duty_checked}\n                            >Fit for light\n                                duty\n                             </Checkbox>),\n                        )}\n                    </Form.Item>\n\n                    {this.state.fit_light_duty_checked ? (\n                        <Row>\n                            <Col>\n                                <Form.Item label=\"From\">\n                                    {getFieldDecorator('fit_light_duty_from', {})\n                                    (\n                                        <DatePicker />\n                                    )}\n\n                                </Form.Item>\n\n                                <Form.Item label=\"till\">\n                                    {getFieldDecorator('fit_light_duty_to', {})\n                                    (\n                                        <DatePicker />\n                                    )}\n\n                                </Form.Item>\n                            </Col>\n\n                        </Row>\n                      )\n                        : null}\n\n                    <Form.Item>\n                        {getFieldDecorator('proof_attendance', {})(\n                            (<Checkbox\n                              onClick={this.handleAttendanceCheck}\n                              defaultChecked={this.state.attendance_checked}\n                            >Proof of attendance at\n                                practice\n                             </Checkbox>),\n                        )}\n                    </Form.Item>\n                    {this.state.attendance_checked ? (\n                        <Row>\n                            <Form.Item label=\"on\">\n                                {getFieldDecorator('proof_attendance_date', {})\n                                (<DatePicker />)}\n                            </Form.Item>\n                            <Col span={6} offset={6}>\n                                <Form.Item label=\"From\">\n                                    {getFieldDecorator('proof_attendance_from', {})\n                                    (\n                                        <TimePicker use12Hours format=\"h:mm A\" />\n                                    )}\n\n                                </Form.Item>\n                                <Form.Item label=\"till\">\n                                    {getFieldDecorator('proof_attendance_to', {})\n                                    (\n                                        <TimePicker use12Hours format=\"h:mm A\" />\n                                    )}\n                                </Form.Item>\n                            </Col>\n                        </Row>\n                      )\n\n\n                        : null}\n\n\n                    <Form.Item label=\"Notes\">\n                        {getFieldDecorator('notes', {})(\n                            (<TextArea />),\n                        )}\n                    </Form.Item>\n\n\n                    <Form.Item>\n                        {getFieldDecorator('group', {initialValue:'no_mention'})(\n                            <Radio.Group>\n                                {radioOption}\n                            </Radio.Group>\n                        )}\n\n                    </Form.Item>\n                    <Affix offsetBottom={0}>\n                        <Card>\n                            <span>Issued by &nbsp;&nbsp;</span>\n                            <Dropdown\n                              placement=\"topCenter\"\n                              overlay={(\n<Menu>\n                                {this.state.practiceDoctors.map(doctor => (\n                                    <Menu.Item key=\"0\">\n                                        <a onClick={() => this.selectDoctor(doctor)}>{doctor.user.first_name}</a>\n                                    </Menu.Item>\n                                  ))}\n</Menu>\n)}\n                              trigger={['click']}\n                            >\n                                <a className=\"ant-dropdown-link\" href=\"#\">\n                                    <b>\n                                        {this.state.selectedDoctor.user ? this.state.selectedDoctor.user.first_name : 'No DOCTORS Found'}\n                                    </b>\n                                </a>\n                            </Dropdown>\n                            <span> &nbsp;&nbsp;on&nbsp;&nbsp;</span>\n                            <DatePicker\n                              value={this.state.selectedDate}\n                              onChange={(value) => this.selectedDate(value)}\n                              format=\"DD-MM-YYYY\"\n                              allowClear={false}\n                            />\n                        </Card>\n                    </Affix>\n\n                </Card>\n</Form>\n\n        );\n    }\n}\n\nexport default Form.create()(PatientMedicalCertificate);\n","import React from \"react\";\nimport {\n    Alert,\n    AutoComplete,\n    Avatar,\n    Button,\n    Card,\n    Col,\n    DatePicker,\n    Divider,\n    Form,\n    Icon,\n    Input,\n    InputNumber,\n    List,\n    message,\n    Popconfirm,\n    Radio,\n    Row,\n    Select,\n    Table,\n    Upload\n} from \"antd\";\nimport moment from \"moment\";\nimport {displayMessage, getAPI, interpolate, makeFileURL, makeURL, postAPI} from \"../../../utils/common\";\nimport {\n    BED_PACKAGES,\n    BOOK_SEAT,\n    CHECK_SEAT_AVAILABILITY,\n    DISEASE_LIST,\n    FILE_UPLOAD_API,\n    MEDICINE_PACKAGES,\n    PATIENT_PROFILE,\n    PAYMENT_MODES,\n    SEARCH_PATIENT\n} from \"../../../constants/api\";\n// import {Booking_Type} from \"../../constants/hardData\";\nimport {SUCCESS_MSG_TYPE} from \"../../../constants/dataKeys\";\n\nconst {Meta} = Card;\nconst InputGroup = Input.Group;\nlet id = 1;\nclass BedBookingForm extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            packages: [],\n            totalPayableAmount: 0,\n            totalPayingAmount: 0,\n            patientList: [],\n            paymentModes: [],\n            medicinePackage: [],\n            medicineItem: [],\n            diseases: []\n            // choosePkg:{},\n\n\n        }\n    }\n\n    componentDidMount() {\n        if (this.props.currentPatient)\n            this.handlePatientSelect(this.props.currentPatient.id);\n        this.loadPackages();\n        this.loadPaymentModes();\n        this.loadMedicinePackages();\n        this.loadDiseases();\n    }\n\n    loadPackages = () => {\n        const that = this;\n        const successFn = function (data) {\n            that.setState({\n                packages: data\n            })\n        }\n        const errorFn = function () {\n        }\n        getAPI(interpolate(BED_PACKAGES, [this.props.active_practiceId]), successFn, errorFn);\n\n    }\n\n    loadDiseases = () => {\n        const that = this;\n        const successFn = function (data) {\n            that.setState({\n                diseases: data\n            })\n        }\n        const errorFn = function () {\n        }\n        getAPI(interpolate(DISEASE_LIST, [this.props.active_practiceId]), successFn, errorFn);\n\n    }\n\n    loadMedicinePackages() {\n        const that = this;\n        const successFn = function (data) {\n            that.setState({\n                medicinePackage: data,\n            })\n        }\n        const errorFn = function () {\n\n        }\n        getAPI(interpolate(MEDICINE_PACKAGES, [this.props.active_practiceId]), successFn, errorFn);\n    }\n\n    searchPatient = (value) => {\n        const that = this;\n        const successFn = function (data) {\n            if (data) {\n                that.setState({\n                    patientList: data,\n                    ptr: data,\n\n                })\n            }\n        };\n        const errorFn = function () {\n        };\n        getAPI(interpolate(SEARCH_PATIENT, [value]), successFn, errorFn);\n    }\n\n    handlePatientSelect = (event) => {\n        if (event) {\n            const that = this;\n            const successFn = function (data) {\n                that.setState({\n                    patientDetails: data\n                });\n            };\n            const errorFn = function () {\n            };\n            getAPI(interpolate(PATIENT_PROFILE, [event]), successFn, errorFn);\n        }\n    }\n\n    loadPaymentModes() {\n        const that = this;\n        const successFn = function (data) {\n            that.setState({\n                paymentModes: data,\n            })\n        };\n        const errorFn = function () {\n        };\n        getAPI(interpolate(PAYMENT_MODES, [this.props.active_practiceId]), successFn, errorFn);\n    }\n\n    checkBedStatus = (type, value) => {\n        const that = this;\n        that.handleRoomType();\n        this.setState({\n            [type]: value\n        }, function () {\n\n            const successFn = function (data) {\n                that.setState({\n                    availabilitySeatTatkal: data.TATKAL,\n                    availabilitySeatNormal: data.NORMAL,\n                });\n                const currentSelected = that.props.form.getFieldValue('seat_type');\n                if (!data[currentSelected]) {\n                    that.props.form.setFieldsValue({\n                        seat_type: null\n                    })\n                    that.calculateTotalAmount();\n                }\n            }\n            that.calculateTotalAmount();\n            const errorFn = function () {\n\n            }\n            const {from_date, bed_package} = that.state;\n            if (from_date && bed_package) {\n                let to_date = null;\n                that.state.packages.forEach(function (pkgObj) {\n                    if (bed_package == pkgObj.id) {\n                        to_date = moment(from_date).add(pkgObj.no_of_days - 1, 'day')\n                    }\n                });\n                if (from_date && to_date && bed_package) {\n                    const {setFieldsValue} = that.props.form;\n                    setFieldsValue({\n                        to_date\n                    })\n                    getAPI(interpolate(CHECK_SEAT_AVAILABILITY, [that.props.active_practiceId]), successFn, errorFn, {\n                        start: moment(from_date).format('YYYY-MM-DD'),\n                        end: moment(to_date).format('YYYY-MM-DD'),\n                        bed_package\n                    })\n                }\n            }\n        });\n    }\n\n\n    handleSubmit = (e) => {\n        this.setState({\n            loading: true\n        })\n        const that = this;\n        const details=[];\n        e.preventDefault();\n        this.props.form.validateFields((err, values) => {\n            if (!err) {\n                const { label, value } = values;\n\n                label.map((key,i)=>\n                    details.push({'key':key, 'value': value[i]})\n                );\n                const reqData = {\n                    ...values,\n                    to_date: moment(values.to_date).format('YYYY-MM-DD'),\n                    from_date: moment(values.from_date).format('YYYY-MM-DD'),\n                    paid: false,\n                    total_price: this.state.totalPayableAmount,\n                    date: moment().format('YYYY-MM-DD'),\n                    total_tax: this.state.tax,\n                    patient: this.state.patientDetails.id,\n                    rest_diseases: values.rest_diseases ? values.rest_diseases.join(',') : null,\n                    report_upload: values.file && values.file.file.response ? values.file.file.response.image_path : null,\n                    details\n                };\n                delete reqData.label;\n                delete reqData.value;\n                delete reqData.keys;\n\n                const successFn = function (data) {\n                    displayMessage(SUCCESS_MSG_TYPE, \"Saved Successfully!!\");\n                    if (that.props.history){\n                        that.props.history.goBack();\n                        that.props.history.replace(`/patient/${ that.props.match.params.id }/booking`)\n                    }\n                    if (that.props.loadData) {\n                        that.props.loadData();\n                    }\n                };\n                const errorFn = function () {\n\n                };\n\n                postAPI(interpolate(BOOK_SEAT, [this.props.active_practiceId]), reqData, successFn, errorFn);\n            }\n        })\n\n\n    };\n\n    handleClick = (e) => {\n        this.setState({\n            patientDetails: null\n        })\n\n    };\n\n    handleRoomType = (name, value) => {\n        const that = this;\n        this.setState({\n            [name]: value,\n        }, function () {\n            that.calculateTotalAmount();\n        });\n\n    }\n\n    calculateTotalAmount = () => {\n        const that = this;\n        that.setState(function (prevSate) {\n            let payAmount = 0;\n            let total_tax = 0;\n            let bedPkg = {};\n            let medicinePkg = [];\n            let total_medicine_price = 0;\n            prevSate.packages.forEach(function (item) {\n                if (prevSate.bed_package == item.id) {\n                    if (prevSate.seat_type == 'NORMAL') {\n                        payAmount = item.normal_price + item.normal_tax_value;\n                        total_tax += item.normal_tax_value\n                        bedPkg = {\n                            ...item,\n                            type: \"BED\",\n                            price_with_tax: payAmount,\n                            tax: item.normal_tax_value,\n                            price: item.normal_price,\n                            _id:Math.random().toFixed(7),\n                        };\n                        medicinePkg = [bedPkg];\n                    }\n                    if (prevSate.seat_type == 'TATKAL') {\n                        payAmount = item.tatkal_price + item.tatkal_tax_value;\n                        total_tax += item.tatkal_tax_value\n                        bedPkg = {\n                            ...item,\n                            type: \"BED\",\n                            price_with_tax: payAmount,\n                            tax: item.tatkal_tax_value,\n                            price: item.tatkal_price,\n                            _id:Math.random().toFixed(7),\n                        };\n                        medicinePkg = [bedPkg];\n                    }\n                }\n            });\n\n            prevSate.medicinePackage.forEach(function (item) {\n                prevSate.medicineItem.forEach(function (ele) {\n                    if (item.id == ele) {\n                        total_medicine_price += item.final_price;\n                        total_tax += item.tax_value;\n                        medicinePkg = [...medicinePkg, {\n                            ...item,\n                            type: \"MEDICINE\",\n                            price_with_tax: item.final_price,\n                            tax: item.tax_value,\n                            _id:Math.random().toFixed(7),\n                        }]\n\n                    }\n                });\n            });\n            return {\n                totalPayableAmount: payAmount + total_medicine_price,\n                tax: total_tax,\n                choosePkg: [...medicinePkg]\n            }\n        })\n    }\n\n    setPaymentAmount = (value) => {\n        const that = this;\n        this.setState({\n            totalPayingAmount: value\n        }, function () {\n            that.calculateTotalAmount();\n        })\n    }\n\n    handleMedicineSelect = (e) => {\n        const value = e;\n        this.setState({\n            medicineItem: value,\n        }, function () {\n            this.calculateTotalAmount()\n        })\n    }\n\n    changeDiscount=(id, value)=>{\n        const that=this;\n        that.setState(function (prevState) {\n            const newTableValue = [];\n            prevState.choosePkg.forEach(function (tableObj) {\n                if (tableObj._id == id) {\n\n                    newTableValue.push({...tableObj, discount: value})\n                }else {\n                    newTableValue.push(tableObj);\n                }\n            });\n            return {choosePkg:newTableValue}\n        });\n    }\n\n    addNewFields =()=>{\n        const { form } = this.props;\n        const keys = form.getFieldValue('keys');\n        const nextKeys = keys.concat(id++);\n        form.setFieldsValue({\n            keys: nextKeys,\n        });\n    };\n\n    removeNewOptionField = (k) => {\n        const {form} = this.props;\n        const keys = form.getFieldValue('keys');\n        if (keys.length === 1) {\n            return;\n        }\n\n        form.setFieldsValue({\n            keys: keys.filter(key => key !== k),\n        });\n    };\n\n    render() {\n\n\n        const BOOKING_TYPE = [\n            {\n                value: 'NORMAL',\n                is_or_not: !!(this.state.availabilitySeatNormal && this.state.availabilitySeatNormal.available)\n            },\n            {\n                value: 'TATKAL',\n                is_or_not: !!(this.state.availabilitySeatTatkal && this.state.availabilitySeatTatkal.available)\n            },\n\n        ];\n\n        const that = this;\n        const {getFieldDecorator, getFieldValue} = this.props.form;\n        const formItemLayout = ({\n            labelCol: {\n                xs: {span: 24},\n                sm: {span: 6},\n            },\n            wrapperCol: {\n                xs: {span: 24},\n                sm: {span: 14},\n            },\n        });\n        const formPatients = ({\n            wrapperCol: {\n                xs: {offset: 6, span: 24},\n                sm: {offset: 6, span: 14},\n            },\n        });\n\n        const columns = [{\n            title: 'Item',\n            key: 'name',\n            dataIndex: 'name'\n        },\n                {\n                title: 'Normal Price',\n                key: 'normal_price',\n                dataIndex: 'normal_price',\n                // render:(value,record)=>(<p>{value.toFixed()}</p>)\n            }, {\n                title: 'Tatkal Price',\n                key: 'tatkal_price',\n                dataIndex: 'tatkal_price',\n                // render:(value,record)=>(<p>{record?(record.tatkal_price).toFixed():null}</p>)\n            },\n\n            {\n                title: 'discount %',\n                key: 'discount',\n                width: 100,\n                dataIndex: 'discount',\n                render: (item, record) => (\n<Form.Item\n  key={`discount[${record._id}]`}\n  {...formItemLayout}\n>\n                    {getFieldDecorator(`discount[${record._id}]`, {\n                        initialValue: record.discount,\n                        validateTrigger: ['onChange', 'onBlur'],\n\n                    })(\n                        <InputNumber min={0} max={100} placeholder=\"discount\" size=\"small\" value={record.discount} onChange={(value) => that.changeDiscount(record._id ,value)} />\n                    )}\n</Form.Item>\n)\n            },\n            {\n                title: 'Price',\n                key: 'price',\n                dataIndex: 'price',\n                render: (value, record) => (<p>{value ? (value).toFixed(2) : null}</p>)\n\n            }, {\n                title: 'Tax',\n                key: 'tax',\n                dataIndex: 'tax',\n                render: (value, record) => (<p>{value ? (value).toFixed(2) : null}</p>)\n            }, {\n                title: 'Total Amount',\n                key: 'price_with_tax',\n                dataIndex: 'price_with_tax',\n                render: (value, record) => (<p>{value ? (value).toFixed(2) : null}</p>)\n            }];\n        const singleUploadprops = {\n            name: 'image',\n            data: {\n                name: 'hello'\n            },\n            action: makeURL(FILE_UPLOAD_API),\n            headers: {\n                authorization: 'authorization-text',\n            },\n            onChange(info) {\n                if (info.file.status !== 'uploading') {\n\n                }\n                if (info.file.status === 'done') {\n                    message.success(`${info.file.name} file uploaded successfully`);\n                } else if (info.file.status === 'error') {\n                    message.error(`${info.file.name} file upload failed.`);\n                }\n            },\n        };\n\n\n\n        getFieldDecorator('keys', {initialValue: [0]});\n        const keys = getFieldValue('keys');\n\n        const chooseOption = keys.map((k, index) =>(\n            <Row key={k}>\n                <Col span={8}>\n                    <Form.Item label=\"\">\n                        {getFieldDecorator(`label[${k}]`)\n                        (<Input placeholder=\"name\" />)}\n                    </Form.Item>\n\n                </Col>\n\n                <Col span={8}>\n                    <Form.Item label=\"\">\n                        {getFieldDecorator(`value[${k}]`)\n                        (<Input placeholder=\"value\" />)}\n                    </Form.Item>\n\n                </Col>\n                <Col span={8}>\n                    {index ? (\n                        <Button\n                          onClick={() => this.removeNewOptionField(k)}\n                          size=\"small\"\n                          type=\"danger\"\n                          style={{margin: 5}}\n                          icon=\"close\"\n                          shape=\"circle\"\n                        />\n                    ):null}\n\n                    {index == keys.length - 1 ? (\n                        <Button type=\"dashed\" style={{marginTop: '3px'}} onClick={this.addNewFields}>\n                            <Icon type=\"plus\" /> Add field\n                        </Button>\n                      )\n                        : null}\n                </Col>\n\n            </Row>\n        ));\n        return (\n<div>\n            <Card title=\"Book a Seat/Bed\">\n                <Form>\n                    <Row>\n                        <Col xs={24} sm={24} md={12} lg={12} xl={12}>\n                            <div style={{paddingRight:'10px'}}>\n\n                                {this.state.patientDetails ? (\n<Form.Item\n  key=\"id\"\n  value={this.state.patientDetails ? this.state.patientDetails.id : ''}\n  {...formPatients}\n>\n                                        <Card bordered={false} style={{background: '#ECECEC'}}>\n                                            <Meta\n                                              avatar={(this.state.patientDetails.image ? <Avatar src={makeFileURL(this.state.patientDetails.image)} /> : (\n                                                    <Avatar style={{backgroundColor: '#87d068'}}>\n                                                        {this.state.patientDetails.user.first_name ? this.state.patientDetails.user.first_name.charAt(0) :\n                                                            <Icon type=\"user\" />}\n                                                    </Avatar>\n                                                  ))}\n                                              title={this.state.patientDetails.user.first_name}\n                                              description={this.state.patientDetails.user.mobile}\n                                            />\n                                            {/* <Button onClick={this.handleClick} icon=\"close-circle\" */}\n                                            {/*        type={\"danger\"}/> */}\n                                            {/* <Button type=\"primary\" style={{float: 'right'}} onClick={this.handleClick}>Add New\n                                                Patient</Button> */}\n                                        </Card>\n</Form.Item>\n)\n                                    : (\n<div>\n                                        <Form.Item label=\"Patient\" {...formItemLayout}>\n                                            {getFieldDecorator('patient', {\n                                                rules: [{required: true, message: 'this field required'}],\n                                            })\n                                            (<AutoComplete\n                                              placeholder=\"Patient Name\"\n                                              showSearch\n                                              onSearch={this.searchPatient}\n                                              defaultActiveFirstOption={false}\n                                              showArrow={false}\n                                              filterOption={false}\n                                              onSelect={this.handlePatientSelect}\n                                            >\n                                                {this.state.patientList.map((option) => (\n<AutoComplete.Option\n  value={option ? option.id.toString() : ''}\n>\n                                                    <List.Item style={{padding: 0}}>\n                                                        <List.Item.Meta\n                                                          avatar={option.image ? (\n                                                                <Avatar\n                                                                  style={{backgroundColor: '#ffff'}}\n                                                                  src={makeFileURL(option.image)}\n                                                                />\n                                                              ) :\n                                                                <Icon type=\"user\" />}\n                                                          title={`${option.user.first_name  } (${  option.user.id  })`}\n                                                          description={<small>{option.user.mobile}</small>}\n                                                        />\n\n                                                    </List.Item>\n</AutoComplete.Option>\n))}\n                                             </AutoComplete>)}\n\n                                            {this.state.ptr ? (\n<Alert\n  message=\"Patient Not Found !!\"\n  description=\"Please Search another patient or create new patient.\"\n  type=\"error\"\n/>\n) : null}\n                                        </Form.Item>\n</div>\n)}\n\n                                <Form.Item label=\"Bed Package\" {...formItemLayout}>\n                                    {getFieldDecorator('bed_package', {\n                                        rules: [{required: true, message: 'this field required!'}],\n                                    })\n                                    (<Select onChange={(value) => that.checkBedStatus('bed_package', value)}>\n                                        {that.state.packages.map(room => (\n<Select.Option\n  value={room.id}\n>{room.name}\n</Select.Option>\n))}\n                                     </Select>)}\n                                </Form.Item>\n                                <Form.Item label=\"Book From\" {...formItemLayout}>\n                                    {getFieldDecorator('from_date', {\n                                        rules: [{required: true, message: 'Input From Date!'}],\n                                    })\n                                    (<DatePicker\n                                      onChange={(value) => that.checkBedStatus('from_date', value)}\n                                      format=\"DD-MM-YYYY\"\n                                      allowClear={false}\n                                    />)}\n                                </Form.Item>\n                                <Form.Item label=\"Book To\" {...formItemLayout}>\n                                    {getFieldDecorator('to_date', {\n                                        rules: [{required: true, message: 'Input To Date!'}],\n                                    })\n                                    (<DatePicker disabled format=\"DD-MM-YYYY\" />)}\n                                </Form.Item>\n\n                                <Form.Item label=\"Booking Type\" {...formItemLayout}>\n                                    {getFieldDecorator('seat_type', {\n                                        rules: [{\n                                            required: true, message: 'this field required'\n                                        }]\n                                    })(<Radio.Group\n                                      onChange={(e) => this.handleRoomType('seat_type', e.target.value)}\n                                    >\n                                            {BOOKING_TYPE.map((seat_type) => (\n<Radio\n  value={seat_type.is_or_not ? seat_type.value : ''}\n  disabled={!seat_type.is_or_not}\n>{seat_type.value}\n</Radio>\n))}\n                                       </Radio.Group>\n                                    )}\n                                </Form.Item>\n                                <Form.Item label=\"Medicine  Package\" {...formItemLayout}>\n                                    {getFieldDecorator('medicines', {})\n                                    (<Select mode=\"multiple\" onChange={this.handleMedicineSelect}>\n                                        {that.state.medicinePackage.map(item => (\n<Select.Option\n  value={item.id}\n>{item.name}\n</Select.Option>\n))}\n                                     </Select>)}\n                                </Form.Item>\n\n                                <Form.Item label=\"Pay Now : \" {...formItemLayout}>\n                                    {getFieldDecorator('pay_value', {\n                                        rules: [{\n                                            required: true,\n                                            message: 'this field is required'\n                                        }],\n                                        initialValue: this.state.totalPayingAmount ? this.state.totalPayingAmount : null\n                                    })\n                                    (\n                                        <InputNumber\n                                          min={0}\n                                          step={1}\n                                          max={this.state.totalPayableAmount}\n                                          onChange={this.setPaymentAmount}\n                                        />\n                                    )}\n                                </Form.Item>\n                                <Form.Item label=\"Payment Mode\" {...formItemLayout}>\n                                    {getFieldDecorator('payment_mode', {\n                                        rules: [{required: true, message: 'this field required'}],\n                                    })\n                                    (<Select\n                                      showSearch\n                                      filterOption={(input, option) =>\n                                                 option.props.children.toLowerCase().indexOf(input.toLowerCase()) >= 0}\n                                    >\n                                        {this.state.paymentModes.map(type => (\n<Select.Option\n  value={type.id}\n>{type.mode}\n</Select.Option>\n))}\n                                     </Select>)}\n                                </Form.Item>\n\n                                {/* <Col span={7} style={{float:\"right\"}}>\n                                    <Form.Item>\n                                        <Popconfirm\n                                            title={\"Are you sure to take payment of INR \" + this.state.totalPayingAmount + \"?\"}  onConfirm={this.handleSubmit}>\n                                            <Button type={'primary'}>Submit</Button>\n                                        </Popconfirm>\n                                        {that.props.history ?\n                                            <Button style={{margin: 5}}\n                                                    onClick={() => that.props.history.goBack()}>\n                                                Cancel\n                                            </Button> : null}\n                                    </Form.Item>\n                                </Col>  */}\n\n\n                                <Divider>Patient Details</Divider>\n                                <Form.Item label=\"Creatinine Level\" {...formItemLayout}>\n                                    {getFieldDecorator('creatinine', {\n                                        // rules: [{required: true, message: 'this field required'}],\n                                    })\n                                    (<Input />)}\n                                </Form.Item>\n                                <Form.Item label=\"Urea Level\" {...formItemLayout}>\n                                    {getFieldDecorator('urea_level', {\n                                        // rules: [{required: true, message: 'this field required'}],\n                                    })\n                                    (<Input />)}\n                                </Form.Item>\n                                <Form.Item label=\"Currently on Dialysis?\" {...formItemLayout}>\n                                    {getFieldDecorator('dialysis', {\n                                        // rules: [{required: true, message: 'this field required'}],\n                                    })\n                                    (<Select\n                                      showSearch\n                                      filterOption={(input, option) =>\n                                                 option.props.children.toLowerCase().indexOf(input.toLowerCase()) >= 0}\n                                    >\n                                        <Select.Option\n                                          value\n                                        >YES\n                                        </Select.Option>\n                                        <Select.Option\n                                          value={false}\n                                        >NO\n                                        </Select.Option>\n                                     </Select>)}\n                                </Form.Item>\n                                <Form.Item label=\"Diseases\" {...formItemLayout}>\n                                    {getFieldDecorator('other_diseases', {\n                                        // rules: [{required: true, message: 'this field required'}],\n                                    })\n                                    (<Select\n                                      showSearch\n                                      mode=\"multiple\"\n                                      filterOption={(input, option) =>\n                                                 option.props.children.toLowerCase().indexOf(input.toLowerCase()) >= 0}\n                                    >\n                                        {this.state.diseases.map(item => (\n<Select.Option\n  value={item.id}\n>{item.name}\n</Select.Option>\n))}\n                                     </Select>)}\n                                </Form.Item>\n                                <Form.Item label=\"Other Diseases\" {...formItemLayout}>\n                                    {getFieldDecorator('rest_diseases', {\n                                        // rules: [{required: true, message: 'this field required'}],\n                                    })\n                                    (<Select mode=\"tags\" />)}\n                                </Form.Item>\n                                <Form.Item label=\"Upload Report\" {...formItemLayout}>\n                                    {getFieldDecorator('file', {\n                                        // rules: [{required: true, message: 'this field required'}],\n                                    })\n                                    (<Upload {...singleUploadprops}>\n                                        <Button>\n                                            <Icon type=\"upload\" /> Select File\n                                        </Button>\n\n                                     </Upload>)}\n                                </Form.Item>\n                            </div>\n\n                        </Col>\n                        <Col xs={24} sm={24} md={12} lg={12} xl={12}>\n                            <Divider>Item Details</Divider>\n                            <Table\n                              pagination={false}\n                              columns={columns}\n                              size=\"small\"\n                              dataSource={this.state.choosePkg}\n                            />\n\n                            <Divider>Extra Details</Divider>\n                            <Card>\n\n                                {chooseOption}\n                                {/* <Col span={8}> */}\n                                {/*    <Button type=\"dashed\" style={{marginTop:'3px'}} onClick={this.addNewFields}> */}\n                                {/*        <Icon type=\"plus\" /> Add field */}\n                                {/*    </Button> */}\n\n                                {/* </Col> */}\n                            </Card>\n\n\n                        </Col>\n                        <Col span={24}>\n                            <h3>Grand Total: <b>{this.state.totalPayableAmount.toFixed(2)}</b></h3>\n                            <Form.Item>\n                                <Popconfirm\n                                  title={`Are you sure to take payment of INR ${  this.state.totalPayingAmount  }?`}\n                                  onConfirm={this.handleSubmit}\n                                >\n                                    <Button type=\"primary\">Submit</Button>\n                                </Popconfirm>\n                                {that.props.history ? (\n                                    <Button\n                                      style={{margin: 5}}\n                                      onClick={() => that.props.history.goBack()}\n                                    >\n                                        Cancel\n                                    </Button>\n                                  ) : null}\n                            </Form.Item>\n                        </Col>\n                    </Row>\n                </Form>\n            </Card>\n</div>\n)\n    }\n}\n\nexport default Form.create()(BedBookingForm)\n","import React from \"react\";\nimport {Button, Card, Icon, Layout, Tag} from \"antd\";\nimport {Route, Switch} from \"react-router\";\nimport {Link} from \"react-router-dom\";\nimport moment from \"moment\";\nimport BedBookingForm from \"./BedBookingForm\";\nimport {BED_BOOKING_REPORTS} from \"../../../constants/api\";\nimport {getAPI, interpolate} from \"../../../utils/common\";\nimport CustomizedTable from \"../../common/CustomizedTable\";\nimport InfiniteFeedLoaderButton from \"../../common/InfiniteFeedLoaderButton\";\nimport PermissionDenied from \"../../common/errors/PermissionDenied\";\n\nconst {Content} = Layout;\n\nexport default class BookingHome extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            loading: true,\n            bedBookingReports: [],\n            patient: this.props.currentPatient || {}\n        };\n        this.loadBedBookingReport = this.loadBedBookingReport.bind(this);\n    }\n\n    componentDidMount() {\n        this.loadBedBookingReport();\n    }\n\n    loadBedBookingReport = (page = 1) => {\n        const that = this;\n        this.setState({\n            loading: true\n        })\n        const successFn = function (data) {\n            if (data.current == 1)\n                that.setState({\n                    bedBookingReports: data.results,\n                    loading: false,\n                    nextReport: data.next\n                });\n            else\n                that.setState(function (prevState) {\n                        return {\n                            bedBookingReports: [...prevState.bedBookingReports, ...data.results],\n                            loading: false,\n                            nextReport: data.next\n                        }\n                    }\n                );\n        };\n        const errorFn = function () {\n            that.setState({\n                loading: false\n            })\n        };\n        getAPI(interpolate(BED_BOOKING_REPORTS, [this.props.active_practiceId]), successFn, errorFn, {\n            patients: this.state.patient.id,\n            page\n        });\n    }\n\n    render() {\n        const that=this;\n        const columns = [{\n            title: 'Bed Package',\n            key: 'name',\n            dataIndex: 'bed_package.name'\n        }, {\n            title: 'Medicine Package',\n            key: 'medicine',\n            dataIndex: 'medicines',\n            render: (text, record) => (\n<span>{text.map((item) =>\n                <Tag>{item.name}</Tag>\n            )}\n</span>\n)\n        }, {\n            title: 'From ',\n            key: 'from_date',\n            render: (text, record) => (\n                <span>\n                {moment(record.from_date).format('LL')}\n                </span>\n            ),\n        }, {\n            title: 'To ',\n            key: 'to_date',\n            render: (text, record) => (\n                <span>\n                {moment(record.to_date).format('LL')}\n                </span>\n            ),\n        }, {\n            title: 'Seat/Bed Type',\n            key: 'seat_type',\n            dataIndex: 'seat_type'\n\n        }, {\n            title: 'Seat Number',\n            key: 'seat_no',\n            dataIndex: 'seat_no'\n\n        }, {\n            title: 'Total price',\n            key: 'total_price',\n            dataIndex: 'total_price',\n            render: (value) => (<p>{value.toFixed(2)}</p>)\n\n        }, {\n            title: 'Payment Status',\n            key: 'payment_status',\n            dataIndex: 'payment_status'\n\n        }];\n\n        return (\n<Content className=\"main-container\" style={{minHeight: 280,}}>\n            <Layout>\n                <Switch>\n                    <Route\n                      path=\"/patient/:patient/booking/bed-booking\"\n                      render={() =>(that.props.activePracticePermissions.PatientBookings || that.props.allowAllPermissions ?(\n<BedBookingForm\n  {...this.props}\n  bedBooking\n  loadData={this.loadBedBookingReport}\n/>\n):<PermissionDenied />)}\n                    />\n\n                    <Route>\n                        <div>\n                            <h2>Bed Booking Management\n                                <Link to={`/patient/${  this.state.patient.id  }/booking/bed-booking`}>\n                                    <Button type=\"primary\" style={{float: 'right'}}>\n                                        <Icon type=\"plus\" />&nbsp;Book A Seat\n                                    </Button>\n                                </Link>\n                            </h2>\n                            <Card>\n                                <CustomizedTable\n                                  pagination={false}\n                                  hideReport\n                                  loading={this.state.loading}\n                                  columns={columns}\n                                  size=\"small\"\n                                  dataSource={this.state.bedBookingReports}\n                                />\n                                <InfiniteFeedLoaderButton\n                                  loaderFunction={() => this.loadBedBookingReport(this.state.nextReport)}\n                                  loading={this.state.loading}\n                                  hidden={!this.state.nextReport}\n                                />\n                            </Card>\n                        </div>\n                    </Route>\n                </Switch>\n            </Layout>\n</Content>\n)\n\n    }\n}\n","import React from \"react\";\n\nimport {Layout, Spin} from \"antd\";\nimport {Redirect, Route, matchPath} from \"react-router\";\nimport {Switch} from \"react-router-dom\";\nimport PatientProfile from \"./patient/PatientProfile\";\nimport EditPatientDetails from \"./patient/EditPatientDetails\";\nimport Appointment from \"./appointment/Appointment\"\nimport PatientSider from \"./PatientSider\";\nimport PatientTimeline from \"./timeline/PatientTimeline\";\nimport PatientFiles from \"./files/PatientFiles\";\nimport PatientClinicNotes from \"./clinicNotes/PatientClinicNotes\";\nimport PatientHeader from \"./PatientHeader\";\nimport PatientCommunication from \"./communication/PatientCommunication\";\nimport PatientVitalSign from \"./vitalSign/PatientVitalSign\";\nimport AddorEditPatientVitalSigns from \"./vitalSign/AddorEditPatientVitalSigns\";\nimport PatientCompletedProcedures from \"./completedProcedures/PatientCompletedProcedures\";\nimport PatientPrescriptions from \"./prescriptions/PatientPrescriptions\";\nimport PatientTreatmentPlans from \"./treatmentPlans/PatientTreatmentPlans\";\nimport PatientLabOrders from \"./labOrders/PatientLabOrders\";\nimport PatientInvoices from \"./invoices/PatientInvoices\";\nimport PatientPayments from \"./payments/PatientPayments\";\nimport PatientInvoicesReturn from \"./invoices/ReturnInvoices\";\nimport PatientLedgers from \"./ledgers/PatientLedgers\";\nimport PrescriptionTemplate from \"./prescriptions/PrescriptionTemplate\";\nimport {displayMessage, getAPI, getCommonSettings, interpolate, saveCommonSettings} from \"../../utils/common\";\nimport {AGENT_WALLET, PATIENT_PENDING_AMOUNT, PATIENT_PROFILE, PATIENTS_MEMBERSHIP_API} from \"../../constants/api\";\nimport {ERROR_MSG_TYPE} from \"../../constants/dataKeys\";\nimport PatientMerge from \"./merge/PatientMerge\";\nimport PatientRequiredNoticeCard from \"./PatientRequiredNoticeCard\";\nimport PatientMedicalCertificate from \"./files/PatientMedicalCertificate\";\nimport PermissionDenied from \"../common/errors/PermissionDenied\";\nimport BookingHome from \"./booking/BookingHome\";\nimport PatientWalletLedger from \"./wallet-ledger/PatientWalletLedger\";\nimport {ROUTES_TO_HIDE_PATIENT_SIDE_PANEL} from \"../../constants/hardData\";\n\nconst {Content} = Layout;\n\nclass PatientHome extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            currentPatient: null,\n            active_practiceId: this.props.active_practiceId,\n            medicalHistory: [],\n            listModalVisible: false,\n            loading: false,\n            showAllClinic: getCommonSettings('showAllClinic'),\n            pendingAmount: null,\n            walletAmount: null,\n            hideSidePanel: false\n        };\n        this.setCurrentPatient = this.setCurrentPatient.bind(this);\n        this.togglePatientListModal = this.togglePatientListModal.bind(this);\n        this.toggleShowAllClinic = this.toggleShowAllClinic.bind(this);\n        this.loadPatientPendingAmount = this.loadPatientPendingAmount.bind(this);\n        this.loadPatientWallet = this.loadPatientWallet.bind(this);\n    }\n\n    componentDidMount() {\n        if (this.props.match.params.id && (!this.state.currentPatient || this.props.match.params.id != this.state.currentPatient.id)) {\n            this.getPatientListData(this.props.match.params.id);\n        }\n        this.loadPatientPendingAmount();\n        this.loadPatientWallet();\n        this.loadMembership();\n    }\n\n    componentWillReceiveProps(nextProps, nextContext) {\n        const that = this;\n        if (this.state.currentPathLocation != nextProps.location)\n            this.setState({\n                currentPathLocation: nextProps.location\n            }, function () {\n                let foundFlag = false;\n                for (let i = 0; i < ROUTES_TO_HIDE_PATIENT_SIDE_PANEL.length; i++) {\n                    if (matchPath(that.state.currentPathLocation.pathname, {\n                        path: ROUTES_TO_HIDE_PATIENT_SIDE_PANEL[i],\n                        exact: false,\n                        strict: false\n                    })) {\n                        foundFlag = true;\n                        that.setState({\n                            hideSidePanel: true\n                        })\n                    }\n                }\n                if (!foundFlag)\n                    that.setState({\n                        hideSidePanel: false\n                    })\n            })\n    }\n\n    getPatientListData(id) {\n        const that = this;\n        that.setState({\n            loading: true\n        });\n        const successFn = function (data) {\n            that.setCurrentPatient(data)\n            // that.setState({\n            //     patientListData: data.results,\n            //     morePatients: data.next,\n            //     currentPage: data.current,\n            //     loading: false\n            // })\n        };\n        const errorFn = function () {\n            displayMessage(ERROR_MSG_TYPE, \"Patient Loading Failed\");\n            that.setState({\n                loading: false\n            })\n\n        };\n        getAPI(interpolate(PATIENT_PROFILE, [id]), successFn, errorFn);\n    }\n\n    setCurrentPatient(patientObj, redirectUrl = null) {\n        const that = this;\n        const urlArray = this.props.location.pathname.split(\"/\");\n        if (!isNaN(parseInt(urlArray[2]))) {\n            if (patientObj) {\n                urlArray[1] = \"patient\";\n                urlArray[2] = patientObj.id;\n            } else {\n                urlArray[1] = \"patients\";\n                urlArray.splice(2, 1);\n            }\n        } else if (patientObj) {\n                urlArray[1] = \"patient\";\n                urlArray.splice(2, 0, patientObj.id);\n            }\n        this.props.history.push(urlArray.join(\"/\"));\n        this.setState({\n            currentPatient: patientObj,\n            loading: false,\n            listModalVisible: false\n        }, function () {\n            if (redirectUrl)\n                that.props.history.push(interpolate(redirectUrl, [patientObj.id]))\n        });\n    }\n\n    togglePatientListModal(option) {\n        this.setState({\n            listModalVisible: !!option\n        });\n    }\n\n    toggleShowAllClinic(option) {\n        this.setState({\n            showAllClinic: !!option\n        }, function () {\n            saveCommonSettings('showAllClinic', !!option)\n        });\n    }\n\n    loadPatientPendingAmount = () => {\n        const that = this;\n        if (this.state.currentPatient && this.state.currentPatient.id) {\n            const successFn = function (data) {\n                that.setState({\n                    pendingAmount: data\n                })\n            }\n            const errorFn = function () {\n\n            }\n            getAPI(interpolate(PATIENT_PENDING_AMOUNT, [this.state.currentPatient.id]), successFn, errorFn);\n        } else {\n            this.setState({\n                pendingAmount: null\n            })\n        }\n    };\n\n    loadPatientWallet = () => {\n        const that = this;\n        if (this.state.currentPatient && this.state.currentPatient.id) {\n            const successFn = function (data) {\n                that.setState({\n                    walletAmount: data\n                })\n            }\n            const errorFn = function () {\n\n            }\n            getAPI(interpolate(AGENT_WALLET, [this.state.currentPatient.id]), successFn, errorFn);\n        } else {\n            this.setState({\n                pendingAmount: null\n            })\n        }\n    };\n\n    loadMembership = () => {\n        const that = this;\n        if (this.state.currentPatient && this.state.currentPatient.id) {\n            const successFn = function (data) {\n                that.setState({\n                    MedicalMembership: data.length ? data[data.length - 1] : null,\n                })\n            };\n            const errorFn = function () {\n            };\n            getAPI(interpolate(PATIENTS_MEMBERSHIP_API, [that.state.currentPatient.id]), successFn, errorFn);\n        }\n    };\n\n    refreshWallet = () => {\n        this.loadPatientWallet();\n        this.loadPatientPendingAmount();\n        this.loadMembership();\n    };\n\n    render() {\n        const that = this;\n        return (\n<Content>\n            <Spin spinning={this.state.loading} size=\"large\">\n                <PatientHeader\n                  {...this.state}\n                  {...this.props}\n                  togglePatientListModal={this.togglePatientListModal}\n                  key={this.state.currentPatient}\n                  setCurrentPatient={this.setCurrentPatient}\n                  toggleShowAllClinic={this.toggleShowAllClinic}\n                  refreshWallet={this.refreshWallet}\n                />\n\n                <Layout>\n                    <PatientSider {...this.state} {...this.props} />\n                    <Layout>\n                        <Content\n                          className=\"main-container\"\n                          key={this.state.showAllClinic.toString()}\n                          style={{\n                                     // margin: '24px 16px',\n                                     padding: '0px 5px',\n                                     minHeight: 280,\n                                     // marginLeft: '200px'\n                                 }}\n                        >\n                            <Switch>\n                                {/** * Patient Profile Routes */}\n                                <Route\n                                  exact\n                                  path=\"/patients/merge\"\n                                  render={(route) => (that.props.activePracticePermissions.MergePatients || that.props.allowAllPermissions ?\n                                           <PatientMerge {...this.state} /> : <PermissionDenied />)}\n                                />\n\n                                {that.props.activePracticePermissions.WebAdmin || that.allowAllPermissions ? (\n                                    <Route\n                                      exact\n                                      path='/patients/profile'\n                                      render={(route) =>\n                                               (this.state.currentPatient ? (\n                                                   <Redirect\n                                                     to={`/patient/${  this.state.currentPatient.id  }/profile`}\n                                                   />\n                                                 ) : (\n                                                   <PatientProfile\n                                                     {...this.state}\n                                                     key={this.state.currentPatient}\n                                                     setCurrentPatient={this.setCurrentPatient}\n                                                     refreshWallet={this.refreshWallet}\n                                                     {...this.props}\n                                                   />\n                                                 ))}\n                                    />\n                                  )\n                                    : null}\n\n                                <Route\n                                  exact\n                                  path='/patients/profile/add'\n                                  render={(route) => (that.props.activePracticePermissions.AddPatient || that.props.allowAllPermissions ? (\n                                           <EditPatientDetails\n                                             key={this.state.currentPatient}\n                                             {...this.props}\n                                             {...route}\n                                           />\n                                         ) :\n                                           <PermissionDenied />)}\n                                />\n                                <Route\n                                  exact\n                                  path='/patient/:id/profile'\n                                  render={(route) => (that.props.activePracticePermissions.ViewPatient || that.props.allowAllPermissions ? (\n                                           <PatientProfile\n                                             {...this.state}\n                                             key={this.state.currentPatient}\n                                             refreshWallet={this.refreshWallet}\n                                             setCurrentPatient={this.setCurrentPatient}\n                                             {...this.props}\n                                             {...route}\n                                           />\n                                         ) :\n                                           <PermissionDenied />)}\n                                />\n                                <Route\n                                  exact\n                                  path='/patient/:id/profile/edit'\n                                  render={(route) => (that.props.activePracticePermissions.EditPatient || that.props.allowAllPermissions ? (\n                                           <EditPatientDetails\n                                             key={this.state.currentPatient}\n                                             {...this.state}\n                                             {...this.props}\n                                             {...route}\n                                           />\n                                         ) :\n                                           <PermissionDenied />)}\n                                />\n\n                                {/** * Patient Appointment Routes */}\n                                {that.props.activePracticePermissions.PatientAppointments || that.allowAllPermissions ? (\n                                    <Route\n                                      exact\n                                      path='/patients/appointments'\n                                      render={(route) => (this.state.currentPatient ? (\n                                               <Redirect\n                                                 to={`/patient/${  this.state.currentPatient.id  }/appointments`}\n                                               />\n                                             ) : (\n                                               <Appointment\n                                                 key={this.state.currentPatient}\n                                                 {...this.state}\n                                                 {...route}\n                                                 {...this.props}\n                                               />\n                                             ))}\n                                    />\n                                  )\n                                    : null}\n                                {that.props.activePracticePermissions.PatientAppointments || that.allowAllPermissions ? (\n                                    <Route\n                                      exact\n                                      path='/patient/:id/appointments'\n                                      render={(route) => (\n<Appointment\n  key={this.state.currentPatient ? this.state.currentPatient.id : null}\n  {...this.state}\n  {...route}\n  {...this.props}\n/>\n)}\n                                    />\n                                  )\n                                    : null}\n                                {that.props.activePracticePermissions.PatientAppointments || that.allowAllPermissions ? (\n                                    <Route\n                                      exact\n                                      path='/patients/appointments/:appointmentid'\n                                      render={(route) => (\n<Appointment\n  key={this.state.currentPatient}\n  {...this.state}\n  {...route}\n  {...this.props}\n/>\n)}\n                                    />\n                                  )\n                                    : null}\n                                {/*      <Route exact path='/patients/appointments/create'\n                           render={() => <CreateAppointment {...this.props} />}/> */}\n\n                                {/** * Patient Communication Routes */}\n                                {that.props.activePracticePermissions.PatientCommunications || that.allowAllPermissions ? (\n                                    <Route\n                                      exact\n                                      path='/patients/communications'\n                                      render={() => (this.state.currentPatient ? (\n                                               <Redirect\n                                                 to={`/patient/${  this.state.currentPatient.id  }/communications`}\n                                               />\n                                             ) : (\n                                               <PatientRequiredNoticeCard\n                                                 togglePatientListModal={this.togglePatientListModal}\n                                               />\n                                             ))}\n                                    />\n                                  )\n                                    : null}\n                                {that.props.activePracticePermissions.PatientCommunications || that.allowAllPermissions ? (\n                                    <Route\n                                      exact\n                                      path='/patient/:id/communications'\n                                      render={(route) => (\n<PatientCommunication\n  key={this.state.currentPatient ? this.state.currentPatient.id : null}\n  {...this.state}\n  {...route}\n/>\n)}\n                                    />\n                                  )\n                                    : null}\n\n                                {/** * Patient Vital Sign Routes */}\n                                {that.props.activePracticePermissions.PatientVitalSigns || that.allowAllPermissions ? (\n                                    <Route\n                                      exact\n                                      path='/patients/emr/vitalsigns'\n                                      render={(route) => (this.state.currentPatient ? (\n                                               <Redirect\n                                                 to={`/patient/${  this.state.currentPatient.id  }/emr/vitalsigns`}\n                                               />\n                                             ) : (\n                                               <PatientVitalSign\n                                                 togglePatientListModal={this.togglePatientListModal}\n                                                 key={this.state.currentPatient ? this.state.currentPatient.id : null}\n                                                 {...this.state}\n                                                 {...route}\n                                               />\n                                             ))}\n                                    />\n                                  )\n                                    : null}\n\n                                <Route\n                                  path='/patient/:id/emr/vitalsigns'\n                                  render={(route) => (that.props.activePracticePermissions.PatientVitalSigns || that.allowAllPermissions ? (\n                                           <PatientVitalSign\n                                             key={this.state.currentPatient ? this.state.currentPatient.id : null}\n                                             {...this.state}\n                                             {...route}\n                                           />\n                                         ) :\n                                           <PermissionDenied />)}\n                                />\n\n\n                                <Route\n                                  exact\n                                  path='/patient/:id/emr/vitalsigns/edit'\n                                  render={(route) => (that.props.activePracticePermissions.PatientVitalSigns || that.allowAllPermissions ? (\n                                           <AddorEditPatientVitalSigns\n                                             key={this.state.currentPatient ? this.state.currentPatient.id : null}\n                                             {...this.state}\n                                             {...route}\n                                           />\n                                         ) :\n                                           <PermissionDenied />)}\n                                />\n\n                                {/** * Patient Clinic Notes Routes */}\n\n                                <Route\n                                  path=\"/patients/emr/clinicnotes\"\n                                  render={(route) => (\n                                           <PatientClinicNotes\n                                             togglePatientListModal={this.togglePatientListModal}\n                                             key={this.state.currentPatient ? this.state.currentPatient.id : null}\n                                             {...this.props}\n                                             {...this.state}\n                                             {...route}\n                                           />\n                                         )}\n                                />}/>\n                                <Route\n                                  path=\"/patient/:id/emr/clinicnotes\"\n                                  render={(route) => (\n                                           <PatientClinicNotes\n                                             key={this.state.currentPatient ? this.state.currentPatient.id : null}\n                                             {...this.props}\n                                             {...this.state}\n                                             {...route}\n                                           />\n                                         )}\n                                />\n\n                                {/** * Patient Completed Procedures Routes */}\n                                {that.props.activePracticePermissions.PatientCompletedProcedure || that.allowAllPermissions ? (\n                                    <Route\n                                      exact\n                                      path='/patients/emr/workdone'\n                                      render={(route) => (this.state.currentPatient ? (\n                                               <Redirect\n                                                 to={`/patient/${  this.state.currentPatient.id  }/emr/workdone`}\n                                               />\n                                             ) : (\n                                               <PatientCompletedProcedures\n                                                 togglePatientListModal={this.togglePatientListModal}\n                                                 key={this.state.currentPatient ? this.state.currentPatient.id : null}\n                                                 {...this.props}\n                                                 {...this.state}\n                                                 {...route}\n                                               />\n                                             ))}\n                                    />\n                                  )\n                                    : null}\n                                {that.props.activePracticePermissions.PatientCompletedProcedure || that.allowAllPermissions ? (\n                                    <Route\n                                      path='/patient/:id/emr/workdone'\n                                      render={(route) => (\n<PatientCompletedProcedures\n  {...that.props}\n  key={this.state.currentPatient ? this.state.currentPatient.id : null}\n  {...this.state}\n  {...route}\n/>\n)}\n                                    />\n                                  )\n                                    : null}\n                                {/** * Patient Files Routes */}\n                                {that.props.activePracticePermissions.PatientFiles || that.allowAllPermissions ? (\n                                    <Route\n                                      exact\n                                      path='/patients/emr/files'\n                                      render={(route) => (this.state.currentPatient ? (\n                                               <Redirect\n                                                 to={`/patient/${  this.state.currentPatient.id  }/emr/files`}\n                                               />\n                                             ) : (\n                                               <PatientFiles\n                                                 togglePatientListModal={this.togglePatientListModal}\n                                                 key={this.state.currentPatient ? this.state.currentPatient.id : null}\n                                                 {...route}\n                                                 {...this.state}\n                                               />\n                                             ))}\n                                    />\n                                  )\n                                    : null}\n                                {that.props.activePracticePermissions.PatientFiles || that.allowAllPermissions ? (\n                                    <Route\n                                      path=\"/patient/:id/emr/files\"\n                                      render={(route) => (\n<PatientFiles\n  key={this.state.currentPatient ? this.state.currentPatient.id : null}\n  {...this.props}\n  {...route}\n  {...this.state}\n/>\n)}\n                                    />\n                                  )\n                                    : null}\n                                {that.props.activePracticePermissions.PatientFiles || that.allowAllPermissions ? (\n                                    <Route\n                                      path=\"/patient/:id/emr/create-medicalCertificate\"\n                                      render={(route) => (\n<PatientMedicalCertificate\n\n  key={this.state.currentPatient ? this.state.currentPatient.id : null}\n  {...this.props}\n  {...route}\n  {...this.state}\n/>\n)}\n                                    />\n                                  )\n                                    : null}\n                                {/** * Patient Prescriptions Routes */}\n                                {that.props.activePracticePermissions.PatientPrescriptions || that.allowAllPermissions ? (\n                                    <Route\n                                      exact\n                                      path='/patients/emr/prescriptions'\n                                      render={(route) => (this.state.currentPatient ? (\n                                               <Redirect\n                                                 to={`/patient/${  this.state.currentPatient.id  }/emr/prescriptions`}\n                                               />\n                                             ) : (\n                                               <PatientPrescriptions\n                                                 togglePatientListModal={this.togglePatientListModal}\n                                                 key={this.state.currentPatient ? this.state.currentPatient.id : null}\n                                                 {...this.props}\n                                                 {...this.state}\n                                                 {...route}\n                                               />\n                                             ))}\n                                    />\n                                  )\n                                    : null}\n                                {that.props.activePracticePermissions.PatientPrescriptions || that.allowAllPermissions ? (\n                                    <Route\n                                      path='/patient/:id/emr/prescriptions'\n                                      render={(route) => (\n<PatientPrescriptions\n  key={this.state.currentPatient ? this.state.currentPatient.id : null}\n  {...this.props}\n  {...this.state}\n  {...route}\n/>\n)}\n                                    />\n                                  )\n                                    : null}\n                                {/** * Patient Treatment Plan Routes */}\n                                {that.props.activePracticePermissions.PatientTreatmentPlans || that.allowAllPermissions ? (\n                                    <Route\n                                      exact\n                                      path='/patients/emr/plans'\n                                      render={(route) => (this.state.currentPatient ? (\n                                               <Redirect\n                                                 to={`/patient/${  this.state.currentPatient.id  }/emr/plans`}\n                                               />\n                                             ) : (\n                                               <PatientTreatmentPlans\n                                                 togglePatientListModal={this.togglePatientListModal}\n                                                 key={this.state.currentPatient ? this.state.currentPatient.id : null}\n                                                 {...this.state}\n                                                 {...this.props}\n                                                 {...route}\n                                               />\n                                             ))}\n                                    />\n                                  )\n                                    : null}\n                                {that.props.activePracticePermissions.PatientTreatmentPlans || that.allowAllPermissions ? (\n                                    <Route\n                                      path='/patient/:id/emr/plans'\n                                      render={(route) => (\n<PatientTreatmentPlans\n  key={this.state.currentPatient ? this.state.currentPatient.id : null}\n  {...this.state}\n  {...that.props}\n  {...route}\n/>\n)}\n                                    />\n                                  )\n                                    : null}\n                                {/** * Patient Timeline Routes */}\n\n                                <Route\n                                  path=\"/patient/:id/emr/timeline\"\n                                  render={(route) => (that.props.activePracticePermissions.PatientTimeline || that.allowAllPermissions ? (\n                                           <PatientTimeline\n                                             key={this.state.currentPatient ? this.state.currentPatient.id : null}\n                                             {...this.state}\n                                             {...route}\n                                           />\n                                         ) :\n                                           <PermissionDenied />)}\n                                />\n                                {/** * Patient Lab Order Routes */}\n                                {that.props.activePracticePermissions.PatientLabOrders || that.allowAllPermissions ? (\n                                    <Route\n                                      exact\n                                      path='/patient/emr/labtrackings'\n                                      render={(route) => (this.state.currentPatient ? (\n                                                   <Redirect\n                                                     to={`/patient/${  this.state.currentPatient.id  }/emr/labtrackings`}\n                                                   />\n                                                 ) : (\n                                                   <PatientLabOrders\n                                                     key={this.state.currentPatient}\n                                                     {...this.state}\n                                                     {...route}\n                                                   />\n                                                 )\n                                           )}\n                                    />\n                                  )\n                                    : null}\n\n                                <Route\n                                  path='/patient/:id/emr/labtrackings'\n                                  render={(route) => (that.props.activePracticePermissions.PatientLabOrders || that.allowAllPermissions ? (\n                                           <PatientLabOrders\n                                             key={this.state.currentPatient ? this.state.currentPatient.id : null}\n                                             {...this.state}\n                                             {...route}\n                                           />\n                                         ) :\n                                           <PermissionDenied />)}\n                                />\n\n                                {/** * Patient Invoices Routes */}\n                                {that.props.activePracticePermissions.PatientInvoices || that.allowAllPermissions ? (\n                                    <Route\n                                      exact\n                                      path='/patients/billing/invoices'\n                                      render={(route) => (this.state.currentPatient ? (\n                                               <Redirect\n                                                 to={`/patient/${  this.state.currentPatient.id  }/billing/invoices`}\n                                               />\n                                             ) : (\n                                               <PatientInvoices\n                                                 togglePatientListModal={this.togglePatientListModal}\n                                                 key={this.state.currentPatient ? this.state.currentPatient.id : null}\n                                                 {...this.props}\n                                                 {...this.state}\n                                                 {...route}\n                                               />\n                                             ))}\n                                    />\n                                  )\n                                    : null}\n                                <Route\n                                  path='/patient/:id/billing/invoices'\n                                  render={(route) => (that.props.activePracticePermissions.PatientInvoices || that.allowAllPermissions ? (\n                                           <PatientInvoices\n                                             {...that.state}\n                                             refreshWallet={this.refreshWallet}\n                                             key={this.state.currentPatient ? this.state.currentPatient.id : null}\n                                             {...this.props}\n                                             {...this.state}\n                                             {...route}\n                                           />\n                                         ) :\n                                           <PermissionDenied />)}\n                                />\n\n\n                                {that.props.activePracticePermissions.PatientReturns || that.allowAllPermissions ? (\n                                    <Route\n                                      exact\n                                      path='/patients/billing/return/invoices'\n                                      render={(route) => (this.state.currentPatient ? (\n                                               <Redirect\n                                                 to={`/patient/${  this.state.currentPatient.id  }/billing/return/invoices`}\n                                               />\n                                             ) : (\n                                               <PatientInvoicesReturn\n                                                 togglePatientListModal={this.togglePatientListModal}\n                                                 key={this.state.currentPatient ? this.state.currentPatient.id : null}\n                                                 {...this.state}\n                                                 {...route}\n                                               />\n                                             ))}\n                                    />\n                                  )\n                                    : null}\n\n\n                                <Route\n                                  exact\n                                  path='/patient/:id/billing/return/invoices'\n                                  render={(route) => (that.props.activePracticePermissions.PatientReturns || that.allowAllPermissions ? (\n                                           <PatientInvoicesReturn\n                                             refreshWallet={this.refreshWallet}\n                                             key={this.state.currentPatient ? this.state.currentPatient.id : null}\n                                             {...this.state}\n                                             {...route}\n                                           />\n                                         ) :\n                                           <PermissionDenied />)}\n                                />\n\n\n                                {/** * Patient Payments Routes */}\n                                {that.props.activePracticePermissions.PatientPayments || that.allowAllPermissions ? (\n                                    <Route\n                                      path='/patients/billing/payments'\n                                      render={(route) => (this.state.currentPatient ? (\n                                               <Redirect\n                                                 to={`/patient/${  this.state.currentPatient.id  }/billing/payments`}\n                                               />\n                                             ) : (\n                                               <PatientPayments\n                                                 togglePatientListModal={this.togglePatientListModal}\n                                                 key={this.state.currentPatient ? this.state.currentPatient.id : null}\n                                                 {...this.state}\n                                                 {...this.props}\n                                                 {...route}\n                                               />\n                                             ))}\n                                    />\n                                  )\n                                    : null}\n                                <Route\n                                  path='/patient/:id/billing/payments'\n                                  render={(route) => (that.props.activePracticePermissions.PatientPayments || that.allowAllPermissions ? (\n                                           <PatientPayments\n                                             refreshWallet={this.refreshWallet}\n                                             key={this.state.currentPatient ? this.state.currentPatient.id : null}\n                                             {...this.state}\n                                             {...route}\n                                           />\n                                         ) :\n                                           <PermissionDenied />)}\n                                />\n\n                                {/** * Patient Ledger Routes */}\n                                {this.state.currentPatient ? (\n                                    <Route\n                                      exact\n                                      path='/patient/:id/billing/ledger'\n                                      render={(route) => (that.props.activePracticePermissions.PatientLedger || that.allowAllPermissions ? (\n                                               <PatientLedgers\n                                                 refreshWallet={this.refreshWallet}\n                                                 key={this.state.currentPatient ? this.state.currentPatient.id : null}\n                                                 {...this.state}\n                                                 {...route}\n                                               />\n                                             ) :\n                                               <PermissionDenied />)}\n                                    />\n                                  ) : null}\n\n                                <Route\n                                  exact\n                                  path='/patient/:id/prescriptions/template/add'\n                                  render={(route) => (that.props.activePracticePermissions.PatientPrescriptions || that.allowAllPermissions ? (\n                                           <PrescriptionTemplate\n                                             key={this.state.currentPatient ? this.state.currentPatient.id : null}\n                                             {...this.state}\n                                             {...route}\n                                           />\n                                         ) :\n                                           <PermissionDenied />)}\n                                />\n\n                                <Route\n                                  path=\"/patient/:id/booking\"\n                                  render={(route) => (that.props.activePracticePermissions.PatientBookings || that.props.allowAllPermissions ? (\n                                           <BookingHome\n                                             {...this.state}\n                                             {...this.props}\n                                             {...route}\n                                             key={this.state.currentPatient ? this.state.currentPatient.id : null}\n                                           />\n                                         ) :\n                                           <PermissionDenied />)}\n                                />\n                                {this.state.currentPatient && this.state.currentPatient.is_agent ? (\n                                    <Route\n                                      exact\n                                      path=\"/patient/:id/billing/wallet\"\n                                      render={(route) => (that.props.activePracticePermissions.PatientBookings || that.props.allowAllPermissions ? (\n                                               <PatientWalletLedger\n                                                 {...this.state}\n                                                 {...this.props}\n                                                 {...route}\n                                                 key={this.state.currentPatient ? this.state.currentPatient.id : null}\n                                               />\n                                             ) :\n                                               <PermissionDenied />)}\n                                    />\n                                  ) : null}\n\n                                <Route render={(route) =>\n                                    (this.state.currentPatient ? (\n                                        <Redirect\n                                          to={`/patient/${  this.state.currentPatient.id  }/profile`}\n                                        />\n                                      ) : (\n                                        <PatientProfile\n                                          {...this.state}\n                                          key={this.state.currentPatient}\n                                          setCurrentPatient={this.setCurrentPatient}\n                                          {...this.props}\n                                        />\n                                      ))}\n                                />\n\n\n                            </Switch>\n                        </Content>\n                    </Layout>\n                </Layout>\n            </Spin>\n</Content>\n)\n    }\n}\n\nexport default PatientHome;\n","import jsPDF from 'jspdf';\nimport \"jspdf-autotable\";\n\nexport const exportToExcel = function (columns, dataArray, fileName = \"download\") {\n    const str = makeCSVString(columns, dataArray);\n    downloadCSV(str, fileName)\n}\n\nexport const makeCSVString = function (columns, dataArray, printColumn = true) {\n    let str = '';\n    let line = [];\n    if (printColumn) {\n        columns.forEach(function (column) {\n            line.push(column);\n        });\n        str += line.join(',');\n        str += '\\r\\n';\n    }\n    dataArray.forEach(function (dataRow) {\n        line = [];\n        columns.forEach(function (column) {\n            if (dataRow[column])\n                line.push(dataRow[column]);\n            else\n                line.push('--');\n        });\n\n        str += line.join(',');\n        str += '\\r\\n';\n    });\n    return str;\n}\n\nexport const downloadCSV = function (str, fileName) {\n    const fName = `${fileName  }.csv`;\n    let cCode; const bArr = [];\n    bArr.push(255, 254);\n    for (let i = 0; i < str.length; ++i) {\n        cCode = str.charCodeAt(i);\n        // eslint-disable-next-line\n        bArr.push(cCode & 0xff);\n        // eslint-disable-next-line\n        bArr.push(cCode / 256 >>> 0);\n    }\n\n    const blob = new Blob([new Uint8Array(bArr)], {type: 'text/csv;charset=UTF-16LE;'});\n    if (navigator.msSaveBlob) {\n        navigator.msSaveBlob(blob, fName);\n    } else {\n        const link = document.createElement(\"a\");\n        if (link.download !== undefined) {\n            const url = window.URL.createObjectURL(blob);\n            link.setAttribute(\"href\", url);\n            link.setAttribute(\"download\", fName);\n            link.style.visibility = 'hidden';\n            document.body.appendChild(link);\n            link.click();\n            document.body.removeChild(link);\n            window.URL.revokeObjectURL(url);\n        }\n    }\n    // window.open(\"data:text/csv;charset=utf-8,\" + encodeURI(str));\n}\n\nexport const exportToPDF = function (columns, dataArray, fileName) {\n    // eslint-disable-next-line\n    const pdf = new jsPDF('p', 'mm', 'a4');\n    addPDFHeader(pdf);\n\n\n    const rows = Object.create(dataArray);\n    pdf.autoTable(columns, rows, {\n        margin: {top: 35},\n        startY: pdf.autoTableEndPosY() + 20,\n        headerStyle: {\n            overflow: 'linebreak'\n        },\n        bodyStyles: {\n            overflow: 'linebreak'\n        }\n    });\n    addPDFFooter(pdf);\n    pdf.save(`${fileName}.pdf`)\n}\n\nfunction addPDFHeader(pdf) {\n    pdf.line(10, 20, 200, 20);\n}\n\n\nfunction addPDFFooter(pdf) {\n    pdf.line(10, 270, 200, 270);\n    pdf.setFontSize(8);\n    pdf.text(10, 275, 'This is a computer generated report.');\n}\n","import React from \"react\";\nimport {Button, Col, Icon, Input, Modal, Row, Table, Tag} from \"antd\";\nimport moment from \"moment\";\nimport Highlighter from 'react-highlight-words';\nimport * as _ from \"lodash\";\nimport {exportToExcel, exportToPDF} from \"../../utils/export\";\nimport {interpolate} from \"../../utils/common\";\nimport {CLINIC_NOTES_PDF} from \"../../constants/api\";\nimport {sendMail} from \"../../utils/clinicUtils\";\n\nexport default class CustomizedTable extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            ...props,\n            searchText: '',\n        };\n        this.excelExport = this.excelExport.bind(this);\n        this.pdfExport = this.pdfExport.bind(this);\n    }\n\n    componentWillReceiveProps(newProps) {\n        if (newProps.columns != this.state.columns || newProps.dataSource != this.state.dataSource || newProps.loading != this.state.loading) {\n            this.setState({...newProps});\n        }\n    }\n\n    pdfExport() {\n        const that = this;\n        const excelColumns = [];\n            that.state.columns.forEach(function(item) {\n                if(!item.hideExport)\n                    excelColumns.push({title: item.title, dataKey: item.title})\n            });\n        const dataArrayForExcel = [];\n        that.state.dataSource.forEach(function (dataRow,index) {\n            const dataObjectToPush = {};\n            that.state.columns.forEach(function (column) {\n                if (column.export) {\n                    dataObjectToPush[column.title] = column.export(dataRow[column.dataIndex], dataRow,index);\n                } else {\n                    dataObjectToPush[column.title] = dataRow[column.dataIndex];\n                }\n            });\n            dataArrayForExcel.push(dataObjectToPush);\n        });\n        exportToPDF(excelColumns, dataArrayForExcel, `Export${  moment()}`, true);\n    }\n\n    excelExport() {\n        const that = this;\n        const excelColumns = [];\n        that.state.columns.forEach(function(item) {\n            if(!item.hideExport)\n                excelColumns.push(item.title)\n        });\n        const dataArrayForExcel = [];\n        that.state.dataSource.forEach(function (dataRow,index) {\n            const dataObjectToPush = {};\n            that.state.columns.forEach(function (column) {\n                if (column.export) {\n                    dataObjectToPush[column.title] = column.export(dataRow[column.dataIndex], dataRow,index);\n                } else {\n                    dataObjectToPush[column.title] = dataRow[column.dataIndex];\n                }\n            });\n            dataArrayForExcel.push(dataObjectToPush);\n        });\n        exportToExcel(excelColumns, dataArrayForExcel, `Export${  moment()}`);\n    }\n\n\n    getColumnSearchProps = dataIndex => ({\n        filterDropdown: ({setSelectedKeys, selectedKeys, confirm, clearFilters}) => (\n            <div style={{padding: 8}}>\n                <Input\n                  ref={node => {\n                        this.searchInput = node;\n                    }}\n                  placeholder={`Search ${dataIndex}`}\n                  value={selectedKeys[0]}\n                  onChange={e => setSelectedKeys(e.target.value ? [e.target.value] : [])}\n                  onPressEnter={() => this.handleSearch(selectedKeys, confirm)}\n                  style={{width: 188, marginBottom: 8, display: 'block'}}\n                />\n                <Button\n                  type=\"primary\"\n                  onClick={() => this.handleSearch(selectedKeys, confirm)}\n                  icon=\"search\"\n                  size=\"small\"\n                  style={{width: 90, marginRight: 8}}\n                >\n                    Search\n                </Button>\n                <Button onClick={() => this.handleReset(clearFilters)} size=\"small\" style={{width: 90}}>\n                    Reset\n                </Button>\n            </div>\n        ),\n        filterIcon: filtered => (<Icon type=\"search\" style={{color: filtered ? '#1890ff' : undefined}} />),\n        onFilter: (value, record) =>\n            record[dataIndex] != null ? record[dataIndex]\n                .toString()\n                .toLowerCase()\n                .includes(value.toLowerCase()) : '',\n        onFilterDropdownVisibleChange: visible => {\n            if (visible) {\n                setTimeout(() => this.searchInput.select());\n            }\n        },\n        render: text => (\n            <Highlighter\n              highlightStyle={{backgroundColor: '#ffc069', padding: 0}}\n              searchWords={[this.state.searchText]}\n              autoEscape\n              textToHighlight={text ? text.toString() : ''}\n            />\n        ),\n    });\n\n    handleSearch = (selectedKeys, confirm) => {\n        confirm();\n        this.setState({searchText: selectedKeys[0]});\n    };\n\n    handleReset = clearFilters => {\n        clearFilters();\n        this.setState({searchText: ''});\n    };\n\n    render() {\n        const that = this;\n        const columns = this.state.columns.map(item => {\n                if (!item.render)\n                    return {...item, ...that.getColumnSearchProps(item.dataIndex)}\n                return {...item};\n            }\n        )\n        return (\n<div>\n            {this.props.hideReport ? null : (\n                <Row>\n                    <Col>\n                        <Button.Group size=\"small\">\n                            <Button disabled={this.state.loading} type=\"primary\" onClick={this.excelExport}><Icon\n                              type=\"file-excel\"\n                            /> Excel\n                            </Button>\n                            <Button disabled={this.state.loading} type=\"primary\" onClick={this.pdfExport}><Icon\n                              type=\"file-pdf\"\n                            /> PDF\n                            </Button>\n\n                        </Button.Group>\n                    </Col>\n                </Row>\n              )}\n            <Row>\n                <Table\n                  pagination={{\n                    position: 'both',\n                    pageSizeOptions: ['10', '20', '30', '40', '50', '100'],\n                    showSizeChanger: true,\n                    showQuickJumper: true,\n                    size: \"small\",\n                    showTotal (total, range) {\n                        return <Tag>Showing <b>{range[0]}</b> to <b>{range[1]}</b> of <b>{total}</b> items</Tag>\n                    }\n                }}\n                  {...this.state}\n                  columns={columns}\n                />\n\n\n            </Row>\n</div>\n)\n    }\n\n}\n","import {Button, Row, Spin} from \"antd\";\nimport React from \"react\";\n\nexport default class InfiniteFeedLoaderButton extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            extraLoadingLabel: '',\n        }\n    }\n\n    startLoading = () => {\n        if (this.props.loaderFunction) {\n            this.props.loaderFunction();\n            this.startMakingExtraLabels();\n        }\n    }\n\n    startMakingExtraLabels = () => {\n        const that = this;\n        this.setState(function (prevState) {\n            if (prevState.extraLoadingLabel.length > 2) {\n                return {extraLoadingLabel: ''}\n            } \n                return {extraLoadingLabel: `${prevState.extraLoadingLabel  }.`}\n            \n        }, function () {\n            if (that.props.loading)\n                setTimeout(function () {\n                    that.startMakingExtraLabels();\n                }, 500)\n        })\n    }\n\n    render() {\n        if (this.props.loading) {\n            return (\n<Spin spinning={this.props.loading}>\n                <Row style={{minHeight: 200}} />\n</Spin>\n)\n        }\n        if (this.props.hidden) {\n            return (\n<Row>\n                <div style={{textAlign: 'center', margin: '15px 0px'}}>\n                    <small>No More Data Found</small>\n                </div>\n</Row>\n)\n        }\n        return (\n<Row>\n            <div style={{textAlign: 'center', margin: '15px 0px'}}>\n                <Button type=\"primary\" onClick={this.startLoading} loading={this.props.loading}>\n                    {this.props.loading ? `Loading${  this.state.extraLoadingLabel}` : 'Load More'}\n                </Button>\n            </div>\n</Row>\n)\n    }\n}\n","// TODO: remove this lint\n// SFC has specified a displayName, but not worked.\n/* eslint-disable react/display-name */\nimport * as React from 'react';\nimport LocaleProvider, { ANT_MARK } from '../locale-provider';\nimport LocaleReceiver from '../locale-provider/LocaleReceiver';\nimport { ConfigConsumer, ConfigContext } from './context';\nexport { ConfigConsumer };\nexport const configConsumerProps = [\n    'getPopupContainer',\n    'rootPrefixCls',\n    'getPrefixCls',\n    'renderEmpty',\n    'csp',\n    'autoInsertSpaceInButton',\n    'locale',\n    'pageHeader',\n];\nclass ConfigProvider extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.getPrefixCls = (suffixCls, customizePrefixCls) => {\n            const { prefixCls = 'ant' } = this.props;\n            if (customizePrefixCls)\n                return customizePrefixCls;\n            return suffixCls ? `${prefixCls}-${suffixCls}` : prefixCls;\n        };\n        this.renderProvider = (context, legacyLocale) => {\n            const { children, getPopupContainer, renderEmpty, csp, autoInsertSpaceInButton, locale, pageHeader, } = this.props;\n            const config = Object.assign(Object.assign({}, context), { getPrefixCls: this.getPrefixCls, csp,\n                autoInsertSpaceInButton });\n            if (getPopupContainer) {\n                config.getPopupContainer = getPopupContainer;\n            }\n            if (renderEmpty) {\n                config.renderEmpty = renderEmpty;\n            }\n            if (pageHeader) {\n                config.pageHeader = pageHeader;\n            }\n            return (<ConfigContext.Provider value={config}>\n        <LocaleProvider locale={locale || legacyLocale} _ANT_MARK__={ANT_MARK}>\n          {children}\n        </LocaleProvider>\n      </ConfigContext.Provider>);\n        };\n    }\n    render() {\n        return (<LocaleReceiver>\n        {(_, __, legacyLocale) => (<ConfigConsumer>\n            {context => this.renderProvider(context, legacyLocale)}\n          </ConfigConsumer>)}\n      </LocaleReceiver>);\n    }\n}\nexport default ConfigProvider;\n","import warning, { resetWarned } from 'rc-util/lib/warning';\nexport { resetWarned };\nexport default (valid, component, message) => {\n    warning(valid, `[antd: ${component}] ${message}`);\n};\n","import * as React from 'react';\nimport * as PropTypes from 'prop-types';\nimport defaultLocaleData from './default';\nexport default class LocaleReceiver extends React.Component {\n    getLocale() {\n        const { componentName, defaultLocale } = this.props;\n        const locale = defaultLocale || defaultLocaleData[componentName || 'global'];\n        const { antLocale } = this.context;\n        const localeFromContext = componentName && antLocale ? antLocale[componentName] : {};\n        return Object.assign(Object.assign({}, (typeof locale === 'function' ? locale() : locale)), (localeFromContext || {}));\n    }\n    getLocaleCode() {\n        const { antLocale } = this.context;\n        const localeCode = antLocale && antLocale.locale;\n        // Had use LocaleProvide but didn't set locale\n        if (antLocale && antLocale.exist && !localeCode) {\n            return defaultLocaleData.locale;\n        }\n        return localeCode;\n    }\n    render() {\n        return this.props.children(this.getLocale(), this.getLocaleCode(), this.context.antLocale);\n    }\n}\nLocaleReceiver.defaultProps = {\n    componentName: 'global',\n};\nLocaleReceiver.contextTypes = {\n    antLocale: PropTypes.object,\n};\n","import Pagination from 'rc-pagination/lib/locale/en_US';\nimport DatePicker from '../date-picker/locale/en_US';\nimport TimePicker from '../time-picker/locale/en_US';\nimport Calendar from '../calendar/locale/en_US';\nexport default {\n    locale: 'en',\n    Pagination,\n    DatePicker,\n    TimePicker,\n    Calendar,\n    global: {\n        placeholder: 'Please select',\n    },\n    Table: {\n        filterTitle: 'Filter menu',\n        filterConfirm: 'OK',\n        filterReset: 'Reset',\n        selectAll: 'Select current page',\n        selectInvert: 'Invert current page',\n        sortTitle: 'Sort',\n        expand: 'Expand row',\n        collapse: 'Collapse row',\n    },\n    Modal: {\n        okText: 'OK',\n        cancelText: 'Cancel',\n        justOkText: 'OK',\n    },\n    Popconfirm: {\n        okText: 'OK',\n        cancelText: 'Cancel',\n    },\n    Transfer: {\n        titles: ['', ''],\n        searchPlaceholder: 'Search here',\n        itemUnit: 'item',\n        itemsUnit: 'items',\n    },\n    Upload: {\n        uploading: 'Uploading...',\n        removeFile: 'Remove file',\n        uploadError: 'Upload error',\n        previewFile: 'Preview file',\n        downloadFile: 'Download file',\n    },\n    Empty: {\n        description: 'No Data',\n    },\n    Icon: {\n        icon: 'icon',\n    },\n    Text: {\n        edit: 'Edit',\n        copy: 'Copy',\n        copied: 'Copied',\n        expand: 'Expand',\n    },\n    PageHeader: {\n        back: 'Back',\n    },\n};\n","import CalendarLocale from 'rc-calendar/lib/locale/en_US';\nimport TimePickerLocale from '../../time-picker/locale/en_US';\n// Merge into a locale object\nconst locale = {\n    lang: Object.assign({ placeholder: 'Select date', rangePlaceholder: ['Start date', 'End date'] }, CalendarLocale),\n    timePickerLocale: Object.assign({}, TimePickerLocale),\n};\n// All settings at:\n// https://github.com/ant-design/ant-design/blob/master/components/date-picker/locale/example.json\nexport default locale;\n","const locale = {\n    placeholder: 'Select time',\n};\nexport default locale;\n","import locale from '../locale/default';\nexport default locale;\n","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports['default'] = {\n  // Options.jsx\n  items_per_page: '/ page',\n  jump_to: 'Go to',\n  jump_to_confirm: 'confirm',\n  page: '',\n\n  // Pagination.jsx\n  prev_page: 'Previous Page',\n  next_page: 'Next Page',\n  prev_5: 'Previous 5 Pages',\n  next_5: 'Next 5 Pages',\n  prev_3: 'Previous 3 Pages',\n  next_3: 'Next 3 Pages'\n};\nmodule.exports = exports['default'];","'use strict';\n\nexports.__esModule = true;\nexports['default'] = {\n  today: 'Today',\n  now: 'Now',\n  backToToday: 'Back to today',\n  ok: 'Ok',\n  clear: 'Clear',\n  month: 'Month',\n  year: 'Year',\n  timeSelect: 'select time',\n  dateSelect: 'select date',\n  weekSelect: 'Choose a week',\n  monthSelect: 'Choose a month',\n  yearSelect: 'Choose a year',\n  decadeSelect: 'Choose a decade',\n  yearFormat: 'YYYY',\n  dateFormat: 'M/D/YYYY',\n  dayFormat: 'D',\n  dateTimeFormat: 'M/D/YYYY HH:mm:ss',\n  monthBeforeYear: true,\n  previousMonth: 'Previous month (PageUp)',\n  nextMonth: 'Next month (PageDown)',\n  previousYear: 'Last year (Control + left)',\n  nextYear: 'Next year (Control + right)',\n  previousDecade: 'Last decade',\n  nextDecade: 'Next decade',\n  previousCentury: 'Last century',\n  nextCentury: 'Next century'\n};\nmodule.exports = exports['default'];","import en_US from '../../date-picker/locale/en_US';\nexport default en_US;\n","import * as React from 'react';\nimport * as PropTypes from 'prop-types';\nimport * as moment from 'moment';\nimport interopDefault from '../_util/interopDefault';\nimport { changeConfirmLocale } from '../modal/locale';\nimport warning from '../_util/warning';\nexport const ANT_MARK = 'internalMark';\nfunction setMomentLocale(locale) {\n    if (locale && locale.locale) {\n        interopDefault(moment).locale(locale.locale);\n    }\n    else {\n        interopDefault(moment).locale('en');\n    }\n}\nexport default class LocaleProvider extends React.Component {\n    constructor(props) {\n        super(props);\n        setMomentLocale(props.locale);\n        changeConfirmLocale(props.locale && props.locale.Modal);\n        warning(props._ANT_MARK__ === ANT_MARK, 'LocaleProvider', '`LocaleProvider` is deprecated. Please use `locale` with `ConfigProvider` instead: http://u.ant.design/locale');\n    }\n    getChildContext() {\n        return {\n            antLocale: Object.assign(Object.assign({}, this.props.locale), { exist: true }),\n        };\n    }\n    componentDidUpdate(prevProps) {\n        const { locale } = this.props;\n        if (prevProps.locale !== locale) {\n            setMomentLocale(locale);\n            changeConfirmLocale(locale && locale.Modal);\n        }\n    }\n    componentWillUnmount() {\n        changeConfirmLocale();\n    }\n    render() {\n        return this.props.children;\n    }\n}\nLocaleProvider.propTypes = {\n    locale: PropTypes.object,\n};\nLocaleProvider.defaultProps = {\n    locale: {},\n};\nLocaleProvider.childContextTypes = {\n    antLocale: PropTypes.object,\n};\n","// https://github.com/moment/moment/issues/3650\n// since we are using ts 3.5.1, it should be safe to remove.\nexport default function interopDefault(m) {\n    return m.default || m;\n}\n","import defaultLocale from '../locale/default';\nlet runtimeLocale = Object.assign({}, defaultLocale.Modal);\nexport function changeConfirmLocale(newLocale) {\n    if (newLocale) {\n        runtimeLocale = Object.assign(Object.assign({}, runtimeLocale), newLocale);\n    }\n    else {\n        runtimeLocale = Object.assign({}, defaultLocale.Modal);\n    }\n}\nexport function getConfirmLocale() {\n    return runtimeLocale;\n}\n","import * as React from 'react';\nimport createReactContext from '@ant-design/create-react-context';\nimport defaultRenderEmpty from './renderEmpty';\nexport const ConfigContext = createReactContext({\n    // We provide a default function for Context without provider\n    getPrefixCls: (suffixCls, customizePrefixCls) => {\n        if (customizePrefixCls)\n            return customizePrefixCls;\n        return `ant-${suffixCls}`;\n    },\n    renderEmpty: defaultRenderEmpty,\n});\nexport const ConfigConsumer = ConfigContext.Consumer;\nexport function withConfigConsumer(config) {\n    return function withConfigConsumerFunc(Component) {\n        // Wrap with ConfigConsumer. Since we need compatible with react 15, be care when using ref methods\n        const SFC = ((props) => (<ConfigConsumer>\n        {(configProps) => {\n            const { prefixCls: basicPrefixCls } = config;\n            const { getPrefixCls } = configProps;\n            const { prefixCls: customizePrefixCls } = props;\n            const prefixCls = getPrefixCls(basicPrefixCls, customizePrefixCls);\n            return <Component {...configProps} {...props} prefixCls={prefixCls}/>;\n        }}\n      </ConfigConsumer>));\n        const cons = Component.constructor;\n        const name = (cons && cons.displayName) || Component.name || 'Component';\n        SFC.displayName = `withConfigConsumer(${name})`;\n        return SFC;\n    };\n}\n","import * as React from 'react';\nimport Empty from '../empty';\nimport { ConfigConsumer } from '.';\nconst renderEmpty = (componentName) => (<ConfigConsumer>\n    {({ getPrefixCls }) => {\n    const prefix = getPrefixCls('empty');\n    switch (componentName) {\n        case 'Table':\n        case 'List':\n            return <Empty image={Empty.PRESENTED_IMAGE_SIMPLE}/>;\n        case 'Select':\n        case 'TreeSelect':\n        case 'Cascader':\n        case 'Transfer':\n        case 'Mentions':\n            return <Empty image={Empty.PRESENTED_IMAGE_SIMPLE} className={`${prefix}-small`}/>;\n        default:\n            return <Empty />;\n    }\n}}\n  </ConfigConsumer>);\nexport default renderEmpty;\n","var __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nimport * as React from 'react';\nimport classNames from 'classnames';\nimport { ConfigConsumer } from '../config-provider';\nimport LocaleReceiver from '../locale-provider/LocaleReceiver';\nimport DefaultEmptyImg from './empty';\nimport SimpleEmptyImg from './simple';\nconst defaultEmptyImg = <DefaultEmptyImg />;\nconst simpleEmptyImg = <SimpleEmptyImg />;\nconst Empty = (props) => (<ConfigConsumer>\n    {({ getPrefixCls }) => {\n    const { className, prefixCls: customizePrefixCls, image = defaultEmptyImg, description, children, imageStyle } = props, restProps = __rest(props, [\"className\", \"prefixCls\", \"image\", \"description\", \"children\", \"imageStyle\"]);\n    return (<LocaleReceiver componentName=\"Empty\">\n          {(locale) => {\n        const prefixCls = getPrefixCls('empty', customizePrefixCls);\n        const des = typeof description !== 'undefined' ? description : locale.description;\n        const alt = typeof des === 'string' ? des : 'empty';\n        let imageNode = null;\n        if (typeof image === 'string') {\n            imageNode = <img alt={alt} src={image}/>;\n        }\n        else {\n            imageNode = image;\n        }\n        return (<div className={classNames(prefixCls, {\n            [`${prefixCls}-normal`]: image === simpleEmptyImg,\n        }, className)} {...restProps}>\n                <div className={`${prefixCls}-image`} style={imageStyle}>\n                  {imageNode}\n                </div>\n                {des && <p className={`${prefixCls}-description`}>{des}</p>}\n                {children && <div className={`${prefixCls}-footer`}>{children}</div>}\n              </div>);\n    }}\n        </LocaleReceiver>);\n}}\n  </ConfigConsumer>);\nEmpty.PRESENTED_IMAGE_DEFAULT = defaultEmptyImg;\nEmpty.PRESENTED_IMAGE_SIMPLE = simpleEmptyImg;\nexport default Empty;\n","import * as React from 'react';\nconst Empty = () => (<svg width=\"184\" height=\"152\" viewBox=\"0 0 184 152\" xmlns=\"http://www.w3.org/2000/svg\">\n    <g fill=\"none\" fillRule=\"evenodd\">\n      <g transform=\"translate(24 31.67)\">\n        <ellipse fillOpacity=\".8\" fill=\"#F5F5F7\" cx=\"67.797\" cy=\"106.89\" rx=\"67.797\" ry=\"12.668\"/>\n        <path d=\"M122.034 69.674L98.109 40.229c-1.148-1.386-2.826-2.225-4.593-2.225h-51.44c-1.766 0-3.444.839-4.592 2.225L13.56 69.674v15.383h108.475V69.674z\" fill=\"#AEB8C2\"/>\n        <path d=\"M101.537 86.214L80.63 61.102c-1.001-1.207-2.507-1.867-4.048-1.867H31.724c-1.54 0-3.047.66-4.048 1.867L6.769 86.214v13.792h94.768V86.214z\" fill=\"url(#linearGradient-1)\" transform=\"translate(13.56)\"/>\n        <path d=\"M33.83 0h67.933a4 4 0 0 1 4 4v93.344a4 4 0 0 1-4 4H33.83a4 4 0 0 1-4-4V4a4 4 0 0 1 4-4z\" fill=\"#F5F5F7\"/>\n        <path d=\"M42.678 9.953h50.237a2 2 0 0 1 2 2V36.91a2 2 0 0 1-2 2H42.678a2 2 0 0 1-2-2V11.953a2 2 0 0 1 2-2zM42.94 49.767h49.713a2.262 2.262 0 1 1 0 4.524H42.94a2.262 2.262 0 0 1 0-4.524zM42.94 61.53h49.713a2.262 2.262 0 1 1 0 4.525H42.94a2.262 2.262 0 0 1 0-4.525zM121.813 105.032c-.775 3.071-3.497 5.36-6.735 5.36H20.515c-3.238 0-5.96-2.29-6.734-5.36a7.309 7.309 0 0 1-.222-1.79V69.675h26.318c2.907 0 5.25 2.448 5.25 5.42v.04c0 2.971 2.37 5.37 5.277 5.37h34.785c2.907 0 5.277-2.421 5.277-5.393V75.1c0-2.972 2.343-5.426 5.25-5.426h26.318v33.569c0 .617-.077 1.216-.221 1.789z\" fill=\"#DCE0E6\"/>\n      </g>\n      <path d=\"M149.121 33.292l-6.83 2.65a1 1 0 0 1-1.317-1.23l1.937-6.207c-2.589-2.944-4.109-6.534-4.109-10.408C138.802 8.102 148.92 0 161.402 0 173.881 0 184 8.102 184 18.097c0 9.995-10.118 18.097-22.599 18.097-4.528 0-8.744-1.066-12.28-2.902z\" fill=\"#DCE0E6\"/>\n      <g transform=\"translate(149.65 15.383)\" fill=\"#FFF\">\n        <ellipse cx=\"20.654\" cy=\"3.167\" rx=\"2.849\" ry=\"2.815\"/>\n        <path d=\"M5.698 5.63H0L2.898.704zM9.259.704h4.985V5.63H9.259z\"/>\n      </g>\n    </g>\n  </svg>);\nexport default Empty;\n","import * as React from 'react';\nconst Simple = () => (<svg width=\"64\" height=\"41\" viewBox=\"0 0 64 41\" xmlns=\"http://www.w3.org/2000/svg\">\n    <g transform=\"translate(0 1)\" fill=\"none\" fillRule=\"evenodd\">\n      <ellipse fill=\"#F5F5F5\" cx=\"32\" cy=\"33\" rx=\"32\" ry=\"7\"/>\n      <g fillRule=\"nonzero\" stroke=\"#D9D9D9\">\n        <path d=\"M55 12.76L44.854 1.258C44.367.474 43.656 0 42.907 0H21.093c-.749 0-1.46.474-1.947 1.257L9 12.761V22h46v-9.24z\"/>\n        <path d=\"M41.613 15.931c0-1.605.994-2.93 2.227-2.931H55v18.137C55 33.26 53.68 35 52.05 35h-40.1C10.32 35 9 33.259 9 31.137V13h11.16c1.233 0 2.227 1.323 2.227 2.928v.022c0 1.605 1.005 2.901 2.237 2.901h14.752c1.232 0 2.237-1.308 2.237-2.913v-.007z\" fill=\"#FAFAFA\"/>\n      </g>\n    </g>\n  </svg>);\nexport default Simple;\n","import '../../style/index.less';\nimport './index.less';\n","import * as React from 'react';\nimport * as PropTypes from 'prop-types';\nimport RcSwitch from 'rc-switch';\nimport classNames from 'classnames';\nimport omit from 'omit.js';\nimport Wave from '../_util/wave';\nimport Icon from '../icon';\nimport { ConfigConsumer } from '../config-provider';\nimport warning from '../_util/warning';\nexport default class Switch extends React.Component {\n    constructor(props) {\n        super(props);\n        this.saveSwitch = (node) => {\n            this.rcSwitch = node;\n        };\n        this.renderSwitch = ({ getPrefixCls }) => {\n            const { prefixCls: customizePrefixCls, size, loading, className = '', disabled } = this.props;\n            const prefixCls = getPrefixCls('switch', customizePrefixCls);\n            const classes = classNames(className, {\n                [`${prefixCls}-small`]: size === 'small',\n                [`${prefixCls}-loading`]: loading,\n            });\n            const loadingIcon = loading ? (<Icon type=\"loading\" className={`${prefixCls}-loading-icon`}/>) : null;\n            return (<Wave insertExtraNode>\n        <RcSwitch {...omit(this.props, ['loading'])} prefixCls={prefixCls} className={classes} disabled={disabled || loading} ref={this.saveSwitch} loadingIcon={loadingIcon}/>\n      </Wave>);\n        };\n        warning('checked' in props || !('value' in props), 'Switch', '`value` is not validate prop, do you mean `checked`?');\n    }\n    focus() {\n        this.rcSwitch.focus();\n    }\n    blur() {\n        this.rcSwitch.blur();\n    }\n    render() {\n        return <ConfigConsumer>{this.renderSwitch}</ConfigConsumer>;\n    }\n}\nSwitch.__ANT_SWITCH = true;\nSwitch.propTypes = {\n    prefixCls: PropTypes.string,\n    // HACK: https://github.com/ant-design/ant-design/issues/5368\n    // size=default and size=large are the same\n    size: PropTypes.oneOf(['small', 'default', 'large']),\n    className: PropTypes.string,\n};\n","module.exports = require('./Switch');","function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (typeof call === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { polyfill } from 'react-lifecycles-compat';\n\nvar classNames = require('classnames');\n\nvar Switch =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Switch, _Component);\n\n  function Switch(props) {\n    var _this;\n\n    _classCallCheck(this, Switch);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Switch).call(this, props));\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"handleClick\", function (e) {\n      var checked = _this.state.checked;\n      var onClick = _this.props.onClick;\n      var newChecked = !checked;\n\n      _this.setChecked(newChecked, e);\n\n      if (onClick) {\n        onClick(newChecked, e);\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"handleKeyDown\", function (e) {\n      if (e.keyCode === 37) {\n        // Left\n        _this.setChecked(false, e);\n      } else if (e.keyCode === 39) {\n        // Right\n        _this.setChecked(true, e);\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"handleMouseUp\", function (e) {\n      var onMouseUp = _this.props.onMouseUp;\n\n      if (_this.node) {\n        _this.node.blur();\n      }\n\n      if (onMouseUp) {\n        onMouseUp(e);\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"saveNode\", function (node) {\n      _this.node = node;\n    });\n\n    var _checked = false;\n\n    if ('checked' in props) {\n      _checked = !!props.checked;\n    } else {\n      _checked = !!props.defaultChecked;\n    }\n\n    _this.state = {\n      checked: _checked\n    };\n    return _this;\n  }\n\n  _createClass(Switch, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this$props = this.props,\n          autoFocus = _this$props.autoFocus,\n          disabled = _this$props.disabled;\n\n      if (autoFocus && !disabled) {\n        this.focus();\n      }\n    }\n  }, {\n    key: \"setChecked\",\n    value: function setChecked(checked, e) {\n      var _this$props2 = this.props,\n          disabled = _this$props2.disabled,\n          onChange = _this$props2.onChange;\n\n      if (disabled) {\n        return;\n      }\n\n      if (!('checked' in this.props)) {\n        this.setState({\n          checked: checked\n        });\n      }\n\n      if (onChange) {\n        onChange(checked, e);\n      }\n    }\n  }, {\n    key: \"focus\",\n    value: function focus() {\n      this.node.focus();\n    }\n  }, {\n    key: \"blur\",\n    value: function blur() {\n      this.node.blur();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _classNames;\n\n      var _this$props3 = this.props,\n          className = _this$props3.className,\n          prefixCls = _this$props3.prefixCls,\n          disabled = _this$props3.disabled,\n          loadingIcon = _this$props3.loadingIcon,\n          checkedChildren = _this$props3.checkedChildren,\n          unCheckedChildren = _this$props3.unCheckedChildren,\n          restProps = _objectWithoutProperties(_this$props3, [\"className\", \"prefixCls\", \"disabled\", \"loadingIcon\", \"checkedChildren\", \"unCheckedChildren\"]);\n\n      var checked = this.state.checked;\n      var switchClassName = classNames((_classNames = {}, _defineProperty(_classNames, className, !!className), _defineProperty(_classNames, prefixCls, true), _defineProperty(_classNames, \"\".concat(prefixCls, \"-checked\"), checked), _defineProperty(_classNames, \"\".concat(prefixCls, \"-disabled\"), disabled), _classNames));\n      return React.createElement(\"button\", _extends({}, restProps, {\n        type: \"button\",\n        role: \"switch\",\n        \"aria-checked\": checked,\n        disabled: disabled,\n        className: switchClassName,\n        ref: this.saveNode,\n        onKeyDown: this.handleKeyDown,\n        onClick: this.handleClick,\n        onMouseUp: this.handleMouseUp\n      }), loadingIcon, React.createElement(\"span\", {\n        className: \"\".concat(prefixCls, \"-inner\")\n      }, checked ? checkedChildren : unCheckedChildren));\n    }\n  }], [{\n    key: \"getDerivedStateFromProps\",\n    value: function getDerivedStateFromProps(nextProps) {\n      var newState = {};\n      var checked = nextProps.checked;\n\n      if ('checked' in nextProps) {\n        newState.checked = !!checked;\n      }\n\n      return newState;\n    }\n  }]);\n\n  return Switch;\n}(Component);\n\nSwitch.propTypes = {\n  className: PropTypes.string,\n  prefixCls: PropTypes.string,\n  disabled: PropTypes.bool,\n  checkedChildren: PropTypes.any,\n  unCheckedChildren: PropTypes.any,\n  onChange: PropTypes.func,\n  onMouseUp: PropTypes.func,\n  onClick: PropTypes.func,\n  tabIndex: PropTypes.number,\n  checked: PropTypes.bool,\n  defaultChecked: PropTypes.bool,\n  autoFocus: PropTypes.bool,\n  loadingIcon: PropTypes.node\n};\nSwitch.defaultProps = {\n  prefixCls: 'rc-switch',\n  checkedChildren: null,\n  unCheckedChildren: null,\n  className: '',\n  defaultChecked: false\n};\npolyfill(Switch);\nexport default Switch;","import React from \"react\";\nimport {Card, Col, DatePicker, Icon, Row, Select, Statistic, Typography} from \"antd\";\nimport moment from \"moment\";\nimport CustomizedTable from \"../../common/CustomizedTable\";\nimport {getAPI, interpolate} from \"../../../utils/common\";\nimport {AGENT_WALLET, MY_AGENTS, WALLET_LEDGER, WALLET_LEDGER_SUM} from \"../../../constants/api\";\nimport InfiniteFeedLoaderButton from \"../../common/InfiniteFeedLoaderButton\";\n\nconst {Text} = Typography;\nexport default class PatientWalletLedger extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            ledger: [],\n            ledgerDetails:{},\n            loading: false,\n            walletAmount: null,\n            selectedStartDate: moment().subtract(1, 'month'),\n            selectedEndDate: moment(),\n            agents: [],\n            selectedAgents: []\n        }\n    }\n\n    componentDidMount() {\n        this.loadData();\n        this.loadPatientWallet();\n        this.loadAgents();\n        this.loadSumData();\n    }\n\n    loadPatientWallet = () => {\n        const that = this;\n        if (this.props.currentPatient && this.props.currentPatient.id) {\n            const successFn = function (data) {\n                if (data.length)\n                    that.setState({\n                        walletAmount: data[0]\n                    })\n            }\n            const errorFn = function () {\n\n            }\n            getAPI(interpolate(AGENT_WALLET, [this.props.currentPatient.id]), successFn, errorFn);\n        } else {\n            this.setState({\n                pendingAmount: null\n            })\n        }\n    }\n\n    loadData = (page = 1) => {\n        const that = this;\n        this.setState({\n            loading: true\n        })\n        const successFn = function (data) {\n            if (data.current == 1) {\n                that.setState({\n                    ledger: data.results,\n                    loading: false,\n                    nextPage: data.next\n                })\n            } else {\n                that.setState(function (prevState) {\n                    return {\n                        ledger: [...prevState.ledger, ...data.results],\n                        loading: false,\n                        nextPage: data.next\n                    }\n                })\n            }\n        }\n        const errorFn = function () {\n            that.setState({\n                loading: false\n            })\n        }\n        const params = {\n            page,\n            start: this.state.selectedStartDate.startOf('day').format(),\n            end: this.state.selectedEndDate.endOf('day').format(),\n            agents: this.state.selectedAgents.join(',')\n        }\n        if (this.state.selectedAgents)\n            params.agents = this.state.selectedAgents.join(',');\n        getAPI(interpolate(WALLET_LEDGER, [this.props.currentPatient.id]), successFn, errorFn, params);\n    }\n\n    loadSumData = (page = 1) => {\n        const that = this;\n\n        const successFn = function (data) {\n                that.setState({\n                    ledgerDetails: data,\n                    nextPage: data.next\n                })\n\n        }\n        const errorFn = function () {\n        }\n        const params = {\n            page,\n            start: this.state.selectedStartDate.format(),\n            end: this.state.selectedEndDate.format(),\n            agents: this.state.selectedAgents.join(',')\n        }\n        if (this.state.selectedAgents)\n            params.agents = this.state.selectedAgents.join(',');\n        getAPI(interpolate(WALLET_LEDGER_SUM, [this.props.currentPatient.id]), successFn, errorFn, params);\n    }\n\n    loadAgents() {\n        const that = this;\n        const successFn = function (data) {\n            that.setState({\n                agents: data,\n            })\n        };\n        const errorFn = function () {\n        };\n        const apiParams = {\n            agent: true,\n            pagination: false\n        }\n        getAPI(interpolate(MY_AGENTS, [this.props.currentPatient.id]), successFn, errorFn, apiParams);\n    }\n\n    changeExpenseFilters = (type, value) => {\n        const that = this;\n        this.setState({\n            [type]: value\n        }, function () {\n            that.loadData(1);\n        })\n    }\n\n    render() {\n        const columns = [{\n            title: 'Date',\n            dataIndex: 'created_at',\n            key: 'created_at',\n            render: (value) => moment(value).format('LLL')\n        }, {\n            title: 'Patient',\n            dataIndex: 'received_from',\n            key: 'received_from',\n            render: (value, record) => value ? <Text>{value.user.first_name} ({value.custom_id})</Text> : '--'\n        }, , {\n            title: 'Refered By',\n            dataIndex: 'received_from.user.referer_data',\n            key: 'received_from.user.referer_data',\n            render: (value, record) => value && value.referer ? <Text>{value.referer.first_name} ({value.custom_id})</Text> : '--'\n        }, {\n            title: 'Ledger Comment',\n            dataIndex: 'comments',\n            key: 'comments',\n            render: (value, record) => record.is_cancelled ? <Text delete>{value}</Text> : value\n        },\n            //     {\n            //     title: 'Amount Type',\n            //     dataIndex: 'amount_type',\n            //     key: 'amount_type',\n            //     render: (value, record) => record.is_cancelled ? <Text delete>{value}</Text> : value\n            // },\n            {\n                title: 'Cr/Dr',\n                dataIndex: 'ledger_type',\n                key: 'ledger_type',\n                render: (value, record) => record.is_cancelled ? <Text delete>{value}</Text> : value\n            }, {\n                title: 'Amount',\n                dataIndex: 'amount',\n                key: 'amount',\n                render: (value, record) => record.is_cancelled ?\n                    <Text delete>{value.toFixed(2)}</Text> : value.toFixed(2)\n            }];\n        return (\n<div>\n            <Card title=\"Wallet Ledger\">\n                <Row gutter={16} style={{marginBottom: 10}}>\n                    <Col span={2} style={{textAlign: \"right\"}}>\n                        <b> Agents</b>\n                    </Col>\n                    <Col span={4}>\n                        <Select\n                          style={{width: '100%'}}\n                          value={this.state.selectedAgents}\n                          mode=\"multiple\"\n                          disabled={this.state.loading}\n                          onChange={(value) => this.changeExpenseFilters('selectedAgents', value)}\n                        >\n                            {this.state.agents.map(item => (\n<Select.Option\n  value={item.id}\n>{item.user.first_name}\n</Select.Option>\n))}\n                        </Select>\n                    </Col>\n                    {/* <Col span={2} style={{textAlign: \"right\"}}> */}\n                    {/*    <b> Payment Modes</b> */}\n                    {/* </Col> */}\n                    {/* <Col span={4}> */}\n                    {/*    <Select style={{width: '100%'}} value={this.state.selectedPaymentMode} */}\n                    {/*            disabled={this.state.loading} */}\n                    {/*            onChange={(value) => this.changeExpenseFilters('selectedPaymentMode', value)}> */}\n                    {/*        <Select.Option value={null}>--ALL PAYMENT MODE--</Select.Option> */}\n                    {/*        {this.state.paymentModes.map(item => <Select.Option */}\n                    {/*            value={item.id}>{item.mode}</Select.Option>)} */}\n                    {/*    </Select> */}\n                    {/* </Col> */}\n\n                    <Col span={2} style={{textAlign: \"right\"}}>\n                        <b> From</b>\n                    </Col>\n                    <Col span={4}>\n                        <DatePicker\n                          value={this.state.selectedStartDate}\n                          disabled={this.state.loading}\n                          allowClear={false}\n                          onChange={(value) => this.changeExpenseFilters('selectedStartDate', value)}\n                        />\n                    </Col>\n                    <Col span={2} style={{textAlign: \"right\"}}>\n                        <b> To</b>\n                    </Col>\n                    <Col span={4}>\n                        <DatePicker\n                          value={this.state.selectedEndDate}\n                          disabled={this.state.loading}\n                          allowClear={false}\n                          onChange={(value) => this.changeExpenseFilters('selectedEndDate', value)}\n                        />\n                    </Col>\n                </Row>\n                {this.state.walletAmount ? (\n                    <Row style={{textAlign: 'center', marginBottom: 10}}>\n                        {/* <Col span={12}> */}\n                        {/*    <Statistic title={\"\"} prefix={<Icon type={\"wallet\"}/>} */}\n                        {/*               value={this.state.walletAmount.refundable_amount}/> */}\n                        {/* </Col> */}\n                        <Col span={24}>\n                            <Statistic\n                              title=\"Wallet Total\"\n                              prefix={<Icon type=\"wallet\" />}\n                              value={this.state.walletAmount.non_refundable}\n                              precision={2}\n                            />\n                        </Col>\n                    </Row>\n                  ) : null}\n                <CustomizedTable\n                  dataSource={this.state.ledger}\n                  loading={this.state.loading}\n                  columns={columns}\n                  hideReport\n                  pagination={false}\n                />\n                <InfiniteFeedLoaderButton\n                  loading={this.state.loading}\n                  hidden={!this.state.nextPage}\n                  loaderFunction={() => this.loadData(this.state.nextPage)}\n                />\n                <Row style={{textAlign: 'center', marginBottom: 10}}>\n                    <Col span={8}>\n                        <Statistic title=\"Credit\" value={this.state.ledgerDetails.credit} precision={2} />\n                    </Col>\n                    <Col span={8}>\n                        <Statistic title=\"Debit\" value={this.state.ledgerDetails.debit} precision={2} />\n                    </Col>\n                    <Col span={8}>\n                        <Statistic title=\"Profit\" value={this.state.ledgerDetails.credit-this.state.ledgerDetails.debit} precision={2} />\n                    </Col>\n                </Row>\n            </Card>\n</div>\n)\n    }\n}\n"],"sourceRoot":""}