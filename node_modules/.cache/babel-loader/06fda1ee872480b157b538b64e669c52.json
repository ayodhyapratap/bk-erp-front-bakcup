{"ast":null,"code":"import _classCallCheck from \"/home/shivam/WorkSpace/bk-erp-front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/shivam/WorkSpace/bk-erp-front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/shivam/WorkSpace/bk-erp-front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/shivam/WorkSpace/bk-erp-front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/shivam/WorkSpace/bk-erp-front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/home/shivam/WorkSpace/bk-erp-front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/home/shivam/WorkSpace/bk-erp-front/src/app/components/patients/treatmentPlans/AddorEditPatientTreatmentPlans.js\";\nimport React from \"react\";\nimport { Route } from \"react-router\";\nimport DynamicFieldsForm from \"../../common/DynamicFieldsForm\";\nimport { Button, Card, Form, Icon, Row } from \"antd\";\nimport { CHECKBOX_FIELD, DATE_PICKER, SINGLE_CHECKBOX_FIELD, NUMBER_FIELD, SUCCESS_MSG_TYPE, INPUT_FIELD, RADIO_FIELD, SELECT_FIELD } from \"../../../constants/dataKeys\";\nimport { TREATMENTPLANS_API, PROCEDURE_CATEGORY, ALL_TREATMENTPLANS_API, PRODUCT_MARGIN } from \"../../../constants/api\";\nimport { getAPI, interpolate, displayMessage } from \"../../../utils/common\";\nimport { Redirect } from 'react-router-dom';\nimport moment from 'moment';\n\nvar AddorEditPatientTreatmentPlans =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(AddorEditPatientTreatmentPlans, _React$Component);\n\n  function AddorEditPatientTreatmentPlans(props) {\n    var _this;\n\n    _classCallCheck(this, AddorEditPatientTreatmentPlans);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(AddorEditPatientTreatmentPlans).call(this, props));\n    _this.state = {\n      redirect: false,\n      vitalSign: null,\n      procedure_category: _this.props.procedure_category ? _this.props.procedure_category : null,\n      editTreatmentPlan: _this.props.editTreatmentPlan ? _this.props.editTreatmentPlan : null\n    };\n    _this.changeRedirect = _this.changeRedirect.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.loadDrugCatalog = _this.loadDrugCatalog.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(AddorEditPatientTreatmentPlans, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.loadProductMargin();\n      this.loadDrugCatalog();\n    }\n  }, {\n    key: \"loadProductMargin\",\n    value: function loadProductMargin() {\n      var that = this;\n\n      var successFn = function successFn(data) {\n        that.setState({\n          productMargin: data\n        });\n      };\n\n      var errorFn = function errorFn() {};\n\n      getAPI(PRODUCT_MARGIN, successFn, errorFn);\n    }\n  }, {\n    key: \"loadDrugCatalog\",\n    value: function loadDrugCatalog() {\n      if (this.state.procedure_category == null) {\n        var that = this;\n\n        var successFn = function successFn(data) {\n          that.setState({\n            procedure_category: data\n          });\n        };\n\n        var errorFn = function errorFn() {};\n\n        getAPI(interpolate(PROCEDURE_CATEGORY, [this.props.active_practiceId]), successFn, errorFn);\n      }\n    }\n  }, {\n    key: \"changeRedirect\",\n    value: function changeRedirect() {\n      var redirectVar = this.state.redirect;\n      this.setState({\n        redirect: !redirectVar\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var drugOption = [];\n\n      if (this.state.procedure_category) {\n        this.state.procedure_category.forEach(function (drug) {\n          drugOption.push({\n            label: drug.name,\n            value: drug.id\n          });\n        });\n      }\n\n      var fields = [{\n        label: \"Procedure\",\n        key: \"procedure\",\n        type: SELECT_FIELD,\n        initialValue: this.state.editTreatmentPlan ? this.state.editTreatmentPlan.procedure : null,\n        options: drugOption\n      }, {\n        label: \"Quantity\",\n        key: \"qunatity\",\n        required: true,\n        initialValue: this.state.editTreatmentPlan ? this.state.editTreatmentPlan.qunatity : null,\n        type: INPUT_FIELD\n      }, {\n        label: \"cost\",\n        key: \"cost\",\n        initialValue: this.state.editTreatmentPlan ? this.state.editTreatmentPlan.cost : null,\n        type: INPUT_FIELD\n      }, {\n        label: 'MLM Margin Type',\n        type: SELECT_FIELD,\n        initialValue: this.state.editFields ? this.state.editFields.margin : null,\n        key: 'margin',\n        required: true,\n        options: this.state.productMargin.map(function (margin) {\n          return {\n            label: margin.name,\n            value: margin.id\n          };\n        })\n      }, {\n        label: \"total\",\n        key: \"total\",\n        initialValue: this.state.editTreatmentPlan ? this.state.editTreatmentPlan.total : null,\n        type: INPUT_FIELD\n      }, {\n        label: \"active\",\n        key: \"is_active\",\n        initialValue: this.state.editTreatmentPlan ? this.state.editTreatmentPlan.is_active : false,\n        type: SINGLE_CHECKBOX_FIELD\n      }, {\n        label: \"Completed\",\n        key: \"is_completed\",\n        initialValue: this.state.editTreatmentPlan ? this.state.editTreatmentPlan.is_completed : false,\n        type: SINGLE_CHECKBOX_FIELD\n      }];\n      var formProp = {\n        successFn: function successFn(data) {\n          displayMessage(SUCCESS_MSG_TYPE, \"success\");\n          console.log(data);\n        },\n        errorFn: function errorFn() {},\n        action: interpolate(TREATMENTPLANS_API, [this.props.match.params.id]),\n        method: \"post\"\n      };\n      var TestFormLayout = Form.create()(DynamicFieldsForm);\n      var defaultValues = [{\n        \"key\": \"practice\",\n        \"value\": this.props.active_practiceId\n      }];\n      if (this.state.editTreatmentPlan) defaultValues.push({\n        \"key\": \"id\",\n        \"value\": this.props.editTreatmentPlan.id\n      });\n      return React.createElement(Row, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 147\n        },\n        __self: this\n      }, React.createElement(Card, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 148\n        },\n        __self: this\n      }, React.createElement(Route, {\n        exact: true,\n        path: \"/patient/:id/emr/plans/edit\",\n        render: function render() {\n          return _this2.state.editTreatmentPlan ? React.createElement(TestFormLayout, {\n            defaultValues: defaultValues,\n            title: \"Edit Invoive\",\n            changeRedirect: _this2.changeRedirect,\n            formProp: formProp,\n            fields: fields,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 151\n            },\n            __self: this\n          }) : React.createElement(Redirect, {\n            to: '/patient/' + _this2.props.match.params.id + '/emr/plans',\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 153\n            },\n            __self: this\n          });\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 149\n        },\n        __self: this\n      }), React.createElement(Route, {\n        exact: true,\n        path: \"/patient/:id/emr/plans/add\",\n        render: function render() {\n          return React.createElement(TestFormLayout, {\n            title: \"Add Treatment Plans\",\n            changeRedirect: _this2.changeRedirect,\n            formProp: formProp,\n            fields: fields,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 155\n            },\n            __self: this\n          });\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 154\n        },\n        __self: this\n      })), this.state.redirect && React.createElement(Redirect, {\n        to: '/patient/' + this.props.match.params.id + '/emr/plans',\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 160\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return AddorEditPatientTreatmentPlans;\n}(React.Component);\n\nexport default AddorEditPatientTreatmentPlans;","map":{"version":3,"sources":["/home/shivam/WorkSpace/bk-erp-front/src/app/components/patients/treatmentPlans/AddorEditPatientTreatmentPlans.js"],"names":["React","Route","DynamicFieldsForm","Button","Card","Form","Icon","Row","CHECKBOX_FIELD","DATE_PICKER","SINGLE_CHECKBOX_FIELD","NUMBER_FIELD","SUCCESS_MSG_TYPE","INPUT_FIELD","RADIO_FIELD","SELECT_FIELD","TREATMENTPLANS_API","PROCEDURE_CATEGORY","ALL_TREATMENTPLANS_API","PRODUCT_MARGIN","getAPI","interpolate","displayMessage","Redirect","moment","AddorEditPatientTreatmentPlans","props","state","redirect","vitalSign","procedure_category","editTreatmentPlan","changeRedirect","bind","loadDrugCatalog","loadProductMargin","that","successFn","data","setState","productMargin","errorFn","active_practiceId","redirectVar","drugOption","forEach","drug","push","label","name","value","id","fields","key","type","initialValue","procedure","options","required","qunatity","cost","editFields","margin","map","total","is_active","is_completed","formProp","console","log","action","match","params","method","TestFormLayout","create","defaultValues","Component"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport {Route} from \"react-router\";\n\nimport DynamicFieldsForm from \"../../common/DynamicFieldsForm\";\nimport {Button, Card, Form, Icon, Row} from \"antd\";\nimport {\n    CHECKBOX_FIELD,\n    DATE_PICKER,\n    SINGLE_CHECKBOX_FIELD,\n    NUMBER_FIELD,\n    SUCCESS_MSG_TYPE,\n    INPUT_FIELD,\n    RADIO_FIELD,\n    SELECT_FIELD\n} from \"../../../constants/dataKeys\";\nimport {TREATMENTPLANS_API, PROCEDURE_CATEGORY, ALL_TREATMENTPLANS_API, PRODUCT_MARGIN} from \"../../../constants/api\";\nimport {getAPI, interpolate, displayMessage} from \"../../../utils/common\";\nimport {Redirect} from 'react-router-dom'\nimport moment from 'moment';\n\n\nclass AddorEditPatientTreatmentPlans extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            redirect: false,\n            vitalSign: null,\n            procedure_category: this.props.procedure_category ? this.props.procedure_category : null,\n            editTreatmentPlan: this.props.editTreatmentPlan ? this.props.editTreatmentPlan : null,\n\n        }\n        this.changeRedirect = this.changeRedirect.bind(this);\n        this.loadDrugCatalog = this.loadDrugCatalog.bind(this);\n\n    }\n\n    componentDidMount() {\n        this.loadProductMargin();\n        this.loadDrugCatalog();\n\n    }\n\n    loadProductMargin() {\n        let that = this;\n        let successFn = function (data) {\n            that.setState({\n                productMargin: data\n            })\n        }\n        let errorFn = function () {\n\n        }\n        getAPI(PRODUCT_MARGIN, successFn, errorFn);\n    }\n\n    loadDrugCatalog() {\n        if (this.state.procedure_category == null) {\n            let that = this;\n            let successFn = function (data) {\n                that.setState({\n                    procedure_category: data,\n\n                })\n            }\n            let errorFn = function () {\n\n            }\n            getAPI(interpolate(PROCEDURE_CATEGORY, [this.props.active_practiceId]), successFn, errorFn)\n        }\n    }\n\n    changeRedirect() {\n        var redirectVar = this.state.redirect;\n        this.setState({\n            redirect: !redirectVar,\n        });\n    }\n\n    render() {\n        const drugOption = []\n        if (this.state.procedure_category) {\n            this.state.procedure_category.forEach(function (drug) {\n                drugOption.push({label: (drug.name), value: drug.id});\n            })\n        }\n        const fields = [{\n            label: \"Procedure\",\n            key: \"procedure\",\n            type: SELECT_FIELD,\n            initialValue: this.state.editTreatmentPlan ? this.state.editTreatmentPlan.procedure : null,\n            options: drugOption\n        }, {\n            label: \"Quantity\",\n            key: \"qunatity\",\n            required: true,\n            initialValue: this.state.editTreatmentPlan ? this.state.editTreatmentPlan.qunatity : null,\n            type: INPUT_FIELD\n        }, {\n            label: \"cost\",\n            key: \"cost\",\n            initialValue: this.state.editTreatmentPlan ? this.state.editTreatmentPlan.cost : null,\n            type: INPUT_FIELD\n        }, {\n            label: 'MLM Margin Type',\n            type: SELECT_FIELD,\n            initialValue: (this.state.editFields ? this.state.editFields.margin : null),\n            key: 'margin',\n            required: true,\n            options: this.state.productMargin.map(margin => ({label: margin.name, value: margin.id}))\n        }, {\n            label: \"total\",\n            key: \"total\",\n            initialValue: this.state.editTreatmentPlan ? this.state.editTreatmentPlan.total : null,\n            type: INPUT_FIELD,\n        }, {\n            label: \"active\",\n            key: \"is_active\",\n            initialValue: this.state.editTreatmentPlan ? this.state.editTreatmentPlan.is_active : false,\n            type: SINGLE_CHECKBOX_FIELD,\n        }, {\n            label: \"Completed\",\n            key: \"is_completed\",\n            initialValue: this.state.editTreatmentPlan ? this.state.editTreatmentPlan.is_completed : false,\n            type: SINGLE_CHECKBOX_FIELD,\n        },];\n\n\n        const formProp = {\n            successFn: function (data) {\n                displayMessage(SUCCESS_MSG_TYPE, \"success\")\n\n                console.log(data);\n            },\n            errorFn: function () {\n\n            },\n            action: interpolate(TREATMENTPLANS_API, [this.props.match.params.id]),\n            method: \"post\",\n        }\n\n        const TestFormLayout = Form.create()(DynamicFieldsForm);\n\n        let defaultValues = [{\"key\": \"practice\", \"value\": this.props.active_practiceId}];\n        if (this.state.editTreatmentPlan)\n            defaultValues.push({\"key\": \"id\", \"value\": this.props.editTreatmentPlan.id});\n        return <Row>\n            <Card>\n                <Route exact path='/patient/:id/emr/plans/edit'\n                       render={() => (this.state.editTreatmentPlan ?\n                           <TestFormLayout defaultValues={defaultValues} title=\"Edit Invoive\"\n                                           changeRedirect={this.changeRedirect} formProp={formProp} fields={fields}/> :\n                           <Redirect to={'/patient/' + this.props.match.params.id + '/emr/plans'}/>)}/>\n                <Route exact path='/patient/:id/emr/plans/add'\n                       render={() => <TestFormLayout title=\"Add Treatment Plans\" changeRedirect={this.changeRedirect}\n                                                     formProp={formProp} fields={fields}/>}/>\n\n\n            </Card>\n            {this.state.redirect && <Redirect to={'/patient/' + this.props.match.params.id + '/emr/plans'}/>}\n        </Row>\n\n    }\n}\n\nexport default AddorEditPatientTreatmentPlans;\n"]},"metadata":{},"sourceType":"module"}