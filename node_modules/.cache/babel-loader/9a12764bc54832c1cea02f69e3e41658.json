{"ast":null,"code":"import _objectSpread from \"/home/shivam/WorkSpace/bk-erp-front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _toConsumableArray from \"/home/shivam/WorkSpace/bk-erp-front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"/home/shivam/WorkSpace/bk-erp-front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/shivam/WorkSpace/bk-erp-front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/shivam/WorkSpace/bk-erp-front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/shivam/WorkSpace/bk-erp-front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/shivam/WorkSpace/bk-erp-front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/home/shivam/WorkSpace/bk-erp-front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/home/shivam/WorkSpace/bk-erp-front/src/app/components/patients/invoices/AddInvoicedynamic.js\";\nimport React from \"react\";\nimport { Button, Card, Form, Input, List, Row, Col, Table, Tabs, InputNumber, Select, DatePicker } from \"antd\";\nimport { displayMessage, interpolate, getAPI, postAPI } from \"../../../utils/common\";\nimport { INVOICE_ITEM_TYPE, PROCEDURES, DRUG, PRESCRIPTIONS, INVENTORY, EQUIPMENT, ADD_STOCK, CONSUME_STOCK } from \"../../../constants/hardData\";\nimport { INVENTORY_ITEM_API, BULK_STOCK_ENTRY, TAXES, DRUG_CATALOG, PROCEDURE_CATEGORY } from \"../../../constants/api\";\nimport moment from \"moment\";\nvar MonthPicker = DatePicker.MonthPicker;\nvar TabPane = Tabs.TabPane;\nvar tableFormFields = {\n  _id: null,\n  quantity: 0,\n  batch: null\n};\n\nvar Addinvoicedynamic =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Addinvoicedynamic, _React$Component);\n\n  function Addinvoicedynamic(props) {\n    var _this;\n\n    _classCallCheck(this, Addinvoicedynamic);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Addinvoicedynamic).call(this, props));\n\n    _this.remove = function (k) {\n      _this.setState(function (prevState) {\n        var newTableFormValues = [];\n        prevState.tableFormValues.forEach(function (formValue) {\n          if (formValue._id != k) newTableFormValues.push(formValue);\n        });\n        console.log(prevState.tableFormValues, k);\n        return {\n          tableFormValues: newTableFormValues\n        };\n      });\n    };\n\n    _this.add = function (item) {\n      _this.setState(function (prevState) {\n        return {\n          tableFormValues: _toConsumableArray(prevState.tableFormValues).concat([_objectSpread({}, tableFormFields, item, {\n            _id: Math.random().toFixed(7)\n          })])\n        };\n      });\n    };\n\n    _this.handleSubmit = function (e) {\n      var that = _assertThisInitialized(_assertThisInitialized(_this));\n\n      e.preventDefault();\n\n      _this.props.form.validateFields(function (err, values) {\n        if (!err) {\n          console.log('Received values of form: ', values);\n          var reqData = [];\n          that.state.tableFormValues.forEach(function (item) {\n            var itemObject = {\n              inventory_item: item.id\n            };\n            reqData.push(itemObject);\n          });\n          console.log(reqData);\n\n          var successFn = function successFn(data) {\n            displayMessage(\"Inventory updated successfully\");\n            that.props.loadData();\n            var url = '/patient/' + this.props.match.params.id + '/billing/invoices';\n            that.props.history.push(url);\n          };\n\n          var errorFn = function errorFn() {};\n\n          postAPI(\"ll\", reqData, successFn, errorFn);\n        }\n      });\n    };\n\n    _this.state = {\n      classType: props.type,\n      tableFormValues: [],\n      maxQuantityforConsume: {},\n      items: {}\n    };\n    return _this;\n  }\n\n  _createClass(Addinvoicedynamic, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.loadInventoryItemList();\n      this.loadProcedures();\n      this.loadPrescriptions();\n      this.loadTaxes();\n    }\n  }, {\n    key: \"loadInventoryItemList\",\n    value: function loadInventoryItemList() {\n      var that = this;\n\n      var successFn = function successFn(data) {\n        var drugItems = [];\n        var equipmentItems = [];\n        var supplesItems = [];\n        data.forEach(function (item) {\n          if (item.item_type == DRUG) {\n            drugItems.push(item);\n          }\n        });\n        var items = that.state.items;\n        console.log(items);\n        items[INVENTORY] = drugItems;\n        that.setState({\n          items: items\n        });\n      };\n\n      var errorFn = function errorFn() {};\n\n      getAPI(INVENTORY_ITEM_API, successFn, errorFn);\n    }\n  }, {\n    key: \"loadProcedures\",\n    value: function loadProcedures() {\n      var that = this;\n\n      var successFn = function successFn(data) {\n        var items = that.state.items;\n        console.log(items);\n        items[PROCEDURES] = data;\n        that.setState({\n          items: items\n        });\n      };\n\n      var errorFn = function errorFn() {};\n\n      getAPI(interpolate(PROCEDURE_CATEGORY, [this.props.active_practiceId]), successFn, errorFn);\n    }\n  }, {\n    key: \"loadPrescriptions\",\n    value: function loadPrescriptions() {\n      var that = this;\n\n      var successFn = function successFn(data) {\n        var items = that.state.items;\n        console.log(items);\n        items[PRESCRIPTIONS] = data;\n        that.setState({\n          items: items\n        });\n      };\n\n      var errorFn = function errorFn() {};\n\n      getAPI(interpolate(DRUG_CATALOG, [this.props.active_practiceId]), successFn, errorFn);\n    }\n  }, {\n    key: \"loadTaxes\",\n    value: function loadTaxes() {\n      var that = this;\n\n      var successFn = function successFn(data) {\n        console.log(\"get table\");\n        that.setState({\n          taxes_list: data\n        });\n      };\n\n      var errorFn = function errorFn() {};\n\n      getAPI(interpolate(TAXES, [this.props.active_practiceId]), successFn, errorFn);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var taxesOption = [];\n\n      if (this.state.taxes_list) {\n        this.state.taxes_list.forEach(function (tax) {\n          taxesOption.push(React.createElement(Select.Option, {\n            value: tax.id,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 178\n            },\n            __self: this\n          }, tax.name));\n        });\n      }\n\n      var that = this;\n      var _this$props$form = this.props.form,\n          getFieldDecorator = _this$props$form.getFieldDecorator,\n          getFieldValue = _this$props$form.getFieldValue,\n          getFieldsValue = _this$props$form.getFieldsValue;\n      var formItemLayout = {\n        labelCol: {\n          xs: {\n            span: 24\n          },\n          sm: {\n            span: 4\n          }\n        },\n        wrapperCol: {\n          xs: {\n            span: 24\n          },\n          sm: {\n            span: 20\n          }\n        }\n      };\n      var formItemLayoutWithOutLabel = {\n        labelCol: {\n          xs: {\n            span: 24\n          },\n          sm: {\n            span: 4\n          }\n        },\n        wrapperCol: {\n          xs: {\n            span: 24\n          },\n          sm: {\n            span: 20\n          }\n        }\n      };\n      getFieldDecorator('keys', {\n        initialValue: []\n      });\n      var consumeRow = [{\n        title: 'Item Name',\n        key: 'item_name',\n        dataIndex: 'name'\n      }];\n      consumeRow = consumeRow.concat([{\n        title: 'Unit',\n        key: 'unit',\n        dataIndex: 'unit',\n        render: function render(item, record) {\n          return React.createElement(Form.Item, Object.assign({\n            key: \"quantity[\".concat(record._id, \"]\")\n          }, formItemLayout, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 213\n            },\n            __self: this\n          }), getFieldDecorator(\"Unit[\".concat(record._id, \"]\"), {\n            validateTrigger: ['onChange', 'onBlur'],\n            rules: [{\n              required: true,\n              message: \"This field is required.\"\n            }]\n          })(React.createElement(InputNumber, {\n            min: 0,\n            placeholder: \"quantity\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 223\n            },\n            __self: this\n          })));\n        }\n      }, {\n        title: 'discount %',\n        key: 'discount',\n        dataIndex: 'discount',\n        render: function render(item, record) {\n          return React.createElement(Form.Item, Object.assign({\n            key: \"discount[\".concat(record._id, \"]\")\n          }, formItemLayout, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 230\n            },\n            __self: this\n          }), getFieldDecorator(\"discount[\".concat(record._id, \"]\"), {\n            rules: [{\n              required: true,\n              message: \"This field is required.\"\n            }]\n          })(React.createElement(InputNumber, {\n            min: 0,\n            max: 100,\n            placeholder: \"discount\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 239\n            },\n            __self: this\n          })));\n        }\n      }, {\n        title: 'Unit Cost',\n        key: 'unit_cost',\n        dataIndex: 'unit_cost',\n        render: function render(item, record) {\n          return React.createElement(Form.Item, Object.assign({\n            key: \"unit_cost[\".concat(record._id, \"]\")\n          }, formItemLayout, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 246\n            },\n            __self: this\n          }), getFieldDecorator(\"unit_cost[\".concat(record._id, \"]\"), {\n            // validateTrigger: ['onChange', 'onBlur'],\n            rules: [{\n              required: true,\n              message: \"This field is required.\"\n            }]\n          })(React.createElement(InputNumber, {\n            placeholder: \"Unit Cost\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 256\n            },\n            __self: this\n          })));\n        }\n      }, {\n        title: 'Taxes',\n        key: 'taxes',\n        dataIndex: 'taxes',\n        render: function render(item, record) {\n          return React.createElement(Form.Item, Object.assign({\n            key: \"batch[\".concat(record._id, \"]\")\n          }, formItemLayout, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 263\n            },\n            __self: this\n          }), getFieldDecorator(\"taxes[\".concat(record._id, \"]\"), {\n            validateTrigger: ['onChange', 'onBlur']\n          })(React.createElement(Select, {\n            placeholder: \"Batch Number\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 270\n            },\n            __self: this\n          }, taxesOption)));\n        }\n      }]);\n      consumeRow = consumeRow.concat([{\n        title: 'Action',\n        key: '_id',\n        dataIndex: '_id',\n        render: function render(value, record) {\n          return React.createElement(\"a\", {\n            onClick: function onClick() {\n              return that.remove(record._id);\n            },\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 279\n            },\n            __self: this\n          }, \"Delete\");\n        }\n      }]);\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 281\n        },\n        __self: this\n      }, React.createElement(Card, {\n        title: this.state.classType + \" Stock\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 282\n        },\n        __self: this\n      }, React.createElement(Row, {\n        gutter: 16,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 283\n        },\n        __self: this\n      }, React.createElement(Col, {\n        span: 7,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 284\n        },\n        __self: this\n      }, React.createElement(Tabs, {\n        size: \"small\",\n        type: \"card\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 285\n        },\n        __self: this\n      }, INVOICE_ITEM_TYPE.map(function (itemType) {\n        return React.createElement(TabPane, {\n          tab: itemType.label,\n          key: itemType.value,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 286\n          },\n          __self: this\n        }, React.createElement(List, {\n          size: \"small\",\n          itemLayout: \"horizontal\",\n          dataSource: _this2.state.items ? _this2.state.items[itemType.value] : [],\n          renderItem: function renderItem(item) {\n            return React.createElement(List.Item, {\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 291\n              },\n              __self: this\n            }, React.createElement(List.Item.Meta, {\n              title: item.name,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 292\n              },\n              __self: this\n            }), React.createElement(Button, {\n              type: \"primary\",\n              size: \"small\",\n              shape: \"circle\",\n              onClick: function onClick() {\n                return _this2.add(item);\n              },\n              icon: \"arrow-right\",\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 295\n              },\n              __self: this\n            }));\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 287\n          },\n          __self: this\n        }));\n      }))), React.createElement(Col, {\n        span: 17,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 301\n        },\n        __self: this\n      }, React.createElement(Form, {\n        onSubmit: this.handleSubmit,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 302\n        },\n        __self: this\n      }, React.createElement(Table, {\n        pagination: false,\n        bordered: true,\n        dataSource: this.state.tableFormValues,\n        columns: consumeRow,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 303\n        },\n        __self: this\n      }), React.createElement(Form.Item, Object.assign({}, formItemLayoutWithOutLabel, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 308\n        },\n        __self: this\n      }), React.createElement(Button, {\n        type: \"primary\",\n        htmlType: \"submit\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 309\n        },\n        __self: this\n      }, \"Submit\")))))));\n    }\n  }]);\n\n  return Addinvoicedynamic;\n}(React.Component);\n\nexport default Form.create()(Addinvoicedynamic);","map":{"version":3,"sources":["/home/shivam/WorkSpace/bk-erp-front/src/app/components/patients/invoices/AddInvoicedynamic.js"],"names":["React","Button","Card","Form","Input","List","Row","Col","Table","Tabs","InputNumber","Select","DatePicker","displayMessage","interpolate","getAPI","postAPI","INVOICE_ITEM_TYPE","PROCEDURES","DRUG","PRESCRIPTIONS","INVENTORY","EQUIPMENT","ADD_STOCK","CONSUME_STOCK","INVENTORY_ITEM_API","BULK_STOCK_ENTRY","TAXES","DRUG_CATALOG","PROCEDURE_CATEGORY","moment","MonthPicker","TabPane","tableFormFields","_id","quantity","batch","Addinvoicedynamic","props","remove","k","setState","prevState","newTableFormValues","tableFormValues","forEach","formValue","push","console","log","add","item","Math","random","toFixed","handleSubmit","e","that","preventDefault","form","validateFields","err","values","reqData","state","itemObject","inventory_item","id","successFn","data","loadData","url","match","params","history","errorFn","classType","type","maxQuantityforConsume","items","loadInventoryItemList","loadProcedures","loadPrescriptions","loadTaxes","drugItems","equipmentItems","supplesItems","item_type","active_practiceId","taxes_list","taxesOption","tax","name","getFieldDecorator","getFieldValue","getFieldsValue","formItemLayout","labelCol","xs","span","sm","wrapperCol","formItemLayoutWithOutLabel","initialValue","consumeRow","title","key","dataIndex","concat","render","record","validateTrigger","rules","required","message","value","map","itemType","label","Component","create"],"mappings":";;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SACIC,MADJ,EAEIC,IAFJ,EAGIC,IAHJ,EAIIC,KAJJ,EAKIC,IALJ,EAMIC,GANJ,EAOIC,GAPJ,EAQIC,KARJ,EASIC,IATJ,EAUIC,WAVJ,EAUiBC,MAVjB,EAUyBC,UAVzB,QAWO,MAXP;AAYA,SAAQC,cAAR,EAAuBC,WAAvB,EAAoCC,MAApC,EAA4CC,OAA5C,QAA0D,uBAA1D;AAEA,SAAQC,iBAAR,EAA2BC,UAA3B,EAAsCC,IAAtC,EAA4CC,aAA5C,EAA2DC,SAA3D,EAAsEC,SAAtE,EAAiFC,SAAjF,EAA4FC,aAA5F,QAAgH,6BAAhH;AACA,SAAQC,kBAAR,EAA4BC,gBAA5B,EAA8CC,KAA9C,EAAqDC,YAArD,EAAmEC,kBAAnE,QAA4F,wBAA5F;AACA,OAAOC,MAAP,MAAmB,QAAnB;IAEOC,W,GAAenB,U,CAAfmB,W;AACP,IAAMC,OAAO,GAAGvB,IAAI,CAACuB,OAArB;AAEA,IAAIC,eAAe,GAAG;AAClBC,EAAAA,GAAG,EAAE,IADa;AAElBC,EAAAA,QAAQ,EAAE,CAFQ;AAGlBC,EAAAA,KAAK,EAAE;AAHW,CAAtB;;IAMMC,iB;;;;;AACF,6BAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACf,2FAAMA,KAAN;;AADe,UAqFnBC,MArFmB,GAqFV,UAACC,CAAD,EAAO;AACZ,YAAKC,QAAL,CAAc,UAAUC,SAAV,EAAqB;AAC/B,YAAIC,kBAAkB,GAAG,EAAzB;AACAD,QAAAA,SAAS,CAACE,eAAV,CAA0BC,OAA1B,CAAkC,UAAUC,SAAV,EAAqB;AACnD,cAAIA,SAAS,CAACZ,GAAV,IAAiBM,CAArB,EACIG,kBAAkB,CAACI,IAAnB,CAAwBD,SAAxB;AACP,SAHD;AAIAE,QAAAA,OAAO,CAACC,GAAR,CAAYP,SAAS,CAACE,eAAtB,EAAuCJ,CAAvC;AACA,eAAO;AACHI,UAAAA,eAAe,EAAED;AADd,SAAP;AAGH,OAVD;AAWH,KAjGkB;;AAAA,UAoGnBO,GApGmB,GAoGb,UAACC,IAAD,EAAU;AACZ,YAAKV,QAAL,CAAc,UAAUC,SAAV,EAAqB;AAC/B,eAAO;AACHE,UAAAA,eAAe,qBAAMF,SAAS,CAACE,eAAhB,4BACRX,eADQ,EAERkB,IAFQ;AAGXjB,YAAAA,GAAG,EAAEkB,IAAI,CAACC,MAAL,GAAcC,OAAd,CAAsB,CAAtB;AAHM;AADZ,SAAP;AAOH,OARD;AASH,KA9GkB;;AAAA,UAgHnBC,YAhHmB,GAgHJ,UAACC,CAAD,EAAO;AAClB,UAAIC,IAAI,wDAAR;;AACAD,MAAAA,CAAC,CAACE,cAAF;;AACA,YAAKpB,KAAL,CAAWqB,IAAX,CAAgBC,cAAhB,CAA+B,UAACC,GAAD,EAAMC,MAAN,EAAiB;AAC5C,YAAI,CAACD,GAAL,EAAU;AACNb,UAAAA,OAAO,CAACC,GAAR,CAAY,2BAAZ,EAAyCa,MAAzC;AACA,cAAIC,OAAO,GAAG,EAAd;AACAN,UAAAA,IAAI,CAACO,KAAL,CAAWpB,eAAX,CAA2BC,OAA3B,CAAmC,UAAUM,IAAV,EAAgB;AAC/C,gBAAIc,UAAU,GAAG;AACbC,cAAAA,cAAc,EAAEf,IAAI,CAACgB;AADR,aAAjB;AAKAJ,YAAAA,OAAO,CAAChB,IAAR,CAAakB,UAAb;AACH,WAPD;AAQAjB,UAAAA,OAAO,CAACC,GAAR,CAAYc,OAAZ;;AACA,cAAIK,SAAS,GAAG,SAAZA,SAAY,CAAUC,IAAV,EAAgB;AAC5BxD,YAAAA,cAAc,CAAC,gCAAD,CAAd;AACA4C,YAAAA,IAAI,CAACnB,KAAL,CAAWgC,QAAX;AACA,gBAAIC,GAAG,GAAC,cAAc,KAAKjC,KAAL,CAAWkC,KAAX,CAAiBC,MAAjB,CAAwBN,EAAtC,GAA2C,mBAAnD;AACAV,YAAAA,IAAI,CAACnB,KAAL,CAAWoC,OAAX,CAAmB3B,IAAnB,CAAwBwB,GAAxB;AACH,WALD;;AAMA,cAAII,OAAO,GAAG,SAAVA,OAAU,GAAY,CAEzB,CAFD;;AAGA3D,UAAAA,OAAO,CAAC,IAAD,EAAO+C,OAAP,EAAgBK,SAAhB,EAA2BO,OAA3B,CAAP;AACH;AACJ,OAxBD;AAyBH,KA5IkB;;AAEf,UAAKX,KAAL,GAAa;AACTY,MAAAA,SAAS,EAAEtC,KAAK,CAACuC,IADR;AAETjC,MAAAA,eAAe,EAAE,EAFR;AAGTkC,MAAAA,qBAAqB,EAAE,EAHd;AAITC,MAAAA,KAAK,EAAC;AAJG,KAAb;AAFe;AASlB;;;;wCAEmB;AAChB,WAAKC,qBAAL;AACA,WAAKC,cAAL;AACA,WAAKC,iBAAL;AACA,WAAKC,SAAL;AACH;;;4CAEuB;AACpB,UAAI1B,IAAI,GAAG,IAAX;;AACA,UAAIW,SAAS,GAAG,SAAZA,SAAY,CAAUC,IAAV,EAAgB;AAC5B,YAAIe,SAAS,GAAG,EAAhB;AACA,YAAIC,cAAc,GAAG,EAArB;AACA,YAAIC,YAAY,GAAG,EAAnB;AACAjB,QAAAA,IAAI,CAACxB,OAAL,CAAa,UAAUM,IAAV,EAAgB;AACzB,cAAIA,IAAI,CAACoC,SAAL,IAAkBpE,IAAtB,EAA4B;AACxBiE,YAAAA,SAAS,CAACrC,IAAV,CAAeI,IAAf;AACD;AACN,SAJD;AAKA,YAAI4B,KAAK,GAACtB,IAAI,CAACO,KAAL,CAAWe,KAArB;AACA/B,QAAAA,OAAO,CAACC,GAAR,CAAY8B,KAAZ;AACAA,QAAAA,KAAK,CAAC1D,SAAD,CAAL,GAAiB+D,SAAjB;AACA3B,QAAAA,IAAI,CAAChB,QAAL,CAAc;AACVsC,UAAAA,KAAK,EAAEA;AADG,SAAd;AAGH,OAfD;;AAgBA,UAAIJ,OAAO,GAAG,SAAVA,OAAU,GAAY,CACzB,CADD;;AAEA5D,MAAAA,MAAM,CAACU,kBAAD,EAAqB2C,SAArB,EAAgCO,OAAhC,CAAN;AACH;;;qCAEgB;AACb,UAAIlB,IAAI,GAAG,IAAX;;AACA,UAAIW,SAAS,GAAG,SAAZA,SAAY,CAAUC,IAAV,EAAgB;AAC5B,YAAIU,KAAK,GAACtB,IAAI,CAACO,KAAL,CAAWe,KAArB;AACA/B,QAAAA,OAAO,CAACC,GAAR,CAAY8B,KAAZ;AACAA,QAAAA,KAAK,CAAC7D,UAAD,CAAL,GAAkBmD,IAAlB;AACAZ,QAAAA,IAAI,CAAChB,QAAL,CAAc;AACVsC,UAAAA,KAAK,EAAEA;AADG,SAAd;AAGH,OAPD;;AAQA,UAAIJ,OAAO,GAAG,SAAVA,OAAU,GAAY,CACzB,CADD;;AAGA5D,MAAAA,MAAM,CAACD,WAAW,CAACe,kBAAD,EAAqB,CAAC,KAAKS,KAAL,CAAWkD,iBAAZ,CAArB,CAAZ,EAAkEpB,SAAlE,EAA6EO,OAA7E,CAAN;AACH;;;wCACmB;AAChB,UAAIlB,IAAI,GAAG,IAAX;;AACA,UAAIW,SAAS,GAAG,SAAZA,SAAY,CAAUC,IAAV,EAAgB;AAC9B,YAAIU,KAAK,GAACtB,IAAI,CAACO,KAAL,CAAWe,KAArB;AACA/B,QAAAA,OAAO,CAACC,GAAR,CAAY8B,KAAZ;AACAA,QAAAA,KAAK,CAAC3D,aAAD,CAAL,GAAqBiD,IAArB;AACAZ,QAAAA,IAAI,CAAChB,QAAL,CAAc;AACVsC,UAAAA,KAAK,EAAEA;AADG,SAAd;AAGD,OAPD;;AAQA,UAAIJ,OAAO,GAAG,SAAVA,OAAU,GAAY,CACzB,CADD;;AAEA5D,MAAAA,MAAM,CAACD,WAAW,CAACc,YAAD,EAAe,CAAC,KAAKU,KAAL,CAAWkD,iBAAZ,CAAf,CAAZ,EAA4DpB,SAA5D,EAAuEO,OAAvE,CAAN;AACH;;;gCAEW;AACR,UAAIlB,IAAI,GAAG,IAAX;;AACA,UAAIW,SAAS,GAAG,SAAZA,SAAY,CAAUC,IAAV,EAAgB;AAC5BrB,QAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ;AACAQ,QAAAA,IAAI,CAAChB,QAAL,CAAc;AACVgD,UAAAA,UAAU,EAAEpB;AADF,SAAd;AAGH,OALD;;AAMA,UAAIM,OAAO,GAAG,SAAVA,OAAU,GAAY,CACzB,CADD;;AAEA5D,MAAAA,MAAM,CAACD,WAAW,CAACa,KAAD,EAAQ,CAAC,KAAKW,KAAL,CAAWkD,iBAAZ,CAAR,CAAZ,EAAqDpB,SAArD,EAAgEO,OAAhE,CAAN;AAEH;;;6BA6DQ;AAAA;;AACP,UAAMe,WAAW,GAAG,EAApB;;AACA,UAAI,KAAK1B,KAAL,CAAWyB,UAAf,EAA2B;AACvB,aAAKzB,KAAL,CAAWyB,UAAX,CAAsB5C,OAAtB,CAA8B,UAAU8C,GAAV,EAAe;AACzCD,UAAAA,WAAW,CAAC3C,IAAZ,CAAkB,oBAAC,MAAD,CAAQ,MAAR;AAAe,YAAA,KAAK,EAAE4C,GAAG,CAACxB,EAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAA+BwB,GAAG,CAACC,IAAnC,CAAlB;AACH,SAFD;AAGH;;AACC,UAAInC,IAAI,GAAG,IAAX;AAPK,6BAQsD,KAAKnB,KAAL,CAAWqB,IARjE;AAAA,UAQEkC,iBARF,oBAQEA,iBARF;AAAA,UAQqBC,aARrB,oBAQqBA,aARrB;AAAA,UAQoCC,cARpC,oBAQoCA,cARpC;AASL,UAAMC,cAAc,GAAG;AACnBC,QAAAA,QAAQ,EAAE;AACNC,UAAAA,EAAE,EAAE;AAACC,YAAAA,IAAI,EAAE;AAAP,WADE;AAENC,UAAAA,EAAE,EAAE;AAACD,YAAAA,IAAI,EAAE;AAAP;AAFE,SADS;AAKnBE,QAAAA,UAAU,EAAE;AACRH,UAAAA,EAAE,EAAE;AAACC,YAAAA,IAAI,EAAE;AAAP,WADI;AAERC,UAAAA,EAAE,EAAE;AAACD,YAAAA,IAAI,EAAE;AAAP;AAFI;AALO,OAAvB;AAUA,UAAMG,0BAA0B,GAAG;AAC/BL,QAAAA,QAAQ,EAAE;AACNC,UAAAA,EAAE,EAAE;AAACC,YAAAA,IAAI,EAAE;AAAP,WADE;AAENC,UAAAA,EAAE,EAAE;AAACD,YAAAA,IAAI,EAAE;AAAP;AAFE,SADqB;AAK/BE,QAAAA,UAAU,EAAE;AACRH,UAAAA,EAAE,EAAE;AAACC,YAAAA,IAAI,EAAE;AAAP,WADI;AAERC,UAAAA,EAAE,EAAE;AAACD,YAAAA,IAAI,EAAE;AAAP;AAFI;AALmB,OAAnC;AAUAN,MAAAA,iBAAiB,CAAC,MAAD,EAAS;AAACU,QAAAA,YAAY,EAAE;AAAf,OAAT,CAAjB;AACA,UAAIC,UAAU,GAAG,CAAC;AACdC,QAAAA,KAAK,EAAE,WADO;AAEdC,QAAAA,GAAG,EAAE,WAFS;AAGdC,QAAAA,SAAS,EAAE;AAHG,OAAD,CAAjB;AAKIH,MAAAA,UAAU,GAAGA,UAAU,CAACI,MAAX,CAAkB,CAAC;AAC5BH,QAAAA,KAAK,EAAE,MADqB;AAE5BC,QAAAA,GAAG,EAAE,MAFuB;AAG5BC,QAAAA,SAAS,EAAE,MAHiB;AAI5BE,QAAAA,MAAM,EAAE,gBAAC1D,IAAD,EAAO2D,MAAP;AAAA,iBAAkB,oBAAC,IAAD,CAAM,IAAN;AACtB,YAAA,GAAG,qBAAcA,MAAM,CAAC5E,GAArB;AADmB,aAElB8D,cAFkB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAGrBH,iBAAiB,gBAASiB,MAAM,CAAC5E,GAAhB,QAAwB;AACtC6E,YAAAA,eAAe,EAAE,CAAC,UAAD,EAAa,QAAb,CADqB;AAEtCC,YAAAA,KAAK,EAAE,CAAC;AACJC,cAAAA,QAAQ,EAAE,IADN;AAEJC,cAAAA,OAAO,EAAE;AAFL,aAAD;AAF+B,WAAxB,CAAjB,CAOG,oBAAC,WAAD;AAAa,YAAA,GAAG,EAAE,CAAlB;AAAqB,YAAA,WAAW,EAAC,UAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAPH,CAHqB,CAAlB;AAAA;AAJoB,OAAD,EAiB7B;AACET,QAAAA,KAAK,EAAE,YADT;AAEEC,QAAAA,GAAG,EAAE,UAFP;AAGEC,QAAAA,SAAS,EAAE,UAHb;AAIEE,QAAAA,MAAM,EAAE,gBAAC1D,IAAD,EAAO2D,MAAP;AAAA,iBAAkB,oBAAC,IAAD,CAAM,IAAN;AACtB,YAAA,GAAG,qBAAcA,MAAM,CAAC5E,GAArB;AADmB,aAElB8D,cAFkB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAGrBH,iBAAiB,oBAAaiB,MAAM,CAAC5E,GAApB,QAA4B;AAC1C8E,YAAAA,KAAK,EAAE,CAAC;AACJC,cAAAA,QAAQ,EAAE,IADN;AAEJC,cAAAA,OAAO,EAAE;AAFL,aAAD;AADmC,WAA5B,CAAjB,CAMC,oBAAC,WAAD;AAAa,YAAA,GAAG,EAAE,CAAlB;AAAqB,YAAA,GAAG,EAAE,GAA1B;AAA+B,YAAA,WAAW,EAAC,UAA3C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAND,CAHqB,CAAlB;AAAA;AAJV,OAjB6B,EAiC5B;AACCT,QAAAA,KAAK,EAAE,WADR;AAECC,QAAAA,GAAG,EAAE,WAFN;AAGCC,QAAAA,SAAS,EAAE,WAHZ;AAICE,QAAAA,MAAM,EAAE,gBAAC1D,IAAD,EAAO2D,MAAP;AAAA,iBAAkB,oBAAC,IAAD,CAAM,IAAN;AACtB,YAAA,GAAG,sBAAeA,MAAM,CAAC5E,GAAtB;AADmB,aAElB8D,cAFkB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAGrBH,iBAAiB,qBAAciB,MAAM,CAAC5E,GAArB,QAA6B;AAC3C;AACA8E,YAAAA,KAAK,EAAE,CAAC;AACJC,cAAAA,QAAQ,EAAE,IADN;AAEJC,cAAAA,OAAO,EAAE;AAFL,aAAD;AAFoC,WAA7B,CAAjB,CAOG,oBAAC,WAAD;AAAa,YAAA,WAAW,EAAC,WAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAPH,CAHqB,CAAlB;AAAA;AAJT,OAjC4B,EAkD5B;AACCT,QAAAA,KAAK,EAAE,OADR;AAECC,QAAAA,GAAG,EAAE,OAFN;AAGCC,QAAAA,SAAS,EAAE,OAHZ;AAICE,QAAAA,MAAM,EAAE,gBAAC1D,IAAD,EAAO2D,MAAP;AAAA,iBAAkB,oBAAC,IAAD,CAAM,IAAN;AACtB,YAAA,GAAG,kBAAWA,MAAM,CAAC5E,GAAlB;AADmB,aAElB8D,cAFkB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAGrBH,iBAAiB,iBAAUiB,MAAM,CAAC5E,GAAjB,QAAyB;AACvC6E,YAAAA,eAAe,EAAE,CAAC,UAAD,EAAa,QAAb;AADsB,WAAzB,CAAjB,CAIG,oBAAC,MAAD;AAAQ,YAAA,WAAW,EAAC,cAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAAoCrB,WAApC,CAJH,CAHqB,CAAlB;AAAA;AAJT,OAlD4B,CAAlB,CAAb;AAkEJc,MAAAA,UAAU,GAAGA,UAAU,CAACI,MAAX,CAAkB,CAAC;AAC5BH,QAAAA,KAAK,EAAE,QADqB;AAE5BC,QAAAA,GAAG,EAAE,KAFuB;AAG5BC,QAAAA,SAAS,EAAE,KAHiB;AAI5BE,QAAAA,MAAM,EAAE,gBAACM,KAAD,EAAQL,MAAR;AAAA,iBAAmB;AAAG,YAAA,OAAO,EAAE;AAAA,qBAAMrD,IAAI,CAAClB,MAAL,CAAYuE,MAAM,CAAC5E,GAAnB,CAAN;AAAA,aAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAAnB;AAAA;AAJoB,OAAD,CAAlB,CAAb;AAMA,aAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACH,oBAAC,IAAD;AAAM,QAAA,KAAK,EAAE,KAAK8B,KAAL,CAAWY,SAAX,GAAuB,QAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,GAAD;AAAK,QAAA,MAAM,EAAE,EAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,GAAD;AAAK,QAAA,IAAI,EAAE,CAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,IAAD;AAAM,QAAA,IAAI,EAAC,OAAX;AAAmB,QAAA,IAAI,EAAC,MAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACK3D,iBAAiB,CAACmG,GAAlB,CAAsB,UAAAC,QAAQ;AAAA,eAAI,oBAAC,OAAD;AAAS,UAAA,GAAG,EAAEA,QAAQ,CAACC,KAAvB;AAA8B,UAAA,GAAG,EAAED,QAAQ,CAACF,KAA5C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAC/B,oBAAC,IAAD;AAAM,UAAA,IAAI,EAAE,OAAZ;AACM,UAAA,UAAU,EAAC,YADjB;AAEM,UAAA,UAAU,EAAE,MAAI,CAACnD,KAAL,CAAWe,KAAX,GAAmB,MAAI,CAACf,KAAL,CAAWe,KAAX,CAAiBsC,QAAQ,CAACF,KAA1B,CAAnB,GAAsD,EAFxE;AAGM,UAAA,UAAU,EAAE,oBAAAhE,IAAI;AAAA,mBACZ,oBAAC,IAAD,CAAM,IAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eACI,oBAAC,IAAD,CAAM,IAAN,CAAW,IAAX;AACI,cAAA,KAAK,EAAEA,IAAI,CAACyC,IADhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,EAII,oBAAC,MAAD;AAAQ,cAAA,IAAI,EAAC,SAAb;AAAuB,cAAA,IAAI,EAAC,OAA5B;AAAoC,cAAA,KAAK,EAAC,QAA1C;AACQ,cAAA,OAAO,EAAE;AAAA,uBAAM,MAAI,CAAC1C,GAAL,CAASC,IAAT,CAAN;AAAA,eADjB;AACuC,cAAA,IAAI,EAAE,aAD7C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAJJ,CADY;AAAA,WAHtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAD+B,CAAJ;AAAA,OAA9B,CADL,CADJ,CADJ,EAkBI,oBAAC,GAAD;AAAK,QAAA,IAAI,EAAE,EAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,IAAD;AAAM,QAAA,QAAQ,EAAE,KAAKI,YAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,KAAD;AAAO,QAAA,UAAU,EAAE,KAAnB;AACO,QAAA,QAAQ,EAAE,IADjB;AAEO,QAAA,UAAU,EAAE,KAAKS,KAAL,CAAWpB,eAF9B;AAGO,QAAA,OAAO,EAAE4D,UAHhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,EAMI,oBAAC,IAAD,CAAM,IAAN,oBAAeF,0BAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UACI,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,SAAb;AAAuB,QAAA,QAAQ,EAAC,QAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADJ,CANJ,CADJ,CAlBJ,CADJ,CADG,CAAP;AAsCH;;;;EAlS2BtG,KAAK,CAACuH,S;;AAqStC,eAAepH,IAAI,CAACqH,MAAL,GAAcnF,iBAAd,CAAf","sourcesContent":["import React from \"react\";\nimport {\n    Button,\n    Card,\n    Form,\n    Input,\n    List,\n    Row,\n    Col,\n    Table,\n    Tabs,\n    InputNumber, Select, DatePicker,\n} from \"antd\";\nimport {displayMessage,interpolate, getAPI, postAPI} from \"../../../utils/common\";\n\nimport {INVOICE_ITEM_TYPE, PROCEDURES,DRUG, PRESCRIPTIONS, INVENTORY, EQUIPMENT, ADD_STOCK, CONSUME_STOCK} from \"../../../constants/hardData\";\nimport {INVENTORY_ITEM_API, BULK_STOCK_ENTRY, TAXES, DRUG_CATALOG, PROCEDURE_CATEGORY} from \"../../../constants/api\";\nimport moment from \"moment\";\n\nconst {MonthPicker} = DatePicker;\nconst TabPane = Tabs.TabPane;\n\nlet tableFormFields = {\n    _id: null,\n    quantity: 0,\n    batch: null\n};\n\nclass Addinvoicedynamic extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            classType: props.type,\n            tableFormValues: [],\n            maxQuantityforConsume: {},\n            items:{},\n        }\n\n    }\n\n    componentDidMount() {\n        this.loadInventoryItemList();\n        this.loadProcedures();\n        this.loadPrescriptions();\n        this.loadTaxes();\n    }\n\n    loadInventoryItemList() {\n        let that = this;\n        let successFn = function (data) {\n            let drugItems = [];\n            let equipmentItems = [];\n            let supplesItems = [];\n            data.forEach(function (item) {\n                if (item.item_type == DRUG) {\n                    drugItems.push(item);\n                  }\n            });\n            let items=that.state.items;\n            console.log(items);\n            items[INVENTORY]=drugItems;\n            that.setState({\n                items: items,\n            })\n        }\n        let errorFn = function () {\n        }\n        getAPI(INVENTORY_ITEM_API, successFn, errorFn);\n    }\n\n    loadProcedures() {\n        var that = this;\n        let successFn = function (data) {\n            let items=that.state.items;\n            console.log(items);\n            items[PROCEDURES]=data;\n            that.setState({\n                items: items,\n            })\n        };\n        let errorFn = function () {\n        };\n\n        getAPI(interpolate(PROCEDURE_CATEGORY, [this.props.active_practiceId]), successFn, errorFn);\n    }\n    loadPrescriptions() {\n        var that = this;\n        let successFn = function (data) {\n          let items=that.state.items;\n          console.log(items);\n          items[PRESCRIPTIONS]=data;\n          that.setState({\n              items: items,\n          })\n        };\n        let errorFn = function () {\n        };\n        getAPI(interpolate(DRUG_CATALOG, [this.props.active_practiceId]), successFn, errorFn);\n    }\n\n    loadTaxes() {\n        var that = this;\n        let successFn = function (data) {\n            console.log(\"get table\");\n            that.setState({\n                taxes_list: data,\n            })\n        };\n        let errorFn = function () {\n        };\n        getAPI(interpolate(TAXES, [this.props.active_practiceId]), successFn, errorFn);\n\n    }\n\n    remove = (k) => {\n        this.setState(function (prevState) {\n            let newTableFormValues = [];\n            prevState.tableFormValues.forEach(function (formValue) {\n                if (formValue._id != k)\n                    newTableFormValues.push(formValue);\n            });\n            console.log(prevState.tableFormValues, k);\n            return {\n                tableFormValues: newTableFormValues\n            }\n        });\n    }\n\n\n    add = (item) => {\n        this.setState(function (prevState) {\n            return {\n                tableFormValues: [...prevState.tableFormValues, {\n                    ...tableFormFields,\n                    ...item,\n                    _id: Math.random().toFixed(7),\n                }]\n            }\n        });\n    };\n\n    handleSubmit = (e) => {\n        let that = this;\n        e.preventDefault();\n        this.props.form.validateFields((err, values) => {\n            if (!err) {\n                console.log('Received values of form: ', values);\n                let reqData = [];\n                that.state.tableFormValues.forEach(function (item) {\n                    let itemObject = {\n                        inventory_item: item.id,\n                    };\n\n\n                    reqData.push(itemObject);\n                });\n                console.log(reqData);\n                let successFn = function (data) {\n                    displayMessage(\"Inventory updated successfully\");\n                    that.props.loadData();\n                    let url='/patient/' + this.props.match.params.id + '/billing/invoices';\n                    that.props.history.push(url);\n                }\n                let errorFn = function () {\n\n                }\n                postAPI(\"ll\", reqData, successFn, errorFn);\n            }\n        });\n    }\n\n\n\n    render() {\n      const taxesOption = []\n      if (this.state.taxes_list) {\n          this.state.taxes_list.forEach(function (tax) {\n              taxesOption.push( <Select.Option value={tax.id}>{tax.name}</Select.Option>);\n          })\n      }\n        let that = this;\n        const {getFieldDecorator, getFieldValue, getFieldsValue} = this.props.form;\n        const formItemLayout = {\n            labelCol: {\n                xs: {span: 24},\n                sm: {span: 4},\n            },\n            wrapperCol: {\n                xs: {span: 24},\n                sm: {span: 20},\n            },\n        };\n        const formItemLayoutWithOutLabel = {\n            labelCol: {\n                xs: {span: 24},\n                sm: {span: 4},\n            },\n            wrapperCol: {\n                xs: {span: 24},\n                sm: {span: 20},\n            },\n        };\n        getFieldDecorator('keys', {initialValue: []});\n        let consumeRow = [{\n            title: 'Item Name',\n            key: 'item_name',\n            dataIndex: 'name'\n        }];\n            consumeRow = consumeRow.concat([{\n                title: 'Unit',\n                key: 'unit',\n                dataIndex: 'unit',\n                render: (item, record) => <Form.Item\n                    key={`quantity[${record._id}]`}\n                    {...formItemLayout}>\n                    {getFieldDecorator(`Unit[${record._id}]`, {\n                        validateTrigger: ['onChange', 'onBlur'],\n                        rules: [{\n                            required: true,\n                            message: \"This field is required.\",\n                        }],\n                    })(\n                        <InputNumber min={0} placeholder=\"quantity\"/>\n                    )}\n                </Form.Item>\n            },{\n                title: 'discount %',\n                key: 'discount',\n                dataIndex: 'discount',\n                render: (item, record) => <Form.Item\n                    key={`discount[${record._id}]`}\n                    {...formItemLayout}>\n                    {getFieldDecorator(`discount[${record._id}]`, {\n                        rules: [{\n                            required: true,\n                            message: \"This field is required.\",\n                        }],\n                    })(\n                      <InputNumber min={0} max={100} placeholder=\"discount\"/>\n                    )}\n                </Form.Item>\n            }, {\n                title: 'Unit Cost',\n                key: 'unit_cost',\n                dataIndex: 'unit_cost',\n                render: (item, record) => <Form.Item\n                    key={`unit_cost[${record._id}]`}\n                    {...formItemLayout}>\n                    {getFieldDecorator(`unit_cost[${record._id}]`, {\n                        // validateTrigger: ['onChange', 'onBlur'],\n                        rules: [{\n                            required: true,\n                            message: \"This field is required.\",\n                        }],\n                    })(\n                        <InputNumber placeholder=\"Unit Cost\"/>\n                    )}\n                </Form.Item>\n            }, {\n                title: 'Taxes',\n                key: 'taxes',\n                dataIndex: 'taxes',\n                render: (item, record) => <Form.Item\n                    key={`batch[${record._id}]`}\n                    {...formItemLayout}>\n                    {getFieldDecorator(`taxes[${record._id}]`, {\n                        validateTrigger: ['onChange', 'onBlur'],\n\n                    })(\n                        <Select placeholder=\"Batch Number\">{taxesOption}</Select>\n                    )}\n                </Form.Item>\n            }, ]);\n\n        consumeRow = consumeRow.concat([{\n            title: 'Action',\n            key: '_id',\n            dataIndex: '_id',\n            render: (value, record) => <a onClick={() => that.remove(record._id)}>Delete</a>\n        }]);\n        return <div>\n            <Card title={this.state.classType + \" Stock\"}>\n                <Row gutter={16}>\n                    <Col span={7}>\n                        <Tabs size=\"small\" type=\"card\">\n                            {INVOICE_ITEM_TYPE.map(itemType => <TabPane tab={itemType.label} key={itemType.value}>\n                                <List size={\"small\"}\n                                      itemLayout=\"horizontal\"\n                                      dataSource={this.state.items ? this.state.items[itemType.value] : []}\n                                      renderItem={item => (\n                                          <List.Item>\n                                              <List.Item.Meta\n                                                  title={item.name}\n                                                  />\n                                              <Button type=\"primary\" size=\"small\" shape=\"circle\"\n                                                      onClick={() => this.add(item)} icon={\"arrow-right\"}/>\n                                          </List.Item>)}/>\n                            </TabPane>)}\n                        </Tabs>\n                    </Col>\n                    <Col span={17}>\n                        <Form onSubmit={this.handleSubmit}>\n                            <Table pagination={false}\n                                   bordered={true}\n                                   dataSource={this.state.tableFormValues}\n                                   columns={consumeRow}/>\n                            {/*<List>{formItems}</List>*/}\n                            <Form.Item {...formItemLayoutWithOutLabel}>\n                                <Button type=\"primary\" htmlType=\"submit\">Submit</Button>\n                            </Form.Item>\n                        </Form>\n\n                    </Col>\n                </Row>\n            </Card>\n\n        </div>\n\n    }\n}\n\nexport default Form.create()(Addinvoicedynamic);\n"]},"metadata":{},"sourceType":"module"}