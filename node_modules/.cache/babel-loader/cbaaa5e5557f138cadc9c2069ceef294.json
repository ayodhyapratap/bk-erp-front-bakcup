{"ast":null,"code":"import _defineProperty from \"/home/shivam/WorkSpace/bk-erp-front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _classCallCheck from \"/home/shivam/WorkSpace/bk-erp-front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/shivam/WorkSpace/bk-erp-front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/shivam/WorkSpace/bk-erp-front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/shivam/WorkSpace/bk-erp-front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/shivam/WorkSpace/bk-erp-front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/home/shivam/WorkSpace/bk-erp-front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/home/shivam/WorkSpace/bk-erp-front/src/app/components/settings/options/mlm/MLMGenerate.js\";\nimport { Form, Input, Button, Card, Table, InputNumber } from 'antd';\nimport React from \"react\";\nimport { STAFF_ROLES, GENERATE_MLM_COMMISSON, SINGLE_PRODUCT_MARGIN } from \"../../../../constants/api\";\nimport { displayMessage, getAPI, interpolate, postAPI } from \"../../../../utils/common\";\nimport { SUCCESS_MSG_TYPE } from \"../../../../constants/dataKeys\";\n\nvar MLMGenerate =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(MLMGenerate, _React$Component);\n\n  function MLMGenerate(props) {\n    var _this;\n\n    _classCallCheck(this, MLMGenerate);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(MLMGenerate).call(this, props));\n\n    _this.handleSubmit = function (e) {\n      e.preventDefault();\n\n      var that = _assertThisInitialized(_assertThisInitialized(_this));\n\n      _this.props.form.validateFieldsAndScroll(function (err, values) {\n        var reqData = {}; // that.state.productLevels.forEach(function (level) {\n        //     reqData[level.name] = {...values[level.name]}\n        // });\n\n        reqData[values.margin_name] = {};\n\n        for (var i = 1; i <= that.state.level_count; i++) {\n          reqData[values.margin_name][i] = [];\n\n          for (var j = 1; j < values[i].length; j++) {\n            // if (values[i][j] != undefined)\n            reqData[values.margin_name][i].push(_defineProperty({}, j, values[i][j]));\n          }\n        }\n\n        reqData[values.margin_name].details = {\n          level_count: that.state.level_count\n        };\n\n        if (!err) {\n          console.log(reqData);\n          that.setState({\n            changePassLoading: true\n          });\n\n          var successFn = function successFn(data) {\n            displayMessage(SUCCESS_MSG_TYPE, data.message);\n            that.props.loadMlmData();\n            that.props.history.push('/mlm');\n          };\n\n          var errorFn = function errorFn() {};\n\n          postAPI(GENERATE_MLM_COMMISSON, reqData, successFn, errorFn);\n        }\n      });\n    };\n\n    _this.add = function (level_name) {\n      var form = _this.props.form; // can use data-binding to get\n\n      var keys = form.getFieldValue('keys');\n      var nextKeys = keys.concat(level_name); // can use data-binding to set\n      // important! notify form to detect changes\n\n      form.setFieldsValue({\n        keys: nextKeys\n      });\n    };\n\n    _this.setLevelCount = function (e) {\n      var that = _assertThisInitialized(_assertThisInitialized(_this));\n\n      that.setState({\n        level_count: e < 5 ? e : 5\n      });\n    };\n\n    _this.state = {\n      redirect: false,\n      level_count: 1,\n      margin: null,\n      editRecord: _this.props.editRecord ? _this.props.editRecord : null,\n      editId: _this.props.editId ? _this.props.editId : null\n    };\n    return _this;\n  }\n\n  _createClass(MLMGenerate, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.loadMlmData();\n      this.loadRoles();\n\n      if (this.state.editRecord && this.state.editId) {\n        this.loadMlmData();\n        this.setLevelCount(this.state.editRecord.length);\n      } // this.loadProductlevels();\n\n    }\n  }, {\n    key: \"loadMlmData\",\n    value: function loadMlmData() {\n      var that = this;\n\n      var successFn = function successFn(data) {\n        that.setState({\n          margin: data\n        });\n      };\n\n      var errorFn = function errorFn() {};\n\n      getAPI(interpolate(SINGLE_PRODUCT_MARGIN, [this.state.editId]), successFn, errorFn);\n    }\n  }, {\n    key: \"loadRoles\",\n    value: function loadRoles() {\n      var that = this;\n\n      var successFn = function successFn(data) {\n        that.setState({\n          staffRoles: data\n        });\n      };\n\n      var errorFn = function errorFn() {};\n\n      getAPI(STAFF_ROLES, successFn, errorFn);\n    } // loadProductlevels() {\n    //     let that = this;\n    //     let successFn = function (data) {\n    //         that.setState({\n    //             productLevels: data\n    //         });\n    //         data.forEach(function (item) {\n    //             that.add(item.name);\n    //         })\n    //     }\n    //     let errorFn = function () {\n    //\n    //     }\n    //     getAPI(PRODUCT_LEVEL, successFn, errorFn);\n    // }\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var that = this;\n      var _this$props$form = this.props.form,\n          getFieldDecorator = _this$props$form.getFieldDecorator,\n          getFieldValue = _this$props$form.getFieldValue;\n      var formItemLayout = {\n        labelCol: {\n          xs: {\n            span: 24\n          },\n          sm: {\n            span: 4\n          }\n        },\n        wrapperCol: {\n          xs: {\n            span: 24\n          },\n          sm: {\n            span: 20\n          }\n        }\n      };\n      getFieldDecorator('keys', {\n        initialValue: []\n      });\n      var columns = [{\n        title: 'Roles',\n        dataIndex: 'name',\n        key: 'name'\n      }];\n\n      if (this.state.level_count) {\n        var _loop = function _loop(i) {\n          var record = {};\n          columns.push({\n            title: 'Level ' + i,\n            dataIndex: 'Level ' + i,\n            key: 'Level ' + i,\n            render: function render(item, record) {\n              return React.createElement(Form.Item, Object.assign({}, formItemLayout, {\n                // label={k}\n                required: true,\n                key: \"\".concat(i, \"[\").concat(record.id, \"]\"),\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 156\n                },\n                __self: this\n              }), getFieldDecorator(\"\".concat(i, \"[\").concat(record.id, \"]\"), {\n                validateTrigger: ['onChange', 'onBlur'],\n                initialValue: _this2.state.editRecord && (record = _this2.state.editRecord[record.id]) ? record[i] : null\n              })(React.createElement(InputNumber, {\n                min: 0,\n                placeholder: \"Percent Commission\",\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 165\n                },\n                __self: this\n              })));\n            }\n          });\n        };\n\n        for (var i = 1; i <= this.state.level_count; i++) {\n          _loop(i);\n        }\n      }\n\n      return React.createElement(Card, {\n        title: \"Manage MLM Commission\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 172\n        },\n        __self: this\n      }, React.createElement(Form, {\n        onSubmit: this.handleSubmit,\n        className: \"login-form\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 173\n        },\n        __self: this\n      }, React.createElement(Form.Item, Object.assign({}, formItemLayout, {\n        label: \"Margin Name\",\n        required: true,\n        key: \"margin_name\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 174\n        },\n        __self: this\n      }), getFieldDecorator(\"margin_name\", {\n        validateTrigger: ['onChange', 'onBlur'],\n        initialValue: this.state.margin ? this.state.margin.name : null\n      })(React.createElement(Input, {\n        placeholder: \"Margin Type Name\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 183\n        },\n        __self: this\n      }))), React.createElement(Form.Item, Object.assign({}, formItemLayout, {\n        label: 'No of Levels',\n        required: false,\n        key: \"level_count\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 186\n        },\n        __self: this\n      }), getFieldDecorator(\"level_count\", {\n        validateTrigger: ['onChange', 'onBlur'],\n        initialValue: this.state.editRecord ? this.state.editRecord.length : null\n      })(React.createElement(InputNumber, {\n        min: 1,\n        max: 5,\n        placeholder: \"Level Count\",\n        onChange: this.setLevelCount,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 197\n        },\n        __self: this\n      }))), React.createElement(Table, {\n        bordered: true,\n        pagination: false,\n        columns: columns,\n        dataSource: this.state.staffRoles,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 200\n        },\n        __self: this\n      }), React.createElement(Form.Item, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 201\n        },\n        __self: this\n      }, React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 202\n        },\n        __self: this\n      }), React.createElement(Button, {\n        type: \"primary\",\n        htmlType: \"submit\",\n        className: \"login-form-button\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 203\n        },\n        __self: this\n      }, \"Set MLM Commissions\"))));\n    }\n  }]);\n\n  return MLMGenerate;\n}(React.Component);\n\nexport default Form.create()(MLMGenerate);","map":{"version":3,"sources":["/home/shivam/WorkSpace/bk-erp-front/src/app/components/settings/options/mlm/MLMGenerate.js"],"names":["Form","Input","Button","Card","Table","InputNumber","React","STAFF_ROLES","GENERATE_MLM_COMMISSON","SINGLE_PRODUCT_MARGIN","displayMessage","getAPI","interpolate","postAPI","SUCCESS_MSG_TYPE","MLMGenerate","props","handleSubmit","e","preventDefault","that","form","validateFieldsAndScroll","err","values","reqData","margin_name","i","state","level_count","j","length","push","details","console","log","setState","changePassLoading","successFn","data","message","loadMlmData","history","errorFn","add","level_name","keys","getFieldValue","nextKeys","concat","setFieldsValue","setLevelCount","redirect","margin","editRecord","editId","loadRoles","staffRoles","getFieldDecorator","formItemLayout","labelCol","xs","span","sm","wrapperCol","initialValue","columns","title","dataIndex","key","record","render","item","id","validateTrigger","name","Component","create"],"mappings":"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","sourcesContent":["import {\n    Form, Input, Button, Card, Table, InputNumber\n} from 'antd';\nimport React from \"react\";\nimport {\n    STAFF_ROLES,\n    GENERATE_MLM_COMMISSON,\n    SINGLE_PRODUCT_MARGIN\n} from \"../../../../constants/api\"\nimport {displayMessage, getAPI, interpolate, postAPI} from \"../../../../utils/common\";\nimport {SUCCESS_MSG_TYPE} from \"../../../../constants/dataKeys\";\n\nclass MLMGenerate extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            redirect: false,\n            level_count: 1,\n            margin: null,\n            editRecord: (this.props.editRecord ? this.props.editRecord : null),\n            editId: (this.props.editId ? this.props.editId : null)\n        }\n    }\n\n    componentDidMount() {\n        this.loadMlmData();\n        this.loadRoles();\n        if (this.state.editRecord && this.state.editId) {\n            this.loadMlmData();\n            this.setLevelCount(this.state.editRecord.length)\n        }\n        // this.loadProductlevels();\n    }\n\n    loadMlmData() {\n        let that = this;\n        let successFn = function (data) {\n            that.setState({\n                margin: data\n            })\n        }\n        let errorFn = function () {\n\n        }\n        getAPI(interpolate(SINGLE_PRODUCT_MARGIN, [this.state.editId]), successFn, errorFn);\n    }\n\n    loadRoles() {\n        let that = this;\n        let successFn = function (data) {\n            that.setState({\n                staffRoles: data\n            })\n        }\n        let errorFn = function () {\n\n        }\n        getAPI(STAFF_ROLES, successFn, errorFn);\n    }\n\n    // loadProductlevels() {\n    //     let that = this;\n    //     let successFn = function (data) {\n    //         that.setState({\n    //             productLevels: data\n    //         });\n    //         data.forEach(function (item) {\n    //             that.add(item.name);\n    //         })\n    //     }\n    //     let errorFn = function () {\n    //\n    //     }\n    //     getAPI(PRODUCT_LEVEL, successFn, errorFn);\n    // }\n\n\n    handleSubmit = (e) => {\n        e.preventDefault();\n        let that = this;\n        this.props.form.validateFieldsAndScroll((err, values) => {\n            let reqData = {};\n            // that.state.productLevels.forEach(function (level) {\n            //     reqData[level.name] = {...values[level.name]}\n            // });\n            reqData[values.margin_name] = {};\n            for (let i = 1; i <= that.state.level_count; i++) {\n                reqData[values.margin_name][i] = []\n                for (let j = 1; j < values[i].length; j++) {\n                    // if (values[i][j] != undefined)\n                    reqData[values.margin_name][i].push({[j]: values[i][j]})\n                }\n            }\n            reqData[values.margin_name].details = {level_count: that.state.level_count}\n            if (!err) {\n                console.log(reqData);\n                that.setState({changePassLoading: true});\n                let successFn = function (data) {\n                    displayMessage(SUCCESS_MSG_TYPE, data.message);\n                    that.props.loadMlmData();\n                    that.props.history.push('/mlm');\n                };\n                let errorFn = function () {\n                };\n                postAPI(GENERATE_MLM_COMMISSON, reqData, successFn, errorFn);\n            }\n        });\n    };\n\n\n    add = (level_name) => {\n        const {form} = this.props;\n        // can use data-binding to get\n        const keys = form.getFieldValue('keys');\n        const nextKeys = keys.concat(level_name);\n        // can use data-binding to set\n        // important! notify form to detect changes\n        form.setFieldsValue({\n            keys: nextKeys,\n        });\n    }\n\n    setLevelCount = (e) => {\n        let that = this;\n        that.setState({\n            level_count: e < 5 ? e : 5\n        })\n    }\n\n    render() {\n        let that = this\n        const {getFieldDecorator, getFieldValue} = this.props.form;\n        const formItemLayout = {\n            labelCol: {\n                xs: {span: 24},\n                sm: {span: 4},\n            },\n            wrapperCol: {\n                xs: {span: 24},\n                sm: {span: 20},\n            },\n        };\n        getFieldDecorator('keys', {initialValue: []});\n        let columns = [{\n            title: 'Roles',\n            dataIndex: 'name',\n            key: 'name'\n        }];\n        if (this.state.level_count)\n            for (let i = 1; i <= this.state.level_count; i++) {\n                let record = {}\n                columns.push({\n                    title: 'Level ' + i,\n                    dataIndex: 'Level ' + i,\n                    key: 'Level ' + i,\n                    render: (item, record) => <Form.Item\n                        {...formItemLayout}\n                        // label={k}\n                        required={true}\n                        key={`${i}[${record.id}]`}>\n                        {getFieldDecorator(`${i}[${record.id}]`, {\n                            validateTrigger: ['onChange', 'onBlur'],\n                            initialValue: (this.state.editRecord && (record = this.state.editRecord[record.id]) ? record[i] : null)\n                        })(\n                            <InputNumber min={0} placeholder=\"Percent Commission\"/>\n                        )}\n                    </Form.Item>\n                })\n            }\n\n        return (\n            <Card title={\"Manage MLM Commission\"}>\n                <Form onSubmit={this.handleSubmit} className=\"login-form\">\n                    <Form.Item\n                        {...formItemLayout}\n                        label={\"Margin Name\"}\n                        required={true}\n                        key={`margin_name`}>\n                        {getFieldDecorator(`margin_name`, {\n                            validateTrigger: ['onChange', 'onBlur'],\n                            initialValue: (this.state.margin ? this.state.margin.name : null)\n                        })(\n                            <Input placeholder=\"Margin Type Name\"/>\n                        )}\n                    </Form.Item>\n                    <Form.Item\n                        {...formItemLayout}\n                        label={'No of Levels'}\n                        required={false}\n                        key={`level_count`}\n\n                    >\n                        {getFieldDecorator(`level_count`, {\n                            validateTrigger: ['onChange', 'onBlur'],\n                            initialValue: (this.state.editRecord ? this.state.editRecord.length : null)\n                        })(\n                            <InputNumber min={1} max={5} placeholder=\"Level Count\" onChange={this.setLevelCount}/>\n                        )}\n                    </Form.Item>\n                    <Table bordered={true} pagination={false} columns={columns} dataSource={this.state.staffRoles}/>\n                    <Form.Item>\n                        <br/>\n                        <Button type=\"primary\" htmlType=\"submit\" className=\"login-form-button\">\n                            Set MLM Commissions\n                        </Button>\n                    </Form.Item>\n                </Form>\n            </Card>\n        );\n    }\n}\n\nexport default Form.create()(MLMGenerate);\n"]},"metadata":{},"sourceType":"module"}