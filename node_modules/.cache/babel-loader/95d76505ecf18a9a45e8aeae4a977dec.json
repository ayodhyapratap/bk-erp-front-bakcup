{"ast":null,"code":"import _classCallCheck from \"/home/shivam/WorkSpace/bk-erp-front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/shivam/WorkSpace/bk-erp-front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/shivam/WorkSpace/bk-erp-front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/shivam/WorkSpace/bk-erp-front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/shivam/WorkSpace/bk-erp-front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/home/shivam/WorkSpace/bk-erp-front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/home/shivam/WorkSpace/bk-erp-front/src/app/components/patients/completedProcedures/PatientCompletedProcedures.js\";\nimport React from \"react\";\nimport { Button, Card, Checkbox, Divider, Icon, Table } from \"antd\";\nimport { getAPI, interpolate } from \"../../../utils/common\";\nimport { PROCEDURE_CATEGORY, PRODUCT_MARGIN, TREATMENTPLANS_API } from \"../../../constants/api\";\nimport moment from \"moment\";\nimport { Route, Switch } from \"react-router\";\nimport AddorEditPatientTreatmentPlans from \"../treatmentPlans/AddorEditPatientTreatmentPlans\";\nimport { Link } from \"react-router-dom\";\nimport { SELECT_FIELD } from \"../../../constants/dataKeys\";\n\nvar PatientCompletedProcedures =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(PatientCompletedProcedures, _React$Component);\n\n  function PatientCompletedProcedures(props) {\n    var _this;\n\n    _classCallCheck(this, PatientCompletedProcedures);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(PatientCompletedProcedures).call(this, props));\n    _this.state = {\n      currentPatient: _this.props.currentPatient,\n      active_practiceId: _this.props.active_practiceId,\n      treatmentPlans: [],\n      procedure_category: null,\n      completedTreatmentPlans: [],\n      productMargin: []\n    };\n    _this.loadtreatmentPlanss = _this.loadtreatmentPlanss.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.loadProcedureCategory = _this.loadProcedureCategory.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.editTreatmentPlanData = _this.editTreatmentPlanData.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(PatientCompletedProcedures, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      if (this.props.match.params.id) {\n        this.loadtreatmentPlanss();\n        this.loadProcedureCategory();\n        this.loadProductMargin();\n      }\n    }\n  }, {\n    key: \"loadProductMargin\",\n    value: function loadProductMargin() {\n      var that = this;\n\n      var successFn = function successFn(data) {\n        that.setState({\n          productMargin: data\n        });\n      };\n\n      var errorFn = function errorFn() {};\n\n      getAPI(PRODUCT_MARGIN, successFn, errorFn);\n    }\n  }, {\n    key: \"loadtreatmentPlanss\",\n    value: function loadtreatmentPlanss() {\n      var completed = [];\n      var that = this;\n\n      var successFn = function successFn(data) {\n        that.setState({\n          treatmentPlans: data\n        });\n        data.forEach(function (treatmentplan) {\n          if (treatmentplan.is_completed) {\n            completed.push(treatmentplan);\n          }\n        });\n        that.setState({\n          completedTreatmentPlans: completed\n        });\n      };\n\n      var errorFn = function errorFn() {};\n\n      getAPI(interpolate(TREATMENTPLANS_API, [this.props.match.params.id]), successFn, errorFn);\n    }\n  }, {\n    key: \"loadProcedureCategory\",\n    value: function loadProcedureCategory() {\n      var that = this;\n\n      var successFn = function successFn(data) {\n        that.setState({\n          procedure_category: data\n        });\n      };\n\n      var errorFn = function errorFn() {};\n\n      getAPI(interpolate(PROCEDURE_CATEGORY, [this.props.active_practiceId]), successFn, errorFn);\n    }\n  }, {\n    key: \"editTreatmentPlanData\",\n    value: function editTreatmentPlanData(record) {\n      this.setState({\n        editTreatmentPlan: record\n      });\n      var id = this.props.match.params.id;\n      this.props.history.push(\"/patient/\" + id + \"/emr/plans/edit\");\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var procedures = {};\n\n      if (this.state.procedure_category) {\n        this.state.procedure_category.forEach(function (procedure) {\n          procedures[procedure.id] = procedure.name;\n        });\n      }\n\n      console.log(this.state.procedure_category);\n      var columns = [{\n        title: 'Time',\n        dataIndex: 'created_at',\n        key: 'name',\n        render: function render(created_at) {\n          return React.createElement(\"span\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 105\n            },\n            __self: this\n          }, moment(created_at).format('LLL'));\n        }\n      }, {\n        title: 'procedure',\n        key: 'procedure',\n        render: function render(text, record) {\n          return React.createElement(\"span\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 110\n            },\n            __self: this\n          }, \" \", procedures[record.procedure]);\n        }\n      }, {\n        title: 'Quantity',\n        dataIndex: 'qunatity',\n        key: 'quantity'\n      }, {\n        title: 'Cost per  Unit',\n        dataIndex: 'cost',\n        key: 'cost'\n      }, {\n        label: 'MLM Margin Type',\n        type: SELECT_FIELD,\n        initialValue: this.state.editFields ? this.state.editFields.margin : null,\n        key: 'margin',\n        required: true,\n        options: this.state.productMargin.map(function (margin) {\n          return {\n            label: margin.name,\n            value: margin.id\n          };\n        })\n      }, {\n        title: 'Active',\n        key: 'is_active',\n        render: function render(text, record) {\n          return React.createElement(Checkbox, {\n            disabled: true,\n            checked: record.is_active,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 131\n            },\n            __self: this\n          });\n        }\n      }, {\n        title: 'Completed',\n        key: 'is_completed',\n        render: function render(text, record) {\n          return React.createElement(Checkbox, {\n            disabled: true,\n            checked: record.is_completed,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 137\n            },\n            __self: this\n          });\n        }\n      }, {\n        title: 'Action',\n        key: 'action',\n        render: function render(text, record) {\n          return React.createElement(\"span\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 143\n            },\n            __self: this\n          }, React.createElement(\"a\", {\n            onClick: function onClick() {\n              return _this2.editTreatmentPlanData(record);\n            },\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 144\n            },\n            __self: this\n          }, \"Edit\"), React.createElement(Divider, {\n            type: \"vertical\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 146\n            },\n            __self: this\n          }), React.createElement(\"a\", {\n            href: \"javascript:;\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 147\n            },\n            __self: this\n          }, \"Delete\"));\n        }\n      }];\n\n      if (this.props.match.params.id) {\n        return React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 153\n          },\n          __self: this\n        }, React.createElement(Switch, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 153\n          },\n          __self: this\n        }, React.createElement(Route, {\n          exact: true,\n          path: \"/patient/:id/emr/plans/add\",\n          render: function render(route) {\n            return React.createElement(AddorEditPatientTreatmentPlans, Object.assign({}, _this2.state, route, {\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 155\n              },\n              __self: this\n            }));\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 154\n          },\n          __self: this\n        }), React.createElement(Route, {\n          exact: true,\n          path: \"/patient/:id/emr/plans/edit\",\n          render: function render(route) {\n            return React.createElement(AddorEditPatientTreatmentPlans, Object.assign({}, _this2.state, route, {\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 157\n              },\n              __self: this\n            }));\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 156\n          },\n          __self: this\n        }), React.createElement(Card, {\n          title: this.state.currentPatient ? this.state.currentPatient.name + \" completed Procedurees\" : \"completed Procedures\",\n          extra: React.createElement(Button.Group, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 160\n            },\n            __self: this\n          }, React.createElement(Link, {\n            to: \"/patient/\" + this.props.match.params.id + \"/emr/plans/add\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 161\n            },\n            __self: this\n          }, React.createElement(Button, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 161\n            },\n            __self: this\n          }, React.createElement(Icon, {\n            type: \"plus\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 161\n            },\n            __self: this\n          }), \"Add\"))),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 158\n          },\n          __self: this\n        }, React.createElement(Table, {\n          columns: columns,\n          dataSource: this.state.completedTreatmentPlans,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 165\n          },\n          __self: this\n        }))));\n      } else {\n        return React.createElement(Card, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 173\n          },\n          __self: this\n        }, React.createElement(\"h2\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 174\n          },\n          __self: this\n        }, \" select patient to further continue\"));\n      }\n    }\n  }]);\n\n  return PatientCompletedProcedures;\n}(React.Component);\n\nexport default PatientCompletedProcedures;","map":{"version":3,"sources":["/home/shivam/WorkSpace/bk-erp-front/src/app/components/patients/completedProcedures/PatientCompletedProcedures.js"],"names":["React","Button","Card","Checkbox","Divider","Icon","Table","getAPI","interpolate","PROCEDURE_CATEGORY","PRODUCT_MARGIN","TREATMENTPLANS_API","moment","Route","Switch","AddorEditPatientTreatmentPlans","Link","SELECT_FIELD","PatientCompletedProcedures","props","state","currentPatient","active_practiceId","treatmentPlans","procedure_category","completedTreatmentPlans","productMargin","loadtreatmentPlanss","bind","loadProcedureCategory","editTreatmentPlanData","match","params","id","loadProductMargin","that","successFn","data","setState","errorFn","completed","forEach","treatmentplan","is_completed","push","record","editTreatmentPlan","history","procedures","procedure","name","console","log","columns","title","dataIndex","key","render","created_at","format","text","label","type","initialValue","editFields","margin","required","options","map","value","is_active","route","Component"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport {Button, Card, Checkbox, Divider, Icon, Table} from \"antd\";\nimport {getAPI, interpolate} from \"../../../utils/common\";\nimport {PROCEDURE_CATEGORY, PRODUCT_MARGIN, TREATMENTPLANS_API} from \"../../../constants/api\";\nimport moment from \"moment\";\nimport {Route, Switch} from \"react-router\";\nimport AddorEditPatientTreatmentPlans from \"../treatmentPlans/AddorEditPatientTreatmentPlans\";\nimport {Link} from \"react-router-dom\";\nimport {SELECT_FIELD} from \"../../../constants/dataKeys\";\n\nclass PatientCompletedProcedures extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            currentPatient: this.props.currentPatient,\n            active_practiceId: this.props.active_practiceId,\n            treatmentPlans: [],\n            procedure_category: null,\n            completedTreatmentPlans: [],\n            productMargin: []\n        }\n        this.loadtreatmentPlanss = this.loadtreatmentPlanss.bind(this);\n        this.loadProcedureCategory = this.loadProcedureCategory.bind(this);\n        this.editTreatmentPlanData = this.editTreatmentPlanData.bind(this);\n    }\n\n    componentDidMount() {\n        if (this.props.match.params.id) {\n            this.loadtreatmentPlanss();\n            this.loadProcedureCategory();\n            this.loadProductMargin();\n        }\n    }\n\n    loadProductMargin() {\n        let that = this;\n        let successFn = function (data) {\n            that.setState({\n                productMargin: data\n            })\n        }\n        let errorFn = function () {\n        }\n        getAPI(PRODUCT_MARGIN, successFn, errorFn);\n    }\n\n    loadtreatmentPlanss() {\n        let completed = [];\n        let that = this;\n        let successFn = function (data) {\n            that.setState({\n                treatmentPlans: data\n            })\n            data.forEach(function (treatmentplan) {\n                if (treatmentplan.is_completed) {\n                    completed.push(treatmentplan)\n                }\n            })\n            that.setState({\n                completedTreatmentPlans: completed,\n            })\n        }\n        let errorFn = function () {\n        }\n        getAPI(interpolate(TREATMENTPLANS_API, [this.props.match.params.id]), successFn, errorFn)\n    }\n\n    loadProcedureCategory() {\n        let that = this;\n        let successFn = function (data) {\n            that.setState({\n                procedure_category: data\n            })\n        };\n        let errorFn = function () {\n\n        }\n        getAPI(interpolate(PROCEDURE_CATEGORY, [this.props.active_practiceId]), successFn, errorFn)\n    }\n\n\n    editTreatmentPlanData(record) {\n        this.setState({\n            editTreatmentPlan: record,\n        });\n        let id = this.props.match.params.id;\n        this.props.history.push(\"/patient/\" + id + \"/emr/plans/edit\")\n\n    }\n\n    render() {\n        const procedures = {}\n        if (this.state.procedure_category) {\n\n            this.state.procedure_category.forEach(function (procedure) {\n                procedures[procedure.id] = (procedure.name)\n            })\n        }\n        console.log(this.state.procedure_category);\n\n        const columns = [{\n            title: 'Time',\n            dataIndex: 'created_at',\n            key: 'name',\n            render: created_at => <span>{moment(created_at).format('LLL')}</span>,\n        }, {\n            title: 'procedure',\n            key: 'procedure',\n            render: (text, record) => (\n                <span> {procedures[record.procedure]}</span>\n            )\n        }, {\n            title: 'Quantity',\n            dataIndex: 'qunatity',\n            key: 'quantity',\n        }, {\n            title: 'Cost per  Unit',\n            dataIndex: 'cost',\n            key: 'cost',\n        }, {\n            label: 'MLM Margin Type',\n            type: SELECT_FIELD,\n            initialValue: (this.state.editFields ? this.state.editFields.margin : null),\n            key: 'margin',\n            required: true,\n            options: this.state.productMargin.map(margin => ({label: margin.name, value: margin.id}))\n        }, {\n            title: 'Active',\n            key: 'is_active',\n            render: (text, record) => (\n                <Checkbox disabled checked={record.is_active}/>\n            )\n        }, {\n            title: 'Completed',\n            key: 'is_completed',\n            render: (text, record) => (\n                <Checkbox disabled checked={record.is_completed}/>\n            )\n        }, {\n            title: 'Action',\n            key: 'action',\n            render: (text, record) => (\n                <span>\n               <a onClick={() => this.editTreatmentPlanData(record)}>Edit</a>\n\n                <Divider type=\"vertical\"/>\n                <a href=\"javascript:;\">Delete</a>\n              </span>\n            ),\n        }];\n\n        if (this.props.match.params.id) {\n            return <div><Switch>\n                <Route exact path='/patient/:id/emr/plans/add'\n                       render={(route) => <AddorEditPatientTreatmentPlans{...this.state} {...route}/>}/>\n                <Route exact path='/patient/:id/emr/plans/edit'\n                       render={(route) => <AddorEditPatientTreatmentPlans {...this.state} {...route}/>}/>\n                <Card\n                    title={this.state.currentPatient ? this.state.currentPatient.name + \" completed Procedurees\" : \"completed Procedures\"}\n                    extra={<Button.Group>\n                        <Link to={\"/patient/\" + this.props.match.params.id + \"/emr/plans/add\"}><Button><Icon\n                            type=\"plus\"/>Add</Button></Link>\n                    </Button.Group>}>\n\n                    <Table columns={columns} dataSource={this.state.completedTreatmentPlans}/>\n\n                </Card>\n            </Switch>\n\n            </div>\n        }\n        else {\n            return <Card>\n                <h2> select patient to further continue</h2>\n            </Card>\n        }\n\n    }\n}\n\nexport default PatientCompletedProcedures;\n"]},"metadata":{},"sourceType":"module"}