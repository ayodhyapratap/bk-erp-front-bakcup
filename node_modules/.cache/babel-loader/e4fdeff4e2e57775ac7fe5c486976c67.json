{"ast":null,"code":"import _classCallCheck from \"/home/shivam/WorkSpace/bk-erp-front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/shivam/WorkSpace/bk-erp-front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/shivam/WorkSpace/bk-erp-front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/shivam/WorkSpace/bk-erp-front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/shivam/WorkSpace/bk-erp-front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/home/shivam/WorkSpace/bk-erp-front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/home/shivam/WorkSpace/bk-erp-front/src/app/components/settings/options/procedure-catalog/EditProcedure.js\";\nimport React from \"react\";\nimport DynamicFieldsForm from \"../../../common/DynamicFieldsForm\";\nimport { Form, Card, message } from \"antd\";\nimport { CHECKBOX_FIELD, SUCCESS_MSG_TYPE, INPUT_FIELD, RADIO_FIELD, SELECT_FIELD, NUMBER_FIELD } from \"../../../../constants/dataKeys\";\nimport { PROCEDURE_CATEGORY, PRODUCT_MARGIN, TAXES } from \"../../../../constants/api\";\nimport { getAPI, displayMessage, interpolate } from \"../../../../utils/common\";\nimport { Redirect } from \"react-router-dom\";\n\nvar EditProcedure =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(EditProcedure, _React$Component);\n\n  function EditProcedure(props) {\n    var _this;\n\n    _classCallCheck(this, EditProcedure);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(EditProcedure).call(this, props));\n    _this.state = {\n      taxes: [],\n      procedure_category: [],\n      redirect: false,\n      editingProcedureData: _this.props.editingProcedureData\n    };\n    _this.loadTaxes = _this.loadTaxes.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.loadProcedures = _this.loadProcedures.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n\n    _this.loadTaxes();\n\n    _this.loadProductMargin();\n\n    return _this;\n  }\n\n  _createClass(EditProcedure, [{\n    key: \"loadProductMargin\",\n    value: function loadProductMargin() {\n      var that = this;\n\n      var successFn = function successFn(data) {\n        that.setState({\n          productMargin: data\n        });\n      };\n\n      var errorFn = function errorFn() {};\n\n      getAPI(PRODUCT_MARGIN, successFn, errorFn);\n    }\n  }, {\n    key: \"changeRedirect\",\n    value: function changeRedirect() {\n      var redirectVar = this.state.redirect;\n      this.setState({\n        redirect: !redirectVar\n      });\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.setState({\n        procedure_category: this.props.procedure_category\n      });\n\n      if (this.props.match.params.id != null) {//     this.loadProcedures(this.props.match.params.id);\n      }\n    }\n  }, {\n    key: \"loadProcedures\",\n    value: function loadProcedures(id) {\n      var that = this;\n      var url = \"\".concat(interpolate(PROCEDURE_CATEGORY, [this.props.active_practiceId]));\n      console.log(\"url\", url);\n\n      var successFn = function successFn(data) {\n        console.log(\"get table\", data);\n        that.setState({\n          procedure_category: data\n        });\n      };\n\n      var errorFn = function errorFn() {};\n\n      getAPI(url, successFn, errorFn);\n    }\n  }, {\n    key: \"loadTaxes\",\n    value: function loadTaxes() {\n      var that = this;\n\n      var successFn = function successFn(data) {\n        console.log(data.map(function (tax) {\n          return Object.create({\n            label: tax.name,\n            value: tax.id\n          });\n        }));\n        that.setState({\n          taxes: data\n        });\n      };\n\n      var errorFn = function errorFn() {};\n\n      getAPI(interpolate(TAXES, [this.props.active_practiceId]), successFn, errorFn);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var that = this;\n      var formFields = [{\n        label: \"Procedure Name\",\n        key: \"name\",\n        required: true,\n        initialValue: this.state.editingProcedureData ? this.state.editingProcedureData.name : null,\n        type: INPUT_FIELD\n      }, {\n        label: \"Procedure Cost\",\n        key: \"cost\",\n        follow: \"INR\",\n        initialValue: this.state.editingProcedureData ? this.state.editingProcedureData.cost : null,\n        required: true,\n        type: NUMBER_FIELD\n      }, {\n        label: \"Applicable Taxes\",\n        key: \"taxes\",\n        initialValue: this.state.editingProcedureData ? this.state.editingProcedureData.taxes : null,\n        type: CHECKBOX_FIELD,\n        options: this.state.taxes.map(function (tax) {\n          return Object.create({\n            label: tax.name,\n            value: tax.id\n          });\n        })\n      }, {\n        label: 'MLM Margin Type',\n        type: SELECT_FIELD,\n        initialValue: this.state.editFields ? this.state.editFields.margin : null,\n        key: 'margin',\n        required: true,\n        options: that.state.productMargin.map(function (margin) {\n          return {\n            label: margin.name,\n            value: margin.id\n          };\n        })\n      }, {\n        label: \"Add Under\",\n        key: \"under\",\n        type: SELECT_FIELD,\n        options: [{\n          label: \"None\",\n          value: null\n        }].concat(this.state.procedure_category.map(function (procedure) {\n          return Object.create({\n            label: procedure.name,\n            value: procedure.id\n          });\n        })),\n        initialValue: this.state.editingProcedureData ? this.state.editingProcedureData.under : null\n      }, {\n        label: \"Default Note\",\n        key: \"default_notes\",\n        initialValue: this.state.editingProcedureData ? this.state.editingProcedureData.default_notes : null,\n        type: INPUT_FIELD\n      }];\n      var formProp = {\n        successFn: function successFn(data) {\n          displayMessage(SUCCESS_MSG_TYPE, 'success');\n          that.changeRedirect();\n          that.props.loadProcedures();\n        },\n        errorFn: function errorFn() {},\n        action: interpolate(PROCEDURE_CATEGORY, [this.props.active_practiceId]),\n        method: \"post\"\n      };\n      var defaultValues;\n\n      if (this.props.editingProcedureData) {\n        defaultValues = [{\n          \"key\": \"id\",\n          \"value\": this.props.editingProcedureData.id\n        }];\n      }\n\n      var TestFormLayout = Form.create()(DynamicFieldsForm);\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 163\n        },\n        __self: this\n      }, that.props.editingProcedureData ? React.createElement(Card, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 163\n        },\n        __self: this\n      }, React.createElement(TestFormLayout, {\n        title: \"Edit Procedure\",\n        defaultValues: defaultValues,\n        changeRedirect: this.changeRedirect,\n        formProp: formProp,\n        fields: formFields,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 164\n        },\n        __self: this\n      }), this.state.redirect && React.createElement(Redirect, {\n        to: \"/settings/procedures\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 165\n        },\n        __self: this\n      })) : React.createElement(Redirect, {\n        to: \"/settings/procedures\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 166\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return EditProcedure;\n}(React.Component);\n\nexport default EditProcedure;","map":{"version":3,"sources":["/home/shivam/WorkSpace/bk-erp-front/src/app/components/settings/options/procedure-catalog/EditProcedure.js"],"names":["React","DynamicFieldsForm","Form","Card","message","CHECKBOX_FIELD","SUCCESS_MSG_TYPE","INPUT_FIELD","RADIO_FIELD","SELECT_FIELD","NUMBER_FIELD","PROCEDURE_CATEGORY","PRODUCT_MARGIN","TAXES","getAPI","displayMessage","interpolate","Redirect","EditProcedure","props","state","taxes","procedure_category","redirect","editingProcedureData","loadTaxes","bind","loadProcedures","loadProductMargin","that","successFn","data","setState","productMargin","errorFn","redirectVar","match","params","id","url","active_practiceId","console","log","map","tax","Object","create","label","name","value","formFields","key","required","initialValue","type","follow","cost","options","editFields","margin","concat","procedure","under","default_notes","formProp","changeRedirect","action","method","defaultValues","TestFormLayout","Component"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport DynamicFieldsForm from \"../../../common/DynamicFieldsForm\";\nimport {Form, Card, message} from \"antd\";\nimport {\n    CHECKBOX_FIELD,\n    SUCCESS_MSG_TYPE,\n    INPUT_FIELD,\n    RADIO_FIELD,\n    SELECT_FIELD,\n    NUMBER_FIELD\n} from \"../../../../constants/dataKeys\";\nimport {PROCEDURE_CATEGORY, PRODUCT_MARGIN, TAXES} from \"../../../../constants/api\"\nimport {getAPI, displayMessage, interpolate} from \"../../../../utils/common\";\nimport {Redirect} from \"react-router-dom\";\n\nclass EditProcedure extends React.Component {\n    constructor(props) {\n\n        super(props);\n        this.state = {\n            taxes: [],\n            procedure_category: [],\n            redirect:false,\n            editingProcedureData:this.props.editingProcedureData,\n        }\n        this.loadTaxes = this.loadTaxes.bind(this);\n        this.loadProcedures = this.loadProcedures.bind(this)\n        this.loadTaxes();\n        this.loadProductMargin();\n    }\n    loadProductMargin() {\n        let that = this;\n        let successFn = function (data) {\n            that.setState({\n                productMargin: data\n            })\n        }\n        let errorFn = function () {\n\n        }\n        getAPI(PRODUCT_MARGIN, successFn, errorFn);\n    }\n    changeRedirect() {\n        var redirectVar = this.state.redirect;\n        this.setState({\n            redirect: !redirectVar,\n        });\n    }\n\n    componentDidMount() {\n        this.setState({\n          procedure_category:this.props.procedure_category,\n\n        })\n        if (this.props.match.params.id!=null) {\n\n\n          //     this.loadProcedures(this.props.match.params.id);\n\n        }\n    }\n    loadProcedures(id) {\n        var that = this;\n        var url=`${interpolate(PROCEDURE_CATEGORY, [this.props.active_practiceId])}`;\n        console.log(\"url\",url);\n        let successFn = function (data) {\n            console.log(\"get table\",data);\n            that.setState({\n                procedure_category: data,\n            })\n        };\n        let errorFn = function () {\n        };\n\n        getAPI(url, successFn, errorFn);\n    }\n\n    loadTaxes() {\n        let that = this;\n        let successFn = function (data) {\n            console.log(data.map(tax => Object.create({\n                    label: tax.name,\n                    value: tax.id\n                })\n            ));\n            that.setState({\n                taxes: data\n            })\n        }\n        let errorFn = function () {\n        }\n        getAPI(interpolate(TAXES, [this.props.active_practiceId]), successFn, errorFn);\n    }\n\n    render() {\n        let that = this;\n        const formFields = [{\n            label: \"Procedure Name\",\n            key: \"name\",\n            required: true,\n            initialValue:this.state.editingProcedureData?this.state.editingProcedureData.name:null,\n            type: INPUT_FIELD\n        }, {\n            label: \"Procedure Cost\",\n            key: \"cost\",\n            follow: \"INR\",\n            initialValue:this.state.editingProcedureData?this.state.editingProcedureData.cost:null,\n            required: true,\n            type: NUMBER_FIELD,\n        }, {\n            label: \"Applicable Taxes\",\n            key: \"taxes\",\n            initialValue:this.state.editingProcedureData?this.state.editingProcedureData.taxes:null,\n            type: CHECKBOX_FIELD,\n            options: this.state.taxes.map(tax => Object.create({\n                    label: tax.name,\n                    value: tax.id\n                })\n            )\n        }, {\n            label: 'MLM Margin Type',\n            type: SELECT_FIELD,\n            initialValue: (this.state.editFields ? this.state.editFields.margin : null),\n            key: 'margin',\n            required: true,\n            options: that.state.productMargin.map(margin => ({label: margin.name, value: margin.id}))\n        },{\n            label: \"Add Under\",\n            key: \"under\",\n            type: SELECT_FIELD,\n            options: [{\n                label: \"None\",\n                value: null\n            }].concat(this.state.procedure_category.map(procedure => Object.create({\n                label: procedure.name,\n                value: procedure.id\n            }))),\n            initialValue:this.state.editingProcedureData?this.state.editingProcedureData.under:null,\n        }, {\n            label: \"Default Note\",\n            key: \"default_notes\",\n            initialValue:this.state.editingProcedureData?this.state.editingProcedureData.default_notes:null,\n            type: INPUT_FIELD\n        },];\n        const formProp = {\n            successFn: function (data) {\n                displayMessage(SUCCESS_MSG_TYPE, 'success');\n                that.changeRedirect();\n                that.props.loadProcedures();\n\n            },\n            errorFn: function () {\n\n            },\n            action: interpolate(PROCEDURE_CATEGORY, [this.props.active_practiceId]),\n            method: \"post\",\n        }\n        let defaultValues;\n        if(this.props.editingProcedureData){\n         defaultValues = [{\"key\": \"id\", \"value\": this.props.editingProcedureData.id}];\n       }\n        const TestFormLayout = Form.create()(DynamicFieldsForm);\n        return <div>{that.props.editingProcedureData?<Card>\n                <TestFormLayout title=\"Edit Procedure\" defaultValues={defaultValues} changeRedirect={this.changeRedirect}  formProp={formProp} fields={formFields}/>\n                {this.state.redirect && <Redirect to='/settings/procedures'/>}\n            </Card>: <Redirect to='/settings/procedures'/>}\n        </div>\n    }\n}\n\nexport default EditProcedure;\n"]},"metadata":{},"sourceType":"module"}