{"ast":null,"code":"import _classCallCheck from \"/home/shivam/WorkSpace/bk-erp-front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/shivam/WorkSpace/bk-erp-front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/shivam/WorkSpace/bk-erp-front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/shivam/WorkSpace/bk-erp-front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/shivam/WorkSpace/bk-erp-front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/home/shivam/WorkSpace/bk-erp-front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/home/shivam/WorkSpace/bk-erp-front/src/app/components/patients/invoices/PatientInvoices.js\";\nimport React from \"react\";\nimport { Button, Card, Checkbox, Divider, Icon, Table, Tag } from \"antd\";\nimport { getAPI, interpolate } from \"../../../utils/common\";\nimport { DRUG_CATALOG, INVOICES_API, PROCEDURE_CATEGORY, TAXES } from \"../../../constants/api\";\nimport moment from \"moment\";\nimport { Link } from \"react-router-dom\";\nimport { Route, Switch } from \"react-router\";\nimport AddInvoice from \"./AddInvoice\";\nimport AddInvoicedynamic from \"./AddInvoicedynamic\";\n\nvar PatientInvoices =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(PatientInvoices, _React$Component);\n\n  function PatientInvoices(props) {\n    var _this;\n\n    _classCallCheck(this, PatientInvoices);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(PatientInvoices).call(this, props));\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(PatientInvoices).call(this, props));\n    _this.state = {\n      currentPatient: _this.props.currentPatient,\n      active_practiceId: _this.props.active_practiceId,\n      invoices: [],\n      drug_catalog: null,\n      procedure_category: null,\n      taxes_list: null,\n      editInvoice: null\n    };\n    _this.loadInvoices = _this.loadInvoices.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.loadDrugCatalog = _this.loadDrugCatalog.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.loadProcedureCategory = _this.loadProcedureCategory.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.loadTaxes = _this.loadTaxes.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.editInvoiceData = _this.editInvoiceData.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(PatientInvoices, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      if (this.props.match.params.id) {\n        this.loadInvoices();\n        this.loadDrugCatalog();\n        this.loadProcedureCategory();\n        this.loadTaxes();\n      }\n    }\n  }, {\n    key: \"loadInvoices\",\n    value: function loadInvoices() {\n      var that = this;\n\n      var successFn = function successFn(data) {\n        that.setState({\n          invoices: data\n        });\n      };\n\n      var errorFn = function errorFn() {};\n\n      getAPI(interpolate(INVOICES_API, [this.props.match.params.id]), successFn, errorFn);\n    }\n  }, {\n    key: \"loadDrugCatalog\",\n    value: function loadDrugCatalog() {\n      var that = this;\n\n      var successFn = function successFn(data) {\n        that.setState({\n          drug_catalog: data\n        });\n      };\n\n      var errorFn = function errorFn() {};\n\n      getAPI(interpolate(DRUG_CATALOG, [this.props.active_practiceId]), successFn, errorFn);\n    }\n  }, {\n    key: \"loadProcedureCategory\",\n    value: function loadProcedureCategory() {\n      var that = this;\n\n      var successFn = function successFn(data) {\n        that.setState({\n          procedure_category: data\n        });\n      };\n\n      var errorFn = function errorFn() {};\n\n      getAPI(interpolate(PROCEDURE_CATEGORY, [this.props.active_practiceId]), successFn, errorFn);\n    }\n  }, {\n    key: \"loadTaxes\",\n    value: function loadTaxes() {\n      var that = this;\n\n      var successFn = function successFn(data) {\n        console.log(\"get table\");\n        that.setState({\n          taxes_list: data\n        });\n      };\n\n      var errorFn = function errorFn() {};\n\n      getAPI(interpolate(TAXES, [this.props.active_practiceId]), successFn, errorFn);\n    }\n  }, {\n    key: \"editInvoiceData\",\n    value: function editInvoiceData(record) {\n      this.setState({\n        editInvoice: record\n      });\n      var id = this.props.match.params.id;\n      this.props.history.push(\"/patient/\" + id + \"/billing/invoices/edit\");\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var drugs = {};\n\n      if (this.state.drug_catalog) {\n        this.state.drug_catalog.forEach(function (drug) {\n          drugs[drug.id] = drug.name + \",\" + drug.strength;\n        });\n      }\n\n      var procedures = {};\n\n      if (this.state.procedure_category) {\n        this.state.procedure_category.forEach(function (procedure) {\n          procedures[procedure.id] = procedure.name;\n        });\n      }\n\n      var taxesdata = {};\n\n      if (this.state.taxes_list) {\n        this.state.taxes_list.forEach(function (tax) {\n          taxesdata[tax.id] = tax.name;\n        });\n      }\n\n      console.log(taxesdata);\n      var columns = [{\n        title: 'Time',\n        dataIndex: 'created_at',\n        key: 'name',\n        render: function render(created_at) {\n          return React.createElement(\"span\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 128\n            },\n            __self: this\n          }, moment(created_at).format('LLL'));\n        }\n      }, {\n        title: 'Drug',\n        key: 'drug',\n        render: function render(text, record) {\n          return React.createElement(\"span\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 133\n            },\n            __self: this\n          }, \" \", drugs[record.drug]);\n        }\n      }, {\n        title: 'Procedure',\n        key: 'preocedure',\n        render: function render(text, record) {\n          return React.createElement(\"span\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 139\n            },\n            __self: this\n          }, \" \", procedures[record.procedure]);\n        }\n      }, {\n        title: 'Cost',\n        dataIndex: 'cost',\n        key: 'cost'\n      }, {\n        title: 'Taxes',\n        key: 'taxes',\n        dataIndex: \"taxes\",\n        render: function render(taxes) {\n          return React.createElement(\"span\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 150\n            },\n            __self: this\n          }, taxes.map(function (tax) {\n            return React.createElement(Tag, {\n              color: \"blue\",\n              key: tax,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 151\n              },\n              __self: this\n            }, taxesdata[tax]);\n          }));\n        }\n      }, {\n        title: 'Pending',\n        key: 'is_pending',\n        render: function render(text, record) {\n          return React.createElement(Checkbox, {\n            disabled: true,\n            checked: record.is_pending,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 159\n            },\n            __self: this\n          });\n        }\n      }, {\n        title: 'Action',\n        key: 'action',\n        render: function render(text, record) {\n          return React.createElement(\"span\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 167\n            },\n            __self: this\n          }, React.createElement(\"a\", {\n            onClick: function onClick() {\n              return _this2.editInvoiceData(record);\n            },\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 168\n            },\n            __self: this\n          }, \"Edit\"), React.createElement(Divider, {\n            type: \"vertical\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 169\n            },\n            __self: this\n          }), React.createElement(\"a\", {\n            href: \"javascript:;\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 170\n            },\n            __self: this\n          }, \"Delete\"));\n        }\n      }];\n\n      if (this.props.match.params.id) {\n        return React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 176\n          },\n          __self: this\n        }, React.createElement(Switch, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 176\n          },\n          __self: this\n        }, React.createElement(Route, {\n          exact: true,\n          path: \"/patient/:id/billing/invoices/add\",\n          render: function render(route) {\n            return React.createElement(AddInvoicedynamic, Object.assign({}, _this2.state, route, {\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 178\n              },\n              __self: this\n            }));\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 177\n          },\n          __self: this\n        }), React.createElement(Route, {\n          exact: true,\n          path: \"/patient/:id/billing/invoices/edit\",\n          render: function render(route) {\n            return React.createElement(AddInvoice, Object.assign({}, _this2.state, route, {\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 180\n              },\n              __self: this\n            }));\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 179\n          },\n          __self: this\n        }), React.createElement(Card, {\n          title: this.state.currentPatient ? this.state.currentPatient.name + \" Invoice\" : \"Invoice\",\n          extra: React.createElement(Button.Group, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 181\n            },\n            __self: this\n          }, React.createElement(Link, {\n            to: \"/patient/\" + this.props.match.params.id + \"/billing/invoices/add\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 182\n            },\n            __self: this\n          }, React.createElement(Button, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 182\n            },\n            __self: this\n          }, React.createElement(Icon, {\n            type: \"plus\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 182\n            },\n            __self: this\n          }), \"Add\"))),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 181\n          },\n          __self: this\n        }, React.createElement(Table, {\n          columns: columns,\n          dataSource: this.state.invoices,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 185\n          },\n          __self: this\n        }))));\n      } else {\n        return React.createElement(Card, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 193\n          },\n          __self: this\n        }, React.createElement(\"h2\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 194\n          },\n          __self: this\n        }, \" select patient to further continue\"));\n      }\n    }\n  }]);\n\n  return PatientInvoices;\n}(React.Component);\n\nexport default PatientInvoices;","map":{"version":3,"sources":["/home/shivam/WorkSpace/bk-erp-front/src/app/components/patients/invoices/PatientInvoices.js"],"names":["React","Button","Card","Checkbox","Divider","Icon","Table","Tag","getAPI","interpolate","DRUG_CATALOG","INVOICES_API","PROCEDURE_CATEGORY","TAXES","moment","Link","Route","Switch","AddInvoice","AddInvoicedynamic","PatientInvoices","props","state","currentPatient","active_practiceId","invoices","drug_catalog","procedure_category","taxes_list","editInvoice","loadInvoices","bind","loadDrugCatalog","loadProcedureCategory","loadTaxes","editInvoiceData","match","params","id","that","successFn","data","setState","errorFn","console","log","record","history","push","drugs","forEach","drug","name","strength","procedures","procedure","taxesdata","tax","columns","title","dataIndex","key","render","created_at","format","text","taxes","map","is_pending","route","Component"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAQC,MAAR,EAAgBC,IAAhB,EAAsBC,QAAtB,EAAgCC,OAAhC,EAAyCC,IAAzC,EAA+CC,KAA/C,EAAsDC,GAAtD,QAAgE,MAAhE;AACA,SAAQC,MAAR,EAAgBC,WAAhB,QAAkC,uBAAlC;AACA,SAAQC,YAAR,EAAsBC,YAAtB,EAAoCC,kBAApC,EAAwDC,KAAxD,QAAoE,wBAApE;AACA,OAAOC,MAAP,MAAmB,QAAnB;AACA,SAAQC,IAAR,QAAmB,kBAAnB;AACA,SAAQC,KAAR,EAAeC,MAAf,QAA4B,cAA5B;AACA,OAAOC,UAAP,MAAuB,cAAvB;AACA,OAAOC,iBAAP,MAA8B,qBAA9B;;IAEMC,e;;;;;AACF,2BAAYC,KAAZ,EAAkB;AAAA;;AAAA;;AACd,yFAAMA,KAAN;AACA,yFAAMA,KAAN;AACA,UAAKC,KAAL,GAAa;AACTC,MAAAA,cAAc,EAAC,MAAKF,KAAL,CAAWE,cADjB;AAETC,MAAAA,iBAAiB,EAAC,MAAKH,KAAL,CAAWG,iBAFpB;AAGTC,MAAAA,QAAQ,EAAC,EAHA;AAITC,MAAAA,YAAY,EAAC,IAJJ;AAKTC,MAAAA,kBAAkB,EAAC,IALV;AAMTC,MAAAA,UAAU,EAAE,IANH;AAOTC,MAAAA,WAAW,EAAE;AAPJ,KAAb;AASA,UAAKC,YAAL,GAAmB,MAAKA,YAAL,CAAkBC,IAAlB,uDAAnB;AACA,UAAKC,eAAL,GAAsB,MAAKA,eAAL,CAAqBD,IAArB,uDAAtB;AACA,UAAKE,qBAAL,GAA4B,MAAKA,qBAAL,CAA2BF,IAA3B,uDAA5B;AACA,UAAKG,SAAL,GAAgB,MAAKA,SAAL,CAAeH,IAAf,uDAAhB;AACA,UAAKI,eAAL,GAAsB,MAAKA,eAAL,CAAqBJ,IAArB,uDAAtB;AAhBc;AAkBjB;;;;wCACkB;AACf,UAAG,KAAKV,KAAL,CAAWe,KAAX,CAAiBC,MAAjB,CAAwBC,EAA3B,EAA8B;AAC1B,aAAKR,YAAL;AACA,aAAKE,eAAL;AACA,aAAKC,qBAAL;AACA,aAAKC,SAAL;AACH;AAEJ;;;mCACa;AACV,UAAIK,IAAI,GAAG,IAAX;;AACA,UAAIC,SAAS,GAAE,SAAXA,SAAW,CAAUC,IAAV,EAAe;AAC1BF,QAAAA,IAAI,CAACG,QAAL,CAAc;AACVjB,UAAAA,QAAQ,EAACgB;AADC,SAAd;AAGH,OAJD;;AAKA,UAAIE,OAAO,GAAG,SAAVA,OAAU,GAAW,CAExB,CAFD;;AAGAnC,MAAAA,MAAM,CAACC,WAAW,CAACE,YAAD,EAAe,CAAC,KAAKU,KAAL,CAAWe,KAAX,CAAiBC,MAAjB,CAAwBC,EAAzB,CAAf,CAAZ,EAA0DE,SAA1D,EAAqEG,OAArE,CAAN;AACH;;;sCACgB;AACb,UAAIJ,IAAI,GAAG,IAAX;;AACA,UAAIC,SAAS,GAAE,SAAXA,SAAW,CAAUC,IAAV,EAAe;AAC1BF,QAAAA,IAAI,CAACG,QAAL,CAAc;AACVhB,UAAAA,YAAY,EAACe;AADH,SAAd;AAIH,OALD;;AAMA,UAAIE,OAAO,GAAG,SAAVA,OAAU,GAAW,CAExB,CAFD;;AAGAnC,MAAAA,MAAM,CAACC,WAAW,CAACC,YAAD,EAAc,CAAC,KAAKW,KAAL,CAAWG,iBAAZ,CAAd,CAAZ,EAA2DgB,SAA3D,EAAsEG,OAAtE,CAAN;AACH;;;4CACsB;AACnB,UAAIJ,IAAI,GAAG,IAAX;;AACA,UAAIC,SAAS,GAAE,SAAXA,SAAW,CAAUC,IAAV,EAAe;AAC1BF,QAAAA,IAAI,CAACG,QAAL,CAAc;AACVf,UAAAA,kBAAkB,EAACc;AADT,SAAd;AAIH,OALD;;AAMA,UAAIE,OAAO,GAAG,SAAVA,OAAU,GAAW,CAExB,CAFD;;AAGAnC,MAAAA,MAAM,CAACC,WAAW,CAACG,kBAAD,EAAqB,CAAC,KAAKS,KAAL,CAAWG,iBAAZ,CAArB,CAAZ,EAAkEgB,SAAlE,EAA6EG,OAA7E,CAAN;AACH;;;gCAEU;AACP,UAAIJ,IAAI,GAAG,IAAX;;AACA,UAAIC,SAAS,GAAG,SAAZA,SAAY,CAAUC,IAAV,EAAgB;AAC5BG,QAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ;AACAN,QAAAA,IAAI,CAACG,QAAL,CAAc;AACVd,UAAAA,UAAU,EAACa;AADD,SAAd;AAGH,OALD;;AAMA,UAAIE,OAAO,GAAG,SAAVA,OAAU,GAAY,CACzB,CADD;;AAEAnC,MAAAA,MAAM,CAACC,WAAW,CAAEI,KAAF,EAAS,CAAC,KAAKQ,KAAL,CAAWG,iBAAZ,CAAT,CAAZ,EAAsDgB,SAAtD,EAAiEG,OAAjE,CAAN;AAEH;;;oCAEeG,M,EAAO;AACnB,WAAKJ,QAAL,CAAc;AACVb,QAAAA,WAAW,EAACiB;AADF,OAAd;AAGA,UAAIR,EAAE,GAAC,KAAKjB,KAAL,CAAWe,KAAX,CAAiBC,MAAjB,CAAwBC,EAA/B;AACA,WAAKjB,KAAL,CAAW0B,OAAX,CAAmBC,IAAnB,CAAwB,cAAYV,EAAZ,GAAe,wBAAvC;AAEH;;;6BACO;AAAA;;AACJ,UAAMW,KAAK,GAAC,EAAZ;;AACA,UAAG,KAAK3B,KAAL,CAAWI,YAAd,EAA2B;AAEvB,aAAKJ,KAAL,CAAWI,YAAX,CAAwBwB,OAAxB,CAAgC,UAASC,IAAT,EAAc;AAC1CF,UAAAA,KAAK,CAACE,IAAI,CAACb,EAAN,CAAL,GAAgBa,IAAI,CAACC,IAAL,GAAU,GAAV,GAAcD,IAAI,CAACE,QAAnC;AACH,SAFD;AAGH;;AACD,UAAMC,UAAU,GAAC,EAAjB;;AACA,UAAG,KAAKhC,KAAL,CAAWK,kBAAd,EAAiC;AAC7B,aAAKL,KAAL,CAAWK,kBAAX,CAA8BuB,OAA9B,CAAsC,UAAUK,SAAV,EAAqB;AACvDD,UAAAA,UAAU,CAACC,SAAS,CAACjB,EAAX,CAAV,GAAyBiB,SAAS,CAACH,IAAnC;AACH,SAFD;AAGH;;AAED,UAAMI,SAAS,GAAC,EAAhB;;AACA,UAAG,KAAKlC,KAAL,CAAWM,UAAd,EAAyB;AACrB,aAAKN,KAAL,CAAWM,UAAX,CAAsBsB,OAAtB,CAA8B,UAAUO,GAAV,EAAe;AACzCD,UAAAA,SAAS,CAACC,GAAG,CAACnB,EAAL,CAAT,GAAkBmB,GAAG,CAACL,IAAtB;AACH,SAFD;AAGH;;AACDR,MAAAA,OAAO,CAACC,GAAR,CAAYW,SAAZ;AAEA,UAAME,OAAO,GAAG,CAAC;AACbC,QAAAA,KAAK,EAAE,MADM;AAEbC,QAAAA,SAAS,EAAE,YAFE;AAGbC,QAAAA,GAAG,EAAE,MAHQ;AAIbC,QAAAA,MAAM,EAAE,gBAAAC,UAAU;AAAA,iBAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAAOjD,MAAM,CAACiD,UAAD,CAAN,CAAmBC,MAAnB,CAA0B,KAA1B,CAAP,CAAH;AAAA;AAJL,OAAD,EAKT;AACHL,QAAAA,KAAK,EAAE,MADJ;AAEHE,QAAAA,GAAG,EAAE,MAFF;AAGHC,QAAAA,MAAM,EAAC,gBAACG,IAAD,EAAOnB,MAAP;AAAA,iBACH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAQG,KAAK,CAACH,MAAM,CAACK,IAAR,CAAb,CADG;AAAA;AAHJ,OALS,EAWT;AACHQ,QAAAA,KAAK,EAAE,WADJ;AAEHE,QAAAA,GAAG,EAAE,YAFF;AAGHC,QAAAA,MAAM,EAAC,gBAACG,IAAD,EAAOnB,MAAP;AAAA,iBACH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAQQ,UAAU,CAACR,MAAM,CAACS,SAAR,CAAlB,CADG;AAAA;AAHJ,OAXS,EAiBT;AACHI,QAAAA,KAAK,EAAE,MADJ;AAEHC,QAAAA,SAAS,EAAE,MAFR;AAGHC,QAAAA,GAAG,EAAE;AAHF,OAjBS,EAqBT;AACHF,QAAAA,KAAK,EAAE,OADJ;AAEHE,QAAAA,GAAG,EAAE,OAFF;AAGHD,QAAAA,SAAS,EAAC,OAHP;AAIHE,QAAAA,MAAM,EAAE,gBAAAI,KAAK;AAAA,iBACD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aACLA,KAAK,CAACC,GAAN,CAAU,UAAAV,GAAG;AAAA,mBAAI,oBAAC,GAAD;AAAK,cAAA,KAAK,EAAC,MAAX;AAAkB,cAAA,GAAG,EAAEA,GAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAA6BD,SAAS,CAACC,GAAD,CAAtC,CAAJ;AAAA,WAAb,CADK,CADC;AAAA;AAJV,OArBS,EA+BZ;AACAE,QAAAA,KAAK,EAAE,SADP;AAEAE,QAAAA,GAAG,EAAE,YAFL;AAGAC,QAAAA,MAAM,EAAC,gBAACG,IAAD,EAAOnB,MAAP;AAAA,iBACH,oBAAC,QAAD;AAAU,YAAA,QAAQ,MAAlB;AAAmB,YAAA,OAAO,EAAEA,MAAM,CAACsB,UAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADG;AAAA;AAHP,OA/BY,EAuCZ;AACAT,QAAAA,KAAK,EAAE,QADP;AAEAE,QAAAA,GAAG,EAAE,QAFL;AAGAC,QAAAA,MAAM,EAAE,gBAACG,IAAD,EAAOnB,MAAP;AAAA,iBACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aACA;AAAG,YAAA,OAAO,EAAE;AAAA,qBAAI,MAAI,CAACX,eAAL,CAAqBW,MAArB,CAAJ;AAAA,aAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADA,EAEA,oBAAC,OAAD;AAAS,YAAA,IAAI,EAAC,UAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAFA,EAGA;AAAG,YAAA,IAAI,EAAC,cAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAHA,CADI;AAAA;AAHR,OAvCY,CAAhB;;AAmDA,UAAG,KAAKzB,KAAL,CAAWe,KAAX,CAAiBC,MAAjB,CAAwBC,EAA3B,EAA8B;AAC1B,eAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAK,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACR,oBAAC,KAAD;AAAO,UAAA,KAAK,MAAZ;AAAa,UAAA,IAAI,EAAC,mCAAlB;AACO,UAAA,MAAM,EAAE,gBAAC+B,KAAD;AAAA,mBAAW,oBAAC,iBAAD,oBAAsB,MAAI,CAAC/C,KAA3B,EAAsC+C,KAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAAX;AAAA,WADf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADQ,EAGR,oBAAC,KAAD;AAAO,UAAA,KAAK,MAAZ;AAAa,UAAA,IAAI,EAAC,oCAAlB;AACO,UAAA,MAAM,EAAE,gBAACA,KAAD;AAAA,mBAAW,oBAAC,UAAD,oBAAgB,MAAI,CAAC/C,KAArB,EAAgC+C,KAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAAX;AAAA,WADf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAHQ,EAKR,oBAAC,IAAD;AAAM,UAAA,KAAK,EAAG,KAAK/C,KAAL,CAAWC,cAAX,GAA0B,KAAKD,KAAL,CAAWC,cAAX,CAA0B6B,IAA1B,GAAiC,UAA3D,GAAsE,SAApF;AAAgG,UAAA,KAAK,EAAE,oBAAC,MAAD,CAAQ,KAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aACnG,oBAAC,IAAD;AAAM,YAAA,EAAE,EAAE,cAAY,KAAK/B,KAAL,CAAWe,KAAX,CAAiBC,MAAjB,CAAwBC,EAApC,GAAuC,uBAAjD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAA0E,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAAQ,oBAAC,IAAD;AAAM,YAAA,IAAI,EAAC,MAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAR,QAA1E,CADmG,CAAvG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAII,oBAAC,KAAD;AAAO,UAAA,OAAO,EAAEoB,OAAhB;AAA0B,UAAA,UAAU,EAAE,KAAKpC,KAAL,CAAWG,QAAjD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAJJ,CALQ,CAAL,CAAP;AAeH,OAhBD,MAiBI;AACA,eAAO,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iDADG,CAAP;AAGH;AAEJ;;;;EA3LyBzB,KAAK,CAACsE,S;;AA6LpC,eAAelD,eAAf","sourcesContent":["import React from \"react\";\nimport {Button, Card, Checkbox, Divider, Icon, Table, Tag} from \"antd\";\nimport {getAPI, interpolate} from \"../../../utils/common\";\nimport {DRUG_CATALOG, INVOICES_API, PROCEDURE_CATEGORY, TAXES} from \"../../../constants/api\";\nimport moment from \"moment\";\nimport {Link} from \"react-router-dom\";\nimport {Route, Switch} from \"react-router\";\nimport AddInvoice from \"./AddInvoice\";\nimport AddInvoicedynamic from \"./AddInvoicedynamic\";\n\nclass PatientInvoices extends React.Component{\n    constructor(props){\n        super(props);\n        super(props);\n        this.state = {\n            currentPatient:this.props.currentPatient,\n            active_practiceId:this.props.active_practiceId,\n            invoices:[],\n            drug_catalog:null,\n            procedure_category:null,\n            taxes_list: null,\n            editInvoice: null,\n        }\n        this.loadInvoices =this.loadInvoices.bind(this);\n        this.loadDrugCatalog =this.loadDrugCatalog.bind(this);\n        this.loadProcedureCategory =this.loadProcedureCategory.bind(this);\n        this.loadTaxes =this.loadTaxes.bind(this);\n        this.editInvoiceData =this.editInvoiceData.bind(this);\n\n    }\n    componentDidMount(){\n        if(this.props.match.params.id){\n            this.loadInvoices();\n            this.loadDrugCatalog();\n            this.loadProcedureCategory()\n            this.loadTaxes();\n        }\n\n    }\n    loadInvoices(){\n        let that = this;\n        let successFn =function (data){\n            that.setState({\n                invoices:data\n            })\n        }\n        let errorFn = function (){\n\n        }\n        getAPI(interpolate(INVOICES_API, [this.props.match.params.id]), successFn, errorFn);\n    }\n    loadDrugCatalog(){\n        let that = this;\n        let successFn =function (data){\n            that.setState({\n                drug_catalog:data\n            })\n\n        }\n        let errorFn = function (){\n\n        }\n        getAPI(interpolate(DRUG_CATALOG,[this.props.active_practiceId]), successFn, errorFn)\n    }\n    loadProcedureCategory(){\n        let that = this;\n        let successFn =function (data){\n            that.setState({\n                procedure_category:data\n            })\n\n        }\n        let errorFn = function (){\n\n        }\n        getAPI(interpolate(PROCEDURE_CATEGORY, [this.props.active_practiceId]), successFn, errorFn);\n    }\n\n    loadTaxes(){\n        var that = this;\n        let successFn = function (data) {\n            console.log(\"get table\");\n            that.setState({\n                taxes_list:data,\n            })\n        };\n        let errorFn = function () {\n        };\n        getAPI(interpolate( TAXES, [this.props.active_practiceId]), successFn, errorFn);\n\n    }\n\n    editInvoiceData(record){\n        this.setState({\n            editInvoice:record,\n        });\n        let id=this.props.match.params.id\n        this.props.history.push(\"/patient/\"+id+\"/billing/invoices/edit\")\n\n    }\n    render(){\n        const drugs={}\n        if(this.state.drug_catalog){\n\n            this.state.drug_catalog.forEach(function(drug){\n                drugs[drug.id]=(drug.name+\",\"+drug.strength)\n            })\n        }\n        const procedures={}\n        if(this.state.procedure_category){\n            this.state.procedure_category.forEach(function (procedure) {\n                procedures[procedure.id]=procedure.name;\n            })\n        }\n\n        const taxesdata={}\n        if(this.state.taxes_list){\n            this.state.taxes_list.forEach(function (tax) {\n                taxesdata[tax.id]=tax.name;\n            })\n        }\n        console.log(taxesdata)\n\n        const columns = [{\n            title: 'Time',\n            dataIndex: 'created_at',\n            key: 'name',\n            render: created_at =><span>{moment(created_at).format('LLL')}</span>,\n            }, {\n            title: 'Drug',\n            key: 'drug',\n            render:(text, record) => (\n                <span> {drugs[record.drug]}</span>\n            )\n            }, {\n            title: 'Procedure',\n            key: 'preocedure',\n            render:(text, record) => (\n                <span> {procedures[record.procedure]}</span>\n            )\n            }, {\n            title: 'Cost',\n            dataIndex: 'cost',\n            key: 'cost',\n            }, {\n            title: 'Taxes',\n            key: 'taxes',\n            dataIndex:\"taxes\",\n            render: taxes => (\n                        <span>\n                  {taxes.map(tax => <Tag color=\"blue\" key={tax}>{taxesdata[tax]}</Tag>)}\n                </span>\n                ),\n\n        },  {\n            title: 'Pending',\n            key: 'is_pending',\n            render:(text, record) => (\n                <Checkbox disabled checked={record.is_pending}/>\n            )\n            },\n\n            {\n            title: 'Action',\n            key: 'action',\n            render: (text, record) => (\n                <span>\n                <a onClick={()=>this.editInvoiceData(record)}>Edit</a>\n                <Divider type=\"vertical\" />\n                <a href=\"javascript:;\">Delete</a>\n              </span>\n            ),\n        }];\n\n        if(this.props.match.params.id){\n            return <div><Switch>\n                <Route exact path='/patient/:id/billing/invoices/add'\n                       render={(route) => <AddInvoicedynamic{...this.state} {...route}/>}/>\n                <Route exact path='/patient/:id/billing/invoices/edit'\n                       render={(route) => <AddInvoice {...this.state} {...route}/>}/>\n                <Card title={ this.state.currentPatient?this.state.currentPatient.name + \" Invoice\":\"Invoice\"}  extra={<Button.Group>\n                    <Link to={\"/patient/\"+this.props.match.params.id+\"/billing/invoices/add\"}><Button><Icon type=\"plus\"/>Add</Button></Link>\n                </Button.Group>}>\n\n                    <Table columns={columns}  dataSource={this.state.invoices} />\n\n                </Card>\n            </Switch>\n\n            </div>\n        }\n        else{\n            return <Card>\n                <h2> select patient to further continue</h2>\n            </Card>\n        }\n\n    }\n}\nexport default PatientInvoices;\n"]},"metadata":{},"sourceType":"module"}