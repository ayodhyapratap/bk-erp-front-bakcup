{"ast":null,"code":"import _classCallCheck from \"/home/shivam/WorkSpace/bk-erp-front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/shivam/WorkSpace/bk-erp-front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/shivam/WorkSpace/bk-erp-front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/shivam/WorkSpace/bk-erp-front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/shivam/WorkSpace/bk-erp-front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/shivam/WorkSpace/bk-erp-front/src/app/components/settings/options/printout/SettingForm.js\";\nimport React from 'react';\nimport { Form, Input, Tooltip, Icon, Cascader, Select, Row, Col, Checkbox, Button, AutoComplete } from 'antd';\nvar Option = Select.Option;\nvar AutoCompleteOption = AutoComplete.Option;\nvar residences = [{\n  value: 'zhejiang',\n  label: 'Zhejiang',\n  children: [{\n    value: 'hangzhou',\n    label: 'Hangzhou',\n    children: [{\n      value: 'xihu',\n      label: 'West Lake'\n    }]\n  }]\n}, {\n  value: 'jiangsu',\n  label: 'Jiangsu',\n  children: [{\n    value: 'nanjing',\n    label: 'Nanjing',\n    children: [{\n      value: 'zhonghuamen',\n      label: 'Zhong Hua Men'\n    }]\n  }]\n}];\n\nvar SettingForm =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(SettingForm, _React$Component);\n\n  function SettingForm() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, SettingForm);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(SettingForm)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      confirmDirty: false,\n      autoCompleteResult: []\n    };\n\n    _this.handleSubmit = function (e) {\n      e.preventDefault();\n\n      _this.props.form.validateFieldsAndScroll(function (err, values) {\n        if (!err) {\n          console.log('Received values of form: ', values);\n        }\n      });\n    };\n\n    _this.handleConfirmBlur = function (e) {\n      var value = e.target.value;\n\n      _this.setState({\n        confirmDirty: _this.state.confirmDirty || !!value\n      });\n    };\n\n    _this.compareToFirstPassword = function (rule, value, callback) {\n      var form = _this.props.form;\n\n      if (value && value !== form.getFieldValue('password')) {\n        callback('Two passwords that you enter is inconsistent!');\n      } else {\n        callback();\n      }\n    };\n\n    _this.validateToNextPassword = function (rule, value, callback) {\n      var form = _this.props.form;\n\n      if (value && _this.state.confirmDirty) {\n        form.validateFields(['confirm'], {\n          force: true\n        });\n      }\n\n      callback();\n    };\n\n    _this.handleWebsiteChange = function (value) {\n      var autoCompleteResult;\n\n      if (!value) {\n        autoCompleteResult = [];\n      } else {\n        autoCompleteResult = ['.com', '.org', '.net'].map(function (domain) {\n          return \"\".concat(value).concat(domain);\n        });\n      }\n\n      _this.setState({\n        autoCompleteResult: autoCompleteResult\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(SettingForm, [{\n    key: \"render\",\n    value: function render() {\n      var getFieldDecorator = this.props.form.getFieldDecorator;\n      var autoCompleteResult = this.state.autoCompleteResult;\n      var formItemLayout = {\n        labelCol: {\n          xs: {\n            span: 24\n          },\n          sm: {\n            span: 8\n          }\n        },\n        wrapperCol: {\n          xs: {\n            span: 24\n          },\n          sm: {\n            span: 16\n          }\n        }\n      };\n      var tailFormItemLayout = {\n        wrapperCol: {\n          xs: {\n            span: 24,\n            offset: 0\n          },\n          sm: {\n            span: 16,\n            offset: 8\n          }\n        }\n      };\n      var prefixSelector = getFieldDecorator('prefix', {\n        initialValue: '86'\n      });\n      var websiteOptions = autoCompleteResult.map(function (website) {\n        return React.createElement(AutoCompleteOption, {\n          key: website,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 109\n          },\n          __self: this\n        }, website);\n      });\n      return React.createElement(Form, Object.assign({}, formItemLayout, {\n        onSubmit: this.handleSubmit,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 113\n        },\n        __self: this\n      }), React.createElement(Form.Item, {\n        label: \"Confirm Password\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 116\n        },\n        __self: this\n      }, getFieldDecorator('confirm', {\n        rules: [{\n          required: true,\n          message: 'Please confirm your password!'\n        }, {\n          validator: this.compareToFirstPassword\n        }]\n      })(React.createElement(Input, {\n        type: \"password\",\n        onBlur: this.handleConfirmBlur,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 126\n        },\n        __self: this\n      }))), React.createElement(Form.Item, {\n        label: React.createElement(\"span\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 131\n          },\n          __self: this\n        }, \"Nickname\\xA0\", React.createElement(Tooltip, {\n          title: \"What do you want others to call you?\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 133\n          },\n          __self: this\n        }, React.createElement(Icon, {\n          type: \"question-circle-o\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 134\n          },\n          __self: this\n        }))),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 129\n        },\n        __self: this\n      }, getFieldDecorator('nickname', {\n        rules: [{\n          required: true,\n          message: 'Please input your nickname!',\n          whitespace: true\n        }]\n      })(React.createElement(Input, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 142\n        },\n        __self: this\n      }))), React.createElement(Form.Item, {\n        label: \"Habitual Residence\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 145\n        },\n        __self: this\n      }, getFieldDecorator('residence', {\n        initialValue: ['zhejiang', 'hangzhou', 'xihu'],\n        rules: [{\n          type: 'array',\n          required: true,\n          message: 'Please select your habitual residence!'\n        }]\n      })(React.createElement(Cascader, {\n        options: residences,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 152\n        },\n        __self: this\n      }))), React.createElement(Form.Item, {\n        label: \"Phone Number\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 155\n        },\n        __self: this\n      }, getFieldDecorator('phone', {\n        rules: [{\n          required: true,\n          message: 'Please input your phone number!'\n        }]\n      })(React.createElement(Input, {\n        addonBefore: prefixSelector,\n        style: {\n          width: '100%'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 161\n        },\n        __self: this\n      }))), React.createElement(Form.Item, {\n        label: \"Website\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 164\n        },\n        __self: this\n      }, getFieldDecorator('website', {\n        rules: [{\n          required: true,\n          message: 'Please input website!'\n        }]\n      })(React.createElement(AutoComplete, {\n        dataSource: websiteOptions,\n        onChange: this.handleWebsiteChange,\n        placeholder: \"website\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 170\n        },\n        __self: this\n      }, React.createElement(Input, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 175\n        },\n        __self: this\n      })))), React.createElement(Form.Item, {\n        label: \"Captcha\",\n        extra: \"We must make sure that your are a human.\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 179\n        },\n        __self: this\n      }, React.createElement(Row, {\n        gutter: 8,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 183\n        },\n        __self: this\n      }, React.createElement(Col, {\n        span: 12,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 184\n        },\n        __self: this\n      }, getFieldDecorator('captcha', {\n        rules: [{\n          required: true,\n          message: 'Please input the captcha you got!'\n        }]\n      })(React.createElement(Input, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 188\n        },\n        __self: this\n      }))), React.createElement(Col, {\n        span: 12,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 191\n        },\n        __self: this\n      }, React.createElement(Button, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 192\n        },\n        __self: this\n      }, \"Get captcha\")))), React.createElement(Form.Item, Object.assign({}, tailFormItemLayout, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 196\n        },\n        __self: this\n      }), getFieldDecorator('agreement', {\n        valuePropName: 'checked'\n      })(React.createElement(Checkbox, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 200\n        },\n        __self: this\n      }, \"I have read the \", React.createElement(\"a\", {\n        href: \"\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 200\n        },\n        __self: this\n      }, \"agreement\")))), React.createElement(Form.Item, Object.assign({}, tailFormItemLayout, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 203\n        },\n        __self: this\n      }), React.createElement(Button, {\n        type: \"primary\",\n        htmlType: \"submit\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 204\n        },\n        __self: this\n      }, \"Register\")));\n    }\n  }]);\n\n  return SettingForm;\n}(React.Component);\n\nexport default SettingForm;","map":{"version":3,"sources":["/home/shivam/WorkSpace/bk-erp-front/src/app/components/settings/options/printout/SettingForm.js"],"names":["React","Form","Input","Tooltip","Icon","Cascader","Select","Row","Col","Checkbox","Button","AutoComplete","Option","AutoCompleteOption","residences","value","label","children","SettingForm","state","confirmDirty","autoCompleteResult","handleSubmit","e","preventDefault","props","form","validateFieldsAndScroll","err","values","console","log","handleConfirmBlur","target","setState","compareToFirstPassword","rule","callback","getFieldValue","validateToNextPassword","validateFields","force","handleWebsiteChange","map","domain","getFieldDecorator","formItemLayout","labelCol","xs","span","sm","wrapperCol","tailFormItemLayout","offset","prefixSelector","initialValue","websiteOptions","website","rules","required","message","validator","whitespace","type","width","valuePropName","Component"],"mappings":"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","sourcesContent":["import React from 'react';\nimport {  Form, Input, Tooltip, Icon, Cascader, Select, Row, Col, Checkbox, Button, AutoComplete,} from 'antd';\n\nconst { Option } = Select;\nconst AutoCompleteOption = AutoComplete.Option;\n\nconst residences = [{\n  value: 'zhejiang',\n  label: 'Zhejiang',\n  children: [{\n    value: 'hangzhou',\n    label: 'Hangzhou',\n    children: [{\n      value: 'xihu',\n      label: 'West Lake',\n    }],\n  }],\n}, {\n  value: 'jiangsu',\n  label: 'Jiangsu',\n  children: [{\n    value: 'nanjing',\n    label: 'Nanjing',\n    children: [{\n      value: 'zhonghuamen',\n      label: 'Zhong Hua Men',\n    }],\n  }],\n}];\n\nclass SettingForm extends React.Component {\n  state = {\n    confirmDirty: false,\n    autoCompleteResult: [],\n  };\n\n  handleSubmit = (e) => {\n    e.preventDefault();\n    this.props.form.validateFieldsAndScroll((err, values) => {\n      if (!err) {\n        console.log('Received values of form: ', values);\n      }\n    });\n  }\n\n  handleConfirmBlur = (e) => {\n    const value = e.target.value;\n    this.setState({ confirmDirty: this.state.confirmDirty || !!value });\n  }\n\n  compareToFirstPassword = (rule, value, callback) => {\n    const form = this.props.form;\n    if (value && value !== form.getFieldValue('password')) {\n      callback('Two passwords that you enter is inconsistent!');\n    } else {\n      callback();\n    }\n  }\n\n  validateToNextPassword = (rule, value, callback) => {\n    const form = this.props.form;\n    if (value && this.state.confirmDirty) {\n      form.validateFields(['confirm'], { force: true });\n    }\n    callback();\n  }\n\n  handleWebsiteChange = (value) => {\n    let autoCompleteResult;\n    if (!value) {\n      autoCompleteResult = [];\n    } else {\n      autoCompleteResult = ['.com', '.org', '.net'].map(domain => `${value}${domain}`);\n    }\n    this.setState({ autoCompleteResult });\n  }\n\n  render() {\n    const { getFieldDecorator } = this.props.form;\n    const { autoCompleteResult } = this.state;\n\n    const formItemLayout = {\n      labelCol: {\n        xs: { span: 24 },\n        sm: { span: 8 },\n      },\n      wrapperCol: {\n        xs: { span: 24 },\n        sm: { span: 16 },\n      },\n    };\n    const tailFormItemLayout = {\n      wrapperCol: {\n        xs: {\n          span: 24,\n          offset: 0,\n        },\n        sm: {\n          span: 16,\n          offset: 8,\n        },\n      },\n    };\n    const prefixSelector = getFieldDecorator('prefix', {\n      initialValue: '86',\n    })\n\n    const websiteOptions = autoCompleteResult.map(website => (\n      <AutoCompleteOption key={website}>{website}</AutoCompleteOption>\n    ));\n\n    return (\n      <Form {...formItemLayout} onSubmit={this.handleSubmit}>\n       \n        \n        <Form.Item\n          label=\"Confirm Password\"\n        >\n          {getFieldDecorator('confirm', {\n            rules: [{\n              required: true, message: 'Please confirm your password!',\n            }, {\n              validator: this.compareToFirstPassword,\n            }],\n          })(\n            <Input type=\"password\" onBlur={this.handleConfirmBlur} />\n          )}\n        </Form.Item>\n        <Form.Item\n          label={(\n            <span>\n              Nickname&nbsp;\n              <Tooltip title=\"What do you want others to call you?\">\n                <Icon type=\"question-circle-o\" />\n              </Tooltip>\n            </span>\n          )}\n        >\n          {getFieldDecorator('nickname', {\n            rules: [{ required: true, message: 'Please input your nickname!', whitespace: true }],\n          })(\n            <Input />\n          )}\n        </Form.Item>\n        <Form.Item\n          label=\"Habitual Residence\"\n        >\n          {getFieldDecorator('residence', {\n            initialValue: ['zhejiang', 'hangzhou', 'xihu'],\n            rules: [{ type: 'array', required: true, message: 'Please select your habitual residence!' }],\n          })(\n            <Cascader options={residences} />\n          )}\n        </Form.Item>\n        <Form.Item\n          label=\"Phone Number\"\n        >\n          {getFieldDecorator('phone', {\n            rules: [{ required: true, message: 'Please input your phone number!' }],\n          })(\n            <Input addonBefore={prefixSelector} style={{ width: '100%' }} />\n          )}\n        </Form.Item>\n        <Form.Item\n          label=\"Website\"\n        >\n          {getFieldDecorator('website', {\n            rules: [{ required: true, message: 'Please input website!' }],\n          })(\n            <AutoComplete\n              dataSource={websiteOptions}\n              onChange={this.handleWebsiteChange}\n              placeholder=\"website\"\n            >\n              <Input />\n            </AutoComplete>\n          )}\n        </Form.Item>\n        <Form.Item\n          label=\"Captcha\"\n          extra=\"We must make sure that your are a human.\"\n        >\n          <Row gutter={8}>\n            <Col span={12}>\n              {getFieldDecorator('captcha', {\n                rules: [{ required: true, message: 'Please input the captcha you got!' }],\n              })(\n                <Input />\n              )}\n            </Col>\n            <Col span={12}>\n              <Button>Get captcha</Button>\n            </Col>\n          </Row>\n        </Form.Item>\n        <Form.Item {...tailFormItemLayout}>\n          {getFieldDecorator('agreement', {\n            valuePropName: 'checked',\n          })(\n            <Checkbox>I have read the <a href=\"\">agreement</a></Checkbox>\n          )}\n        </Form.Item>\n        <Form.Item {...tailFormItemLayout}>\n          <Button type=\"primary\" htmlType=\"submit\">Register</Button>\n        </Form.Item>\n      </Form>\n    );\n  }\n}\n\nexport default SettingForm"]},"metadata":{},"sourceType":"module"}