{"ast":null,"code":"import _classCallCheck from \"/home/shivam/WorkSpace/bk-erp-front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/shivam/WorkSpace/bk-erp-front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/shivam/WorkSpace/bk-erp-front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/shivam/WorkSpace/bk-erp-front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/shivam/WorkSpace/bk-erp-front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/home/shivam/WorkSpace/bk-erp-front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/home/shivam/WorkSpace/bk-erp-front/src/app/components/settings/options/procedure-catalog/AddProcedure.js\";\nimport React from \"react\";\nimport DynamicFieldsForm from \"../../../common/DynamicFieldsForm\";\nimport { Form, Card, message } from \"antd\";\nimport { CHECKBOX_FIELD, SUCCESS_MSG_TYPE, INPUT_FIELD, RADIO_FIELD, SELECT_FIELD, NUMBER_FIELD } from \"../../../../constants/dataKeys\";\nimport { PROCEDURE_CATEGORY, PRODUCT_MARGIN, TAXES } from \"../../../../constants/api\";\nimport { getAPI, displayMessage, interpolate } from \"../../../../utils/common\";\nimport { Redirect } from \"react-router-dom\";\n\nvar AddProcedure =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(AddProcedure, _React$Component);\n\n  function AddProcedure(props) {\n    var _this;\n\n    _classCallCheck(this, AddProcedure);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(AddProcedure).call(this, props));\n    _this.state = {\n      taxes: [],\n      procedure_category: [],\n      redirect: false,\n      productMargin: []\n    };\n    _this.loadTaxes = _this.loadTaxes.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.loadProcedures = _this.loadProcedures.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n\n    _this.loadTaxes();\n\n    _this.loadProcedures();\n\n    _this.loadProductMargin();\n\n    return _this;\n  }\n\n  _createClass(AddProcedure, [{\n    key: \"changeRedirect\",\n    value: function changeRedirect() {\n      var redirectVar = this.state.redirect;\n      this.setState({\n        redirect: !redirectVar\n      });\n    }\n  }, {\n    key: \"loadProductMargin\",\n    value: function loadProductMargin() {\n      var that = this;\n\n      var successFn = function successFn(data) {\n        that.setState({\n          productMargin: data\n        });\n      };\n\n      var errorFn = function errorFn() {};\n\n      getAPI(PRODUCT_MARGIN, successFn, errorFn);\n    }\n  }, {\n    key: \"loadProcedures\",\n    value: function loadProcedures() {\n      var that = this;\n\n      var successFn = function successFn(data) {\n        console.log(\"get table\");\n        that.setState({\n          procedure_category: data\n        });\n      };\n\n      var errorFn = function errorFn() {};\n\n      getAPI(interpolate(PROCEDURE_CATEGORY, [this.props.active_practiceId]), successFn, errorFn);\n    }\n  }, {\n    key: \"loadTaxes\",\n    value: function loadTaxes() {\n      var that = this;\n\n      var successFn = function successFn(data) {\n        console.log(data.map(function (tax) {\n          return Object.create({\n            label: tax.name,\n            value: tax.id\n          });\n        }));\n        that.setState({\n          taxes: data\n        });\n      };\n\n      var errorFn = function errorFn() {};\n\n      getAPI(interpolate(TAXES, [this.props.active_practiceId]), successFn, errorFn);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var that = this;\n      var formFields = [{\n        label: \"Procedure Name\",\n        key: \"name\",\n        required: true,\n        type: INPUT_FIELD\n      }, {\n        label: \"Procedure Cost\",\n        key: \"cost\",\n        follow: \"INR\",\n        required: true,\n        type: NUMBER_FIELD\n      }, {\n        label: \"Applicable Taxes\",\n        key: \"taxes\",\n        type: CHECKBOX_FIELD,\n        options: this.state.taxes.map(function (tax) {\n          return Object.create({\n            label: tax.name,\n            value: tax.id\n          });\n        })\n      }, {\n        label: 'MLM Margin Type',\n        type: SELECT_FIELD,\n        initialValue: this.state.editFields ? this.state.editFields.margin : null,\n        key: 'margin',\n        required: true,\n        options: that.state.productMargin.map(function (margin) {\n          return {\n            label: margin.name,\n            value: margin.id\n          };\n        })\n      }, {\n        label: \"Add Under\",\n        key: \"under\",\n        type: SELECT_FIELD,\n        options: [{\n          label: \"None\",\n          value: null\n        }].concat(this.state.procedure_category.map(function (procedure) {\n          return Object.create({\n            label: procedure.name,\n            value: procedure.id\n          });\n        })),\n        initialValue: null\n      }, {\n        label: \"Default Note\",\n        key: \"default_notes\",\n        type: INPUT_FIELD\n      }];\n      var formProp = {\n        successFn: function successFn(data) {\n          displayMessage(SUCCESS_MSG_TYPE, 'success');\n          that.changeRedirect();\n        },\n        errorFn: function errorFn() {},\n        action: interpolate(PROCEDURE_CATEGORY, [this.props.active_practiceId]),\n        method: \"post\"\n      };\n      var TestFormLayout = Form.create()(DynamicFieldsForm);\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 139\n        },\n        __self: this\n      }, React.createElement(Card, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 140\n        },\n        __self: this\n      }, React.createElement(TestFormLayout, {\n        title: \"Add Procedure\",\n        changeRedirect: this.changeRedirect,\n        formProp: formProp,\n        fields: formFields,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 141\n        },\n        __self: this\n      }), this.state.redirect && React.createElement(Redirect, {\n        to: \"/settings/procedures\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 142\n        },\n        __self: this\n      })));\n    }\n  }]);\n\n  return AddProcedure;\n}(React.Component);\n\nexport default AddProcedure;","map":{"version":3,"sources":["/home/shivam/WorkSpace/bk-erp-front/src/app/components/settings/options/procedure-catalog/AddProcedure.js"],"names":["React","DynamicFieldsForm","Form","Card","message","CHECKBOX_FIELD","SUCCESS_MSG_TYPE","INPUT_FIELD","RADIO_FIELD","SELECT_FIELD","NUMBER_FIELD","PROCEDURE_CATEGORY","PRODUCT_MARGIN","TAXES","getAPI","displayMessage","interpolate","Redirect","AddProcedure","props","state","taxes","procedure_category","redirect","productMargin","loadTaxes","bind","loadProcedures","loadProductMargin","redirectVar","setState","that","successFn","data","errorFn","console","log","active_practiceId","map","tax","Object","create","label","name","value","id","formFields","key","required","type","follow","options","initialValue","editFields","margin","concat","procedure","formProp","changeRedirect","action","method","TestFormLayout","Component"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport DynamicFieldsForm from \"../../../common/DynamicFieldsForm\";\nimport {Form, Card, message} from \"antd\";\nimport {\n    CHECKBOX_FIELD,\n    SUCCESS_MSG_TYPE,\n    INPUT_FIELD,\n    RADIO_FIELD,\n    SELECT_FIELD,\n    NUMBER_FIELD\n} from \"../../../../constants/dataKeys\";\nimport {PROCEDURE_CATEGORY, PRODUCT_MARGIN, TAXES} from \"../../../../constants/api\"\nimport {getAPI, displayMessage, interpolate} from \"../../../../utils/common\";\nimport {Redirect} from \"react-router-dom\";\n\nclass AddProcedure extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            taxes: [],\n            procedure_category: [],\n            redirect:false,\n            productMargin:[]\n        }\n        this.loadTaxes = this.loadTaxes.bind(this);\n        this.loadProcedures = this.loadProcedures.bind(this)\n        this.loadTaxes();\n        this.loadProcedures();\n        this.loadProductMargin();\n    }\n    changeRedirect() {\n        var redirectVar = this.state.redirect;\n        this.setState({\n            redirect: !redirectVar,\n        });\n    }\n    loadProductMargin() {\n        let that = this;\n        let successFn = function (data) {\n            that.setState({\n                productMargin: data\n            })\n        }\n        let errorFn = function () {\n\n        }\n        getAPI(PRODUCT_MARGIN, successFn, errorFn);\n    }\n    loadProcedures() {\n        var that = this;\n        let successFn = function (data) {\n            console.log(\"get table\");\n            that.setState({\n                procedure_category: data,\n            })\n        };\n        let errorFn = function () {\n        };\n        getAPI(interpolate(PROCEDURE_CATEGORY, [this.props.active_practiceId]), successFn, errorFn);\n    }\n\n    loadTaxes() {\n        let that = this;\n        let successFn = function (data) {\n            console.log(data.map(tax => Object.create({\n                    label: tax.name,\n                    value: tax.id\n                })\n            ));\n            that.setState({\n                taxes: data\n            })\n        }\n        let errorFn = function () {\n        }\n        getAPI(interpolate(TAXES, [this.props.active_practiceId]), successFn, errorFn);\n    }\n\n    render() {\n        let that = this;\n        const formFields = [{\n            label: \"Procedure Name\",\n            key: \"name\",\n            required: true,\n            type: INPUT_FIELD\n        }, {\n            label: \"Procedure Cost\",\n            key: \"cost\",\n            follow: \"INR\",\n            required: true,\n            type: NUMBER_FIELD,\n        }, {\n            label: \"Applicable Taxes\",\n            key: \"taxes\",\n            type: CHECKBOX_FIELD,\n            options: this.state.taxes.map(tax => Object.create({\n                    label: tax.name,\n                    value: tax.id\n                })\n            )\n        },{\n            label: 'MLM Margin Type',\n            type: SELECT_FIELD,\n            initialValue: (this.state.editFields ? this.state.editFields.margin : null),\n            key: 'margin',\n            required: true,\n            options: that.state.productMargin.map(margin => ({label: margin.name, value: margin.id}))\n        }, {\n            label: \"Add Under\",\n            key: \"under\",\n            type: SELECT_FIELD,\n            options: [{\n                label: \"None\",\n                value: null\n            }].concat(this.state.procedure_category.map(procedure => Object.create({\n                label: procedure.name,\n                value: procedure.id\n            }))),\n            initialValue: null\n        }, {\n            label: \"Default Note\",\n            key: \"default_notes\",\n            type: INPUT_FIELD\n        },];\n        const formProp = {\n            successFn: function (data) {\n                displayMessage(SUCCESS_MSG_TYPE, 'success');\n                that.changeRedirect();\n\n            },\n            errorFn: function () {\n\n            },\n            action: interpolate(PROCEDURE_CATEGORY, [this.props.active_practiceId]),\n            method: \"post\",\n        }\n\n        const TestFormLayout = Form.create()(DynamicFieldsForm);\n        return <div>\n            <Card>\n                <TestFormLayout title=\"Add Procedure\" changeRedirect={this.changeRedirect}  formProp={formProp} fields={formFields}/>\n                {this.state.redirect && <Redirect to='/settings/procedures'/>}\n            </Card>\n        </div>\n    }\n}\n\nexport default AddProcedure;\n"]},"metadata":{},"sourceType":"module"}