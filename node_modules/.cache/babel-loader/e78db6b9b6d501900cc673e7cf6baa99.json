{"ast":null,"code":"import _classCallCheck from \"/home/shivam/WorkSpace/bk-erp-front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/shivam/WorkSpace/bk-erp-front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/shivam/WorkSpace/bk-erp-front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/shivam/WorkSpace/bk-erp-front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/shivam/WorkSpace/bk-erp-front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/home/shivam/WorkSpace/bk-erp-front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/home/shivam/WorkSpace/bk-erp-front/src/app/components/inventory/inventoryItem/AddItemType.js\";\nimport React from \"react\";\nimport { Card, Form, Row } from \"antd\";\nimport DynamicFieldsForm from \"../../common/DynamicFieldsForm\";\nimport { CHECKBOX_FIELD, INPUT_FIELD, SUCCESS_MSG_TYPE, NUMBER_FIELD, SELECT_FIELD, SINGLE_CHECKBOX_FIELD, TEXT_FIELD } from \"../../../constants/dataKeys\";\nimport { SINGLE_INVENTORY_ITEM_API, INVENTORY_ITEM_API, INVENTORY_API, ITEM_TYPE_STOCK, SINGLE_ITEM_TYPE_STOCK, DRUG_TYPE_API } from \"../../../constants/api\";\nimport { INVENTORY_ITEM_TYPE, DRUG, SUPPLIES, EQUIPMENT } from \"../../../constants/hardData\";\nimport { getAPI, displayMessage, interpolate } from \"../../../utils/common\";\nimport { Link, Redirect, Switch } from \"react-router-dom\";\nimport { Route } from \"react-router\";\n\nvar AddItemType =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(AddItemType, _React$Component);\n\n  function AddItemType(props) {\n    var _this;\n\n    _classCallCheck(this, AddItemType);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(AddItemType).call(this, props));\n    _this.state = {\n      editInventoryItemType: _this.props.editInventoryItemType ? _this.props.editInventoryItemType : null,\n      redirect: false\n    };\n    _this.changeRedirect = _this.changeRedirect.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(AddItemType, [{\n    key: \"changeRedirect\",\n    value: function changeRedirect() {\n      var redirectVar = this.state.redirect;\n      this.setState({\n        redirect: !redirectVar\n      });\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      if (!this.state.editInventoryItemType) {\n        this.loadData();\n      }\n\n      this.loadInventoryItemData();\n      this.loadDrugType();\n    }\n  }, {\n    key: \"loadInventoryItemData\",\n    value: function loadInventoryItemData() {\n      var that = this;\n\n      var successFn = function successFn(data) {\n        that.setState({\n          inventory_item: data,\n          item_type: data.item_type\n        });\n      };\n\n      var errorFn = function errorFn() {};\n\n      getAPI(interpolate(SINGLE_INVENTORY_ITEM_API, [this.props.match.params.id]), successFn, errorFn);\n    }\n  }, {\n    key: \"loadDrugType\",\n    value: function loadDrugType() {\n      var that = this;\n\n      var successFn = function successFn(data) {\n        that.setState({\n          drug_type: data\n        });\n      };\n\n      var errorFn = function errorFn() {};\n\n      getAPI(DRUG_TYPE_API, successFn, errorFn);\n    }\n  }, {\n    key: \"loadData\",\n    value: function loadData() {\n      var that = this;\n\n      var successFn = function successFn(data) {\n        that.setState({\n          editInventoryItemType: data\n        });\n      };\n\n      var errorFn = function errorFn() {};\n\n      getAPI(interpolate(SINGLE_ITEM_TYPE_STOCK, [this.props.match.params.id]), successFn, errorFn);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var drugOption = [];\n\n      if (this.state.drug_type) {\n        this.state.drug_type.forEach(function (drug) {\n          drugOption.push({\n            label: drug.name,\n            value: drug.id\n          });\n        });\n      }\n\n      var fields = [];\n      var AddInventoryFormLayout = Form.create()(DynamicFieldsForm);\n      var editformProp;\n\n      if (this.state.editInventoryItemType) {\n        editformProp = {\n          successFn: function successFn(data) {\n            displayMessage(SUCCESS_MSG_TYPE, \"success\");\n            console.log(data);\n          },\n          errorFn: function errorFn() {},\n          action: interpolate(SINGLE_ITEM_TYPE_STOCK, [this.props.match.params.id]),\n          method: \"put\"\n        };\n      }\n\n      var formProp = {\n        successFn: function successFn(data) {\n          displayMessage(SUCCESS_MSG_TYPE, \"success\");\n          console.log(data);\n        },\n        errorFn: function errorFn() {},\n        action: ITEM_TYPE_STOCK,\n        method: \"post\"\n      };\n      var defaultValues = [{\n        \"key\": \"inventory_item\",\n        \"value\": this.props.match.params.id\n      }, {\n        \"key\": \"item_type\",\n        \"value\": this.state.item_type\n      }];\n\n      if (this.state.item_type == DRUG) {\n        fields = [{\n          label: \"I prescribe this\",\n          key: \"perscribe_this\",\n          type: SINGLE_CHECKBOX_FIELD,\n          initialValue: this.state.editInventoryItemType ? this.state.editInventoryItemType.perscribe_this : null // follow: \"I prescribe this\"\n\n        }, {\n          label: 'Drug Type',\n          key: 'drug_type',\n          type: SELECT_FIELD,\n          options: drugOption,\n          initialValue: this.state.editInventoryItemType ? this.state.editInventoryItemType.drug_type : null\n        }, {\n          label: 'Strength',\n          key: 'strength',\n          initialValue: this.state.editInventoryItemType ? this.state.editInventoryItemType.strength : null,\n          type: NUMBER_FIELD\n        }, {\n          label: 'stength_unit',\n          key: 'stength_unit',\n          type: INPUT_FIELD,\n          initialValue: this.state.editInventoryItemType ? this.state.editInventoryItemType.stength_unit : null\n        }, {\n          label: 'Instructions',\n          key: 'instructions',\n          type: TEXT_FIELD,\n          initialValue: this.state.editInventoryItemType ? this.state.editInventoryItemType.instructions : null\n        }];\n      }\n\n      if (this.state.item_type == EQUIPMENT) {\n        fields = [{\n          label: \"I prescribe this\",\n          key: \"perscribe_this\",\n          type: SINGLE_CHECKBOX_FIELD,\n          initialValue: this.state.editInventoryItemType ? this.state.editInventoryItemType.perscribe_this : null // follow: \"I prescribe this\"\n\n        }, {\n          label: 'Instructions',\n          key: 'instructions',\n          type: TEXT_FIELD,\n          initialValue: this.state.editInventoryItemType ? this.state.editInventoryItemType.instructions : null\n        }];\n      }\n\n      if (this.state.item_type == SUPPLIES) {\n        fields = [{\n          key: \"perscribe_this\",\n          type: SINGLE_CHECKBOX_FIELD,\n          initialValue: this.state.editInventoryItemType ? this.state.editInventoryItemType.perscribe_this : null,\n          label: \"I prescribe this\"\n        }, {\n          label: 'Strength',\n          key: 'strength',\n          initialValue: this.state.editInventoryItemType ? this.state.editInventoryItemType.strength : null,\n          type: NUMBER_FIELD\n        }, {\n          label: 'Strength Unit',\n          key: 'stength_unit',\n          type: INPUT_FIELD,\n          initialValue: this.state.editInventoryItemType ? this.state.editInventoryItemType.stength_unit : null\n        }, {\n          label: 'Instructions',\n          key: 'instructions',\n          type: TEXT_FIELD,\n          initialValue: this.state.editInventoryItemType ? this.state.editInventoryItemType.instructions : null\n        }];\n      }\n\n      if (this.state.editInventoryItemType != null) {\n        return React.createElement(Row, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 208\n          },\n          __self: this\n        }, React.createElement(Card, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 209\n          },\n          __self: this\n        }, React.createElement(AddInventoryFormLayout, {\n          defaultValues: defaultValues,\n          title: \"Edit Inventory Item type\",\n          changeRedirect: this.changeRedirect,\n          formProp: editformProp,\n          fields: fields,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 210\n          },\n          __self: this\n        })), this.state.redirect && React.createElement(Redirect, {\n          to: '/inventory',\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 214\n          },\n          __self: this\n        }));\n      } else {\n        return React.createElement(Row, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 217\n          },\n          __self: this\n        }, React.createElement(Card, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 218\n          },\n          __self: this\n        }, React.createElement(AddInventoryFormLayout, {\n          title: \"Add Inventory Item type\",\n          defaultValues: defaultValues,\n          changeRedirect: this.changeRedirect,\n          formProp: formProp,\n          fields: fields,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 219\n          },\n          __self: this\n        })), this.state.redirect && React.createElement(Redirect, {\n          to: '/inventory',\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 222\n          },\n          __self: this\n        }));\n      }\n    }\n  }]);\n\n  return AddItemType;\n}(React.Component);\n\nexport { AddItemType as default };","map":{"version":3,"sources":["/home/shivam/WorkSpace/bk-erp-front/src/app/components/inventory/inventoryItem/AddItemType.js"],"names":["React","Card","Form","Row","DynamicFieldsForm","CHECKBOX_FIELD","INPUT_FIELD","SUCCESS_MSG_TYPE","NUMBER_FIELD","SELECT_FIELD","SINGLE_CHECKBOX_FIELD","TEXT_FIELD","SINGLE_INVENTORY_ITEM_API","INVENTORY_ITEM_API","INVENTORY_API","ITEM_TYPE_STOCK","SINGLE_ITEM_TYPE_STOCK","DRUG_TYPE_API","INVENTORY_ITEM_TYPE","DRUG","SUPPLIES","EQUIPMENT","getAPI","displayMessage","interpolate","Link","Redirect","Switch","Route","AddItemType","props","state","editInventoryItemType","redirect","changeRedirect","bind","redirectVar","setState","loadData","loadInventoryItemData","loadDrugType","that","successFn","data","inventory_item","item_type","errorFn","match","params","id","drug_type","drugOption","forEach","drug","push","label","name","value","fields","AddInventoryFormLayout","create","editformProp","console","log","action","method","formProp","defaultValues","key","type","initialValue","perscribe_this","options","strength","stength_unit","instructions","Component"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport {Card, Form, Row} from \"antd\";\nimport DynamicFieldsForm from \"../../common/DynamicFieldsForm\";\nimport {\n    CHECKBOX_FIELD,\n    INPUT_FIELD,\n    SUCCESS_MSG_TYPE,\n    NUMBER_FIELD,\n    SELECT_FIELD,\n    SINGLE_CHECKBOX_FIELD, TEXT_FIELD\n} from \"../../../constants/dataKeys\";\nimport {\n    SINGLE_INVENTORY_ITEM_API,\n    INVENTORY_ITEM_API,\n    INVENTORY_API,\n    ITEM_TYPE_STOCK,\n    SINGLE_ITEM_TYPE_STOCK,\n    DRUG_TYPE_API\n} from \"../../../constants/api\";\nimport {INVENTORY_ITEM_TYPE, DRUG, SUPPLIES, EQUIPMENT} from \"../../../constants/hardData\";\nimport {getAPI, displayMessage, interpolate} from \"../../../utils/common\";\nimport {Link, Redirect, Switch} from \"react-router-dom\";\nimport {Route} from \"react-router\";\n\n\nexport default class AddItemType extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            editInventoryItemType: this.props.editInventoryItemType ? this.props.editInventoryItemType : null,\n            redirect: false,\n        };\n        this.changeRedirect = this.changeRedirect.bind(this);\n\n    }\n\n    changeRedirect() {\n        var redirectVar = this.state.redirect;\n        this.setState({\n            redirect: !redirectVar,\n        });\n    }\n\n    componentDidMount() {\n        if (!this.state.editInventoryItemType) {\n            this.loadData();\n        }\n        this.loadInventoryItemData();\n        this.loadDrugType();\n    }\n\n\n    loadInventoryItemData() {\n        let that = this;\n        let successFn = function (data) {\n            that.setState({\n                inventory_item: data,\n                item_type: data.item_type,\n            })\n        }\n        let errorFn = function () {\n\n        }\n        getAPI(interpolate(SINGLE_INVENTORY_ITEM_API, [this.props.match.params.id]), successFn, errorFn);\n    }\n\n    loadDrugType() {\n        let that = this;\n        let successFn = function (data) {\n            that.setState({\n                drug_type: data,\n            })\n        }\n        let errorFn = function () {\n\n        }\n        getAPI(DRUG_TYPE_API, successFn, errorFn);\n    }\n\n    loadData() {\n        let that = this;\n        let successFn = function (data) {\n            that.setState({\n                editInventoryItemType: data,\n            })\n        }\n        let errorFn = function () {\n\n        }\n        getAPI(interpolate(SINGLE_ITEM_TYPE_STOCK, [this.props.match.params.id]), successFn, errorFn);\n\n\n    }\n\n\n    render() {\n        const drugOption = []\n        if (this.state.drug_type) {\n            this.state.drug_type.forEach(function (drug) {\n                drugOption.push({label: drug.name, value: drug.id});\n            })\n        }\n\n        let fields = [];\n        const AddInventoryFormLayout = Form.create()(DynamicFieldsForm);\n        let editformProp;\n        if (this.state.editInventoryItemType) {\n            editformProp = {\n                successFn: function (data) {\n                    displayMessage(SUCCESS_MSG_TYPE, \"success\");\n                    console.log(data);\n                },\n                errorFn: function () {\n\n                },\n                action: interpolate(SINGLE_ITEM_TYPE_STOCK, [this.props.match.params.id]),\n                method: \"put\",\n            }\n        }\n\n        const formProp = {\n            successFn: function (data) {\n                displayMessage(SUCCESS_MSG_TYPE, \"success\");\n\n                console.log(data);\n            },\n            errorFn: function () {\n\n            },\n            action: ITEM_TYPE_STOCK,\n            method: \"post\",\n        }\n        let defaultValues = [{\"key\": \"inventory_item\", \"value\": this.props.match.params.id}, {\n            \"key\": \"item_type\",\n            \"value\": this.state.item_type\n        }];\n\n        if (this.state.item_type == DRUG) {\n            fields = [{\n                label:\"I prescribe this\",\n                key: \"perscribe_this\",\n                type: SINGLE_CHECKBOX_FIELD,\n                initialValue: this.state.editInventoryItemType ? this.state.editInventoryItemType.perscribe_this : null,\n                // follow: \"I prescribe this\"\n            },{\n                label: 'Drug Type',\n                key: 'drug_type',\n                type: SELECT_FIELD,\n                options: drugOption,\n                initialValue: this.state.editInventoryItemType ? this.state.editInventoryItemType.drug_type : null,\n            }, {\n                label: 'Strength',\n                key: 'strength',\n                initialValue: this.state.editInventoryItemType ? this.state.editInventoryItemType.strength : null,\n                type: NUMBER_FIELD,\n            }, {\n                label: 'stength_unit',\n                key: 'stength_unit',\n                type: INPUT_FIELD,\n                initialValue: this.state.editInventoryItemType ? this.state.editInventoryItemType.stength_unit : null,\n            }, {\n                label: 'Instructions',\n                key: 'instructions',\n                type: TEXT_FIELD,\n                initialValue: this.state.editInventoryItemType ? this.state.editInventoryItemType.instructions : null,\n            },]\n        }\n        if (this.state.item_type == EQUIPMENT) {\n            fields = [{\n                label:\"I prescribe this\",\n                key: \"perscribe_this\",\n                type: SINGLE_CHECKBOX_FIELD,\n                initialValue: this.state.editInventoryItemType ? this.state.editInventoryItemType.perscribe_this : null,\n                // follow: \"I prescribe this\"\n            }, {\n                label: 'Instructions',\n                key: 'instructions',\n                type: TEXT_FIELD,\n                initialValue: this.state.editInventoryItemType ? this.state.editInventoryItemType.instructions : null,\n            },]\n        }\n        if (this.state.item_type == SUPPLIES) {\n            fields = [{\n                key: \"perscribe_this\",\n                type: SINGLE_CHECKBOX_FIELD,\n                initialValue: this.state.editInventoryItemType ? this.state.editInventoryItemType.perscribe_this : null,\n                label: \"I prescribe this\"\n            }, {\n                label: 'Strength',\n                key: 'strength',\n                initialValue: this.state.editInventoryItemType ? this.state.editInventoryItemType.strength : null,\n                type: NUMBER_FIELD,\n            }, {\n                label: 'Strength Unit',\n                key: 'stength_unit',\n                type: INPUT_FIELD,\n                initialValue: this.state.editInventoryItemType ? this.state.editInventoryItemType.stength_unit : null,\n            }, {\n                label: 'Instructions',\n                key: 'instructions',\n                type: TEXT_FIELD,\n                initialValue: this.state.editInventoryItemType ? this.state.editInventoryItemType.instructions : null,\n            },]\n        }\n\n\n        if (this.state.editInventoryItemType != null) {\n            return <Row>\n                <Card>\n                    <AddInventoryFormLayout defaultValues={defaultValues} title=\"Edit Inventory Item type\"\n                                            changeRedirect={this.changeRedirect} formProp={editformProp}\n                                            fields={fields}/>\n                </Card>\n                {this.state.redirect && <Redirect to={'/inventory'}/>}\n            </Row>\n        } else {\n            return <Row>\n                <Card>\n                    <AddInventoryFormLayout title=\"Add Inventory Item type\" defaultValues={defaultValues}\n                                            changeRedirect={this.changeRedirect} formProp={formProp} fields={fields}/>\n                </Card>\n                {this.state.redirect && <Redirect to={'/inventory'}/>}\n            </Row>\n        }\n\n\n    }\n}\n"]},"metadata":{},"sourceType":"module"}