{"ast":null,"code":"import _classCallCheck from \"/home/shivam/WorkSpace/bk-erp-front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/shivam/WorkSpace/bk-erp-front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/shivam/WorkSpace/bk-erp-front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/shivam/WorkSpace/bk-erp-front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/shivam/WorkSpace/bk-erp-front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/home/shivam/WorkSpace/bk-erp-front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/home/shivam/WorkSpace/bk-erp-front/src/app/components/inventory/inventoryItem/AddorEditInventoryItem.js\";\nimport React from \"react\";\nimport { Card, Form, Row } from \"antd\";\nimport DynamicFieldsForm from \"../../common/DynamicFieldsForm\";\nimport { CHECKBOX_FIELD, INPUT_FIELD, SUCCESS_MSG_TYPE, NUMBER_FIELD, SELECT_FIELD } from \"../../../constants/dataKeys\";\nimport { SINGLE_INVENTORY_ITEM_API, TAXES, MANUFACTURER_API, VENDOR_API, INVENTORY_ITEM_API, INVENTORY_API } from \"../../../constants/api\";\nimport { INVENTORY_ITEM_TYPE } from \"../../../constants/hardData\";\nimport { getAPI, displayMessage, interpolate } from \"../../../utils/common\";\nimport { Link, Redirect, Switch } from \"react-router-dom\";\nimport { Route } from \"react-router\";\n\nvar AddorEditInventoryItem =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(AddorEditInventoryItem, _React$Component);\n\n  function AddorEditInventoryItem(props) {\n    var _this;\n\n    _classCallCheck(this, AddorEditInventoryItem);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(AddorEditInventoryItem).call(this, props));\n    _this.state = {\n      editInventoryItem: _this.props.editInventoryItem ? _this.props.editInventoryItem : null,\n      taxes_list: _this.props.taxes_list ? _this.props.taxes_list : null,\n      manufacture_list: _this.props.manufacture_list ? _this.props.manufacture_list : null,\n      vendor_list: _this.props.vendor_list ? _this.props.vendor_list : null,\n      redirect: false\n    };\n    _this.changeRedirect = _this.changeRedirect.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(AddorEditInventoryItem, [{\n    key: \"changeRedirect\",\n    value: function changeRedirect() {\n      var redirectVar = this.state.redirect;\n      this.setState({\n        redirect: !redirectVar\n      });\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      if (this.props.match.params.id) {\n        if (!this.state.editInventoryItem) {\n          this.loadData();\n        }\n      }\n\n      if (this.props.taxes_list == null) {\n        this.loadTaxes();\n      }\n\n      if (this.props.manufacture_list == null) {\n        this.loadManufactureList();\n      }\n\n      if (this.props.vendor_list == null) {\n        this.loadVendorList();\n      }\n    }\n  }, {\n    key: \"loadTaxes\",\n    value: function loadTaxes() {\n      var that = this;\n\n      var successFn = function successFn(data) {\n        console.log(\"get table\");\n        that.setState({\n          taxes_list: data\n        });\n      };\n\n      var errorFn = function errorFn() {};\n\n      getAPI(interpolate(TAXES, [this.props.active_practiceId]), successFn, errorFn);\n    }\n  }, {\n    key: \"loadManufactureList\",\n    value: function loadManufactureList() {\n      var that = this;\n\n      var successFn = function successFn(data) {\n        that.setState({\n          manufacture_list: data\n        });\n      };\n\n      var errorFn = function errorFn() {};\n\n      getAPI(MANUFACTURER_API, successFn, errorFn);\n    }\n  }, {\n    key: \"loadVendorList\",\n    value: function loadVendorList() {\n      var that = this;\n\n      var successFn = function successFn(data) {\n        that.setState({\n          vendor_list: data\n        });\n      };\n\n      var errorFn = function errorFn() {};\n\n      getAPI(VENDOR_API, successFn, errorFn);\n    }\n  }, {\n    key: \"loadData\",\n    value: function loadData() {\n      var that = this;\n\n      var successFn = function successFn(data) {\n        that.setState({\n          editInventoryItem: data\n        });\n      };\n\n      var errorFn = function errorFn() {};\n\n      if (this.props.match.params.id) getAPI(interpolate(SINGLE_INVENTORY_ITEM_API, [this.props.match.params.id]), successFn, errorFn);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var that = this;\n      var taxesOption = [];\n\n      if (this.state.taxes_list) {\n        this.state.taxes_list.forEach(function (drug) {\n          taxesOption.push({\n            label: drug.name + \"(\" + drug.tax_value + \")\",\n            value: drug.id\n          });\n        });\n      }\n\n      var manufacturerOption = [];\n\n      if (this.state.manufacture_list) {\n        this.state.manufacture_list.forEach(function (manufacturer) {\n          manufacturerOption.push({\n            label: manufacturer.name,\n            value: manufacturer.id\n          });\n        });\n      }\n\n      var vendorOption = [];\n\n      if (this.state.vendor_list) {\n        this.state.vendor_list.forEach(function (vendor) {\n          vendorOption.push({\n            label: vendor.name,\n            value: vendor.id\n          });\n        });\n      }\n\n      var fields = [{\n        label: 'Item Name',\n        key: 'name',\n        type: INPUT_FIELD,\n        initialValue: this.state.editInventoryItem ? this.state.editInventoryItem.name : null,\n        required: true\n      }, {\n        label: 'Item Code',\n        key: 'code',\n        type: INPUT_FIELD,\n        initialValue: this.state.editInventoryItem ? this.state.editInventoryItem.code : null\n      }, {\n        label: 'Manufacturer',\n        key: 'manufacturer',\n        type: SELECT_FIELD,\n        options: manufacturerOption,\n        initialValue: this.state.editInventoryItem ? this.state.editInventoryItem.manufacturer : null\n      }, {\n        label: 'Stocking Unit',\n        key: 'stocking_unit',\n        placeholder: 'Example: Bottles, Strips etc.',\n        follow: '(Make sure this is the same as the unit in which you dispense this item.)',\n        required: true,\n        type: INPUT_FIELD,\n        initialValue: this.state.editInventoryItem ? this.state.editInventoryItem.stocking_unit : null\n      }, {\n        label: 'Re-Order Level',\n        key: 're_order_level',\n        type: NUMBER_FIELD,\n        initialValue: this.state.editInventoryItem ? this.state.editInventoryItem.re_order_level : null\n      }, {\n        label: 'Retail Price',\n        key: 'retail_price',\n        initialValue: this.state.editInventoryItem ? this.state.editInventoryItem.retail_price : null,\n        type: NUMBER_FIELD,\n        min: 1,\n        follow: 'INR'\n      }, {\n        label: 'Tax',\n        key: 'taxes',\n        type: CHECKBOX_FIELD,\n        options: taxesOption,\n        initialValue: this.state.editInventoryItem ? this.state.editInventoryItem.taxes : null,\n        mode: \"multiple\"\n      }, {\n        label: 'Item Type',\n        key: 'item_type',\n        type: SELECT_FIELD,\n        required: true,\n        options: INVENTORY_ITEM_TYPE,\n        initialValue: this.state.editInventoryItem ? this.state.editInventoryItem.item_type : null\n      }];\n      var AddInventoryFormLayout = Form.create()(DynamicFieldsForm);\n      var editformProp;\n\n      if (this.state.editInventoryItem) {\n        editformProp = {\n          successFn: function successFn(data) {\n            displayMessage(SUCCESS_MSG_TYPE, \"success\");\n            console.log(data);\n          },\n          errorFn: function errorFn() {},\n          action: interpolate(SINGLE_INVENTORY_ITEM_API, [this.props.match.params.id]),\n          method: \"put\"\n        };\n      }\n\n      var formProp = {\n        successFn: function successFn(data) {\n          displayMessage(SUCCESS_MSG_TYPE, \"success\");\n          that.props.history.push('/inventory/edit-item-type/' + data.id);\n        },\n        errorFn: function errorFn() {},\n        action: INVENTORY_ITEM_API,\n        method: \"post\"\n      };\n      var defaultValues = [{\n        key: 'practice',\n        value: this.props.active_practiceId\n      }];\n      return React.createElement(Row, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 219\n        },\n        __self: this\n      }, React.createElement(Card, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 220\n        },\n        __self: this\n      }, React.createElement(Route, {\n        exact: true,\n        path: \"/inventory/edit/:id\",\n        render: function render() {\n          return _this2.props.match.params.id ? React.createElement(AddInventoryFormLayout, {\n            defaultValues: defaultValues,\n            title: \"Edit Post\",\n            changeRedirect: _this2.changeRedirect,\n            formProp: editformProp,\n            fields: fields,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 223\n            },\n            __self: this\n          }) : React.createElement(Redirect, {\n            to: '/web/blog',\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 225\n            },\n            __self: this\n          });\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 221\n        },\n        __self: this\n      }), React.createElement(Route, {\n        exact: true,\n        path: \"/inventory/add\",\n        render: function render() {\n          return React.createElement(AddInventoryFormLayout, {\n            title: \"Add Inventory Item\",\n            changeRedirect: _this2.changeRedirect,\n            formProp: formProp,\n            fields: fields,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 227\n            },\n            __self: this\n          });\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 226\n        },\n        __self: this\n      })), this.state.redirect && React.createElement(Redirect, {\n        to: '/inventory',\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 233\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return AddorEditInventoryItem;\n}(React.Component);\n\nexport { AddorEditInventoryItem as default };","map":{"version":3,"sources":["/home/shivam/WorkSpace/bk-erp-front/src/app/components/inventory/inventoryItem/AddorEditInventoryItem.js"],"names":["React","Card","Form","Row","DynamicFieldsForm","CHECKBOX_FIELD","INPUT_FIELD","SUCCESS_MSG_TYPE","NUMBER_FIELD","SELECT_FIELD","SINGLE_INVENTORY_ITEM_API","TAXES","MANUFACTURER_API","VENDOR_API","INVENTORY_ITEM_API","INVENTORY_API","INVENTORY_ITEM_TYPE","getAPI","displayMessage","interpolate","Link","Redirect","Switch","Route","AddorEditInventoryItem","props","state","editInventoryItem","taxes_list","manufacture_list","vendor_list","redirect","changeRedirect","bind","redirectVar","setState","match","params","id","loadData","loadTaxes","loadManufactureList","loadVendorList","that","successFn","data","console","log","errorFn","active_practiceId","taxesOption","forEach","drug","push","label","name","tax_value","value","manufacturerOption","manufacturer","vendorOption","vendor","fields","key","type","initialValue","required","code","options","placeholder","follow","stocking_unit","re_order_level","retail_price","min","taxes","mode","item_type","AddInventoryFormLayout","create","editformProp","action","method","formProp","history","defaultValues","Component"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport {Card, Form, Row} from \"antd\";\nimport DynamicFieldsForm from \"../../common/DynamicFieldsForm\";\nimport {CHECKBOX_FIELD, INPUT_FIELD, SUCCESS_MSG_TYPE, NUMBER_FIELD, SELECT_FIELD} from \"../../../constants/dataKeys\";\nimport {\n    SINGLE_INVENTORY_ITEM_API,\n    TAXES,\n    MANUFACTURER_API,\n    VENDOR_API,\n    INVENTORY_ITEM_API,\n    INVENTORY_API\n} from \"../../../constants/api\";\nimport {INVENTORY_ITEM_TYPE} from \"../../../constants/hardData\";\nimport {getAPI, displayMessage, interpolate} from \"../../../utils/common\";\nimport {Link, Redirect, Switch} from \"react-router-dom\";\nimport {Route} from \"react-router\";\n\n\nexport default class AddorEditInventoryItem extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            editInventoryItem: this.props.editInventoryItem ? this.props.editInventoryItem : null,\n            taxes_list: this.props.taxes_list ? this.props.taxes_list : null,\n            manufacture_list: this.props.manufacture_list ? this.props.manufacture_list : null,\n            vendor_list: this.props.vendor_list ? this.props.vendor_list : null,\n            redirect: false,\n\n\n        };\n        this.changeRedirect = this.changeRedirect.bind(this);\n\n    }\n\n    changeRedirect() {\n        var redirectVar = this.state.redirect;\n        this.setState({\n            redirect: !redirectVar,\n        });\n    }\n\n    componentDidMount() {\n        if (this.props.match.params.id) {\n            if (!this.state.editInventoryItem) {\n                this.loadData();\n            }\n        }\n        if (this.props.taxes_list == null) {\n            this.loadTaxes();\n        }\n        if (this.props.manufacture_list == null) {\n            this.loadManufactureList();\n        }\n        if (this.props.vendor_list == null) {\n            this.loadVendorList();\n        }\n    }\n\n    loadTaxes() {\n        var that = this;\n        let successFn = function (data) {\n            console.log(\"get table\");\n            that.setState({\n                taxes_list: data,\n            })\n        };\n        let errorFn = function () {\n        };\n        getAPI(interpolate(TAXES, [this.props.active_practiceId]), successFn, errorFn);\n\n    }\n\n    loadManufactureList() {\n        let that = this;\n        let successFn = function (data) {\n            that.setState({\n                manufacture_list: data\n            })\n        }\n        let errorFn = function () {\n\n        }\n        getAPI(MANUFACTURER_API, successFn, errorFn);\n    }\n\n    loadVendorList() {\n        let that = this;\n        let successFn = function (data) {\n            that.setState({\n                vendor_list: data\n            })\n        }\n        let errorFn = function () {\n\n        }\n        getAPI(VENDOR_API, successFn, errorFn);\n    }\n\n\n    loadData() {\n        let that = this;\n        let successFn = function (data) {\n            that.setState({\n                editInventoryItem: data,\n            })\n        }\n        let errorFn = function () {\n\n        }\n        if (this.props.match.params.id)\n            getAPI(interpolate(SINGLE_INVENTORY_ITEM_API, [this.props.match.params.id]), successFn, errorFn);\n\n    }\n\n\n    render() {\n        let that = this;\n        const taxesOption = [];\n        if (this.state.taxes_list) {\n            this.state.taxes_list.forEach(function (drug) {\n                taxesOption.push({label: (drug.name + \"(\" + drug.tax_value + \")\"), value: drug.id});\n            })\n        }\n        const manufacturerOption = [];\n        if (this.state.manufacture_list) {\n            this.state.manufacture_list.forEach(function (manufacturer) {\n                manufacturerOption.push({label: (manufacturer.name), value: manufacturer.id});\n            })\n        }\n        const vendorOption = [];\n        if (this.state.vendor_list) {\n            this.state.vendor_list.forEach(function (vendor) {\n                vendorOption.push({label: (vendor.name), value: vendor.id});\n            })\n        }\n\n\n        const fields = [{\n            label: 'Item Name',\n            key: 'name',\n            type: INPUT_FIELD,\n            initialValue: this.state.editInventoryItem ? this.state.editInventoryItem.name : null,\n            required: true\n        }, {\n            label: 'Item Code',\n            key: 'code',\n            type: INPUT_FIELD,\n            initialValue: this.state.editInventoryItem ? this.state.editInventoryItem.code : null,\n        }, {\n            label: 'Manufacturer',\n            key: 'manufacturer',\n            type: SELECT_FIELD,\n            options: manufacturerOption,\n            initialValue: this.state.editInventoryItem ? this.state.editInventoryItem.manufacturer : null,\n        }, {\n            label: 'Stocking Unit',\n            key: 'stocking_unit',\n            placeholder: 'Example: Bottles, Strips etc.',\n            follow: '(Make sure this is the same as the unit in which you dispense this item.)',\n            required: true,\n            type: INPUT_FIELD,\n            initialValue: this.state.editInventoryItem ? this.state.editInventoryItem.stocking_unit : null,\n        }, {\n            label: 'Re-Order Level',\n            key: 're_order_level',\n            type: NUMBER_FIELD,\n            initialValue: this.state.editInventoryItem ? this.state.editInventoryItem.re_order_level : null,\n        }, {\n            label: 'Retail Price',\n            key: 'retail_price',\n            initialValue: this.state.editInventoryItem ? this.state.editInventoryItem.retail_price : null,\n            type: NUMBER_FIELD,\n            min: 1,\n            follow: 'INR'\n        }, {\n            label: 'Tax',\n            key: 'taxes',\n            type: CHECKBOX_FIELD,\n            options: taxesOption,\n            initialValue: this.state.editInventoryItem ? this.state.editInventoryItem.taxes : null,\n            mode: \"multiple\"\n        }, {\n            label: 'Item Type',\n            key: 'item_type',\n            type: SELECT_FIELD,\n            required: true,\n            options: INVENTORY_ITEM_TYPE,\n            initialValue: this.state.editInventoryItem ? this.state.editInventoryItem.item_type : null,\n        }];\n        const AddInventoryFormLayout = Form.create()(DynamicFieldsForm);\n        let editformProp;\n        if (this.state.editInventoryItem) {\n            editformProp = {\n                successFn: function (data) {\n                    displayMessage(SUCCESS_MSG_TYPE, \"success\");\n                    console.log(data);\n                },\n                errorFn: function () {\n\n                },\n                action: interpolate(SINGLE_INVENTORY_ITEM_API, [this.props.match.params.id]),\n                method: \"put\",\n            }\n        }\n\n        const formProp = {\n            successFn: function (data) {\n                displayMessage(SUCCESS_MSG_TYPE, \"success\");\n                that.props.history.push('/inventory/edit-item-type/' + data.id);\n            },\n            errorFn: function () {\n\n            },\n            action: INVENTORY_ITEM_API,\n            method: \"post\",\n        }\n        let defaultValues = [{key: 'practice', value: this.props.active_practiceId}];\n\n        return <Row>\n            <Card>\n                <Route exact path='/inventory/edit/:id'\n                       render={() => (this.props.match.params.id ?\n                           <AddInventoryFormLayout defaultValues={defaultValues} title=\"Edit Post\"\n                                                   changeRedirect={this.changeRedirect} formProp={editformProp}\n                                                   fields={fields}/> : <Redirect to={'/web/blog'}/>)}/>\n                <Route exact path='/inventory/add'\n                       render={() => <AddInventoryFormLayout title=\"Add Inventory Item\"\n                                                             changeRedirect={this.changeRedirect} formProp={formProp}\n                                                             fields={fields}/>}/>\n\n\n            </Card>\n            {this.state.redirect && <Redirect to={'/inventory'}/>}\n        </Row>\n\n    }\n}\n"]},"metadata":{},"sourceType":"module"}