{"ast":null,"code":"import _objectSpread from \"/home/shivam/WorkSpace/bk-erp-front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"/home/shivam/WorkSpace/bk-erp-front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/shivam/WorkSpace/bk-erp-front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/shivam/WorkSpace/bk-erp-front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/shivam/WorkSpace/bk-erp-front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/shivam/WorkSpace/bk-erp-front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/home/shivam/WorkSpace/bk-erp-front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/home/shivam/WorkSpace/bk-erp-front/src/app/components/common/DynamicFieldsForm.js\";\nimport React from \"react\";\nimport { Button, Divider, Form, TimePicker, Icon, DatePicker, Input, InputNumber, Radio, Select, Checkbox, Upload, message } from \"antd\";\nimport { CHECKBOX_FIELD, TIME_PICKER, SINGLE_CHECKBOX_FIELD, COLOR_PICKER, TEXT_FIELD, INPUT_FIELD, DATE_PICKER, NUMBER_FIELD, RADIO_FIELD, SELECT_FIELD, QUILL_TEXT_FIELD, SINGLE_IMAGE_UPLOAD_FIELD, COUNTRY_FIELD, STATE_FIELD, EMAIL_FIELD, CITY_FIELD, PASSWORD_FIELD, MULTI_SELECT_FIELD, MULTI_IMAGE_UPLOAD_FIELD } from \"../../constants/dataKeys\";\nimport { REQUIRED_FIELD_MESSAGE } from \"../../constants/messages\";\nimport { getAPI, makeURL, postAPI, putAPI } from \"../../utils/common\";\nimport moment from \"moment\";\nimport { SwatchesPicker } from 'react-color';\nimport ReactQuill from 'react-quill';\nimport 'react-quill/dist/quill.snow.css';\nimport { EXTRA_DATA, FILE_UPLOAD_API } from \"../../constants/api\";\nvar TextArea = Input.TextArea;\nvar FormItem = Form.Item;\nvar RadioGroup = Radio.Group;\nvar CheckboxGroup = Checkbox.Group;\n\nvar fieldDecorators = function fieldDecorators(field, formData) {\n  if (field.type == MULTI_SELECT_FIELD) {\n    return {\n      initialValue: formData[field.key],\n      rules: [{\n        required: field.required,\n        message: REQUIRED_FIELD_MESSAGE,\n        type: 'array'\n      }]\n    };\n  }\n\n  return {\n    initialValue: formData[field.key],\n    rules: [{\n      required: field.required,\n      message: REQUIRED_FIELD_MESSAGE\n    }]\n  };\n};\n\nvar DynamicFieldsForm =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(DynamicFieldsForm, _React$Component);\n\n  function DynamicFieldsForm(props) {\n    var _this;\n\n    _classCallCheck(this, DynamicFieldsForm);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(DynamicFieldsForm).call(this, props));\n\n    _this.handleSubmit = function (e) {\n      var that = _assertThisInitialized(_assertThisInitialized(_this));\n\n      e.preventDefault();\n\n      _this.props.form.validateFields(function (err, values) {\n        if (!err) {\n          console.log(values);\n\n          if (_this.props.defaultValues) {\n            _this.props.defaultValues.forEach(function (object) {\n              values[object.key] = object.value;\n            });\n          }\n\n          if (_this.state.colorPickerKey) {\n            values[_this.state.colorPickerKey] = _this.state.colorPickerColor;\n          }\n\n          that.props.fields.forEach(function (formFields) {\n            if (formFields.type == SINGLE_IMAGE_UPLOAD_FIELD) {\n              var key = formFields.key;\n              if (values[key] && values[key].file && values[key].file.response) values[key] = values[key].file.response.image;else values[key] = formFields.initialValue;\n            } else if (formFields.type == MULTI_IMAGE_UPLOAD_FIELD) {\n              var _key = formFields.key;\n              if (values[_key] && values[_key].file && values[_key].file.response) values[_key] = values[_key].fileList.map(function (file) {\n                return file.response.id;\n              });else values[_key] = formFields.initialValue;\n            } else if (formFields.type == TIME_PICKER) {\n              var _key2 = formFields.key;\n\n              if (formFields.format) {\n                values[_key2] = moment(values[_key2]).format(formFields.format);\n              }\n            }\n          });\n          console.log(\"Fields in the form\", values);\n          that.submitForm(values);\n        }\n      });\n    };\n\n    _this.state = {\n      fields: _this.props.fields,\n      //Fields data to create the form\n      formData: {},\n      formProp: _this.props.formProp,\n      //Form data to send on form submission\n      disabled: false,\n      loading: false,\n      countryOptions: [],\n      stateOptions: [],\n      cityOptions: []\n    };\n    _this.resetFormData = _this.resetFormData.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.submitForm = _this.submitForm.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.colorChange = _this.colorChange.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.loadCountryData = _this.loadCountryData.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(DynamicFieldsForm, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var that = this;\n      this.resetFormData();\n      this.props.fields.forEach(function (field) {\n        if (field.type == COUNTRY_FIELD) {\n          that.loadCountryData();\n        }\n      });\n    }\n  }, {\n    key: \"resetFormData\",\n    value: function resetFormData() {\n      var formData = {};\n      this.state.fields.forEach(function (field) {\n        formData[field.key] = field.initialValue;\n      });\n      this.setState({\n        formData: formData\n      });\n    }\n  }, {\n    key: \"submitForm\",\n    value: function submitForm(data) {\n      var that = this;\n      this.setState({\n        disabled: true,\n        loading: true\n      });\n\n      var successFn = function successFn(data) {\n        that.state.formProp.successFn(data);\n        that.setState({\n          disabled: false,\n          loading: false\n        });\n\n        if (that.props.changeRedirect) {\n          that.props.changeRedirect();\n        }\n      };\n\n      var errorFn = function errorFn() {\n        that.state.formProp.errorFn();\n        that.setState({\n          disabled: false,\n          loading: false\n        });\n      };\n\n      if (this.props.formProp.method == \"post\") {\n        postAPI(this.props.formProp.action, data, successFn, errorFn);\n      } else if (this.props.formProp.method == \"put\") {\n        putAPI(this.props.formProp.action, data, successFn, errorFn);\n      }\n    }\n  }, {\n    key: \"colorChange\",\n    value: function colorChange(color, key) {\n      console.log(color, key);\n      this.setState({\n        colorPickerKey: key,\n        colorPickerColor: color.hex\n      });\n    }\n  }, {\n    key: \"setAddressField\",\n    value: function setAddressField(type, value) {\n      if (type == 'country') {\n        this.setState(function (prevState) {\n          var states = [];\n          prevState.countryOptions.forEach(function (country) {\n            if (country.id == value) {\n              states = country.states;\n            }\n          });\n          return {\n            stateOptions: states\n          };\n        });\n      } else {\n        this.setState(function (prevState) {\n          var cities = [];\n          prevState.stateOptions.forEach(function (state) {\n            if (state.id == value) {\n              cities = state.cities;\n            }\n          });\n          return {\n            cityOptions: cities\n          };\n        });\n      }\n    }\n  }, {\n    key: \"loadCountryData\",\n    value: function loadCountryData() {\n      var that = this;\n\n      var successFn = function successFn(data) {\n        that.setState({\n          countryOptions: data.country\n        });\n      };\n\n      var errorFn = function errorFn() {};\n\n      getAPI(EXTRA_DATA, successFn, errorFn);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var that = this;\n      var formItemLayout = this.props.formLayout ? this.props.formLayout : {\n        labelCol: {\n          span: 6\n        },\n        wrapperCol: {\n          span: 14\n        }\n      };\n      var getFieldDecorator = this.props.form.getFieldDecorator;\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 228\n        },\n        __self: this\n      }, React.createElement(Form, {\n        onSubmit: this.handleSubmit,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 229\n        },\n        __self: this\n      }, this.props.title ? React.createElement(\"h2\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 230\n        },\n        __self: this\n      }, this.props.title) : null, this.state.fields ? this.state.fields.map(function (field) {\n        switch (field.type) {\n          case PASSWORD_FIELD:\n            return React.createElement(Form.Item, Object.assign({\n              key: field.key,\n              label: field.label\n            }, formItemLayout, {\n              extra: field.extra,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 234\n              },\n              __self: this\n            }), getFieldDecorator(field.key, fieldDecorators(field, that.state.formData))(React.createElement(Input, {\n              prefix: React.createElement(Icon, {\n                type: \"lock\",\n                style: {\n                  color: 'rgba(0,0,0,.25)'\n                },\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 237\n                },\n                __self: this\n              }),\n              type: \"password\",\n              placeholder: field.placeholder,\n              disabled: field.disabled ? field.disabled : that.state.disabled,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 237\n              },\n              __self: this\n            })));\n\n          case INPUT_FIELD:\n            return React.createElement(FormItem, Object.assign({\n              key: field.key,\n              label: field.label\n            }, formItemLayout, {\n              extra: field.extra,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 244\n              },\n              __self: this\n            }), getFieldDecorator(field.key, fieldDecorators(field, that.state.formData))(React.createElement(Input, {\n              placeholder: field.placeholder,\n              disabled: field.disabled ? field.disabled : that.state.disabled,\n              onChange: that.inputChange,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 247\n              },\n              __self: this\n            })), field.follow ? React.createElement(\"span\", {\n              className: \"ant-form-text\",\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 251\n              },\n              __self: this\n            }, field.follow) : null);\n\n          case SELECT_FIELD:\n            return React.createElement(FormItem, Object.assign({\n              key: field.key\n            }, formItemLayout, {\n              label: field.label,\n              extra: field.extra,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 254\n              },\n              __self: this\n            }), getFieldDecorator(field.key, fieldDecorators(field, that.state.formData))(React.createElement(Select, {\n              placeholder: field.placeholder,\n              disabled: field.disabled ? field.disabled : that.state.disabled,\n              mode: field.mode ? field.mode : \"default\",\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 257\n              },\n              __self: this\n            }, field.options.map(function (option) {\n              return React.createElement(Select.Option, {\n                value: option.value,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 260\n                },\n                __self: this\n              }, option.label);\n            }))), field.follow ? React.createElement(\"span\", {\n              className: \"ant-form-text\",\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 264\n              },\n              __self: this\n            }, field.follow) : null);\n\n          case MULTI_SELECT_FIELD:\n            return React.createElement(FormItem, Object.assign({\n              key: field.key\n            }, formItemLayout, {\n              label: field.label,\n              extra: field.extra,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 267\n              },\n              __self: this\n            }), getFieldDecorator(field.key, _objectSpread({}, fieldDecorators(field, that.state.formData)))(React.createElement(Select, {\n              mode: \"multiple\",\n              placeholder: field.placeholder,\n              disabled: field.disabled ? field.disabled : that.state.disabled,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 270\n              },\n              __self: this\n            }, field.options.map(function (option) {\n              return React.createElement(Select.Option, {\n                value: option.value,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 272\n                },\n                __self: this\n              }, option.label);\n            }))), field.follow ? React.createElement(\"span\", {\n              className: \"ant-form-text\",\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 276\n              },\n              __self: this\n            }, field.follow) : null);\n\n          case RADIO_FIELD:\n            return React.createElement(FormItem, Object.assign({\n              key: field.key,\n              label: field.label\n            }, formItemLayout, {\n              extra: field.extra,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 279\n              },\n              __self: this\n            }), getFieldDecorator(field.key, fieldDecorators(field, that.state.formData))(React.createElement(RadioGroup, {\n              disabled: field.disabled ? field.disabled : that.state.disabled,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 282\n              },\n              __self: this\n            }, field.options.map(function (option) {\n              return React.createElement(Radio, {\n                value: option.value,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 283\n                },\n                __self: this\n              }, option.label);\n            }))));\n\n          case CHECKBOX_FIELD:\n            return React.createElement(FormItem, Object.assign({\n              key: field.key,\n              label: field.label\n            }, formItemLayout, {\n              extra: field.extra,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 289\n              },\n              __self: this\n            }), getFieldDecorator(field.key, fieldDecorators(field, that.state.formData))(React.createElement(CheckboxGroup, {\n              options: field.options,\n              disabled: field.disabled ? field.disabled : that.state.disabled,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 292\n              },\n              __self: this\n            })));\n\n          case SINGLE_CHECKBOX_FIELD:\n            return React.createElement(FormItem, Object.assign({\n              key: field.key,\n              label: field.label\n            }, formItemLayout, {\n              extra: field.extra,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 297\n              },\n              __self: this\n            }), getFieldDecorator(field.key, {\n              valuePropName: 'checked',\n              initialValue: field.initialValue\n            }, {\n              rules: [{\n                required: field.required,\n                message: REQUIRED_FIELD_MESSAGE\n              }]\n            })(React.createElement(Checkbox, {\n              disabled: field.disabled ? field.disabled : that.state.disabled,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 306\n              },\n              __self: this\n            }, field.follow)));\n\n          case NUMBER_FIELD:\n            return React.createElement(FormItem, Object.assign({\n              key: field.key\n            }, formItemLayout, {\n              label: field.label,\n              extra: field.extra,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 311\n              },\n              __self: this\n            }), getFieldDecorator(field.key, fieldDecorators(field, that.state.formData))(React.createElement(InputNumber, {\n              min: field.min,\n              max: field.max,\n              disabled: field.disabled ? field.disabled : that.state.disabled,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 315\n              },\n              __self: this\n            })), React.createElement(\"span\", {\n              className: \"ant-form-text\",\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 318\n              },\n              __self: this\n            }, field.follow));\n\n          case DATE_PICKER:\n            return React.createElement(FormItem, Object.assign({\n              key: field.key,\n              label: field.label\n            }, formItemLayout, {\n              extra: field.extra,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 321\n              },\n              __self: this\n            }), getFieldDecorator(field.key, {\n              initialValue: field.initialValue ? moment(field.initialValue) : null\n            }, {\n              rules: [{\n                required: field.required,\n                message: REQUIRED_FIELD_MESSAGE\n              }]\n            })(React.createElement(DatePicker, {\n              format: field.format,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 328\n              },\n              __self: this\n            })));\n\n          case TEXT_FIELD:\n            return React.createElement(\"div\", {\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 332\n              },\n              __self: this\n            }, React.createElement(FormItem, Object.assign({\n              key: field.key,\n              label: field.label\n            }, formItemLayout, {\n              extra: field.extra,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 333\n              },\n              __self: this\n            }), getFieldDecorator(field.key, fieldDecorators(field, that.state.formData))(React.createElement(TextArea, {\n              autosize: {\n                minRows: field.minRows,\n                maxRows: field.maxRows\n              },\n              placeholder: field.placeholder,\n              disabled: field.disabled ? field.disabled : that.state.disabled,\n              onChange: that.inputChange,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 335\n              },\n              __self: this\n            }))));\n\n          case QUILL_TEXT_FIELD:\n            return React.createElement(\"div\", {\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 343\n              },\n              __self: this\n            }, React.createElement(Divider, {\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 344\n              },\n              __self: this\n            }), React.createElement(FormItem, Object.assign({\n              key: field.key,\n              label: field.label\n            }, formItemLayout, {\n              extra: field.extra,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 345\n              },\n              __self: this\n            }), getFieldDecorator(field.key, {\n              initialValue: field.initialValue && field.initialValue.length ? field.initialValue : '',\n              rules: [{\n                required: field.required,\n                message: REQUIRED_FIELD_MESSAGE\n              }]\n            })(React.createElement(ReactQuill, {\n              theme: \"snow\",\n              placeholder: field.placeholder,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 353\n              },\n              __self: this\n            }))));\n\n          case TIME_PICKER:\n            return React.createElement(FormItem, Object.assign({\n              key: field.key,\n              label: field.label\n            }, formItemLayout, {\n              extra: field.extra,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 357\n              },\n              __self: this\n            }), getFieldDecorator(field.key, {\n              initialValue: field.initialValue ? moment(field.initialValue, field.format) : null,\n              rules: [{\n                required: field.required,\n                message: REQUIRED_FIELD_MESSAGE\n              }]\n            })(React.createElement(TimePicker, {\n              format: field.format,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 363\n              },\n              __self: this\n            })));\n\n          case COLOR_PICKER:\n            return React.createElement(FormItem, Object.assign({\n              key: field.key,\n              label: field.label\n            }, formItemLayout, {\n              extra: field.extra,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 367\n              },\n              __self: this\n            }), getFieldDecorator(field.key, fieldDecorators(field, that.state.formData))(React.createElement(\"div\", {\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 370\n              },\n              __self: this\n            }, React.createElement(SwatchesPicker, {\n              style: {\n                width: '100%'\n              },\n              onChange: function onChange(color) {\n                return that.colorChange(color, field.key);\n              },\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 371\n              },\n              __self: this\n            }), that.state.colorPickerKey ? React.createElement(\"div\", {\n              style: {\n                margin: '10px',\n                backgroundColor: that.state.colorPickerColor,\n                height: '40px',\n                width: '40px'\n              },\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 373\n              },\n              __self: this\n            }) : that.state.formData[field.key] ? React.createElement(\"div\", {\n              style: {\n                margin: '10px',\n                backgroundColor: that.state.formData[field.key],\n                height: '40px',\n                width: '40px'\n              },\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 378\n              },\n              __self: this\n            }) : null)));\n\n          case SINGLE_IMAGE_UPLOAD_FIELD:\n            var singleUploadprops = {\n              name: 'image',\n              data: {\n                name: 'hello'\n              },\n              action: makeURL(FILE_UPLOAD_API),\n              headers: {\n                authorization: 'authorization-text'\n              },\n              onChange: function onChange(info) {\n                if (info.file.status !== 'uploading') {\n                  console.log(info.file, info.fileList);\n                }\n\n                if (info.file.status === 'done') {\n                  message.success(\"\".concat(info.file.name, \" file uploaded successfully\"));\n                } else if (info.file.status === 'error') {\n                  message.error(\"\".concat(info.file.name, \" file upload failed.\"));\n                }\n              }\n            };\n            return React.createElement(Form.Item, Object.assign({\n              key: field.key\n            }, formItemLayout, {\n              label: field.label,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 408\n              },\n              __self: this\n            }), getFieldDecorator(field.key, {\n              valuePropName: field.key\n            })(React.createElement(Upload, Object.assign({}, singleUploadprops, {\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 410\n              },\n              __self: this\n            }), React.createElement(Button, {\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 411\n              },\n              __self: this\n            }, React.createElement(Icon, {\n              type: \"upload\",\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 412\n              },\n              __self: this\n            }), \" Select File\"), field.initialValue ? React.createElement(\"img\", {\n              src: field.initialValue,\n              style: {\n                maxWidth: '100%'\n              },\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 415\n              },\n              __self: this\n            }) : null)));\n\n          case MULTI_IMAGE_UPLOAD_FIELD:\n            var multiuploadprops = {\n              name: 'image',\n              data: {\n                name: 'hello'\n              },\n              action: makeURL(FILE_UPLOAD_API),\n              headers: {\n                authorization: 'authorization-text'\n              },\n              onChange: function onChange(info) {\n                if (info.file.status !== 'uploading') {\n                  console.log(info.file, info.fileList);\n                }\n\n                if (info.file.status === 'done') {\n                  message.success(\"\".concat(info.file.name, \" file uploaded successfully\"));\n                } else if (info.file.status === 'error') {\n                  message.error(\"\".concat(info.file.name, \" file upload failed.\"));\n                }\n              }\n            };\n            return React.createElement(Form.Item, Object.assign({\n              key: field.key\n            }, formItemLayout, {\n              label: field.label,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 440\n              },\n              __self: this\n            }), getFieldDecorator(field.key, {\n              valuePropName: field.key\n            })(React.createElement(Upload, Object.assign({}, multiuploadprops, {\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 442\n              },\n              __self: this\n            }), React.createElement(Button, {\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 443\n              },\n              __self: this\n            }, React.createElement(Icon, {\n              type: \"upload\",\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 444\n              },\n              __self: this\n            }), \" Select File\"), field.initialValue && field.initialValue.length ? field.initialValue.map(function (img) {\n              return React.createElement(\"img\", {\n                src: img,\n                style: {\n                  maxWidth: '100%'\n                },\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 447\n                },\n                __self: this\n              });\n            }) : null)));\n\n          case COUNTRY_FIELD:\n            return React.createElement(FormItem, Object.assign({\n              key: field.key\n            }, formItemLayout, {\n              label: field.label,\n              extra: field.extra,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 453\n              },\n              __self: this\n            }), getFieldDecorator(field.key, fieldDecorators(field, that.state.formData))(React.createElement(Select, {\n              placeholder: field.placeholder,\n              disabled: field.disabled ? field.disabled : that.state.disabled,\n              mode: field.mode ? field.mode : \"default\",\n              onChange: function onChange(value) {\n                return that.setAddressField('country', value);\n              },\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 456\n              },\n              __self: this\n            }, that.state.countryOptions.map(function (option) {\n              return React.createElement(Select.Option, {\n                value: option.id,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 460\n                },\n                __self: this\n              }, option.name);\n            }))));\n\n          case STATE_FIELD:\n            return React.createElement(FormItem, Object.assign({\n              key: field.key\n            }, formItemLayout, {\n              label: field.label,\n              extra: field.extra,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 466\n              },\n              __self: this\n            }), getFieldDecorator(field.key, fieldDecorators(field, that.state.formData))(React.createElement(Select, {\n              placeholder: field.placeholder,\n              disabled: field.disabled ? field.disabled : that.state.disabled,\n              mode: field.mode ? field.mode : \"default\",\n              onChange: function onChange(value) {\n                return that.setAddressField('state', value);\n              },\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 469\n              },\n              __self: this\n            }, that.state.stateOptions.map(function (option) {\n              return React.createElement(Select.Option, {\n                value: option.id,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 473\n                },\n                __self: this\n              }, option.name);\n            }))));\n\n          case EMAIL_FIELD:\n            return React.createElement(Form.Item, Object.assign({\n              key: field.key\n            }, formItemLayout, {\n              label: field.label,\n              extra: field.extra,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 480\n              },\n              __self: this\n            }), getFieldDecorator(field.key, {\n              initialValue: that.state.formData[field.key],\n              rules: [{\n                type: 'email',\n                message: 'The input is not valid E-mail!'\n              }, {\n                required: true,\n                message: 'Please input your E-mail!'\n              }]\n            })(React.createElement(Input, {\n              placeholder: field.placeholder,\n              disabled: field.disabled ? field.disabled : that.state.disabled,\n              onChange: that.inputChange,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 494\n              },\n              __self: this\n            })));\n\n          case CITY_FIELD:\n            return React.createElement(FormItem, Object.assign({\n              key: field.key\n            }, formItemLayout, {\n              label: field.label,\n              extra: field.extra,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 501\n              },\n              __self: this\n            }), getFieldDecorator(field.key, fieldDecorators(field, that.state.formData))(React.createElement(Select, {\n              placeholder: field.placeholder,\n              disabled: field.disabled ? field.disabled : that.state.disabled,\n              mode: field.mode ? field.mode : \"default\",\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 504\n              },\n              __self: this\n            }, that.state.cityOptions.map(function (option) {\n              return React.createElement(Select.Option, {\n                value: option.id,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 507\n                },\n                __self: this\n              }, option.name);\n            }))));\n\n          default:\n            return null;\n        }\n      }) : null, React.createElement(FormItem, Object.assign({}, formItemLayout, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 517\n        },\n        __self: this\n      }), React.createElement(Button, {\n        loading: that.state.loading,\n        type: \"primary\",\n        htmlType: \"submit\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 519\n        },\n        __self: this\n      }, \"Submit\"))));\n    }\n  }]);\n\n  return DynamicFieldsForm;\n}(React.Component);\n\nexport default DynamicFieldsForm;","map":{"version":3,"sources":["/home/shivam/WorkSpace/bk-erp-front/src/app/components/common/DynamicFieldsForm.js"],"names":["React","Button","Divider","Form","TimePicker","Icon","DatePicker","Input","InputNumber","Radio","Select","Checkbox","Upload","message","CHECKBOX_FIELD","TIME_PICKER","SINGLE_CHECKBOX_FIELD","COLOR_PICKER","TEXT_FIELD","INPUT_FIELD","DATE_PICKER","NUMBER_FIELD","RADIO_FIELD","SELECT_FIELD","QUILL_TEXT_FIELD","SINGLE_IMAGE_UPLOAD_FIELD","COUNTRY_FIELD","STATE_FIELD","EMAIL_FIELD","CITY_FIELD","PASSWORD_FIELD","MULTI_SELECT_FIELD","MULTI_IMAGE_UPLOAD_FIELD","REQUIRED_FIELD_MESSAGE","getAPI","makeURL","postAPI","putAPI","moment","SwatchesPicker","ReactQuill","EXTRA_DATA","FILE_UPLOAD_API","TextArea","FormItem","Item","RadioGroup","Group","CheckboxGroup","fieldDecorators","field","formData","type","initialValue","key","rules","required","DynamicFieldsForm","props","handleSubmit","e","that","preventDefault","form","validateFields","err","values","console","log","defaultValues","forEach","object","value","state","colorPickerKey","colorPickerColor","fields","formFields","file","response","image","fileList","map","id","format","submitForm","formProp","disabled","loading","countryOptions","stateOptions","cityOptions","resetFormData","bind","colorChange","loadCountryData","setState","data","successFn","changeRedirect","errorFn","method","action","color","hex","prevState","states","country","cities","formItemLayout","formLayout","labelCol","span","wrapperCol","getFieldDecorator","title","label","extra","placeholder","inputChange","follow","mode","options","option","valuePropName","min","max","minRows","maxRows","length","width","margin","backgroundColor","height","singleUploadprops","name","headers","authorization","onChange","info","status","success","error","maxWidth","multiuploadprops","img","setAddressField","Component"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport {\n    Button,\n    Divider,\n    Form,\n    TimePicker,\n    Icon,\n    DatePicker,\n    Input,\n    InputNumber,\n    Radio,\n    Select,\n    Checkbox,\n    Upload,\n    message,\n} from \"antd\";\nimport {\n    CHECKBOX_FIELD,\n    TIME_PICKER,\n    SINGLE_CHECKBOX_FIELD,\n    COLOR_PICKER,\n    TEXT_FIELD,\n    INPUT_FIELD,\n    DATE_PICKER,\n    NUMBER_FIELD,\n    RADIO_FIELD,\n    SELECT_FIELD,\n    QUILL_TEXT_FIELD,\n    SINGLE_IMAGE_UPLOAD_FIELD,\n    COUNTRY_FIELD,\n    STATE_FIELD,\n    EMAIL_FIELD,\n    CITY_FIELD, PASSWORD_FIELD, MULTI_SELECT_FIELD, MULTI_IMAGE_UPLOAD_FIELD\n} from \"../../constants/dataKeys\";\nimport {REQUIRED_FIELD_MESSAGE} from \"../../constants/messages\";\nimport {getAPI, makeURL, postAPI, putAPI} from \"../../utils/common\";\nimport moment from \"moment\";\nimport {SwatchesPicker} from 'react-color';\nimport ReactQuill from 'react-quill';\nimport 'react-quill/dist/quill.snow.css';\nimport {EXTRA_DATA, FILE_UPLOAD_API} from \"../../constants/api\";\n\nconst {TextArea} = Input;\nconst FormItem = Form.Item;\nconst RadioGroup = Radio.Group;\nconst CheckboxGroup = Checkbox.Group;\nvar fieldDecorators = function (field, formData) {\n    if (field.type == MULTI_SELECT_FIELD) {\n        return {\n            initialValue: formData[field.key],\n            rules: [{\n                required: field.required,\n                message: REQUIRED_FIELD_MESSAGE,\n                type: 'array'\n            }]\n        }\n    }\n    return {\n        initialValue: formData[field.key],\n        rules: [{\n            required: field.required,\n            message: REQUIRED_FIELD_MESSAGE\n        }]\n    }\n}\n\nclass DynamicFieldsForm extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            fields: this.props.fields, //Fields data to create the form\n            formData: {},\n            formProp: this.props.formProp,    //Form data to send on form submission\n            disabled: false,\n            loading: false,\n            countryOptions: [],\n            stateOptions: [],\n            cityOptions: []\n        }\n        this.resetFormData = this.resetFormData.bind(this);\n        this.submitForm = this.submitForm.bind(this);\n        this.colorChange = this.colorChange.bind(this);\n        this.loadCountryData = this.loadCountryData.bind(this);\n    }\n\n    componentDidMount() {\n        let that = this;\n        this.resetFormData();\n        this.props.fields.forEach(function (field) {\n            if (field.type == COUNTRY_FIELD) {\n                that.loadCountryData();\n            }\n        })\n    }\n\n    resetFormData() {\n        let formData = {};\n        this.state.fields.forEach(function (field) {\n            formData[field.key] = field.initialValue\n        });\n        this.setState({\n            formData: formData\n        })\n    }\n\n    handleSubmit = (e) => {\n        let that = this;\n        e.preventDefault();\n        this.props.form.validateFields((err, values) => {\n            if (!err) {\n                console.log(values);\n                if (this.props.defaultValues) {\n                    this.props.defaultValues.forEach(function (object) {\n                        values[object.key] = object.value;\n                    })\n                }\n                if (this.state.colorPickerKey) {\n                    values[this.state.colorPickerKey] = this.state.colorPickerColor;\n                }\n                that.props.fields.forEach(function (formFields) {\n                    if (formFields.type == SINGLE_IMAGE_UPLOAD_FIELD) {\n                        let key = formFields.key;\n                        if (values[key] && values[key].file && values[key].file.response)\n                            values[key] = values[key].file.response.image;\n                        else\n                            values[key] = formFields.initialValue;\n                    } else if (formFields.type == MULTI_IMAGE_UPLOAD_FIELD) {\n                        let key = formFields.key;\n                        if (values[key] && values[key].file && values[key].file.response)\n                            values[key] = values[key].fileList.map(file => file.response.id);\n                        else\n                            values[key] = formFields.initialValue;\n                    } else if (formFields.type == TIME_PICKER) {\n                        let key = formFields.key;\n                        if (formFields.format) {\n                            values[key] = moment(values[key]).format(formFields.format);\n                        }\n                    }\n                });\n                console.log(\"Fields in the form\", values);\n                that.submitForm(values);\n            }\n        });\n    }\n\n    submitForm(data) {\n        let that = this;\n        this.setState({\n            disabled: true,\n            loading: true,\n        });\n        let successFn = function (data) {\n            that.state.formProp.successFn(data);\n            that.setState({\n                disabled: false,\n                loading: false,\n            });\n            if (that.props.changeRedirect) {\n                that.props.changeRedirect();\n            }\n        };\n        let errorFn = function () {\n            that.state.formProp.errorFn();\n            that.setState({\n                disabled: false,\n                loading: false,\n            });\n        };\n        if (this.props.formProp.method == \"post\") {\n            postAPI(this.props.formProp.action, data, successFn, errorFn);\n        }\n        else if (this.props.formProp.method == \"put\") {\n            putAPI(this.props.formProp.action, data, successFn, errorFn);\n        }\n    }\n\n    colorChange(color, key) {\n        console.log(color, key);\n        this.setState({\n            colorPickerKey: key,\n            colorPickerColor: color.hex,\n        });\n    }\n\n    setAddressField(type, value) {\n        if (type == 'country') {\n            this.setState(function (prevState) {\n                let states = []\n                prevState.countryOptions.forEach(function (country) {\n                    if (country.id == value) {\n                        states = country.states\n                    }\n                })\n                return {stateOptions: states}\n            })\n        } else {\n            this.setState(function (prevState) {\n                let cities = [];\n                prevState.stateOptions.forEach(function (state) {\n                    if (state.id == value) {\n                        cities = state.cities\n                    }\n                })\n                return {cityOptions: cities}\n            })\n        }\n    }\n\n    loadCountryData() {\n        var that = this;\n        let successFn = function (data) {\n            that.setState({\n                countryOptions: data.country,\n            })\n        };\n        let errorFn = function () {\n        };\n        getAPI(EXTRA_DATA, successFn, errorFn);\n    }\n\n    render() {\n        const that = this;\n        const formItemLayout = (this.props.formLayout ? this.props.formLayout : {\n            labelCol: {span: 6},\n            wrapperCol: {span: 14},\n        });\n        const {getFieldDecorator} = this.props.form;\n        return <div>\n            <Form onSubmit={this.handleSubmit}>\n                {this.props.title ? <h2>{this.props.title}</h2> : null}\n                {this.state.fields ? this.state.fields.map(function (field) {\n                    switch (field.type) {\n                        case PASSWORD_FIELD:\n                            return <Form.Item key={field.key} label={field.label}  {...formItemLayout}\n                                              extra={field.extra}>\n                                {getFieldDecorator(field.key, fieldDecorators(field, that.state.formData))(\n                                    <Input prefix={<Icon type=\"lock\" style={{color: 'rgba(0,0,0,.25)'}}/>}\n                                           type=\"password\"\n                                           placeholder={field.placeholder}\n                                           disabled={field.disabled ? field.disabled : that.state.disabled}/>\n                                )}\n                            </Form.Item>;\n                        case INPUT_FIELD:\n                            return <FormItem key={field.key} label={field.label}  {...formItemLayout}\n                                             extra={field.extra}>\n                                {getFieldDecorator(field.key, fieldDecorators(field, that.state.formData))(\n                                    <Input placeholder={field.placeholder}\n                                           disabled={field.disabled ? field.disabled : that.state.disabled}\n                                           onChange={that.inputChange}/>\n                                )}\n                                {field.follow ? <span className=\"ant-form-text\">{field.follow}</span> : null}\n                            </FormItem>;\n                        case SELECT_FIELD:\n                            return <FormItem key={field.key} {...formItemLayout} label={field.label}\n                                             extra={field.extra}>\n                                {getFieldDecorator(field.key, fieldDecorators(field, that.state.formData))(\n                                    <Select placeholder={field.placeholder}\n                                            disabled={field.disabled ? field.disabled : that.state.disabled}\n                                            mode={field.mode ? field.mode : \"default\"}>\n                                        {field.options.map((option) => <Select.Option\n                                            value={option.value}>{option.label}</Select.Option>)}\n                                    </Select>\n                                )}\n                                {field.follow ? <span className=\"ant-form-text\">{field.follow}</span> : null}\n                            </FormItem>;\n                        case MULTI_SELECT_FIELD:\n                            return <FormItem key={field.key} {...formItemLayout} label={field.label}\n                                             extra={field.extra}>\n                                {getFieldDecorator(field.key, {...fieldDecorators(field, that.state.formData)})(\n                                    <Select mode=\"multiple\" placeholder={field.placeholder}\n                                            disabled={field.disabled ? field.disabled : that.state.disabled}>\n                                        {field.options.map((option) => <Select.Option\n                                            value={option.value}>{option.label}</Select.Option>)}\n                                    </Select>\n                                )}\n                                {field.follow ? <span className=\"ant-form-text\">{field.follow}</span> : null}\n                            </FormItem>;\n                        case RADIO_FIELD:\n                            return <FormItem key={field.key} label={field.label} {...formItemLayout}\n                                             extra={field.extra}>\n                                {getFieldDecorator(field.key, fieldDecorators(field, that.state.formData))(\n                                    <RadioGroup disabled={field.disabled ? field.disabled : that.state.disabled}>\n                                        {field.options.map((option) => <Radio\n                                            value={option.value}>{option.label}</Radio>)}\n                                    </RadioGroup>\n                                )}\n                            </FormItem>;\n                        case CHECKBOX_FIELD:\n                            return <FormItem key={field.key} label={field.label} {...formItemLayout}\n                                             extra={field.extra}>\n                                {getFieldDecorator(field.key, fieldDecorators(field, that.state.formData))(\n                                    <CheckboxGroup options={field.options}\n                                                   disabled={field.disabled ? field.disabled : that.state.disabled}/>\n                                )}\n                            </FormItem>;\n                        case SINGLE_CHECKBOX_FIELD:\n                            return <FormItem key={field.key} label={field.label} {...formItemLayout}\n                                             extra={field.extra}>\n                                {getFieldDecorator(field.key, {\n                                        valuePropName: 'checked',\n                                        initialValue: field.initialValue\n                                    },\n                                    {\n                                        rules: [{required: field.required, message: REQUIRED_FIELD_MESSAGE}],\n                                    })(\n                                    <Checkbox\n                                        disabled={field.disabled ? field.disabled : that.state.disabled}>{field.follow}</Checkbox>\n                                )}\n                            </FormItem>;\n                        case NUMBER_FIELD:\n                            return <FormItem key={field.key}\n                                             {...formItemLayout}\n                                             label={field.label} extra={field.extra}>\n                                {getFieldDecorator(field.key, fieldDecorators(field, that.state.formData))(\n                                    <InputNumber min={field.min} max={field.max}\n                                                 disabled={field.disabled ? field.disabled : that.state.disabled}/>\n                                )}\n                                <span className=\"ant-form-text\">{field.follow}</span>\n                            </FormItem>;\n                        case DATE_PICKER:\n                            return <FormItem key={field.key} label={field.label} {...formItemLayout}\n                                             extra={field.extra}>\n                                {getFieldDecorator(field.key,\n                                    {initialValue: field.initialValue ? moment(field.initialValue) : null},\n                                    {\n                                        rules: [{required: field.required, message: REQUIRED_FIELD_MESSAGE}],\n                                    })(\n                                    <DatePicker format={field.format}/>\n                                )}\n                            </FormItem>;\n                        case TEXT_FIELD:\n                            return <div>\n                                <FormItem key={field.key} label={field.label}  {...formItemLayout} extra={field.extra}>\n                                    {getFieldDecorator(field.key, fieldDecorators(field, that.state.formData))(\n                                        <TextArea autosize={{minRows: field.minRows, maxRows: field.maxRows}}\n                                                  placeholder={field.placeholder}\n                                                  disabled={field.disabled ? field.disabled : that.state.disabled}\n                                                  onChange={that.inputChange}/>\n                                    )}\n                                </FormItem>\n                            </div>;\n                        case QUILL_TEXT_FIELD:\n                            return <div>\n                                <Divider/>\n                                <FormItem key={field.key} label={field.label}  {...formItemLayout} extra={field.extra}>\n                                    {getFieldDecorator(field.key, {\n                                        initialValue: (field.initialValue && field.initialValue.length ? field.initialValue : ''),\n                                        rules: [{\n                                            required: field.required,\n                                            message: REQUIRED_FIELD_MESSAGE\n                                        }]\n                                    })(\n                                        <ReactQuill theme=\"snow\" placeholder={field.placeholder}/>)}\n                                </FormItem>\n                            </div>;\n                        case TIME_PICKER:\n                            return <FormItem key={field.key} label={field.label} {...formItemLayout}\n                                             extra={field.extra}>\n                                {getFieldDecorator(field.key, {\n                                    initialValue: field.initialValue ? moment(field.initialValue, field.format) : null,\n                                    rules: [{required: field.required, message: REQUIRED_FIELD_MESSAGE}],\n                                })(\n                                    <TimePicker format={field.format}/>\n                                )}\n                            </FormItem>;\n                        case COLOR_PICKER:\n                            return <FormItem key={field.key} label={field.label}  {...formItemLayout}\n                                             extra={field.extra}>\n                                {getFieldDecorator(field.key, fieldDecorators(field, that.state.formData))(\n                                    <div>\n                                        <SwatchesPicker style={{width: '100%'}}\n                                                        onChange={(color) => that.colorChange(color, field.key)}/>\n                                        {that.state.colorPickerKey ? <div style={{\n                                            margin: '10px',\n                                            backgroundColor: that.state.colorPickerColor,\n                                            height: '40px',\n                                            width: '40px'\n                                        }}/> : (that.state.formData[field.key] ? <div style={{\n                                            margin: '10px',\n                                            backgroundColor: that.state.formData[field.key],\n                                            height: '40px',\n                                            width: '40px'\n                                        }}/> : null)}\n                                    </div>\n                                )}\n                            </FormItem>;\n                        case SINGLE_IMAGE_UPLOAD_FIELD:\n                            const singleUploadprops = {\n                                name: 'image',\n                                data: {\n                                    name: 'hello'\n                                },\n                                action: makeURL(FILE_UPLOAD_API),\n                                headers: {\n                                    authorization: 'authorization-text',\n                                },\n                                onChange(info) {\n                                    if (info.file.status !== 'uploading') {\n                                        console.log(info.file, info.fileList);\n                                    }\n                                    if (info.file.status === 'done') {\n                                        message.success(`${info.file.name} file uploaded successfully`);\n                                    } else if (info.file.status === 'error') {\n                                        message.error(`${info.file.name} file upload failed.`);\n                                    }\n                                },\n                            };\n                            return <Form.Item key={field.key} {...formItemLayout} label={field.label}>\n                                {getFieldDecorator(field.key, {valuePropName: field.key,})(\n                                    <Upload {...singleUploadprops}>\n                                        <Button>\n                                            <Icon type=\"upload\"/> Select File\n                                        </Button>\n                                        {field.initialValue ?\n                                            <img src={field.initialValue} style={{maxWidth: '100%'}}/> : null}\n                                    </Upload>\n                                )}\n                            </Form.Item>;\n                        case MULTI_IMAGE_UPLOAD_FIELD:\n                            const multiuploadprops = {\n                                name: 'image',\n                                data: {\n                                    name: 'hello'\n                                },\n                                action: makeURL(FILE_UPLOAD_API),\n                                headers: {\n                                    authorization: 'authorization-text',\n                                },\n                                onChange(info) {\n                                    if (info.file.status !== 'uploading') {\n                                        console.log(info.file, info.fileList);\n                                    }\n                                    if (info.file.status === 'done') {\n                                        message.success(`${info.file.name} file uploaded successfully`);\n                                    } else if (info.file.status === 'error') {\n                                        message.error(`${info.file.name} file upload failed.`);\n                                    }\n                                },\n                            };\n                            return <Form.Item key={field.key} {...formItemLayout} label={field.label}>\n                                {getFieldDecorator(field.key, {valuePropName: field.key,})(\n                                    <Upload {...multiuploadprops}>\n                                        <Button>\n                                            <Icon type=\"upload\"/> Select File\n                                        </Button>\n                                        {field.initialValue && field.initialValue.length ?\n                                            field.initialValue.map(img => <img src={img}\n                                                                               style={{maxWidth: '100%'}}/>) : null}\n                                    </Upload>\n                                )}\n                            </Form.Item>;\n                        case COUNTRY_FIELD:\n                            return <FormItem key={field.key} {...formItemLayout} label={field.label}\n                                             extra={field.extra}>\n                                {getFieldDecorator(field.key, fieldDecorators(field, that.state.formData))(\n                                    <Select placeholder={field.placeholder}\n                                            disabled={field.disabled ? field.disabled : that.state.disabled}\n                                            mode={field.mode ? field.mode : \"default\"}\n                                            onChange={(value) => that.setAddressField('country', value)}>\n                                        {that.state.countryOptions.map((option) => <Select.Option\n                                            value={option.id}>{option.name}</Select.Option>)}\n                                    </Select>\n                                )}\n                            </FormItem>;\n                        case STATE_FIELD:\n                            return <FormItem key={field.key} {...formItemLayout} label={field.label}\n                                             extra={field.extra}>\n                                {getFieldDecorator(field.key, fieldDecorators(field, that.state.formData))(\n                                    <Select placeholder={field.placeholder}\n                                            disabled={field.disabled ? field.disabled : that.state.disabled}\n                                            mode={field.mode ? field.mode : \"default\"}\n                                            onChange={(value) => that.setAddressField('state', value)}>\n                                        {that.state.stateOptions.map((option) => <Select.Option\n                                            value={option.id}>{option.name}</Select.Option>)}\n                                    </Select>\n                                )}\n                            </FormItem>;\n\n                        case EMAIL_FIELD:\n                            return <Form.Item\n                                key={field.key}\n                                {...formItemLayout}\n                                label={field.label}\n                                extra={field.extra}\n                            >\n                                {getFieldDecorator(field.key, {\n                                    initialValue: that.state.formData[field.key],\n                                    rules: [{\n                                        type: 'email', message: 'The input is not valid E-mail!',\n                                    }, {\n                                        required: true, message: 'Please input your E-mail!',\n                                    }],\n                                })(\n                                    <Input placeholder={field.placeholder}\n                                           disabled={field.disabled ? field.disabled : that.state.disabled}\n                                           onChange={that.inputChange}/>\n                                )}\n                            </Form.Item>\n\n                        case CITY_FIELD:\n                            return <FormItem key={field.key} {...formItemLayout} label={field.label}\n                                             extra={field.extra}>\n                                {getFieldDecorator(field.key, fieldDecorators(field, that.state.formData))(\n                                    <Select placeholder={field.placeholder}\n                                            disabled={field.disabled ? field.disabled : that.state.disabled}\n                                            mode={field.mode ? field.mode : \"default\"}>\n                                        {that.state.cityOptions.map((option) => <Select.Option\n                                            value={option.id}>{option.name}</Select.Option>)}\n                                    </Select>\n                                )}\n                            </FormItem>;\n\n                        default:\n                            return null;\n                    }\n                }) : null}\n                <FormItem {...formItemLayout}>\n                    {/*<Button onClick={this.resetFormData}>Reset</Button>*/}\n                    <Button loading={that.state.loading} type=\"primary\" htmlType=\"submit\">\n                        Submit\n                    </Button>\n                </FormItem>\n            </Form>\n        </div>\n    }\n}\n\nexport default DynamicFieldsForm;\n"]},"metadata":{},"sourceType":"module"}