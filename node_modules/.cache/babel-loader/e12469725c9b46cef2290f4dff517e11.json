{"ast":null,"code":"import _classCallCheck from \"/home/shivam/WorkSpace/bk-erp-front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/shivam/WorkSpace/bk-erp-front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/shivam/WorkSpace/bk-erp-front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/shivam/WorkSpace/bk-erp-front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/shivam/WorkSpace/bk-erp-front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/home/shivam/WorkSpace/bk-erp-front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/home/shivam/WorkSpace/bk-erp-front/src/app/components/patients/appointment/Appointment.js\";\nimport React from \"react\";\nimport { Route } from \"react-router\";\nimport \"react-router-dom\";\nimport DynamicFieldsForm from \"../../common/DynamicFieldsForm\";\nimport { Button, Card, Checkbox, Divider, Form, Icon, Row, Table, Tag } from \"antd\";\nimport { CHECKBOX_FIELD, DATE_PICKER, NUMBER_FIELD, SUCCESS_MSG_TYPE, INPUT_FIELD, RADIO_FIELD, SELECT_FIELD, DOCTORS_ROLE } from \"../../../constants/dataKeys\";\nimport { PATIENTS_LIST, PATIENT_PROFILE, APPOINTMENT_PERPRACTICE_API, PROCEDURE_CATEGORY, PRACTICESTAFF, EMR_TREATMENTNOTES, APPOINTMENT_API } from \"../../../constants/api\";\nimport { getAPI, interpolate, displayMessage, deleteAPI } from \"../../../utils/common\";\nimport { Redirect, Link } from 'react-router-dom';\nimport moment from 'moment';\n\nvar Appointment =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Appointment, _React$Component);\n\n  function Appointment(props) {\n    var _this;\n\n    _classCallCheck(this, Appointment);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Appointment).call(this, props));\n    _this.state = {\n      redirect: false,\n      appointments: null,\n      practice_doctors: [],\n      procedure_category: null,\n      treatmentNotes: null,\n      practice_staff: [],\n      loading: false\n    };\n    _this.changeRedirect = _this.changeRedirect.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.editAppointment = _this.editAppointment.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.deleteAppointment = _this.deleteAppointment.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(Appointment, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.loadProcedureCategory();\n      this.loadDoctors();\n      this.loadTreatmentNotes();\n\n      if (this.props.match.params.appointmentid) {\n        this.loadAppointment();\n      } else {\n        this.loadAllAppointments();\n      }\n    }\n  }, {\n    key: \"loadAllAppointments\",\n    value: function loadAllAppointments() {\n      var that = this;\n      this.setState({\n        loading: true\n      });\n\n      var successFn = function successFn(data) {\n        that.setState({\n          appointments: data,\n          loading: false\n        });\n      };\n\n      var errorFn = function errorFn() {\n        that.setState({\n          loading: false\n        });\n      };\n\n      getAPI(interpolate(APPOINTMENT_PERPRACTICE_API, [this.props.active_practiceId]), successFn, errorFn);\n    }\n  }, {\n    key: \"loadAppointment\",\n    value: function loadAppointment() {\n      var that = this;\n      this.setState({\n        loading: true\n      });\n\n      var successFn = function successFn(data) {\n        var appointmentArray = [];\n        appointmentArray.push(data);\n        console.log(appointmentArray);\n        that.setState({\n          appointments: appointmentArray,\n          loading: false\n        });\n      };\n\n      var errorFn = function errorFn() {\n        that.setState({\n          loading: false\n        });\n      };\n\n      getAPI(interpolate(APPOINTMENT_API, [this.props.match.params.appointmentid]), successFn, errorFn);\n    }\n  }, {\n    key: \"loadProcedureCategory\",\n    value: function loadProcedureCategory() {\n      var that = this;\n\n      var successFn = function successFn(data) {\n        that.setState({\n          procedure_category: data\n        });\n      };\n\n      var errorFn = function errorFn() {};\n\n      getAPI(interpolate(PROCEDURE_CATEGORY, [this.props.active_practiceId]), successFn, errorFn);\n    }\n  }, {\n    key: \"loadDoctors\",\n    value: function loadDoctors() {\n      var that = this;\n\n      var successFn = function successFn(data) {\n        data.staff.forEach(function (usersdata) {\n          if (usersdata.role == DOCTORS_ROLE) {\n            var doctor = that.state.practice_doctors;\n            doctor.push(usersdata);\n            that.setState({\n              practice_doctors: doctor\n            });\n          } else {\n            var _doctor = that.state.practice_staff;\n\n            _doctor.push(usersdata);\n\n            that.setState({\n              practice_staff: _doctor\n            });\n          }\n        });\n      };\n\n      var errorFn = function errorFn() {};\n\n      getAPI(interpolate(PRACTICESTAFF, [this.props.active_practiceId]), successFn, errorFn);\n    }\n  }, {\n    key: \"loadTreatmentNotes\",\n    value: function loadTreatmentNotes() {\n      var that = this;\n\n      var successFn = function successFn(data) {\n        that.setState({\n          treatmentNotes: data\n        });\n      };\n\n      var errorFn = function errorFn() {};\n\n      getAPI(interpolate(EMR_TREATMENTNOTES, [this.props.active_practiceId]), successFn, errorFn);\n    }\n  }, {\n    key: \"changeRedirect\",\n    value: function changeRedirect() {\n      var redirectVar = this.state.redirect;\n      this.setState({\n        redirect: !redirectVar\n      });\n    }\n  }, {\n    key: \"editAppointment\",\n    value: function editAppointment(record) {\n      var id = record.id;\n      this.props.history.push(\"/calendar/\" + id + \"/edit-appointment\");\n    }\n  }, {\n    key: \"deleteAppointment\",\n    value: function deleteAppointment(record) {\n      var that = this;\n\n      var successFn = function successFn(data) {\n        displayMessage(SUCCESS_MSG_TYPE, data);\n        that.componentDidMount();\n      };\n\n      var errorFn = function errorFn() {};\n\n      deleteAPI(interpolate(APPOINTMENT_API, [record.id]), successFn, errorFn);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var procedures = {};\n\n      if (this.state.procedure_category) {\n        this.state.procedure_category.forEach(function (procedure) {\n          procedures[procedure.id] = procedure.name;\n        });\n      }\n\n      var doctors = [];\n\n      if (this.state.practice_doctors.length) {\n        this.state.practice_doctors.forEach(function (doctor) {\n          doctors[doctor.id] = doctor.name;\n        });\n      }\n\n      var treatmentNotes = [];\n\n      if (this.state.treatmentNotes) {\n        this.state.treatmentNotes.forEach(function (treatmentNote) {\n          treatmentNotes[treatmentNote.id] = treatmentNote.name;\n        });\n      }\n\n      var categories = {\n        1: \"fast\",\n        2: \"Full Stomach\",\n        3: \"No Liquids\"\n      };\n      var columns = [{\n        title: 'Schedule Time',\n        key: 'name',\n        render: function render(text, record) {\n          return React.createElement(\"span\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 212\n            },\n            __self: this\n          }, moment(record.shedule_at).format('LLL'), \",\", record.slot, \"mins\");\n        }\n      }, {\n        title: 'Patient ID',\n        dataIndex: 'patient_id',\n        key: 'patient_id'\n      }, {\n        title: 'Patient Name',\n        dataIndex: 'patient_name',\n        key: 'patient_name'\n      }, {\n        title: 'Patient Mobile',\n        dataIndex: 'patient_mobile',\n        key: 'patient_mobile'\n      }, {\n        title: 'Email',\n        dataIndex: 'email',\n        key: 'email'\n      }, {\n        title: 'Doctor',\n        key: 'doctor',\n        render: function render(text, record) {\n          return React.createElement(\"span\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 234\n            },\n            __self: this\n          }, \" \", doctors[record.doctor]);\n        }\n      }, {\n        title: 'Procedure',\n        key: 'procedure',\n        render: function render(text, record) {\n          return React.createElement(\"span\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 240\n            },\n            __self: this\n          }, \" \", procedures[record.procedure]);\n        }\n      }, {\n        title: 'Treatment Notes',\n        key: 'notes',\n        render: function render(text, record) {\n          return React.createElement(\"span\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 246\n            },\n            __self: this\n          }, \" \", treatmentNotes[record.notes]);\n        }\n      }, {\n        title: 'Category',\n        key: 'category',\n        render: function render(text, record) {\n          return React.createElement(\"span\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 252\n            },\n            __self: this\n          }, \" \", categories[record.category]);\n        }\n      }, {\n        title: 'notify_via_email',\n        key: 'notify_via_email',\n        render: function render(text, record) {\n          return React.createElement(Checkbox, {\n            disabled: true,\n            checked: record.notify_via_email,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 258\n            },\n            __self: this\n          });\n        }\n      }, {\n        title: 'notify_via_sms',\n        key: 'notify_via_sms',\n        render: function render(text, record) {\n          return React.createElement(Checkbox, {\n            disabled: true,\n            checked: record.notify_via_sms,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 264\n            },\n            __self: this\n          });\n        }\n      }, {\n        title: 'Action',\n        key: 'action',\n        render: function render(text, record) {\n          return React.createElement(\"span\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 272\n            },\n            __self: this\n          }, React.createElement(\"a\", {\n            onClick: function onClick() {\n              return _this2.editAppointment(record);\n            },\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 273\n            },\n            __self: this\n          }, \"Edit\"), React.createElement(Divider, {\n            type: \"vertical\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 274\n            },\n            __self: this\n          }), React.createElement(\"a\", {\n            onClick: function onClick() {\n              return _this2.deleteAppointment(record);\n            },\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 275\n            },\n            __self: this\n          }, \"Delete\"));\n        }\n      }];\n      var TestFormLayout = Form.create()(DynamicFieldsForm);\n      return React.createElement(Card, {\n        extra: React.createElement(Link, {\n          to: \"/calendar/create-appointment\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 280\n          },\n          __self: this\n        }, React.createElement(Button, {\n          type: \"primary\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 281\n          },\n          __self: this\n        }, React.createElement(Icon, {\n          type: \"plus\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 282\n          },\n          __self: this\n        }), \"\\xA0Add Appointment\")),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 280\n        },\n        __self: this\n      }, React.createElement(Table, {\n        loading: this.state.loading,\n        columns: columns,\n        scroll: {\n          x: 1300\n        },\n        dataSource: this.state.appointments,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 284\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return Appointment;\n}(React.Component);\n\nexport default Appointment;","map":{"version":3,"sources":["/home/shivam/WorkSpace/bk-erp-front/src/app/components/patients/appointment/Appointment.js"],"names":["React","Route","DynamicFieldsForm","Button","Card","Checkbox","Divider","Form","Icon","Row","Table","Tag","CHECKBOX_FIELD","DATE_PICKER","NUMBER_FIELD","SUCCESS_MSG_TYPE","INPUT_FIELD","RADIO_FIELD","SELECT_FIELD","DOCTORS_ROLE","PATIENTS_LIST","PATIENT_PROFILE","APPOINTMENT_PERPRACTICE_API","PROCEDURE_CATEGORY","PRACTICESTAFF","EMR_TREATMENTNOTES","APPOINTMENT_API","getAPI","interpolate","displayMessage","deleteAPI","Redirect","Link","moment","Appointment","props","state","redirect","appointments","practice_doctors","procedure_category","treatmentNotes","practice_staff","loading","changeRedirect","bind","editAppointment","deleteAppointment","loadProcedureCategory","loadDoctors","loadTreatmentNotes","match","params","appointmentid","loadAppointment","loadAllAppointments","that","setState","successFn","data","errorFn","active_practiceId","appointmentArray","push","console","log","staff","forEach","usersdata","role","doctor","redirectVar","record","id","history","componentDidMount","procedures","procedure","name","doctors","length","treatmentNote","categories","columns","title","key","render","text","shedule_at","format","slot","dataIndex","notes","category","notify_via_email","notify_via_sms","TestFormLayout","create","x","Component"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport {Route} from \"react-router\";\nimport {} from \"react-router-dom\";\n\nimport DynamicFieldsForm from \"../../common/DynamicFieldsForm\";\nimport {Button, Card, Checkbox, Divider, Form, Icon, Row, Table, Tag} from \"antd\";\nimport {\n    CHECKBOX_FIELD,\n    DATE_PICKER,\n    NUMBER_FIELD,\n    SUCCESS_MSG_TYPE,\n    INPUT_FIELD,\n    RADIO_FIELD,\n    SELECT_FIELD,\n    DOCTORS_ROLE\n} from \"../../../constants/dataKeys\";\nimport {\n    PATIENTS_LIST,\n    PATIENT_PROFILE,\n    APPOINTMENT_PERPRACTICE_API,\n    PROCEDURE_CATEGORY,\n    PRACTICESTAFF, EMR_TREATMENTNOTES, APPOINTMENT_API\n} from \"../../../constants/api\";\nimport {getAPI, interpolate, displayMessage, deleteAPI} from \"../../../utils/common\";\nimport { Redirect, Link } from 'react-router-dom'\nimport moment from 'moment';\n\n\nclass Appointment extends React.Component{\n  constructor(props) {\n      super(props);\n\n      this.state = {\n        redirect:false,\n          appointments: null,\n          practice_doctors: [],\n          procedure_category:null,\n          treatmentNotes:null,\n          practice_staff:[],\n          loading:false\n\n      }\n      this.changeRedirect= this.changeRedirect.bind(this);\n      this.editAppointment = this.editAppointment.bind(this);\n      this.deleteAppointment = this.deleteAppointment.bind(this);\n\n  }\n      componentDidMount(){\n          this.loadProcedureCategory();\n          this.loadDoctors();\n          this.loadTreatmentNotes();\n          if(this.props.match.params.appointmentid){\n              this.loadAppointment();\n          }\n          else{\n              this.loadAllAppointments();\n          }\n\n      }\n      loadAllAppointments(){\n          let that=this;\n          this.setState({\n              loading:true,\n          })\n          let successFn = function (data) {\n\n              that.setState({\n                  appointments:data,\n                  loading:false,\n\n              });\n\n          }\n\n          let errorFn = function (){\n              that.setState({\n                  loading:false,\n\n              })\n\n          }\n          getAPI (interpolate(APPOINTMENT_PERPRACTICE_API,[this.props.active_practiceId])  , successFn,errorFn);\n\n      }\n      loadAppointment(){\n          let that=this;\n          this.setState({\n              loading:true,\n          })\n          let successFn = function (data) {\n              let appointmentArray=[];\n              appointmentArray.push(data);\n              console.log(appointmentArray);\n              that.setState({\n                  appointments:appointmentArray,\n                  loading:false,\n\n              });\n\n          }\n\n          let errorFn = function (){\n              that.setState({\n                  loading:false,\n\n          })\n\n\n          }\n          getAPI (interpolate(APPOINTMENT_API,[this.props.match.params.appointmentid])  , successFn,errorFn);\n\n      }\n\n\n      loadProcedureCategory(){\n        let that = this;\n        let successFn =function (data){\n            that.setState({\n                procedure_category:data\n            })\n\n        }\n        let errorFn = function (){\n\n        }\n        getAPI(interpolate(PROCEDURE_CATEGORY, [this.props.active_practiceId]), successFn, errorFn);\n    }\n    loadDoctors(){\n        let that = this;\n        let successFn = function(data){\n            data.staff.forEach(function(usersdata){\n                if(usersdata.role ==  DOCTORS_ROLE){\n                    let doctor=that.state.practice_doctors;\n                    doctor.push(usersdata);\n                    that.setState({\n                        practice_doctors:doctor,\n                    })\n                }\n                else{\n                    let doctor=that.state.practice_staff;\n                    doctor.push(usersdata);\n                    that.setState({\n                        practice_staff:doctor,\n                    })\n                }\n            })\n\n        }\n        let errorFn = function(){\n        };\n        getAPI(interpolate(PRACTICESTAFF,[this.props.active_practiceId]), successFn, errorFn);\n\n    }\n    loadTreatmentNotes(){\n        let that = this;\n        let successFn =function (data){\n            that.setState({\n                treatmentNotes:data\n            })\n\n        }\n        let errorFn = function (){\n\n        }\n        getAPI(interpolate(EMR_TREATMENTNOTES,[this.props.active_practiceId]), successFn, errorFn)\n    }\n      changeRedirect(){\n        var redirectVar=this.state.redirect;\n          this.setState({\n            redirect:  !redirectVar,\n          })  ;\n      }\n    editAppointment(record){\n\n        let id=record.id;\n        this.props.history.push(\"/calendar/\"+id+\"/edit-appointment\")\n\n    }\n    deleteAppointment(record){\n        let that = this;\n        let successFn = function (data) {\n            displayMessage(SUCCESS_MSG_TYPE,data);\n            that.componentDidMount();\n\n        }\n        let errorFn = function () {\n        }\n        deleteAPI(interpolate(APPOINTMENT_API,[record.id]),successFn,errorFn);\n    }\n\n  render(){\n      const procedures={}\n      if(this.state.procedure_category){\n          this.state.procedure_category.forEach(function (procedure) {\n              procedures[procedure.id]=procedure.name;\n          })\n      }\n      const doctors=[]\n      if(this.state.practice_doctors.length)         {\n          this.state.practice_doctors.forEach(function(doctor){\n              doctors[doctor.id]=doctor.name          })\n      }\n      const treatmentNotes=[];\n      if(this.state.treatmentNotes){\n          this.state.treatmentNotes.forEach(function(treatmentNote){\n              treatmentNotes[treatmentNote.id]=treatmentNote.name          })\n      }\n      const categories={1:\"fast\", 2: \"Full Stomach\", 3:\"No Liquids\"}\n      const columns = [{\n          title: 'Schedule Time',\n          key: 'name',\n          render: (text, record) =>(<span>{moment(record.shedule_at).format('LLL')},{record.slot}mins</span>\n          )\n      },{\n          title: 'Patient ID',\n          dataIndex: 'patient_id',\n          key: 'patient_id',\n      },{\n          title: 'Patient Name',\n          dataIndex: 'patient_name',\n          key: 'patient_name',\n      },{\n          title: 'Patient Mobile',\n          dataIndex: 'patient_mobile',\n          key: 'patient_mobile',\n      }, {\n          title: 'Email',\n          dataIndex: 'email',\n          key: 'email',\n      }, {\n          title: 'Doctor',\n          key: 'doctor',\n          render:(text, record) => (\n              <span> {doctors[record.doctor]}</span>\n          )\n      }, {\n          title: 'Procedure',\n          key: 'procedure',\n          render:(text, record) => (\n              <span> {procedures[record.procedure]}</span>\n          )\n      }, {\n          title: 'Treatment Notes',\n          key: 'notes',\n          render:(text, record) => (\n              <span> {treatmentNotes[record.notes]}</span>\n          )\n      },  {\n          title: 'Category',\n          key: 'category',\n          render:(text, record) => (\n              <span> {categories[record.category]}</span>\n          )\n      }, {\n          title: 'notify_via_email',\n          key: 'notify_via_email',\n          render:(text, record) => (\n              <Checkbox disabled checked={record.notify_via_email}/>\n          )\n      },  {\n          title: 'notify_via_sms',\n          key: 'notify_via_sms',\n          render:(text, record) => (\n              <Checkbox disabled checked={record.notify_via_sms}/>\n          )\n      },\n\n          {\n              title: 'Action',\n              key: 'action',\n              render: (text, record) => (\n                  <span>\n                <a onClick={()=>this.editAppointment(record)}>Edit</a>\n                <Divider type=\"vertical\" />\n                <a onClick={()=>this.deleteAppointment(record)}>Delete</a>\n              </span>\n              ),\n          }];\n    const TestFormLayout = Form.create()(DynamicFieldsForm);\n      return <Card  extra={<Link to=\"/calendar/create-appointment\">\n           <Button type=\"primary\" >\n               <Icon type=\"plus\"/>&nbsp;Add Appointment</Button>\n       </Link>}>\n          <Table loading={this.state.loading} columns={columns} scroll={{ x: 1300 }} dataSource={this.state.appointments} />\n\n\n\n      </Card>\n  }\n\n}\n\nexport default Appointment;\n"]},"metadata":{},"sourceType":"module"}