{"ast":null,"code":"import _classCallCheck from \"/home/shivam/WorkSpace/bk-erp-front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/shivam/WorkSpace/bk-erp-front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/shivam/WorkSpace/bk-erp-front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/shivam/WorkSpace/bk-erp-front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/shivam/WorkSpace/bk-erp-front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/shivam/WorkSpace/bk-erp-front/src/app/components/inventory/expenses/AddExpenses.js\";\nimport { Card, Form, Row } from \"antd\";\nimport React from \"react\";\nimport { DATE_PICKER, INPUT_FIELD, SELECT_FIELD, SUCCESS_MSG_TYPE } from \"../../../constants/dataKeys\";\nimport DynamicFieldsForm from \"../../common/DynamicFieldsForm\";\nimport { displayMessage, getAPI, interpolate } from \"../../../utils/common\";\nimport { EXPENSE_TYPE, EXPENSES_API, PAYMENT_MODES, SINGLE_EXPENSES_API, VENDOR_API } from \"../../../constants/api\";\nimport { Route } from \"react-router\";\nimport { Redirect } from \"react-router-dom\";\nimport moment from \"moment\";\n\nvar AddExpenses =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(AddExpenses, _React$Component);\n\n  function AddExpenses(props) {\n    var _this;\n\n    _classCallCheck(this, AddExpenses);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(AddExpenses).call(this, props));\n    _this.state = {\n      editData: _this.props.editData ? _this.props.editData : null\n    };\n    return _this;\n  }\n\n  _createClass(AddExpenses, [{\n    key: \"changeRedirect\",\n    value: function changeRedirect() {\n      var redirectVar = this.state.redirect;\n      this.setState({\n        redirect: !redirectVar\n      });\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      if (this.props.match.params.id) {\n        if (!this.state.editData) {\n          this.loadData();\n        }\n      }\n\n      this.loadExpensetypes();\n      this.loadPaymentModes();\n      this.loadVendors();\n    }\n  }, {\n    key: \"loadPaymentModes\",\n    value: function loadPaymentModes() {\n      var that = this;\n\n      var successFn = function successFn(data) {\n        console.log(\"get table\");\n        that.setState({\n          paymentModes: data\n        });\n      };\n\n      var errorFn = function errorFn() {};\n\n      getAPI(interpolate(PAYMENT_MODES, [this.props.active_practiceId]), successFn, errorFn);\n    }\n  }, {\n    key: \"loadData\",\n    value: function loadData() {\n      var that = this;\n\n      var successFn = function successFn(data) {\n        that.setState({\n          editData: data\n        });\n      };\n\n      var errorFn = function errorFn() {};\n\n      getAPI(interpolate(SINGLE_EXPENSES_API, [this.props.match.params.id]), successFn, errorFn);\n    }\n  }, {\n    key: \"loadExpensetypes\",\n    value: function loadExpensetypes() {\n      var that = this;\n\n      var successFn = function successFn(data) {\n        console.log(\"get table\");\n        that.setState({\n          expense_types: data\n        });\n      };\n\n      var errorFn = function errorFn() {};\n\n      getAPI(interpolate(EXPENSE_TYPE, [this.props.active_practiceId]), successFn, errorFn);\n    }\n  }, {\n    key: \"loadVendors\",\n    value: function loadVendors() {\n      var that = this;\n\n      var successFn = function successFn(data) {\n        console.log(\"get table\");\n        that.setState({\n          vendors: data\n        });\n      };\n\n      var errorFn = function errorFn() {};\n\n      getAPI(interpolate(VENDOR_API, [this.props.active_practiceId]), successFn, errorFn);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var paymentModesOptions = [];\n\n      if (this.state.paymentModes) {\n        this.state.paymentModes.forEach(function (drug) {\n          paymentModesOptions.push({\n            label: drug.mode,\n            value: drug.id\n          });\n        });\n      }\n\n      ;\n      var expenseTypesOptions = [];\n\n      if (this.state.expense_types) {\n        this.state.expense_types.forEach(function (drug) {\n          expenseTypesOptions.push({\n            label: drug.name,\n            value: drug.id\n          });\n        });\n      }\n\n      var vendorsOptions = [];\n\n      if (this.state.vendors) {\n        this.state.vendors.forEach(function (drug) {\n          vendorsOptions.push({\n            label: drug.name,\n            value: drug.id\n          });\n        });\n      }\n\n      var fields = [{\n        label: \"Expense Date\",\n        key: \"expense_date\",\n        required: true,\n        initialValue: this.state.editData ? this.state.editData.expense_date : moment(),\n        type: DATE_PICKER\n      }, {\n        label: \"Amount\",\n        key: \"amount\",\n        required: true,\n        initialValue: this.state.editData ? this.state.editData.amount : null,\n        type: INPUT_FIELD\n      }, {\n        label: \"Payment Mode\",\n        key: \"payment_mode\",\n        type: SELECT_FIELD,\n        required: true,\n        initialValue: this.state.editData ? this.state.editData.paymentModes : null,\n        options: paymentModesOptions\n      }, {\n        label: \"Vendor\",\n        key: \"vendor\",\n        type: SELECT_FIELD,\n        initialValue: this.state.editData ? this.state.editData.vendors : null,\n        options: vendorsOptions\n      }, {\n        label: \"Expense type\",\n        key: \"expense_type\",\n        type: SELECT_FIELD,\n        initialValue: this.state.editData ? this.state.editData.expenses : null,\n        options: expenseTypesOptions\n      }];\n      var editformProp;\n      var that = this;\n\n      if (this.state.editData) {\n        editformProp = {\n          successFn: function successFn(data) {\n            displayMessage(SUCCESS_MSG_TYPE, \"success\");\n            that.props.loadData();\n            that.changeRedirect();\n          },\n          errorFn: function errorFn() {},\n          action: interpolate(SINGLE_EXPENSES_API, [this.props.match.params.id]),\n          method: \"put\"\n        };\n      }\n\n      var TestFormLayout = Form.create()(DynamicFieldsForm);\n      var formProp = {\n        successFn: function successFn(data) {\n          displayMessage(SUCCESS_MSG_TYPE, \"success\");\n          that.props.loadData();\n          that.changeRedirect();\n          console.log(data);\n        },\n        errorFn: function errorFn() {},\n        action: EXPENSES_API,\n        method: \"post\"\n      };\n      var defaultValues = [{\n        \"key\": \"practice\",\n        \"value\": this.props.active_practiceId\n      }];\n      return React.createElement(Row, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 188\n        },\n        __self: this\n      }, React.createElement(Card, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 189\n        },\n        __self: this\n      }, React.createElement(Route, {\n        exact: true,\n        path: \"/inventory/expenses/edit/:id\",\n        render: function render() {\n          return _this2.props.match.params.id ? React.createElement(TestFormLayout, {\n            defaultValues: defaultValues,\n            title: \"Edit Expense\",\n            changeRedirect: _this2.changeRedirect,\n            formProp: editformProp,\n            fields: fields,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 192\n            },\n            __self: this\n          }) : React.createElement(Redirect, {\n            to: '/inventory/expenses',\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 194\n            },\n            __self: this\n          });\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 190\n        },\n        __self: this\n      }), React.createElement(Route, {\n        exact: true,\n        path: \"/inventory/expenses/add\",\n        render: function render() {\n          return React.createElement(TestFormLayout, {\n            title: \"Add Expenses\",\n            changeRedirect: _this2.changeRedirect,\n            formProp: formProp,\n            fields: fields,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 196\n            },\n            __self: this\n          });\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 195\n        },\n        __self: this\n      })), this.state.redirect && React.createElement(Redirect, {\n        to: '/inventory/expenses',\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 199\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return AddExpenses;\n}(React.Component);\n\nexport { AddExpenses as default };","map":{"version":3,"sources":["/home/shivam/WorkSpace/bk-erp-front/src/app/components/inventory/expenses/AddExpenses.js"],"names":["Card","Form","Row","React","DATE_PICKER","INPUT_FIELD","SELECT_FIELD","SUCCESS_MSG_TYPE","DynamicFieldsForm","displayMessage","getAPI","interpolate","EXPENSE_TYPE","EXPENSES_API","PAYMENT_MODES","SINGLE_EXPENSES_API","VENDOR_API","Route","Redirect","moment","AddExpenses","props","state","editData","redirectVar","redirect","setState","match","params","id","loadData","loadExpensetypes","loadPaymentModes","loadVendors","that","successFn","data","console","log","paymentModes","errorFn","active_practiceId","expense_types","vendors","paymentModesOptions","forEach","drug","push","label","mode","value","expenseTypesOptions","name","vendorsOptions","fields","key","required","initialValue","expense_date","type","amount","options","expenses","editformProp","changeRedirect","action","method","TestFormLayout","create","formProp","defaultValues","Component"],"mappings":"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","sourcesContent":["import {Card, Form, Row} from \"antd\";\nimport React from \"react\";\nimport {\n    DATE_PICKER,\n    INPUT_FIELD,\n    SELECT_FIELD,\n    SUCCESS_MSG_TYPE,\n} from \"../../../constants/dataKeys\";\nimport DynamicFieldsForm from \"../../common/DynamicFieldsForm\";\nimport {displayMessage, getAPI, interpolate} from \"../../../utils/common\";\nimport {EXPENSE_TYPE, EXPENSES_API, PAYMENT_MODES, SINGLE_EXPENSES_API, VENDOR_API} from \"../../../constants/api\";\nimport {Route} from \"react-router\";\nimport {Redirect} from \"react-router-dom\";\nimport moment from \"moment\";\n\n\nexport default class AddExpenses extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            editData: this.props.editData ? this.props.editData : null\n        }\n    }\n\n    changeRedirect() {\n        var redirectVar = this.state.redirect;\n        this.setState({\n            redirect: !redirectVar,\n        });\n\n    }\n\n    componentDidMount() {\n        if (this.props.match.params.id) {\n            if (!this.state.editData) {\n                this.loadData();\n            }\n        }\n        this.loadExpensetypes();\n        this.loadPaymentModes();\n        this.loadVendors();\n\n\n    }\n\n    loadPaymentModes() {\n        var that = this;\n        let successFn = function (data) {\n            console.log(\"get table\");\n            that.setState({\n                paymentModes: data,\n            })\n        };\n        let errorFn = function () {\n        };\n        getAPI(interpolate(PAYMENT_MODES, [this.props.active_practiceId]), successFn, errorFn);\n    }\n\n    loadData() {\n        let that = this;\n        let successFn = function (data) {\n            that.setState({\n                editData: data,\n            })\n        }\n        let errorFn = function () {\n\n        }\n        getAPI(interpolate(SINGLE_EXPENSES_API, [this.props.match.params.id]), successFn, errorFn);\n\n\n    }\n\n    loadExpensetypes() {\n        var that = this;\n        let successFn = function (data) {\n            console.log(\"get table\");\n            that.setState({\n                expense_types: data,\n            })\n        };\n        let errorFn = function () {\n        };\n        getAPI(interpolate(EXPENSE_TYPE, [this.props.active_practiceId]), successFn, errorFn);\n    }\n\n    loadVendors() {\n        var that = this;\n        let successFn = function (data) {\n            console.log(\"get table\");\n            that.setState({\n                vendors: data,\n            })\n        };\n        let errorFn = function () {\n        };\n        getAPI(interpolate(VENDOR_API, [this.props.active_practiceId]), successFn, errorFn);\n    }\n\n\n    render() {\n        const paymentModesOptions = []\n        if (this.state.paymentModes) {\n            this.state.paymentModes.forEach(function (drug) {\n                paymentModesOptions.push({label: (drug.mode), value: drug.id});\n            })\n        }\n        ;\n        const expenseTypesOptions = []\n        if (this.state.expense_types) {\n            this.state.expense_types.forEach(function (drug) {\n                expenseTypesOptions.push({label: (drug.name), value: drug.id});\n            })\n        }\n        const vendorsOptions = []\n        if (this.state.vendors) {\n            this.state.vendors.forEach(function (drug) {\n                vendorsOptions.push({label: (drug.name), value: drug.id});\n            })\n        }\n        const fields = [{\n            label: \"Expense Date\",\n            key: \"expense_date\",\n            required: true,\n            initialValue: this.state.editData ? this.state.editData.expense_date : moment(),\n            type: DATE_PICKER\n        },{\n            label: \"Amount\",\n            key: \"amount\",\n            required: true,\n            initialValue: this.state.editData ? this.state.editData.amount : null,\n            type: INPUT_FIELD\n        }, {\n            label: \"Payment Mode\",\n            key: \"payment_mode\",\n            type: SELECT_FIELD,\n            required: true,\n            initialValue: this.state.editData ? this.state.editData.paymentModes : null,\n            options: paymentModesOptions\n        }, {\n            label: \"Vendor\",\n            key: \"vendor\",\n            type: SELECT_FIELD,\n            initialValue: this.state.editData ? this.state.editData.vendors : null,\n            options: vendorsOptions\n        }, {\n            label: \"Expense type\",\n            key: \"expense_type\",\n            type: SELECT_FIELD,\n            initialValue: this.state.editData ? this.state.editData.expenses : null,\n            options: expenseTypesOptions\n        },];\n\n\n        let editformProp;\n        let that = this;\n        if (this.state.editData) {\n            editformProp = {\n                successFn: function (data) {\n                    displayMessage(SUCCESS_MSG_TYPE, \"success\");\n                    that.props.loadData();\n                    that.changeRedirect();\n                },\n                errorFn: function () {\n\n                },\n                action: interpolate(SINGLE_EXPENSES_API, [this.props.match.params.id]),\n                method: \"put\",\n\n            }\n        }\n        const TestFormLayout = Form.create()(DynamicFieldsForm);\n\n        const formProp = {\n            successFn: function (data) {\n                displayMessage(SUCCESS_MSG_TYPE, \"success\");\n                that.props.loadData();\n                that.changeRedirect();\n                console.log(data);\n            },\n            errorFn: function () {\n\n            },\n            action: EXPENSES_API,\n            method: \"post\",\n        }\n        const defaultValues = [{\"key\": \"practice\", \"value\": this.props.active_practiceId}];\n        return <Row>\n            <Card>\n                <Route exact path='/inventory/expenses/edit/:id'\n                       render={() => (this.props.match.params.id ?\n                           <TestFormLayout defaultValues={defaultValues} title=\"Edit Expense\"\n                                           changeRedirect={this.changeRedirect} formProp={editformProp}\n                                           fields={fields}/> : <Redirect to={'/inventory/expenses'}/>)}/>\n                <Route exact path='/inventory/expenses/add'\n                       render={() => <TestFormLayout title=\"Add Expenses\" changeRedirect={this.changeRedirect}\n                                                     formProp={formProp} fields={fields}/>}/>\n            </Card>\n            {this.state.redirect && <Redirect to={'/inventory/expenses'}/>}\n        </Row>\n\n    }\n}\n"]},"metadata":{},"sourceType":"module"}