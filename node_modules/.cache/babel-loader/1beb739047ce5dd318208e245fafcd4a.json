{"ast":null,"code":"import _classCallCheck from \"/home/shivam/WorkSpace/bk-erp-front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/shivam/WorkSpace/bk-erp-front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/shivam/WorkSpace/bk-erp-front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/shivam/WorkSpace/bk-erp-front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/shivam/WorkSpace/bk-erp-front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/home/shivam/WorkSpace/bk-erp-front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/home/shivam/WorkSpace/bk-erp-front/src/app/components/calendar/CreateAppointment.js\";\nimport React from \"react\";\nimport { Route } from \"react-router\";\nimport DynamicFieldsForm from \"../common/DynamicFieldsForm\";\nimport { Button, Card, Form, Icon, Row } from \"antd\";\nimport { CHECKBOX_FIELD, SINGLE_CHECKBOX_FIELD, DATE_PICKER, NUMBER_FIELD, SUCCESS_MSG_TYPE, INPUT_FIELD, RADIO_FIELD, SELECT_FIELD, DOCTORS_ROLE } from \"../../constants/dataKeys\";\nimport { PATIENTS_LIST, ALL_APPOINTMENT_API, APPOINTMENT_CATEGORIES, PRACTICESTAFF, PROCEDURE_CATEGORY, EMR_TREATMENTNOTES, APPOINTMENT_API, SINGLE_PRACTICE_STAFF_API } from \"../../constants/api\";\nimport { getAPI, interpolate, displayMessage } from \"../../utils/common\";\nimport { Redirect } from 'react-router-dom';\nimport moment from 'moment';\n\nvar CreateAppointment =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(CreateAppointment, _React$Component);\n\n  function CreateAppointment(props) {\n    var _this;\n\n    _classCallCheck(this, CreateAppointment);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(CreateAppointment).call(this, props));\n    _this.state = {\n      redirect: false,\n      practice_doctors: [],\n      appointmentCategories: null,\n      procedure_category: null,\n      treatmentNotes: null,\n      practice_staff: [],\n      appointment: null,\n      loading: false\n    };\n    _this.changeRedirect = _this.changeRedirect.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.loadDoctors = _this.loadDoctors.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.loadProcedureCategory = _this.loadProcedureCategory.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.loadTreatmentNotes = _this.loadTreatmentNotes.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(CreateAppointment, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.loadDoctors();\n      this.loadProcedureCategory();\n      this.loadTreatmentNotes();\n      this.loadAppointmentCategories();\n\n      if (this.props.match.params.appointmentid) {\n        this.loadAppointment();\n      }\n    }\n  }, {\n    key: \"loadAppointment\",\n    value: function loadAppointment() {\n      var that = this;\n      this.setState({\n        loading: true\n      });\n\n      var successFn = function successFn(data) {\n        that.setState({\n          appointment: data,\n          loading: false\n        });\n      };\n\n      var errorFn = function errorFn() {\n        that.setState({\n          loading: false\n        });\n      };\n\n      getAPI(interpolate(APPOINTMENT_API, [this.props.match.params.appointmentid]), successFn, errorFn);\n    }\n  }, {\n    key: \"loadDoctors\",\n    value: function loadDoctors() {\n      var that = this;\n\n      var successFn = function successFn(data) {\n        data.staff.forEach(function (usersdata) {\n          if (usersdata.role == DOCTORS_ROLE) {\n            var doctor = that.state.practice_doctors;\n            doctor.push(usersdata);\n            that.setState({\n              practice_doctors: doctor\n            });\n          } else {\n            var _doctor = that.state.practice_staff;\n\n            _doctor.push(usersdata);\n\n            that.setState({\n              practice_staff: _doctor\n            });\n          }\n        });\n      };\n\n      var errorFn = function errorFn() {};\n\n      getAPI(interpolate(PRACTICESTAFF, [this.props.active_practiceId]), successFn, errorFn);\n    }\n  }, {\n    key: \"loadProcedureCategory\",\n    value: function loadProcedureCategory() {\n      var that = this;\n\n      var successFn = function successFn(data) {\n        that.setState({\n          procedure_category: data\n        });\n      };\n\n      var errorFn = function errorFn() {};\n\n      getAPI(interpolate(PROCEDURE_CATEGORY, [this.props.active_practiceId]), successFn, errorFn);\n    }\n  }, {\n    key: \"loadTreatmentNotes\",\n    value: function loadTreatmentNotes() {\n      var that = this;\n\n      var successFn = function successFn(data) {\n        that.setState({\n          treatmentNotes: data\n        });\n      };\n\n      var errorFn = function errorFn() {};\n\n      getAPI(interpolate(EMR_TREATMENTNOTES, [this.props.active_practiceId]), successFn, errorFn);\n    }\n  }, {\n    key: \"loadAppointmentCategories\",\n    value: function loadAppointmentCategories() {\n      var that = this;\n\n      var successFn = function successFn(data) {\n        that.setState({\n          appointmentCategories: data\n        });\n      };\n\n      var errorFn = function errorFn() {};\n\n      getAPI(interpolate(APPOINTMENT_CATEGORIES, [this.props.active_practiceId]), successFn, errorFn);\n    }\n  }, {\n    key: \"changeRedirect\",\n    value: function changeRedirect() {\n      var redirectVar = this.state.redirect;\n      this.setState({\n        redirect: !redirectVar\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      console.log(this.state.practice_doctors);\n      var procedureOption = [];\n\n      if (this.state.procedure_category) {\n        this.state.procedure_category.forEach(function (drug) {\n          procedureOption.push({\n            label: drug.name,\n            value: drug.id\n          });\n        });\n      }\n\n      var doctorOption = [];\n\n      if (this.state.practice_doctors.length) {\n        this.state.practice_doctors.forEach(function (drug) {\n          doctorOption.push({\n            label: drug.name + \"(\" + drug.email + \")\",\n            value: drug.id\n          });\n        });\n      }\n\n      var treatmentNotesOption = [];\n\n      if (this.state.treatmentNotes) {\n        this.state.treatmentNotes.forEach(function (drug) {\n          treatmentNotesOption.push({\n            label: drug.name + \"(\" + drug.email + \")\",\n            value: drug.id\n          });\n        });\n      }\n\n      var categoryOptions = [];\n\n      if (this.state.appointmentCategories) {\n        this.state.appointmentCategories.forEach(function (category) {\n          categoryOptions.push({\n            label: category.name,\n            value: category.id\n          });\n        });\n      }\n\n      var appointmentTime = this.state.appointment ? this.state.appointment.shedule_at : this.props.startTime;\n\n      if (!appointmentTime) {\n        appointmentTime = new moment(new Date()).format();\n        console.log(appointmentTime);\n      }\n\n      var fields = [{\n        label: \"shedule_at\",\n        key: \"shedule_at\",\n        type: DATE_PICKER,\n        initialValue: appointmentTime,\n        format: \"YYYY/MM/DD HH:mm\"\n      }, {\n        label: \"Time Slot\",\n        key: \"slot\",\n        follow: \"mins\",\n        initialValue: this.state.appointment ? this.state.appointment.slot : 10,\n        type: NUMBER_FIELD\n      }, {\n        label: \"Patient Name\",\n        key: \"patient_name\",\n        required: true,\n        initialValue: this.state.appointment ? this.state.appointment.patient_name : null,\n        type: INPUT_FIELD\n      }, {\n        label: \"Patient Id\",\n        key: \"patient_id\",\n        required: true,\n        initialValue: this.state.appointment ? this.state.appointment.patient_id : null,\n        type: INPUT_FIELD\n      }, {\n        label: \"Mobile Number\",\n        key: \"patient_mobile\",\n        required: true,\n        initialValue: this.state.appointment ? this.state.appointment.patient_mobile : null,\n        type: INPUT_FIELD\n      }, {\n        label: \"Email Address\",\n        key: \"email\",\n        initialValue: this.state.appointment ? this.state.appointment.email : null,\n        required: true,\n        type: INPUT_FIELD\n      }, {\n        label: \"Notify Patient\",\n        key: \"notify_via_sms\",\n        type: SINGLE_CHECKBOX_FIELD,\n        initialValue: this.state.appointment ? this.state.appointment.notify_via_sms : false,\n        follow: \"Via SMS\"\n      }, {\n        label: \"Notify Patient\",\n        key: \"notify_via_email\",\n        type: SINGLE_CHECKBOX_FIELD,\n        initialValue: this.state.appointment ? this.state.appointment.notify_via_email : false,\n        follow: \"Via Email\"\n      }, {\n        label: \"Doctor\",\n        key: \"doctor\",\n        required: true,\n        initialValue: this.state.appointment ? this.state.appointment.doctor : null,\n        type: SELECT_FIELD,\n        options: doctorOption\n      }, {\n        label: \"Category\",\n        key: \"category\",\n        required: true,\n        type: SELECT_FIELD,\n        initialValue: this.state.appointment ? this.state.appointment.category : null,\n        options: categoryOptions\n      }, {\n        label: \"Procedures Planned\",\n        key: \"procedure\",\n        required: true,\n        type: SELECT_FIELD,\n        initialValue: this.state.appointment ? this.state.appointment.procedure : null,\n        options: procedureOption\n      }, {\n        label: \"Notes\",\n        key: \"notes\",\n        required: true,\n        type: SELECT_FIELD,\n        initialValue: this.state.appointment ? this.state.appointment.notes : null,\n        options: treatmentNotesOption\n      }];\n      var formProp = {\n        successFn: function successFn(data) {\n          console.log(data);\n          displayMessage(SUCCESS_MSG_TYPE, \"success\");\n        },\n        errorFn: function errorFn() {},\n        action: ALL_APPOINTMENT_API,\n        method: \"post\"\n      };\n      var defaultValues = [{\n        \"key\": \"practice\",\n        \"value\": this.props.active_practiceId\n      }];\n      var editformProp;\n\n      if (this.state.appointment) {\n        editformProp = {\n          successFn: function successFn(data) {\n            displayMessage(SUCCESS_MSG_TYPE, \"success\");\n            console.log(data);\n          },\n          errorFn: function errorFn() {},\n          action: interpolate(APPOINTMENT_API, [this.state.appointment.id]),\n          method: \"put\"\n        };\n        defaultValues = [{\n          \"key\": \"practice\",\n          \"value\": this.state.appointment.practice\n        }];\n      }\n\n      var TestFormLayout = Form.create()(DynamicFieldsForm);\n      return React.createElement(Row, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 296\n        },\n        __self: this\n      }, React.createElement(Card, {\n        loading: this.state.loading,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 296\n        },\n        __self: this\n      }, React.createElement(Route, {\n        exact: true,\n        path: \"/calendar/:appointmentid/edit-appointment\",\n        render: function render() {\n          return _this2.props.match.params.appointmentid ? React.createElement(TestFormLayout, {\n            defaultValues: defaultValues,\n            title: \"Edit Appointment\",\n            changeRedirect: _this2.changeRedirect,\n            formProp: editformProp,\n            fields: fields,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 298\n            },\n            __self: this\n          }) : React.createElement(Redirect, {\n            to: '/patients/appointments/',\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 298\n            },\n            __self: this\n          });\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 297\n        },\n        __self: this\n      }), React.createElement(Route, {\n        exact: true,\n        path: \"/calendar/create-appointment\",\n        render: function render() {\n          return React.createElement(TestFormLayout, {\n            defaultValues: defaultValues,\n            changeRedirect: _this2.changeRedirect,\n            title: \"ADD Appointmnt \",\n            formProp: formProp,\n            fields: fields,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 301\n            },\n            __self: this\n          });\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 300\n        },\n        __self: this\n      })), this.state.redirect && React.createElement(Redirect, {\n        to: \"/patients/appointments/\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 303\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return CreateAppointment;\n}(React.Component);\n\nexport default CreateAppointment;","map":{"version":3,"sources":["/home/shivam/WorkSpace/bk-erp-front/src/app/components/calendar/CreateAppointment.js"],"names":["React","Route","DynamicFieldsForm","Button","Card","Form","Icon","Row","CHECKBOX_FIELD","SINGLE_CHECKBOX_FIELD","DATE_PICKER","NUMBER_FIELD","SUCCESS_MSG_TYPE","INPUT_FIELD","RADIO_FIELD","SELECT_FIELD","DOCTORS_ROLE","PATIENTS_LIST","ALL_APPOINTMENT_API","APPOINTMENT_CATEGORIES","PRACTICESTAFF","PROCEDURE_CATEGORY","EMR_TREATMENTNOTES","APPOINTMENT_API","SINGLE_PRACTICE_STAFF_API","getAPI","interpolate","displayMessage","Redirect","moment","CreateAppointment","props","state","redirect","practice_doctors","appointmentCategories","procedure_category","treatmentNotes","practice_staff","appointment","loading","changeRedirect","bind","loadDoctors","loadProcedureCategory","loadTreatmentNotes","loadAppointmentCategories","match","params","appointmentid","loadAppointment","that","setState","successFn","data","errorFn","staff","forEach","usersdata","role","doctor","push","active_practiceId","redirectVar","console","log","procedureOption","drug","label","name","value","id","doctorOption","length","email","treatmentNotesOption","categoryOptions","category","appointmentTime","shedule_at","startTime","Date","format","fields","key","type","initialValue","follow","slot","required","patient_name","patient_id","patient_mobile","notify_via_sms","notify_via_email","options","procedure","notes","formProp","action","method","defaultValues","editformProp","practice","TestFormLayout","create","Component"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAQC,KAAR,QAAoB,cAApB;AAEA,OAAOC,iBAAP,MAA8B,6BAA9B;AACA,SAAQC,MAAR,EAAgBC,IAAhB,EAAsBC,IAAtB,EAA4BC,IAA5B,EAAkCC,GAAlC,QAA4C,MAA5C;AACA,SACIC,cADJ,EAEIC,qBAFJ,EAGIC,WAHJ,EAIIC,YAJJ,EAKIC,gBALJ,EAMIC,WANJ,EAOIC,WAPJ,EAQIC,YARJ,EASIC,YATJ,QAUO,0BAVP;AAWA,SACIC,aADJ,EAEIC,mBAFJ,EAGIC,sBAHJ,EAIIC,aAJJ,EAKIC,kBALJ,EAMIC,kBANJ,EAMwBC,eANxB,EAMyCC,yBANzC,QAOO,qBAPP;AAQA,SAAQC,MAAR,EAAeC,WAAf,EAA4BC,cAA5B,QAAiD,oBAAjD;AACA,SAASC,QAAT,QAAyB,kBAAzB;AACA,OAAOC,MAAP,MAAmB,QAAnB;;IAGMC,iB;;;;;AACJ,6BAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACf,2FAAMA,KAAN;AAEA,UAAKC,KAAL,GAAa;AACXC,MAAAA,QAAQ,EAAC,KADE;AAETC,MAAAA,gBAAgB,EAAE,EAFT;AAGTC,MAAAA,qBAAqB,EAAC,IAHb;AAITC,MAAAA,kBAAkB,EAAC,IAJV;AAKTC,MAAAA,cAAc,EAAC,IALN;AAMTC,MAAAA,cAAc,EAAC,EANN;AAOTC,MAAAA,WAAW,EAAE,IAPJ;AAQTC,MAAAA,OAAO,EAAC;AARC,KAAb;AAYA,UAAKC,cAAL,GAAqB,MAAKA,cAAL,CAAoBC,IAApB,uDAArB;AACA,UAAKC,WAAL,GAAmB,MAAKA,WAAL,CAAiBD,IAAjB,uDAAnB;AACA,UAAKE,qBAAL,GAA6B,MAAKA,qBAAL,CAA2BF,IAA3B,uDAA7B;AACA,UAAKG,kBAAL,GAA0B,MAAKA,kBAAL,CAAwBH,IAAxB,uDAA1B;AAlBe;AAmBlB;;;;wCACkB;AACf,WAAKC,WAAL;AACA,WAAKC,qBAAL;AACA,WAAKC,kBAAL;AACA,WAAKC,yBAAL;;AACA,UAAG,KAAKf,KAAL,CAAWgB,KAAX,CAAiBC,MAAjB,CAAwBC,aAA3B,EAAyC;AACrC,aAAKC,eAAL;AACH;AACJ;;;sCACkB;AACb,UAAIC,IAAI,GAAC,IAAT;AACA,WAAKC,QAAL,CAAc;AACVZ,QAAAA,OAAO,EAAC;AADE,OAAd;;AAGA,UAAIa,SAAS,GAAG,SAAZA,SAAY,CAAUC,IAAV,EAAgB;AAE5BH,QAAAA,IAAI,CAACC,QAAL,CAAc;AACVb,UAAAA,WAAW,EAACe,IADF;AAEVd,UAAAA,OAAO,EAAC;AAFE,SAAd;AAKH,OAPD;;AASA,UAAIe,OAAO,GAAG,SAAVA,OAAU,GAAW;AACrBJ,QAAAA,IAAI,CAACC,QAAL,CAAc;AACVZ,UAAAA,OAAO,EAAC;AADE,SAAd;AAGH,OAJD;;AAKAf,MAAAA,MAAM,CAAEC,WAAW,CAACH,eAAD,EAAiB,CAAC,KAAKQ,KAAL,CAAWgB,KAAX,CAAiBC,MAAjB,CAAwBC,aAAzB,CAAjB,CAAb,EAA0EI,SAA1E,EAAoFE,OAApF,CAAN;AAEH;;;kCACU;AACT,UAAIJ,IAAI,GAAG,IAAX;;AACA,UAAIE,SAAS,GAAG,SAAZA,SAAY,CAASC,IAAT,EAAc;AAC1BA,QAAAA,IAAI,CAACE,KAAL,CAAWC,OAAX,CAAmB,UAASC,SAAT,EAAmB;AAClC,cAAGA,SAAS,CAACC,IAAV,IAAmB3C,YAAtB,EAAmC;AAC/B,gBAAI4C,MAAM,GAACT,IAAI,CAACnB,KAAL,CAAWE,gBAAtB;AACA0B,YAAAA,MAAM,CAACC,IAAP,CAAYH,SAAZ;AACAP,YAAAA,IAAI,CAACC,QAAL,CAAc;AACVlB,cAAAA,gBAAgB,EAAC0B;AADP,aAAd;AAGH,WAND,MAOI;AACA,gBAAIA,OAAM,GAACT,IAAI,CAACnB,KAAL,CAAWM,cAAtB;;AACAsB,YAAAA,OAAM,CAACC,IAAP,CAAYH,SAAZ;;AACAP,YAAAA,IAAI,CAACC,QAAL,CAAc;AACVd,cAAAA,cAAc,EAACsB;AADL,aAAd;AAGH;AACJ,SAfD;AAiBH,OAlBD;;AAmBA,UAAIL,OAAO,GAAG,SAAVA,OAAU,GAAU,CACvB,CADD;;AAEA9B,MAAAA,MAAM,CAACC,WAAW,CAACN,aAAD,EAAe,CAAC,KAAKW,KAAL,CAAW+B,iBAAZ,CAAf,CAAZ,EAA4DT,SAA5D,EAAuEE,OAAvE,CAAN;AAEH;;;4CACwB;AACnB,UAAIJ,IAAI,GAAG,IAAX;;AACA,UAAIE,SAAS,GAAE,SAAXA,SAAW,CAAUC,IAAV,EAAe;AAC1BH,QAAAA,IAAI,CAACC,QAAL,CAAc;AACVhB,UAAAA,kBAAkB,EAACkB;AADT,SAAd;AAIH,OALD;;AAMA,UAAIC,OAAO,GAAG,SAAVA,OAAU,GAAW,CAExB,CAFD;;AAGA9B,MAAAA,MAAM,CAACC,WAAW,CAACL,kBAAD,EAAoB,CAAC,KAAKU,KAAL,CAAW+B,iBAAZ,CAApB,CAAZ,EAAiET,SAAjE,EAA4EE,OAA5E,CAAN;AACH;;;yCACmB;AAChB,UAAIJ,IAAI,GAAG,IAAX;;AACA,UAAIE,SAAS,GAAE,SAAXA,SAAW,CAAUC,IAAV,EAAe;AAC1BH,QAAAA,IAAI,CAACC,QAAL,CAAc;AACVf,UAAAA,cAAc,EAACiB;AADL,SAAd;AAIH,OALD;;AAMA,UAAIC,OAAO,GAAG,SAAVA,OAAU,GAAW,CAExB,CAFD;;AAGA9B,MAAAA,MAAM,CAACC,WAAW,CAACJ,kBAAD,EAAoB,CAAC,KAAKS,KAAL,CAAW+B,iBAAZ,CAApB,CAAZ,EAAiET,SAAjE,EAA4EE,OAA5E,CAAN;AACH;;;gDAE0B;AACvB,UAAIJ,IAAI,GAAG,IAAX;;AACA,UAAIE,SAAS,GAAE,SAAXA,SAAW,CAAUC,IAAV,EAAe;AAC1BH,QAAAA,IAAI,CAACC,QAAL,CAAc;AACVjB,UAAAA,qBAAqB,EAACmB;AADZ,SAAd;AAIH,OALD;;AAMA,UAAIC,OAAO,GAAG,SAAVA,OAAU,GAAW,CAExB,CAFD;;AAGA9B,MAAAA,MAAM,CAACC,WAAW,CAACP,sBAAD,EAAwB,CAAC,KAAKY,KAAL,CAAW+B,iBAAZ,CAAxB,CAAZ,EAAqET,SAArE,EAAgFE,OAAhF,CAAN;AACH;;;qCAEa;AACd,UAAIQ,WAAW,GAAC,KAAK/B,KAAL,CAAWC,QAA3B;AACE,WAAKmB,QAAL,CAAc;AACZnB,QAAAA,QAAQ,EAAG,CAAC8B;AADA,OAAd;AAGH;;;6BACO;AAAA;;AACJC,MAAAA,OAAO,CAACC,GAAR,CAAY,KAAKjC,KAAL,CAAWE,gBAAvB;AAEA,UAAMgC,eAAe,GAAC,EAAtB;;AACA,UAAG,KAAKlC,KAAL,CAAWI,kBAAd,EAAiC;AAC7B,aAAKJ,KAAL,CAAWI,kBAAX,CAA8BqB,OAA9B,CAAsC,UAASU,IAAT,EAAc;AAChDD,UAAAA,eAAe,CAACL,IAAhB,CAAqB;AAACO,YAAAA,KAAK,EAAED,IAAI,CAACE,IAAb;AAAoBC,YAAAA,KAAK,EAACH,IAAI,CAACI;AAA/B,WAArB;AACH,SAFD;AAGH;;AACD,UAAMC,YAAY,GAAC,EAAnB;;AACA,UAAG,KAAKxC,KAAL,CAAWE,gBAAX,CAA4BuC,MAA/B,EAA+C;AAC3C,aAAKzC,KAAL,CAAWE,gBAAX,CAA4BuB,OAA5B,CAAoC,UAASU,IAAT,EAAc;AAC9CK,UAAAA,YAAY,CAACX,IAAb,CAAkB;AAACO,YAAAA,KAAK,EAAED,IAAI,CAACE,IAAL,GAAU,GAAV,GAAcF,IAAI,CAACO,KAAnB,GAAyB,GAAjC;AAAuCJ,YAAAA,KAAK,EAACH,IAAI,CAACI;AAAlD,WAAlB;AACH,SAFD;AAGH;;AACD,UAAMI,oBAAoB,GAAC,EAA3B;;AACA,UAAG,KAAK3C,KAAL,CAAWK,cAAd,EAA6B;AACzB,aAAKL,KAAL,CAAWK,cAAX,CAA0BoB,OAA1B,CAAkC,UAASU,IAAT,EAAc;AAC5CQ,UAAAA,oBAAoB,CAACd,IAArB,CAA0B;AAACO,YAAAA,KAAK,EAAED,IAAI,CAACE,IAAL,GAAU,GAAV,GAAcF,IAAI,CAACO,KAAnB,GAAyB,GAAjC;AAAuCJ,YAAAA,KAAK,EAACH,IAAI,CAACI;AAAlD,WAA1B;AACH,SAFD;AAGH;;AACD,UAAMK,eAAe,GAAE,EAAvB;;AACA,UAAG,KAAK5C,KAAL,CAAWG,qBAAd,EAAoC;AAChC,aAAKH,KAAL,CAAWG,qBAAX,CAAiCsB,OAAjC,CAAyC,UAASoB,QAAT,EAAkB;AACvDD,UAAAA,eAAe,CAACf,IAAhB,CAAqB;AAACO,YAAAA,KAAK,EAACS,QAAQ,CAACR,IAAhB;AAAsBC,YAAAA,KAAK,EAACO,QAAQ,CAACN;AAArC,WAArB;AACH,SAFD;AAGH;;AACD,UAAIO,eAAe,GAAC,KAAK9C,KAAL,CAAWO,WAAX,GAAuB,KAAKP,KAAL,CAAWO,WAAX,CAAuBwC,UAA9C,GAAyD,KAAKhD,KAAL,CAAWiD,SAAxF;;AACA,UAAG,CAACF,eAAJ,EAAoB;AAClBA,QAAAA,eAAe,GAAC,IAAIjD,MAAJ,CAAW,IAAIoD,IAAJ,EAAX,EAAuBC,MAAvB,EAAhB;AACAlB,QAAAA,OAAO,CAACC,GAAR,CAAYa,eAAZ;AACD;;AAED,UAAMK,MAAM,GAAE,CAAE;AACdf,QAAAA,KAAK,EAAE,YADO;AAEdgB,QAAAA,GAAG,EAAE,YAFS;AAGdC,QAAAA,IAAI,EAAE3E,WAHQ;AAId4E,QAAAA,YAAY,EAACR,eAJC;AAKdI,QAAAA,MAAM,EAAC;AALO,OAAF,EAMd;AACEd,QAAAA,KAAK,EAAE,WADT;AAEEgB,QAAAA,GAAG,EAAE,MAFP;AAGEG,QAAAA,MAAM,EAAE,MAHV;AAIED,QAAAA,YAAY,EAAC,KAAKtD,KAAL,CAAWO,WAAX,GAAuB,KAAKP,KAAL,CAAWO,WAAX,CAAuBiD,IAA9C,GAAmD,EAJlE;AAKEH,QAAAA,IAAI,EAAE1E;AALR,OANc,EAYd;AACEyD,QAAAA,KAAK,EAAE,cADT;AAEEgB,QAAAA,GAAG,EAAE,cAFP;AAGEK,QAAAA,QAAQ,EAAE,IAHZ;AAIEH,QAAAA,YAAY,EAAC,KAAKtD,KAAL,CAAWO,WAAX,GAAuB,KAAKP,KAAL,CAAWO,WAAX,CAAuBmD,YAA9C,GAA2D,IAJ1E;AAKEL,QAAAA,IAAI,EAAExE;AALR,OAZc,EAkBd;AACEuD,QAAAA,KAAK,EAAE,YADT;AAEEgB,QAAAA,GAAG,EAAE,YAFP;AAGEK,QAAAA,QAAQ,EAAE,IAHZ;AAIEH,QAAAA,YAAY,EAAC,KAAKtD,KAAL,CAAWO,WAAX,GAAuB,KAAKP,KAAL,CAAWO,WAAX,CAAuBoD,UAA9C,GAAyD,IAJxE;AAKEN,QAAAA,IAAI,EAAExE;AALR,OAlBc,EAwBd;AACEuD,QAAAA,KAAK,EAAE,eADT;AAEEgB,QAAAA,GAAG,EAAE,gBAFP;AAGEK,QAAAA,QAAQ,EAAE,IAHZ;AAIEH,QAAAA,YAAY,EAAC,KAAKtD,KAAL,CAAWO,WAAX,GAAuB,KAAKP,KAAL,CAAWO,WAAX,CAAuBqD,cAA9C,GAA6D,IAJ5E;AAKEP,QAAAA,IAAI,EAAExE;AALR,OAxBc,EA8Bd;AACEuD,QAAAA,KAAK,EAAE,eADT;AAEEgB,QAAAA,GAAG,EAAE,OAFP;AAGEE,QAAAA,YAAY,EAAC,KAAKtD,KAAL,CAAWO,WAAX,GAAuB,KAAKP,KAAL,CAAWO,WAAX,CAAuBmC,KAA9C,GAAoD,IAHnE;AAIEe,QAAAA,QAAQ,EAAE,IAJZ;AAKEJ,QAAAA,IAAI,EAAExE;AALR,OA9Bc,EAoCd;AACEuD,QAAAA,KAAK,EAAE,gBADT;AAEEgB,QAAAA,GAAG,EAAE,gBAFP;AAGEC,QAAAA,IAAI,EAAE5E,qBAHR;AAIE6E,QAAAA,YAAY,EAAC,KAAKtD,KAAL,CAAWO,WAAX,GAAuB,KAAKP,KAAL,CAAWO,WAAX,CAAuBsD,cAA9C,GAA6D,KAJ5E;AAKEN,QAAAA,MAAM,EAAE;AALV,OApCc,EA0Cb;AACCnB,QAAAA,KAAK,EAAE,gBADR;AAECgB,QAAAA,GAAG,EAAE,kBAFN;AAGCC,QAAAA,IAAI,EAAE5E,qBAHP;AAIC6E,QAAAA,YAAY,EAAC,KAAKtD,KAAL,CAAWO,WAAX,GAAuB,KAAKP,KAAL,CAAWO,WAAX,CAAuBuD,gBAA9C,GAA+D,KAJ7E;AAKCP,QAAAA,MAAM,EAAE;AALT,OA1Ca,EAgDb;AACCnB,QAAAA,KAAK,EAAE,QADR;AAECgB,QAAAA,GAAG,EAAE,QAFN;AAGCK,QAAAA,QAAQ,EAAE,IAHX;AAICH,QAAAA,YAAY,EAAC,KAAKtD,KAAL,CAAWO,WAAX,GAAuB,KAAKP,KAAL,CAAWO,WAAX,CAAuBqB,MAA9C,GAAqD,IAJnE;AAKCyB,QAAAA,IAAI,EAAEtE,YALP;AAMCgF,QAAAA,OAAO,EAAEvB;AANV,OAhDa,EAuDd;AACEJ,QAAAA,KAAK,EAAE,UADT;AAEEgB,QAAAA,GAAG,EAAE,UAFP;AAGEK,QAAAA,QAAQ,EAAE,IAHZ;AAIEJ,QAAAA,IAAI,EAAEtE,YAJR;AAKEuE,QAAAA,YAAY,EAAC,KAAKtD,KAAL,CAAWO,WAAX,GAAuB,KAAKP,KAAL,CAAWO,WAAX,CAAuBsC,QAA9C,GAAuD,IALtE;AAMEkB,QAAAA,OAAO,EAAEnB;AANX,OAvDc,EA8Dd;AACER,QAAAA,KAAK,EAAE,oBADT;AAEEgB,QAAAA,GAAG,EAAE,WAFP;AAGEK,QAAAA,QAAQ,EAAE,IAHZ;AAIEJ,QAAAA,IAAI,EAAEtE,YAJR;AAKEuE,QAAAA,YAAY,EAAC,KAAKtD,KAAL,CAAWO,WAAX,GAAuB,KAAKP,KAAL,CAAWO,WAAX,CAAuByD,SAA9C,GAAwD,IALvE;AAMED,QAAAA,OAAO,EAAC7B;AANV,OA9Dc,EAqEd;AACEE,QAAAA,KAAK,EAAE,OADT;AAEEgB,QAAAA,GAAG,EAAE,OAFP;AAGEK,QAAAA,QAAQ,EAAE,IAHZ;AAIEJ,QAAAA,IAAI,EAAEtE,YAJR;AAKEuE,QAAAA,YAAY,EAAC,KAAKtD,KAAL,CAAWO,WAAX,GAAuB,KAAKP,KAAL,CAAWO,WAAX,CAAuB0D,KAA9C,GAAoD,IALnE;AAMEF,QAAAA,OAAO,EAAEpB;AANX,OArEc,CAAd;AA6EF,UAAMuB,QAAQ,GAAC;AACb7C,QAAAA,SAAS,EAAC,mBAASC,IAAT,EAAc;AACtBU,UAAAA,OAAO,CAACC,GAAR,CAAYX,IAAZ;AACA3B,UAAAA,cAAc,CAACf,gBAAD,EAAmB,SAAnB,CAAd;AAED,SALY;AAMb2C,QAAAA,OAAO,EAAC,mBAAU,CAEjB,CARY;AASb4C,QAAAA,MAAM,EAAEjF,mBATK;AAUbkF,QAAAA,MAAM,EAAE;AAVK,OAAf;AAYE,UAAIC,aAAa,GAAG,CAAC;AAAC,eAAM,UAAP;AAAmB,iBAAQ,KAAKtE,KAAL,CAAW+B;AAAtC,OAAD,CAApB;AAEA,UAAIwC,YAAJ;;AACA,UAAI,KAAKtE,KAAL,CAAWO,WAAf,EAA4B;AACxB+D,QAAAA,YAAY,GAAG;AACXjD,UAAAA,SAAS,EAAE,mBAAUC,IAAV,EAAgB;AACvB3B,YAAAA,cAAc,CAACf,gBAAD,EAAmB,SAAnB,CAAd;AACAoD,YAAAA,OAAO,CAACC,GAAR,CAAYX,IAAZ;AACH,WAJU;AAKXC,UAAAA,OAAO,EAAE,mBAAY,CAEpB,CAPU;AAQX4C,UAAAA,MAAM,EAAEzE,WAAW,CAACH,eAAD,EAAkB,CAAC,KAAKS,KAAL,CAAWO,WAAX,CAAuBgC,EAAxB,CAAlB,CARR;AASX6B,UAAAA,MAAM,EAAE;AATG,SAAf;AAWCC,QAAAA,aAAa,GAAG,CAAC;AAAC,iBAAM,UAAP;AAAmB,mBAAQ,KAAKrE,KAAL,CAAWO,WAAX,CAAuBgE;AAAlD,SAAD,CAAhB;AAEJ;;AACH,UAAMC,cAAc,GAAGnG,IAAI,CAACoG,MAAL,GAAcvG,iBAAd,CAAvB;AACE,aAAO,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAK,oBAAC,IAAD;AAAM,QAAA,OAAO,EAAE,KAAK8B,KAAL,CAAWQ,OAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACR,oBAAC,KAAD;AAAO,QAAA,KAAK,MAAZ;AAAa,QAAA,IAAI,EAAC,2CAAlB;AACO,QAAA,MAAM,EAAE;AAAA,iBAAO,MAAI,CAACT,KAAL,CAAWgB,KAAX,CAAiBC,MAAjB,CAAwBC,aAAxB,GAAsC,oBAAC,cAAD;AAAgB,YAAA,aAAa,EAAEoD,aAA/B;AAA8C,YAAA,KAAK,EAAC,kBAApD;AAAuE,YAAA,cAAc,EAAG,MAAI,CAAC5D,cAA7F;AAA6G,YAAA,QAAQ,EAAG6D,YAAxH;AAAsI,YAAA,MAAM,EAAEnB,MAA9I;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAtC,GAA+L,oBAAC,QAAD;AAAU,YAAA,EAAE,EAAE,yBAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAtM;AAAA,SADf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADQ,EAIR,oBAAC,KAAD;AAAO,QAAA,KAAK,MAAZ;AAAa,QAAA,IAAI,EAAC,8BAAlB;AACO,QAAA,MAAM,EAAE;AAAA,iBAAM,oBAAC,cAAD;AAAgB,YAAA,aAAa,EAAEkB,aAA/B;AAA+C,YAAA,cAAc,EAAG,MAAI,CAAC5D,cAArE;AAAqF,YAAA,KAAK,EAAC,iBAA3F;AAA8G,YAAA,QAAQ,EAAGyD,QAAzH;AAAmI,YAAA,MAAM,EAAEf,MAA3I;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAN;AAAA,SADf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAJQ,CAAL,EAOF,KAAKnD,KAAL,CAAWC,QAAX,IAAyB,oBAAC,QAAD;AAAU,QAAA,EAAE,EAAC,yBAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAPvB,CAAP;AASH;;;;EAnR6BjC,KAAK,CAAC0G,S;;AAuRtC,eAAe5E,iBAAf","sourcesContent":["import React from \"react\";\nimport {Route} from \"react-router\";\n\nimport DynamicFieldsForm from \"../common/DynamicFieldsForm\";\nimport {Button, Card, Form, Icon, Row} from \"antd\";\nimport {\n    CHECKBOX_FIELD,\n    SINGLE_CHECKBOX_FIELD,\n    DATE_PICKER,\n    NUMBER_FIELD,\n    SUCCESS_MSG_TYPE,\n    INPUT_FIELD,\n    RADIO_FIELD,\n    SELECT_FIELD,\n    DOCTORS_ROLE\n} from \"../../constants/dataKeys\";\nimport {\n    PATIENTS_LIST,\n    ALL_APPOINTMENT_API,\n    APPOINTMENT_CATEGORIES,\n    PRACTICESTAFF,\n    PROCEDURE_CATEGORY,\n    EMR_TREATMENTNOTES, APPOINTMENT_API, SINGLE_PRACTICE_STAFF_API\n} from \"../../constants/api\";\nimport {getAPI,interpolate, displayMessage} from \"../../utils/common\";\nimport { Redirect } from 'react-router-dom'\nimport moment from 'moment';\n\n\nclass CreateAppointment extends React.Component{\n  constructor(props) {\n      super(props);\n\n      this.state = {\n        redirect:false,\n          practice_doctors: [],\n          appointmentCategories:null,\n          procedure_category:null,\n          treatmentNotes:null,\n          practice_staff:[],\n          appointment: null,\n          loading:false,\n\n\n      }\n      this.changeRedirect= this.changeRedirect.bind(this);\n      this.loadDoctors = this.loadDoctors.bind(this);\n      this.loadProcedureCategory = this.loadProcedureCategory.bind(this);\n      this.loadTreatmentNotes = this.loadTreatmentNotes.bind(this);\n  }\n  componentDidMount(){\n      this.loadDoctors();\n      this.loadProcedureCategory();\n      this.loadTreatmentNotes();\n      this.loadAppointmentCategories();\n      if(this.props.match.params.appointmentid){\n          this.loadAppointment();\n      }\n  }\n    loadAppointment(){\n        let that=this;\n        this.setState({\n            loading:true,\n        })\n        let successFn = function (data) {\n\n            that.setState({\n                appointment:data,\n                loading:false,\n            });\n\n        }\n\n        let errorFn = function (){\n            that.setState({\n                loading:false,\n            })\n        }\n        getAPI (interpolate(APPOINTMENT_API,[this.props.match.params.appointmentid])  , successFn,errorFn);\n\n    }\n  loadDoctors(){\n      let that = this;\n      let successFn = function(data){\n          data.staff.forEach(function(usersdata){\n              if(usersdata.role ==  DOCTORS_ROLE){\n                  let doctor=that.state.practice_doctors;\n                  doctor.push(usersdata);\n                  that.setState({\n                      practice_doctors:doctor,\n                  })\n              }\n              else{\n                  let doctor=that.state.practice_staff;\n                  doctor.push(usersdata);\n                  that.setState({\n                      practice_staff:doctor,\n                  })\n              }\n          })\n\n      }\n      let errorFn = function(){\n      };\n      getAPI(interpolate(PRACTICESTAFF,[this.props.active_practiceId]), successFn, errorFn);\n\n  }\n    loadProcedureCategory(){\n        let that = this;\n        let successFn =function (data){\n            that.setState({\n                procedure_category:data\n            })\n\n        }\n        let errorFn = function (){\n\n        }\n        getAPI(interpolate(PROCEDURE_CATEGORY,[this.props.active_practiceId]), successFn, errorFn)\n    }\n    loadTreatmentNotes(){\n        let that = this;\n        let successFn =function (data){\n            that.setState({\n                treatmentNotes:data\n            })\n\n        }\n        let errorFn = function (){\n\n        }\n        getAPI(interpolate(EMR_TREATMENTNOTES,[this.props.active_practiceId]), successFn, errorFn)\n    }\n\n    loadAppointmentCategories(){\n        let that = this;\n        let successFn =function (data){\n            that.setState({\n                appointmentCategories:data\n            })\n\n        }\n        let errorFn = function (){\n\n        }\n        getAPI(interpolate(APPOINTMENT_CATEGORIES,[this.props.active_practiceId]), successFn, errorFn)\n    }\n\n  changeRedirect(){\n    var redirectVar=this.state.redirect;\n      this.setState({\n        redirect:  !redirectVar,\n      })  ;\n  }\n  render(){\n      console.log(this.state.practice_doctors)\n\n      const procedureOption=[]\n      if(this.state.procedure_category){\n          this.state.procedure_category.forEach(function(drug){\n              procedureOption.push({label:(drug.name), value:drug.id} );\n          })\n      }\n      const doctorOption=[]\n      if(this.state.practice_doctors.length)         {\n          this.state.practice_doctors.forEach(function(drug){\n              doctorOption.push({label:(drug.name+\"(\"+drug.email+\")\"), value:drug.id} );\n          })\n      }\n      const treatmentNotesOption=[];\n      if(this.state.treatmentNotes){\n          this.state.treatmentNotes.forEach(function(drug){\n              treatmentNotesOption.push({label:(drug.name+\"(\"+drug.email+\")\"), value:drug.id} );\n          })\n      }\n      const categoryOptions= [];\n      if(this.state.appointmentCategories){\n          this.state.appointmentCategories.forEach(function(category){\n              categoryOptions.push({label:category.name, value:category.id} );\n          })\n      }\n      let appointmentTime=this.state.appointment?this.state.appointment.shedule_at:this.props.startTime;\n      if(!appointmentTime){\n        appointmentTime=new moment(new Date()).format();\n        console.log(appointmentTime);\n      }\n\n      const fields= [ {\n        label: \"shedule_at\",\n        key: \"shedule_at\",\n        type: DATE_PICKER,\n        initialValue:appointmentTime,\n        format:\"YYYY/MM/DD HH:mm\"\n    },{\n        label: \"Time Slot\",\n        key: \"slot\",\n        follow: \"mins\",\n        initialValue:this.state.appointment?this.state.appointment.slot:10,\n        type: NUMBER_FIELD,\n    },{\n        label: \"Patient Name\",\n        key: \"patient_name\",\n        required: true,\n        initialValue:this.state.appointment?this.state.appointment.patient_name:null,\n        type: INPUT_FIELD\n    },{\n        label: \"Patient Id\",\n        key: \"patient_id\",\n        required: true,\n        initialValue:this.state.appointment?this.state.appointment.patient_id:null,\n        type: INPUT_FIELD\n    },{\n        label: \"Mobile Number\",\n        key: \"patient_mobile\",\n        required: true,\n        initialValue:this.state.appointment?this.state.appointment.patient_mobile:null,\n        type: INPUT_FIELD\n    },{\n        label: \"Email Address\",\n        key: \"email\",\n        initialValue:this.state.appointment?this.state.appointment.email:null,\n        required: true,\n        type: INPUT_FIELD\n    },{\n        label: \"Notify Patient\",\n        key: \"notify_via_sms\",\n        type: SINGLE_CHECKBOX_FIELD,\n        initialValue:this.state.appointment?this.state.appointment.notify_via_sms:false,\n        follow: \"Via SMS\"\n    }, {\n        label: \"Notify Patient\",\n        key: \"notify_via_email\",\n        type: SINGLE_CHECKBOX_FIELD,\n        initialValue:this.state.appointment?this.state.appointment.notify_via_email:false,\n        follow: \"Via Email\"\n    }, {\n        label: \"Doctor\",\n        key: \"doctor\",\n        required: true,\n        initialValue:this.state.appointment?this.state.appointment.doctor:null,\n        type: SELECT_FIELD,\n        options: doctorOption\n    },{\n        label: \"Category\",\n        key: \"category\",\n        required: true,\n        type: SELECT_FIELD,\n        initialValue:this.state.appointment?this.state.appointment.category:null,\n        options: categoryOptions\n    },{\n        label: \"Procedures Planned\",\n        key: \"procedure\",\n        required: true,\n        type: SELECT_FIELD,\n        initialValue:this.state.appointment?this.state.appointment.procedure:null,\n        options:procedureOption\n    },{\n        label: \"Notes\",\n        key: \"notes\",\n        required: true,\n        type: SELECT_FIELD,\n        initialValue:this.state.appointment?this.state.appointment.notes:null,\n        options: treatmentNotesOption,\n    },];\n    const formProp={\n      successFn:function(data){\n        console.log(data);\n        displayMessage(SUCCESS_MSG_TYPE, \"success\")\n\n      },\n      errorFn:function(){\n\n      },\n      action: ALL_APPOINTMENT_API,\n      method: \"post\",\n    };\n      let defaultValues = [{\"key\":\"practice\", \"value\":this.props.active_practiceId}];\n\n      let editformProp;\n      if (this.state.appointment) {\n          editformProp = {\n              successFn: function (data) {\n                  displayMessage(SUCCESS_MSG_TYPE, \"success\");\n                  console.log(data);\n              },\n              errorFn: function () {\n\n              },\n              action: interpolate(APPOINTMENT_API, [this.state.appointment.id]),\n              method: \"put\",\n          }\n           defaultValues = [{\"key\":\"practice\", \"value\":this.state.appointment.practice}];\n\n      }\n    const TestFormLayout = Form.create()(DynamicFieldsForm);\n      return <Row><Card loading={this.state.loading} >\n          <Route exact path='/calendar/:appointmentid/edit-appointment'\n                 render={() => (this.props.match.params.appointmentid?<TestFormLayout defaultValues={defaultValues} title=\"Edit Appointment\" changeRedirect= {this.changeRedirect} formProp= {editformProp} fields={fields}/>: <Redirect to={'/patients/appointments/'} />)}/>\n\n          <Route exact path='/calendar/create-appointment'\n                 render={() => <TestFormLayout defaultValues={defaultValues}  changeRedirect= {this.changeRedirect} title=\"ADD Appointmnt \"  formProp ={formProp} fields={fields}/>}/>\n      </Card>\n          {this.state.redirect&&    <Redirect to='/patients/appointments/' />}\n      </Row>\n  }\n\n}\n\nexport default CreateAppointment;\n"]},"metadata":{},"sourceType":"module"}