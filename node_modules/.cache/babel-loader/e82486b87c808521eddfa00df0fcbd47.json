{"ast":null,"code":"import _classCallCheck from \"/home/shivam/WorkSpace/bk-erp-front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/shivam/WorkSpace/bk-erp-front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/shivam/WorkSpace/bk-erp-front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/shivam/WorkSpace/bk-erp-front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/shivam/WorkSpace/bk-erp-front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/home/shivam/WorkSpace/bk-erp-front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/home/shivam/WorkSpace/bk-erp-front/src/app/components/settings/options/practice-detail/EditPracticeDetail.js\";\nimport React from \"react\";\nimport DynamicFieldsForm from \"../../../common/DynamicFieldsForm\";\nimport { Button, Card, Form, Icon, Row } from \"antd\";\nimport { CHECKBOX_FIELD, EMAIL_FIELD, SUCCESS_MSG_TYPE, INPUT_FIELD, RADIO_FIELD, SELECT_FIELD } from \"../../../../constants/dataKeys\";\nimport { PRACTICE } from \"../../../../constants/api\";\nimport { getAPI, displayMessage, interpolate } from \"../../../../utils/common\";\nimport { Redirect } from 'react-router-dom';\n\nvar EditPracticeDetail =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(EditPracticeDetail, _React$Component);\n\n  function EditPracticeDetail(props) {\n    var _this;\n\n    _classCallCheck(this, EditPracticeDetail);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(EditPracticeDetail).call(this, props));\n    _this.state = {\n      practiceDetail: null,\n      countries: null\n    };\n    _this.changeRedirect = _this.changeRedirect.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(EditPracticeDetail, [{\n    key: \"changeRedirect\",\n    value: function changeRedirect() {\n      var redirectVar = this.state.redirect;\n      this.setState({\n        redirect: !redirectVar\n      });\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var that = this;\n\n      var successFn = function successFn(data) {\n        var countries = data.countries;\n        that.setState({\n          countries: countries,\n          practiceDetail: data\n        });\n      };\n\n      var errorFn = function errorFn() {};\n\n      getAPI(interpolate(PRACTICE, [this.props.practiceId]), successFn, errorFn);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var specialisationsOptions = [];\n\n      if (this.state.practiceDetail) {\n        this.state.practiceDetail.specialisations.forEach(function (specialisation) {\n          specialisationsOptions.push({\n            label: specialisation.name,\n            value: specialisation.id\n          });\n        });\n      }\n\n      if (this.state.practiceDetail) {\n        var fields = [{\n          label: \"Practice Name\",\n          key: \"name\",\n          required: true,\n          initialValue: this.state.practiceDetail.name,\n          type: INPUT_FIELD\n        }, {\n          label: \"Practice Tagline\",\n          key: \"tagline\",\n          required: true,\n          initialValue: this.state.practiceDetail.tagline,\n          type: INPUT_FIELD\n        }, {\n          label: \"Practice Specialisation\",\n          key: \"specialisation\",\n          initialValue: this.state.practiceDetail.specialisation,\n          type: INPUT_FIELD // options: specialisationsOptions\n\n        }, {\n          label: \"Practice Street Address\",\n          key: \"address\",\n          initialValue: this.state.practiceDetail.address,\n          type: INPUT_FIELD\n        }, {\n          label: \"Practice locality\",\n          initialValue: this.state.practiceDetail.locality,\n          key: \"locality\",\n          type: INPUT_FIELD\n        }, {\n          label: \"Practice City\",\n          initialValue: this.state.practiceDetail.City,\n          key: \"city\",\n          type: INPUT_FIELD //     options: [{label: \"Hello\", value: \"1\"}, {label: \"New\", value: \"13\"}, {label: \"World\", value: \"14\"}]\n\n        }, {\n          label: \"Practice state\",\n          key: \"state\",\n          initialValue: this.state.practiceDetail.state,\n          type: INPUT_FIELD // options: [{label: \"Hello\", value: \"1\"}, {label: \"New\", value: \"13\"}, {label: \"World\", value: \"14\"}]\n\n        }, {\n          label: \"Practice Country\",\n          key: \"country\",\n          initialValue: this.state.practiceDetail.country,\n          type: INPUT_FIELD\n        }, {\n          label: \"Practice PINCODE\",\n          key: \"pincode\",\n          initialValue: this.state.practiceDetail.pincode,\n          type: INPUT_FIELD\n        }, {\n          label: \"Practice Contact Number\",\n          key: \"contact\",\n          initialValue: this.state.practiceDetail.contact,\n          type: INPUT_FIELD\n        }, {\n          label: \"Practice Email\",\n          key: \"email\",\n          initialValue: this.state.practiceDetail.email,\n          type: EMAIL_FIELD\n        }, {\n          label: \"Practice website\",\n          key: \"website\",\n          initialValue: this.state.practiceDetail.website,\n          type: INPUT_FIELD\n        }, {\n          label: \"GSTIN\",\n          initialValue: this.state.practiceDetail.gstin,\n          key: \"gstin\",\n          type: INPUT_FIELD\n        }];\n        var TestFormLayout = Form.create()(DynamicFieldsForm);\n        var formProp = {\n          successFn: function successFn(data) {\n            displayMessage(SUCCESS_MSG_TYPE, \"success\");\n            console.log(data);\n          },\n          errorFn: function errorFn() {},\n          action: interpolate(PRACTICE, [this.props.practiceId]),\n          method: \"put\"\n        };\n        return React.createElement(Row, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 139\n          },\n          __self: this\n        }, React.createElement(Card, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 140\n          },\n          __self: this\n        }, React.createElement(TestFormLayout, {\n          title: \"Edit Practice Details\",\n          changeRedirect: this.changeRedirect,\n          formProp: formProp,\n          fields: fields,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 141\n          },\n          __self: this\n        }), this.state.redirect && React.createElement(Redirect, {\n          to: \"/settings/clinics\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 143\n          },\n          __self: this\n        })));\n      } else return React.createElement(Card, {\n        loading: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 146\n        },\n        __self: this\n      });\n    }\n  }]);\n\n  return EditPracticeDetail;\n}(React.Component);\n\nexport default EditPracticeDetail;","map":{"version":3,"sources":["/home/shivam/WorkSpace/bk-erp-front/src/app/components/settings/options/practice-detail/EditPracticeDetail.js"],"names":["React","DynamicFieldsForm","Button","Card","Form","Icon","Row","CHECKBOX_FIELD","EMAIL_FIELD","SUCCESS_MSG_TYPE","INPUT_FIELD","RADIO_FIELD","SELECT_FIELD","PRACTICE","getAPI","displayMessage","interpolate","Redirect","EditPracticeDetail","props","state","practiceDetail","countries","changeRedirect","bind","redirectVar","redirect","setState","that","successFn","data","errorFn","practiceId","specialisationsOptions","specialisations","forEach","specialisation","push","label","name","value","id","fields","key","required","initialValue","type","tagline","address","locality","City","country","pincode","contact","email","website","gstin","TestFormLayout","create","formProp","console","log","action","method","Component"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport DynamicFieldsForm from \"../../../common/DynamicFieldsForm\";\nimport {Button, Card, Form, Icon, Row} from \"antd\";\nimport {CHECKBOX_FIELD,EMAIL_FIELD, SUCCESS_MSG_TYPE, INPUT_FIELD, RADIO_FIELD, SELECT_FIELD} from \"../../../../constants/dataKeys\";\nimport {PRACTICE} from \"../../../../constants/api\";\nimport {getAPI, displayMessage, interpolate} from \"../../../../utils/common\";\nimport {Redirect} from 'react-router-dom'\n\n\nclass EditPracticeDetail extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            practiceDetail: null,\n            countries: null,\n        };\n        this.changeRedirect = this.changeRedirect.bind(this);\n\n    }\n\n    changeRedirect() {\n        var redirectVar = this.state.redirect;\n        this.setState({\n            redirect: !redirectVar,\n        });\n    }\n\n    componentDidMount() {\n        var that = this;\n        let successFn = function (data) {\n            let countries = data.countries;\n            that.setState({\n                countries: countries,\n                practiceDetail: data,\n            })\n        };\n        let errorFn = function () {\n        };\n        getAPI(interpolate(PRACTICE, [this.props.practiceId]), successFn, errorFn);\n\n    }\n\n\n    render() {\n        let specialisationsOptions = [];\n        if (this.state.practiceDetail) {\n            this.state.practiceDetail.specialisations.forEach(function (specialisation) {\n                specialisationsOptions.push({label: (specialisation.name), value: specialisation.id});\n            })\n        }\n\n\n        if (this.state.practiceDetail) {\n            const fields = [{\n                label: \"Practice Name\",\n                key: \"name\",\n                required: true,\n                initialValue: this.state.practiceDetail.name,\n                type: INPUT_FIELD\n            }, {\n                label: \"Practice Tagline\",\n                key: \"tagline\",\n                required: true,\n                initialValue: this.state.practiceDetail.tagline,\n                type: INPUT_FIELD\n            }, {\n                label: \"Practice Specialisation\",\n                key: \"specialisation\",\n                initialValue: this.state.practiceDetail.specialisation,\n                type: INPUT_FIELD,\n                // options: specialisationsOptions\n            }, {\n                label: \"Practice Street Address\",\n                key: \"address\",\n                initialValue: this.state.practiceDetail.address,\n                type: INPUT_FIELD\n            }, {\n                label: \"Practice locality\",\n                initialValue: this.state.practiceDetail.locality,\n                key: \"locality\",\n                type: INPUT_FIELD\n            }, {\n                label: \"Practice City\",\n                initialValue: this.state.practiceDetail.City,\n                key: \"city\",\n                type: INPUT_FIELD,\n            //     options: [{label: \"Hello\", value: \"1\"}, {label: \"New\", value: \"13\"}, {label: \"World\", value: \"14\"}]\n            }, {\n                label: \"Practice state\",\n                key: \"state\",\n                initialValue: this.state.practiceDetail.state,\n                type: INPUT_FIELD,\n                // options: [{label: \"Hello\", value: \"1\"}, {label: \"New\", value: \"13\"}, {label: \"World\", value: \"14\"}]\n            }, {\n                label: \"Practice Country\",\n                key: \"country\",\n                initialValue: this.state.practiceDetail.country,\n                type: INPUT_FIELD,\n            }, {\n                label: \"Practice PINCODE\",\n                key: \"pincode\",\n                initialValue: this.state.practiceDetail.pincode,\n                type: INPUT_FIELD\n            }, {\n                label: \"Practice Contact Number\",\n                key: \"contact\",\n                initialValue: this.state.practiceDetail.contact,\n                type: INPUT_FIELD\n            }, {\n                label: \"Practice Email\",\n                key: \"email\",\n                initialValue: this.state.practiceDetail.email,\n                type: EMAIL_FIELD\n            }, {\n                label: \"Practice website\",\n                key: \"website\",\n                initialValue: this.state.practiceDetail.website,\n                type: INPUT_FIELD\n            }, {\n                label: \"GSTIN\",\n                initialValue: this.state.practiceDetail.gstin,\n                key: \"gstin\",\n                type: INPUT_FIELD\n            },];\n            const TestFormLayout = Form.create()(DynamicFieldsForm);\n            const formProp = {\n                successFn: function (data) {\n                    displayMessage(SUCCESS_MSG_TYPE, \"success\");\n                    console.log(data);\n                },\n                errorFn: function () {\n\n                },\n                action: interpolate(PRACTICE, [this.props.practiceId]),\n                method: \"put\",\n            };\n\n\n            return <Row>\n                <Card>\n                    <TestFormLayout title=\"Edit Practice Details\" changeRedirect={this.changeRedirect}\n                                    formProp={formProp} fields={fields}/>\n                    {this.state.redirect && <Redirect to='/settings/clinics'/>}\n                </Card>\n            </Row>\n        } else return <Card loading={true}/>\n    }\n}\n\nexport default EditPracticeDetail;\n"]},"metadata":{},"sourceType":"module"}