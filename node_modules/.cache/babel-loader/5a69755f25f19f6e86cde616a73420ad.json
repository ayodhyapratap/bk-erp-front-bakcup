{"ast":null,"code":"import _classCallCheck from \"/home/shivam/WorkSpace/bk-erp-front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/shivam/WorkSpace/bk-erp-front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/shivam/WorkSpace/bk-erp-front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/shivam/WorkSpace/bk-erp-front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/shivam/WorkSpace/bk-erp-front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/home/shivam/WorkSpace/bk-erp-front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/home/shivam/WorkSpace/bk-erp-front/src/app/components/settings/options/practice-detail/AddPracticeDetails.js\";\nimport React from \"react\";\nimport DynamicFieldsForm from \"../../../common/DynamicFieldsForm\";\nimport { Button, Card, Form, Icon, Row } from \"antd\";\nimport { CHECKBOX_FIELD, SUCCESS_MSG_TYPE, INPUT_FIELD, EMAIL_FIELD, RADIO_FIELD, SELECT_FIELD, COUNTRY_FIELD, STATE_FIELD, CITY_FIELD } from \"../../../../constants/dataKeys\";\nimport { ALL_PRACTICE, EXTRA_DATA } from \"../../../../constants/api\";\nimport { getAPI, displayMessage } from \"../../../../utils/common\";\nimport { Redirect } from 'react-router-dom';\n\nvar AddPracticeDetails =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(AddPracticeDetails, _React$Component);\n\n  function AddPracticeDetails(props) {\n    var _this;\n\n    _classCallCheck(this, AddPracticeDetails);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(AddPracticeDetails).call(this, props));\n    _this.state = {\n      redirect: false,\n      specialisations: null,\n      countries: null\n    };\n    _this.changeRedirect = _this.changeRedirect.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(AddPracticeDetails, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var that = this;\n\n      var successFn = function successFn(data) {\n        var specialisations = {};\n        data.specialisation.forEach(function (speciality) {\n          specialisations[speciality.id] = speciality;\n        });\n        console.log(specialisations);\n        that.setState({\n          specialisations: data.specialisation,\n          countries: data.country\n        });\n      };\n\n      var errorFn = function errorFn() {};\n\n      getAPI(EXTRA_DATA, successFn, errorFn);\n    }\n  }, {\n    key: \"changeRedirect\",\n    value: function changeRedirect() {\n      var redirectVar = this.state.redirect;\n      this.setState({\n        redirect: !redirectVar\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var specialisationsOptions = [];\n\n      if (this.state.specialisations) {\n        this.state.specialisations.forEach(function (specialisation) {\n          specialisationsOptions.push({\n            label: specialisation.name,\n            value: specialisation.id\n          });\n        });\n      }\n\n      var fields = [{\n        label: \"Practice Name\",\n        key: \"name\",\n        required: true,\n        type: INPUT_FIELD\n      }, {\n        label: \"Practice Tagline\",\n        key: \"tagline\",\n        required: true,\n        type: INPUT_FIELD\n      }, {\n        label: \"Practice Specialisation\",\n        key: \"specialisation\",\n        type: INPUT_FIELD // options: specialisationsOptions,\n\n      }, {\n        label: \"Practice Street Address\",\n        key: \"address\",\n        type: INPUT_FIELD\n      }, {\n        label: \"Practice Locality\",\n        key: \"locality\",\n        type: INPUT_FIELD\n      }, {\n        label: \"Practice Country\",\n        key: \"country\",\n        type: INPUT_FIELD\n      }, {\n        label: \"Practice State\",\n        key: \"state\",\n        type: INPUT_FIELD\n      }, {\n        label: \"Practice City\",\n        key: \"city\",\n        type: INPUT_FIELD\n      }, {\n        label: \"Practice PINCODE\",\n        key: \"pincode\",\n        type: INPUT_FIELD\n      }, {\n        label: \"Practice Contact Number\",\n        key: \"contact\",\n        type: INPUT_FIELD\n      }, {\n        label: \"Practice Email\",\n        key: \"email\",\n        type: EMAIL_FIELD\n      }, {\n        label: \"Practice Website\",\n        key: \"website\",\n        type: INPUT_FIELD\n      }, //     {\n      //     label: \"Timezone\",\n      //     key: \"timezone\",\n      //     type: SELECT_FIELD,\n      //     options: [{label: \"GMT +05:30\", value: 12}],\n      //     initialValue:12\n      // },\n      {\n        label: \"GSTIN\",\n        key: \"gstin\",\n        type: INPUT_FIELD\n      }];\n      var formProp = {\n        successFn: function successFn(data) {\n          displayMessage(SUCCESS_MSG_TYPE, \"success\");\n          console.log(data);\n        },\n        errorFn: function errorFn() {},\n        action: ALL_PRACTICE,\n        method: \"post\"\n      };\n      var TestFormLayout = Form.create()(DynamicFieldsForm);\n      return React.createElement(Row, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 143\n        },\n        __self: this\n      }, React.createElement(Card, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 144\n        },\n        __self: this\n      }, React.createElement(TestFormLayout, {\n        title: \"Practice Details\",\n        changeRedirect: this.changeRedirect,\n        formProp: formProp,\n        fields: fields,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 145\n        },\n        __self: this\n      })), this.state.redirect && React.createElement(Redirect, {\n        to: \"/settings/clinics\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 148\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return AddPracticeDetails;\n}(React.Component);\n\nexport default AddPracticeDetails;","map":{"version":3,"sources":["/home/shivam/WorkSpace/bk-erp-front/src/app/components/settings/options/practice-detail/AddPracticeDetails.js"],"names":["React","DynamicFieldsForm","Button","Card","Form","Icon","Row","CHECKBOX_FIELD","SUCCESS_MSG_TYPE","INPUT_FIELD","EMAIL_FIELD","RADIO_FIELD","SELECT_FIELD","COUNTRY_FIELD","STATE_FIELD","CITY_FIELD","ALL_PRACTICE","EXTRA_DATA","getAPI","displayMessage","Redirect","AddPracticeDetails","props","state","redirect","specialisations","countries","changeRedirect","bind","that","successFn","data","specialisation","forEach","speciality","id","console","log","setState","country","errorFn","redirectVar","specialisationsOptions","push","label","name","value","fields","key","required","type","formProp","action","method","TestFormLayout","create","Component"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport DynamicFieldsForm from \"../../../common/DynamicFieldsForm\";\nimport {Button, Card, Form, Icon, Row} from \"antd\";\nimport {\n    CHECKBOX_FIELD,\n    SUCCESS_MSG_TYPE,\n    INPUT_FIELD,\n    EMAIL_FIELD,\n    RADIO_FIELD,\n    SELECT_FIELD,\n    COUNTRY_FIELD, STATE_FIELD, CITY_FIELD\n} from \"../../../../constants/dataKeys\";\nimport {ALL_PRACTICE, EXTRA_DATA} from \"../../../../constants/api\";\nimport {getAPI, displayMessage} from \"../../../../utils/common\";\nimport {Redirect} from 'react-router-dom'\n\n\nclass AddPracticeDetails extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            redirect: false,\n            specialisations: null,\n            countries: null,\n        }\n        this.changeRedirect = this.changeRedirect.bind(this);\n    }\n\n    componentDidMount() {\n        var that = this;\n        let successFn = function (data) {\n            let specialisations = {};\n            data.specialisation.forEach(function (speciality) {\n                specialisations[speciality.id] = speciality\n            });\n            console.log(specialisations);\n\n            that.setState({\n                specialisations: data.specialisation,\n                countries: data.country,\n            })\n        };\n        let errorFn = function () {\n        };\n        getAPI(EXTRA_DATA, successFn, errorFn);\n    }\n\n    changeRedirect() {\n        var redirectVar = this.state.redirect;\n        this.setState({\n            redirect: !redirectVar,\n        });\n    }\n\n    render() {\n\n        let specialisationsOptions = []\n        if (this.state.specialisations) {\n            this.state.specialisations.forEach(function (specialisation) {\n                specialisationsOptions.push({label: (specialisation.name), value: specialisation.id});\n            })\n        }\n        const fields = [{\n            label: \"Practice Name\",\n            key: \"name\",\n            required: true,\n            type: INPUT_FIELD\n        }, {\n            label: \"Practice Tagline\",\n            key: \"tagline\",\n            required: true,\n            type: INPUT_FIELD\n        }, {\n            label: \"Practice Specialisation\",\n            key: \"specialisation\",\n            type: INPUT_FIELD,\n            // options: specialisationsOptions,\n        }, {\n            label: \"Practice Street Address\",\n            key: \"address\",\n            type: INPUT_FIELD\n        }, {\n            label: \"Practice Locality\",\n            key: \"locality\",\n            type: INPUT_FIELD\n        }, {\n            label: \"Practice Country\",\n            key: \"country\",\n            type: INPUT_FIELD,\n        }, {\n            label: \"Practice State\",\n            key: \"state\",\n            type: INPUT_FIELD,\n        }, {\n            label: \"Practice City\",\n            key: \"city\",\n            type: INPUT_FIELD,\n        }, {\n            label: \"Practice PINCODE\",\n            key: \"pincode\",\n            type: INPUT_FIELD\n        }, {\n            label: \"Practice Contact Number\",\n            key: \"contact\",\n            type: INPUT_FIELD\n        }, {\n            label: \"Practice Email\",\n            key: \"email\",\n            type: EMAIL_FIELD\n        }, {\n            label: \"Practice Website\",\n            key: \"website\",\n            type: INPUT_FIELD\n        },\n        //     {\n        //     label: \"Timezone\",\n        //     key: \"timezone\",\n        //     type: SELECT_FIELD,\n        //     options: [{label: \"GMT +05:30\", value: 12}],\n        //     initialValue:12\n        // },\n            {\n            label: \"GSTIN\",\n            key: \"gstin\",\n            type: INPUT_FIELD\n        },];\n\n        const formProp = {\n            successFn: function (data) {\n                displayMessage(SUCCESS_MSG_TYPE, \"success\")\n\n                console.log(data);\n            },\n            errorFn: function () {\n\n            },\n            action: ALL_PRACTICE,\n            method: \"post\",\n        }\n\n        const TestFormLayout = Form.create()(DynamicFieldsForm);\n        return <Row>\n            <Card>\n                <TestFormLayout title=\"Practice Details\" changeRedirect={this.changeRedirect} formProp={formProp}\n                                fields={fields}/>\n            </Card>\n            {this.state.redirect && <Redirect to='/settings/clinics'/>}\n        </Row>\n    }\n}\n\nexport default AddPracticeDetails;\n"]},"metadata":{},"sourceType":"module"}