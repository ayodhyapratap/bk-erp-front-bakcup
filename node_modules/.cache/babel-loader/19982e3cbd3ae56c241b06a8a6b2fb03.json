{"ast":null,"code":"import _classCallCheck from \"/home/shivam/WorkSpace/bk-erp-front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/shivam/WorkSpace/bk-erp-front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/shivam/WorkSpace/bk-erp-front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/shivam/WorkSpace/bk-erp-front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/shivam/WorkSpace/bk-erp-front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/home/shivam/WorkSpace/bk-erp-front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/home/shivam/WorkSpace/bk-erp-front/src/app/components/patients/treatmentPlans/PatientTreatmentPlans.js\";\nimport React from \"react\";\nimport { Avatar, Input, Checkbox, Divider, Table, Col, Button, Form, Row, Card, Icon, Skeleton } from \"antd\";\nimport { Link } from \"react-router-dom\";\nimport { TREATMENTPLANS_API, PROCEDURE_CATEGORY, PATIENT_PROFILE } from \"../../../constants/api\";\nimport { getAPI, interpolate, displayMessage } from \"../../../utils/common\";\nimport moment from \"moment\";\nimport AddorEditPatientTreatmentPlans from './AddorEditPatientTreatmentPlans';\nimport { Redirect, Switch, Route } from \"react-router\";\n\nvar PatientTreatmentPlans =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(PatientTreatmentPlans, _React$Component);\n\n  function PatientTreatmentPlans(props) {\n    var _this;\n\n    _classCallCheck(this, PatientTreatmentPlans);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(PatientTreatmentPlans).call(this, props));\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(PatientTreatmentPlans).call(this, props));\n    _this.state = {\n      currentPatient: _this.props.currentPatient,\n      active_practiceId: _this.props.active_practiceId,\n      treatmentPlans: [],\n      procedure_category: null,\n      incompletedTreatmentPlans: []\n    };\n    _this.loadtreatmentPlanss = _this.loadtreatmentPlanss.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.loadProcedureCategory = _this.loadProcedureCategory.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.editTreatmentPlanData = _this.editTreatmentPlanData.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(PatientTreatmentPlans, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      if (this.props.match.params.id) {\n        this.loadtreatmentPlanss();\n        this.loadProcedureCategory();\n      }\n    }\n  }, {\n    key: \"loadtreatmentPlanss\",\n    value: function loadtreatmentPlanss() {\n      var incompleted = [];\n      var that = this;\n\n      var successFn = function successFn(data) {\n        that.setState({\n          treatmentPlans: data\n        });\n        data.forEach(function (treatmentplan) {\n          if (!treatmentplan.is_completed) {\n            incompleted.push(treatmentplan);\n          }\n        });\n        that.setState({\n          incompletedTreatmentPlans: incompleted\n        });\n      };\n\n      var errorFn = function errorFn() {};\n\n      getAPI(interpolate(TREATMENTPLANS_API, [this.props.match.params.id]), successFn, errorFn);\n    }\n  }, {\n    key: \"loadProcedureCategory\",\n    value: function loadProcedureCategory() {\n      var that = this;\n\n      var successFn = function successFn(data) {\n        that.setState({\n          procedure_category: data\n        });\n      };\n\n      var errorFn = function errorFn() {};\n\n      getAPI(interpolate(PROCEDURE_CATEGORY, [this.props.active_practiceId]), successFn, errorFn);\n    }\n  }, {\n    key: \"editTreatmentPlanData\",\n    value: function editTreatmentPlanData(record) {\n      this.setState({\n        editTreatmentPlan: record\n      });\n      var id = this.props.match.params.id;\n      this.props.history.push(\"/patient/\" + id + \"/emr/plans/edit\");\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      console.log(this.state.incompletedTreatmentPlans);\n      var procedures = {};\n\n      if (this.state.procedure_category) {\n        this.state.procedure_category.forEach(function (procedure) {\n          procedures[procedure.id] = procedure.name;\n        });\n      }\n\n      console.log(this.state.procedure_category);\n      var columns = [{\n        title: 'Time',\n        dataIndex: 'created_at',\n        key: 'name',\n        render: function render(created_at) {\n          return React.createElement(\"span\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 94\n            },\n            __self: this\n          }, moment(created_at).format('LLL'));\n        }\n      }, {\n        title: 'procedure',\n        key: 'procedure',\n        render: function render(text, record) {\n          return React.createElement(\"span\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 99\n            },\n            __self: this\n          }, \" \", procedures[record.procedure]);\n        }\n      }, {\n        title: 'Quantity',\n        dataIndex: 'qunatity',\n        key: 'quantity'\n      }, {\n        title: 'Cost per  Unit',\n        dataIndex: 'cost',\n        key: 'cost'\n      }, {\n        title: 'Active',\n        key: 'is_active',\n        render: function render(text, record) {\n          return React.createElement(Checkbox, {\n            disabled: true,\n            checked: record.is_active,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 113\n            },\n            __self: this\n          });\n        }\n      }, {\n        title: 'Completed',\n        key: 'is_completed',\n        render: function render(text, record) {\n          return React.createElement(Checkbox, {\n            disabled: true,\n            checked: record.is_completed,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 119\n            },\n            __self: this\n          });\n        }\n      }, {\n        title: 'Action',\n        key: 'action',\n        render: function render(text, record) {\n          return React.createElement(\"span\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 125\n            },\n            __self: this\n          }, React.createElement(\"a\", {\n            onClick: function onClick() {\n              return _this2.editTreatmentPlanData(record);\n            },\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 126\n            },\n            __self: this\n          }, \"Edit\"), React.createElement(Divider, {\n            type: \"vertical\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 128\n            },\n            __self: this\n          }), React.createElement(\"a\", {\n            href: \"javascript:;\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 129\n            },\n            __self: this\n          }, \"Delete\"));\n        }\n      }];\n\n      if (this.props.match.params.id) {\n        return React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 135\n          },\n          __self: this\n        }, React.createElement(Switch, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 135\n          },\n          __self: this\n        }, React.createElement(Route, {\n          exact: true,\n          path: \"/patient/:id/emr/plans/add\",\n          render: function render(route) {\n            return React.createElement(AddorEditPatientTreatmentPlans, Object.assign({}, _this2.state, route, {\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 137\n              },\n              __self: this\n            }));\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 136\n          },\n          __self: this\n        }), React.createElement(Route, {\n          exact: true,\n          path: \"/patient/:id/emr/plans/edit\",\n          render: function render(route) {\n            return React.createElement(AddorEditPatientTreatmentPlans, Object.assign({}, _this2.state, route, {\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 139\n              },\n              __self: this\n            }));\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 138\n          },\n          __self: this\n        }), React.createElement(Card, {\n          title: this.state.currentPatient ? this.state.currentPatient.name + \" treatmentPlans\" : \"treatmentPlanss\",\n          extra: React.createElement(Button.Group, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 140\n            },\n            __self: this\n          }, React.createElement(Link, {\n            to: \"/patient/\" + this.props.match.params.id + \"/emr/plans/add\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 141\n            },\n            __self: this\n          }, React.createElement(Button, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 141\n            },\n            __self: this\n          }, React.createElement(Icon, {\n            type: \"plus\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 141\n            },\n            __self: this\n          }), \"Add\"))),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 140\n          },\n          __self: this\n        }, React.createElement(Table, {\n          columns: columns,\n          dataSource: this.state.incompletedTreatmentPlans,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 144\n          },\n          __self: this\n        }))));\n      } else {\n        return React.createElement(Card, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 152\n          },\n          __self: this\n        }, React.createElement(\"h2\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 153\n          },\n          __self: this\n        }, \" select patient to further continue\"));\n      }\n    }\n  }]);\n\n  return PatientTreatmentPlans;\n}(React.Component);\n\nexport default PatientTreatmentPlans;","map":{"version":3,"sources":["/home/shivam/WorkSpace/bk-erp-front/src/app/components/patients/treatmentPlans/PatientTreatmentPlans.js"],"names":["React","Avatar","Input","Checkbox","Divider","Table","Col","Button","Form","Row","Card","Icon","Skeleton","Link","TREATMENTPLANS_API","PROCEDURE_CATEGORY","PATIENT_PROFILE","getAPI","interpolate","displayMessage","moment","AddorEditPatientTreatmentPlans","Redirect","Switch","Route","PatientTreatmentPlans","props","state","currentPatient","active_practiceId","treatmentPlans","procedure_category","incompletedTreatmentPlans","loadtreatmentPlanss","bind","loadProcedureCategory","editTreatmentPlanData","match","params","id","incompleted","that","successFn","data","setState","forEach","treatmentplan","is_completed","push","errorFn","record","editTreatmentPlan","history","console","log","procedures","procedure","name","columns","title","dataIndex","key","render","created_at","format","text","is_active","route","Component"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport {Avatar, Input, Checkbox, Divider, Table, Col,Button, Form,  Row, Card, Icon, Skeleton} from \"antd\";\nimport {Link} from \"react-router-dom\";\nimport {TREATMENTPLANS_API,PROCEDURE_CATEGORY, PATIENT_PROFILE} from \"../../../constants/api\";\nimport {getAPI,interpolate, displayMessage} from \"../../../utils/common\";\nimport  moment from \"moment\";\nimport AddorEditPatientTreatmentPlans from './AddorEditPatientTreatmentPlans';\nimport {Redirect,Switch, Route} from \"react-router\";\n\n\nclass PatientTreatmentPlans extends React.Component{\n    constructor(props){\n        super(props);\n        super(props);\n        this.state = {\n          currentPatient:this.props.currentPatient,\n          active_practiceId:this.props.active_practiceId,\n          treatmentPlans:[],\n          procedure_category:null,\n          incompletedTreatmentPlans:[],\n        }\n        this.loadtreatmentPlanss =this.loadtreatmentPlanss.bind(this);\n        this.loadProcedureCategory =this.loadProcedureCategory.bind(this);\n        this.editTreatmentPlanData =this.editTreatmentPlanData.bind(this);\n\n    }\n    componentDidMount(){\n      if(this.props.match.params.id){\n      this.loadtreatmentPlanss();\n      this.loadProcedureCategory();\n    }\n\n    }\n    loadtreatmentPlanss(){\n        let incompleted=[];\n      let that = this;\n      let successFn =function (data){\n        that.setState({\n          treatmentPlans:data\n        })\n          data.forEach(function (treatmentplan) {\n              if(!treatmentplan.is_completed){\n                  incompleted.push(treatmentplan)\n              }\n          })\n          that.setState({\n              incompletedTreatmentPlans:incompleted,\n          })\n      }\n      let errorFn = function (){\n\n      }\n      getAPI(interpolate(TREATMENTPLANS_API,[this.props.match.params.id]), successFn, errorFn)\n    }\n    loadProcedureCategory(){\n      let that = this;\n      let successFn =function (data){\n        that.setState({\n          procedure_category:data\n        })\n\n      }\n      let errorFn = function (){\n\n      }\n      getAPI(interpolate(PROCEDURE_CATEGORY,[this.props.active_practiceId]), successFn, errorFn)\n    }\n\n\n    editTreatmentPlanData(record){\n        this.setState({\n            editTreatmentPlan:record,\n        });\n        let id=this.props.match.params.id\n        this.props.history.push(\"/patient/\"+id+\"/emr/plans/edit\")\n\n    }\n\n    render(){\n      console.log(this.state.incompletedTreatmentPlans);\n      const procedures={}\n      if(this.state.procedure_category){\n\n        this.state.procedure_category.forEach(function(procedure){\n          procedures[procedure.id]=(procedure.name)\n        })\n      }\n      console.log(this.state.procedure_category);\n\n      const columns = [{\n            title: 'Time',\n            dataIndex: 'created_at',\n            key: 'name',\n            render: created_at =><span>{moment(created_at).format('LLL')}</span>,\n          }, {\n            title: 'procedure',\n            key: 'procedure',\n            render:(text, record) => (\n              <span> {procedures[record.procedure]}</span>\n            )\n          }, {\n            title: 'Quantity',\n            dataIndex: 'qunatity',\n            key: 'quantity',\n          }, {\n            title: 'Cost per  Unit',\n            dataIndex: 'cost',\n            key: 'cost',\n          }, {\n            title: 'Active',\n            key: 'is_active',\n            render:(text, record) => (\n              <Checkbox disabled checked={record.is_active}/>\n            )\n          },  {\n            title: 'Completed',\n            key: 'is_completed',\n            render:(text, record) => (\n              <Checkbox  disabled checked={record.is_completed}/>\n            )\n          }, {\n            title: 'Action',\n            key: 'action',\n            render: (text, record) => (\n              <span>\n               <a onClick={()=>this.editTreatmentPlanData(record)}>Edit</a>\n\n                <Divider type=\"vertical\" />\n                <a href=\"javascript:;\">Delete</a>\n              </span>\n            ),\n          }];\n\n      if(this.props.match.params.id){\n      return <div><Switch>\n      <Route exact path='/patient/:id/emr/plans/add'\n             render={(route) => <AddorEditPatientTreatmentPlans{...this.state} {...route}/>}/>\n      <Route exact path='/patient/:id/emr/plans/edit'\n             render={(route) => <AddorEditPatientTreatmentPlans {...this.state} {...route}/>}/>\n      <Card title={ this.state.currentPatient?this.state.currentPatient.name + \" treatmentPlans\":\"treatmentPlanss\"}  extra={<Button.Group>\n          <Link to={\"/patient/\"+this.props.match.params.id+\"/emr/plans/add\"}><Button><Icon type=\"plus\"/>Add</Button></Link>\n      </Button.Group>}>\n\n      <Table columns={columns}  dataSource={this.state.incompletedTreatmentPlans} />\n\n      </Card>\n      </Switch>\n\n      </div>\n    }\n    else{\n      return <Card>\n              <h2> select patient to further continue</h2>\n              </Card>\n    }\n\n    }\n}\nexport default PatientTreatmentPlans;\n"]},"metadata":{},"sourceType":"module"}