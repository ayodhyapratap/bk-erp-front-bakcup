{"ast":null,"code":"import _classCallCheck from \"/home/shivam/WorkSpace/bk-erp-front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/shivam/WorkSpace/bk-erp-front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/shivam/WorkSpace/bk-erp-front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/shivam/WorkSpace/bk-erp-front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/shivam/WorkSpace/bk-erp-front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/home/shivam/WorkSpace/bk-erp-front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/home/shivam/WorkSpace/bk-erp-front/src/app/components/settings/options/practice-staff/AddStaffDoctor.js\";\nimport React from \"react\";\nimport DynamicFieldsForm from \"../../../common/DynamicFieldsForm\";\nimport { Button, Card, Form, Icon, Row } from \"antd\";\nimport { CHECKBOX_FIELD, SUCCESS_MSG_TYPE, INPUT_FIELD, RADIO_FIELD, SELECT_FIELD, SINGLE_CHECKBOX_FIELD, COLOR_PICKER, EMAIL_FIELD } from \"../../../../constants/dataKeys\";\nimport { ALL_PRACTICE_STAFF, DRUG_CATALOG, SINGLE_PRACTICE_STAFF_API, STAFF_ROLES } from \"../../../../constants/api\";\nimport { getAPI, displayMessage, interpolate } from \"../../../../utils/common\";\nimport { Redirect } from 'react-router-dom';\nimport { Route } from \"react-router\";\n\nvar AddStaffDoctor =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(AddStaffDoctor, _React$Component);\n\n  function AddStaffDoctor(props) {\n    var _this;\n\n    _classCallCheck(this, AddStaffDoctor);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(AddStaffDoctor).call(this, props));\n    _this.state = {\n      redirect: false,\n      editStaff: null,\n      roles: []\n    };\n    _this.changeRedirect = _this.changeRedirect.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.loadEditPracticeStaff = _this.loadEditPracticeStaff.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n\n    if (_this.props.match.params.doctorid) {\n      _this.loadEditPracticeStaff();\n    }\n\n    _this.staffRoles();\n\n    return _this;\n  }\n\n  _createClass(AddStaffDoctor, [{\n    key: \"staffRoles\",\n    value: function staffRoles() {\n      var that = this;\n\n      var successFn = function successFn(data) {\n        that.setState({\n          roles: data\n        });\n      };\n\n      var errorFn = function errorFn() {};\n\n      getAPI(STAFF_ROLES, successFn, errorFn);\n    }\n  }, {\n    key: \"loadEditPracticeStaff\",\n    value: function loadEditPracticeStaff() {\n      var doctorid = this.props.match.params.doctorid;\n      console.log(doctorid);\n      var that = this;\n\n      var successFn = function successFn(data) {\n        that.setState({\n          editStaff: data\n        });\n      };\n\n      var errorFn = function errorFn() {};\n\n      getAPI(interpolate(SINGLE_PRACTICE_STAFF_API, [doctorid]), successFn, errorFn);\n    }\n  }, {\n    key: \"changeRedirect\",\n    value: function changeRedirect() {\n      var redirectVar = this.state.redirect;\n      this.setState({\n        redirect: !redirectVar\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var fields = [{\n        label: \"Doctor/Staff Name\",\n        key: \"name\",\n        required: true,\n        initialValue: this.state.editStaff ? this.state.editStaff.name : null,\n        type: INPUT_FIELD\n      }, {\n        label: \"Mobile Number\",\n        key: \"mobile\",\n        required: true,\n        initialValue: this.state.editStaff ? this.state.editStaff.mobile : null,\n        type: INPUT_FIELD\n      }, {\n        label: \"Email Id\",\n        key: \"email\",\n        required: true,\n        disabled: this.state.editStaff ? true : false,\n        initialValue: this.state.editStaff ? this.state.editStaff.email : null,\n        type: EMAIL_FIELD\n      }, {\n        label: \"Registration Number\",\n        key: \"registration_number\",\n        initialValue: this.state.editStaff ? this.state.editStaff.registration_number : null,\n        type: INPUT_FIELD\n      }, {\n        label: \"Role\",\n        key: \"role\",\n        required: true,\n        initialValue: this.state.editStaff ? this.state.editStaff.role : null,\n        type: SELECT_FIELD,\n        options: this.state.roles.map(function (role) {\n          return {\n            label: role.name,\n            value: [role.id]\n          };\n        })\n      }, {\n        label: \"Calendar Colour\",\n        key: \"calender_colour\",\n        initialValue: this.state.editStaff ? this.state.editStaff.calender_colour : null,\n        type: COLOR_PICKER\n      }, {\n        label: \"Schedule SMS\",\n        key: \"schedule_sms\",\n        initialValue: this.state.editStaff ? this.state.editStaff.schedule_sms : false,\n        type: SINGLE_CHECKBOX_FIELD\n      }, {\n        label: \"Confirmation SMS\",\n        key: \"confirmation_sms\",\n        initialValue: this.state.editStaff ? this.state.editStaff.confirmation_sms : false,\n        type: SINGLE_CHECKBOX_FIELD\n      }, {\n        label: \"Confirmation Email\",\n        key: \"confirmation_email\",\n        initialValue: this.state.editStaff ? this.state.editStaff.confirmation_email : false,\n        type: SINGLE_CHECKBOX_FIELD\n      }, {\n        label: \"Online Appointment SMS\",\n        key: \"online_appointment_sms\",\n        initialValue: this.state.editStaff ? this.state.editStaff.online_appointment_sms : false,\n        type: SINGLE_CHECKBOX_FIELD\n      }];\n      var formProp = {\n        successFn: function successFn(data) {\n          displayMessage(SUCCESS_MSG_TYPE, \"success\");\n          console.log(data);\n        },\n        errorFn: function errorFn() {},\n        action: ALL_PRACTICE_STAFF,\n        method: \"post\"\n      };\n      var editformProp;\n\n      if (this.state.editStaff) {\n        editformProp = {\n          successFn: function successFn(data) {\n            displayMessage(SUCCESS_MSG_TYPE, \"success\");\n            console.log(data);\n          },\n          errorFn: function errorFn() {},\n          action: interpolate(SINGLE_PRACTICE_STAFF_API, [this.props.match.params.doctorid]),\n          method: \"put\"\n        };\n      }\n\n      var defaultValues = [{\n        \"key\": \"practice\",\n        \"value\": this.props.active_practiceId\n      }];\n      var TestFormLayout = Form.create()(DynamicFieldsForm);\n      return React.createElement(Row, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 159\n        },\n        __self: this\n      }, React.createElement(Card, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 160\n        },\n        __self: this\n      }, React.createElement(Route, {\n        exact: true,\n        path: \"/settings/clinics-staff/:doctorid/edit\",\n        render: function render() {\n          return _this2.props.match.params.doctorid ? React.createElement(TestFormLayout, {\n            defaultValues: defaultValues,\n            title: \"Edit Doctor/Staff\",\n            changeRedirect: _this2.changeRedirect,\n            formProp: editformProp,\n            fields: fields,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 163\n            },\n            __self: this\n          }) : React.createElement(Redirect, {\n            to: '/settings/clinics-staff',\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 165\n            },\n            __self: this\n          });\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 161\n        },\n        __self: this\n      }), React.createElement(Route, {\n        exact: true,\n        path: \"/settings/clinics-staff/adddoctor\",\n        render: function render() {\n          return React.createElement(TestFormLayout, {\n            defaultValues: defaultValues,\n            changeRedirect: _this2.changeRedirect,\n            title: \"ADD DOCTOR/Staff \",\n            formProp: formProp,\n            fields: fields,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 168\n            },\n            __self: this\n          });\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 167\n        },\n        __self: this\n      })), this.state.redirect && React.createElement(Redirect, {\n        to: \"/settings/clinics-staff\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 171\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return AddStaffDoctor;\n}(React.Component);\n\nexport default AddStaffDoctor;","map":{"version":3,"sources":["/home/shivam/WorkSpace/bk-erp-front/src/app/components/settings/options/practice-staff/AddStaffDoctor.js"],"names":["React","DynamicFieldsForm","Button","Card","Form","Icon","Row","CHECKBOX_FIELD","SUCCESS_MSG_TYPE","INPUT_FIELD","RADIO_FIELD","SELECT_FIELD","SINGLE_CHECKBOX_FIELD","COLOR_PICKER","EMAIL_FIELD","ALL_PRACTICE_STAFF","DRUG_CATALOG","SINGLE_PRACTICE_STAFF_API","STAFF_ROLES","getAPI","displayMessage","interpolate","Redirect","Route","AddStaffDoctor","props","state","redirect","editStaff","roles","changeRedirect","bind","loadEditPracticeStaff","match","params","doctorid","staffRoles","that","successFn","data","setState","errorFn","console","log","redirectVar","fields","label","key","required","initialValue","name","type","mobile","disabled","email","registration_number","role","options","map","value","id","calender_colour","schedule_sms","confirmation_sms","confirmation_email","online_appointment_sms","formProp","action","method","editformProp","defaultValues","active_practiceId","TestFormLayout","create","Component"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport DynamicFieldsForm from \"../../../common/DynamicFieldsForm\";\nimport {Button, Card, Form, Icon, Row} from \"antd\";\nimport {\n    CHECKBOX_FIELD,\n    SUCCESS_MSG_TYPE,\n    INPUT_FIELD,\n    RADIO_FIELD,\n    SELECT_FIELD,\n    SINGLE_CHECKBOX_FIELD,\n    COLOR_PICKER,\n    EMAIL_FIELD\n} from \"../../../../constants/dataKeys\";\nimport {ALL_PRACTICE_STAFF, DRUG_CATALOG, SINGLE_PRACTICE_STAFF_API, STAFF_ROLES} from \"../../../../constants/api\";\nimport {getAPI, displayMessage, interpolate} from \"../../../../utils/common\";\nimport {Redirect} from 'react-router-dom'\nimport {Route} from \"react-router\";\n\nclass AddStaffDoctor extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            redirect: false,\n            editStaff: null,\n            roles: []\n\n        }\n        this.changeRedirect = this.changeRedirect.bind(this);\n        this.loadEditPracticeStaff = this.loadEditPracticeStaff.bind(this);\n        if (this.props.match.params.doctorid) {\n            this.loadEditPracticeStaff();\n        }\n        this.staffRoles();\n    }\n\n    staffRoles() {\n        let that = this;\n        let successFn = function (data) {\n            that.setState({\n                roles: data,\n            })\n        }\n        let errorFn = function () {\n        }\n        getAPI(STAFF_ROLES, successFn, errorFn)\n    }\n\n    loadEditPracticeStaff() {\n        let doctorid = this.props.match.params.doctorid;\n        console.log(doctorid)\n        let that = this;\n        let successFn = function (data) {\n            that.setState({\n                editStaff: data,\n            })\n        };\n        let errorFn = function () {\n        }\n        getAPI(interpolate(SINGLE_PRACTICE_STAFF_API, [doctorid]), successFn, errorFn)\n\n    }\n\n    changeRedirect() {\n        var redirectVar = this.state.redirect;\n        this.setState({\n            redirect: !redirectVar,\n        });\n    }\n\n    render() {\n        const fields = [\n            {\n                label: \"Doctor/Staff Name\",\n                key: \"name\",\n                required: true,\n                initialValue: this.state.editStaff ? this.state.editStaff.name : null,\n                type: INPUT_FIELD\n            }, {\n                label: \"Mobile Number\",\n                key: \"mobile\",\n                required: true,\n                initialValue: this.state.editStaff ? this.state.editStaff.mobile : null,\n                type: INPUT_FIELD\n            }, {\n                label: \"Email Id\",\n                key: \"email\",\n                required: true,\n                disabled: this.state.editStaff ? true : false,\n                initialValue: this.state.editStaff ? this.state.editStaff.email : null,\n                type: EMAIL_FIELD\n            }, {\n                label: \"Registration Number\",\n                key: \"registration_number\",\n                initialValue: this.state.editStaff ? this.state.editStaff.registration_number : null,\n                type: INPUT_FIELD\n            }, {\n                label: \"Role\",\n                key: \"role\",\n                required: true,\n                initialValue: this.state.editStaff ? this.state.editStaff.role : null,\n                type: SELECT_FIELD,\n                options: this.state.roles.map(role => ({label: role.name, value: [role.id]}))\n            }, {\n                label: \"Calendar Colour\",\n                key: \"calender_colour\",\n                initialValue: this.state.editStaff ? this.state.editStaff.calender_colour : null,\n                type: COLOR_PICKER,\n\n            }, {\n                label: \"Schedule SMS\",\n                key: \"schedule_sms\",\n                initialValue: this.state.editStaff ? this.state.editStaff.schedule_sms : false,\n                type: SINGLE_CHECKBOX_FIELD,\n            }, {\n                label: \"Confirmation SMS\",\n                key: \"confirmation_sms\",\n                initialValue: this.state.editStaff ? this.state.editStaff.confirmation_sms : false,\n                type: SINGLE_CHECKBOX_FIELD,\n            }, {\n                label: \"Confirmation Email\",\n                key: \"confirmation_email\",\n                initialValue: this.state.editStaff ? this.state.editStaff.confirmation_email : false,\n                type: SINGLE_CHECKBOX_FIELD,\n            }, {\n                label: \"Online Appointment SMS\",\n                key: \"online_appointment_sms\",\n                initialValue: this.state.editStaff ? this.state.editStaff.online_appointment_sms : false,\n                type: SINGLE_CHECKBOX_FIELD,\n            },]\n        const formProp = {\n            successFn: function (data) {\n                displayMessage(SUCCESS_MSG_TYPE, \"success\");\n                console.log(data);\n            },\n            errorFn: function () {\n\n            },\n            action: ALL_PRACTICE_STAFF,\n            method: \"post\",\n        }\n        let editformProp;\n        if (this.state.editStaff) {\n\n            editformProp = {\n                successFn: function (data) {\n                    displayMessage(SUCCESS_MSG_TYPE, \"success\");\n                    console.log(data);\n                },\n                errorFn: function () {\n\n                },\n                action: interpolate(SINGLE_PRACTICE_STAFF_API, [this.props.match.params.doctorid]),\n                method: \"put\",\n            }\n        }\n        const defaultValues = [{\"key\": \"practice\", \"value\": this.props.active_practiceId}]\n\n        const TestFormLayout = Form.create()(DynamicFieldsForm);\n        return <Row>\n            <Card>\n                <Route exact path='/settings/clinics-staff/:doctorid/edit'\n                       render={() => (this.props.match.params.doctorid ?\n                           <TestFormLayout defaultValues={defaultValues} title=\"Edit Doctor/Staff\"\n                                           changeRedirect={this.changeRedirect} formProp={editformProp}\n                                           fields={fields}/> : <Redirect to={'/settings/clinics-staff'}/>)}/>\n\n                <Route exact path='/settings/clinics-staff/adddoctor'\n                       render={() => <TestFormLayout defaultValues={defaultValues} changeRedirect={this.changeRedirect}\n                                                     title=\"ADD DOCTOR/Staff \" formProp={formProp} fields={fields}/>}/>\n            </Card>\n            {this.state.redirect && <Redirect to='/settings/clinics-staff'/>}\n\n        </Row>\n    }\n}\n\nexport default AddStaffDoctor;\n"]},"metadata":{},"sourceType":"module"}