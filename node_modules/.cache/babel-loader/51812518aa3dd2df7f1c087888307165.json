{"ast":null,"code":"import _defineProperty from \"/home/shivam/WorkSpace/bk-erp-front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _classCallCheck from \"/home/shivam/WorkSpace/bk-erp-front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/shivam/WorkSpace/bk-erp-front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/shivam/WorkSpace/bk-erp-front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/shivam/WorkSpace/bk-erp-front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/shivam/WorkSpace/bk-erp-front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/home/shivam/WorkSpace/bk-erp-front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/home/shivam/WorkSpace/bk-erp-front/src/app/components/settings/options/prescriptions/AddPrescription.js\";\nimport React from \"react\";\nimport DynamicFieldsForm from \"../../../common/DynamicFieldsForm\";\nimport { Form, Card, message } from \"antd\";\nimport { CHECKBOX_FIELD, SUCCESS_MSG_TYPE, INPUT_FIELD, RADIO_FIELD, NUMBER_FIELD, SELECT_FIELD } from \"../../../../constants/dataKeys\";\nimport { DRUG_CATALOG, DRUG_TYPE_API, OFFERS, SINGLE_DRUG_CATALOG } from \"../../../../constants/api\";\nimport { getAPI, displayMessage, deleteAPI, interpolate } from \"../../../../utils/common\";\nimport { Redirect, Route } from 'react-router-dom';\n\nvar AddPrescription =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(AddPrescription, _React$Component);\n\n  function AddPrescription(props) {\n    var _this;\n\n    _classCallCheck(this, AddPrescription);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(AddPrescription).call(this, props));\n    _this.state = {\n      redirect: false,\n      editPrescreption: _this.props.editCatalog ? _this.props.editCatalog : null,\n      drugType: []\n    };\n    _this.changeRedirect = _this.changeRedirect.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.setFormParams = _this.setFormParams.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(AddPrescription, [{\n    key: \"componentWillMount\",\n    value: function componentWillMount() {\n      this.loadDrugType();\n      var that = this;\n\n      if (this.props.match.params.drugId) {\n        var successFn = function successFn(data) {\n          that.setState({\n            editPrescreption: data\n          });\n        };\n\n        var errorFn = function errorFn() {};\n\n        getAPI(interpolate(SINGLE_DRUG_CATALOG, [this.props.active_practiceId, this.props.match.params.drugId]), successFn, errorFn);\n      }\n    }\n  }, {\n    key: \"changeRedirect\",\n    value: function changeRedirect() {\n      var redirectVar = this.state.redirect;\n      this.setState({\n        redirect: !redirectVar\n      });\n    }\n  }, {\n    key: \"loadDrugType\",\n    value: function loadDrugType() {\n      var that = this;\n\n      var successFn = function successFn(data) {\n        that.setState({\n          drugType: data\n        });\n      };\n\n      var errorFn = function errorFn() {};\n\n      getAPI(DRUG_TYPE_API, successFn, errorFn);\n    }\n  }, {\n    key: \"setFormParams\",\n    value: function setFormParams(type, value) {\n      this.setState(_defineProperty({}, type, value));\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var that = this;\n      var drugTypeField = this.state.drugType && this.state.drugType == INPUT_FIELD ? {\n        label: \"Drug Type\",\n        key: \"drug_type_extra\",\n        required: true,\n        initialValue: this.state.editPrescreption ? this.state.editPrescreption.drug_type : null,\n        type: INPUT_FIELD,\n        follow: React.createElement(\"a\", {\n          onClick: function onClick() {\n            return that.setFormParams('drugType', SELECT_FIELD);\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 79\n          },\n          __self: this\n        }, \"Choose Drug Type\")\n      } : {\n        label: \"Drug Type\",\n        key: \"drug_type\",\n        required: true,\n        initialValue: this.state.editPrescreption ? this.state.editPrescreption.drug_type : null,\n        type: SELECT_FIELD,\n        options: [],\n        follow: React.createElement(\"a\", {\n          onClick: function onClick() {\n            return that.setFormParams('drugType', INPUT_FIELD);\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 87\n          },\n          __self: this\n        }, \"Add New Drug Type\")\n      };\n      var drugUnitField = this.state.drugUnit && this.state.drugUnit == INPUT_FIELD ? {\n        label: \"Dosage Unit\",\n        key: \"unit_type_extra\",\n        required: true,\n        initialValue: this.state.editPrescreption ? this.state.editPrescreption.unit : null,\n        type: INPUT_FIELD,\n        follow: React.createElement(\"a\", {\n          onClick: function onClick() {\n            return that.setFormParams('drugUnit', SELECT_FIELD);\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 96\n          },\n          __self: this\n        }, \"Choose Drug Type\")\n      } : {\n        label: \"Dosage Unit\",\n        key: \"unit\",\n        required: true,\n        initialValue: this.state.editPrescreption ? this.state.editPrescreption.unit : null,\n        type: SELECT_FIELD,\n        options: [],\n        follow: React.createElement(\"a\", {\n          onClick: function onClick() {\n            return that.setFormParams('drugUnit', INPUT_FIELD);\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 104\n          },\n          __self: this\n        }, \"Add New Drug Type\")\n      };\n      var fields = [{\n        label: \"Name\",\n        key: \"name\",\n        initialValue: this.state.editPrescreption ? this.state.editPrescreption.name : null,\n        required: true,\n        type: INPUT_FIELD\n      }, drugTypeField, {\n        label: \"Dosage\",\n        key: \"strength\",\n        required: true,\n        initialValue: this.state.editPrescreption ? this.state.editPrescreption.strength : null,\n        type: NUMBER_FIELD\n      }, drugUnitField, {\n        label: \"Instructions \",\n        key: \"instruction\",\n        required: true,\n        initialValue: this.state.editPrescreption ? this.state.editPrescreption.instruction : null,\n        type: INPUT_FIELD\n      }]; // const formProp={\n      //   successFn:function(data){\n      //     console.log(data);\n      //     displayMessage(SUCCESS_MSG_TYPE, \"success\")\n      //\n      //   },\n      //   errorFn:function(){\n      //\n      //   },\n      //   action: interpolate(OFFERS,[this.props.active_practiceId]),\n      //   method: \"post\",\n      // }\n\n      var formProp = {\n        successFn: function successFn(data) {\n          console.log(data);\n          displayMessage(SUCCESS_MSG_TYPE, \"success\");\n          that.props.loadData();\n        },\n        errorFn: function errorFn() {},\n        action: interpolate(DRUG_CATALOG, [this.props.active_practiceId]),\n        method: \"post\"\n      };\n      var TestFormLayout = Form.create()(DynamicFieldsForm);\n      var defaultValues = [];\n\n      if (this.state.editPrescreption) {\n        defaultValues.push({\n          key: 'id',\n          value: this.state.editPrescreption.id\n        });\n      }\n\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 155\n        },\n        __self: this\n      }, React.createElement(Card, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 156\n        },\n        __self: this\n      }, React.createElement(Route, {\n        exact: true,\n        path: \"/settings/prescriptions/add\",\n        render: function render() {\n          return React.createElement(TestFormLayout, {\n            title: \"Add Prescriptions\",\n            formProp: formProp,\n            changeRedirect: _this2.changeRedirect,\n            fields: fields,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 158\n            },\n            __self: this\n          });\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 157\n        },\n        __self: this\n      }), React.createElement(Route, {\n        exact: true,\n        path: \"/settings/prescriptions/edit\",\n        render: function render(route) {\n          return _this2.state.editPrescreption ? React.createElement(TestFormLayout, {\n            title: \"Add Prescriptions\",\n            defaultValues: defaultValues,\n            formProp: formProp,\n            changeRedirect: _this2.changeRedirect,\n            fields: fields,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 163\n            },\n            __self: this\n          }) : null;\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 161\n        },\n        __self: this\n      }), this.state.redirect && React.createElement(Redirect, {\n        to: \"/settings/prescriptions\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 168\n        },\n        __self: this\n      })));\n    }\n  }]);\n\n  return AddPrescription;\n}(React.Component);\n\nexport default AddPrescription;","map":{"version":3,"sources":["/home/shivam/WorkSpace/bk-erp-front/src/app/components/settings/options/prescriptions/AddPrescription.js"],"names":["React","DynamicFieldsForm","Form","Card","message","CHECKBOX_FIELD","SUCCESS_MSG_TYPE","INPUT_FIELD","RADIO_FIELD","NUMBER_FIELD","SELECT_FIELD","DRUG_CATALOG","DRUG_TYPE_API","OFFERS","SINGLE_DRUG_CATALOG","getAPI","displayMessage","deleteAPI","interpolate","Redirect","Route","AddPrescription","props","state","redirect","editPrescreption","editCatalog","drugType","changeRedirect","bind","setFormParams","loadDrugType","that","match","params","drugId","successFn","data","setState","errorFn","active_practiceId","redirectVar","type","value","drugTypeField","label","key","required","initialValue","drug_type","follow","options","drugUnitField","drugUnit","unit","fields","name","strength","instruction","formProp","console","log","loadData","action","method","TestFormLayout","create","defaultValues","push","id","route","Component"],"mappings":";;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,iBAAP,MAA8B,mCAA9B;AACA,SAAQC,IAAR,EAAcC,IAAd,EAAoBC,OAApB,QAAkC,MAAlC;AACA,SACIC,cADJ,EAEIC,gBAFJ,EAGIC,WAHJ,EAIIC,WAJJ,EAKIC,YALJ,EAMIC,YANJ,QAOO,gCAPP;AAQA,SAAQC,YAAR,EAAsBC,aAAtB,EAAqCC,MAArC,EAA6CC,mBAA7C,QAAuE,2BAAvE;AACA,SAAQC,MAAR,EAAgBC,cAAhB,EAAgCC,SAAhC,EAA2CC,WAA3C,QAA6D,0BAA7D;AACA,SAAQC,QAAR,EAAkBC,KAAlB,QAA8B,kBAA9B;;IAGMC,e;;;;;AACF,2BAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACf,yFAAMA,KAAN;AACA,UAAKC,KAAL,GAAa;AACTC,MAAAA,QAAQ,EAAE,KADD;AAETC,MAAAA,gBAAgB,EAAE,MAAKH,KAAL,CAAWI,WAAX,GAAyB,MAAKJ,KAAL,CAAWI,WAApC,GAAkD,IAF3D;AAGTC,MAAAA,QAAQ,EAAE;AAHD,KAAb;AAMA,UAAKC,cAAL,GAAsB,MAAKA,cAAL,CAAoBC,IAApB,uDAAtB;AACA,UAAKC,aAAL,GAAqB,MAAKA,aAAL,CAAmBD,IAAnB,uDAArB;AATe;AAUlB;;;;yCAEoB;AACjB,WAAKE,YAAL;AACA,UAAIC,IAAI,GAAG,IAAX;;AACA,UAAI,KAAKV,KAAL,CAAWW,KAAX,CAAiBC,MAAjB,CAAwBC,MAA5B,EAAoC;AAChC,YAAIC,SAAS,GAAG,SAAZA,SAAY,CAAUC,IAAV,EAAgB;AAC5BL,UAAAA,IAAI,CAACM,QAAL,CAAc;AACVb,YAAAA,gBAAgB,EAAEY;AADR,WAAd;AAGH,SAJD;;AAKA,YAAIE,OAAO,GAAG,SAAVA,OAAU,GAAY,CACzB,CADD;;AAEAxB,QAAAA,MAAM,CAACG,WAAW,CAACJ,mBAAD,EAAsB,CAAC,KAAKQ,KAAL,CAAWkB,iBAAZ,EAA+B,KAAKlB,KAAL,CAAWW,KAAX,CAAiBC,MAAjB,CAAwBC,MAAvD,CAAtB,CAAZ,EAAmGC,SAAnG,EAA8GG,OAA9G,CAAN;AACH;AACJ;;;qCAEgB;AACb,UAAIE,WAAW,GAAG,KAAKlB,KAAL,CAAWC,QAA7B;AACA,WAAKc,QAAL,CAAc;AACVd,QAAAA,QAAQ,EAAE,CAACiB;AADD,OAAd;AAGH;;;mCAEc;AACX,UAAIT,IAAI,GAAG,IAAX;;AACA,UAAII,SAAS,GAAG,SAAZA,SAAY,CAAUC,IAAV,EAAgB;AAC5BL,QAAAA,IAAI,CAACM,QAAL,CAAc;AACVX,UAAAA,QAAQ,EAAEU;AADA,SAAd;AAGH,OAJD;;AAKA,UAAIE,OAAO,GAAG,SAAVA,OAAU,GAAY,CACzB,CADD;;AAEAxB,MAAAA,MAAM,CAACH,aAAD,EAAgBwB,SAAhB,EAA2BG,OAA3B,CAAN;AACH;;;kCAEaG,I,EAAMC,K,EAAO;AACvB,WAAKL,QAAL,qBACKI,IADL,EACYC,KADZ;AAGH;;;6BAEQ;AAAA;;AACL,UAAIX,IAAI,GAAG,IAAX;AACA,UAAIY,aAAa,GAAI,KAAKrB,KAAL,CAAWI,QAAX,IAAuB,KAAKJ,KAAL,CAAWI,QAAX,IAAuBpB,WAA9C,GACjB;AACIsC,QAAAA,KAAK,EAAE,WADX;AAEIC,QAAAA,GAAG,EAAE,iBAFT;AAGIC,QAAAA,QAAQ,EAAE,IAHd;AAIIC,QAAAA,YAAY,EAAE,KAAKzB,KAAL,CAAWE,gBAAX,GAA8B,KAAKF,KAAL,CAAWE,gBAAX,CAA4BwB,SAA1D,GAAsE,IAJxF;AAKIP,QAAAA,IAAI,EAAEnC,WALV;AAMI2C,QAAAA,MAAM,EAAE;AAAG,UAAA,OAAO,EAAE;AAAA,mBAAMlB,IAAI,CAACF,aAAL,CAAmB,UAAnB,EAA+BpB,YAA/B,CAAN;AAAA,WAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AANZ,OADiB,GAQb;AACAmC,QAAAA,KAAK,EAAE,WADP;AAEAC,QAAAA,GAAG,EAAE,WAFL;AAGAC,QAAAA,QAAQ,EAAE,IAHV;AAIAC,QAAAA,YAAY,EAAE,KAAKzB,KAAL,CAAWE,gBAAX,GAA8B,KAAKF,KAAL,CAAWE,gBAAX,CAA4BwB,SAA1D,GAAsE,IAJpF;AAKAP,QAAAA,IAAI,EAAEhC,YALN;AAMAyC,QAAAA,OAAO,EAAE,EANT;AAOAD,QAAAA,MAAM,EAAE;AAAG,UAAA,OAAO,EAAE;AAAA,mBAAMlB,IAAI,CAACF,aAAL,CAAmB,UAAnB,EAA+BvB,WAA/B,CAAN;AAAA,WAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAPR,OARR;AAiBA,UAAI6C,aAAa,GAAI,KAAK7B,KAAL,CAAW8B,QAAX,IAAuB,KAAK9B,KAAL,CAAW8B,QAAX,IAAuB9C,WAA9C,GACjB;AACIsC,QAAAA,KAAK,EAAE,aADX;AAEIC,QAAAA,GAAG,EAAE,iBAFT;AAGIC,QAAAA,QAAQ,EAAE,IAHd;AAIIC,QAAAA,YAAY,EAAE,KAAKzB,KAAL,CAAWE,gBAAX,GAA8B,KAAKF,KAAL,CAAWE,gBAAX,CAA4B6B,IAA1D,GAAiE,IAJnF;AAKIZ,QAAAA,IAAI,EAAEnC,WALV;AAMI2C,QAAAA,MAAM,EAAE;AAAG,UAAA,OAAO,EAAE;AAAA,mBAAMlB,IAAI,CAACF,aAAL,CAAmB,UAAnB,EAA+BpB,YAA/B,CAAN;AAAA,WAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AANZ,OADiB,GAQb;AACAmC,QAAAA,KAAK,EAAE,aADP;AAEAC,QAAAA,GAAG,EAAE,MAFL;AAGAC,QAAAA,QAAQ,EAAE,IAHV;AAIAC,QAAAA,YAAY,EAAE,KAAKzB,KAAL,CAAWE,gBAAX,GAA8B,KAAKF,KAAL,CAAWE,gBAAX,CAA4B6B,IAA1D,GAAiE,IAJ/E;AAKAZ,QAAAA,IAAI,EAAEhC,YALN;AAMAyC,QAAAA,OAAO,EAAE,EANT;AAOAD,QAAAA,MAAM,EAAE;AAAG,UAAA,OAAO,EAAE;AAAA,mBAAMlB,IAAI,CAACF,aAAL,CAAmB,UAAnB,EAA+BvB,WAA/B,CAAN;AAAA,WAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAPR,OARR;AAiBA,UAAMgD,MAAM,GAAG,CAAC;AACZV,QAAAA,KAAK,EAAE,MADK;AAEZC,QAAAA,GAAG,EAAE,MAFO;AAGZE,QAAAA,YAAY,EAAE,KAAKzB,KAAL,CAAWE,gBAAX,GAA8B,KAAKF,KAAL,CAAWE,gBAAX,CAA4B+B,IAA1D,GAAiE,IAHnE;AAIZT,QAAAA,QAAQ,EAAE,IAJE;AAKZL,QAAAA,IAAI,EAAEnC;AALM,OAAD,EAMZqC,aANY,EAMG;AACdC,QAAAA,KAAK,EAAE,QADO;AAEdC,QAAAA,GAAG,EAAE,UAFS;AAGdC,QAAAA,QAAQ,EAAE,IAHI;AAIdC,QAAAA,YAAY,EAAE,KAAKzB,KAAL,CAAWE,gBAAX,GAA8B,KAAKF,KAAL,CAAWE,gBAAX,CAA4BgC,QAA1D,GAAqE,IAJrE;AAKdf,QAAAA,IAAI,EAAEjC;AALQ,OANH,EAYZ2C,aAZY,EAYG;AACdP,QAAAA,KAAK,EAAE,eADO;AAEdC,QAAAA,GAAG,EAAE,aAFS;AAGdC,QAAAA,QAAQ,EAAE,IAHI;AAIdC,QAAAA,YAAY,EAAE,KAAKzB,KAAL,CAAWE,gBAAX,GAA8B,KAAKF,KAAL,CAAWE,gBAAX,CAA4BiC,WAA1D,GAAwE,IAJxE;AAKdhB,QAAAA,IAAI,EAAEnC;AALQ,OAZH,CAAf,CApCK,CAuDL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,UAAMoD,QAAQ,GAAG;AACbvB,QAAAA,SAAS,EAAE,mBAAUC,IAAV,EAAgB;AACvBuB,UAAAA,OAAO,CAACC,GAAR,CAAYxB,IAAZ;AACArB,UAAAA,cAAc,CAACV,gBAAD,EAAmB,SAAnB,CAAd;AACA0B,UAAAA,IAAI,CAACV,KAAL,CAAWwC,QAAX;AAEH,SANY;AAObvB,QAAAA,OAAO,EAAE,mBAAY,CAEpB,CATY;AAUbwB,QAAAA,MAAM,EAAE7C,WAAW,CAACP,YAAD,EAAe,CAAC,KAAKW,KAAL,CAAWkB,iBAAZ,CAAf,CAVN;AAWbwB,QAAAA,MAAM,EAAE;AAXK,OAAjB;AAaA,UAAMC,cAAc,GAAG/D,IAAI,CAACgE,MAAL,GAAcjE,iBAAd,CAAvB;AACA,UAAIkE,aAAa,GAAG,EAApB;;AACA,UAAI,KAAK5C,KAAL,CAAWE,gBAAf,EAAiC;AAC7B0C,QAAAA,aAAa,CAACC,IAAd,CAAmB;AAACtB,UAAAA,GAAG,EAAE,IAAN;AAAYH,UAAAA,KAAK,EAAE,KAAKpB,KAAL,CAAWE,gBAAX,CAA4B4C;AAA/C,SAAnB;AACH;;AACD,aAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACH,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,KAAD;AAAO,QAAA,KAAK,MAAZ;AAAa,QAAA,IAAI,EAAC,6BAAlB;AACO,QAAA,MAAM,EAAE;AAAA,iBAAM,oBAAC,cAAD;AAAgB,YAAA,KAAK,EAAC,mBAAtB;AAA0C,YAAA,QAAQ,EAAEV,QAApD;AACgB,YAAA,cAAc,EAAE,MAAI,CAAC/B,cADrC;AAEgB,YAAA,MAAM,EAAE2B,MAFxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAN;AAAA,SADf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,EAKI,oBAAC,KAAD;AAAO,QAAA,KAAK,MAAZ;AAAa,QAAA,IAAI,EAAC,8BAAlB;AACO,QAAA,MAAM,EAAE,gBAACe,KAAD;AAAA,iBAAW,MAAI,CAAC/C,KAAL,CAAWE,gBAAX,GACf,oBAAC,cAAD;AAAgB,YAAA,KAAK,EAAC,mBAAtB;AACgB,YAAA,aAAa,EAAE0C,aAD/B;AAC8C,YAAA,QAAQ,EAAER,QADxD;AAEgB,YAAA,cAAc,EAAE,MAAI,CAAC/B,cAFrC;AAGgB,YAAA,MAAM,EAAE2B,MAHxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADe,GAIqB,IAJhC;AAAA,SADf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QALJ,EAYK,KAAKhC,KAAL,CAAWC,QAAX,IAAuB,oBAAC,QAAD;AAAU,QAAA,EAAE,EAAC,yBAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAZ5B,CADG,CAAP;AAiBH;;;;EA3JyBxB,KAAK,CAACuE,S;;AA8JpC,eAAelD,eAAf","sourcesContent":["import React from \"react\";\nimport DynamicFieldsForm from \"../../../common/DynamicFieldsForm\";\nimport {Form, Card, message} from \"antd\";\nimport {\n    CHECKBOX_FIELD,\n    SUCCESS_MSG_TYPE,\n    INPUT_FIELD,\n    RADIO_FIELD,\n    NUMBER_FIELD,\n    SELECT_FIELD\n} from \"../../../../constants/dataKeys\";\nimport {DRUG_CATALOG, DRUG_TYPE_API, OFFERS, SINGLE_DRUG_CATALOG} from \"../../../../constants/api\";\nimport {getAPI, displayMessage, deleteAPI, interpolate} from \"../../../../utils/common\";\nimport {Redirect, Route} from 'react-router-dom'\n\n\nclass AddPrescription extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            redirect: false,\n            editPrescreption: this.props.editCatalog ? this.props.editCatalog : null,\n            drugType: []\n\n        }\n        this.changeRedirect = this.changeRedirect.bind(this);\n        this.setFormParams = this.setFormParams.bind(this);\n    }\n\n    componentWillMount() {\n        this.loadDrugType();\n        let that = this;\n        if (this.props.match.params.drugId) {\n            let successFn = function (data) {\n                that.setState({\n                    editPrescreption: data\n                })\n            };\n            let errorFn = function () {\n            };\n            getAPI(interpolate(SINGLE_DRUG_CATALOG, [this.props.active_practiceId, this.props.match.params.drugId]), successFn, errorFn);\n        }\n    }\n\n    changeRedirect() {\n        var redirectVar = this.state.redirect;\n        this.setState({\n            redirect: !redirectVar,\n        });\n    }\n\n    loadDrugType() {\n        let that = this;\n        let successFn = function (data) {\n            that.setState({\n                drugType: data\n            })\n        }\n        let errorFn = function () {\n        }\n        getAPI(DRUG_TYPE_API, successFn, errorFn);\n    }\n\n    setFormParams(type, value) {\n        this.setState({\n            [type]: value\n        })\n    }\n\n    render() {\n        let that = this;\n        let drugTypeField = (this.state.drugType && this.state.drugType == INPUT_FIELD ?\n            {\n                label: \"Drug Type\",\n                key: \"drug_type_extra\",\n                required: true,\n                initialValue: this.state.editPrescreption ? this.state.editPrescreption.drug_type : null,\n                type: INPUT_FIELD,\n                follow: <a onClick={() => that.setFormParams('drugType', SELECT_FIELD)}>Choose Drug Type</a>\n            } : {\n                label: \"Drug Type\",\n                key: \"drug_type\",\n                required: true,\n                initialValue: this.state.editPrescreption ? this.state.editPrescreption.drug_type : null,\n                type: SELECT_FIELD,\n                options: [],\n                follow: <a onClick={() => that.setFormParams('drugType', INPUT_FIELD)}>Add New Drug Type</a>\n            });\n        let drugUnitField = (this.state.drugUnit && this.state.drugUnit == INPUT_FIELD ?\n            {\n                label: \"Dosage Unit\",\n                key: \"unit_type_extra\",\n                required: true,\n                initialValue: this.state.editPrescreption ? this.state.editPrescreption.unit : null,\n                type: INPUT_FIELD,\n                follow: <a onClick={() => that.setFormParams('drugUnit', SELECT_FIELD)}>Choose Drug Type</a>\n            } : {\n                label: \"Dosage Unit\",\n                key: \"unit\",\n                required: true,\n                initialValue: this.state.editPrescreption ? this.state.editPrescreption.unit : null,\n                type: SELECT_FIELD,\n                options: [],\n                follow: <a onClick={() => that.setFormParams('drugUnit', INPUT_FIELD)}>Add New Drug Type</a>\n            });\n        const fields = [{\n            label: \"Name\",\n            key: \"name\",\n            initialValue: this.state.editPrescreption ? this.state.editPrescreption.name : null,\n            required: true,\n            type: INPUT_FIELD\n        }, drugTypeField, {\n            label: \"Dosage\",\n            key: \"strength\",\n            required: true,\n            initialValue: this.state.editPrescreption ? this.state.editPrescreption.strength : null,\n            type: NUMBER_FIELD\n        }, drugUnitField, {\n            label: \"Instructions \",\n            key: \"instruction\",\n            required: true,\n            initialValue: this.state.editPrescreption ? this.state.editPrescreption.instruction : null,\n            type: INPUT_FIELD\n        },];\n        // const formProp={\n        //   successFn:function(data){\n        //     console.log(data);\n        //     displayMessage(SUCCESS_MSG_TYPE, \"success\")\n        //\n        //   },\n        //   errorFn:function(){\n        //\n        //   },\n        //   action: interpolate(OFFERS,[this.props.active_practiceId]),\n        //   method: \"post\",\n        // }\n        const formProp = {\n            successFn: function (data) {\n                console.log(data);\n                displayMessage(SUCCESS_MSG_TYPE, \"success\")\n                that.props.loadData();\n\n            },\n            errorFn: function () {\n\n            },\n            action: interpolate(DRUG_CATALOG, [this.props.active_practiceId]),\n            method: \"post\",\n        }\n        const TestFormLayout = Form.create()(DynamicFieldsForm);\n        let defaultValues = []\n        if (this.state.editPrescreption) {\n            defaultValues.push({key: 'id', value: this.state.editPrescreption.id})\n        }\n        return <div>\n            <Card>\n                <Route exact path=\"/settings/prescriptions/add\"\n                       render={() => <TestFormLayout title=\"Add Prescriptions\" formProp={formProp}\n                                                     changeRedirect={this.changeRedirect}\n                                                     fields={fields}/>}/>\n                <Route exact path=\"/settings/prescriptions/edit\"\n                       render={(route) => this.state.editPrescreption ?\n                           <TestFormLayout title=\"Add Prescriptions\"\n                                           defaultValues={defaultValues} formProp={formProp}\n                                           changeRedirect={this.changeRedirect}\n                                           fields={fields}/> : null}/>\n\n                {this.state.redirect && <Redirect to='/settings/prescriptions'/>}\n\n            </Card>\n        </div>\n    }\n}\n\nexport default AddPrescription;\n"]},"metadata":{},"sourceType":"module"}