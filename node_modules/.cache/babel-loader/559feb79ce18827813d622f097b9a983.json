{"ast":null,"code":"import _classCallCheck from \"/home/shivam/WorkSpace/bk-erp-front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/shivam/WorkSpace/bk-erp-front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/shivam/WorkSpace/bk-erp-front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/shivam/WorkSpace/bk-erp-front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/shivam/WorkSpace/bk-erp-front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/home/shivam/WorkSpace/bk-erp-front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/home/shivam/WorkSpace/bk-erp-front/src/app/components/patients/clinicNotes/AddClinicNotes.js\";\nimport React from \"react\";\nimport { Route } from \"react-router\";\nimport DynamicFieldsForm from \"../../common/DynamicFieldsForm\";\nimport { Button, Card, Form, Icon, Row } from \"antd\";\nimport { CHECKBOX_FIELD, DATE_PICKER, SINGLE_CHECKBOX_FIELD, NUMBER_FIELD, SUCCESS_MSG_TYPE, INPUT_FIELD, RADIO_FIELD, SELECT_FIELD } from \"../../../constants/dataKeys\";\nimport { PRESCRIPTIONS_API, DRUG_CATALOG, ALL_PRESCRIPTIONS_API, INVOICES_API, PROCEDURE_CATEGORY, TAXES, PATIENT_CLINIC_NOTES_API } from \"../../../constants/api\";\nimport { getAPI, interpolate, displayMessage } from \"../../../utils/common\";\nimport { Redirect } from 'react-router-dom';\nimport moment from 'moment';\n\nvar AddClinicNotes =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(AddClinicNotes, _React$Component);\n\n  function AddClinicNotes(props) {\n    var _this;\n\n    _classCallCheck(this, AddClinicNotes);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(AddClinicNotes).call(this, props));\n    _this.state = {\n      redirect: false,\n      drug_catalog: _this.props.drug_catalog ? _this.props.drug_catalog : null,\n      procedure_category: _this.props.procedure_category ? _this.props.procedure_category : null,\n      taxes_list: _this.props.taxes_list ? _this.props.taxes_list : null,\n      editClinicNotes: _this.props.editClinicNotes ? _this.props.editClinicNotes : null\n    };\n    _this.changeRedirect = _this.changeRedirect.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    console.log(\"Working or not\");\n    return _this;\n  }\n\n  _createClass(AddClinicNotes, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {}\n  }, {\n    key: \"loadDrugCatalog\",\n    value: function loadDrugCatalog() {\n      var that = this;\n\n      var successFn = function successFn(data) {\n        that.setState({\n          drug_catalog: data\n        });\n      };\n\n      var errorFn = function errorFn() {};\n\n      getAPI(interpolate(DRUG_CATALOG, [this.props.active_practiceId]), successFn, errorFn);\n    }\n  }, {\n    key: \"loadProcedureCategory\",\n    value: function loadProcedureCategory() {\n      var that = this;\n\n      var successFn = function successFn(data) {\n        that.setState({\n          procedure_category: data\n        });\n      };\n\n      var errorFn = function errorFn() {};\n\n      getAPI(interpolate(PROCEDURE_CATEGORY, [this.props.active_practiceId]), successFn, errorFn);\n    }\n  }, {\n    key: \"loadTaxes\",\n    value: function loadTaxes() {\n      var that = this;\n\n      var successFn = function successFn(data) {\n        console.log(\"get table\");\n        that.setState({\n          taxes_list: data\n        });\n      };\n\n      var errorFn = function errorFn() {};\n\n      getAPI(interpolate(TAXES, [this.props.active_practiceId]), successFn, errorFn);\n    }\n  }, {\n    key: \"changeRedirect\",\n    value: function changeRedirect() {\n      var redirectVar = this.state.redirect;\n      this.setState({\n        redirect: !redirectVar\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var fields = [{\n        label: \"Name\",\n        key: \"name\",\n        initialValue: this.state.editClinicNotes ? this.state.editClinicNotes.name : null,\n        type: INPUT_FIELD\n      }, {\n        label: \"chief_complaints\",\n        key: \"chief_complaints\",\n        initialValue: this.state.editClinicNotes ? this.state.editClinicNotes.chief_complaints : null,\n        type: INPUT_FIELD\n      }, {\n        label: \"investigations\",\n        key: \"investigations\",\n        initialValue: this.state.editClinicNotes ? this.state.editClinicNotes.investigations : null,\n        type: INPUT_FIELD\n      }, {\n        label: \"diagnosis\",\n        key: \"diagnosis\",\n        initialValue: this.state.editClinicNotes ? this.state.editClinicNotes.diagnosis : null,\n        type: INPUT_FIELD\n      }, {\n        label: \"notes\",\n        key: \"notes\",\n        initialValue: this.state.editClinicNotes ? this.state.editClinicNotes.notes : null,\n        type: INPUT_FIELD\n      }, {\n        label: \"observations\",\n        key: \"observations\",\n        initialValue: this.state.editClinicNotes ? this.state.editClinicNotes.observations : null,\n        type: INPUT_FIELD\n      }, {\n        label: \"Active\",\n        key: \"is_active\",\n        type: SINGLE_CHECKBOX_FIELD,\n        initialValue: this.state.editClinicNotes ? this.state.editClinicNotes.is_active : false\n      }];\n      var editformProp;\n      var TestFormLayout = Form.create()(DynamicFieldsForm);\n      var formProp = {\n        successFn: function successFn(data) {\n          displayMessage(SUCCESS_MSG_TYPE, \"success\");\n          console.log(data);\n        },\n        errorFn: function errorFn() {},\n        action: interpolate(PATIENT_CLINIC_NOTES_API, [this.props.match.params.id]),\n        method: \"post\"\n      };\n      var defaultValues = [];\n\n      if (this.state.editClinicNotes) {\n        defaultValues = [{\n          \"key\": \"id\",\n          \"value\": this.state.editClinicNotes.id\n        }];\n      }\n\n      return React.createElement(Row, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 157\n        },\n        __self: this\n      }, React.createElement(Card, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 158\n        },\n        __self: this\n      }, React.createElement(Route, {\n        exact: true,\n        path: \"/patient/:id/emr/clinicnotes/edit\",\n        render: function render() {\n          return _this2.state.editClinicNotes ? React.createElement(TestFormLayout, {\n            defaultValues: defaultValues,\n            title: \"Edit Clinic notes\",\n            changeRedirect: _this2.changeRedirect,\n            formProp: formProp,\n            fields: fields,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 161\n            },\n            __self: this\n          }) : React.createElement(Redirect, {\n            to: '/patient/' + _this2.props.match.params.id + '/billing/invoices',\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 163\n            },\n            __self: this\n          });\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 159\n        },\n        __self: this\n      }), React.createElement(Route, {\n        exact: true,\n        path: \"/patient/:id/emr/clinicnotes/add\",\n        render: function render() {\n          return React.createElement(TestFormLayout, {\n            title: \"Add Clinic Notes\",\n            changeRedirect: _this2.changeRedirect,\n            formProp: formProp,\n            fields: fields,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 165\n            },\n            __self: this\n          });\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 164\n        },\n        __self: this\n      })), this.state.redirect && React.createElement(Redirect, {\n        to: '/patient/' + this.props.match.params.id + '/emr/clinicnotes',\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 170\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return AddClinicNotes;\n}(React.Component);\n\nexport default AddClinicNotes;","map":{"version":3,"sources":["/home/shivam/WorkSpace/bk-erp-front/src/app/components/patients/clinicNotes/AddClinicNotes.js"],"names":["React","Route","DynamicFieldsForm","Button","Card","Form","Icon","Row","CHECKBOX_FIELD","DATE_PICKER","SINGLE_CHECKBOX_FIELD","NUMBER_FIELD","SUCCESS_MSG_TYPE","INPUT_FIELD","RADIO_FIELD","SELECT_FIELD","PRESCRIPTIONS_API","DRUG_CATALOG","ALL_PRESCRIPTIONS_API","INVOICES_API","PROCEDURE_CATEGORY","TAXES","PATIENT_CLINIC_NOTES_API","getAPI","interpolate","displayMessage","Redirect","moment","AddClinicNotes","props","state","redirect","drug_catalog","procedure_category","taxes_list","editClinicNotes","changeRedirect","bind","console","log","that","successFn","data","setState","errorFn","active_practiceId","redirectVar","fields","label","key","initialValue","name","type","chief_complaints","investigations","diagnosis","notes","observations","is_active","editformProp","TestFormLayout","create","formProp","action","match","params","id","method","defaultValues","Component"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport {Route} from \"react-router\";\n\nimport DynamicFieldsForm from \"../../common/DynamicFieldsForm\";\nimport {Button, Card, Form, Icon, Row} from \"antd\";\nimport {\n    CHECKBOX_FIELD,\n    DATE_PICKER,\n    SINGLE_CHECKBOX_FIELD,\n    NUMBER_FIELD,\n    SUCCESS_MSG_TYPE,\n    INPUT_FIELD,\n    RADIO_FIELD,\n    SELECT_FIELD\n} from \"../../../constants/dataKeys\";\nimport {\n    PRESCRIPTIONS_API,\n    DRUG_CATALOG,\n    ALL_PRESCRIPTIONS_API,\n    INVOICES_API,\n    PROCEDURE_CATEGORY, TAXES, PATIENT_CLINIC_NOTES_API\n} from \"../../../constants/api\";\nimport {getAPI, interpolate, displayMessage} from \"../../../utils/common\";\nimport {Redirect} from 'react-router-dom'\nimport moment from 'moment';\n\n\nclass AddClinicNotes extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            redirect: false,\n            drug_catalog: this.props.drug_catalog ? this.props.drug_catalog : null,\n            procedure_category: this.props.procedure_category ? this.props.procedure_category : null,\n            taxes_list: this.props.taxes_list ? this.props.taxes_list : null,\n            editClinicNotes: this.props.editClinicNotes ? this.props.editClinicNotes : null,\n\n        }\n        this.changeRedirect = this.changeRedirect.bind(this);\n        console.log(\"Working or not\");\n\n    }\n\n    componentDidMount() {\n\n    }\n\n    loadDrugCatalog() {\n        let that = this;\n        let successFn = function (data) {\n            that.setState({\n                drug_catalog: data\n            })\n\n        }\n        let errorFn = function () {\n\n        }\n        getAPI(interpolate(DRUG_CATALOG, [this.props.active_practiceId]), successFn, errorFn)\n    }\n\n    loadProcedureCategory() {\n        let that = this;\n        let successFn = function (data) {\n            that.setState({\n                procedure_category: data\n            })\n\n        }\n        let errorFn = function () {\n\n        }\n        getAPI(interpolate(PROCEDURE_CATEGORY, [this.props.active_practiceId]), successFn, errorFn);\n    }\n\n    loadTaxes() {\n        var that = this;\n        let successFn = function (data) {\n            console.log(\"get table\");\n            that.setState({\n                taxes_list: data,\n            })\n        };\n        let errorFn = function () {\n        };\n        getAPI(interpolate(TAXES, [this.props.active_practiceId]), successFn, errorFn);\n\n    }\n\n    changeRedirect() {\n        var redirectVar = this.state.redirect;\n        this.setState({\n            redirect: !redirectVar,\n        });\n    }\n\n    render() {\n\n        const fields = [{\n            label: \"Name\",\n            key: \"name\",\n            initialValue: this.state.editClinicNotes ? this.state.editClinicNotes.name : null,\n            type: INPUT_FIELD\n        }, {\n            label: \"chief_complaints\",\n            key: \"chief_complaints\",\n            initialValue: this.state.editClinicNotes ? this.state.editClinicNotes.chief_complaints : null,\n            type: INPUT_FIELD\n        }, {\n            label: \"investigations\",\n            key: \"investigations\",\n            initialValue: this.state.editClinicNotes ? this.state.editClinicNotes.investigations : null,\n            type: INPUT_FIELD,\n        }, {\n            label: \"diagnosis\",\n            key: \"diagnosis\",\n            initialValue: this.state.editClinicNotes ? this.state.editClinicNotes.diagnosis : null,\n            type: INPUT_FIELD,\n        }, {\n            label: \"notes\",\n            key: \"notes\",\n            initialValue: this.state.editClinicNotes ? this.state.editClinicNotes.notes : null,\n            type: INPUT_FIELD,\n        }, {\n            label: \"observations\",\n            key: \"observations\",\n            initialValue: this.state.editClinicNotes ? this.state.editClinicNotes.observations : null,\n            type: INPUT_FIELD,\n        }, {\n            label: \"Active\",\n            key: \"is_active\",\n            type: SINGLE_CHECKBOX_FIELD,\n            initialValue: this.state.editClinicNotes ? this.state.editClinicNotes.is_active : false,\n        }];\n\n\n        let editformProp;\n        const TestFormLayout = Form.create()(DynamicFieldsForm);\n\n        const formProp = {\n            successFn: function (data) {\n                displayMessage(SUCCESS_MSG_TYPE, \"success\")\n\n                console.log(data);\n            },\n            errorFn: function () {\n\n            },\n            action: interpolate(PATIENT_CLINIC_NOTES_API, [this.props.match.params.id]),\n            method: \"post\",\n        }\n        let defaultValues = []\n        if (this.state.editClinicNotes) {\n            defaultValues = [{\"key\": \"id\", \"value\": this.state.editClinicNotes.id}];\n        }\n        return <Row>\n            <Card>\n                <Route exact path='/patient/:id/emr/clinicnotes/edit'\n                       render={() => (this.state.editClinicNotes ?\n                           <TestFormLayout defaultValues={defaultValues} title=\"Edit Clinic notes\"\n                                           changeRedirect={this.changeRedirect} formProp={formProp} fields={fields}/> :\n                           <Redirect to={'/patient/' + this.props.match.params.id + '/billing/invoices'}/>)}/>\n                <Route exact path='/patient/:id/emr/clinicnotes/add'\n                       render={() => <TestFormLayout title=\"Add Clinic Notes\" changeRedirect={this.changeRedirect}\n                                                     formProp={formProp} fields={fields}/>}/>\n\n\n            </Card>\n            {this.state.redirect && <Redirect to={'/patient/' + this.props.match.params.id + '/emr/clinicnotes'}/>}\n        </Row>\n\n    }\n}\n\nexport default AddClinicNotes;\n"]},"metadata":{},"sourceType":"module"}