{"ast":null,"code":"import _defineProperty from \"/home/shivam/WorkSpace/bk-erp-front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _objectSpread from \"/home/shivam/WorkSpace/bk-erp-front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _toConsumableArray from \"/home/shivam/WorkSpace/bk-erp-front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"/home/shivam/WorkSpace/bk-erp-front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/shivam/WorkSpace/bk-erp-front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/shivam/WorkSpace/bk-erp-front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/shivam/WorkSpace/bk-erp-front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/shivam/WorkSpace/bk-erp-front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/home/shivam/WorkSpace/bk-erp-front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/home/shivam/WorkSpace/bk-erp-front/src/app/components/inventory/inventoryItem/AddOrConsumeStock.js\";\nimport React from \"react\";\nimport { Button, Card, Form, Input, List, Row, Col, Table, Tabs, InputNumber, Select, DatePicker } from \"antd\";\nimport { displayMessage, getAPI, postAPI } from \"../../../utils/common\";\nimport { INVENTORY_ITEM_TYPE, DRUG, SUPPLIES, EQUIPMENT, ADD_STOCK, CONSUME_STOCK } from \"../../../constants/hardData\";\nimport { INVENTORY_ITEM_API, BULK_STOCK_ENTRY } from \"../../../constants/api\";\nimport moment from \"moment\";\nvar MonthPicker = DatePicker.MonthPicker;\nvar TabPane = Tabs.TabPane;\nvar tableFormFields = {\n  _id: null,\n  quantity: 0,\n  batch: null\n};\n\nvar AddOrConsumeStock =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(AddOrConsumeStock, _React$Component);\n\n  function AddOrConsumeStock(props) {\n    var _this;\n\n    _classCallCheck(this, AddOrConsumeStock);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(AddOrConsumeStock).call(this, props));\n\n    _this.remove = function (k) {\n      _this.setState(function (prevState) {\n        var newTableFormValues = [];\n        prevState.tableFormValues.forEach(function (formValue) {\n          if (formValue._id != k) newTableFormValues.push(formValue);\n        });\n        console.log(prevState.tableFormValues, k);\n        return {\n          tableFormValues: newTableFormValues\n        };\n      });\n    };\n\n    _this.add = function (item) {\n      _this.setState(function (prevState) {\n        return {\n          tableFormValues: _toConsumableArray(prevState.tableFormValues).concat([_objectSpread({}, tableFormFields, item, {\n            _id: Math.random().toFixed(7)\n          })])\n        };\n      });\n    };\n\n    _this.handleSubmit = function (e) {\n      var that = _assertThisInitialized(_assertThisInitialized(_this));\n\n      e.preventDefault();\n\n      _this.props.form.validateFields(function (err, values) {\n        if (!err) {\n          console.log('Received values of form: ', values);\n          var reqData = [];\n          that.state.tableFormValues.forEach(function (item) {\n            var itemObject = {\n              item_add_type: that.state.classType,\n              inventory_item: item.id,\n              quantity: values.quantity[item._id],\n              batch_number: values.batch[item._id]\n            };\n\n            if (that.state.classType == ADD_STOCK) {\n              itemObject = _objectSpread({}, itemObject, {\n                expiry_date: moment(values.expiry_date[item._id]).format('YYYY-MM-DD'),\n                unit_cost: values.unit_cost[item._id],\n                total_cost: values.unit_cost[item._id] * values.quantity[item._id]\n              });\n            }\n\n            reqData.push(itemObject);\n          });\n          console.log(reqData);\n\n          var successFn = function successFn(data) {\n            displayMessage(\"Inventory updated successfully\");\n            that.props.loadData();\n            that.props.history.push('/inventory');\n          };\n\n          var errorFn = function errorFn() {};\n\n          postAPI(BULK_STOCK_ENTRY, reqData, successFn, errorFn);\n        }\n      });\n    };\n\n    _this.state = {\n      classType: props.type,\n      tableFormValues: [],\n      maxQuantityforConsume: {}\n    };\n    return _this;\n  }\n\n  _createClass(AddOrConsumeStock, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.loadInventoryItemList();\n    }\n  }, {\n    key: \"loadInventoryItemList\",\n    value: function loadInventoryItemList() {\n      var that = this;\n\n      var successFn = function successFn(data) {\n        var _items;\n\n        var drugItems = [];\n        var equipmentItems = [];\n        var supplesItems = [];\n        data.forEach(function (item) {\n          if (item.item_type == DRUG) {\n            drugItems.push(item);\n          }\n\n          if (item.item_type == SUPPLIES) {\n            supplesItems.push(item);\n          }\n\n          if (item.item_type == EQUIPMENT) {\n            equipmentItems.push(item);\n          }\n        });\n        that.setState({\n          items: (_items = {}, _defineProperty(_items, DRUG, drugItems), _defineProperty(_items, EQUIPMENT, equipmentItems), _defineProperty(_items, SUPPLIES, supplesItems), _items)\n        });\n      };\n\n      var errorFn = function errorFn() {};\n\n      getAPI(INVENTORY_ITEM_API, successFn, errorFn);\n    }\n  }, {\n    key: \"changeMaxQuantityforConsume\",\n    value: function changeMaxQuantityforConsume(recordId, batch) {\n      this.setState(function (prevState) {\n        var newMaxQuantityforConsume = _objectSpread({}, prevState.maxQuantityforConsume);\n\n        prevState.tableFormValues.forEach(function (formValue) {\n          if (formValue._id == recordId) formValue.item_type_stock.item_stock.forEach(function (stock) {\n            if (stock.batch_number == batch) newMaxQuantityforConsume[recordId] = stock.quantity || 0;\n          });\n        });\n        return {\n          maxQuantityforConsume: newMaxQuantityforConsume\n        };\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var that = this;\n      var getFieldDecorator = this.props.form.getFieldDecorator;\n      var formItemLayout = {\n        labelCol: {\n          xs: {\n            span: 24\n          },\n          sm: {\n            span: 4\n          }\n        },\n        wrapperCol: {\n          xs: {\n            span: 24\n          },\n          sm: {\n            span: 20\n          }\n        }\n      };\n      var formItemLayoutWithOutLabel = {\n        labelCol: {\n          xs: {\n            span: 24\n          },\n          sm: {\n            span: 4\n          }\n        },\n        wrapperCol: {\n          xs: {\n            span: 24\n          },\n          sm: {\n            span: 20\n          }\n        }\n      };\n      getFieldDecorator('keys', {\n        initialValue: []\n      });\n      var consumeRow = [{\n        title: 'Item Name',\n        key: 'item_name',\n        dataIndex: 'name'\n      }];\n\n      if (this.state.classType == ADD_STOCK) {\n        consumeRow = consumeRow.concat([{\n          title: 'Quantity',\n          key: 'quantity',\n          dataIndex: 'quantity',\n          render: function render(item, record) {\n            return React.createElement(Form.Item, Object.assign({\n              key: \"quantity[\".concat(record._id, \"]\")\n            }, formItemLayout, {\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 188\n              },\n              __self: this\n            }), getFieldDecorator(\"quantity[\".concat(record._id, \"]\"), {\n              validateTrigger: ['onChange', 'onBlur'],\n              rules: [{\n                required: true,\n                message: \"This field is required.\"\n              }]\n            })(React.createElement(InputNumber, {\n              min: 0,\n              placeholder: \"quantity\",\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 198\n              },\n              __self: this\n            })));\n          }\n        }, {\n          title: 'Batch',\n          key: 'batch',\n          dataIndex: 'batch',\n          render: function render(item, record) {\n            return React.createElement(Form.Item, Object.assign({\n              key: \"batch[\".concat(record._id, \"]\")\n            }, formItemLayout, {\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 205\n              },\n              __self: this\n            }), getFieldDecorator(\"batch[\".concat(record._id, \"]\"), {\n              validateTrigger: ['onChange', 'onBlur'],\n              rules: [{\n                required: true,\n                message: \"This field is required.\"\n              }]\n            })(React.createElement(Input, {\n              placeholder: \"Batch Number\",\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 215\n              },\n              __self: this\n            })));\n          }\n        }, {\n          title: 'Expiry Date',\n          key: 'expiry',\n          dataIndex: 'expiry',\n          render: function render(item, record) {\n            return React.createElement(Form.Item, Object.assign({\n              key: \"expiry_date[\".concat(record._id, \"]\")\n            }, formItemLayout, {\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 222\n              },\n              __self: this\n            }), getFieldDecorator(\"expiry_date[\".concat(record._id, \"]\"), {\n              rules: [{\n                required: true,\n                message: \"This field is required.\"\n              }],\n              initialValue: moment(new Date())\n            })(React.createElement(MonthPicker, {\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 232\n              },\n              __self: this\n            })));\n          }\n        }, {\n          title: 'Unit Cost',\n          key: 'unit_cost',\n          dataIndex: 'unit_cost',\n          render: function render(item, record) {\n            return React.createElement(Form.Item, Object.assign({\n              key: \"unit_cost[\".concat(record._id, \"]\")\n            }, formItemLayout, {\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 239\n              },\n              __self: this\n            }), getFieldDecorator(\"unit_cost[\".concat(record._id, \"]\"), {\n              // validateTrigger: ['onChange', 'onBlur'],\n              rules: [{\n                required: true,\n                message: \"This field is required.\"\n              }]\n            })(React.createElement(InputNumber, {\n              placeholder: \"Unit Cost\",\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 249\n              },\n              __self: this\n            })));\n          }\n        }, {\n          title: 'Total Cost',\n          key: 'total_cost',\n          dataIndex: 'total_cost',\n          render: function render(item, record) {\n            return React.createElement(\"span\", {\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 256\n              },\n              __self: this\n            }, \"--\");\n          }\n        }]);\n      } else if (this.state.classType == CONSUME_STOCK) {\n        consumeRow = consumeRow.concat([{\n          title: 'Batch',\n          key: 'batch',\n          dataIndex: 'batch',\n          render: function render(item, record) {\n            return React.createElement(Form.Item, Object.assign({\n              key: \"batch[\".concat(record._id, \"]\")\n            }, formItemLayout, {\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 263\n              },\n              __self: this\n            }), getFieldDecorator(\"batch[\".concat(record._id, \"]\"), {\n              validateTrigger: ['onChange', 'onBlur'],\n              rules: [{\n                required: true,\n                message: \"This field is required.\"\n              }]\n            })(React.createElement(Select, {\n              placeholder: \"Batch Number\",\n              onChange: function onChange(value) {\n                return that.changeMaxQuantityforConsume(record._id, value);\n              },\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 273\n              },\n              __self: this\n            }, record.item_type_stock.item_stock.map(function (stock) {\n              return React.createElement(Select.Option, {\n                value: stock.batch_number,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 276\n                },\n                __self: this\n              }, \"#\", stock.batch_number, \" (\", stock.quantity, \")\");\n            }))));\n          }\n        }, {\n          title: 'Quantity',\n          key: 'quantity',\n          dataIndex: 'quantity',\n          render: function render(item, record) {\n            return React.createElement(Form.Item, Object.assign({\n              key: \"quantity[\".concat(record._id, \"]\")\n            }, formItemLayout, {\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 286\n              },\n              __self: this\n            }), getFieldDecorator(\"quantity[\".concat(record._id, \"]\"), {\n              validateTrigger: ['onChange', 'onBlur'],\n              rules: [{\n                required: true,\n                message: \"This field is required.\"\n              }]\n            })(React.createElement(InputNumber, {\n              min: 0,\n              max: _this2.state.maxQuantityforConsume[record._id],\n              placeholder: \"quantity\",\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 296\n              },\n              __self: this\n            })));\n          }\n        }]);\n      }\n\n      consumeRow = consumeRow.concat([{\n        title: 'Action',\n        key: '_id',\n        dataIndex: '_id',\n        render: function render(value, record) {\n          return React.createElement(\"a\", {\n            onClick: function onClick() {\n              return that.remove(record._id);\n            },\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 305\n            },\n            __self: this\n          }, \"Delete\");\n        }\n      }]);\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 307\n        },\n        __self: this\n      }, React.createElement(Card, {\n        title: this.state.classType + \" Stock\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 308\n        },\n        __self: this\n      }, React.createElement(Row, {\n        gutter: 16,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 309\n        },\n        __self: this\n      }, React.createElement(Col, {\n        span: 7,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 310\n        },\n        __self: this\n      }, React.createElement(Tabs, {\n        size: \"small\",\n        type: \"card\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 311\n        },\n        __self: this\n      }, INVENTORY_ITEM_TYPE.map(function (itemType) {\n        return React.createElement(TabPane, {\n          tab: itemType.label,\n          key: itemType.value,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 312\n          },\n          __self: this\n        }, React.createElement(List, {\n          size: \"small\",\n          itemLayout: \"horizontal\",\n          dataSource: _this2.state.items ? _this2.state.items[itemType.value] : [],\n          renderItem: function renderItem(item) {\n            return React.createElement(List.Item, {\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 317\n              },\n              __self: this\n            }, React.createElement(List.Item.Meta, {\n              title: item.name,\n              description: item.item_type_stock.item_stock && item.item_type_stock.item_stock.map(function (stock) {\n                return React.createElement(\"span\", {\n                  __source: {\n                    fileName: _jsxFileName,\n                    lineNumber: 321\n                  },\n                  __self: this\n                }, \"#\", stock.batch_number, \"(\", stock.quantity, \")\", React.createElement(\"br\", {\n                  __source: {\n                    fileName: _jsxFileName,\n                    lineNumber: 321\n                  },\n                  __self: this\n                }));\n              }),\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 318\n              },\n              __self: this\n            }), React.createElement(Button, {\n              type: \"primary\",\n              size: \"small\",\n              shape: \"circle\",\n              onClick: function onClick() {\n                return _this2.add(item);\n              },\n              icon: \"arrow-right\",\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 322\n              },\n              __self: this\n            }));\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 313\n          },\n          __self: this\n        }));\n      }))), React.createElement(Col, {\n        span: 17,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 328\n        },\n        __self: this\n      }, React.createElement(Form, {\n        onSubmit: this.handleSubmit,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 329\n        },\n        __self: this\n      }, React.createElement(Table, {\n        pagination: false,\n        bordered: true,\n        dataSource: this.state.tableFormValues,\n        columns: consumeRow,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 330\n        },\n        __self: this\n      }), React.createElement(Form.Item, Object.assign({}, formItemLayoutWithOutLabel, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 335\n        },\n        __self: this\n      }), React.createElement(Button, {\n        type: \"primary\",\n        htmlType: \"submit\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 336\n        },\n        __self: this\n      }, \"Submit\")))))));\n    }\n  }]);\n\n  return AddOrConsumeStock;\n}(React.Component);\n\nexport default Form.create()(AddOrConsumeStock);","map":{"version":3,"sources":["/home/shivam/WorkSpace/bk-erp-front/src/app/components/inventory/inventoryItem/AddOrConsumeStock.js"],"names":["React","Button","Card","Form","Input","List","Row","Col","Table","Tabs","InputNumber","Select","DatePicker","displayMessage","getAPI","postAPI","INVENTORY_ITEM_TYPE","DRUG","SUPPLIES","EQUIPMENT","ADD_STOCK","CONSUME_STOCK","INVENTORY_ITEM_API","BULK_STOCK_ENTRY","moment","MonthPicker","TabPane","tableFormFields","_id","quantity","batch","AddOrConsumeStock","props","remove","k","setState","prevState","newTableFormValues","tableFormValues","forEach","formValue","push","console","log","add","item","Math","random","toFixed","handleSubmit","e","that","preventDefault","form","validateFields","err","values","reqData","state","itemObject","item_add_type","classType","inventory_item","id","batch_number","expiry_date","format","unit_cost","total_cost","successFn","data","loadData","history","errorFn","type","maxQuantityforConsume","loadInventoryItemList","drugItems","equipmentItems","supplesItems","item_type","items","recordId","newMaxQuantityforConsume","item_type_stock","item_stock","stock","getFieldDecorator","formItemLayout","labelCol","xs","span","sm","wrapperCol","formItemLayoutWithOutLabel","initialValue","consumeRow","title","key","dataIndex","concat","render","record","validateTrigger","rules","required","message","Date","value","changeMaxQuantityforConsume","map","itemType","label","name","Component","create"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport {\n    Button,\n    Card,\n    Form,\n    Input,\n    List,\n    Row,\n    Col,\n    Table,\n    Tabs,\n    InputNumber, Select, DatePicker,\n} from \"antd\";\nimport {displayMessage, getAPI, postAPI} from \"../../../utils/common\";\n\nimport {INVENTORY_ITEM_TYPE, DRUG, SUPPLIES, EQUIPMENT, ADD_STOCK, CONSUME_STOCK} from \"../../../constants/hardData\";\nimport {INVENTORY_ITEM_API, BULK_STOCK_ENTRY} from \"../../../constants/api\";\nimport moment from \"moment\";\n\nconst {MonthPicker} = DatePicker;\nconst TabPane = Tabs.TabPane;\n\nlet tableFormFields = {\n    _id: null,\n    quantity: 0,\n    batch: null\n};\n\nclass AddOrConsumeStock extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            classType: props.type,\n            tableFormValues: [],\n            maxQuantityforConsume: {},\n        }\n\n    }\n\n    componentDidMount() {\n        this.loadInventoryItemList();\n    }\n\n    loadInventoryItemList() {\n        let that = this;\n        let successFn = function (data) {\n            let drugItems = [];\n            let equipmentItems = [];\n            let supplesItems = [];\n            data.forEach(function (item) {\n                if (item.item_type == DRUG) {\n                    drugItems.push(item);\n                }\n                if (item.item_type == SUPPLIES) {\n                    supplesItems.push(item);\n                }\n                if (item.item_type == EQUIPMENT) {\n                    equipmentItems.push(item);\n                }\n            });\n            that.setState({\n                items: {\n                    [DRUG]: drugItems,\n                    [EQUIPMENT]: equipmentItems,\n                    [SUPPLIES]: supplesItems,\n                }\n            })\n        }\n        let errorFn = function () {\n        }\n        getAPI(INVENTORY_ITEM_API, successFn, errorFn);\n    }\n\n    remove = (k) => {\n        this.setState(function (prevState) {\n            let newTableFormValues = [];\n            prevState.tableFormValues.forEach(function (formValue) {\n                if (formValue._id != k)\n                    newTableFormValues.push(formValue);\n            });\n            console.log(prevState.tableFormValues, k);\n            return {\n                tableFormValues: newTableFormValues\n            }\n        });\n    }\n\n    add = (item) => {\n        this.setState(function (prevState) {\n            return {\n                tableFormValues: [...prevState.tableFormValues, {\n                    ...tableFormFields,\n                    ...item,\n                    _id: Math.random().toFixed(7),\n                }]\n            }\n        });\n    };\n\n    handleSubmit = (e) => {\n        let that = this;\n        e.preventDefault();\n        this.props.form.validateFields((err, values) => {\n            if (!err) {\n                console.log('Received values of form: ', values);\n                let reqData = [];\n                that.state.tableFormValues.forEach(function (item) {\n                    let itemObject = {\n                        item_add_type: that.state.classType,\n                        inventory_item: item.id,\n                        quantity: values.quantity[item._id],\n                        batch_number: values.batch[item._id],\n                    };\n                    if (that.state.classType == ADD_STOCK) {\n                        itemObject = {\n                            ...itemObject,\n                            expiry_date: moment(values.expiry_date[item._id]).format('YYYY-MM-DD'),\n                            unit_cost: values.unit_cost[item._id],\n                            total_cost: values.unit_cost[item._id] * values.quantity[item._id]\n                        }\n                    }\n                    reqData.push(itemObject);\n                });\n                console.log(reqData);\n                let successFn = function (data) {\n                    displayMessage(\"Inventory updated successfully\");\n                    that.props.loadData();\n                    that.props.history.push('/inventory');\n                }\n                let errorFn = function () {\n\n                }\n                postAPI(BULK_STOCK_ENTRY, reqData, successFn, errorFn);\n            }\n        });\n    }\n\n    changeMaxQuantityforConsume(recordId, batch) {\n        this.setState(function (prevState) {\n            let newMaxQuantityforConsume = {...prevState.maxQuantityforConsume}\n            prevState.tableFormValues.forEach(function (formValue) {\n                if (formValue._id == recordId)\n                    formValue.item_type_stock.item_stock.forEach(function (stock) {\n                        if (stock.batch_number == batch)\n                            newMaxQuantityforConsume[recordId] = stock.quantity || 0\n                    })\n            });\n            return {\n                maxQuantityforConsume: newMaxQuantityforConsume\n            }\n        });\n    }\n\n    render() {\n        let that = this;\n        const {getFieldDecorator} = this.props.form;\n        const formItemLayout = {\n            labelCol: {\n                xs: {span: 24},\n                sm: {span: 4},\n            },\n            wrapperCol: {\n                xs: {span: 24},\n                sm: {span: 20},\n            },\n        };\n        const formItemLayoutWithOutLabel = {\n            labelCol: {\n                xs: {span: 24},\n                sm: {span: 4},\n            },\n            wrapperCol: {\n                xs: {span: 24},\n                sm: {span: 20},\n            },\n        };\n        getFieldDecorator('keys', {initialValue: []});\n        let consumeRow = [{\n            title: 'Item Name',\n            key: 'item_name',\n            dataIndex: 'name'\n        }];\n        if (this.state.classType == ADD_STOCK) {\n            consumeRow = consumeRow.concat([{\n                title: 'Quantity',\n                key: 'quantity',\n                dataIndex: 'quantity',\n                render: (item, record) => <Form.Item\n                    key={`quantity[${record._id}]`}\n                    {...formItemLayout}>\n                    {getFieldDecorator(`quantity[${record._id}]`, {\n                        validateTrigger: ['onChange', 'onBlur'],\n                        rules: [{\n                            required: true,\n                            message: \"This field is required.\",\n                        }],\n                    })(\n                        <InputNumber min={0} placeholder=\"quantity\"/>\n                    )}\n                </Form.Item>\n            }, {\n                title: 'Batch',\n                key: 'batch',\n                dataIndex: 'batch',\n                render: (item, record) => <Form.Item\n                    key={`batch[${record._id}]`}\n                    {...formItemLayout}>\n                    {getFieldDecorator(`batch[${record._id}]`, {\n                        validateTrigger: ['onChange', 'onBlur'],\n                        rules: [{\n                            required: true,\n                            message: \"This field is required.\",\n                        }],\n                    })(\n                        <Input placeholder=\"Batch Number\"/>\n                    )}\n                </Form.Item>\n            }, {\n                title: 'Expiry Date',\n                key: 'expiry',\n                dataIndex: 'expiry',\n                render: (item, record) => <Form.Item\n                    key={`expiry_date[${record._id}]`}\n                    {...formItemLayout}>\n                    {getFieldDecorator(`expiry_date[${record._id}]`, {\n                        rules: [{\n                            required: true,\n                            message: \"This field is required.\",\n                        }],\n                        initialValue: moment(new Date())\n                    })(\n                        <MonthPicker/>\n                    )}\n                </Form.Item>\n            }, {\n                title: 'Unit Cost',\n                key: 'unit_cost',\n                dataIndex: 'unit_cost',\n                render: (item, record) => <Form.Item\n                    key={`unit_cost[${record._id}]`}\n                    {...formItemLayout}>\n                    {getFieldDecorator(`unit_cost[${record._id}]`, {\n                        // validateTrigger: ['onChange', 'onBlur'],\n                        rules: [{\n                            required: true,\n                            message: \"This field is required.\",\n                        }],\n                    })(\n                        <InputNumber placeholder=\"Unit Cost\"/>\n                    )}\n                </Form.Item>\n            }, {\n                title: 'Total Cost',\n                key: 'total_cost',\n                dataIndex: 'total_cost',\n                render: (item, record) => <span>--</span>\n            }]);\n        } else if (this.state.classType == CONSUME_STOCK) {\n            consumeRow = consumeRow.concat([{\n                title: 'Batch',\n                key: 'batch',\n                dataIndex: 'batch',\n                render: (item, record) => <Form.Item\n                    key={`batch[${record._id}]`}\n                    {...formItemLayout}>\n                    {getFieldDecorator(`batch[${record._id}]`, {\n                        validateTrigger: ['onChange', 'onBlur'],\n                        rules: [{\n                            required: true,\n                            message: \"This field is required.\",\n                        }],\n                    })(\n                        <Select placeholder=\"Batch Number\"\n                                onChange={(value) => that.changeMaxQuantityforConsume(record._id, value)}>\n                            {record.item_type_stock.item_stock.map(stock =>\n                                <Select.Option value={stock.batch_number}>\n                                    #{stock.batch_number} ({stock.quantity})\n                                </Select.Option>)}\n                        </Select>\n                    )}\n                </Form.Item>\n            }, {\n                title: 'Quantity',\n                key: 'quantity',\n                dataIndex: 'quantity',\n                render: (item, record) => <Form.Item\n                    key={`quantity[${record._id}]`}\n                    {...formItemLayout}>\n                    {getFieldDecorator(`quantity[${record._id}]`, {\n                        validateTrigger: ['onChange', 'onBlur'],\n                        rules: [{\n                            required: true,\n                            message: \"This field is required.\",\n                        }],\n                    })(\n                        <InputNumber min={0} max={this.state.maxQuantityforConsume[record._id]} placeholder=\"quantity\"/>\n                    )}\n                </Form.Item>\n            },]);\n        }\n        consumeRow = consumeRow.concat([{\n            title: 'Action',\n            key: '_id',\n            dataIndex: '_id',\n            render: (value, record) => <a onClick={() => that.remove(record._id)}>Delete</a>\n        }]);\n        return <div>\n            <Card title={this.state.classType + \" Stock\"}>\n                <Row gutter={16}>\n                    <Col span={7}>\n                        <Tabs size=\"small\" type=\"card\">\n                            {INVENTORY_ITEM_TYPE.map(itemType => <TabPane tab={itemType.label} key={itemType.value}>\n                                <List size={\"small\"}\n                                      itemLayout=\"horizontal\"\n                                      dataSource={this.state.items ? this.state.items[itemType.value] : []}\n                                      renderItem={item => (\n                                          <List.Item>\n                                              <List.Item.Meta\n                                                  title={item.name}\n                                                  description={item.item_type_stock.item_stock && item.item_type_stock.item_stock.map((stock) =>\n                                                      <span>#{stock.batch_number}({stock.quantity})<br/></span>)}/>\n                                              <Button type=\"primary\" size=\"small\" shape=\"circle\"\n                                                      onClick={() => this.add(item)} icon={\"arrow-right\"}/>\n                                          </List.Item>)}/>\n                            </TabPane>)}\n                        </Tabs>\n                    </Col>\n                    <Col span={17}>\n                        <Form onSubmit={this.handleSubmit}>\n                            <Table pagination={false}\n                                   bordered={true}\n                                   dataSource={this.state.tableFormValues}\n                                   columns={consumeRow}/>\n                            {/*<List>{formItems}</List>*/}\n                            <Form.Item {...formItemLayoutWithOutLabel}>\n                                <Button type=\"primary\" htmlType=\"submit\">Submit</Button>\n                            </Form.Item>\n                        </Form>\n\n                    </Col>\n                </Row>\n            </Card>\n\n        </div>\n\n    }\n}\n\nexport default Form.create()(AddOrConsumeStock);\n"]},"metadata":{},"sourceType":"module"}