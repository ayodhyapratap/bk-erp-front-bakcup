{"ast":null,"code":"import _classCallCheck from \"/home/shivam/WorkSpace/bk-erp-front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/shivam/WorkSpace/bk-erp-front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/shivam/WorkSpace/bk-erp-front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/shivam/WorkSpace/bk-erp-front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/shivam/WorkSpace/bk-erp-front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/home/shivam/WorkSpace/bk-erp-front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/home/shivam/WorkSpace/bk-erp-front/src/app/components/patients/prescriptions/PatientPrescriptions.js\";\nimport React from \"react\";\nimport { Avatar, Input, Checkbox, Divider, Table, Col, Button, Form, Row, Card, Icon, Skeleton } from \"antd\";\nimport { Link } from \"react-router-dom\";\nimport { PRESCRIPTIONS_API, DRUG_CATALOG, PATIENT_PROFILE } from \"../../../constants/api\";\nimport { getAPI, interpolate, displayMessage } from \"../../../utils/common\";\nimport moment from \"moment\";\nimport AddorEditPatientPrescriptions from './AddorEditPatientPrescriptions';\nimport { Redirect, Switch, Route } from \"react-router\";\n\nvar PatientPrescriptions =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(PatientPrescriptions, _React$Component);\n\n  function PatientPrescriptions(props) {\n    var _this;\n\n    _classCallCheck(this, PatientPrescriptions);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(PatientPrescriptions).call(this, props));\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(PatientPrescriptions).call(this, props));\n    _this.state = {\n      currentPatient: _this.props.currentPatient,\n      active_practiceId: _this.props.active_practiceId,\n      prescription: [],\n      drug_catalog: null,\n      editPrescription: null\n    };\n    _this.loadPrescriptions = _this.loadPrescriptions.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.loadDrugCatalog = _this.loadDrugCatalog.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.editPrescriptionData = _this.editPrescriptionData.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(PatientPrescriptions, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      if (this.props.match.params.id) {\n        this.loadPrescriptions();\n        this.loadDrugCatalog();\n      }\n    }\n  }, {\n    key: \"loadPrescriptions\",\n    value: function loadPrescriptions() {\n      var that = this;\n\n      var successFn = function successFn(data) {\n        that.setState({\n          prescription: data\n        });\n      };\n\n      var errorFn = function errorFn() {};\n\n      getAPI(interpolate(PRESCRIPTIONS_API, [this.props.match.params.id]), successFn, errorFn);\n    }\n  }, {\n    key: \"loadDrugCatalog\",\n    value: function loadDrugCatalog() {\n      var that = this;\n\n      var successFn = function successFn(data) {\n        that.setState({\n          drug_catalog: data\n        });\n      };\n\n      var errorFn = function errorFn() {};\n\n      getAPI(interpolate(DRUG_CATALOG, [this.props.active_practiceId]), successFn, errorFn);\n    }\n  }, {\n    key: \"editPrescriptionData\",\n    value: function editPrescriptionData(record) {\n      this.setState({\n        editPrescription: record\n      });\n      var id = this.props.match.params.id;\n      this.props.history.push(\"/patient/\" + id + \"/emr/prescriptions/edit\");\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var drugs = {};\n\n      if (this.state.drug_catalog) {\n        this.state.drug_catalog.forEach(function (drug) {\n          drugs[drug.id] = drug.name + \",\" + drug.strength;\n        });\n      }\n\n      var columns = [{\n        title: 'Time',\n        dataIndex: 'created_at',\n        key: 'name',\n        render: function render(created_at) {\n          return React.createElement(\"span\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 82\n            },\n            __self: this\n          }, moment(created_at).format('LLL'));\n        }\n      }, {\n        title: 'Drug',\n        key: 'drug',\n        render: function render(text, record) {\n          return React.createElement(\"span\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 87\n            },\n            __self: this\n          }, \" \", drugs[record.drug]);\n        }\n      }, {\n        title: 'Quantity',\n        dataIndex: 'qunatity',\n        key: 'quantity'\n      }, {\n        title: 'Cost per  Unit',\n        dataIndex: 'cost',\n        key: 'cost'\n      }, {\n        title: 'Active',\n        key: 'is_active',\n        render: function render(text, record) {\n          return React.createElement(Checkbox, {\n            checked: record.is_active,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 101\n            },\n            __self: this\n          });\n        }\n      }, {\n        title: 'Completed',\n        key: 'is_completed',\n        render: function render(text, record) {\n          return React.createElement(Checkbox, {\n            checked: record.is_completed,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 107\n            },\n            __self: this\n          });\n        }\n      }, {\n        title: 'Action',\n        key: 'action',\n        render: function render(text, record) {\n          return React.createElement(\"span\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 113\n            },\n            __self: this\n          }, React.createElement(\"a\", {\n            onClick: function onClick() {\n              return _this2.editPrescriptionData(record);\n            },\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 114\n            },\n            __self: this\n          }, \"Edit\"), React.createElement(Divider, {\n            type: \"vertical\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 115\n            },\n            __self: this\n          }), React.createElement(\"a\", {\n            href: \"javascript:;\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 116\n            },\n            __self: this\n          }, \"Delete\"));\n        }\n      }];\n\n      if (this.props.match.params.id) {\n        return React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 122\n          },\n          __self: this\n        }, React.createElement(Switch, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 122\n          },\n          __self: this\n        }, React.createElement(Route, {\n          exact: true,\n          path: \"/patient/:id/emr/prescriptions/add\",\n          render: function render(route) {\n            return React.createElement(AddorEditPatientPrescriptions, Object.assign({}, _this2.state, {\n              loadPrescriptions: _this2.loadPrescriptions()\n            }, route, {\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 124\n              },\n              __self: this\n            }));\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 123\n          },\n          __self: this\n        }), React.createElement(Route, {\n          exact: true,\n          path: \"/patient/:id/emr/prescriptions/edit\",\n          render: function render(route) {\n            return React.createElement(AddorEditPatientPrescriptions, Object.assign({}, _this2.state, route, {\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 126\n              },\n              __self: this\n            }));\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 125\n          },\n          __self: this\n        }), React.createElement(Card, {\n          title: this.state.currentPatient ? this.state.currentPatient.name + \" prescriptions\" : \"prescriptions\",\n          extra: React.createElement(Button.Group, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 127\n            },\n            __self: this\n          }, React.createElement(Link, {\n            to: \"/patient/\" + this.props.match.params.id + \"/emr/prescriptions/add\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 128\n            },\n            __self: this\n          }, React.createElement(Button, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 128\n            },\n            __self: this\n          }, React.createElement(Icon, {\n            type: \"plus\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 128\n            },\n            __self: this\n          }), \"Add\"))),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 127\n          },\n          __self: this\n        }, React.createElement(Table, {\n          columns: columns,\n          dataSource: this.state.prescription,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 131\n          },\n          __self: this\n        }))));\n      } else {\n        return React.createElement(Card, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 139\n          },\n          __self: this\n        }, React.createElement(\"h2\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 140\n          },\n          __self: this\n        }, \" select patient to further continue\"));\n      }\n    }\n  }]);\n\n  return PatientPrescriptions;\n}(React.Component);\n\nexport default PatientPrescriptions;","map":{"version":3,"sources":["/home/shivam/WorkSpace/bk-erp-front/src/app/components/patients/prescriptions/PatientPrescriptions.js"],"names":["React","Avatar","Input","Checkbox","Divider","Table","Col","Button","Form","Row","Card","Icon","Skeleton","Link","PRESCRIPTIONS_API","DRUG_CATALOG","PATIENT_PROFILE","getAPI","interpolate","displayMessage","moment","AddorEditPatientPrescriptions","Redirect","Switch","Route","PatientPrescriptions","props","state","currentPatient","active_practiceId","prescription","drug_catalog","editPrescription","loadPrescriptions","bind","loadDrugCatalog","editPrescriptionData","match","params","id","that","successFn","data","setState","errorFn","record","history","push","drugs","forEach","drug","name","strength","columns","title","dataIndex","key","render","created_at","format","text","is_active","is_completed","route","Component"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport {Avatar, Input, Checkbox, Divider, Table, Col,Button, Form,  Row, Card, Icon, Skeleton} from \"antd\";\nimport {Link} from \"react-router-dom\";\nimport {PRESCRIPTIONS_API,DRUG_CATALOG, PATIENT_PROFILE} from \"../../../constants/api\";\nimport {getAPI,interpolate, displayMessage} from \"../../../utils/common\";\nimport  moment from \"moment\";\nimport AddorEditPatientPrescriptions from './AddorEditPatientPrescriptions';\nimport {Redirect,Switch, Route} from \"react-router\";\n\n\nclass PatientPrescriptions extends React.Component{\n    constructor(props){\n        super(props);\n        super(props);\n        this.state = {\n          currentPatient:this.props.currentPatient,\n          active_practiceId:this.props.active_practiceId,\n          prescription:[],\n          drug_catalog:null,\n          editPrescription: null,\n        }\n        this.loadPrescriptions =this.loadPrescriptions.bind(this);\n        this.loadDrugCatalog =this.loadDrugCatalog.bind(this);\n        this.editPrescriptionData =this.editPrescriptionData.bind(this);\n\n    }\n    componentDidMount(){\n      if(this.props.match.params.id){\n      this.loadPrescriptions();\n      this.loadDrugCatalog();\n    }\n\n    }\n    loadPrescriptions(){\n      let that = this;\n      let successFn =function (data){\n        that.setState({\n          prescription:data\n        })\n      }\n      let errorFn = function (){\n\n      }\n      getAPI(interpolate(PRESCRIPTIONS_API,[this.props.match.params.id]), successFn, errorFn)\n    }\n    loadDrugCatalog(){\n      let that = this;\n      let successFn =function (data){\n        that.setState({\n          drug_catalog:data\n        })\n\n      }\n      let errorFn = function (){\n\n      }\n      getAPI(interpolate(DRUG_CATALOG,[this.props.active_practiceId]), successFn, errorFn)\n    }\n\n    editPrescriptionData(record){\n        this.setState({\n            editPrescription:record,\n        });\n        let id=this.props.match.params.id\n        this.props.history.push(\"/patient/\"+id+\"/emr/prescriptions/edit\")\n\n    }\n\n    render(){\n      const drugs={}\n      if(this.state.drug_catalog){\n\n        this.state.drug_catalog.forEach(function(drug){\n          drugs[drug.id]=(drug.name+\",\"+drug.strength)\n        })\n      }\n\n      const columns = [{\n            title: 'Time',\n            dataIndex: 'created_at',\n            key: 'name',\n            render: created_at =><span>{moment(created_at).format('LLL')}</span>,\n          }, {\n            title: 'Drug',\n            key: 'drug',\n            render:(text, record) => (\n              <span> {drugs[record.drug]}</span>\n            )\n          }, {\n            title: 'Quantity',\n            dataIndex: 'qunatity',\n            key: 'quantity',\n          }, {\n            title: 'Cost per  Unit',\n            dataIndex: 'cost',\n            key: 'cost',\n          }, {\n            title: 'Active',\n            key: 'is_active',\n            render:(text, record) => (\n              <Checkbox checked={record.is_active}/>\n            )\n          },  {\n            title: 'Completed',\n            key: 'is_completed',\n            render:(text, record) => (\n              <Checkbox checked={record.is_completed}/>\n            )\n          }, {\n            title: 'Action',\n            key: 'action',\n            render: (text, record) => (\n              <span>\n                <a onClick={()=>this.editPrescriptionData(record)}>Edit</a>\n                <Divider type=\"vertical\" />\n                <a href=\"javascript:;\">Delete</a>\n              </span>\n            ),\n          }];\n\n      if(this.props.match.params.id){\n      return <div><Switch>\n      <Route exact path='/patient/:id/emr/prescriptions/add'\n             render={(route) => <AddorEditPatientPrescriptions{...this.state} loadPrescriptions={this.loadPrescriptions()} {...route}/>}/>\n      <Route exact path='/patient/:id/emr/prescriptions/edit'\n             render={(route) => <AddorEditPatientPrescriptions {...this.state} {...route}/>}/>\n      <Card title={ this.state.currentPatient?this.state.currentPatient.name + \" prescriptions\":\"prescriptions\"}  extra={<Button.Group>\n          <Link to={\"/patient/\"+this.props.match.params.id+\"/emr/prescriptions/add\"}><Button><Icon type=\"plus\"/>Add</Button></Link>\n      </Button.Group>}>\n\n      <Table columns={columns}  dataSource={this.state.prescription} />\n\n      </Card>\n      </Switch>\n\n      </div>\n    }\n    else{\n      return <Card>\n              <h2> select patient to further continue</h2>\n              </Card>\n    }\n\n    }\n}\nexport default PatientPrescriptions;\n"]},"metadata":{},"sourceType":"module"}