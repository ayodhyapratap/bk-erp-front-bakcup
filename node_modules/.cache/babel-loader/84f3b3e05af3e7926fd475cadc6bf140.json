{"ast":null,"code":"(function (root, factory) {\n  if (typeof exports !== 'undefined') {\n    if (typeof module !== 'undefined' && module.exports) {\n      exports = module.exports = factory(root, exports);\n    }\n  } else if (typeof define === 'function' && define.amd) {\n    define(['exports'], function (exports) {\n      root.Lockr = factory(root, exports);\n    });\n  } else {\n    root.Lockr = factory(root, {});\n  }\n})(this, function (root, Lockr) {\n  'use strict';\n\n  if (!Array.prototype.indexOf) {\n    Array.prototype.indexOf = function (elt\n    /*, from*/\n    ) {\n      var len = this.length >>> 0;\n      var from = Number(arguments[1]) || 0;\n      from = from < 0 ? Math.ceil(from) : Math.floor(from);\n      if (from < 0) from += len;\n\n      for (; from < len; from++) {\n        if (from in this && this[from] === elt) return from;\n      }\n\n      return -1;\n    };\n  }\n\n  Lockr.prefix = \"\";\n\n  Lockr._getPrefixedKey = function (key, options) {\n    options = options || {};\n\n    if (options.noPrefix) {\n      return key;\n    } else {\n      return this.prefix + key;\n    }\n  };\n\n  Lockr.set = function (key, value, options) {\n    var query_key = this._getPrefixedKey(key, options);\n\n    try {\n      localStorage.setItem(query_key, JSON.stringify({\n        \"data\": value\n      }));\n    } catch (e) {\n      if (console) console.warn(\"Lockr didn't successfully save the '{\" + key + \": \" + value + \"}' pair, because the localStorage is full.\");\n    }\n  };\n\n  Lockr.get = function (key, missing, options) {\n    var query_key = this._getPrefixedKey(key, options),\n        value;\n\n    try {\n      value = JSON.parse(localStorage.getItem(query_key));\n    } catch (e) {\n      if (localStorage[query_key]) {\n        value = {\n          data: localStorage.getItem(query_key)\n        };\n      } else {\n        value = null;\n      }\n    }\n\n    if (!value) {\n      return missing;\n    } else if (typeof value === 'object' && typeof value.data !== 'undefined') {\n      return value.data;\n    }\n  };\n\n  Lockr.sadd = function (key, value, options) {\n    var query_key = this._getPrefixedKey(key, options),\n        json;\n\n    var values = Lockr.smembers(key);\n\n    if (values.indexOf(value) > -1) {\n      return null;\n    }\n\n    try {\n      values.push(value);\n      json = JSON.stringify({\n        \"data\": values\n      });\n      localStorage.setItem(query_key, json);\n    } catch (e) {\n      console.log(e);\n      if (console) console.warn(\"Lockr didn't successfully add the \" + value + \" to \" + key + \" set, because the localStorage is full.\");\n    }\n  };\n\n  Lockr.smembers = function (key, options) {\n    var query_key = this._getPrefixedKey(key, options),\n        value;\n\n    try {\n      value = JSON.parse(localStorage.getItem(query_key));\n    } catch (e) {\n      value = null;\n    }\n\n    return value && value.data ? value.data : [];\n  };\n\n  Lockr.sismember = function (key, value, options) {\n    return Lockr.smembers(key).indexOf(value) > -1;\n  };\n\n  Lockr.keys = function () {\n    var keys = [];\n    var allKeys = Object.keys(localStorage);\n\n    if (Lockr.prefix.length === 0) {\n      return allKeys;\n    }\n\n    allKeys.forEach(function (key) {\n      if (key.indexOf(Lockr.prefix) !== -1) {\n        keys.push(key.replace(Lockr.prefix, ''));\n      }\n    });\n    return keys;\n  };\n\n  Lockr.getAll = function (includeKeys) {\n    var keys = Lockr.keys();\n\n    if (includeKeys) {\n      return keys.reduce(function (accum, key) {\n        var tempObj = {};\n        tempObj[key] = Lockr.get(key);\n        accum.push(tempObj);\n        return accum;\n      }, []);\n    }\n\n    return keys.map(function (key) {\n      return Lockr.get(key);\n    });\n  };\n\n  Lockr.srem = function (key, value, options) {\n    var query_key = this._getPrefixedKey(key, options),\n        json,\n        index;\n\n    var values = Lockr.smembers(key, value);\n    index = values.indexOf(value);\n    if (index > -1) values.splice(index, 1);\n    json = JSON.stringify({\n      \"data\": values\n    });\n\n    try {\n      localStorage.setItem(query_key, json);\n    } catch (e) {\n      if (console) console.warn(\"Lockr couldn't remove the \" + value + \" from the set \" + key);\n    }\n  };\n\n  Lockr.rm = function (key) {\n    var queryKey = this._getPrefixedKey(key);\n\n    localStorage.removeItem(queryKey);\n  };\n\n  Lockr.flush = function () {\n    if (Lockr.prefix.length) {\n      Lockr.keys().forEach(function (key) {\n        localStorage.removeItem(Lockr._getPrefixedKey(key));\n      });\n    } else {\n      localStorage.clear();\n    }\n  };\n\n  return Lockr;\n});","map":null,"metadata":{},"sourceType":"script"}